
ECE_554_ProjectBaseline2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b95c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000386c  0801bc2c  0801bc2c  0002bc2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801f498  0801f498  0002f498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801f4a0  0801f4a0  0002f4a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801f4a4  0801f4a4  0002f4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0801f4a8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00008200  240000a0  0801f548  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240082a0  0801f548  000382a0  2**0
                  ALLOC
  9 .lwip_sec     000018d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0007a81e  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000bc21  00000000  00000000  000aa8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003008  00000000  00000000  000b6510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002d80  00000000  00000000  000b9518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004a513  00000000  00000000  000bc298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004d765  00000000  00000000  001067ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00182b09  00000000  00000000  00153f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002d6a19  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000d0c0  00000000  00000000  002d6a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801bc14 	.word	0x0801bc14

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a4 	.word	0x240000a4
 800030c:	0801bc14 	.word	0x0801bc14

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b96e 	b.w	80006d4 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468c      	mov	ip, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	f040 8083 	bne.w	8000526 <__udivmoddi4+0x116>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d947      	bls.n	80004b6 <__udivmoddi4+0xa6>
 8000426:	fab2 f282 	clz	r2, r2
 800042a:	b142      	cbz	r2, 800043e <__udivmoddi4+0x2e>
 800042c:	f1c2 0020 	rsb	r0, r2, #32
 8000430:	fa24 f000 	lsr.w	r0, r4, r0
 8000434:	4091      	lsls	r1, r2
 8000436:	4097      	lsls	r7, r2
 8000438:	ea40 0c01 	orr.w	ip, r0, r1
 800043c:	4094      	lsls	r4, r2
 800043e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fbbc f6f8 	udiv	r6, ip, r8
 8000448:	fa1f fe87 	uxth.w	lr, r7
 800044c:	fb08 c116 	mls	r1, r8, r6, ip
 8000450:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000454:	fb06 f10e 	mul.w	r1, r6, lr
 8000458:	4299      	cmp	r1, r3
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x60>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000462:	f080 8119 	bcs.w	8000698 <__udivmoddi4+0x288>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 8116 	bls.w	8000698 <__udivmoddi4+0x288>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000480:	fb00 fe0e 	mul.w	lr, r0, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x8c>
 8000488:	193c      	adds	r4, r7, r4
 800048a:	f100 33ff 	add.w	r3, r0, #4294967295
 800048e:	f080 8105 	bcs.w	800069c <__udivmoddi4+0x28c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f240 8102 	bls.w	800069c <__udivmoddi4+0x28c>
 8000498:	3802      	subs	r0, #2
 800049a:	443c      	add	r4, r7
 800049c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	2600      	movs	r6, #0
 80004a6:	b11d      	cbz	r5, 80004b0 <__udivmoddi4+0xa0>
 80004a8:	40d4      	lsrs	r4, r2
 80004aa:	2300      	movs	r3, #0
 80004ac:	e9c5 4300 	strd	r4, r3, [r5]
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	b902      	cbnz	r2, 80004ba <__udivmoddi4+0xaa>
 80004b8:	deff      	udf	#255	; 0xff
 80004ba:	fab2 f282 	clz	r2, r2
 80004be:	2a00      	cmp	r2, #0
 80004c0:	d150      	bne.n	8000564 <__udivmoddi4+0x154>
 80004c2:	1bcb      	subs	r3, r1, r7
 80004c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c8:	fa1f f887 	uxth.w	r8, r7
 80004cc:	2601      	movs	r6, #1
 80004ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80004d2:	0c21      	lsrs	r1, r4, #16
 80004d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004dc:	fb08 f30c 	mul.w	r3, r8, ip
 80004e0:	428b      	cmp	r3, r1
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0xe4>
 80004e4:	1879      	adds	r1, r7, r1
 80004e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0xe2>
 80004ec:	428b      	cmp	r3, r1
 80004ee:	f200 80e9 	bhi.w	80006c4 <__udivmoddi4+0x2b4>
 80004f2:	4684      	mov	ip, r0
 80004f4:	1ac9      	subs	r1, r1, r3
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000500:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000504:	fb08 f800 	mul.w	r8, r8, r0
 8000508:	45a0      	cmp	r8, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x10c>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x10a>
 8000514:	45a0      	cmp	r8, r4
 8000516:	f200 80d9 	bhi.w	80006cc <__udivmoddi4+0x2bc>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 0408 	sub.w	r4, r4, r8
 8000520:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000524:	e7bf      	b.n	80004a6 <__udivmoddi4+0x96>
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0x12e>
 800052a:	2d00      	cmp	r5, #0
 800052c:	f000 80b1 	beq.w	8000692 <__udivmoddi4+0x282>
 8000530:	2600      	movs	r6, #0
 8000532:	e9c5 0100 	strd	r0, r1, [r5]
 8000536:	4630      	mov	r0, r6
 8000538:	4631      	mov	r1, r6
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f683 	clz	r6, r3
 8000542:	2e00      	cmp	r6, #0
 8000544:	d14a      	bne.n	80005dc <__udivmoddi4+0x1cc>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0x140>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80b8 	bhi.w	80006c0 <__udivmoddi4+0x2b0>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0103 	sbc.w	r1, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	468c      	mov	ip, r1
 800055a:	2d00      	cmp	r5, #0
 800055c:	d0a8      	beq.n	80004b0 <__udivmoddi4+0xa0>
 800055e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000562:	e7a5      	b.n	80004b0 <__udivmoddi4+0xa0>
 8000564:	f1c2 0320 	rsb	r3, r2, #32
 8000568:	fa20 f603 	lsr.w	r6, r0, r3
 800056c:	4097      	lsls	r7, r2
 800056e:	fa01 f002 	lsl.w	r0, r1, r2
 8000572:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000576:	40d9      	lsrs	r1, r3
 8000578:	4330      	orrs	r0, r6
 800057a:	0c03      	lsrs	r3, r0, #16
 800057c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000580:	fa1f f887 	uxth.w	r8, r7
 8000584:	fb0e 1116 	mls	r1, lr, r6, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb06 f108 	mul.w	r1, r6, r8
 8000590:	4299      	cmp	r1, r3
 8000592:	fa04 f402 	lsl.w	r4, r4, r2
 8000596:	d909      	bls.n	80005ac <__udivmoddi4+0x19c>
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	f106 3cff 	add.w	ip, r6, #4294967295
 800059e:	f080 808d 	bcs.w	80006bc <__udivmoddi4+0x2ac>
 80005a2:	4299      	cmp	r1, r3
 80005a4:	f240 808a 	bls.w	80006bc <__udivmoddi4+0x2ac>
 80005a8:	3e02      	subs	r6, #2
 80005aa:	443b      	add	r3, r7
 80005ac:	1a5b      	subs	r3, r3, r1
 80005ae:	b281      	uxth	r1, r0
 80005b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80005b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005bc:	fb00 f308 	mul.w	r3, r0, r8
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d907      	bls.n	80005d4 <__udivmoddi4+0x1c4>
 80005c4:	1879      	adds	r1, r7, r1
 80005c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005ca:	d273      	bcs.n	80006b4 <__udivmoddi4+0x2a4>
 80005cc:	428b      	cmp	r3, r1
 80005ce:	d971      	bls.n	80006b4 <__udivmoddi4+0x2a4>
 80005d0:	3802      	subs	r0, #2
 80005d2:	4439      	add	r1, r7
 80005d4:	1acb      	subs	r3, r1, r3
 80005d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005da:	e778      	b.n	80004ce <__udivmoddi4+0xbe>
 80005dc:	f1c6 0c20 	rsb	ip, r6, #32
 80005e0:	fa03 f406 	lsl.w	r4, r3, r6
 80005e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005e8:	431c      	orrs	r4, r3
 80005ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ee:	fa01 f306 	lsl.w	r3, r1, r6
 80005f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005fa:	431f      	orrs	r7, r3
 80005fc:	0c3b      	lsrs	r3, r7, #16
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fa1f f884 	uxth.w	r8, r4
 8000606:	fb0e 1119 	mls	r1, lr, r9, r1
 800060a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800060e:	fb09 fa08 	mul.w	sl, r9, r8
 8000612:	458a      	cmp	sl, r1
 8000614:	fa02 f206 	lsl.w	r2, r2, r6
 8000618:	fa00 f306 	lsl.w	r3, r0, r6
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x220>
 800061e:	1861      	adds	r1, r4, r1
 8000620:	f109 30ff 	add.w	r0, r9, #4294967295
 8000624:	d248      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 8000626:	458a      	cmp	sl, r1
 8000628:	d946      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4421      	add	r1, r4
 8000630:	eba1 010a 	sub.w	r1, r1, sl
 8000634:	b2bf      	uxth	r7, r7
 8000636:	fbb1 f0fe 	udiv	r0, r1, lr
 800063a:	fb0e 1110 	mls	r1, lr, r0, r1
 800063e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000642:	fb00 f808 	mul.w	r8, r0, r8
 8000646:	45b8      	cmp	r8, r7
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x24a>
 800064a:	19e7      	adds	r7, r4, r7
 800064c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000650:	d22e      	bcs.n	80006b0 <__udivmoddi4+0x2a0>
 8000652:	45b8      	cmp	r8, r7
 8000654:	d92c      	bls.n	80006b0 <__udivmoddi4+0x2a0>
 8000656:	3802      	subs	r0, #2
 8000658:	4427      	add	r7, r4
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	eba7 0708 	sub.w	r7, r7, r8
 8000662:	fba0 8902 	umull	r8, r9, r0, r2
 8000666:	454f      	cmp	r7, r9
 8000668:	46c6      	mov	lr, r8
 800066a:	4649      	mov	r1, r9
 800066c:	d31a      	bcc.n	80006a4 <__udivmoddi4+0x294>
 800066e:	d017      	beq.n	80006a0 <__udivmoddi4+0x290>
 8000670:	b15d      	cbz	r5, 800068a <__udivmoddi4+0x27a>
 8000672:	ebb3 020e 	subs.w	r2, r3, lr
 8000676:	eb67 0701 	sbc.w	r7, r7, r1
 800067a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800067e:	40f2      	lsrs	r2, r6
 8000680:	ea4c 0202 	orr.w	r2, ip, r2
 8000684:	40f7      	lsrs	r7, r6
 8000686:	e9c5 2700 	strd	r2, r7, [r5]
 800068a:	2600      	movs	r6, #0
 800068c:	4631      	mov	r1, r6
 800068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000692:	462e      	mov	r6, r5
 8000694:	4628      	mov	r0, r5
 8000696:	e70b      	b.n	80004b0 <__udivmoddi4+0xa0>
 8000698:	4606      	mov	r6, r0
 800069a:	e6e9      	b.n	8000470 <__udivmoddi4+0x60>
 800069c:	4618      	mov	r0, r3
 800069e:	e6fd      	b.n	800049c <__udivmoddi4+0x8c>
 80006a0:	4543      	cmp	r3, r8
 80006a2:	d2e5      	bcs.n	8000670 <__udivmoddi4+0x260>
 80006a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80006a8:	eb69 0104 	sbc.w	r1, r9, r4
 80006ac:	3801      	subs	r0, #1
 80006ae:	e7df      	b.n	8000670 <__udivmoddi4+0x260>
 80006b0:	4608      	mov	r0, r1
 80006b2:	e7d2      	b.n	800065a <__udivmoddi4+0x24a>
 80006b4:	4660      	mov	r0, ip
 80006b6:	e78d      	b.n	80005d4 <__udivmoddi4+0x1c4>
 80006b8:	4681      	mov	r9, r0
 80006ba:	e7b9      	b.n	8000630 <__udivmoddi4+0x220>
 80006bc:	4666      	mov	r6, ip
 80006be:	e775      	b.n	80005ac <__udivmoddi4+0x19c>
 80006c0:	4630      	mov	r0, r6
 80006c2:	e74a      	b.n	800055a <__udivmoddi4+0x14a>
 80006c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c8:	4439      	add	r1, r7
 80006ca:	e713      	b.n	80004f4 <__udivmoddi4+0xe4>
 80006cc:	3802      	subs	r0, #2
 80006ce:	443c      	add	r4, r7
 80006d0:	e724      	b.n	800051c <__udivmoddi4+0x10c>
 80006d2:	bf00      	nop

080006d4 <__aeabi_idiv0>:
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b085      	sub	sp, #20
 80006dc:	af02      	add	r7, sp, #8
 80006de:	4604      	mov	r4, r0
 80006e0:	4608      	mov	r0, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	461a      	mov	r2, r3
 80006e6:	4623      	mov	r3, r4
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	4603      	mov	r3, r0
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	460b      	mov	r3, r1
 80006f0:	807b      	strh	r3, [r7, #2]
 80006f2:	4613      	mov	r3, r2
 80006f4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006f6:	88f8      	ldrh	r0, [r7, #6]
 80006f8:	88b9      	ldrh	r1, [r7, #4]
 80006fa:	887a      	ldrh	r2, [r7, #2]
 80006fc:	883c      	ldrh	r4, [r7, #0]
 80006fe:	8b3b      	ldrh	r3, [r7, #24]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	f000 faa6 	bl	8000c54 <ST7735_FillRectangle>
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bd90      	pop	{r4, r7, pc}

08000710 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af02      	add	r7, sp, #8
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <fillScreen+0x2c>)
 800071c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <fillScreen+0x30>)
 8000722:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	460b      	mov	r3, r1
 800072c:	2100      	movs	r1, #0
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff ffd2 	bl	80006d8 <fillRect>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	24004c58 	.word	0x24004c58
 8000740:	24004c5c 	.word	0x24004c5c

08000744 <print_to_serial>:
#include "Globals.h"


/* Function prototypes -----------------------------------------------*/
void print_to_serial(char *myString)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b09c      	sub	sp, #112	; 0x70
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	4618      	mov	r0, r3
 8000754:	f01a fc27 	bl	801afa6 <strcpy>
	HAL_UART_Transmit(&huart3, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fde1 	bl	8000324 <strlen>
 8000762:	4603      	mov	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	f107 010c 	add.w	r1, r7, #12
 800076a:	f04f 33ff 	mov.w	r3, #4294967295
 800076e:	4803      	ldr	r0, [pc, #12]	; (800077c <print_to_serial+0x38>)
 8000770:	f009 f9a8 	bl	8009ac4 <HAL_UART_Transmit>

}
 8000774:	bf00      	nop
 8000776:	3770      	adds	r7, #112	; 0x70
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	24004ec0 	.word	0x24004ec0

08000780 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <ST7735_Select+0x14>)
 800078a:	f005 fec7 	bl	800651c <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58020800 	.word	0x58020800

08000798 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2101      	movs	r1, #1
 80007a0:	4802      	ldr	r0, [pc, #8]	; (80007ac <ST7735_Unselect+0x14>)
 80007a2:	f005 febb 	bl	800651c <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	58020800 	.word	0x58020800

080007b0 <ST7735_Reset>:

void ST7735_Reset()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2108      	movs	r1, #8
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <ST7735_Reset+0x24>)
 80007ba:	f005 feaf 	bl	800651c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80007be:	2005      	movs	r0, #5
 80007c0:	f002 f98c 	bl	8002adc <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	2108      	movs	r1, #8
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <ST7735_Reset+0x24>)
 80007ca:	f005 fea7 	bl	800651c <HAL_GPIO_WritePin>
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	58020800 	.word	0x58020800

080007d8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <ST7735_WriteCommand+0x2c>)
 80007e8:	f005 fe98 	bl	800651c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007ec:	1df9      	adds	r1, r7, #7
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295
 80007f2:	2201      	movs	r2, #1
 80007f4:	4804      	ldr	r0, [pc, #16]	; (8000808 <ST7735_WriteCommand+0x30>)
 80007f6:	f008 fab5 	bl	8008d64 <HAL_SPI_Transmit>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	58020000 	.word	0x58020000
 8000808:	24004da0 	.word	0x24004da0

0800080c <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000816:	2201      	movs	r2, #1
 8000818:	2108      	movs	r1, #8
 800081a:	4807      	ldr	r0, [pc, #28]	; (8000838 <ST7735_WriteData+0x2c>)
 800081c:	f005 fe7e 	bl	800651c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	b29a      	uxth	r2, r3
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <ST7735_WriteData+0x30>)
 800082c:	f008 fa9a 	bl	8008d64 <HAL_SPI_Transmit>
}
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	58020000 	.word	0x58020000
 800083c:	24004da0 	.word	0x24004da0

08000840 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1c5a      	adds	r2, r3, #1
 800084c:	607a      	str	r2, [r7, #4]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000852:	e034      	b.n	80008be <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	1c5a      	adds	r2, r3, #1
 8000858:	607a      	str	r2, [r7, #4]
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800085e:	7afb      	ldrb	r3, [r7, #11]
 8000860:	4618      	mov	r0, r3
 8000862:	f7ff ffb9 	bl	80007d8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	1c5a      	adds	r2, r3, #1
 800086a:	607a      	str	r2, [r7, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000870:	7abb      	ldrb	r3, [r7, #10]
 8000872:	b29b      	uxth	r3, r3
 8000874:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000878:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800087a:	7abb      	ldrb	r3, [r7, #10]
 800087c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000880:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000882:	7abb      	ldrb	r3, [r7, #10]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d008      	beq.n	800089a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000888:	7abb      	ldrb	r3, [r7, #10]
 800088a:	4619      	mov	r1, r3
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ffbd 	bl	800080c <ST7735_WriteData>
            addr += numArgs;
 8000892:	7abb      	ldrb	r3, [r7, #10]
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800089a:	89bb      	ldrh	r3, [r7, #12]
 800089c:	2b00      	cmp	r3, #0
 800089e:	d00e      	beq.n	80008be <DisplayInit+0x7e>
            ms = *addr++;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	1c5a      	adds	r2, r3, #1
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80008aa:	89bb      	ldrh	r3, [r7, #12]
 80008ac:	2bff      	cmp	r3, #255	; 0xff
 80008ae:	d102      	bne.n	80008b6 <DisplayInit+0x76>
 80008b0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80008b4:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80008b6:	89bb      	ldrh	r3, [r7, #12]
 80008b8:	4618      	mov	r0, r3
 80008ba:	f002 f90f 	bl	8002adc <HAL_Delay>
    while(numCommands--) {
 80008be:	7bfb      	ldrb	r3, [r7, #15]
 80008c0:	1e5a      	subs	r2, r3, #1
 80008c2:	73fa      	strb	r2, [r7, #15]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d1c5      	bne.n	8000854 <DisplayInit+0x14>
        }
    }
}
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	3710      	adds	r7, #16
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
	...

080008d4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b085      	sub	sp, #20
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4604      	mov	r4, r0
 80008dc:	4608      	mov	r0, r1
 80008de:	4611      	mov	r1, r2
 80008e0:	461a      	mov	r2, r3
 80008e2:	4623      	mov	r3, r4
 80008e4:	71fb      	strb	r3, [r7, #7]
 80008e6:	4603      	mov	r3, r0
 80008e8:	71bb      	strb	r3, [r7, #6]
 80008ea:	460b      	mov	r3, r1
 80008ec:	717b      	strb	r3, [r7, #5]
 80008ee:	4613      	mov	r3, r2
 80008f0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008f2:	202a      	movs	r0, #42	; 0x2a
 80008f4:	f7ff ff70 	bl	80007d8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008f8:	2300      	movs	r3, #0
 80008fa:	733b      	strb	r3, [r7, #12]
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <ST7735_SetAddressWindow+0x88>)
 80008fe:	781a      	ldrb	r2, [r3, #0]
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4413      	add	r3, r2
 8000904:	b2db      	uxtb	r3, r3
 8000906:	737b      	strb	r3, [r7, #13]
 8000908:	2300      	movs	r3, #0
 800090a:	73bb      	strb	r3, [r7, #14]
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <ST7735_SetAddressWindow+0x88>)
 800090e:	781a      	ldrb	r2, [r3, #0]
 8000910:	797b      	ldrb	r3, [r7, #5]
 8000912:	4413      	add	r3, r2
 8000914:	b2db      	uxtb	r3, r3
 8000916:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	2104      	movs	r1, #4
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff ff74 	bl	800080c <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000924:	202b      	movs	r0, #43	; 0x2b
 8000926:	f7ff ff57 	bl	80007d8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <ST7735_SetAddressWindow+0x8c>)
 800092c:	781a      	ldrb	r2, [r3, #0]
 800092e:	79bb      	ldrb	r3, [r7, #6]
 8000930:	4413      	add	r3, r2
 8000932:	b2db      	uxtb	r3, r3
 8000934:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <ST7735_SetAddressWindow+0x8c>)
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	793b      	ldrb	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	b2db      	uxtb	r3, r3
 8000940:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000942:	f107 030c 	add.w	r3, r7, #12
 8000946:	2104      	movs	r1, #4
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ff5f 	bl	800080c <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800094e:	202c      	movs	r0, #44	; 0x2c
 8000950:	f7ff ff42 	bl	80007d8 <ST7735_WriteCommand>
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	24004c50 	.word	0x24004c50
 8000960:	24004c54 	.word	0x24004c54

08000964 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800096e:	f7ff ff07 	bl	8000780 <ST7735_Select>
    ST7735_Reset();
 8000972:	f7ff ff1d 	bl	80007b0 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000976:	480c      	ldr	r0, [pc, #48]	; (80009a8 <ST7735_Init+0x44>)
 8000978:	f7ff ff62 	bl	8000840 <DisplayInit>
    DisplayInit(init_cmds2);
 800097c:	480b      	ldr	r0, [pc, #44]	; (80009ac <ST7735_Init+0x48>)
 800097e:	f7ff ff5f 	bl	8000840 <DisplayInit>
    DisplayInit(init_cmds3);
 8000982:	480b      	ldr	r0, [pc, #44]	; (80009b0 <ST7735_Init+0x4c>)
 8000984:	f7ff ff5c 	bl	8000840 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <ST7735_Init+0x50>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800098e:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <ST7735_Init+0x54>)
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000994:	79fb      	ldrb	r3, [r7, #7]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f810 	bl	80009bc <ST7735_SetRotation>
    ST7735_Unselect();
 800099c:	f7ff fefc 	bl	8000798 <ST7735_Unselect>

}
 80009a0:	bf00      	nop
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	0801e8f8 	.word	0x0801e8f8
 80009ac:	0801e930 	.word	0x0801e930
 80009b0:	0801e940 	.word	0x0801e940
 80009b4:	24004c51 	.word	0x24004c51
 80009b8:	24004c55 	.word	0x24004c55

080009bc <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	f003 0303 	and.w	r3, r3, #3
 80009d0:	b2da      	uxtb	r2, r3
 80009d2:	4b33      	ldr	r3, [pc, #204]	; (8000aa0 <ST7735_SetRotation+0xe4>)
 80009d4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <ST7735_SetRotation+0xe4>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d84e      	bhi.n	8000a7c <ST7735_SetRotation+0xc0>
 80009de:	a201      	add	r2, pc, #4	; (adr r2, 80009e4 <ST7735_SetRotation+0x28>)
 80009e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e4:	080009f5 	.word	0x080009f5
 80009e8:	08000a17 	.word	0x08000a17
 80009ec:	08000a39 	.word	0x08000a39
 80009f0:	08000a5b 	.word	0x08000a5b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009f4:	23c0      	movs	r3, #192	; 0xc0
 80009f6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009f8:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <ST7735_SetRotation+0xe8>)
 80009fa:	22a0      	movs	r2, #160	; 0xa0
 80009fc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009fe:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <ST7735_SetRotation+0xec>)
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 8000a04:	4b29      	ldr	r3, [pc, #164]	; (8000aac <ST7735_SetRotation+0xf0>)
 8000a06:	781a      	ldrb	r2, [r3, #0]
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <ST7735_SetRotation+0xf4>)
 8000a0a:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 8000a0c:	4b29      	ldr	r3, [pc, #164]	; (8000ab4 <ST7735_SetRotation+0xf8>)
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <ST7735_SetRotation+0xfc>)
 8000a12:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a14:	e032      	b.n	8000a7c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a16:	23a0      	movs	r3, #160	; 0xa0
 8000a18:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a1a:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <ST7735_SetRotation+0xec>)
 8000a1c:	22a0      	movs	r2, #160	; 0xa0
 8000a1e:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a20:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <ST7735_SetRotation+0xe8>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a26:	4b21      	ldr	r3, [pc, #132]	; (8000aac <ST7735_SetRotation+0xf0>)
 8000a28:	781a      	ldrb	r2, [r3, #0]
 8000a2a:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <ST7735_SetRotation+0xfc>)
 8000a2c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <ST7735_SetRotation+0xf8>)
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <ST7735_SetRotation+0xf4>)
 8000a34:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a36:	e021      	b.n	8000a7c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <ST7735_SetRotation+0xe8>)
 8000a3e:	22a0      	movs	r2, #160	; 0xa0
 8000a40:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <ST7735_SetRotation+0xec>)
 8000a44:	2280      	movs	r2, #128	; 0x80
 8000a46:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <ST7735_SetRotation+0xf0>)
 8000a4a:	781a      	ldrb	r2, [r3, #0]
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <ST7735_SetRotation+0xf4>)
 8000a4e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a50:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <ST7735_SetRotation+0xf8>)
 8000a52:	781a      	ldrb	r2, [r3, #0]
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <ST7735_SetRotation+0xfc>)
 8000a56:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a58:	e010      	b.n	8000a7c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a5a:	2360      	movs	r3, #96	; 0x60
 8000a5c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a5e:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <ST7735_SetRotation+0xec>)
 8000a60:	22a0      	movs	r2, #160	; 0xa0
 8000a62:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <ST7735_SetRotation+0xe8>)
 8000a66:	2280      	movs	r2, #128	; 0x80
 8000a68:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <ST7735_SetRotation+0xf0>)
 8000a6c:	781a      	ldrb	r2, [r3, #0]
 8000a6e:	4b12      	ldr	r3, [pc, #72]	; (8000ab8 <ST7735_SetRotation+0xfc>)
 8000a70:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <ST7735_SetRotation+0xf8>)
 8000a74:	781a      	ldrb	r2, [r3, #0]
 8000a76:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <ST7735_SetRotation+0xf4>)
 8000a78:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a7a:	bf00      	nop
  }
  ST7735_Select();
 8000a7c:	f7ff fe80 	bl	8000780 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a80:	2036      	movs	r0, #54	; 0x36
 8000a82:	f7ff fea9 	bl	80007d8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a86:	f107 030f 	add.w	r3, r7, #15
 8000a8a:	2101      	movs	r1, #1
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff febd 	bl	800080c <ST7735_WriteData>
  ST7735_Unselect();
 8000a92:	f7ff fe81 	bl	8000798 <ST7735_Unselect>
}
 8000a96:	bf00      	nop
 8000a98:	3710      	adds	r7, #16
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	24004c56 	.word	0x24004c56
 8000aa4:	24004c5c 	.word	0x24004c5c
 8000aa8:	24004c58 	.word	0x24004c58
 8000aac:	24004c51 	.word	0x24004c51
 8000ab0:	24004c50 	.word	0x24004c50
 8000ab4:	24004c55 	.word	0x24004c55
 8000ab8:	24004c54 	.word	0x24004c54

08000abc <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000abc:	b082      	sub	sp, #8
 8000abe:	b590      	push	{r4, r7, lr}
 8000ac0:	b089      	sub	sp, #36	; 0x24
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	637b      	str	r3, [r7, #52]	; 0x34
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	80fb      	strh	r3, [r7, #6]
 8000aca:	460b      	mov	r3, r1
 8000acc:	80bb      	strh	r3, [r7, #4]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000ad2:	88fb      	ldrh	r3, [r7, #6]
 8000ad4:	b2d8      	uxtb	r0, r3
 8000ad6:	88bb      	ldrh	r3, [r7, #4]
 8000ad8:	b2d9      	uxtb	r1, r3
 8000ada:	88fb      	ldrh	r3, [r7, #6]
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b2db      	uxtb	r3, r3
 8000ae6:	3b01      	subs	r3, #1
 8000ae8:	b2dc      	uxtb	r4, r3
 8000aea:	88bb      	ldrh	r3, [r7, #4]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000af2:	4413      	add	r3, r2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	3b01      	subs	r3, #1
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	4622      	mov	r2, r4
 8000afc:	f7ff feea 	bl	80008d4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000b00:	2300      	movs	r3, #0
 8000b02:	61fb      	str	r3, [r7, #28]
 8000b04:	e043      	b.n	8000b8e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000b06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	3b20      	subs	r3, #32
 8000b0c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000b10:	fb01 f303 	mul.w	r3, r1, r3
 8000b14:	4619      	mov	r1, r3
 8000b16:	69fb      	ldr	r3, [r7, #28]
 8000b18:	440b      	add	r3, r1
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000b22:	2300      	movs	r3, #0
 8000b24:	61bb      	str	r3, [r7, #24]
 8000b26:	e029      	b.n	8000b7c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d00e      	beq.n	8000b56 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b38:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	743b      	strb	r3, [r7, #16]
 8000b42:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	2102      	movs	r1, #2
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f7ff fe5c 	bl	800080c <ST7735_WriteData>
 8000b54:	e00f      	b.n	8000b76 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b56:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b5a:	0a1b      	lsrs	r3, r3, #8
 8000b5c:	b29b      	uxth	r3, r3
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	733b      	strb	r3, [r7, #12]
 8000b62:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4618      	mov	r0, r3
 8000b72:	f7ff fe4b 	bl	800080c <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	61bb      	str	r3, [r7, #24]
 8000b7c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b80:	461a      	mov	r2, r3
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d3cf      	bcc.n	8000b28 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	61fb      	str	r3, [r7, #28]
 8000b8e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b92:	461a      	mov	r2, r3
 8000b94:	69fb      	ldr	r3, [r7, #28]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d3b5      	bcc.n	8000b06 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	3724      	adds	r7, #36	; 0x24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000ba6:	b002      	add	sp, #8
 8000ba8:	4770      	bx	lr
	...

08000bac <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000bac:	b082      	sub	sp, #8
 8000bae:	b580      	push	{r7, lr}
 8000bb0:	b086      	sub	sp, #24
 8000bb2:	af04      	add	r7, sp, #16
 8000bb4:	603a      	str	r2, [r7, #0]
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	4603      	mov	r3, r0
 8000bba:	80fb      	strh	r3, [r7, #6]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000bc0:	f7ff fdde 	bl	8000780 <ST7735_Select>

    while(*str) {
 8000bc4:	e033      	b.n	8000c2e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000bc6:	88fb      	ldrh	r3, [r7, #6]
 8000bc8:	7d3a      	ldrb	r2, [r7, #20]
 8000bca:	4413      	add	r3, r2
 8000bcc:	4a1f      	ldr	r2, [pc, #124]	; (8000c4c <ST7735_WriteString+0xa0>)
 8000bce:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	db16      	blt.n	8000c04 <ST7735_WriteString+0x58>
            x = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bda:	7d7b      	ldrb	r3, [r7, #21]
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	88bb      	ldrh	r3, [r7, #4]
 8000be0:	4413      	add	r3, r2
 8000be2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000be4:	88bb      	ldrh	r3, [r7, #4]
 8000be6:	7d7a      	ldrb	r2, [r7, #21]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <ST7735_WriteString+0xa4>)
 8000bec:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	da21      	bge.n	8000c38 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b20      	cmp	r3, #32
 8000bfa:	d103      	bne.n	8000c04 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	603b      	str	r3, [r7, #0]
                continue;
 8000c02:	e014      	b.n	8000c2e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	781a      	ldrb	r2, [r3, #0]
 8000c08:	88b9      	ldrh	r1, [r7, #4]
 8000c0a:	88f8      	ldrh	r0, [r7, #6]
 8000c0c:	8c3b      	ldrh	r3, [r7, #32]
 8000c0e:	9302      	str	r3, [sp, #8]
 8000c10:	8bbb      	ldrh	r3, [r7, #28]
 8000c12:	9301      	str	r3, [sp, #4]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	9300      	str	r3, [sp, #0]
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	f7ff ff4f 	bl	8000abc <ST7735_WriteChar>
        x += font.width;
 8000c1e:	7d3b      	ldrb	r3, [r7, #20]
 8000c20:	b29a      	uxth	r2, r3
 8000c22:	88fb      	ldrh	r3, [r7, #6]
 8000c24:	4413      	add	r3, r2
 8000c26:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d1c7      	bne.n	8000bc6 <ST7735_WriteString+0x1a>
 8000c36:	e000      	b.n	8000c3a <ST7735_WriteString+0x8e>
                break;
 8000c38:	bf00      	nop
    }

    ST7735_Unselect();
 8000c3a:	f7ff fdad 	bl	8000798 <ST7735_Unselect>
}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c48:	b002      	add	sp, #8
 8000c4a:	4770      	bx	lr
 8000c4c:	24004c58 	.word	0x24004c58
 8000c50:	24004c5c 	.word	0x24004c5c

08000c54 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c54:	b590      	push	{r4, r7, lr}
 8000c56:	b085      	sub	sp, #20
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	4608      	mov	r0, r1
 8000c5e:	4611      	mov	r1, r2
 8000c60:	461a      	mov	r2, r3
 8000c62:	4623      	mov	r3, r4
 8000c64:	80fb      	strh	r3, [r7, #6]
 8000c66:	4603      	mov	r3, r0
 8000c68:	80bb      	strh	r3, [r7, #4]
 8000c6a:	460b      	mov	r3, r1
 8000c6c:	807b      	strh	r3, [r7, #2]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	4a37      	ldr	r2, [pc, #220]	; (8000d54 <ST7735_FillRectangle+0x100>)
 8000c76:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	da66      	bge.n	8000d4c <ST7735_FillRectangle+0xf8>
 8000c7e:	88bb      	ldrh	r3, [r7, #4]
 8000c80:	4a35      	ldr	r2, [pc, #212]	; (8000d58 <ST7735_FillRectangle+0x104>)
 8000c82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c86:	4293      	cmp	r3, r2
 8000c88:	da60      	bge.n	8000d4c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c8a:	88fa      	ldrh	r2, [r7, #6]
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	4413      	add	r3, r2
 8000c90:	4a30      	ldr	r2, [pc, #192]	; (8000d54 <ST7735_FillRectangle+0x100>)
 8000c92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c96:	4293      	cmp	r3, r2
 8000c98:	dd06      	ble.n	8000ca8 <ST7735_FillRectangle+0x54>
 8000c9a:	4b2e      	ldr	r3, [pc, #184]	; (8000d54 <ST7735_FillRectangle+0x100>)
 8000c9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	88fb      	ldrh	r3, [r7, #6]
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000ca8:	88ba      	ldrh	r2, [r7, #4]
 8000caa:	883b      	ldrh	r3, [r7, #0]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a2a      	ldr	r2, [pc, #168]	; (8000d58 <ST7735_FillRectangle+0x104>)
 8000cb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	dd06      	ble.n	8000cc6 <ST7735_FillRectangle+0x72>
 8000cb8:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <ST7735_FillRectangle+0x104>)
 8000cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	88bb      	ldrh	r3, [r7, #4]
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000cc6:	f7ff fd5b 	bl	8000780 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	b2d8      	uxtb	r0, r3
 8000cce:	88bb      	ldrh	r3, [r7, #4]
 8000cd0:	b2d9      	uxtb	r1, r3
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	887b      	ldrh	r3, [r7, #2]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b2dc      	uxtb	r4, r3
 8000ce2:	88bb      	ldrh	r3, [r7, #4]
 8000ce4:	b2da      	uxtb	r2, r3
 8000ce6:	883b      	ldrh	r3, [r7, #0]
 8000ce8:	b2db      	uxtb	r3, r3
 8000cea:	4413      	add	r3, r2
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	3b01      	subs	r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	4622      	mov	r2, r4
 8000cf4:	f7ff fdee 	bl	80008d4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cf8:	8c3b      	ldrh	r3, [r7, #32]
 8000cfa:	0a1b      	lsrs	r3, r3, #8
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	733b      	strb	r3, [r7, #12]
 8000d02:	8c3b      	ldrh	r3, [r7, #32]
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000d08:	2201      	movs	r2, #1
 8000d0a:	2108      	movs	r1, #8
 8000d0c:	4813      	ldr	r0, [pc, #76]	; (8000d5c <ST7735_FillRectangle+0x108>)
 8000d0e:	f005 fc05 	bl	800651c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000d12:	883b      	ldrh	r3, [r7, #0]
 8000d14:	80bb      	strh	r3, [r7, #4]
 8000d16:	e013      	b.n	8000d40 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000d18:	887b      	ldrh	r3, [r7, #2]
 8000d1a:	80fb      	strh	r3, [r7, #6]
 8000d1c:	e00a      	b.n	8000d34 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000d1e:	f107 010c 	add.w	r1, r7, #12
 8000d22:	f04f 33ff 	mov.w	r3, #4294967295
 8000d26:	2202      	movs	r2, #2
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <ST7735_FillRectangle+0x10c>)
 8000d2a:	f008 f81b 	bl	8008d64 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d2e:	88fb      	ldrh	r3, [r7, #6]
 8000d30:	3b01      	subs	r3, #1
 8000d32:	80fb      	strh	r3, [r7, #6]
 8000d34:	88fb      	ldrh	r3, [r7, #6]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d1f1      	bne.n	8000d1e <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	3b01      	subs	r3, #1
 8000d3e:	80bb      	strh	r3, [r7, #4]
 8000d40:	88bb      	ldrh	r3, [r7, #4]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d1e8      	bne.n	8000d18 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000d46:	f7ff fd27 	bl	8000798 <ST7735_Unselect>
 8000d4a:	e000      	b.n	8000d4e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000d4c:	bf00      	nop
}
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd90      	pop	{r4, r7, pc}
 8000d54:	24004c58 	.word	0x24004c58
 8000d58:	24004c5c 	.word	0x24004c5c
 8000d5c:	58020000 	.word	0x58020000
 8000d60:	24004da0 	.word	0x24004da0

08000d64 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d68:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <MX_CRC_Init+0x3c>)
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <MX_CRC_Init+0x40>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <MX_CRC_Init+0x3c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d74:	4b0a      	ldr	r3, [pc, #40]	; (8000da0 <MX_CRC_Init+0x3c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <MX_CRC_Init+0x3c>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d80:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <MX_CRC_Init+0x3c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <MX_CRC_Init+0x3c>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d8c:	4804      	ldr	r0, [pc, #16]	; (8000da0 <MX_CRC_Init+0x3c>)
 8000d8e:	f002 f839 	bl	8002e04 <HAL_CRC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d98:	f000 fde2 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	24004c68 	.word	0x24004c68
 8000da4:	58024c00 	.word	0x58024c00

08000da8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <HAL_CRC_MspInit+0x3c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d10e      	bne.n	8000dd8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_CRC_MspInit+0x40>)
 8000dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dc0:	4a09      	ldr	r2, [pc, #36]	; (8000de8 <HAL_CRC_MspInit+0x40>)
 8000dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000dc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000dca:	4b07      	ldr	r3, [pc, #28]	; (8000de8 <HAL_CRC_MspInit+0x40>)
 8000dcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000dd0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000dd8:	bf00      	nop
 8000dda:	3714      	adds	r7, #20
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	58024c00 	.word	0x58024c00
 8000de8:	58024400 	.word	0x58024400

08000dec <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000df0:	4b2e      	ldr	r3, [pc, #184]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000df2:	4a2f      	ldr	r2, [pc, #188]	; (8000eb0 <MX_FDCAN1_Init+0xc4>)
 8000df4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000df6:	4b2d      	ldr	r3, [pc, #180]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dfc:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000e02:	4b2a      	ldr	r3, [pc, #168]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000e08:	4b28      	ldr	r3, [pc, #160]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000e0e:	4b27      	ldr	r3, [pc, #156]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000e14:	4b25      	ldr	r3, [pc, #148]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000e1a:	4b24      	ldr	r3, [pc, #144]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e1c:	2208      	movs	r2, #8
 8000e1e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000e20:	4b22      	ldr	r3, [pc, #136]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e22:	221f      	movs	r2, #31
 8000e24:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000e26:	4b21      	ldr	r3, [pc, #132]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e28:	2208      	movs	r2, #8
 8000e2a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e32:	4b1e      	ldr	r3, [pc, #120]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e34:	2201      	movs	r2, #1
 8000e36:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e38:	4b1c      	ldr	r3, [pc, #112]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e3e:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e44:	4b19      	ldr	r3, [pc, #100]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e50:	4b16      	ldr	r3, [pc, #88]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000e56:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e58:	2201      	movs	r2, #1
 8000e5a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e5c:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e62:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e68:	4b10      	ldr	r3, [pc, #64]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e74:	4b0d      	ldr	r3, [pc, #52]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e7a:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e80:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e86:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e88:	2201      	movs	r2, #1
 8000e8a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e8c:	4b07      	ldr	r3, [pc, #28]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e92:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e94:	2204      	movs	r2, #4
 8000e96:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e98:	4804      	ldr	r0, [pc, #16]	; (8000eac <MX_FDCAN1_Init+0xc0>)
 8000e9a:	f003 ff49 	bl	8004d30 <HAL_FDCAN_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000ea4:	f000 fd5c 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	24004c9c 	.word	0x24004c9c
 8000eb0:	4000a000 	.word	0x4000a000

08000eb4 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0b6      	sub	sp, #216	; 0xd8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	22b4      	movs	r2, #180	; 0xb4
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f019 feee 	bl	801acb6 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a31      	ldr	r2, [pc, #196]	; (8000fa4 <HAL_FDCAN_MspInit+0xf0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d15a      	bne.n	8000f9a <HAL_FDCAN_MspInit+0xe6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000eee:	2319      	movs	r3, #25
 8000ef0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000ef6:	2305      	movs	r3, #5
 8000ef8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000efa:	2302      	movs	r3, #2
 8000efc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000efe:	23c0      	movs	r3, #192	; 0xc0
 8000f00:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000f0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f0e:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	4618      	mov	r0, r3
 8000f16:	f006 fb03 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000f20:	f000 fd1e 	bl	8001960 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f24:	4b20      	ldr	r3, [pc, #128]	; (8000fa8 <HAL_FDCAN_MspInit+0xf4>)
 8000f26:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f2a:	4a1f      	ldr	r2, [pc, #124]	; (8000fa8 <HAL_FDCAN_MspInit+0xf4>)
 8000f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f30:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f34:	4b1c      	ldr	r3, [pc, #112]	; (8000fa8 <HAL_FDCAN_MspInit+0xf4>)
 8000f36:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	4b19      	ldr	r3, [pc, #100]	; (8000fa8 <HAL_FDCAN_MspInit+0xf4>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	4a17      	ldr	r2, [pc, #92]	; (8000fa8 <HAL_FDCAN_MspInit+0xf4>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <HAL_FDCAN_MspInit+0xf4>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f60:	2303      	movs	r3, #3
 8000f62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f78:	2309      	movs	r3, #9
 8000f7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f82:	4619      	mov	r1, r3
 8000f84:	4809      	ldr	r0, [pc, #36]	; (8000fac <HAL_FDCAN_MspInit+0xf8>)
 8000f86:	f005 f921 	bl	80061cc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2105      	movs	r1, #5
 8000f8e:	2013      	movs	r0, #19
 8000f90:	f001 fe94 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f94:	2013      	movs	r0, #19
 8000f96:	f001 feab 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000f9a:	bf00      	nop
 8000f9c:	37d8      	adds	r7, #216	; 0xd8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	4000a000 	.word	0x4000a000
 8000fa8:	58024400 	.word	0x58024400
 8000fac:	58020c00 	.word	0x58020c00

08000fb0 <FDCAN1_MSG_config>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void FDCAN1_MSG_config(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0xFF;
 8000fb6:	4b30      	ldr	r3, [pc, #192]	; (8001078 <FDCAN1_MSG_config+0xc8>)
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x00;
 8000fbc:	4b2e      	ldr	r3, [pc, #184]	; (8001078 <FDCAN1_MSG_config+0xc8>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 8000fc2:	4b2d      	ldr	r3, [pc, #180]	; (8001078 <FDCAN1_MSG_config+0xc8>)
 8000fc4:	22ff      	movs	r2, #255	; 0xff
 8000fc6:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x00;
 8000fc8:	4b2b      	ldr	r3, [pc, #172]	; (8001078 <FDCAN1_MSG_config+0xc8>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0xFF;
 8000fce:	4b2a      	ldr	r3, [pc, #168]	; (8001078 <FDCAN1_MSG_config+0xc8>)
 8000fd0:	22ff      	movs	r2, #255	; 0xff
 8000fd2:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 8000fd4:	4b28      	ldr	r3, [pc, #160]	; (8001078 <FDCAN1_MSG_config+0xc8>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0xFF;
 8000fda:	4b27      	ldr	r3, [pc, #156]	; (8001078 <FDCAN1_MSG_config+0xc8>)
 8000fdc:	22ff      	movs	r2, #255	; 0xff
 8000fde:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8000fe0:	4b25      	ldr	r3, [pc, #148]	; (8001078 <FDCAN1_MSG_config+0xc8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	71da      	strb	r2, [r3, #7]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x124;
 8000ff6:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000ffa:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000ffc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001000:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8001002:	463b      	mov	r3, r7
 8001004:	4619      	mov	r1, r3
 8001006:	481d      	ldr	r0, [pc, #116]	; (800107c <FDCAN1_MSG_config+0xcc>)
 8001008:	f004 f874 	bl	80050f4 <HAL_FDCAN_ConfigFilter>

	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 800100c:	2301      	movs	r3, #1
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	2202      	movs	r2, #2
 8001014:	2102      	movs	r1, #2
 8001016:	4819      	ldr	r0, [pc, #100]	; (800107c <FDCAN1_MSG_config+0xcc>)
 8001018:	f004 f8e2 	bl	80051e0 <HAL_FDCAN_ConfigGlobalFilter>

	/* Configure Rx FIFO 0 watermark to 2 */
	HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO0, 1);
 800101c:	2201      	movs	r2, #1
 800101e:	2101      	movs	r1, #1
 8001020:	4816      	ldr	r0, [pc, #88]	; (800107c <FDCAN1_MSG_config+0xcc>)
 8001022:	f004 f90a 	bl	800523a <HAL_FDCAN_ConfigFifoWatermark>

	/* Activate Rx FIFO 0 watermark notification */
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001026:	2200      	movs	r2, #0
 8001028:	2101      	movs	r1, #1
 800102a:	4814      	ldr	r0, [pc, #80]	; (800107c <FDCAN1_MSG_config+0xcc>)
 800102c:	f004 fb46 	bl	80056bc <HAL_FDCAN_ActivateNotification>

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 8001032:	f240 3222 	movw	r2, #802	; 0x322
 8001036:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 800103a:	2200      	movs	r2, #0
 800103c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001044:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 8001046:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800104a:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800104c:	4b0c      	ldr	r3, [pc, #48]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001058:	4b09      	ldr	r3, [pc, #36]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 8001060:	2200      	movs	r2, #0
 8001062:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <FDCAN1_MSG_config+0xd0>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]

	/* Start the FDCAN module */
	HAL_FDCAN_Start(&hfdcan1);
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <FDCAN1_MSG_config+0xcc>)
 800106c:	f004 f931 	bl	80052d2 <HAL_FDCAN_Start>
}
 8001070:	bf00      	nop
 8001072:	3720      	adds	r7, #32
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	24004c8c 	.word	0x24004c8c
 800107c:	24004c9c 	.word	0x24004c9c
 8001080:	24004d3c 	.word	0x24004d3c

08001084 <Toggle_CAN_Data>:


void Toggle_CAN_Data(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <Toggle_CAN_Data+0x78>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d118      	bne.n	80010c2 <Toggle_CAN_Data+0x3e>
	{
		myTxData[0] = 0xFF;
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <Toggle_CAN_Data+0x78>)
 8001092:	22ff      	movs	r2, #255	; 0xff
 8001094:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0x00;
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <Toggle_CAN_Data+0x78>)
 8001098:	2200      	movs	r2, #0
 800109a:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 800109c:	4b17      	ldr	r3, [pc, #92]	; (80010fc <Toggle_CAN_Data+0x78>)
 800109e:	22ff      	movs	r2, #255	; 0xff
 80010a0:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 80010a2:	4b16      	ldr	r3, [pc, #88]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	70da      	strb	r2, [r3, #3]

		myTxData[4] = 0xFF;
 80010a8:	4b14      	ldr	r3, [pc, #80]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0x00;
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0xFF;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010b6:	22ff      	movs	r2, #255	; 0xff
 80010b8:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0x00;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010bc:	2200      	movs	r2, #0
 80010be:	71da      	strb	r2, [r3, #7]
		myTxData[4] = 0x00;
		myTxData[5] = 0xFF;
		myTxData[6] = 0x00;
		myTxData[7] = 0xFF;
	}
}
 80010c0:	e017      	b.n	80010f2 <Toggle_CAN_Data+0x6e>
		myTxData[0] = 0x00;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010ca:	22ff      	movs	r2, #255	; 0xff
 80010cc:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010d6:	22ff      	movs	r2, #255	; 0xff
 80010d8:	70da      	strb	r2, [r3, #3]
		myTxData[4] = 0x00;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010dc:	2200      	movs	r2, #0
 80010de:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0xFF;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010e2:	22ff      	movs	r2, #255	; 0xff
 80010e4:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0x00;
 80010e6:	4b05      	ldr	r3, [pc, #20]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0xFF;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <Toggle_CAN_Data+0x78>)
 80010ee:	22ff      	movs	r2, #255	; 0xff
 80010f0:	71da      	strb	r2, [r3, #7]
}
 80010f2:	bf00      	nop
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	24004c8c 	.word	0x24004c8c

08001100 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	6039      	str	r1, [r7, #0]

    /* Retrieve Rx messages from RX FIFO0 */
    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, myRxData);
 800110a:	4b0d      	ldr	r3, [pc, #52]	; (8001140 <HAL_FDCAN_RxFifo0Callback+0x40>)
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <HAL_FDCAN_RxFifo0Callback+0x44>)
 800110e:	2140      	movs	r1, #64	; 0x40
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f004 f965 	bl	80053e0 <HAL_FDCAN_GetRxMessage>


    /* Display LEDx */
    if ((RxHeader.Identifier == 0x124) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 800111e:	d10b      	bne.n	8001138 <HAL_FDCAN_RxFifo0Callback+0x38>
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d107      	bne.n	8001138 <HAL_FDCAN_RxFifo0Callback+0x38>
    {
    	print_to_serial("MSG 0x124 Custom MSG!");
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800112a:	f7ff fb0b 	bl	8000744 <print_to_serial>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800112e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001134:	f005 fa0b 	bl	800654e <HAL_GPIO_TogglePin>
    }

}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	24004c94 	.word	0x24004c94
 8001144:	24004d60 	.word	0x24004d60
 8001148:	0801bc2c 	.word	0x0801bc2c
 800114c:	58020400 	.word	0x58020400

08001150 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0

}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
return 0;
 8001162:	2300      	movs	r3, #0
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Controller */
  ControllerHandle = osThreadNew(Controller_handler, NULL, &Controller_attributes);
 8001174:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_FREERTOS_Init+0x78>)
 8001176:	2100      	movs	r1, #0
 8001178:	481c      	ldr	r0, [pc, #112]	; (80011ec <MX_FREERTOS_Init+0x7c>)
 800117a:	f00a fcba 	bl	800baf2 <osThreadNew>
 800117e:	4603      	mov	r3, r0
 8001180:	4a1b      	ldr	r2, [pc, #108]	; (80011f0 <MX_FREERTOS_Init+0x80>)
 8001182:	6013      	str	r3, [r2, #0]

  /* creation of TestMode1 */
  TestMode1Handle = osThreadNew(TestMode1_handler, NULL, &TestMode1_attributes);
 8001184:	4a1b      	ldr	r2, [pc, #108]	; (80011f4 <MX_FREERTOS_Init+0x84>)
 8001186:	2100      	movs	r1, #0
 8001188:	481b      	ldr	r0, [pc, #108]	; (80011f8 <MX_FREERTOS_Init+0x88>)
 800118a:	f00a fcb2 	bl	800baf2 <osThreadNew>
 800118e:	4603      	mov	r3, r0
 8001190:	4a1a      	ldr	r2, [pc, #104]	; (80011fc <MX_FREERTOS_Init+0x8c>)
 8001192:	6013      	str	r3, [r2, #0]

  /* creation of TestMode2 */
  TestMode2Handle = osThreadNew(TestMode2_handler, NULL, &TestMode2_attributes);
 8001194:	4a1a      	ldr	r2, [pc, #104]	; (8001200 <MX_FREERTOS_Init+0x90>)
 8001196:	2100      	movs	r1, #0
 8001198:	481a      	ldr	r0, [pc, #104]	; (8001204 <MX_FREERTOS_Init+0x94>)
 800119a:	f00a fcaa 	bl	800baf2 <osThreadNew>
 800119e:	4603      	mov	r3, r0
 80011a0:	4a19      	ldr	r2, [pc, #100]	; (8001208 <MX_FREERTOS_Init+0x98>)
 80011a2:	6013      	str	r3, [r2, #0]

  /* creation of TestMode3 */
  TestMode3Handle = osThreadNew(TestMode3_handler, NULL, &TestMode3_attributes);
 80011a4:	4a19      	ldr	r2, [pc, #100]	; (800120c <MX_FREERTOS_Init+0x9c>)
 80011a6:	2100      	movs	r1, #0
 80011a8:	4819      	ldr	r0, [pc, #100]	; (8001210 <MX_FREERTOS_Init+0xa0>)
 80011aa:	f00a fca2 	bl	800baf2 <osThreadNew>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a18      	ldr	r2, [pc, #96]	; (8001214 <MX_FREERTOS_Init+0xa4>)
 80011b2:	6013      	str	r3, [r2, #0]

  /* creation of TCPSvr */
  TCPSvrHandle = osThreadNew(TCPSvr_handler, NULL, &TCPSvr_attributes);
 80011b4:	4a18      	ldr	r2, [pc, #96]	; (8001218 <MX_FREERTOS_Init+0xa8>)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4818      	ldr	r0, [pc, #96]	; (800121c <MX_FREERTOS_Init+0xac>)
 80011ba:	f00a fc9a 	bl	800baf2 <osThreadNew>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a17      	ldr	r2, [pc, #92]	; (8001220 <MX_FREERTOS_Init+0xb0>)
 80011c2:	6013      	str	r3, [r2, #0]

  /* creation of CAN */
  CANHandle = osThreadNew(CAN_handler, NULL, &CAN_attributes);
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <MX_FREERTOS_Init+0xb4>)
 80011c6:	2100      	movs	r1, #0
 80011c8:	4817      	ldr	r0, [pc, #92]	; (8001228 <MX_FREERTOS_Init+0xb8>)
 80011ca:	f00a fc92 	bl	800baf2 <osThreadNew>
 80011ce:	4603      	mov	r3, r0
 80011d0:	4a16      	ldr	r2, [pc, #88]	; (800122c <MX_FREERTOS_Init+0xbc>)
 80011d2:	6013      	str	r3, [r2, #0]

  /* creation of TestMode4 */
  TestMode4Handle = osThreadNew(TestMode4_handler, NULL, &TestMode4_attributes);
 80011d4:	4a16      	ldr	r2, [pc, #88]	; (8001230 <MX_FREERTOS_Init+0xc0>)
 80011d6:	2100      	movs	r1, #0
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <MX_FREERTOS_Init+0xc4>)
 80011da:	f00a fc8a 	bl	800baf2 <osThreadNew>
 80011de:	4603      	mov	r3, r0
 80011e0:	4a15      	ldr	r2, [pc, #84]	; (8001238 <MX_FREERTOS_Init+0xc8>)
 80011e2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	0801f0d8 	.word	0x0801f0d8
 80011ec:	0800123d 	.word	0x0800123d
 80011f0:	24004c60 	.word	0x24004c60
 80011f4:	0801f0fc 	.word	0x0801f0fc
 80011f8:	080013b9 	.word	0x080013b9
 80011fc:	24004d9c 	.word	0x24004d9c
 8001200:	0801f120 	.word	0x0801f120
 8001204:	080013e5 	.word	0x080013e5
 8001208:	24004d98 	.word	0x24004d98
 800120c:	0801f144 	.word	0x0801f144
 8001210:	08001411 	.word	0x08001411
 8001214:	24004d94 	.word	0x24004d94
 8001218:	0801f168 	.word	0x0801f168
 800121c:	08001421 	.word	0x08001421
 8001220:	24004d88 	.word	0x24004d88
 8001224:	0801f18c 	.word	0x0801f18c
 8001228:	08001431 	.word	0x08001431
 800122c:	24004d90 	.word	0x24004d90
 8001230:	0801f1b0 	.word	0x0801f1b0
 8001234:	08001441 	.word	0x08001441
 8001238:	24004d8c 	.word	0x24004d8c

0800123c <Controller_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Controller_handler */
void Controller_handler(void *argument)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af04      	add	r7, sp, #16
 8001242:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001244:	f009 fdea 	bl	800ae1c <MX_LWIP_Init>
  /* USER CODE BEGIN Controller_handler */
  SM_STATES state = INIT;
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]
  BaseType_t status;
  uint32_t test_mode;

  /*init code for TCP Server*/
  tcp_server_init();
 800124c:	f000 fe70 	bl	8001f30 <tcp_server_init>

  /* Infinite loop */
  for(;;)
  {
	  switch(state)
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d002      	beq.n	800125c <Controller_handler+0x20>
 8001256:	2b01      	cmp	r3, #1
 8001258:	d01e      	beq.n	8001298 <Controller_handler+0x5c>
			        }

			        state = IDLE;
			        break;

		  default:  break;
 800125a:	e095      	b.n	8001388 <Controller_handler+0x14c>
			        print_to_serial("Hello FreeRTOS!");
 800125c:	484c      	ldr	r0, [pc, #304]	; (8001390 <Controller_handler+0x154>)
 800125e:	f7ff fa71 	bl	8000744 <print_to_serial>
			  	    ST7735_SetRotation(3);
 8001262:	2003      	movs	r0, #3
 8001264:	f7ff fbaa 	bl	80009bc <ST7735_SetRotation>
			  		ST7735_WriteString(0, 0, "  Mini HIL Tester v0.1", Font_7x10, WHITE,BLACK);
 8001268:	4b4a      	ldr	r3, [pc, #296]	; (8001394 <Controller_handler+0x158>)
 800126a:	2200      	movs	r2, #0
 800126c:	9202      	str	r2, [sp, #8]
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	9201      	str	r2, [sp, #4]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	9200      	str	r2, [sp, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a47      	ldr	r2, [pc, #284]	; (8001398 <Controller_handler+0x15c>)
 800127c:	2100      	movs	r1, #0
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fc94 	bl	8000bac <ST7735_WriteString>
			  		HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 8001284:	4a45      	ldr	r2, [pc, #276]	; (800139c <Controller_handler+0x160>)
 8001286:	4946      	ldr	r1, [pc, #280]	; (80013a0 <Controller_handler+0x164>)
 8001288:	4846      	ldr	r0, [pc, #280]	; (80013a4 <Controller_handler+0x168>)
 800128a:	f004 f84d 	bl	8005328 <HAL_FDCAN_AddMessageToTxFifoQ>
			  		Toggle_CAN_Data();
 800128e:	f7ff fef9 	bl	8001084 <Toggle_CAN_Data>
			  		state = IDLE;
 8001292:	2301      	movs	r3, #1
 8001294:	75fb      	strb	r3, [r7, #23]
					break;
 8001296:	e077      	b.n	8001388 <Controller_handler+0x14c>
			        status = xTaskNotifyWait(0, 0, &test_mode, pdMS_TO_TICKS(20));
 8001298:	f107 020c 	add.w	r2, r7, #12
 800129c:	2302      	movs	r3, #2
 800129e:	2100      	movs	r1, #0
 80012a0:	2000      	movs	r0, #0
 80012a2:	f00d f9f5 	bl	800e690 <xTaskNotifyWait>
 80012a6:	6138      	str	r0, [r7, #16]
			        if(status == pdPASS)
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d166      	bne.n	800137c <Controller_handler+0x140>
			        	switch(test_mode)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d864      	bhi.n	8001380 <Controller_handler+0x144>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <Controller_handler+0x80>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012f9 	.word	0x080012f9
 80012c4:	08001325 	.word	0x08001325
 80012c8:	08001351 	.word	0x08001351
			        			              ST7735_WriteString(0, 12, "TEST MODE 1!", Font_7x10, WHITE,BLACK);
 80012cc:	4b31      	ldr	r3, [pc, #196]	; (8001394 <Controller_handler+0x158>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	9202      	str	r2, [sp, #8]
 80012d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012d6:	9201      	str	r2, [sp, #4]
 80012d8:	685a      	ldr	r2, [r3, #4]
 80012da:	9200      	str	r2, [sp, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a32      	ldr	r2, [pc, #200]	; (80013a8 <Controller_handler+0x16c>)
 80012e0:	210c      	movs	r1, #12
 80012e2:	2000      	movs	r0, #0
 80012e4:	f7ff fc62 	bl	8000bac <ST7735_WriteString>
				        	        		  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 80012e8:	4a2c      	ldr	r2, [pc, #176]	; (800139c <Controller_handler+0x160>)
 80012ea:	492d      	ldr	r1, [pc, #180]	; (80013a0 <Controller_handler+0x164>)
 80012ec:	482d      	ldr	r0, [pc, #180]	; (80013a4 <Controller_handler+0x168>)
 80012ee:	f004 f81b 	bl	8005328 <HAL_FDCAN_AddMessageToTxFifoQ>
				        	                  Toggle_CAN_Data();
 80012f2:	f7ff fec7 	bl	8001084 <Toggle_CAN_Data>
				        	                  break;
 80012f6:	e044      	b.n	8001382 <Controller_handler+0x146>
			        					      ST7735_WriteString(0, 12, "TEST MODE 2!", Font_7x10, WHITE,BLACK);
 80012f8:	4b26      	ldr	r3, [pc, #152]	; (8001394 <Controller_handler+0x158>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	9202      	str	r2, [sp, #8]
 80012fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001302:	9201      	str	r2, [sp, #4]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	9200      	str	r2, [sp, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a28      	ldr	r2, [pc, #160]	; (80013ac <Controller_handler+0x170>)
 800130c:	210c      	movs	r1, #12
 800130e:	2000      	movs	r0, #0
 8001310:	f7ff fc4c 	bl	8000bac <ST7735_WriteString>
			        					      HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <Controller_handler+0x160>)
 8001316:	4922      	ldr	r1, [pc, #136]	; (80013a0 <Controller_handler+0x164>)
 8001318:	4822      	ldr	r0, [pc, #136]	; (80013a4 <Controller_handler+0x168>)
 800131a:	f004 f805 	bl	8005328 <HAL_FDCAN_AddMessageToTxFifoQ>
			        					      Toggle_CAN_Data();
 800131e:	f7ff feb1 	bl	8001084 <Toggle_CAN_Data>
			        			              break;
 8001322:	e02e      	b.n	8001382 <Controller_handler+0x146>
			        			              ST7735_WriteString(0, 12, "TEST MODE 3!", Font_7x10, WHITE,BLACK);
 8001324:	4b1b      	ldr	r3, [pc, #108]	; (8001394 <Controller_handler+0x158>)
 8001326:	2200      	movs	r2, #0
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	9200      	str	r2, [sp, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a1e      	ldr	r2, [pc, #120]	; (80013b0 <Controller_handler+0x174>)
 8001338:	210c      	movs	r1, #12
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fc36 	bl	8000bac <ST7735_WriteString>
			        						  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 8001340:	4a16      	ldr	r2, [pc, #88]	; (800139c <Controller_handler+0x160>)
 8001342:	4917      	ldr	r1, [pc, #92]	; (80013a0 <Controller_handler+0x164>)
 8001344:	4817      	ldr	r0, [pc, #92]	; (80013a4 <Controller_handler+0x168>)
 8001346:	f003 ffef 	bl	8005328 <HAL_FDCAN_AddMessageToTxFifoQ>
			        						  Toggle_CAN_Data();
 800134a:	f7ff fe9b 	bl	8001084 <Toggle_CAN_Data>
			        			              break;
 800134e:	e018      	b.n	8001382 <Controller_handler+0x146>
			        			              ST7735_WriteString(0, 12, "TEST MODE 4!", Font_7x10, WHITE,BLACK);
 8001350:	4b10      	ldr	r3, [pc, #64]	; (8001394 <Controller_handler+0x158>)
 8001352:	2200      	movs	r2, #0
 8001354:	9202      	str	r2, [sp, #8]
 8001356:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800135a:	9201      	str	r2, [sp, #4]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	9200      	str	r2, [sp, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a14      	ldr	r2, [pc, #80]	; (80013b4 <Controller_handler+0x178>)
 8001364:	210c      	movs	r1, #12
 8001366:	2000      	movs	r0, #0
 8001368:	f7ff fc20 	bl	8000bac <ST7735_WriteString>
			        						  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 800136c:	4a0b      	ldr	r2, [pc, #44]	; (800139c <Controller_handler+0x160>)
 800136e:	490c      	ldr	r1, [pc, #48]	; (80013a0 <Controller_handler+0x164>)
 8001370:	480c      	ldr	r0, [pc, #48]	; (80013a4 <Controller_handler+0x168>)
 8001372:	f003 ffd9 	bl	8005328 <HAL_FDCAN_AddMessageToTxFifoQ>
			        						  Toggle_CAN_Data();
 8001376:	f7ff fe85 	bl	8001084 <Toggle_CAN_Data>
			        			              break;
 800137a:	e002      	b.n	8001382 <Controller_handler+0x146>
			        }
 800137c:	bf00      	nop
 800137e:	e000      	b.n	8001382 <Controller_handler+0x146>
			        		default:          break;
 8001380:	bf00      	nop
			        state = IDLE;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
			        break;
 8001386:	bf00      	nop
	  }

	  osDelay(1);
 8001388:	2001      	movs	r0, #1
 800138a:	f00a fc44 	bl	800bc16 <osDelay>
	  switch(state)
 800138e:	e75f      	b.n	8001250 <Controller_handler+0x14>
 8001390:	0801bc8c 	.word	0x0801bc8c
 8001394:	24000000 	.word	0x24000000
 8001398:	0801bc9c 	.word	0x0801bc9c
 800139c:	24004c8c 	.word	0x24004c8c
 80013a0:	24004d3c 	.word	0x24004d3c
 80013a4:	24004c9c 	.word	0x24004c9c
 80013a8:	0801bcb4 	.word	0x0801bcb4
 80013ac:	0801bcc4 	.word	0x0801bcc4
 80013b0:	0801bcd4 	.word	0x0801bcd4
 80013b4:	0801bce4 	.word	0x0801bce4

080013b8 <TestMode1_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestMode1_handler */
void TestMode1_handler(void *argument)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestMode1_handler */
  uint32_t flag;
  BaseType_t status;
  TM_STATES TM1_state = TM_INIT;
 80013c0:	2300      	movs	r3, #0
 80013c2:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {

	  switch(TM1_state)
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b02      	cmp	r3, #2
 80013c8:	d005      	beq.n	80013d6 <TestMode1_handler+0x1e>
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	dc06      	bgt.n	80013dc <TestMode1_handler+0x24>
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <TestMode1_handler+0x22>
 80013d2:	2b01      	cmp	r3, #1
	  {
		  case TM_INIT:
					       break;

		  case TM_MAIN:
			               break;
 80013d4:	e002      	b.n	80013dc <TestMode1_handler+0x24>

		  case TM_CLEANUP:
		  			       break;
 80013d6:	bf00      	nop
 80013d8:	e000      	b.n	80013dc <TestMode1_handler+0x24>
					       break;
 80013da:	bf00      	nop
	  }

      osDelay(1);
 80013dc:	2001      	movs	r0, #1
 80013de:	f00a fc1a 	bl	800bc16 <osDelay>
	  switch(TM1_state)
 80013e2:	e7ef      	b.n	80013c4 <TestMode1_handler+0xc>

080013e4 <TestMode2_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestMode2_handler */
void TestMode2_handler(void *argument)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestMode2_handler */

  uint32_t flag;
  BaseType_t status;
  TM_STATES TM2_state = TM_INIT;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  for(;;)
  {
	  switch(TM2_state)
 80013f0:	7bfb      	ldrb	r3, [r7, #15]
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d005      	beq.n	8001402 <TestMode2_handler+0x1e>
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	dc06      	bgt.n	8001408 <TestMode2_handler+0x24>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d003      	beq.n	8001406 <TestMode2_handler+0x22>
 80013fe:	2b01      	cmp	r3, #1
	  {
		  case TM_INIT:
						   break;

		  case TM_MAIN:
						   break;
 8001400:	e002      	b.n	8001408 <TestMode2_handler+0x24>

		  case TM_CLEANUP:
						   break;
 8001402:	bf00      	nop
 8001404:	e000      	b.n	8001408 <TestMode2_handler+0x24>
						   break;
 8001406:	bf00      	nop
	  }

	  osDelay(1);
 8001408:	2001      	movs	r0, #1
 800140a:	f00a fc04 	bl	800bc16 <osDelay>
	  switch(TM2_state)
 800140e:	e7ef      	b.n	80013f0 <TestMode2_handler+0xc>

08001410 <TestMode3_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestMode3_handler */
void TestMode3_handler(void *argument)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestMode3_handler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f00a fbfc 	bl	800bc16 <osDelay>
 800141e:	e7fb      	b.n	8001418 <TestMode3_handler+0x8>

08001420 <TCPSvr_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TCPSvr_handler */
void TCPSvr_handler(void *argument)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TCPSvr_handler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001428:	2001      	movs	r0, #1
 800142a:	f00a fbf4 	bl	800bc16 <osDelay>
 800142e:	e7fb      	b.n	8001428 <TCPSvr_handler+0x8>

08001430 <CAN_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_handler */
void CAN_handler(void *argument)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CAN_handler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001438:	2001      	movs	r0, #1
 800143a:	f00a fbec 	bl	800bc16 <osDelay>
 800143e:	e7fb      	b.n	8001438 <CAN_handler+0x8>

08001440 <TestMode4_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestMode4_handler */
void TestMode4_handler(void *argument)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestMode4_handler */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f00a fbe4 	bl	800bc16 <osDelay>
 800144e:	e7fb      	b.n	8001448 <TestMode4_handler+0x8>

08001450 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001466:	4b89      	ldr	r3, [pc, #548]	; (800168c <MX_GPIO_Init+0x23c>)
 8001468:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800146c:	4a87      	ldr	r2, [pc, #540]	; (800168c <MX_GPIO_Init+0x23c>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001476:	4b85      	ldr	r3, [pc, #532]	; (800168c <MX_GPIO_Init+0x23c>)
 8001478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	61bb      	str	r3, [r7, #24]
 8001482:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001484:	4b81      	ldr	r3, [pc, #516]	; (800168c <MX_GPIO_Init+0x23c>)
 8001486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148a:	4a80      	ldr	r2, [pc, #512]	; (800168c <MX_GPIO_Init+0x23c>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001494:	4b7d      	ldr	r3, [pc, #500]	; (800168c <MX_GPIO_Init+0x23c>)
 8001496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149e:	617b      	str	r3, [r7, #20]
 80014a0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a2:	4b7a      	ldr	r3, [pc, #488]	; (800168c <MX_GPIO_Init+0x23c>)
 80014a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014a8:	4a78      	ldr	r2, [pc, #480]	; (800168c <MX_GPIO_Init+0x23c>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014b2:	4b76      	ldr	r3, [pc, #472]	; (800168c <MX_GPIO_Init+0x23c>)
 80014b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014b8:	f003 0301 	and.w	r3, r3, #1
 80014bc:	613b      	str	r3, [r7, #16]
 80014be:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c0:	4b72      	ldr	r3, [pc, #456]	; (800168c <MX_GPIO_Init+0x23c>)
 80014c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014c6:	4a71      	ldr	r2, [pc, #452]	; (800168c <MX_GPIO_Init+0x23c>)
 80014c8:	f043 0302 	orr.w	r3, r3, #2
 80014cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014d0:	4b6e      	ldr	r3, [pc, #440]	; (800168c <MX_GPIO_Init+0x23c>)
 80014d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014de:	4b6b      	ldr	r3, [pc, #428]	; (800168c <MX_GPIO_Init+0x23c>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e4:	4a69      	ldr	r2, [pc, #420]	; (800168c <MX_GPIO_Init+0x23c>)
 80014e6:	f043 0308 	orr.w	r3, r3, #8
 80014ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014ee:	4b67      	ldr	r3, [pc, #412]	; (800168c <MX_GPIO_Init+0x23c>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f4:	f003 0308 	and.w	r3, r3, #8
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014fc:	4b63      	ldr	r3, [pc, #396]	; (800168c <MX_GPIO_Init+0x23c>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001502:	4a62      	ldr	r2, [pc, #392]	; (800168c <MX_GPIO_Init+0x23c>)
 8001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001508:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800150c:	4b5f      	ldr	r3, [pc, #380]	; (800168c <MX_GPIO_Init+0x23c>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001516:	607b      	str	r3, [r7, #4]
 8001518:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <MX_GPIO_Init+0x23c>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001520:	4a5a      	ldr	r2, [pc, #360]	; (800168c <MX_GPIO_Init+0x23c>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800152a:	4b58      	ldr	r3, [pc, #352]	; (800168c <MX_GPIO_Init+0x23c>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001530:	f003 0310 	and.w	r3, r3, #16
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3|SEN_TRG_Pin, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	f240 2109 	movw	r1, #521	; 0x209
 800153e:	4854      	ldr	r0, [pc, #336]	; (8001690 <MX_GPIO_Init+0x240>)
 8001540:	f004 ffec 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2108      	movs	r1, #8
 8001548:	4852      	ldr	r0, [pc, #328]	; (8001694 <MX_GPIO_Init+0x244>)
 800154a:	f004 ffe7 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f244 0101 	movw	r1, #16385	; 0x4001
 8001554:	4850      	ldr	r0, [pc, #320]	; (8001698 <MX_GPIO_Init+0x248>)
 8001556:	f004 ffe1 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001560:	484e      	ldr	r0, [pc, #312]	; (800169c <MX_GPIO_Init+0x24c>)
 8001562:	f004 ffdb 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2102      	movs	r1, #2
 800156a:	484d      	ldr	r0, [pc, #308]	; (80016a0 <MX_GPIO_Init+0x250>)
 800156c:	f004 ffd6 	bl	800651c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC3 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|SEN_TRG_Pin;
 8001570:	f240 2309 	movw	r3, #521	; 0x209
 8001574:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001576:	2301      	movs	r3, #1
 8001578:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	4619      	mov	r1, r3
 8001588:	4841      	ldr	r0, [pc, #260]	; (8001690 <MX_GPIO_Init+0x240>)
 800158a:	f004 fe1f 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800158e:	2308      	movs	r3, #8
 8001590:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001592:	2301      	movs	r3, #1
 8001594:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001596:	2300      	movs	r3, #0
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159a:	2300      	movs	r3, #0
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159e:	f107 031c 	add.w	r3, r7, #28
 80015a2:	4619      	mov	r1, r3
 80015a4:	483b      	ldr	r0, [pc, #236]	; (8001694 <MX_GPIO_Init+0x244>)
 80015a6:	f004 fe11 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 80015aa:	f244 0301 	movw	r3, #16385	; 0x4001
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b0:	2301      	movs	r3, #1
 80015b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015bc:	f107 031c 	add.w	r3, r7, #28
 80015c0:	4619      	mov	r1, r3
 80015c2:	4835      	ldr	r0, [pc, #212]	; (8001698 <MX_GPIO_Init+0x248>)
 80015c4:	f004 fe02 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80015c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015ce:	2301      	movs	r3, #1
 80015d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80015da:	f107 031c 	add.w	r3, r7, #28
 80015de:	4619      	mov	r1, r3
 80015e0:	482e      	ldr	r0, [pc, #184]	; (800169c <MX_GPIO_Init+0x24c>)
 80015e2:	f004 fdf3 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80015e6:	2380      	movs	r3, #128	; 0x80
 80015e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 031c 	add.w	r3, r7, #28
 80015f8:	4619      	mov	r1, r3
 80015fa:	482a      	ldr	r0, [pc, #168]	; (80016a4 <MX_GPIO_Init+0x254>)
 80015fc:	f004 fde6 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001600:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001606:	2300      	movs	r3, #0
 8001608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	481f      	ldr	r0, [pc, #124]	; (8001694 <MX_GPIO_Init+0x244>)
 8001616:	f004 fdd9 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 800161a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800161e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001620:	2302      	movs	r3, #2
 8001622:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001624:	2300      	movs	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800162c:	230a      	movs	r3, #10
 800162e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001630:	f107 031c 	add.w	r3, r7, #28
 8001634:	4619      	mov	r1, r3
 8001636:	4817      	ldr	r0, [pc, #92]	; (8001694 <MX_GPIO_Init+0x244>)
 8001638:	f004 fdc8 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 800163c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001642:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001646:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	480f      	ldr	r0, [pc, #60]	; (8001690 <MX_GPIO_Init+0x240>)
 8001654:	f004 fdba 	bl	80061cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001658:	2302      	movs	r3, #2
 800165a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165c:	2301      	movs	r3, #1
 800165e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001668:	f107 031c 	add.w	r3, r7, #28
 800166c:	4619      	mov	r1, r3
 800166e:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_GPIO_Init+0x250>)
 8001670:	f004 fdac 	bl	80061cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001674:	2200      	movs	r2, #0
 8001676:	2105      	movs	r1, #5
 8001678:	2028      	movs	r0, #40	; 0x28
 800167a:	f001 fb1f 	bl	8002cbc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800167e:	2028      	movs	r0, #40	; 0x28
 8001680:	f001 fb36 	bl	8002cf0 <HAL_NVIC_EnableIRQ>

}
 8001684:	bf00      	nop
 8001686:	3730      	adds	r7, #48	; 0x30
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	58024400 	.word	0x58024400
 8001690:	58020800 	.word	0x58020800
 8001694:	58020000 	.word	0x58020000
 8001698:	58020400 	.word	0x58020400
 800169c:	58020c00 	.word	0x58020c00
 80016a0:	58021000 	.word	0x58021000
 80016a4:	58021800 	.word	0x58021800

080016a8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin) /* Interrupt only for BTN1_Pin (1st button from left to right in the breadboard) */
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016b8:	d103      	bne.n	80016c2 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80016ba:	2101      	movs	r1, #1
 80016bc:	4803      	ldr	r0, [pc, #12]	; (80016cc <HAL_GPIO_EXTI_Callback+0x24>)
 80016be:	f004 ff46 	bl	800654e <HAL_GPIO_TogglePin>

	}

}
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	58020400 	.word	0x58020400

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80016d6:	f000 f903 	bl	80018e0 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80016da:	4b42      	ldr	r3, [pc, #264]	; (80017e4 <main+0x114>)
 80016dc:	695b      	ldr	r3, [r3, #20]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d11b      	bne.n	800171e <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80016e6:	f3bf 8f4f 	dsb	sy
}
 80016ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016ec:	f3bf 8f6f 	isb	sy
}
 80016f0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <main+0x114>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80016fa:	f3bf 8f4f 	dsb	sy
}
 80016fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001700:	f3bf 8f6f 	isb	sy
}
 8001704:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <main+0x114>)
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	4a36      	ldr	r2, [pc, #216]	; (80017e4 <main+0x114>)
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001712:	f3bf 8f4f 	dsb	sy
}
 8001716:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001718:	f3bf 8f6f 	isb	sy
}
 800171c:	e000      	b.n	8001720 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800171e:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <main+0x114>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d138      	bne.n	800179e <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800172c:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <main+0x114>)
 800172e:	2200      	movs	r2, #0
 8001730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001734:	f3bf 8f4f 	dsb	sy
}
 8001738:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <main+0x114>)
 800173c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001740:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	0b5b      	lsrs	r3, r3, #13
 8001746:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800174a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	08db      	lsrs	r3, r3, #3
 8001750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001754:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	015a      	lsls	r2, r3, #5
 800175a:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800175e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001764:	491f      	ldr	r1, [pc, #124]	; (80017e4 <main+0x114>)
 8001766:	4313      	orrs	r3, r2
 8001768:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	607a      	str	r2, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d1ef      	bne.n	8001756 <main+0x86>
    } while(sets-- != 0U);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	60ba      	str	r2, [r7, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e5      	bne.n	800174c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001780:	f3bf 8f4f 	dsb	sy
}
 8001784:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <main+0x114>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	4a16      	ldr	r2, [pc, #88]	; (80017e4 <main+0x114>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001790:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001792:	f3bf 8f4f 	dsb	sy
}
 8001796:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001798:	f3bf 8f6f 	isb	sy
}
 800179c:	e000      	b.n	80017a0 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800179e:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017a0:	f001 f940 	bl	8002a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017a4:	f000 f820 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017a8:	f7ff fe52 	bl	8001450 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80017ac:	f000 fef6 	bl	800259c <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 80017b0:	f000 ffa6 	bl	8002700 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 80017b4:	f7ff fb1a 	bl	8000dec <MX_FDCAN1_Init>
  MX_TIM6_Init();
 80017b8:	f000 fe96 	bl	80024e8 <MX_TIM6_Init>
  MX_SPI1_Init();
 80017bc:	f000 f8d6 	bl	800196c <MX_SPI1_Init>
  MX_CRC_Init();
 80017c0:	f7ff fad0 	bl	8000d64 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 80017c4:	f7ff fbf4 	bl	8000fb0 <FDCAN1_MSG_config>
  ST7735_Init(0);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f7ff f8cb 	bl	8000964 <ST7735_Init>
  fillScreen(BLACK);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7fe ff9e 	bl	8000710 <fillScreen>
  //testAll();

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80017d4:	f00a f92e 	bl	800ba34 <osKernelInitialize>
  MX_FREERTOS_Init();
 80017d8:	f7ff fcca 	bl	8001170 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 80017dc:	f00a f94e 	bl	800ba7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <main+0x110>
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b09c      	sub	sp, #112	; 0x70
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f2:	224c      	movs	r2, #76	; 0x4c
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f019 fa5d 	bl	801acb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2220      	movs	r2, #32
 8001800:	2100      	movs	r1, #0
 8001802:	4618      	mov	r0, r3
 8001804:	f019 fa57 	bl	801acb6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001808:	2002      	movs	r0, #2
 800180a:	f004 fed5 	bl	80065b8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800180e:	2300      	movs	r3, #0
 8001810:	603b      	str	r3, [r7, #0]
 8001812:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <SystemClock_Config+0xf0>)
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800181a:	4a2f      	ldr	r2, [pc, #188]	; (80018d8 <SystemClock_Config+0xf0>)
 800181c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001820:	6193      	str	r3, [r2, #24]
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <SystemClock_Config+0xf0>)
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800182e:	bf00      	nop
 8001830:	4b29      	ldr	r3, [pc, #164]	; (80018d8 <SystemClock_Config+0xf0>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001838:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800183c:	d1f8      	bne.n	8001830 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800183e:	4b27      	ldr	r3, [pc, #156]	; (80018dc <SystemClock_Config+0xf4>)
 8001840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001842:	f023 0303 	bic.w	r3, r3, #3
 8001846:	4a25      	ldr	r2, [pc, #148]	; (80018dc <SystemClock_Config+0xf4>)
 8001848:	f043 0302 	orr.w	r3, r3, #2
 800184c:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800184e:	2321      	movs	r3, #33	; 0x21
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001852:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001858:	2301      	movs	r3, #1
 800185a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800185c:	2302      	movs	r3, #2
 800185e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001860:	2302      	movs	r3, #2
 8001862:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001868:	2318      	movs	r3, #24
 800186a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001870:	2302      	movs	r3, #2
 8001872:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001874:	2302      	movs	r3, #2
 8001876:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001878:	230c      	movs	r3, #12
 800187a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800187c:	2300      	movs	r3, #0
 800187e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001888:	4618      	mov	r0, r3
 800188a:	f004 fecf 	bl	800662c <HAL_RCC_OscConfig>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001894:	f000 f864 	bl	8001960 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001898:	233f      	movs	r3, #63	; 0x3f
 800189a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800189c:	2303      	movs	r3, #3
 800189e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80018a4:	2308      	movs	r3, #8
 80018a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80018a8:	2340      	movs	r3, #64	; 0x40
 80018aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80018ac:	2340      	movs	r3, #64	; 0x40
 80018ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80018b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018b4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80018b6:	2340      	movs	r3, #64	; 0x40
 80018b8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2101      	movs	r1, #1
 80018be:	4618      	mov	r0, r3
 80018c0:	f005 fa60 	bl	8006d84 <HAL_RCC_ClockConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80018ca:	f000 f849 	bl	8001960 <Error_Handler>
  }
}
 80018ce:	bf00      	nop
 80018d0:	3770      	adds	r7, #112	; 0x70
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	58024800 	.word	0x58024800
 80018dc:	58024400 	.word	0x58024400

080018e0 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80018e6:	463b      	mov	r3, r7
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80018f2:	f001 fa0b 	bl	8002d0c <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80018f6:	2301      	movs	r3, #1
 80018f8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80018fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001902:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001904:	230e      	movs	r3, #14
 8001906:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001908:	2300      	movs	r3, #0
 800190a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800190c:	2301      	movs	r3, #1
 800190e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001910:	2303      	movs	r3, #3
 8001912:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001914:	2301      	movs	r3, #1
 8001916:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001918:	2301      	movs	r3, #1
 800191a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800191c:	2300      	movs	r3, #0
 800191e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001924:	463b      	mov	r3, r7
 8001926:	4618      	mov	r0, r3
 8001928:	f001 fa28 	bl	8002d7c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800192c:	2004      	movs	r0, #4
 800192e:	f001 fa05 	bl	8002d3c <HAL_MPU_Enable>

}
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a04      	ldr	r2, [pc, #16]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d101      	bne.n	8001952 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800194e:	f001 f8a5 	bl	8002a9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001952:	bf00      	nop
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	40010000 	.word	0x40010000

08001960 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001964:	b672      	cpsid	i
}
 8001966:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001968:	e7fe      	b.n	8001968 <Error_Handler+0x8>
	...

0800196c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001970:	4b27      	ldr	r3, [pc, #156]	; (8001a10 <MX_SPI1_Init+0xa4>)
 8001972:	4a28      	ldr	r2, [pc, #160]	; (8001a14 <MX_SPI1_Init+0xa8>)
 8001974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001976:	4b26      	ldr	r3, [pc, #152]	; (8001a10 <MX_SPI1_Init+0xa4>)
 8001978:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800197c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <MX_SPI1_Init+0xa4>)
 8001980:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001984:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001986:	4b22      	ldr	r3, [pc, #136]	; (8001a10 <MX_SPI1_Init+0xa4>)
 8001988:	2207      	movs	r2, #7
 800198a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <MX_SPI1_Init+0xa4>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001992:	4b1f      	ldr	r3, [pc, #124]	; (8001a10 <MX_SPI1_Init+0xa4>)
 8001994:	2200      	movs	r2, #0
 8001996:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001998:	4b1d      	ldr	r3, [pc, #116]	; (8001a10 <MX_SPI1_Init+0xa4>)
 800199a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800199e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019a2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80019a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ae:	4b18      	ldr	r3, [pc, #96]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80019ba:	4b15      	ldr	r3, [pc, #84]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019bc:	2200      	movs	r2, #0
 80019be:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80019c6:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80019cc:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80019d8:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019da:	2200      	movs	r2, #0
 80019dc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80019e4:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80019ea:	4b09      	ldr	r3, [pc, #36]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80019f0:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019fc:	4804      	ldr	r0, [pc, #16]	; (8001a10 <MX_SPI1_Init+0xa4>)
 80019fe:	f007 f8ab 	bl	8008b58 <HAL_SPI_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8001a08:	f7ff ffaa 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	24004da0 	.word	0x24004da0
 8001a14:	40013000 	.word	0x40013000

08001a18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b0b8      	sub	sp, #224	; 0xe0
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a30:	f107 0318 	add.w	r3, r7, #24
 8001a34:	22b4      	movs	r2, #180	; 0xb4
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f019 f93c 	bl	801acb6 <memset>
  if(spiHandle->Instance==SPI1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a36      	ldr	r2, [pc, #216]	; (8001b1c <HAL_SPI_MspInit+0x104>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d165      	bne.n	8001b14 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8001a48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a52:	f107 0318 	add.w	r3, r7, #24
 8001a56:	4618      	mov	r0, r3
 8001a58:	f005 fd62 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001a62:	f7ff ff7d 	bl	8001960 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a66:	4b2e      	ldr	r3, [pc, #184]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a6c:	4a2c      	ldr	r2, [pc, #176]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001a6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a72:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001a76:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	4a25      	ldr	r2, [pc, #148]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	; (8001b20 <HAL_SPI_MspInit+0x108>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001ac0:	2320      	movs	r3, #32
 8001ac2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ad8:	2305      	movs	r3, #5
 8001ada:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480f      	ldr	r0, [pc, #60]	; (8001b24 <HAL_SPI_MspInit+0x10c>)
 8001ae6:	f004 fb71 	bl	80061cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afc:	2300      	movs	r3, #0
 8001afe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b02:	2305      	movs	r3, #5
 8001b04:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4806      	ldr	r0, [pc, #24]	; (8001b28 <HAL_SPI_MspInit+0x110>)
 8001b10:	f004 fb5c 	bl	80061cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b14:	bf00      	nop
 8001b16:	37e0      	adds	r7, #224	; 0xe0
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40013000 	.word	0x40013000
 8001b20:	58024400 	.word	0x58024400
 8001b24:	58020000 	.word	0x58020000
 8001b28:	58020c00 	.word	0x58020c00

08001b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <HAL_MspInit+0x38>)
 8001b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_MspInit+0x38>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_MspInit+0x38>)
 8001b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	607b      	str	r3, [r7, #4]
 8001b4e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	210f      	movs	r1, #15
 8001b54:	f06f 0001 	mvn.w	r0, #1
 8001b58:	f001 f8b0 	bl	8002cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	58024400 	.word	0x58024400

08001b68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08e      	sub	sp, #56	; 0x38
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b0f      	cmp	r3, #15
 8001b74:	d844      	bhi.n	8001c00 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001b76:	2200      	movs	r2, #0
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	2019      	movs	r0, #25
 8001b7c:	f001 f89e 	bl	8002cbc <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b80:	2019      	movs	r0, #25
 8001b82:	f001 f8b5 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001b86:	4a24      	ldr	r2, [pc, #144]	; (8001c18 <HAL_InitTick+0xb0>)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b8c:	4b23      	ldr	r3, [pc, #140]	; (8001c1c <HAL_InitTick+0xb4>)
 8001b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b92:	4a22      	ldr	r2, [pc, #136]	; (8001c1c <HAL_InitTick+0xb4>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001b9c:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <HAL_InitTick+0xb4>)
 8001b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001baa:	f107 020c 	add.w	r2, r7, #12
 8001bae:	f107 0310 	add.w	r3, r7, #16
 8001bb2:	4611      	mov	r1, r2
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f005 fc71 	bl	800749c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001bba:	f005 fc59 	bl	8007470 <HAL_RCC_GetPCLK2Freq>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <HAL_InitTick+0xb8>)
 8001bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001bcc:	0c9b      	lsrs	r3, r3, #18
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bd2:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_InitTick+0xbc>)
 8001bd4:	4a14      	ldr	r2, [pc, #80]	; (8001c28 <HAL_InitTick+0xc0>)
 8001bd6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bd8:	4b12      	ldr	r3, [pc, #72]	; (8001c24 <HAL_InitTick+0xbc>)
 8001bda:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bde:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001be0:	4a10      	ldr	r2, [pc, #64]	; (8001c24 <HAL_InitTick+0xbc>)
 8001be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001be4:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001be6:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_InitTick+0xbc>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_InitTick+0xbc>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001bf2:	480c      	ldr	r0, [pc, #48]	; (8001c24 <HAL_InitTick+0xbc>)
 8001bf4:	f007 fb91 	bl	800931a <HAL_TIM_Base_Init>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d107      	bne.n	8001c0e <HAL_InitTick+0xa6>
 8001bfe:	e001      	b.n	8001c04 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e005      	b.n	8001c10 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <HAL_InitTick+0xbc>)
 8001c06:	f007 fbdf 	bl	80093c8 <HAL_TIM_Base_Start_IT>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	e000      	b.n	8001c10 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3738      	adds	r7, #56	; 0x38
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	24000010 	.word	0x24000010
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	431bde83 	.word	0x431bde83
 8001c24:	24004e28 	.word	0x24004e28
 8001c28:	40010000 	.word	0x40010000

08001c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c30:	e7fe      	b.n	8001c30 <NMI_Handler+0x4>

08001c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c32:	b480      	push	{r7}
 8001c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c36:	e7fe      	b.n	8001c36 <HardFault_Handler+0x4>

08001c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <MemManage_Handler+0x4>

08001c3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <BusFault_Handler+0x4>

08001c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <UsageFault_Handler+0x4>

08001c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001c5c:	4802      	ldr	r0, [pc, #8]	; (8001c68 <FDCAN1_IT0_IRQHandler+0x10>)
 8001c5e:	f003 fda7 	bl	80057b0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	24004c9c 	.word	0x24004c9c

08001c6c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001c70:	4802      	ldr	r0, [pc, #8]	; (8001c7c <TIM1_UP_IRQHandler+0x10>)
 8001c72:	f007 fc2f 	bl	80094d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	24004e28 	.word	0x24004e28

08001c80 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_PWR_EN_Pin);
 8001c84:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001c88:	f004 fc7b 	bl	8006582 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001c94:	4802      	ldr	r0, [pc, #8]	; (8001ca0 <ETH_IRQHandler+0x10>)
 8001c96:	f001 fe79 	bl	800398c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	240050b0 	.word	0x240050b0

08001ca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
	return 1;
 8001ca8:	2301      	movs	r3, #1
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <_kill>:

int _kill(int pid, int sig)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <_kill+0x20>)
 8001cc0:	2216      	movs	r2, #22
 8001cc2:	601a      	str	r2, [r3, #0]
	return -1;
 8001cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	2400828c 	.word	0x2400828c

08001cd8 <_exit>:

void _exit (int status)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f7ff ffe5 	bl	8001cb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001cea:	e7fe      	b.n	8001cea <_exit+0x12>

08001cec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b086      	sub	sp, #24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	60f8      	str	r0, [r7, #12]
 8001cf4:	60b9      	str	r1, [r7, #8]
 8001cf6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	617b      	str	r3, [r7, #20]
 8001cfc:	e00a      	b.n	8001d14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001cfe:	f3af 8000 	nop.w
 8001d02:	4601      	mov	r1, r0
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	1c5a      	adds	r2, r3, #1
 8001d08:	60ba      	str	r2, [r7, #8]
 8001d0a:	b2ca      	uxtb	r2, r1
 8001d0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	3301      	adds	r3, #1
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697a      	ldr	r2, [r7, #20]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	dbf0      	blt.n	8001cfe <_read+0x12>
	}

return len;
 8001d1c:	687b      	ldr	r3, [r7, #4]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3718      	adds	r7, #24
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
 8001d36:	e009      	b.n	8001d4c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	60ba      	str	r2, [r7, #8]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	dbf1      	blt.n	8001d38 <_write+0x12>
	}
	return len;
 8001d54:	687b      	ldr	r3, [r7, #4]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <_close>:

int _close(int file)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
	return -1;
 8001d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
 8001d7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d86:	605a      	str	r2, [r3, #4]
	return 0;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_isatty>:

int _isatty(int file)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d9e:	2301      	movs	r3, #1
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
	return 0;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b087      	sub	sp, #28
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <_sbrk+0x5c>)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <_sbrk+0x60>)
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <_sbrk+0x64>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <_sbrk+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d205      	bcs.n	8001e04 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <_sbrk+0x6c>)
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001e02:	e009      	b.n	8001e18 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e04:	4b09      	ldr	r3, [pc, #36]	; (8001e2c <_sbrk+0x64>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0a:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a06      	ldr	r2, [pc, #24]	; (8001e2c <_sbrk+0x64>)
 8001e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e16:	68fb      	ldr	r3, [r7, #12]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	24050000 	.word	0x24050000
 8001e28:	00000400 	.word	0x00000400
 8001e2c:	240000bc 	.word	0x240000bc
 8001e30:	240082a0 	.word	0x240082a0
 8001e34:	2400828c 	.word	0x2400828c

08001e38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <SystemInit+0xd8>)
 8001e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e42:	4a33      	ldr	r2, [pc, #204]	; (8001f10 <SystemInit+0xd8>)
 8001e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e4c:	4b31      	ldr	r3, [pc, #196]	; (8001f14 <SystemInit+0xdc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 030f 	and.w	r3, r3, #15
 8001e54:	2b06      	cmp	r3, #6
 8001e56:	d807      	bhi.n	8001e68 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e58:	4b2e      	ldr	r3, [pc, #184]	; (8001f14 <SystemInit+0xdc>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f023 030f 	bic.w	r3, r3, #15
 8001e60:	4a2c      	ldr	r2, [pc, #176]	; (8001f14 <SystemInit+0xdc>)
 8001e62:	f043 0307 	orr.w	r3, r3, #7
 8001e66:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e68:	4b2b      	ldr	r3, [pc, #172]	; (8001f18 <SystemInit+0xe0>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2a      	ldr	r2, [pc, #168]	; (8001f18 <SystemInit+0xe0>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e74:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <SystemInit+0xe0>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e7a:	4b27      	ldr	r3, [pc, #156]	; (8001f18 <SystemInit+0xe0>)
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4926      	ldr	r1, [pc, #152]	; (8001f18 <SystemInit+0xe0>)
 8001e80:	4b26      	ldr	r3, [pc, #152]	; (8001f1c <SystemInit+0xe4>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001e86:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <SystemInit+0xdc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0308 	and.w	r3, r3, #8
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d007      	beq.n	8001ea2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <SystemInit+0xdc>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f023 030f 	bic.w	r3, r3, #15
 8001e9a:	4a1e      	ldr	r2, [pc, #120]	; (8001f14 <SystemInit+0xdc>)
 8001e9c:	f043 0307 	orr.w	r3, r3, #7
 8001ea0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001ea2:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <SystemInit+0xe0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	; (8001f18 <SystemInit+0xe0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001eae:	4b1a      	ldr	r3, [pc, #104]	; (8001f18 <SystemInit+0xe0>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001eb4:	4b18      	ldr	r3, [pc, #96]	; (8001f18 <SystemInit+0xe0>)
 8001eb6:	4a1a      	ldr	r2, [pc, #104]	; (8001f20 <SystemInit+0xe8>)
 8001eb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001eba:	4b17      	ldr	r3, [pc, #92]	; (8001f18 <SystemInit+0xe0>)
 8001ebc:	4a19      	ldr	r2, [pc, #100]	; (8001f24 <SystemInit+0xec>)
 8001ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ec0:	4b15      	ldr	r3, [pc, #84]	; (8001f18 <SystemInit+0xe0>)
 8001ec2:	4a19      	ldr	r2, [pc, #100]	; (8001f28 <SystemInit+0xf0>)
 8001ec4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ec6:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <SystemInit+0xe0>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <SystemInit+0xe0>)
 8001ece:	4a16      	ldr	r2, [pc, #88]	; (8001f28 <SystemInit+0xf0>)
 8001ed0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <SystemInit+0xe0>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	; (8001f18 <SystemInit+0xe0>)
 8001eda:	4a13      	ldr	r2, [pc, #76]	; (8001f28 <SystemInit+0xf0>)
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <SystemInit+0xe0>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <SystemInit+0xe0>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <SystemInit+0xe0>)
 8001eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <SystemInit+0xe0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ef6:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <SystemInit+0xf4>)
 8001ef8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001efc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001efe:	4b04      	ldr	r3, [pc, #16]	; (8001f10 <SystemInit+0xd8>)
 8001f00:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f04:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr
 8001f10:	e000ed00 	.word	0xe000ed00
 8001f14:	52002000 	.word	0x52002000
 8001f18:	58024400 	.word	0x58024400
 8001f1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001f20:	02020200 	.word	0x02020200
 8001f24:	01ff0000 	.word	0x01ff0000
 8001f28:	01010280 	.word	0x01010280
 8001f2c:	52004000 	.word	0x52004000

08001f30 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001f36:	f011 f941 	bl	80131bc <tcp_new>
 8001f3a:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 50, 100);
 8001f3c:	4b0f      	ldr	r3, [pc, #60]	; (8001f7c <tcp_server_init+0x4c>)
 8001f3e:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8001f40:	1d3b      	adds	r3, r7, #4
 8001f42:	220a      	movs	r2, #10
 8001f44:	4619      	mov	r1, r3
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f010 f894 	bl	8012074 <tcp_bind>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001f50:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d109      	bne.n	8001f6c <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001f58:	21ff      	movs	r1, #255	; 0xff
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f010 f942 	bl	80121e4 <tcp_listen_with_backlog>
 8001f60:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001f62:	4907      	ldr	r1, [pc, #28]	; (8001f80 <tcp_server_init+0x50>)
 8001f64:	68f8      	ldr	r0, [r7, #12]
 8001f66:	f011 f9a9 	bl	80132bc <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001f6a:	e003      	b.n	8001f74 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001f6c:	68f9      	ldr	r1, [r7, #12]
 8001f6e:	2001      	movs	r0, #1
 8001f70:	f00e fc2c 	bl	80107cc <memp_free>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	6432a8c0 	.word	0x6432a8c0
 8001f80:	08001f85 	.word	0x08001f85

08001f84 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	4613      	mov	r3, r2
 8001f90:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001f92:	2101      	movs	r1, #1
 8001f94:	68b8      	ldr	r0, [r7, #8]
 8001f96:	f010 ff1f 	bl	8012dd8 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001f9a:	200c      	movs	r0, #12
 8001f9c:	f00e f9fc 	bl	8010398 <mem_malloc>
 8001fa0:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d01f      	beq.n	8001fe8 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001fc0:	6939      	ldr	r1, [r7, #16]
 8001fc2:	68b8      	ldr	r0, [r7, #8]
 8001fc4:	f011 f902 	bl	80131cc <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001fc8:	490d      	ldr	r1, [pc, #52]	; (8002000 <tcp_server_accept+0x7c>)
 8001fca:	68b8      	ldr	r0, [r7, #8]
 8001fcc:	f011 f910 	bl	80131f0 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8001fd0:	490c      	ldr	r1, [pc, #48]	; (8002004 <tcp_server_accept+0x80>)
 8001fd2:	68b8      	ldr	r0, [r7, #8]
 8001fd4:	f011 f950 	bl	8013278 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	490b      	ldr	r1, [pc, #44]	; (8002008 <tcp_server_accept+0x84>)
 8001fdc:	68b8      	ldr	r0, [r7, #8]
 8001fde:	f011 f985 	bl	80132ec <tcp_poll>

    ret_err = ERR_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	75fb      	strb	r3, [r7, #23]
 8001fe6:	e005      	b.n	8001ff4 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	68b8      	ldr	r0, [r7, #8]
 8001fec:	f000 f965 	bl	80022ba <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001ff0:	23ff      	movs	r3, #255	; 0xff
 8001ff2:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001ff4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	0800200d 	.word	0x0800200d
 8002004:	08002141 	.word	0x08002141
 8002008:	08002165 	.word	0x08002165

0800200c <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	60f8      	str	r0, [r7, #12]
 8002014:	60b9      	str	r1, [r7, #8]
 8002016:	607a      	str	r2, [r7, #4]
 8002018:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d105      	bne.n	800202c <tcp_server_recv+0x20>
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <tcp_server_recv+0x124>)
 8002022:	22bf      	movs	r2, #191	; 0xbf
 8002024:	4943      	ldr	r1, [pc, #268]	; (8002134 <tcp_server_recv+0x128>)
 8002026:	4844      	ldr	r0, [pc, #272]	; (8002138 <tcp_server_recv+0x12c>)
 8002028:	f018 fea8 	bl	801ad7c <iprintf>

  es = (struct tcp_server_struct *)arg;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d116      	bne.n	8002064 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2203      	movs	r2, #3
 800203a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d104      	bne.n	800204e <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8002044:	69b9      	ldr	r1, [r7, #24]
 8002046:	68b8      	ldr	r0, [r7, #8]
 8002048:	f000 f937 	bl	80022ba <tcp_server_connection_close>
 800204c:	e007      	b.n	800205e <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 800204e:	493b      	ldr	r1, [pc, #236]	; (800213c <tcp_server_recv+0x130>)
 8002050:	68b8      	ldr	r0, [r7, #8]
 8002052:	f011 f8ef 	bl	8013234 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8002056:	69b9      	ldr	r1, [r7, #24]
 8002058:	68b8      	ldr	r0, [r7, #8]
 800205a:	f000 f8db 	bl	8002214 <tcp_server_send>
    }
    ret_err = ERR_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	77fb      	strb	r3, [r7, #31]
 8002062:	e05f      	b.n	8002124 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8002064:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00b      	beq.n	8002084 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d005      	beq.n	800207e <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2200      	movs	r2, #0
 8002076:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f00f fa4b 	bl	8011514 <pbuf_free>
    }
    ret_err = err;
 800207e:	78fb      	ldrb	r3, [r7, #3]
 8002080:	77fb      	strb	r3, [r7, #31]
 8002082:	e04f      	b.n	8002124 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d110      	bne.n	80020ae <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	2202      	movs	r2, #2
 8002090:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8002098:	4928      	ldr	r1, [pc, #160]	; (800213c <tcp_server_recv+0x130>)
 800209a:	68b8      	ldr	r0, [r7, #8]
 800209c:	f011 f8ca 	bl	8013234 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 80020a0:	69b9      	ldr	r1, [r7, #24]
 80020a2:	68b8      	ldr	r0, [r7, #8]
 80020a4:	f000 f930 	bl	8002308 <tcp_server_handle>

    ret_err = ERR_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	77fb      	strb	r3, [r7, #31]
 80020ac:	e03a      	b.n	8002124 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	781b      	ldrb	r3, [r3, #0]
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d115      	bne.n	80020e2 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d107      	bne.n	80020ce <tcp_server_recv+0xc2>
    {
      es->p = p;
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 80020c4:	69b9      	ldr	r1, [r7, #24]
 80020c6:	68b8      	ldr	r0, [r7, #8]
 80020c8:	f000 f91e 	bl	8002308 <tcp_server_handle>
 80020cc:	e006      	b.n	80020dc <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	6978      	ldr	r0, [r7, #20]
 80020d8:	f00f fb40 	bl	801175c <pbuf_chain>
    }
    ret_err = ERR_OK;
 80020dc:	2300      	movs	r3, #0
 80020de:	77fb      	strb	r3, [r7, #31]
 80020e0:	e020      	b.n	8002124 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d10e      	bne.n	8002108 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	891b      	ldrh	r3, [r3, #8]
 80020ee:	4619      	mov	r1, r3
 80020f0:	68b8      	ldr	r0, [r7, #8]
 80020f2:	f010 f98d 	bl	8012410 <tcp_recved>
    es->p = NULL;
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f00f fa09 	bl	8011514 <pbuf_free>
    ret_err = ERR_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	77fb      	strb	r3, [r7, #31]
 8002106:	e00d      	b.n	8002124 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	891b      	ldrh	r3, [r3, #8]
 800210c:	4619      	mov	r1, r3
 800210e:	68b8      	ldr	r0, [r7, #8]
 8002110:	f010 f97e 	bl	8012410 <tcp_recved>
    es->p = NULL;
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f00f f9fa 	bl	8011514 <pbuf_free>
    ret_err = ERR_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8002124:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3720      	adds	r7, #32
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	0801bcf4 	.word	0x0801bcf4
 8002134:	0801bd10 	.word	0x0801bd10
 8002138:	0801bd1c 	.word	0x0801bd1c
 800213c:	080021c5 	.word	0x080021c5

08002140 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	460b      	mov	r3, r1
 800214a:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f00d ff84 	bl	8010064 <mem_free>
  }
}
 800215c:	bf00      	nop
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d017      	beq.n	80021a8 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8002180:	490f      	ldr	r1, [pc, #60]	; (80021c0 <tcp_server_poll+0x5c>)
 8002182:	6838      	ldr	r0, [r7, #0]
 8002184:	f011 f856 	bl	8013234 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	6838      	ldr	r0, [r7, #0]
 800218c:	f000 f842 	bl	8002214 <tcp_server_send>
 8002190:	e007      	b.n	80021a2 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d103      	bne.n	80021a2 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	6838      	ldr	r0, [r7, #0]
 800219e:	f000 f88c 	bl	80022ba <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e004      	b.n	80021b2 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80021a8:	6838      	ldr	r0, [r7, #0]
 80021aa:	f00f ff57 	bl	801205c <tcp_abort>
    ret_err = ERR_ABRT;
 80021ae:	23f3      	movs	r3, #243	; 0xf3
 80021b0:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80021b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	080021c5 	.word	0x080021c5

080021c4 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	4613      	mov	r3, r2
 80021d0:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2200      	movs	r2, #0
 80021da:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d008      	beq.n	80021f6 <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 80021e4:	490a      	ldr	r1, [pc, #40]	; (8002210 <tcp_server_sent+0x4c>)
 80021e6:	68b8      	ldr	r0, [r7, #8]
 80021e8:	f011 f824 	bl	8013234 <tcp_sent>
    tcp_server_send(tpcb, es);
 80021ec:	6979      	ldr	r1, [r7, #20]
 80021ee:	68b8      	ldr	r0, [r7, #8]
 80021f0:	f000 f810 	bl	8002214 <tcp_server_send>
 80021f4:	e007      	b.n	8002206 <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	781b      	ldrb	r3, [r3, #0]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d103      	bne.n	8002206 <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 80021fe:	6979      	ldr	r1, [r7, #20]
 8002200:	68b8      	ldr	r0, [r7, #8]
 8002202:	f000 f85a 	bl	80022ba <tcp_server_connection_close>
  }
  return ERR_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	080021c5 	.word	0x080021c5

08002214 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 800221e:	2300      	movs	r3, #0
 8002220:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8002222:	e036      	b.n	8002292 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	895a      	ldrh	r2, [r3, #10]
 8002232:	2301      	movs	r3, #1
 8002234:	6878      	ldr	r0, [r7, #4]
 8002236:	f013 ff07 	bl	8016048 <tcp_write>
 800223a:	4603      	mov	r3, r0
 800223c:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 800223e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d11d      	bne.n	8002282 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	895b      	ldrh	r3, [r3, #10]
 800224a:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4618      	mov	r0, r3
 8002262:	f00f f9fd 	bl	8011660 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8002266:	6938      	ldr	r0, [r7, #16]
 8002268:	f00f f954 	bl	8011514 <pbuf_free>
 800226c:	4603      	mov	r3, r0
 800226e:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8002270:	7b7b      	ldrb	r3, [r7, #13]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f7      	beq.n	8002266 <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8002276:	89fb      	ldrh	r3, [r7, #14]
 8002278:	4619      	mov	r1, r3
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f010 f8c8 	bl	8012410 <tcp_recved>
 8002280:	e007      	b.n	8002292 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8002282:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800228a:	d102      	bne.n	8002292 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8002292:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10b      	bne.n	80022b2 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d007      	beq.n	80022b2 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	895a      	ldrh	r2, [r3, #10]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d9b8      	bls.n	8002224 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 80022b2:	bf00      	nop
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}

080022ba <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 80022c4:	2100      	movs	r1, #0
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f010 ff80 	bl	80131cc <tcp_arg>
  tcp_sent(tpcb, NULL);
 80022cc:	2100      	movs	r1, #0
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f010 ffb0 	bl	8013234 <tcp_sent>
  tcp_recv(tpcb, NULL);
 80022d4:	2100      	movs	r1, #0
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f010 ff8a 	bl	80131f0 <tcp_recv>
  tcp_err(tpcb, NULL);
 80022dc:	2100      	movs	r1, #0
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f010 ffca 	bl	8013278 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 80022e4:	2200      	movs	r2, #0
 80022e6:	2100      	movs	r1, #0
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	f010 ffff 	bl	80132ec <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 80022f4:	6838      	ldr	r0, [r7, #0]
 80022f6:	f00d feb5 	bl	8010064 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f00f fdc4 	bl	8011e88 <tcp_close>
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <tcp_server_handle>:

/* Handle the incoming TCP Data */

void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002308:	b590      	push	{r4, r7, lr}
 800230a:	b0ad      	sub	sp, #180	; 0xb4
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	//struct tcp_server_struct *esTx;

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	uint16_t inPort = tpcb->remote_port;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	8b1b      	ldrh	r3, [r3, #24]
 8002324:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa

	char strTestMode1[] = "Test_Mode_1";
 8002328:	4a69      	ldr	r2, [pc, #420]	; (80024d0 <tcp_server_handle+0x1c8>)
 800232a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800232e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002330:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char strTestMode2[] = "Test_Mode_2";
 8002334:	4a67      	ldr	r2, [pc, #412]	; (80024d4 <tcp_server_handle+0x1cc>)
 8002336:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800233a:	ca07      	ldmia	r2, {r0, r1, r2}
 800233c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char strTestMode3[] = "Test_Mode_3";
 8002340:	4a65      	ldr	r2, [pc, #404]	; (80024d8 <tcp_server_handle+0x1d0>)
 8002342:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002346:	ca07      	ldmia	r2, {r0, r1, r2}
 8002348:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char strTestMode4[] = "Test_Mode_4";
 800234c:	4a63      	ldr	r2, [pc, #396]	; (80024dc <tcp_server_handle+0x1d4>)
 800234e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002352:	ca07      	ldmia	r2, {r0, r1, r2}
 8002354:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8002358:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800235c:	4618      	mov	r0, r3
 800235e:	f017 fadf 	bl	8019920 <ip4addr_ntoa>
 8002362:	f8c7 00a4 	str.w	r0, [r7, #164]	; 0xa4

	esTx->state = es->state;
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800236e:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002378:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002382:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8002384:	f107 030c 	add.w	r3, r7, #12
 8002388:	2264      	movs	r2, #100	; 0x64
 800238a:	2100      	movs	r1, #0
 800238c:	4618      	mov	r0, r3
 800238e:	f018 fc92 	bl	801acb6 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	891b      	ldrh	r3, [r3, #8]
 800239e:	461a      	mov	r2, r3
 80023a0:	f107 030c 	add.w	r3, r7, #12
 80023a4:	4618      	mov	r0, r3
 80023a6:	f018 fe06 	bl	801afb6 <strncpy>

	if(!strcmp(buf, strTestMode1))
 80023aa:	f107 0294 	add.w	r2, r7, #148	; 0x94
 80023ae:	f107 030c 	add.w	r3, r7, #12
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fd ffab 	bl	8000310 <strcmp>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <tcp_server_handle+0xc8>
		xTaskNotify((TaskHandle_t)ControllerHandle, TEST_MODE_1, eSetValueWithOverwrite);
 80023c0:	4b47      	ldr	r3, [pc, #284]	; (80024e0 <tcp_server_handle+0x1d8>)
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	2203      	movs	r2, #3
 80023c8:	2101      	movs	r1, #1
 80023ca:	f00c f9c1 	bl	800e750 <xTaskGenericNotify>
 80023ce:	e037      	b.n	8002440 <tcp_server_handle+0x138>

	else if(!strcmp(buf, strTestMode2))
 80023d0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7fd ff98 	bl	8000310 <strcmp>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d107      	bne.n	80023f6 <tcp_server_handle+0xee>
		xTaskNotify((TaskHandle_t)ControllerHandle, TEST_MODE_2, eSetValueWithOverwrite);
 80023e6:	4b3e      	ldr	r3, [pc, #248]	; (80024e0 <tcp_server_handle+0x1d8>)
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	2300      	movs	r3, #0
 80023ec:	2203      	movs	r2, #3
 80023ee:	2102      	movs	r1, #2
 80023f0:	f00c f9ae 	bl	800e750 <xTaskGenericNotify>
 80023f4:	e024      	b.n	8002440 <tcp_server_handle+0x138>

	else if(!strcmp(buf, strTestMode3))
 80023f6:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 80023fa:	f107 030c 	add.w	r3, r7, #12
 80023fe:	4611      	mov	r1, r2
 8002400:	4618      	mov	r0, r3
 8002402:	f7fd ff85 	bl	8000310 <strcmp>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d107      	bne.n	800241c <tcp_server_handle+0x114>
		xTaskNotify((TaskHandle_t)ControllerHandle, TEST_MODE_3, eSetValueWithOverwrite);
 800240c:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <tcp_server_handle+0x1d8>)
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	2203      	movs	r2, #3
 8002414:	2103      	movs	r1, #3
 8002416:	f00c f99b 	bl	800e750 <xTaskGenericNotify>
 800241a:	e011      	b.n	8002440 <tcp_server_handle+0x138>

	else if(!strcmp(buf, strTestMode4))
 800241c:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8002420:	f107 030c 	add.w	r3, r7, #12
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f7fd ff72 	bl	8000310 <strcmp>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <tcp_server_handle+0x138>
		xTaskNotify((TaskHandle_t)ControllerHandle, TEST_MODE_4, eSetValueWithOverwrite);
 8002432:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <tcp_server_handle+0x1d8>)
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	2300      	movs	r3, #0
 8002438:	2203      	movs	r2, #3
 800243a:	2104      	movs	r1, #4
 800243c:	f00c f988 	bl	800e750 <xTaskGenericNotify>


	strcat (buf, " Received\n");
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	4618      	mov	r0, r3
 8002446:	f7fd ff6d 	bl	8000324 <strlen>
 800244a:	4603      	mov	r3, r0
 800244c:	461a      	mov	r2, r3
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4413      	add	r3, r2
 8002454:	4923      	ldr	r1, [pc, #140]	; (80024e4 <tcp_server_handle+0x1dc>)
 8002456:	461a      	mov	r2, r3
 8002458:	460b      	mov	r3, r1
 800245a:	cb03      	ldmia	r3!, {r0, r1}
 800245c:	6010      	str	r0, [r2, #0]
 800245e:	6051      	str	r1, [r2, #4]
 8002460:	8819      	ldrh	r1, [r3, #0]
 8002462:	789b      	ldrb	r3, [r3, #2]
 8002464:	8111      	strh	r1, [r2, #8]
 8002466:	7293      	strb	r3, [r2, #10]

	esTx->p->payload = (void *)buf;
 8002468:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f107 020c 	add.w	r2, r7, #12
 8002472:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	891a      	ldrh	r2, [r3, #8]
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	895b      	ldrh	r3, [r3, #10]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	b29c      	uxth	r4, r3
 8002484:	f107 030c 	add.w	r3, r7, #12
 8002488:	4618      	mov	r0, r3
 800248a:	f7fd ff4b 	bl	8000324 <strlen>
 800248e:	4603      	mov	r3, r0
 8002490:	b29a      	uxth	r2, r3
 8002492:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4422      	add	r2, r4
 800249a:	b292      	uxth	r2, r2
 800249c:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 800249e:	f107 030c 	add.w	r3, r7, #12
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd ff3e 	bl	8000324 <strlen>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	b292      	uxth	r2, r2
 80024b2:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 80024b4:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff feab 	bl	8002214 <tcp_server_send>

	pbuf_free(es->p);
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f00f f826 	bl	8011514 <pbuf_free>

}
 80024c8:	bf00      	nop
 80024ca:	37b4      	adds	r7, #180	; 0xb4
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd90      	pop	{r4, r7, pc}
 80024d0:	0801bd50 	.word	0x0801bd50
 80024d4:	0801bd5c 	.word	0x0801bd5c
 80024d8:	0801bd68 	.word	0x0801bd68
 80024dc:	0801bd74 	.word	0x0801bd74
 80024e0:	24004c60 	.word	0x24004c60
 80024e4:	0801bd44 	.word	0x0801bd44

080024e8 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	2200      	movs	r2, #0
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	605a      	str	r2, [r3, #4]
 80024f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80024f8:	4b15      	ldr	r3, [pc, #84]	; (8002550 <MX_TIM6_Init+0x68>)
 80024fa:	4a16      	ldr	r2, [pc, #88]	; (8002554 <MX_TIM6_Init+0x6c>)
 80024fc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 80024fe:	4b14      	ldr	r3, [pc, #80]	; (8002550 <MX_TIM6_Init+0x68>)
 8002500:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002504:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002506:	4b12      	ldr	r3, [pc, #72]	; (8002550 <MX_TIM6_Init+0x68>)
 8002508:	2200      	movs	r2, #0
 800250a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <MX_TIM6_Init+0x68>)
 800250e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002512:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002514:	4b0e      	ldr	r3, [pc, #56]	; (8002550 <MX_TIM6_Init+0x68>)
 8002516:	2200      	movs	r2, #0
 8002518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800251a:	480d      	ldr	r0, [pc, #52]	; (8002550 <MX_TIM6_Init+0x68>)
 800251c:	f006 fefd 	bl	800931a <HAL_TIM_Base_Init>
 8002520:	4603      	mov	r3, r0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002526:	f7ff fa1b 	bl	8001960 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	4619      	mov	r1, r3
 8002536:	4806      	ldr	r0, [pc, #24]	; (8002550 <MX_TIM6_Init+0x68>)
 8002538:	f007 f9ba 	bl	80098b0 <HAL_TIMEx_MasterConfigSynchronization>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002542:	f7ff fa0d 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002546:	bf00      	nop
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	24004e74 	.word	0x24004e74
 8002554:	40001000 	.word	0x40001000

08002558 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0b      	ldr	r2, [pc, #44]	; (8002594 <HAL_TIM_Base_MspInit+0x3c>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d10e      	bne.n	8002588 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_TIM_Base_MspInit+0x40>)
 800256c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002570:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_TIM_Base_MspInit+0x40>)
 8002572:	f043 0310 	orr.w	r3, r3, #16
 8002576:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800257a:	4b07      	ldr	r3, [pc, #28]	; (8002598 <HAL_TIM_Base_MspInit+0x40>)
 800257c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002580:	f003 0310 	and.w	r3, r3, #16
 8002584:	60fb      	str	r3, [r7, #12]
 8002586:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40001000 	.word	0x40001000
 8002598:	58024400 	.word	0x58024400

0800259c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025a0:	4b22      	ldr	r3, [pc, #136]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025a2:	4a23      	ldr	r2, [pc, #140]	; (8002630 <MX_USART3_UART_Init+0x94>)
 80025a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80025a6:	4b21      	ldr	r3, [pc, #132]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025c2:	220c      	movs	r2, #12
 80025c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025cc:	4b17      	ldr	r3, [pc, #92]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025ce:	2200      	movs	r2, #0
 80025d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025d2:	4b16      	ldr	r3, [pc, #88]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025d8:	4b14      	ldr	r3, [pc, #80]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025da:	2200      	movs	r2, #0
 80025dc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025de:	4b13      	ldr	r3, [pc, #76]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025e4:	4811      	ldr	r0, [pc, #68]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025e6:	f007 fa1d 	bl	8009a24 <HAL_UART_Init>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80025f0:	f7ff f9b6 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025f4:	2100      	movs	r1, #0
 80025f6:	480d      	ldr	r0, [pc, #52]	; (800262c <MX_USART3_UART_Init+0x90>)
 80025f8:	f008 fb46 	bl	800ac88 <HAL_UARTEx_SetTxFifoThreshold>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002602:	f7ff f9ad 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002606:	2100      	movs	r1, #0
 8002608:	4808      	ldr	r0, [pc, #32]	; (800262c <MX_USART3_UART_Init+0x90>)
 800260a:	f008 fb7b 	bl	800ad04 <HAL_UARTEx_SetRxFifoThreshold>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002614:	f7ff f9a4 	bl	8001960 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002618:	4804      	ldr	r0, [pc, #16]	; (800262c <MX_USART3_UART_Init+0x90>)
 800261a:	f008 fafc 	bl	800ac16 <HAL_UARTEx_DisableFifoMode>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d001      	beq.n	8002628 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002624:	f7ff f99c 	bl	8001960 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002628:	bf00      	nop
 800262a:	bd80      	pop	{r7, pc}
 800262c:	24004ec0 	.word	0x24004ec0
 8002630:	40004800 	.word	0x40004800

08002634 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b0b6      	sub	sp, #216	; 0xd8
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800263c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
 800264a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800264c:	f107 0310 	add.w	r3, r7, #16
 8002650:	22b4      	movs	r2, #180	; 0xb4
 8002652:	2100      	movs	r1, #0
 8002654:	4618      	mov	r0, r3
 8002656:	f018 fb2e 	bl	801acb6 <memset>
  if(uartHandle->Instance==USART3)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a25      	ldr	r2, [pc, #148]	; (80026f4 <HAL_UART_MspInit+0xc0>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d142      	bne.n	80026ea <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002664:	2302      	movs	r3, #2
 8002666:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002668:	2300      	movs	r3, #0
 800266a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	4618      	mov	r0, r3
 8002674:	f004 ff54 	bl	8007520 <HAL_RCCEx_PeriphCLKConfig>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800267e:	f7ff f96f 	bl	8001960 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002682:	4b1d      	ldr	r3, [pc, #116]	; (80026f8 <HAL_UART_MspInit+0xc4>)
 8002684:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002688:	4a1b      	ldr	r2, [pc, #108]	; (80026f8 <HAL_UART_MspInit+0xc4>)
 800268a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800268e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_UART_MspInit+0xc4>)
 8002694:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002698:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800269c:	60fb      	str	r3, [r7, #12]
 800269e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026a0:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <HAL_UART_MspInit+0xc4>)
 80026a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026a6:	4a14      	ldr	r2, [pc, #80]	; (80026f8 <HAL_UART_MspInit+0xc4>)
 80026a8:	f043 0308 	orr.w	r3, r3, #8
 80026ac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <HAL_UART_MspInit+0xc4>)
 80026b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	60bb      	str	r3, [r7, #8]
 80026bc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 80026be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d2:	2300      	movs	r3, #0
 80026d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80026d8:	2307      	movs	r3, #7
 80026da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026de:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80026e2:	4619      	mov	r1, r3
 80026e4:	4805      	ldr	r0, [pc, #20]	; (80026fc <HAL_UART_MspInit+0xc8>)
 80026e6:	f003 fd71 	bl	80061cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80026ea:	bf00      	nop
 80026ec:	37d8      	adds	r7, #216	; 0xd8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	40004800 	.word	0x40004800
 80026f8:	58024400 	.word	0x58024400
 80026fc:	58020c00 	.word	0x58020c00

08002700 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
	...

08002710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002748 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002714:	f7ff fb90 	bl	8001e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002718:	480c      	ldr	r0, [pc, #48]	; (800274c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800271a:	490d      	ldr	r1, [pc, #52]	; (8002750 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800271c:	4a0d      	ldr	r2, [pc, #52]	; (8002754 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800271e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002720:	e002      	b.n	8002728 <LoopCopyDataInit>

08002722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002726:	3304      	adds	r3, #4

08002728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800272a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800272c:	d3f9      	bcc.n	8002722 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800272e:	4a0a      	ldr	r2, [pc, #40]	; (8002758 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002730:	4c0a      	ldr	r4, [pc, #40]	; (800275c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002734:	e001      	b.n	800273a <LoopFillZerobss>

08002736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002738:	3204      	adds	r2, #4

0800273a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800273a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800273c:	d3fb      	bcc.n	8002736 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800273e:	f018 fa77 	bl	801ac30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002742:	f7fe ffc5 	bl	80016d0 <main>
  bx  lr
 8002746:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002748:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800274c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002750:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8002754:	0801f4a8 	.word	0x0801f4a8
  ldr r2, =_sbss
 8002758:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 800275c:	240082a0 	.word	0x240082a0

08002760 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002760:	e7fe      	b.n	8002760 <ADC3_IRQHandler>

08002762 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
 800276a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <LAN8742_RegisterBusIO+0x28>
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <LAN8742_RegisterBusIO+0x28>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <LAN8742_RegisterBusIO+0x28>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d102      	bne.n	8002790 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800278a:	f04f 33ff 	mov.w	r3, #4294967295
 800278e:	e014      	b.n	80027ba <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b086      	sub	sp, #24
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80027ce:	2300      	movs	r3, #0
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d17c      	bne.n	80028e0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2220      	movs	r2, #32
 80027f8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80027fa:	2300      	movs	r3, #0
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	e01c      	b.n	800283a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	f107 0208 	add.w	r2, r7, #8
 8002808:	2112      	movs	r1, #18
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	4798      	blx	r3
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	da03      	bge.n	800281c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002814:	f06f 0304 	mvn.w	r3, #4
 8002818:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800281a:	e00b      	b.n	8002834 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 031f 	and.w	r3, r3, #31
 8002822:	697a      	ldr	r2, [r7, #20]
 8002824:	429a      	cmp	r2, r3
 8002826:	d105      	bne.n	8002834 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800282e:	2300      	movs	r3, #0
 8002830:	613b      	str	r3, [r7, #16]
         break;
 8002832:	e005      	b.n	8002840 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	3301      	adds	r3, #1
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b1f      	cmp	r3, #31
 800283e:	d9df      	bls.n	8002800 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b1f      	cmp	r3, #31
 8002846:	d902      	bls.n	800284e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002848:	f06f 0302 	mvn.w	r3, #2
 800284c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d145      	bne.n	80028e0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6810      	ldr	r0, [r2, #0]
 800285c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002860:	2100      	movs	r1, #0
 8002862:	4798      	blx	r3
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	db37      	blt.n	80028da <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6810      	ldr	r0, [r2, #0]
 8002872:	f107 0208 	add.w	r2, r7, #8
 8002876:	2100      	movs	r1, #0
 8002878:	4798      	blx	r3
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	db28      	blt.n	80028d2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4798      	blx	r3
 8002886:	4603      	mov	r3, r0
 8002888:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800288a:	e01c      	b.n	80028c6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4798      	blx	r3
 8002892:	4603      	mov	r3, r0
 8002894:	461a      	mov	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800289e:	d80e      	bhi.n	80028be <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6810      	ldr	r0, [r2, #0]
 80028a8:	f107 0208 	add.w	r2, r7, #8
 80028ac:	2100      	movs	r1, #0
 80028ae:	4798      	blx	r3
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da07      	bge.n	80028c6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80028b6:	f06f 0304 	mvn.w	r3, #4
 80028ba:	613b      	str	r3, [r7, #16]
                 break;
 80028bc:	e010      	b.n	80028e0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80028be:	f06f 0301 	mvn.w	r3, #1
 80028c2:	613b      	str	r3, [r7, #16]
               break;
 80028c4:	e00c      	b.n	80028e0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1dd      	bne.n	800288c <LAN8742_Init+0xc6>
 80028d0:	e006      	b.n	80028e0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80028d2:	f06f 0304 	mvn.w	r3, #4
 80028d6:	613b      	str	r3, [r7, #16]
 80028d8:	e002      	b.n	80028e0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80028da:	f06f 0303 	mvn.w	r3, #3
 80028de:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d112      	bne.n	800290c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	4798      	blx	r3
 80028ec:	4603      	mov	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80028f0:	bf00      	nop
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	4798      	blx	r3
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002904:	d9f5      	bls.n	80028f2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800290c:	693b      	ldr	r3, [r7, #16]
 }
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002916:	b580      	push	{r7, lr}
 8002918:	b084      	sub	sp, #16
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6810      	ldr	r0, [r2, #0]
 800292a:	f107 020c 	add.w	r2, r7, #12
 800292e:	2101      	movs	r1, #1
 8002930:	4798      	blx	r3
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	da02      	bge.n	800293e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002938:	f06f 0304 	mvn.w	r3, #4
 800293c:	e06e      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6810      	ldr	r0, [r2, #0]
 8002946:	f107 020c 	add.w	r2, r7, #12
 800294a:	2101      	movs	r1, #1
 800294c:	4798      	blx	r3
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	da02      	bge.n	800295a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002954:	f06f 0304 	mvn.w	r3, #4
 8002958:	e060      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002964:	2301      	movs	r3, #1
 8002966:	e059      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	695b      	ldr	r3, [r3, #20]
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6810      	ldr	r0, [r2, #0]
 8002970:	f107 020c 	add.w	r2, r7, #12
 8002974:	2100      	movs	r1, #0
 8002976:	4798      	blx	r3
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	da02      	bge.n	8002984 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800297e:	f06f 0304 	mvn.w	r3, #4
 8002982:	e04b      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d11b      	bne.n	80029c6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d006      	beq.n	80029a6 <LAN8742_GetLinkState+0x90>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80029a2:	2302      	movs	r3, #2
 80029a4:	e03a      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e033      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80029be:	2304      	movs	r3, #4
 80029c0:	e02c      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80029c2:	2305      	movs	r3, #5
 80029c4:	e02a      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6810      	ldr	r0, [r2, #0]
 80029ce:	f107 020c 	add.w	r2, r7, #12
 80029d2:	211f      	movs	r1, #31
 80029d4:	4798      	blx	r3
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	da02      	bge.n	80029e2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80029dc:	f06f 0304 	mvn.w	r3, #4
 80029e0:	e01c      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d101      	bne.n	80029f0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80029ec:	2306      	movs	r3, #6
 80029ee:	e015      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 031c 	and.w	r3, r3, #28
 80029f6:	2b18      	cmp	r3, #24
 80029f8:	d101      	bne.n	80029fe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80029fa:	2302      	movs	r3, #2
 80029fc:	e00e      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f003 031c 	and.w	r3, r3, #28
 8002a04:	2b08      	cmp	r3, #8
 8002a06:	d101      	bne.n	8002a0c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e007      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 031c 	and.w	r3, r3, #28
 8002a12:	2b14      	cmp	r3, #20
 8002a14:	d101      	bne.n	8002a1a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002a16:	2304      	movs	r3, #4
 8002a18:	e000      	b.n	8002a1c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002a1a:	2305      	movs	r3, #5
    }				
  }
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3710      	adds	r7, #16
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a2a:	2003      	movs	r0, #3
 8002a2c:	f000 f93b 	bl	8002ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002a30:	f004 fb5e 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b15      	ldr	r3, [pc, #84]	; (8002a8c <HAL_Init+0x68>)
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	4913      	ldr	r1, [pc, #76]	; (8002a90 <HAL_Init+0x6c>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	f003 031f 	and.w	r3, r3, #31
 8002a48:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a4e:	4b0f      	ldr	r3, [pc, #60]	; (8002a8c <HAL_Init+0x68>)
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <HAL_Init+0x6c>)
 8002a58:	5cd3      	ldrb	r3, [r2, r3]
 8002a5a:	f003 031f 	and.w	r3, r3, #31
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
 8002a64:	4a0b      	ldr	r2, [pc, #44]	; (8002a94 <HAL_Init+0x70>)
 8002a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a68:	4a0b      	ldr	r2, [pc, #44]	; (8002a98 <HAL_Init+0x74>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a6e:	200f      	movs	r0, #15
 8002a70:	f7ff f87a 	bl	8001b68 <HAL_InitTick>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e002      	b.n	8002a84 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002a7e:	f7ff f855 	bl	8001b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	58024400 	.word	0x58024400
 8002a90:	0801f1d4 	.word	0x0801f1d4
 8002a94:	2400000c 	.word	0x2400000c
 8002a98:	24000008 	.word	0x24000008

08002a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002aa0:	4b06      	ldr	r3, [pc, #24]	; (8002abc <HAL_IncTick+0x20>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4413      	add	r3, r2
 8002aac:	4a04      	ldr	r2, [pc, #16]	; (8002ac0 <HAL_IncTick+0x24>)
 8002aae:	6013      	str	r3, [r2, #0]
}
 8002ab0:	bf00      	nop
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	24000014 	.word	0x24000014
 8002ac0:	24004f50 	.word	0x24004f50

08002ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ac8:	4b03      	ldr	r3, [pc, #12]	; (8002ad8 <HAL_GetTick+0x14>)
 8002aca:	681b      	ldr	r3, [r3, #0]
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	24004f50 	.word	0x24004f50

08002adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ae4:	f7ff ffee 	bl	8002ac4 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d005      	beq.n	8002b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002af6:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_Delay+0x44>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4413      	add	r3, r2
 8002b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b02:	bf00      	nop
 8002b04:	f7ff ffde 	bl	8002ac4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	68fa      	ldr	r2, [r7, #12]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d8f7      	bhi.n	8002b04 <HAL_Delay+0x28>
  {
  }
}
 8002b14:	bf00      	nop
 8002b16:	bf00      	nop
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	24000014 	.word	0x24000014

08002b24 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002b34:	4904      	ldr	r1, [pc, #16]	; (8002b48 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	58000400 	.word	0x58000400

08002b4c <__NVIC_SetPriorityGrouping>:
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0b      	ldr	r3, [pc, #44]	; (8002b8c <__NVIC_SetPriorityGrouping+0x40>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b74:	4b06      	ldr	r3, [pc, #24]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7a:	4a04      	ldr	r2, [pc, #16]	; (8002b8c <__NVIC_SetPriorityGrouping+0x40>)
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	60d3      	str	r3, [r2, #12]
}
 8002b80:	bf00      	nop
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	e000ed00 	.word	0xe000ed00
 8002b90:	05fa0000 	.word	0x05fa0000

08002b94 <__NVIC_GetPriorityGrouping>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <__NVIC_GetPriorityGrouping+0x18>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_EnableIRQ>:
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db0b      	blt.n	8002bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc2:	88fb      	ldrh	r3, [r7, #6]
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4907      	ldr	r1, [pc, #28]	; (8002be8 <__NVIC_EnableIRQ+0x38>)
 8002bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db0a      	blt.n	8002c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	490c      	ldr	r1, [pc, #48]	; (8002c38 <__NVIC_SetPriority+0x4c>)
 8002c06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002c14:	e00a      	b.n	8002c2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4908      	ldr	r1, [pc, #32]	; (8002c3c <__NVIC_SetPriority+0x50>)
 8002c1c:	88fb      	ldrh	r3, [r7, #6]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b04      	subs	r3, #4
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <NVIC_EncodePriority>:
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f1c3 0307 	rsb	r3, r3, #7
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf28      	it	cs
 8002c5e:	2304      	movcs	r3, #4
 8002c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d902      	bls.n	8002c70 <NVIC_EncodePriority+0x30>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	e000      	b.n	8002c72 <NVIC_EncodePriority+0x32>
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	4313      	orrs	r3, r2
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b082      	sub	sp, #8
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff4c 	bl	8002b4c <__NVIC_SetPriorityGrouping>
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cca:	f7ff ff63 	bl	8002b94 <__NVIC_GetPriorityGrouping>
 8002cce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	6978      	ldr	r0, [r7, #20]
 8002cd6:	f7ff ffb3 	bl	8002c40 <NVIC_EncodePriority>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ce0:	4611      	mov	r1, r2
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff ff82 	bl	8002bec <__NVIC_SetPriority>
}
 8002ce8:	bf00      	nop
 8002cea:	3718      	adds	r7, #24
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7ff ff56 	bl	8002bb0 <__NVIC_EnableIRQ>
}
 8002d04:	bf00      	nop
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002d10:	f3bf 8f5f 	dmb	sy
}
 8002d14:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002d16:	4b07      	ldr	r3, [pc, #28]	; (8002d34 <HAL_MPU_Disable+0x28>)
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	4a06      	ldr	r2, [pc, #24]	; (8002d34 <HAL_MPU_Disable+0x28>)
 8002d1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d20:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_MPU_Disable+0x2c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	605a      	str	r2, [r3, #4]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr
 8002d32:	bf00      	nop
 8002d34:	e000ed00 	.word	0xe000ed00
 8002d38:	e000ed90 	.word	0xe000ed90

08002d3c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002d44:	4a0b      	ldr	r2, [pc, #44]	; (8002d74 <HAL_MPU_Enable+0x38>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f043 0301 	orr.w	r3, r3, #1
 8002d4c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_MPU_Enable+0x3c>)
 8002d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d52:	4a09      	ldr	r2, [pc, #36]	; (8002d78 <HAL_MPU_Enable+0x3c>)
 8002d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d58:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002d5a:	f3bf 8f4f 	dsb	sy
}
 8002d5e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d60:	f3bf 8f6f 	isb	sy
}
 8002d64:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	e000ed90 	.word	0xe000ed90
 8002d78:	e000ed00 	.word	0xe000ed00

08002d7c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	785a      	ldrb	r2, [r3, #1]
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <HAL_MPU_ConfigRegion+0x84>)
 8002d8a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d029      	beq.n	8002de8 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002d94:	4a1a      	ldr	r2, [pc, #104]	; (8002e00 <HAL_MPU_ConfigRegion+0x84>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	7b1b      	ldrb	r3, [r3, #12]
 8002da0:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7adb      	ldrb	r3, [r3, #11]
 8002da6:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002da8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	7a9b      	ldrb	r3, [r3, #10]
 8002dae:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002db0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	7b5b      	ldrb	r3, [r3, #13]
 8002db6:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002db8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7b9b      	ldrb	r3, [r3, #14]
 8002dbe:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002dc0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7bdb      	ldrb	r3, [r3, #15]
 8002dc6:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002dc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	7a5b      	ldrb	r3, [r3, #9]
 8002dce:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002dd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	7a1b      	ldrb	r3, [r3, #8]
 8002dd6:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002dd8:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	7812      	ldrb	r2, [r2, #0]
 8002dde:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002de0:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002de2:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002de4:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002de6:	e005      	b.n	8002df4 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002de8:	4b05      	ldr	r3, [pc, #20]	; (8002e00 <HAL_MPU_ConfigRegion+0x84>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <HAL_MPU_ConfigRegion+0x84>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	611a      	str	r2, [r3, #16]
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr
 8002e00:	e000ed90 	.word	0xe000ed90

08002e04 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e054      	b.n	8002ec0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	7f5b      	ldrb	r3, [r3, #29]
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d105      	bne.n	8002e2c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7fd ffbe 	bl	8000da8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2202      	movs	r2, #2
 8002e30:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	791b      	ldrb	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a22      	ldr	r2, [pc, #136]	; (8002ec8 <HAL_CRC_Init+0xc4>)
 8002e40:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0218 	bic.w	r2, r2, #24
 8002e50:	609a      	str	r2, [r3, #8]
 8002e52:	e00c      	b.n	8002e6e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6899      	ldr	r1, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f834 	bl	8002ecc <HAL_CRCEx_Polynomial_Set>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e028      	b.n	8002ec0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	795b      	ldrb	r3, [r3, #5]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d105      	bne.n	8002e82 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7e:	611a      	str	r2, [r3, #16]
 8002e80:	e004      	b.n	8002e8c <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6912      	ldr	r2, [r2, #16]
 8002e8a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	695a      	ldr	r2, [r3, #20]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699a      	ldr	r2, [r3, #24]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	04c11db7 	.word	0x04c11db7

08002ecc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002edc:	231f      	movs	r3, #31
 8002ede:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ee0:	bf00      	nop
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	613a      	str	r2, [r7, #16]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_CRCEx_Polynomial_Set+0x34>
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 031f 	and.w	r3, r3, #31
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0f0      	beq.n	8002ee2 <HAL_CRCEx_Polynomial_Set+0x16>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b18      	cmp	r3, #24
 8002f04:	d846      	bhi.n	8002f94 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002f06:	a201      	add	r2, pc, #4	; (adr r2, 8002f0c <HAL_CRCEx_Polynomial_Set+0x40>)
 8002f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f0c:	08002f9b 	.word	0x08002f9b
 8002f10:	08002f95 	.word	0x08002f95
 8002f14:	08002f95 	.word	0x08002f95
 8002f18:	08002f95 	.word	0x08002f95
 8002f1c:	08002f95 	.word	0x08002f95
 8002f20:	08002f95 	.word	0x08002f95
 8002f24:	08002f95 	.word	0x08002f95
 8002f28:	08002f95 	.word	0x08002f95
 8002f2c:	08002f89 	.word	0x08002f89
 8002f30:	08002f95 	.word	0x08002f95
 8002f34:	08002f95 	.word	0x08002f95
 8002f38:	08002f95 	.word	0x08002f95
 8002f3c:	08002f95 	.word	0x08002f95
 8002f40:	08002f95 	.word	0x08002f95
 8002f44:	08002f95 	.word	0x08002f95
 8002f48:	08002f95 	.word	0x08002f95
 8002f4c:	08002f7d 	.word	0x08002f7d
 8002f50:	08002f95 	.word	0x08002f95
 8002f54:	08002f95 	.word	0x08002f95
 8002f58:	08002f95 	.word	0x08002f95
 8002f5c:	08002f95 	.word	0x08002f95
 8002f60:	08002f95 	.word	0x08002f95
 8002f64:	08002f95 	.word	0x08002f95
 8002f68:	08002f95 	.word	0x08002f95
 8002f6c:	08002f71 	.word	0x08002f71
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	2b06      	cmp	r3, #6
 8002f74:	d913      	bls.n	8002f9e <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f7a:	e010      	b.n	8002f9e <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	2b07      	cmp	r3, #7
 8002f80:	d90f      	bls.n	8002fa2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f86:	e00c      	b.n	8002fa2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d90b      	bls.n	8002fa6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002f92:	e008      	b.n	8002fa6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	75fb      	strb	r3, [r7, #23]
      break;
 8002f98:	e006      	b.n	8002fa8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f9a:	bf00      	nop
 8002f9c:	e004      	b.n	8002fa8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002f9e:	bf00      	nop
 8002fa0:	e002      	b.n	8002fa8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fa2:	bf00      	nop
 8002fa4:	e000      	b.n	8002fa8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002fa6:	bf00      	nop
  }
  if (status == HAL_OK)
 8002fa8:	7dfb      	ldrb	r3, [r7, #23]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10d      	bne.n	8002fca <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	68ba      	ldr	r2, [r7, #8]
 8002fb4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f023 0118 	bic.w	r1, r3, #24
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e0c6      	b.n	8003178 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d102      	bne.n	8002ff8 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f008 f86a 	bl	800b0cc <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2223      	movs	r2, #35	; 0x23
 8002ffc:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ffe:	4b60      	ldr	r3, [pc, #384]	; (8003180 <HAL_ETH_Init+0x1a8>)
 8003000:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003004:	4a5e      	ldr	r2, [pc, #376]	; (8003180 <HAL_ETH_Init+0x1a8>)
 8003006:	f043 0302 	orr.w	r3, r3, #2
 800300a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800300e:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <HAL_ETH_Init+0x1a8>)
 8003010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	60bb      	str	r3, [r7, #8]
 800301a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7a1b      	ldrb	r3, [r3, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d103      	bne.n	800302c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003024:	2000      	movs	r0, #0
 8003026:	f7ff fd7d 	bl	8002b24 <HAL_SYSCFG_ETHInterfaceSelect>
 800302a:	e003      	b.n	8003034 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800302c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003030:	f7ff fd78 	bl	8002b24 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800304a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800304c:	f7ff fd3a 	bl	8002ac4 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003052:	e00f      	b.n	8003074 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003054:	f7ff fd36 	bl	8002ac4 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003062:	d907      	bls.n	8003074 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2204      	movs	r2, #4
 8003068:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	22e0      	movs	r2, #224	; 0xe0
 800306e:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e081      	b.n	8003178 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1e6      	bne.n	8003054 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f001 fad8 	bl	800463c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800308c:	f004 f9aa 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 8003090:	4603      	mov	r3, r0
 8003092:	4a3c      	ldr	r2, [pc, #240]	; (8003184 <HAL_ETH_Init+0x1ac>)
 8003094:	fba2 2303 	umull	r2, r3, r2, r3
 8003098:	0c9a      	lsrs	r2, r3, #18
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	3a01      	subs	r2, #1
 80030a0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80030a4:	6878      	ldr	r0, [r7, #4]
 80030a6:	f001 fa2b 	bl	8004500 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80030c0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80030c4:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d007      	beq.n	80030e2 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2201      	movs	r2, #1
 80030d6:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	22e0      	movs	r2, #224	; 0xe0
 80030dc:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e04a      	b.n	8003178 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	f241 1308 	movw	r3, #4360	; 0x1108
 80030ea:	4413      	add	r3, r2
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <HAL_ETH_Init+0x1b0>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6952      	ldr	r2, [r2, #20]
 80030f6:	0052      	lsls	r2, r2, #1
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	6809      	ldr	r1, [r1, #0]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	f241 1308 	movw	r3, #4360	; 0x1108
 8003102:	440b      	add	r3, r1
 8003104:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f001 faf0 	bl	80046ec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f001 fb34 	bl	800477a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	3305      	adds	r3, #5
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	021a      	lsls	r2, r3, #8
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	3304      	adds	r3, #4
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	4619      	mov	r1, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	3303      	adds	r3, #3
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	061a      	lsls	r2, r3, #24
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	3302      	adds	r3, #2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	3301      	adds	r3, #1
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003150:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800315e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003160:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2210      	movs	r2, #16
 800316e:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2210      	movs	r2, #16
 8003174:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	58024400 	.word	0x58024400
 8003184:	431bde83 	.word	0x431bde83
 8003188:	ffff8001 	.word	0xffff8001

0800318c <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	3310      	adds	r3, #16
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_ETH_DescAssignMemory+0x28>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d904      	bls.n	80031be <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e021      	b.n	8003202 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00b      	beq.n	80031f4 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 80031dc:	683a      	ldr	r2, [r7, #0]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	371c      	adds	r7, #28
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800321a:	2b10      	cmp	r3, #16
 800321c:	d174      	bne.n	8003308 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2223      	movs	r2, #35	; 0x23
 8003222:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	e00f      	b.n	800324a <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3310      	adds	r3, #16
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	3301      	adds	r3, #1
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2b03      	cmp	r3, #3
 800324e:	d9ec      	bls.n	800322a <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0202 	orr.w	r2, r2, #2
 8003264:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003292:	4413      	add	r3, r2
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6811      	ldr	r1, [r2, #0]
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	f241 1304 	movw	r3, #4356	; 0x1104
 80032a2:	440b      	add	r3, r1
 80032a4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f241 1308 	movw	r3, #4360	; 0x1108
 80032ae:	4413      	add	r3, r2
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6811      	ldr	r1, [r2, #0]
 80032b6:	f043 0201 	orr.w	r2, r3, #1
 80032ba:	f241 1308 	movw	r3, #4360	; 0x1108
 80032be:	440b      	add	r3, r1
 80032c0:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 80032d4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80032d8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	f241 1334 	movw	r3, #4404	; 0x1134
 80032e2:	4413      	add	r3, r2
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	6811      	ldr	r1, [r2, #0]
 80032ea:	f24d 0241 	movw	r2, #53313	; 0xd041
 80032ee:	431a      	orrs	r2, r3
 80032f0:	f241 1334 	movw	r3, #4404	; 0x1134
 80032f4:	440b      	add	r3, r1
 80032f6:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2210      	movs	r2, #16
 80032fc:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2222      	movs	r2, #34	; 0x22
 8003302:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	e000      	b.n	800330a <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
  }
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
	...

08003318 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003324:	2b00      	cmp	r3, #0
 8003326:	d067      	beq.n	80033f8 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2223      	movs	r2, #35	; 0x23
 800332c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	f241 1334 	movw	r3, #4404	; 0x1134
 8003336:	4413      	add	r3, r2
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6811      	ldr	r1, [r2, #0]
 800333e:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_ETH_Stop_IT+0xf0>)
 8003340:	401a      	ands	r2, r3
 8003342:	f241 1334 	movw	r3, #4404	; 0x1134
 8003346:	440b      	add	r3, r1
 8003348:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003352:	4413      	add	r3, r2
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	6811      	ldr	r1, [r2, #0]
 800335a:	f023 0201 	bic.w	r2, r3, #1
 800335e:	f241 1304 	movw	r3, #4356	; 0x1104
 8003362:	440b      	add	r3, r1
 8003364:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	f241 1308 	movw	r3, #4360	; 0x1108
 800336e:	4413      	add	r3, r2
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6811      	ldr	r1, [r2, #0]
 8003376:	f023 0201 	bic.w	r2, r3, #1
 800337a:	f241 1308 	movw	r3, #4360	; 0x1108
 800337e:	440b      	add	r3, r1
 8003380:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 0201 	bic.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 0202 	bic.w	r2, r2, #2
 80033b4:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80033b6:	2300      	movs	r3, #0
 80033b8:	60fb      	str	r3, [r7, #12]
 80033ba:	e00f      	b.n	80033dc <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	3310      	adds	r3, #16
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	3301      	adds	r3, #1
 80033da:	60fb      	str	r3, [r7, #12]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2b03      	cmp	r3, #3
 80033e0:	d9ec      	bls.n	80033bc <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2210      	movs	r2, #16
 80033ec:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2210      	movs	r2, #16
 80033f2:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3714      	adds	r7, #20
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	ffff2fbe 	.word	0xffff2fbe

0800340c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d107      	bne.n	800342e <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	f043 0201 	orr.w	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e073      	b.n	8003516 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003432:	2b10      	cmp	r3, #16
 8003434:	d16e      	bne.n	8003514 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003436:	2200      	movs	r2, #0
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f001 f9fa 	bl	8004834 <ETH_Prepare_Tx_Descriptors>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d007      	beq.n	8003456 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344a:	f043 0202 	orr.w	r2, r3, #2
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e05f      	b.n	8003516 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3206      	adds	r2, #6
 800345e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003462:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003468:	1c5a      	adds	r2, r3, #1
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	629a      	str	r2, [r3, #40]	; 0x28
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003472:	2b03      	cmp	r3, #3
 8003474:	d904      	bls.n	8003480 <HAL_ETH_Transmit+0x74>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347a:	1f1a      	subs	r2, r3, #4
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68fa      	ldr	r2, [r7, #12]
 800348a:	3106      	adds	r1, #6
 800348c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003490:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003494:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8003496:	f7ff fb15 	bl	8002ac4 <HAL_GetTick>
 800349a:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800349c:	e034      	b.n	8003508 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d011      	beq.n	80034d4 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b4:	f043 0208 	orr.w	r2, r3, #8
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22e0      	movs	r2, #224	; 0xe0
 80034ce:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e020      	b.n	8003516 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d015      	beq.n	8003508 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 80034dc:	f7ff faf2 	bl	8002ac4 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	687a      	ldr	r2, [r7, #4]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d302      	bcc.n	80034f2 <HAL_ETH_Transmit+0xe6>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	f043 0204 	orr.w	r2, r3, #4
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	22e0      	movs	r2, #224	; 0xe0
 8003502:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e006      	b.n	8003516 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	dbc6      	blt.n	800349e <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 800351e:	b480      	push	{r7}
 8003520:	b089      	sub	sp, #36	; 0x24
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3344      	adds	r3, #68	; 0x44
 800352a:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	69fa      	ldr	r2, [r7, #28]
 8003536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353a:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8003540:	2300      	movs	r3, #0
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	2300      	movs	r3, #0
 8003546:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d06b      	beq.n	8003628 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8003550:	2300      	movs	r3, #0
 8003552:	e0ce      	b.n	80036f2 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3301      	adds	r3, #1
 8003558:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d036      	beq.n	80035d4 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3301      	adds	r3, #1
 800356a:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b01      	cmp	r3, #1
 8003570:	d101      	bne.n	8003576 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	3301      	adds	r3, #1
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b03      	cmp	r3, #3
 8003580:	d902      	bls.n	8003588 <HAL_ETH_IsRxDataAvailable+0x6a>
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	3b04      	subs	r3, #4
 8003586:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	69fa      	ldr	r2, [r7, #28]
 800358c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003590:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	db11      	blt.n	80035be <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800359a:	69bb      	ldr	r3, [r7, #24]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2201      	movs	r2, #1
 80035aa:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	3301      	adds	r3, #1
 80035b0:	61fb      	str	r3, [r7, #28]
 80035b2:	69fb      	ldr	r3, [r7, #28]
 80035b4:	2b03      	cmp	r3, #3
 80035b6:	d902      	bls.n	80035be <HAL_ETH_IsRxDataAvailable+0xa0>
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	3b04      	subs	r3, #4
 80035bc:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e08e      	b.n	80036f2 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 80035e4:	2301      	movs	r3, #1
 80035e6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	3301      	adds	r3, #1
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	2b03      	cmp	r3, #3
 80035f2:	d902      	bls.n	80035fa <HAL_ETH_IsRxDataAvailable+0xdc>
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3b04      	subs	r3, #4
 80035f8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	69fa      	ldr	r2, [r7, #28]
 80035fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003602:	61bb      	str	r3, [r7, #24]
 8003604:	e010      	b.n	8003628 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	3301      	adds	r3, #1
 800360a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3301      	adds	r3, #1
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d902      	bls.n	800361e <HAL_ETH_IsRxDataAvailable+0x100>
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	3b04      	subs	r3, #4
 800361c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003626:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8003628:	69bb      	ldr	r3, [r7, #24]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	db02      	blt.n	8003636 <HAL_ETH_IsRxDataAvailable+0x118>
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2b03      	cmp	r3, #3
 8003634:	d98e      	bls.n	8003554 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d056      	beq.n	80036ea <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	69fa      	ldr	r2, [r7, #28]
 8003640:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	69fa      	ldr	r2, [r7, #28]
 8003650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003654:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003656:	2300      	movs	r3, #0
 8003658:	617b      	str	r3, [r7, #20]
 800365a:	e03b      	b.n	80036d4 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	691a      	ldr	r2, [r3, #16]
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800366a:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d009      	beq.n	8003688 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	695a      	ldr	r2, [r3, #20]
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	3b01      	subs	r3, #1
 80036ac:	697a      	ldr	r2, [r7, #20]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d20d      	bcs.n	80036ce <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b03      	cmp	r3, #3
 80036bc:	d902      	bls.n	80036c4 <HAL_ETH_IsRxDataAvailable+0x1a6>
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	3b04      	subs	r3, #4
 80036c2:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036cc:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	3301      	adds	r3, #1
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d3bf      	bcc.n	800365c <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	f241 1328 	movw	r3, #4392	; 0x1128
 80036e6:	440b      	add	r3, r1
 80036e8:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2200      	movs	r2, #0
 80036ee:	619a      	str	r2, [r3, #24]

  return 0;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3724      	adds	r7, #36	; 0x24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08a      	sub	sp, #40	; 0x28
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3344      	adds	r3, #68	; 0x44
 800370c:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003720:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d104      	bne.n	8003736 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e07d      	b.n	8003832 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff feed 	bl	800351e <HAL_ETH_IsRxDataAvailable>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d101      	bne.n	800374e <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e071      	b.n	8003832 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800375c:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
 8003762:	e031      	b.n	80037c8 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003764:	69bb      	ldr	r3, [r7, #24]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	461a      	mov	r2, r3
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00b      	beq.n	8003796 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	461a      	mov	r2, r3
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800379e:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	3301      	adds	r3, #1
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d902      	bls.n	80037b2 <HAL_ETH_GetRxDataBuffer+0xb4>
 80037ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ae:	3b04      	subs	r3, #4
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ba:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	3301      	adds	r3, #1
 80037c6:	623b      	str	r3, [r7, #32]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d3c7      	bcc.n	8003764 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	461a      	mov	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d803      	bhi.n	80037fe <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	605a      	str	r2, [r3, #4]
 80037fc:	e018      	b.n	8003830 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d012      	beq.n	800382c <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695a      	ldr	r2, [r3, #20]
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	461a      	mov	r2, r3
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	1ad2      	subs	r2, r2, r3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	605a      	str	r2, [r3, #4]
 800382a:	e001      	b.n	8003830 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3728      	adds	r7, #40	; 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
 8003842:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3344      	adds	r3, #68	; 0x44
 8003848:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d107      	bne.n	8003868 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff fe60 	bl	800351e <HAL_ETH_IsRxDataAvailable>
 800385e:	4603      	mov	r3, r0
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e017      	b.n	8003898 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	699a      	ldr	r2, [r3, #24]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	4413      	add	r3, r2
 8003870:	3b01      	subs	r3, #1
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2b03      	cmp	r3, #3
 8003878:	d902      	bls.n	8003880 <HAL_ETH_GetRxDataLength+0x46>
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3b04      	subs	r3, #4
 800387e:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003888:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b089      	sub	sp, #36	; 0x24
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3344      	adds	r3, #68	; 0x44
 80038ac:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038bc:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e057      	b.n	8003980 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	3301      	adds	r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80038de:	2300      	movs	r3, #0
 80038e0:	613b      	str	r3, [r7, #16]
 80038e2:	e03b      	b.n	800395c <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	691a      	ldr	r2, [r3, #16]
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038f2:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	695b      	ldr	r3, [r3, #20]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d009      	beq.n	8003910 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	695a      	ldr	r2, [r3, #20]
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a1b      	ldr	r3, [r3, #32]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d005      	beq.n	8003930 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	3b01      	subs	r3, #1
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	429a      	cmp	r2, r3
 8003938:	d20d      	bcs.n	8003956 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3301      	adds	r3, #1
 800393e:	61fb      	str	r3, [r7, #28]
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	2b03      	cmp	r3, #3
 8003944:	d902      	bls.n	800394c <HAL_ETH_BuildRxDescriptors+0xac>
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3b04      	subs	r3, #4
 800394a:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003954:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	3301      	adds	r3, #1
 800395a:	613b      	str	r3, [r7, #16]
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	429a      	cmp	r2, r3
 8003962:	d3bf      	bcc.n	80038e4 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6819      	ldr	r1, [r3, #0]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	f241 1328 	movw	r3, #4392	; 0x1128
 800396e:	440b      	add	r3, r1
 8003970:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3724      	adds	r7, #36	; 0x24
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a2:	2b40      	cmp	r3, #64	; 0x40
 80039a4:	d113      	bne.n	80039ce <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	f241 1334 	movw	r3, #4404	; 0x1134
 80039ae:	4413      	add	r3, r2
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b40      	cmp	r3, #64	; 0x40
 80039b8:	d109      	bne.n	80039ce <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f007 fc5c 	bl	800b278 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80039c8:	f248 0240 	movw	r2, #32832	; 0x8040
 80039cc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0301 	and.w	r3, r3, #1
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d113      	bne.n	8003a08 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	f241 1334 	movw	r3, #4404	; 0x1134
 80039e8:	4413      	add	r3, r2
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d109      	bne.n	8003a08 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f8b7 	bl	8003b68 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003a02:	f248 0201 	movw	r2, #32769	; 0x8001
 8003a06:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1a:	d149      	bne.n	8003ab0 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	f241 1334 	movw	r3, #4404	; 0x1134
 8003a24:	4413      	add	r3, r2
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a30:	d13e      	bne.n	8003ab0 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a36:	f043 0208 	orr.w	r2, r3, #8
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a50:	d11b      	bne.n	8003a8a <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	f241 1302 	movw	r3, #4354	; 0x1102
 8003a60:	4013      	ands	r3, r2
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	f241 1334 	movw	r3, #4404	; 0x1134
 8003a6e:	4413      	add	r3, r2
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6811      	ldr	r1, [r2, #0]
 8003a76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a7a:	f241 1334 	movw	r3, #4404	; 0x1134
 8003a7e:	440b      	add	r3, r1
 8003a80:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	22e0      	movs	r2, #224	; 0xe0
 8003a86:	66da      	str	r2, [r3, #108]	; 0x6c
 8003a88:	e00f      	b.n	8003aaa <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003aa4:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8003aa8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f866 	bl	8003b7c <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ab8:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003abc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003ac0:	d10e      	bne.n	8003ae0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	22e0      	movs	r2, #224	; 0xe0
 8003ad2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f85b 	bl	8003b90 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d10f      	bne.n	8003b10 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003af8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f84e 	bl	8003ba4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d10f      	bne.n	8003b40 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003b28:	f003 020f 	and.w	r2, r3, #15
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f840 	bl	8003bb8 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <HAL_ETH_IRQHandler+0x1d8>)
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d006      	beq.n	8003b5a <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003b4c:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <HAL_ETH_IRQHandler+0x1d8>)
 8003b4e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003b52:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f839 	bl	8003bcc <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	58000080 	.word	0x58000080

08003b68 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b083      	sub	sp, #12
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8003b70:	bf00      	nop
 8003b72:	370c      	adds	r7, #12
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8003b84:	bf00      	nop
 8003b86:	370c      	adds	r7, #12
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003bac:	bf00      	nop
 8003bae:	370c      	adds	r7, #12
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8003bc0:	bf00      	nop
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d001      	beq.n	8003c02 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e03e      	b.n	8003c80 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c0a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	055b      	lsls	r3, r3, #21
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	041b      	lsls	r3, r3, #16
 8003c24:	4313      	orrs	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f043 030c 	orr.w	r3, r3, #12
 8003c2e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f043 0301 	orr.w	r3, r3, #1
 8003c36:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003c42:	f7fe ff3f 	bl	8002ac4 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003c48:	e009      	b.n	8003c5e <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003c4a:	f7fe ff3b 	bl	8002ac4 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c58:	d901      	bls.n	8003c5e <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e010      	b.n	8003c80 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1ed      	bne.n	8003c4a <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}

08003c88 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b086      	sub	sp, #24
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	607a      	str	r2, [r7, #4]
 8003c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e03c      	b.n	8003d24 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003cb2:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	055b      	lsls	r3, r3, #21
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	f023 030c 	bic.w	r3, r3, #12
 8003cd6:	f043 0304 	orr.w	r3, r3, #4
 8003cda:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f043 0301 	orr.w	r3, r3, #1
 8003ce2:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	b29a      	uxth	r2, r3
 8003ce8:	4b10      	ldr	r3, [pc, #64]	; (8003d2c <HAL_ETH_WritePHYRegister+0xa4>)
 8003cea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003cee:	4a0f      	ldr	r2, [pc, #60]	; (8003d2c <HAL_ETH_WritePHYRegister+0xa4>)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003cf6:	f7fe fee5 	bl	8002ac4 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003cfc:	e009      	b.n	8003d12 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003cfe:	f7fe fee1 	bl	8002ac4 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d0c:	d901      	bls.n	8003d12 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e008      	b.n	8003d24 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d1a:	f003 0301 	and.w	r3, r3, #1
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1ed      	bne.n	8003cfe <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40028000 	.word	0x40028000

08003d30 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e1c3      	b.n	80040cc <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 020c 	and.w	r2, r3, #12
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0310 	and.w	r3, r3, #16
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf14      	ite	ne
 8003d60:	2301      	movne	r3, #1
 8003d62:	2300      	moveq	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	461a      	mov	r2, r3
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	bf0c      	ite	eq
 8003d8a:	2301      	moveq	r3, #1
 8003d8c:	2300      	movne	r3, #0
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	461a      	mov	r2, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	bf14      	ite	ne
 8003da6:	2301      	movne	r3, #1
 8003da8:	2300      	moveq	r3, #0
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	461a      	mov	r2, r3
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	bf0c      	ite	eq
 8003dc0:	2301      	moveq	r3, #1
 8003dc2:	2300      	movne	r3, #0
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	bf14      	ite	ne
 8003dda:	2301      	movne	r3, #1
 8003ddc:	2300      	moveq	r3, #0
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	bf14      	ite	ne
 8003e2a:	2301      	movne	r3, #1
 8003e2c:	2300      	moveq	r3, #0
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	461a      	mov	r2, r3
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	bf0c      	ite	eq
 8003e5e:	2301      	moveq	r3, #1
 8003e60:	2300      	movne	r3, #0
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	461a      	mov	r2, r3
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	bf14      	ite	ne
 8003e78:	2301      	movne	r3, #1
 8003e7a:	2300      	moveq	r3, #0
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	bf14      	ite	ne
 8003e92:	2301      	movne	r3, #1
 8003e94:	2300      	moveq	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bf14      	ite	ne
 8003eac:	2301      	movne	r3, #1
 8003eae:	2300      	moveq	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	bf14      	ite	ne
 8003eee:	2301      	movne	r3, #1
 8003ef0:	2300      	moveq	r3, #0
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	bf0c      	ite	eq
 8003f24:	2301      	moveq	r3, #1
 8003f26:	2300      	movne	r3, #0
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf14      	ite	ne
 8003f40:	2301      	movne	r3, #1
 8003f42:	2300      	moveq	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bf14      	ite	ne
 8003f5c:	2301      	movne	r3, #1
 8003f5e:	2300      	moveq	r3, #0
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	461a      	mov	r2, r3
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	bf14      	ite	ne
 8003f78:	2301      	movne	r3, #1
 8003f7a:	2300      	moveq	r3, #0
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	461a      	mov	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	0e5b      	lsrs	r3, r3, #25
 8003f8e:	f003 021f 	and.w	r2, r3, #31
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bf14      	ite	ne
 8003fa4:	2301      	movne	r3, #1
 8003fa6:	2300      	moveq	r3, #0
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	461a      	mov	r2, r3
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f003 020f 	and.w	r2, r3, #15
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bf14      	ite	ne
 8003fce:	2301      	movne	r3, #1
 8003fd0:	2300      	moveq	r3, #0
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	bf0c      	ite	eq
 8003fea:	2301      	moveq	r3, #1
 8003fec:	2300      	movne	r3, #0
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	b29a      	uxth	r2, r3
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf14      	ite	ne
 8004024:	2301      	movne	r3, #1
 8004026:	2300      	moveq	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	461a      	mov	r2, r3
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004058:	f003 0272 	and.w	r2, r3, #114	; 0x72
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004068:	f003 0223 	and.w	r2, r3, #35	; 0x23
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	461a      	mov	r2, r3
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004096:	f003 0310 	and.w	r3, r3, #16
 800409a:	2b00      	cmp	r3, #0
 800409c:	bf14      	ite	ne
 800409e:	2301      	movne	r3, #1
 80040a0:	2300      	moveq	r3, #0
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80040b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e00a      	b.n	8004102 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d105      	bne.n	8004100 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80040f4:	6839      	ldr	r1, [r7, #0]
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f860 	bl	80041bc <ETH_SetMACConfig>

    return HAL_OK;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e000      	b.n	8004102 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
  }
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800411c:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004124:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004126:	f003 f95d 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 800412a:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	4a1e      	ldr	r2, [pc, #120]	; (80041a8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d908      	bls.n	8004146 <HAL_ETH_SetMDIOClockRange+0x3a>
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	4a1d      	ldr	r2, [pc, #116]	; (80041ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d804      	bhi.n	8004146 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e027      	b.n	8004196 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	4a18      	ldr	r2, [pc, #96]	; (80041ac <HAL_ETH_SetMDIOClockRange+0xa0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d908      	bls.n	8004160 <HAL_ETH_SetMDIOClockRange+0x54>
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4a17      	ldr	r2, [pc, #92]	; (80041b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d204      	bcs.n	8004160 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e01a      	b.n	8004196 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4a13      	ldr	r2, [pc, #76]	; (80041b0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d303      	bcc.n	8004170 <HAL_ETH_SetMDIOClockRange+0x64>
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	4a12      	ldr	r2, [pc, #72]	; (80041b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d911      	bls.n	8004194 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d908      	bls.n	800418a <HAL_ETH_SetMDIOClockRange+0x7e>
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	4a0f      	ldr	r2, [pc, #60]	; (80041b8 <HAL_ETH_SetMDIOClockRange+0xac>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d804      	bhi.n	800418a <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004186:	60fb      	str	r3, [r7, #12]
 8004188:	e005      	b.n	8004196 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e000      	b.n	8004196 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004194:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80041a0:	bf00      	nop
 80041a2:	3710      	adds	r7, #16
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	01312cff 	.word	0x01312cff
 80041ac:	02160ebf 	.word	0x02160ebf
 80041b0:	03938700 	.word	0x03938700
 80041b4:	05f5e0ff 	.word	0x05f5e0ff
 80041b8:	08f0d17f 	.word	0x08f0d17f

080041bc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80041ce:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	791b      	ldrb	r3, [r3, #4]
 80041d4:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80041d6:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	7b1b      	ldrb	r3, [r3, #12]
 80041dc:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80041de:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	7b5b      	ldrb	r3, [r3, #13]
 80041e4:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80041e6:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	7b9b      	ldrb	r3, [r3, #14]
 80041ec:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80041ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	7bdb      	ldrb	r3, [r3, #15]
 80041f4:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80041f6:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	7c12      	ldrb	r2, [r2, #16]
 80041fc:	2a00      	cmp	r2, #0
 80041fe:	d102      	bne.n	8004206 <ETH_SetMACConfig+0x4a>
 8004200:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004204:	e000      	b.n	8004208 <ETH_SetMACConfig+0x4c>
 8004206:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004208:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	7c52      	ldrb	r2, [r2, #17]
 800420e:	2a00      	cmp	r2, #0
 8004210:	d102      	bne.n	8004218 <ETH_SetMACConfig+0x5c>
 8004212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004216:	e000      	b.n	800421a <ETH_SetMACConfig+0x5e>
 8004218:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800421a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	7c9b      	ldrb	r3, [r3, #18]
 8004220:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004222:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004228:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800422e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	7f1b      	ldrb	r3, [r3, #28]
 8004234:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004236:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	7f5b      	ldrb	r3, [r3, #29]
 800423c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800423e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	7f92      	ldrb	r2, [r2, #30]
 8004244:	2a00      	cmp	r2, #0
 8004246:	d102      	bne.n	800424e <ETH_SetMACConfig+0x92>
 8004248:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800424c:	e000      	b.n	8004250 <ETH_SetMACConfig+0x94>
 800424e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004250:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	7fdb      	ldrb	r3, [r3, #31]
 8004256:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004258:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004260:	2a00      	cmp	r2, #0
 8004262:	d102      	bne.n	800426a <ETH_SetMACConfig+0xae>
 8004264:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004268:	e000      	b.n	800426c <ETH_SetMACConfig+0xb0>
 800426a:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800426c:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004272:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800427a:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 800427c:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004282:	4313      	orrs	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b56      	ldr	r3, [pc, #344]	; (80043e8 <ETH_SetMACConfig+0x22c>)
 800428e:	4013      	ands	r3, r2
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	68f9      	ldr	r1, [r7, #12]
 8004296:	430b      	orrs	r3, r1
 8004298:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042a6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80042a8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042b0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80042b2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80042ba:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80042bc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80042be:	683a      	ldr	r2, [r7, #0]
 80042c0:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80042c4:	2a00      	cmp	r2, #0
 80042c6:	d102      	bne.n	80042ce <ETH_SetMACConfig+0x112>
 80042c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042cc:	e000      	b.n	80042d0 <ETH_SetMACConfig+0x114>
 80042ce:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80042d0:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	4b42      	ldr	r3, [pc, #264]	; (80043ec <ETH_SetMACConfig+0x230>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6812      	ldr	r2, [r2, #0]
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	430b      	orrs	r3, r1
 80042ec:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f4:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	4b3a      	ldr	r3, [pc, #232]	; (80043f0 <ETH_SetMACConfig+0x234>)
 8004306:	4013      	ands	r3, r2
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	6812      	ldr	r2, [r2, #0]
 800430c:	68f9      	ldr	r1, [r7, #12]
 800430e:	430b      	orrs	r3, r1
 8004310:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004318:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800431e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004326:	2a00      	cmp	r2, #0
 8004328:	d101      	bne.n	800432e <ETH_SetMACConfig+0x172>
 800432a:	2280      	movs	r2, #128	; 0x80
 800432c:	e000      	b.n	8004330 <ETH_SetMACConfig+0x174>
 800432e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004330:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004336:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004338:	4313      	orrs	r3, r2
 800433a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004342:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004346:	4013      	ands	r3, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	68f9      	ldr	r1, [r7, #12]
 800434e:	430b      	orrs	r3, r1
 8004350:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004358:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004360:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f023 0103 	bic.w	r1, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68fa      	ldr	r2, [r7, #12]
 8004378:	430a      	orrs	r2, r1
 800437a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004386:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	430a      	orrs	r2, r1
 8004394:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80043a2:	2a00      	cmp	r2, #0
 80043a4:	d101      	bne.n	80043aa <ETH_SetMACConfig+0x1ee>
 80043a6:	2240      	movs	r2, #64	; 0x40
 80043a8:	e000      	b.n	80043ac <ETH_SetMACConfig+0x1f0>
 80043aa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80043ac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80043b4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80043b6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80043be:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80043cc:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	430a      	orrs	r2, r1
 80043d8:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80043dc:	bf00      	nop
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	00048083 	.word	0x00048083
 80043ec:	c0f88000 	.word	0xc0f88000
 80043f0:	fffffef0 	.word	0xfffffef0

080043f4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b38      	ldr	r3, [pc, #224]	; (80044ec <ETH_SetDMAConfig+0xf8>)
 800440a:	4013      	ands	r3, r2
 800440c:	683a      	ldr	r2, [r7, #0]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	6809      	ldr	r1, [r1, #0]
 8004414:	431a      	orrs	r2, r3
 8004416:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800441a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	791b      	ldrb	r3, [r3, #4]
 8004420:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004426:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	7b1b      	ldrb	r3, [r3, #12]
 800442c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	f241 0304 	movw	r3, #4100	; 0x1004
 800443a:	4413      	add	r3, r2
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	4b2c      	ldr	r3, [pc, #176]	; (80044f0 <ETH_SetDMAConfig+0xfc>)
 8004440:	4013      	ands	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	6811      	ldr	r1, [r2, #0]
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	431a      	orrs	r2, r3
 800444a:	f241 0304 	movw	r3, #4100	; 0x1004
 800444e:	440b      	add	r3, r1
 8004450:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	7b5b      	ldrb	r3, [r3, #13]
 8004456:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	4b22      	ldr	r3, [pc, #136]	; (80044f4 <ETH_SetDMAConfig+0x100>)
 800446c:	4013      	ands	r3, r2
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6811      	ldr	r1, [r2, #0]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	431a      	orrs	r2, r3
 8004476:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800447a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	7d1b      	ldrb	r3, [r3, #20]
 8004484:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004486:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	7f5b      	ldrb	r3, [r3, #29]
 800448c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	f241 1304 	movw	r3, #4356	; 0x1104
 800449a:	4413      	add	r3, r2
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b16      	ldr	r3, [pc, #88]	; (80044f8 <ETH_SetDMAConfig+0x104>)
 80044a0:	4013      	ands	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	6811      	ldr	r1, [r2, #0]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	f241 1304 	movw	r3, #4356	; 0x1104
 80044ae:	440b      	add	r3, r1
 80044b0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	7f1b      	ldrb	r3, [r3, #28]
 80044b6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80044bc:	4313      	orrs	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	f241 1308 	movw	r3, #4360	; 0x1108
 80044c8:	4413      	add	r3, r2
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <ETH_SetDMAConfig+0x108>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6811      	ldr	r1, [r2, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	f241 1308 	movw	r3, #4360	; 0x1108
 80044dc:	440b      	add	r3, r1
 80044de:	601a      	str	r2, [r3, #0]
}
 80044e0:	bf00      	nop
 80044e2:	3714      	adds	r7, #20
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr
 80044ec:	ffff87fd 	.word	0xffff87fd
 80044f0:	ffff2ffe 	.word	0xffff2ffe
 80044f4:	fffec000 	.word	0xfffec000
 80044f8:	ffc0efef 	.word	0xffc0efef
 80044fc:	7fc0ffff 	.word	0x7fc0ffff

08004500 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b0a4      	sub	sp, #144	; 0x90
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800450e:	2300      	movs	r3, #0
 8004510:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004512:	2300      	movs	r3, #0
 8004514:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004518:	2300      	movs	r3, #0
 800451a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004530:	2300      	movs	r3, #0
 8004532:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800453c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004540:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004542:	2300      	movs	r3, #0
 8004544:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004548:	2300      	movs	r3, #0
 800454a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800454c:	2300      	movs	r3, #0
 800454e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004552:	2300      	movs	r3, #0
 8004554:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004558:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800455c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004564:	2300      	movs	r3, #0
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004568:	2301      	movs	r3, #1
 800456a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004574:	2300      	movs	r3, #0
 8004576:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800457a:	2300      	movs	r3, #0
 800457c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800457e:	2300      	movs	r3, #0
 8004580:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004582:	2300      	movs	r3, #0
 8004584:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004586:	2300      	movs	r3, #0
 8004588:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800458c:	2300      	movs	r3, #0
 800458e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004598:	2320      	movs	r3, #32
 800459a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800459e:	2301      	movs	r3, #1
 80045a0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80045aa:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80045b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80045b4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80045b6:	2300      	movs	r3, #0
 80045b8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80045bc:	2302      	movs	r3, #2
 80045be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80045d4:	2301      	movs	r3, #1
 80045d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80045da:	2300      	movs	r3, #0
 80045dc:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80045de:	2301      	movs	r3, #1
 80045e0:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80045e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045e8:	4619      	mov	r1, r3
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff fde6 	bl	80041bc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80045f0:	2301      	movs	r3, #1
 80045f2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80045f4:	2301      	movs	r3, #1
 80045f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80045fc:	2300      	movs	r3, #0
 80045fe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004602:	2300      	movs	r3, #0
 8004604:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004606:	2300      	movs	r3, #0
 8004608:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800460a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800460e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004610:	2300      	movs	r3, #0
 8004612:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004614:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004618:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800461a:	2300      	movs	r3, #0
 800461c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004620:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	4619      	mov	r1, r3
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff fee1 	bl	80043f4 <ETH_SetDMAConfig>
}
 8004632:	bf00      	nop
 8004634:	3790      	adds	r7, #144	; 0x90
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}
	...

0800463c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800464c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004654:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004656:	f002 fec5 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 800465a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a1e      	ldr	r2, [pc, #120]	; (80046d8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d908      	bls.n	8004676 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4a1d      	ldr	r2, [pc, #116]	; (80046dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d804      	bhi.n	8004676 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004672:	60fb      	str	r3, [r7, #12]
 8004674:	e027      	b.n	80046c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d908      	bls.n	8004690 <ETH_MAC_MDIO_ClkConfig+0x54>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d204      	bcs.n	8004690 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e01a      	b.n	80046c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4a13      	ldr	r2, [pc, #76]	; (80046e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d303      	bcc.n	80046a0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	4a12      	ldr	r2, [pc, #72]	; (80046e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d911      	bls.n	80046c4 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	4a10      	ldr	r2, [pc, #64]	; (80046e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d908      	bls.n	80046ba <ETH_MAC_MDIO_ClkConfig+0x7e>
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	4a0f      	ldr	r2, [pc, #60]	; (80046e8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d804      	bhi.n	80046ba <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046b6:	60fb      	str	r3, [r7, #12]
 80046b8:	e005      	b.n	80046c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e000      	b.n	80046c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80046c4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68fa      	ldr	r2, [r7, #12]
 80046cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	01312cff 	.word	0x01312cff
 80046dc:	02160ebf 	.word	0x02160ebf
 80046e0:	03938700 	.word	0x03938700
 80046e4:	05f5e0ff 	.word	0x05f5e0ff
 80046e8:	08f0d17f 	.word	0x08f0d17f

080046ec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80046f4:	2300      	movs	r3, #0
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	e01d      	b.n	8004736 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68d9      	ldr	r1, [r3, #12]
 80046fe:	68fa      	ldr	r2, [r7, #12]
 8004700:	4613      	mov	r3, r2
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	4413      	add	r3, r2
 8004706:	00db      	lsls	r3, r3, #3
 8004708:	440b      	add	r3, r1
 800470a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2200      	movs	r2, #0
 8004716:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2200      	movs	r2, #0
 800471c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2200      	movs	r2, #0
 8004722:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004724:	68b9      	ldr	r1, [r7, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	3206      	adds	r2, #6
 800472c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	3301      	adds	r3, #1
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d9de      	bls.n	80046fa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	f241 132c 	movw	r3, #4396	; 0x112c
 800474a:	4413      	add	r3, r2
 800474c:	2203      	movs	r2, #3
 800474e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	68d9      	ldr	r1, [r3, #12]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	f241 1314 	movw	r3, #4372	; 0x1114
 800475c:	4413      	add	r3, r2
 800475e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	68da      	ldr	r2, [r3, #12]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 800476c:	601a      	str	r2, [r3, #0]
}
 800476e:	bf00      	nop
 8004770:	3714      	adds	r7, #20
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr

0800477a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800477a:	b480      	push	{r7}
 800477c:	b085      	sub	sp, #20
 800477e:	af00      	add	r7, sp, #0
 8004780:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004782:	2300      	movs	r3, #0
 8004784:	60fb      	str	r3, [r7, #12]
 8004786:	e024      	b.n	80047d2 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6919      	ldr	r1, [r3, #16]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	4613      	mov	r3, r2
 8004790:	005b      	lsls	r3, r3, #1
 8004792:	4413      	add	r3, r2
 8004794:	00db      	lsls	r3, r3, #3
 8004796:	440b      	add	r3, r1
 8004798:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2200      	movs	r2, #0
 80047a4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	2200      	movs	r2, #0
 80047aa:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	2200      	movs	r2, #0
 80047b0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2200      	movs	r2, #0
 80047b6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	2200      	movs	r2, #0
 80047bc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3310      	adds	r3, #16
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d9d7      	bls.n	8004788 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2200      	movs	r2, #0
 80047e8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	f241 1330 	movw	r3, #4400	; 0x1130
 80047fe:	4413      	add	r3, r2
 8004800:	2203      	movs	r2, #3
 8004802:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6919      	ldr	r1, [r3, #16]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f241 131c 	movw	r3, #4380	; 0x111c
 8004810:	4413      	add	r3, r2
 8004812:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	f241 1328 	movw	r3, #4392	; 0x1128
 8004824:	4413      	add	r3, r2
 8004826:	6019      	str	r1, [r3, #0]
}
 8004828:	bf00      	nop
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8004834:	b480      	push	{r7}
 8004836:	b08d      	sub	sp, #52	; 0x34
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3318      	adds	r3, #24
 8004844:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 8004852:	2300      	movs	r3, #0
 8004854:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800485a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800485e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8004866:	2300      	movs	r3, #0
 8004868:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004872:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004876:	d007      	beq.n	8004888 <ETH_Prepare_Tx_Descriptors+0x54>
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487c:	3304      	adds	r3, #4
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4413      	add	r3, r2
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d001      	beq.n	800488c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8004888:	2302      	movs	r3, #2
 800488a:	e24a      	b.n	8004d22 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0304 	and.w	r3, r3, #4
 8004894:	2b00      	cmp	r3, #0
 8004896:	d044      	beq.n	8004922 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	68da      	ldr	r2, [r3, #12]
 800489c:	4b72      	ldr	r3, [pc, #456]	; (8004a68 <ETH_Prepare_Tx_Descriptors+0x234>)
 800489e:	4013      	ands	r3, r2
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048a4:	431a      	orrs	r2, r3
 80048a6:	6a3b      	ldr	r3, [r7, #32]
 80048a8:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048b2:	6a3b      	ldr	r3, [r7, #32]
 80048b4:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80048c4:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d027      	beq.n	8004922 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	041b      	lsls	r3, r3, #16
 80048de:	431a      	orrs	r2, r3
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80048f0:	6a3b      	ldr	r3, [r7, #32]
 80048f2:	68db      	ldr	r3, [r3, #12]
 80048f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fc:	431a      	orrs	r2, r3
 80048fe:	6a3b      	ldr	r3, [r7, #32]
 8004900:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004910:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004920:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0310 	and.w	r3, r3, #16
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00e      	beq.n	800494c <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	4b4e      	ldr	r3, [pc, #312]	; (8004a6c <ETH_Prepare_Tx_Descriptors+0x238>)
 8004934:	4013      	ands	r3, r2
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	6992      	ldr	r2, [r2, #24]
 800493a:	431a      	orrs	r2, r3
 800493c:	6a3b      	ldr	r3, [r7, #32]
 800493e:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8004940:	6a3b      	ldr	r3, [r7, #32]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8004948:	6a3b      	ldr	r3, [r7, #32]
 800494a:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <ETH_Prepare_Tx_Descriptors+0x130>
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d030      	beq.n	80049c6 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	3301      	adds	r3, #1
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	2b03      	cmp	r3, #3
 8004986:	d902      	bls.n	800498e <ETH_Prepare_Tx_Descriptors+0x15a>
 8004988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498a:	3b04      	subs	r3, #4
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004992:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004996:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8004998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499a:	3301      	adds	r3, #1
 800499c:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800499e:	6a3b      	ldr	r3, [r7, #32]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049aa:	d10c      	bne.n	80049c6 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049b4:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80049c2:	2302      	movs	r3, #2
 80049c4:	e1ad      	b.n	8004d22 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80049c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c8:	3301      	adds	r3, #1
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6a3b      	ldr	r3, [r7, #32]
 80049d4:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <ETH_Prepare_Tx_Descriptors+0x238>)
 80049dc:	4013      	ands	r3, r2
 80049de:	69fa      	ldr	r2, [r7, #28]
 80049e0:	6852      	ldr	r2, [r2, #4]
 80049e2:	431a      	orrs	r2, r3
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d012      	beq.n	8004a16 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	461a      	mov	r2, r3
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004a00:	6a3b      	ldr	r3, [r7, #32]
 8004a02:	689a      	ldr	r2, [r3, #8]
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	69fa      	ldr	r2, [r7, #28]
 8004a0a:	6852      	ldr	r2, [r2, #4]
 8004a0c:	0412      	lsls	r2, r2, #16
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	e008      	b.n	8004a28 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	4b13      	ldr	r3, [pc, #76]	; (8004a70 <ETH_Prepare_Tx_Descriptors+0x23c>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	6a3a      	ldr	r2, [r7, #32]
 8004a26:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d021      	beq.n	8004a78 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6a1b      	ldr	r3, [r3, #32]
 8004a40:	04db      	lsls	r3, r3, #19
 8004a42:	431a      	orrs	r2, r3
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004a48:	6a3b      	ldr	r3, [r7, #32]
 8004a4a:	68da      	ldr	r2, [r3, #12]
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <ETH_Prepare_Tx_Descriptors+0x240>)
 8004a4e:	4013      	ands	r3, r2
 8004a50:	68ba      	ldr	r2, [r7, #8]
 8004a52:	69d2      	ldr	r2, [r2, #28]
 8004a54:	431a      	orrs	r2, r3
 8004a56:	6a3b      	ldr	r3, [r7, #32]
 8004a58:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004a5a:	6a3b      	ldr	r3, [r7, #32]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004a62:	6a3b      	ldr	r3, [r7, #32]
 8004a64:	60da      	str	r2, [r3, #12]
 8004a66:	e02e      	b.n	8004ac6 <ETH_Prepare_Tx_Descriptors+0x292>
 8004a68:	ffff0000 	.word	0xffff0000
 8004a6c:	ffffc000 	.word	0xffffc000
 8004a70:	c000ffff 	.word	0xc000ffff
 8004a74:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004a78:	6a3b      	ldr	r3, [r7, #32]
 8004a7a:	68da      	ldr	r2, [r3, #12]
 8004a7c:	4b93      	ldr	r3, [pc, #588]	; (8004ccc <ETH_Prepare_Tx_Descriptors+0x498>)
 8004a7e:	4013      	ands	r3, r2
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	6852      	ldr	r2, [r2, #4]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d008      	beq.n	8004aa8 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004a96:	6a3b      	ldr	r3, [r7, #32]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004ae4:	6a3b      	ldr	r3, [r7, #32]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004aec:	6a3b      	ldr	r3, [r7, #32]
 8004aee:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004af8:	6a3b      	ldr	r3, [r7, #32]
 8004afa:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004afc:	6a3b      	ldr	r3, [r7, #32]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 80cb 	beq.w	8004cac <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8004b28:	e0c0      	b.n	8004cac <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b32:	6a3b      	ldr	r3, [r7, #32]
 8004b34:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	3301      	adds	r3, #1
 8004b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d902      	bls.n	8004b48 <ETH_Prepare_Tx_Descriptors+0x314>
 8004b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b44:	3b04      	subs	r3, #4
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b50:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004b52:	6a3b      	ldr	r3, [r7, #32]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b6a:	d007      	beq.n	8004b7c <ETH_Prepare_Tx_Descriptors+0x348>
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	3304      	adds	r3, #4
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4413      	add	r3, r2
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d026      	beq.n	8004bca <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b88:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004b8e:	e016      	b.n	8004bbe <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2b03      	cmp	r3, #3
 8004ba6:	d902      	bls.n	8004bae <ETH_Prepare_Tx_Descriptors+0x37a>
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	3b04      	subs	r3, #4
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bb6:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	3301      	adds	r3, #1
 8004bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d3e4      	bcc.n	8004b90 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8004bc6:	2302      	movs	r3, #2
 8004bc8:	e0ab      	b.n	8004d22 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8004bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bcc:	3301      	adds	r3, #1
 8004bce:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	689a      	ldr	r2, [r3, #8]
 8004be4:	4b3a      	ldr	r3, [pc, #232]	; (8004cd0 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	6852      	ldr	r2, [r2, #4]
 8004bec:	431a      	orrs	r2, r3
 8004bee:	6a3b      	ldr	r3, [r7, #32]
 8004bf0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d012      	beq.n	8004c20 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6a3b      	ldr	r3, [r7, #32]
 8004c08:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	4b31      	ldr	r3, [pc, #196]	; (8004cd4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	6852      	ldr	r2, [r2, #4]
 8004c16:	0412      	lsls	r2, r2, #16
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	6a3b      	ldr	r3, [r7, #32]
 8004c1c:	609a      	str	r2, [r3, #8]
 8004c1e:	e008      	b.n	8004c32 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	2200      	movs	r2, #0
 8004c24:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	4b2a      	ldr	r3, [pc, #168]	; (8004cd4 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	6a3a      	ldr	r2, [r7, #32]
 8004c30:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00f      	beq.n	8004c5e <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004c3e:	6a3b      	ldr	r3, [r7, #32]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	69d2      	ldr	r2, [r2, #28]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	6a3b      	ldr	r3, [r7, #32]
 8004c4e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004c50:	6a3b      	ldr	r3, [r7, #32]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004c58:	6a3b      	ldr	r3, [r7, #32]
 8004c5a:	60da      	str	r2, [r3, #12]
 8004c5c:	e017      	b.n	8004c8e <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	4b1a      	ldr	r3, [pc, #104]	; (8004ccc <ETH_Prepare_Tx_Descriptors+0x498>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	6852      	ldr	r2, [r2, #4]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	6a3b      	ldr	r3, [r7, #32]
 8004c6e:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d008      	beq.n	8004c8e <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	3301      	adds	r3, #1
 8004c92:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004c94:	6a3b      	ldr	r3, [r7, #32]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004c9c:	6a3b      	ldr	r3, [r7, #32]
 8004c9e:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004ca0:	6a3b      	ldr	r3, [r7, #32]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f47f af3a 	bne.w	8004b2a <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00f      	beq.n	8004cdc <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004cbc:	6a3b      	ldr	r3, [r7, #32]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004cc4:	6a3b      	ldr	r3, [r7, #32]
 8004cc6:	609a      	str	r2, [r3, #8]
 8004cc8:	e00e      	b.n	8004ce8 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8004cca:	bf00      	nop
 8004ccc:	ffff8000 	.word	0xffff8000
 8004cd0:	ffffc000 	.word	0xffffc000
 8004cd4:	c000ffff 	.word	0xc000ffff
 8004cd8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004ce8:	6a3b      	ldr	r3, [r7, #32]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004cf0:	6a3b      	ldr	r3, [r7, #32]
 8004cf2:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cf8:	6979      	ldr	r1, [r7, #20]
 8004cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfc:	3304      	adds	r3, #4
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d08:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004d0a:	b672      	cpsid	i
}
 8004d0c:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	4413      	add	r3, r2
 8004d16:	1c5a      	adds	r2, r3, #1
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004d1c:	b662      	cpsie	i
}
 8004d1e:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3734      	adds	r7, #52	; 0x34
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop

08004d30 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b098      	sub	sp, #96	; 0x60
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004d38:	4a84      	ldr	r2, [pc, #528]	; (8004f4c <HAL_FDCAN_Init+0x21c>)
 8004d3a:	f107 030c 	add.w	r3, r7, #12
 8004d3e:	4611      	mov	r1, r2
 8004d40:	224c      	movs	r2, #76	; 0x4c
 8004d42:	4618      	mov	r0, r3
 8004d44:	f015 ffa9 	bl	801ac9a <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e1ca      	b.n	80050e8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a7e      	ldr	r2, [pc, #504]	; (8004f50 <HAL_FDCAN_Init+0x220>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d106      	bne.n	8004d6a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004d64:	461a      	mov	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fc f898 	bl	8000eb4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	699a      	ldr	r2, [r3, #24]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0210 	bic.w	r2, r2, #16
 8004d92:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d94:	f7fd fe96 	bl	8002ac4 <HAL_GetTick>
 8004d98:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004d9a:	e014      	b.n	8004dc6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d9c:	f7fd fe92 	bl	8002ac4 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b0a      	cmp	r3, #10
 8004da8:	d90d      	bls.n	8004dc6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004db0:	f043 0201 	orr.w	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2203      	movs	r2, #3
 8004dbe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e190      	b.n	80050e8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	699b      	ldr	r3, [r3, #24]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b08      	cmp	r3, #8
 8004dd2:	d0e3      	beq.n	8004d9c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	699a      	ldr	r2, [r3, #24]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0201 	orr.w	r2, r2, #1
 8004de2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004de4:	f7fd fe6e 	bl	8002ac4 <HAL_GetTick>
 8004de8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004dea:	e014      	b.n	8004e16 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004dec:	f7fd fe6a 	bl	8002ac4 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b0a      	cmp	r3, #10
 8004df8:	d90d      	bls.n	8004e16 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2203      	movs	r2, #3
 8004e0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e168      	b.n	80050e8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0e3      	beq.n	8004dec <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0202 	orr.w	r2, r2, #2
 8004e32:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	7c1b      	ldrb	r3, [r3, #16]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d108      	bne.n	8004e4e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	699a      	ldr	r2, [r3, #24]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e4a:	619a      	str	r2, [r3, #24]
 8004e4c:	e007      	b.n	8004e5e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e5c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	7c5b      	ldrb	r3, [r3, #17]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d108      	bne.n	8004e78 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699a      	ldr	r2, [r3, #24]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e74:	619a      	str	r2, [r3, #24]
 8004e76:	e007      	b.n	8004e88 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	699a      	ldr	r2, [r3, #24]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e86:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	7c9b      	ldrb	r3, [r3, #18]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d108      	bne.n	8004ea2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	699a      	ldr	r2, [r3, #24]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e9e:	619a      	str	r2, [r3, #24]
 8004ea0:	e007      	b.n	8004eb2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	699a      	ldr	r2, [r3, #24]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004eb0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699a      	ldr	r2, [r3, #24]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004ed6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691a      	ldr	r2, [r3, #16]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f022 0210 	bic.w	r2, r2, #16
 8004ee6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d108      	bne.n	8004f02 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0204 	orr.w	r2, r2, #4
 8004efe:	619a      	str	r2, [r3, #24]
 8004f00:	e030      	b.n	8004f64 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d02c      	beq.n	8004f64 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d020      	beq.n	8004f54 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699a      	ldr	r2, [r3, #24]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004f20:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f042 0210 	orr.w	r2, r2, #16
 8004f30:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	2b03      	cmp	r3, #3
 8004f38:	d114      	bne.n	8004f64 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699a      	ldr	r2, [r3, #24]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0220 	orr.w	r2, r2, #32
 8004f48:	619a      	str	r2, [r3, #24]
 8004f4a:	e00b      	b.n	8004f64 <HAL_FDCAN_Init+0x234>
 8004f4c:	0801bd80 	.word	0x0801bd80
 8004f50:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0220 	orr.w	r2, r2, #32
 8004f62:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	69db      	ldr	r3, [r3, #28]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f74:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004f7c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	695b      	ldr	r3, [r3, #20]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004f8c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004f8e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f98:	d115      	bne.n	8004fc6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fa8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004fb2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	3b01      	subs	r3, #1
 8004fbc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004fc2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004fc4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	430a      	orrs	r2, r1
 8004fe0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fec:	4413      	add	r3, r2
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004ffa:	f023 0107 	bic.w	r1, r3, #7
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005008:	4413      	add	r3, r2
 800500a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	430a      	orrs	r2, r1
 8005014:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501c:	2b00      	cmp	r3, #0
 800501e:	d012      	beq.n	8005046 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005028:	f023 0107 	bic.w	r1, r3, #7
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005036:	4413      	add	r3, r2
 8005038:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	430a      	orrs	r2, r1
 8005042:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800504a:	2b00      	cmp	r3, #0
 800504c:	d013      	beq.n	8005076 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005056:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005064:	4413      	add	r3, r2
 8005066:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800506a:	011a      	lsls	r2, r3, #4
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507a:	2b00      	cmp	r3, #0
 800507c:	d013      	beq.n	80050a6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005086:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005094:	4413      	add	r3, r2
 8005096:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800509a:	021a      	lsls	r2, r3, #8
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a11      	ldr	r2, [pc, #68]	; (80050f0 <HAL_FDCAN_Init+0x3c0>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d107      	bne.n	80050c0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f022 0203 	bic.w	r2, r2, #3
 80050be:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fe73 	bl	8005dc4 <FDCAN_CalcultateRamBlockAddresses>
 80050de:	4603      	mov	r3, r0
 80050e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80050e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3760      	adds	r7, #96	; 0x60
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	4000a000 	.word	0x4000a000

080050f4 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005104:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005106:	7bfb      	ldrb	r3, [r7, #15]
 8005108:	2b01      	cmp	r3, #1
 800510a:	d002      	beq.n	8005112 <HAL_FDCAN_ConfigFilter+0x1e>
 800510c:	7bfb      	ldrb	r3, [r7, #15]
 800510e:	2b02      	cmp	r3, #2
 8005110:	d157      	bne.n	80051c2 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d12b      	bne.n	8005172 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	2b07      	cmp	r3, #7
 8005120:	d10d      	bne.n	800513e <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	69db      	ldr	r3, [r3, #28]
 800512c:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800512e:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8005134:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8005136:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	e00e      	b.n	800515c <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800514a:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005152:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005158:	4313      	orrs	r3, r2
 800515a:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4413      	add	r3, r2
 8005168:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	601a      	str	r2, [r3, #0]
 8005170:	e025      	b.n	80051be <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	075a      	lsls	r2, r3, #29
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	2b07      	cmp	r3, #7
 8005186:	d103      	bne.n	8005190 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	699b      	ldr	r3, [r3, #24]
 800518c:	613b      	str	r3, [r7, #16]
 800518e:	e006      	b.n	800519e <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	079a      	lsls	r2, r3, #30
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	4313      	orrs	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	3304      	adds	r3, #4
 80051b6:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80051be:	2300      	movs	r3, #0
 80051c0:	e008      	b.n	80051d4 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051c8:	f043 0202 	orr.w	r2, r3, #2
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80051d2:	2301      	movs	r3, #1
  }
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	371c      	adds	r7, #28
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
 80051ec:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d110      	bne.n	800521c <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005202:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005208:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005210:	69ba      	ldr	r2, [r7, #24]
 8005212:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005214:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e008      	b.n	800522e <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005222:	f043 0204 	orr.w	r2, r3, #4
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
  }
}
 800522e:	4618      	mov	r0, r3
 8005230:	3714      	adds	r7, #20
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_FDCAN_ConfigFifoWatermark>:
  *           - 0 and 32, if FIFO is FDCAN_CFG_TX_EVENT_FIFO
  *           - 0 and 64, if FIFO is FDCAN_CFG_RX_FIFO0 or FDCAN_CFG_RX_FIFO1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFifoWatermark(FDCAN_HandleTypeDef *hfdcan, uint32_t FIFO, uint32_t Watermark)
{
 800523a:	b480      	push	{r7}
 800523c:	b085      	sub	sp, #20
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	607a      	str	r2, [r7, #4]
  else /* (FIFO == FDCAN_CFG_RX_FIFO0) || (FIFO == FDCAN_CFG_RX_FIFO1) */
  {
    assert_param(IS_FDCAN_MAX_VALUE(Watermark, 64U));
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b01      	cmp	r3, #1
 8005250:	d130      	bne.n	80052b4 <HAL_FDCAN_ConfigFifoWatermark+0x7a>
  {
    /* Set the level for FIFO watermark interrupt */
    if (FIFO == FDCAN_CFG_TX_EVENT_FIFO)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10d      	bne.n	8005274 <HAL_FDCAN_ConfigFifoWatermark+0x3a>
    {
      MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFWM, (Watermark << FDCAN_TXEFC_EFWM_Pos));
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005260:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	061a      	lsls	r2, r3, #24
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005272:	e01d      	b.n	80052b0 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else if (FIFO == FDCAN_CFG_RX_FIFO0)
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d10d      	bne.n	8005296 <HAL_FDCAN_ConfigFifoWatermark+0x5c>
    {
      MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0WM, (Watermark << FDCAN_RXF0C_F0WM_Pos));
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005282:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	061a      	lsls	r2, r3, #24
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005294:	e00c      	b.n	80052b0 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else /* FIFO == FDCAN_CFG_RX_FIFO1 */
    {
      MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1WM, (Watermark << FDCAN_RXF1C_F1WM_Pos));
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800529e:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	061a      	lsls	r2, r3, #24
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Return function status */
    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e008      	b.n	80052c6 <HAL_FDCAN_ConfigFifoWatermark+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052ba:	f043 0204 	orr.w	r2, r3, #4
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b083      	sub	sp, #12
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d111      	bne.n	800530a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2202      	movs	r2, #2
 80052ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0201 	bic.w	r2, r2, #1
 80052fc:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e008      	b.n	800531c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005310:	f043 0204 	orr.w	r2, r3, #4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d141      	bne.n	80053c4 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005348:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005356:	f043 0220 	orr.w	r2, r3, #32
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e038      	b.n	80053d6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800536c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d009      	beq.n	8005388 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800537a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e026      	b.n	80053d6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005390:	0c1b      	lsrs	r3, r3, #16
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	68b9      	ldr	r1, [r7, #8]
 800539e:	68f8      	ldr	r0, [r7, #12]
 80053a0:	f000 fe96 	bl	80060d0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2101      	movs	r1, #1
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	fa01 f202 	lsl.w	r2, r1, r2
 80053b0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80053b4:	2201      	movs	r2, #1
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	409a      	lsls	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e008      	b.n	80053d6 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ca:	f043 0208 	orr.w	r2, r3, #8
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
  }
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b08b      	sub	sp, #44	; 0x2c
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
 80053ec:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80053f8:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80053fa:	7efb      	ldrb	r3, [r7, #27]
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	f040 814b 	bne.w	8005698 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2b40      	cmp	r3, #64	; 0x40
 8005406:	d14d      	bne.n	80054a4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005410:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d109      	bne.n	800542c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800541e:	f043 0220 	orr.w	r2, r3, #32
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	e13e      	b.n	80056aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005438:	2b00      	cmp	r3, #0
 800543a:	d109      	bne.n	8005450 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005442:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e12c      	b.n	80056aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d10b      	bne.n	800547a <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800546a:	0fdb      	lsrs	r3, r3, #31
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005474:	d101      	bne.n	800547a <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005476:	2301      	movs	r3, #1
 8005478:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005482:	0a1b      	lsrs	r3, r3, #8
 8005484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	4413      	add	r3, r2
 800548c:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005496:	69f9      	ldr	r1, [r7, #28]
 8005498:	fb01 f303 	mul.w	r3, r1, r3
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	4413      	add	r3, r2
 80054a0:	627b      	str	r3, [r7, #36]	; 0x24
 80054a2:	e069      	b.n	8005578 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b41      	cmp	r3, #65	; 0x41
 80054a8:	d14d      	bne.n	8005546 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d109      	bne.n	80054ce <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054c0:	f043 0220 	orr.w	r2, r3, #32
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e0ed      	b.n	80056aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e0db      	b.n	80056aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80054fa:	0e1b      	lsrs	r3, r3, #24
 80054fc:	f003 0301 	and.w	r3, r3, #1
 8005500:	2b01      	cmp	r3, #1
 8005502:	d10b      	bne.n	800551c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800550c:	0fdb      	lsrs	r3, r3, #31
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005516:	d101      	bne.n	800551c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005518:	2301      	movs	r3, #1
 800551a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005524:	0a1b      	lsrs	r3, r3, #8
 8005526:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800552a:	69fa      	ldr	r2, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005538:	69f9      	ldr	r1, [r7, #28]
 800553a:	fb01 f303 	mul.w	r3, r1, r3
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	627b      	str	r3, [r7, #36]	; 0x24
 8005544:	e018      	b.n	8005578 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	429a      	cmp	r2, r3
 800554e:	d309      	bcc.n	8005564 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005556:	f043 0220 	orr.w	r2, r3, #32
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e0a2      	b.n	80056aa <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800556c:	68b9      	ldr	r1, [r7, #8]
 800556e:	fb01 f303 	mul.w	r3, r1, r3
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	4413      	add	r3, r2
 8005576:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d107      	bne.n	800559c <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	0c9b      	lsrs	r3, r3, #18
 8005592:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	601a      	str	r2, [r3, #0]
 800559a:	e005      	b.n	80055a8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80055a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80055c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c2:	3304      	adds	r3, #4
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80055d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80055dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80055f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	0fda      	lsrs	r2, r3, #31
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	3304      	adds	r3, #4
 8005610:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005616:	2300      	movs	r3, #0
 8005618:	623b      	str	r3, [r7, #32]
 800561a:	e00a      	b.n	8005632 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	441a      	add	r2, r3
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	440b      	add	r3, r1
 8005628:	7812      	ldrb	r2, [r2, #0]
 800562a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800562c:	6a3b      	ldr	r3, [r7, #32]
 800562e:	3301      	adds	r3, #1
 8005630:	623b      	str	r3, [r7, #32]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	0c1b      	lsrs	r3, r3, #16
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800563a:	5cd3      	ldrb	r3, [r2, r3]
 800563c:	461a      	mov	r2, r3
 800563e:	6a3b      	ldr	r3, [r7, #32]
 8005640:	4293      	cmp	r3, r2
 8005642:	d3eb      	bcc.n	800561c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d105      	bne.n	8005656 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	69fa      	ldr	r2, [r7, #28]
 8005650:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005654:	e01e      	b.n	8005694 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	2b41      	cmp	r3, #65	; 0x41
 800565a:	d105      	bne.n	8005668 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005666:	e015      	b.n	8005694 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b1f      	cmp	r3, #31
 800566c:	d808      	bhi.n	8005680 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2101      	movs	r1, #1
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	fa01 f202 	lsl.w	r2, r1, r2
 800567a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800567e:	e009      	b.n	8005694 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	f003 021f 	and.w	r2, r3, #31
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	2101      	movs	r1, #1
 800568c:	fa01 f202 	lsl.w	r2, r1, r2
 8005690:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005694:	2300      	movs	r3, #0
 8005696:	e008      	b.n	80056aa <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800569e:	f043 0208 	orr.w	r2, r3, #8
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
  }
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	372c      	adds	r7, #44	; 0x2c
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	0801f1e4 	.word	0x0801f1e4

080056bc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80056ce:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80056d0:	7dfb      	ldrb	r3, [r7, #23]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d002      	beq.n	80056dc <HAL_FDCAN_ActivateNotification+0x20>
 80056d6:	7dfb      	ldrb	r3, [r7, #23]
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d155      	bne.n	8005788 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4013      	ands	r3, r2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d108      	bne.n	80056fc <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f042 0201 	orr.w	r2, r2, #1
 80056f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80056fa:	e014      	b.n	8005726 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	4013      	ands	r3, r2
 8005706:	68ba      	ldr	r2, [r7, #8]
 8005708:	429a      	cmp	r2, r3
 800570a:	d108      	bne.n	800571e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f042 0202 	orr.w	r2, r2, #2
 800571a:	65da      	str	r2, [r3, #92]	; 0x5c
 800571c:	e003      	b.n	8005726 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2203      	movs	r2, #3
 8005724:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	430a      	orrs	r2, r1
 8005740:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	430a      	orrs	r2, r1
 800575e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005768:	68ba      	ldr	r2, [r7, #8]
 800576a:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <HAL_FDCAN_ActivateNotification+0xec>)
 800576c:	4013      	ands	r3, r2
 800576e:	68fa      	ldr	r2, [r7, #12]
 8005770:	6812      	ldr	r2, [r2, #0]
 8005772:	430b      	orrs	r3, r1
 8005774:	6553      	str	r3, [r2, #84]	; 0x54
 8005776:	4b0d      	ldr	r3, [pc, #52]	; (80057ac <HAL_FDCAN_ActivateNotification+0xf0>)
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	0f9b      	lsrs	r3, r3, #30
 800577e:	490b      	ldr	r1, [pc, #44]	; (80057ac <HAL_FDCAN_ActivateNotification+0xf0>)
 8005780:	4313      	orrs	r3, r2
 8005782:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005784:	2300      	movs	r3, #0
 8005786:	e008      	b.n	800579a <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800578e:	f043 0202 	orr.w	r2, r3, #2
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
  }
}
 800579a:	4618      	mov	r0, r3
 800579c:	371c      	adds	r7, #28
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	3fcfffff 	.word	0x3fcfffff
 80057ac:	4000a800 	.word	0x4000a800

080057b0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b092      	sub	sp, #72	; 0x48
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80057b8:	4b90      	ldr	r3, [pc, #576]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 80057ba:	691b      	ldr	r3, [r3, #16]
 80057bc:	079b      	lsls	r3, r3, #30
 80057be:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80057c0:	4b8e      	ldr	r3, [pc, #568]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	079b      	lsls	r3, r3, #30
 80057c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057c8:	4013      	ands	r3, r2
 80057ca:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80057d6:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057e0:	4013      	ands	r3, r2
 80057e2:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ea:	f003 030f 	and.w	r3, r3, #15
 80057ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057f8:	4013      	ands	r3, r2
 80057fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005802:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005806:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005810:	4013      	ands	r3, r2
 8005812:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800581a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800581e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005828:	4013      	ands	r3, r2
 800582a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005832:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8005836:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800583e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005840:	4013      	ands	r3, r2
 8005842:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800584a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584e:	2b00      	cmp	r3, #0
 8005850:	d011      	beq.n	8005876 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005868:	651a      	str	r2, [r3, #80]	; 0x50
 800586a:	4b64      	ldr	r3, [pc, #400]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 800586c:	2200      	movs	r2, #0
 800586e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 fa5a 	bl	8005d2a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800587c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005880:	2b00      	cmp	r3, #0
 8005882:	d01e      	beq.n	80058c2 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800588a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800588e:	2b00      	cmp	r3, #0
 8005890:	d017      	beq.n	80058c2 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80058a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058a6:	4013      	ands	r3, r2
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058b2:	651a      	str	r2, [r3, #80]	; 0x50
 80058b4:	4b51      	ldr	r3, [pc, #324]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80058ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f000 fa0b 	bl	8005cd8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80058c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00d      	beq.n	80058e4 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058ce:	4b4c      	ldr	r3, [pc, #304]	; (8005a00 <HAL_FDCAN_IRQHandler+0x250>)
 80058d0:	400b      	ands	r3, r1
 80058d2:	6513      	str	r3, [r2, #80]	; 0x50
 80058d4:	4a49      	ldr	r2, [pc, #292]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 80058d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058d8:	0f9b      	lsrs	r3, r3, #30
 80058da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 80058dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9c4 	bl	8005c6c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80058e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058f0:	4b43      	ldr	r3, [pc, #268]	; (8005a00 <HAL_FDCAN_IRQHandler+0x250>)
 80058f2:	400b      	ands	r3, r1
 80058f4:	6513      	str	r3, [r2, #80]	; 0x50
 80058f6:	4a41      	ldr	r2, [pc, #260]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 80058f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058fa:	0f9b      	lsrs	r3, r3, #30
 80058fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80058fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f9be 	bl	8005c82 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8005906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005908:	2b00      	cmp	r3, #0
 800590a:	d00d      	beq.n	8005928 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005912:	4b3b      	ldr	r3, [pc, #236]	; (8005a00 <HAL_FDCAN_IRQHandler+0x250>)
 8005914:	400b      	ands	r3, r1
 8005916:	6513      	str	r3, [r2, #80]	; 0x50
 8005918:	4a38      	ldr	r2, [pc, #224]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 800591a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800591c:	0f9b      	lsrs	r3, r3, #30
 800591e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005920:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fb fbec 	bl	8001100 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005934:	4b32      	ldr	r3, [pc, #200]	; (8005a00 <HAL_FDCAN_IRQHandler+0x250>)
 8005936:	400b      	ands	r3, r1
 8005938:	6513      	str	r3, [r2, #80]	; 0x50
 800593a:	4a30      	ldr	r2, [pc, #192]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 800593c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800593e:	0f9b      	lsrs	r3, r3, #30
 8005940:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005942:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f9a7 	bl	8005c98 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005950:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005954:	2b00      	cmp	r3, #0
 8005956:	d011      	beq.n	800597c <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00a      	beq.n	800597c <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800596e:	651a      	str	r2, [r3, #80]	; 0x50
 8005970:	4b22      	ldr	r3, [pc, #136]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 8005972:	2200      	movs	r2, #0
 8005974:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f999 	bl	8005cae <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005986:	2b00      	cmp	r3, #0
 8005988:	d01e      	beq.n	80059c8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005990:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005994:	2b00      	cmp	r3, #0
 8005996:	d017      	beq.n	80059c8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80059a0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059ac:	4013      	ands	r3, r2
 80059ae:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059b8:	651a      	str	r2, [r3, #80]	; 0x50
 80059ba:	4b10      	ldr	r3, [pc, #64]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 80059bc:	2200      	movs	r2, #0
 80059be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80059c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f97d 	bl	8005cc2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d016      	beq.n	8005a04 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00f      	beq.n	8005a04 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80059ec:	651a      	str	r2, [r3, #80]	; 0x50
 80059ee:	4b03      	ldr	r3, [pc, #12]	; (80059fc <HAL_FDCAN_IRQHandler+0x24c>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f97a 	bl	8005cee <HAL_FDCAN_RxBufferNewMessageCallback>
 80059fa:	e003      	b.n	8005a04 <HAL_FDCAN_IRQHandler+0x254>
 80059fc:	4000a800 	.word	0x4000a800
 8005a00:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d011      	beq.n	8005a36 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a28:	651a      	str	r2, [r3, #80]	; 0x50
 8005a2a:	4b8d      	ldr	r3, [pc, #564]	; (8005c60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 f966 	bl	8005d02 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d011      	beq.n	8005a68 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00a      	beq.n	8005a68 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005a5a:	651a      	str	r2, [r3, #80]	; 0x50
 8005a5c:	4b80      	ldr	r3, [pc, #512]	; (8005c60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a5e:	2200      	movs	r2, #0
 8005a60:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f957 	bl	8005d16 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d016      	beq.n	8005aa4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00f      	beq.n	8005aa4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a8c:	651a      	str	r2, [r3, #80]	; 0x50
 8005a8e:	4b74      	ldr	r3, [pc, #464]	; (8005c60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005a90:	2200      	movs	r2, #0
 8005a92:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00d      	beq.n	8005ac6 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ab0:	4b6c      	ldr	r3, [pc, #432]	; (8005c64 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005ab2:	400b      	ands	r3, r1
 8005ab4:	6513      	str	r3, [r2, #80]	; 0x50
 8005ab6:	4a6a      	ldr	r2, [pc, #424]	; (8005c60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	0f9b      	lsrs	r3, r3, #30
 8005abc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005abe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f946 	bl	8005d52 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d011      	beq.n	8005af0 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ad2:	4b64      	ldr	r3, [pc, #400]	; (8005c64 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005ad4:	400b      	ands	r3, r1
 8005ad6:	6513      	str	r3, [r2, #80]	; 0x50
 8005ad8:	4a61      	ldr	r2, [pc, #388]	; (8005c60 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005adc:	0f9b      	lsrs	r3, r3, #30
 8005ade:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	431a      	orrs	r2, r3
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a5c      	ldr	r2, [pc, #368]	; (8005c68 <HAL_FDCAN_IRQHandler+0x4b8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	f040 80a6 	bne.w	8005c48 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 809e 	beq.w	8005c48 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	f003 030f 	and.w	r3, r3, #15
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b20:	4013      	ands	r3, r2
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b2e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b36:	6a3a      	ldr	r2, [r7, #32]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	6a1b      	ldr	r3, [r3, #32]
 8005b42:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005b46:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	4013      	ands	r3, r2
 8005b52:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8005b5e:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	4013      	ands	r3, r2
 8005b6a:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8005b76:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4013      	ands	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d007      	beq.n	8005b9a <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b90:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005b92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f8e7 	bl	8005d68 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005b9a:	6a3b      	ldr	r3, [r7, #32]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d007      	beq.n	8005bb0 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	6a3a      	ldr	r2, [r7, #32]
 8005ba6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005ba8:	6a39      	ldr	r1, [r7, #32]
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f8e7 	bl	8005d7e <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d01b      	beq.n	8005bf6 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	6a1b      	ldr	r3, [r3, #32]
 8005bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d014      	beq.n	8005bf6 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd2:	0c1b      	lsrs	r3, r3, #16
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005be2:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2240      	movs	r2, #64	; 0x40
 8005bea:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	6939      	ldr	r1, [r7, #16]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f8cf 	bl	8005d94 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005bf6:	69fb      	ldr	r3, [r7, #28]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d007      	beq.n	8005c0c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	69fa      	ldr	r2, [r7, #28]
 8005c02:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005c04:	69f9      	ldr	r1, [r7, #28]
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 f8d0 	bl	8005dac <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005c0c:	69bb      	ldr	r3, [r7, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00b      	beq.n	8005c2a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	69ba      	ldr	r2, [r7, #24]
 8005c18:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005c20:	69bb      	ldr	r3, [r7, #24]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d002      	beq.n	8005c58 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 f873 	bl	8005d3e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005c58:	bf00      	nop
 8005c5a:	3748      	adds	r7, #72	; 0x48
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	4000a800 	.word	0x4000a800
 8005c64:	3fcfffff 	.word	0x3fcfffff
 8005c68:	4000a000 	.word	0x4000a000

08005c6c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b083      	sub	sp, #12
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
 8005cca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005ccc:	bf00      	nop
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005cf6:	bf00      	nop
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005d0a:	bf00      	nop
 8005d0c:	370c      	adds	r7, #12
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d14:	4770      	bx	lr

08005d16 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b083      	sub	sp, #12
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005d32:	bf00      	nop
 8005d34:	370c      	adds	r7, #12
 8005d36:	46bd      	mov	sp, r7
 8005d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3c:	4770      	bx	lr

08005d3e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005d3e:	b480      	push	{r7}
 8005d40:	b083      	sub	sp, #12
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005d46:	bf00      	nop
 8005d48:	370c      	adds	r7, #12
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b083      	sub	sp, #12
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	6078      	str	r0, [r7, #4]
 8005d5a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005d5c:	bf00      	nop
 8005d5e:	370c      	adds	r7, #12
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr

08005d68 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005d7e:	b480      	push	{r7}
 8005d80:	b083      	sub	sp, #12
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
 8005d86:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005d88:	bf00      	nop
 8005d8a:	370c      	adds	r7, #12
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d92:	4770      	bx	lr

08005d94 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b085      	sub	sp, #20
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	3714      	adds	r7, #20
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005db6:	bf00      	nop
 8005db8:	370c      	adds	r7, #12
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd0:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005dda:	4ba7      	ldr	r3, [pc, #668]	; (8006078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	68ba      	ldr	r2, [r7, #8]
 8005de0:	0091      	lsls	r1, r2, #2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6812      	ldr	r2, [r2, #0]
 8005de6:	430b      	orrs	r3, r1
 8005de8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005df4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	041a      	lsls	r2, r3, #16
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	68ba      	ldr	r2, [r7, #8]
 8005e0e:	4413      	add	r3, r2
 8005e10:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005e1a:	4b97      	ldr	r3, [pc, #604]	; (8006078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	0091      	lsls	r1, r2, #2
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	6812      	ldr	r2, [r2, #0]
 8005e26:	430b      	orrs	r3, r1
 8005e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e34:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3c:	041a      	lsls	r2, r3, #16
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4c:	005b      	lsls	r3, r3, #1
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4413      	add	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005e5c:	4b86      	ldr	r3, [pc, #536]	; (8006078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005e5e:	4013      	ands	r3, r2
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	0091      	lsls	r1, r2, #2
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6812      	ldr	r2, [r2, #0]
 8005e68:	430b      	orrs	r3, r1
 8005e6a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e76:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e7e:	041a      	lsls	r2, r3, #16
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8e:	687a      	ldr	r2, [r7, #4]
 8005e90:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005e92:	fb02 f303 	mul.w	r3, r2, r3
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	4413      	add	r3, r2
 8005e9a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005ea4:	4b74      	ldr	r3, [pc, #464]	; (8006078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	0091      	lsls	r1, r2, #2
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	430b      	orrs	r3, r1
 8005eb2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005ebe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec6:	041a      	lsls	r2, r3, #16
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005eec:	4b62      	ldr	r3, [pc, #392]	; (8006078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005eee:	4013      	ands	r3, r2
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	0091      	lsls	r1, r2, #2
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	430b      	orrs	r3, r1
 8005efa:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005f06:	fb02 f303 	mul.w	r3, r2, r3
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005f18:	4b57      	ldr	r3, [pc, #348]	; (8006078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	0091      	lsls	r1, r2, #2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	6812      	ldr	r2, [r2, #0]
 8005f24:	430b      	orrs	r3, r1
 8005f26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005f32:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3a:	041a      	lsls	r2, r3, #16
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	430a      	orrs	r2, r1
 8005f42:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	4413      	add	r3, r2
 8005f50:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005f5a:	4b47      	ldr	r3, [pc, #284]	; (8006078 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	68ba      	ldr	r2, [r7, #8]
 8005f60:	0091      	lsls	r1, r2, #2
 8005f62:	687a      	ldr	r2, [r7, #4]
 8005f64:	6812      	ldr	r2, [r2, #0]
 8005f66:	430b      	orrs	r3, r1
 8005f68:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f74:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f7c:	041a      	lsls	r2, r3, #16
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	430a      	orrs	r2, r1
 8005f84:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005f90:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	061a      	lsls	r2, r3, #24
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	430a      	orrs	r2, r1
 8005fa0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005fa8:	4b34      	ldr	r3, [pc, #208]	; (800607c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005faa:	4413      	add	r3, r2
 8005fac:	009a      	lsls	r2, r3, #2
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	441a      	add	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	441a      	add	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005fde:	fb01 f303 	mul.w	r3, r1, r3
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	441a      	add	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ff2:	6879      	ldr	r1, [r7, #4]
 8005ff4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005ff6:	fb01 f303 	mul.w	r3, r1, r3
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	441a      	add	r2, r3
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600a:	6879      	ldr	r1, [r7, #4]
 800600c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	441a      	add	r2, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006026:	00db      	lsls	r3, r3, #3
 8006028:	441a      	add	r2, r3
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603a:	6879      	ldr	r1, [r7, #4]
 800603c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800603e:	fb01 f303 	mul.w	r3, r1, r3
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	441a      	add	r2, r3
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800605a:	fb01 f303 	mul.w	r3, r1, r3
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	441a      	add	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800606e:	4a04      	ldr	r2, [pc, #16]	; (8006080 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d915      	bls.n	80060a0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006074:	e006      	b.n	8006084 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006076:	bf00      	nop
 8006078:	ffff0003 	.word	0xffff0003
 800607c:	10002b00 	.word	0x10002b00
 8006080:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800608a:	f043 0220 	orr.w	r2, r3, #32
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2203      	movs	r2, #3
 8006098:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e010      	b.n	80060c2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	e005      	b.n	80060b4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3304      	adds	r3, #4
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d3f3      	bcc.n	80060a8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3714      	adds	r7, #20
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop

080060d0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b089      	sub	sp, #36	; 0x24
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d10a      	bne.n	80060fc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80060ee:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80060f6:	4313      	orrs	r3, r2
 80060f8:	61fb      	str	r3, [r7, #28]
 80060fa:	e00a      	b.n	8006112 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8006104:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800610a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800610c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006110:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800611c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8006122:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8006128:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800612e:	4313      	orrs	r3, r2
 8006130:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800613c:	6839      	ldr	r1, [r7, #0]
 800613e:	fb01 f303 	mul.w	r3, r1, r3
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	69fa      	ldr	r2, [r7, #28]
 800614c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	3304      	adds	r3, #4
 8006152:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	3304      	adds	r3, #4
 800615e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006160:	2300      	movs	r3, #0
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e020      	b.n	80061a8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	3303      	adds	r3, #3
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	4413      	add	r3, r2
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	3302      	adds	r3, #2
 8006176:	6879      	ldr	r1, [r7, #4]
 8006178:	440b      	add	r3, r1
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800617e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	3301      	adds	r3, #1
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	440b      	add	r3, r1
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800618c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800618e:	6879      	ldr	r1, [r7, #4]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	440a      	add	r2, r1
 8006194:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006196:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006198:	69bb      	ldr	r3, [r7, #24]
 800619a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	3304      	adds	r3, #4
 80061a0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	3304      	adds	r3, #4
 80061a6:	617b      	str	r3, [r7, #20]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68db      	ldr	r3, [r3, #12]
 80061ac:	0c1b      	lsrs	r3, r3, #16
 80061ae:	4a06      	ldr	r2, [pc, #24]	; (80061c8 <FDCAN_CopyMessageToRAM+0xf8>)
 80061b0:	5cd3      	ldrb	r3, [r2, r3]
 80061b2:	461a      	mov	r2, r3
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d3d5      	bcc.n	8006166 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	3724      	adds	r7, #36	; 0x24
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr
 80061c8:	0801f1e4 	.word	0x0801f1e4

080061cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b089      	sub	sp, #36	; 0x24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80061da:	4b86      	ldr	r3, [pc, #536]	; (80063f4 <HAL_GPIO_Init+0x228>)
 80061dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80061de:	e18c      	b.n	80064fa <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	2101      	movs	r1, #1
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	fa01 f303 	lsl.w	r3, r1, r3
 80061ec:	4013      	ands	r3, r2
 80061ee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	f000 817e 	beq.w	80064f4 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	f003 0303 	and.w	r3, r3, #3
 8006200:	2b01      	cmp	r3, #1
 8006202:	d005      	beq.n	8006210 <HAL_GPIO_Init+0x44>
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	f003 0303 	and.w	r3, r3, #3
 800620c:	2b02      	cmp	r3, #2
 800620e:	d130      	bne.n	8006272 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	005b      	lsls	r3, r3, #1
 800621a:	2203      	movs	r2, #3
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	43db      	mvns	r3, r3
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	4013      	ands	r3, r2
 8006226:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	fa02 f303 	lsl.w	r3, r2, r3
 8006234:	69ba      	ldr	r2, [r7, #24]
 8006236:	4313      	orrs	r3, r2
 8006238:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	69ba      	ldr	r2, [r7, #24]
 800623e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006246:	2201      	movs	r2, #1
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	fa02 f303 	lsl.w	r3, r2, r3
 800624e:	43db      	mvns	r3, r3
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	4013      	ands	r3, r2
 8006254:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	091b      	lsrs	r3, r3, #4
 800625c:	f003 0201 	and.w	r2, r3, #1
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	fa02 f303 	lsl.w	r3, r2, r3
 8006266:	69ba      	ldr	r2, [r7, #24]
 8006268:	4313      	orrs	r3, r2
 800626a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	69ba      	ldr	r2, [r7, #24]
 8006270:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b03      	cmp	r3, #3
 800627c:	d017      	beq.n	80062ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	005b      	lsls	r3, r3, #1
 8006288:	2203      	movs	r2, #3
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	43db      	mvns	r3, r3
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	4013      	ands	r3, r2
 8006294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	689a      	ldr	r2, [r3, #8]
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f003 0303 	and.w	r3, r3, #3
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d123      	bne.n	8006302 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	08da      	lsrs	r2, r3, #3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	3208      	adds	r2, #8
 80062c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	f003 0307 	and.w	r3, r3, #7
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	220f      	movs	r2, #15
 80062d2:	fa02 f303 	lsl.w	r3, r2, r3
 80062d6:	43db      	mvns	r3, r3
 80062d8:	69ba      	ldr	r2, [r7, #24]
 80062da:	4013      	ands	r3, r2
 80062dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	691a      	ldr	r2, [r3, #16]
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	f003 0307 	and.w	r3, r3, #7
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	fa02 f303 	lsl.w	r3, r2, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	08da      	lsrs	r2, r3, #3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3208      	adds	r2, #8
 80062fc:	69b9      	ldr	r1, [r7, #24]
 80062fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	005b      	lsls	r3, r3, #1
 800630c:	2203      	movs	r2, #3
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f003 0203 	and.w	r2, r3, #3
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	005b      	lsls	r3, r3, #1
 8006326:	fa02 f303 	lsl.w	r3, r2, r3
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	4313      	orrs	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 80d8 	beq.w	80064f4 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006344:	4b2c      	ldr	r3, [pc, #176]	; (80063f8 <HAL_GPIO_Init+0x22c>)
 8006346:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800634a:	4a2b      	ldr	r2, [pc, #172]	; (80063f8 <HAL_GPIO_Init+0x22c>)
 800634c:	f043 0302 	orr.w	r3, r3, #2
 8006350:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006354:	4b28      	ldr	r3, [pc, #160]	; (80063f8 <HAL_GPIO_Init+0x22c>)
 8006356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800635a:	f003 0302 	and.w	r3, r3, #2
 800635e:	60fb      	str	r3, [r7, #12]
 8006360:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006362:	4a26      	ldr	r2, [pc, #152]	; (80063fc <HAL_GPIO_Init+0x230>)
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	089b      	lsrs	r3, r3, #2
 8006368:	3302      	adds	r3, #2
 800636a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800636e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006370:	69fb      	ldr	r3, [r7, #28]
 8006372:	f003 0303 	and.w	r3, r3, #3
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	220f      	movs	r2, #15
 800637a:	fa02 f303 	lsl.w	r3, r2, r3
 800637e:	43db      	mvns	r3, r3
 8006380:	69ba      	ldr	r2, [r7, #24]
 8006382:	4013      	ands	r3, r2
 8006384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a1d      	ldr	r2, [pc, #116]	; (8006400 <HAL_GPIO_Init+0x234>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d04a      	beq.n	8006424 <HAL_GPIO_Init+0x258>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a1c      	ldr	r2, [pc, #112]	; (8006404 <HAL_GPIO_Init+0x238>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d02b      	beq.n	80063ee <HAL_GPIO_Init+0x222>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <HAL_GPIO_Init+0x23c>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d025      	beq.n	80063ea <HAL_GPIO_Init+0x21e>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a1a      	ldr	r2, [pc, #104]	; (800640c <HAL_GPIO_Init+0x240>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d01f      	beq.n	80063e6 <HAL_GPIO_Init+0x21a>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <HAL_GPIO_Init+0x244>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d019      	beq.n	80063e2 <HAL_GPIO_Init+0x216>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a18      	ldr	r2, [pc, #96]	; (8006414 <HAL_GPIO_Init+0x248>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d013      	beq.n	80063de <HAL_GPIO_Init+0x212>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a17      	ldr	r2, [pc, #92]	; (8006418 <HAL_GPIO_Init+0x24c>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00d      	beq.n	80063da <HAL_GPIO_Init+0x20e>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a16      	ldr	r2, [pc, #88]	; (800641c <HAL_GPIO_Init+0x250>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <HAL_GPIO_Init+0x20a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a15      	ldr	r2, [pc, #84]	; (8006420 <HAL_GPIO_Init+0x254>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d101      	bne.n	80063d2 <HAL_GPIO_Init+0x206>
 80063ce:	2309      	movs	r3, #9
 80063d0:	e029      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063d2:	230a      	movs	r3, #10
 80063d4:	e027      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063d6:	2307      	movs	r3, #7
 80063d8:	e025      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063da:	2306      	movs	r3, #6
 80063dc:	e023      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063de:	2305      	movs	r3, #5
 80063e0:	e021      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063e2:	2304      	movs	r3, #4
 80063e4:	e01f      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063e6:	2303      	movs	r3, #3
 80063e8:	e01d      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e01b      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e019      	b.n	8006426 <HAL_GPIO_Init+0x25a>
 80063f2:	bf00      	nop
 80063f4:	58000080 	.word	0x58000080
 80063f8:	58024400 	.word	0x58024400
 80063fc:	58000400 	.word	0x58000400
 8006400:	58020000 	.word	0x58020000
 8006404:	58020400 	.word	0x58020400
 8006408:	58020800 	.word	0x58020800
 800640c:	58020c00 	.word	0x58020c00
 8006410:	58021000 	.word	0x58021000
 8006414:	58021400 	.word	0x58021400
 8006418:	58021800 	.word	0x58021800
 800641c:	58021c00 	.word	0x58021c00
 8006420:	58022400 	.word	0x58022400
 8006424:	2300      	movs	r3, #0
 8006426:	69fa      	ldr	r2, [r7, #28]
 8006428:	f002 0203 	and.w	r2, r2, #3
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	4093      	lsls	r3, r2
 8006430:	69ba      	ldr	r2, [r7, #24]
 8006432:	4313      	orrs	r3, r2
 8006434:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006436:	4938      	ldr	r1, [pc, #224]	; (8006518 <HAL_GPIO_Init+0x34c>)
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	089b      	lsrs	r3, r3, #2
 800643c:	3302      	adds	r3, #2
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	43db      	mvns	r3, r3
 8006450:	69ba      	ldr	r2, [r7, #24]
 8006452:	4013      	ands	r3, r2
 8006454:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d003      	beq.n	800646a <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800646a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006472:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	43db      	mvns	r3, r3
 800647e:	69ba      	ldr	r2, [r7, #24]
 8006480:	4013      	ands	r3, r2
 8006482:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d003      	beq.n	8006498 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006490:	69ba      	ldr	r2, [r7, #24]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	4313      	orrs	r3, r2
 8006496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006498:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	43db      	mvns	r3, r3
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	4013      	ands	r3, r2
 80064ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d003      	beq.n	80064c4 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	69ba      	ldr	r2, [r7, #24]
 80064c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	43db      	mvns	r3, r3
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	4013      	ands	r3, r2
 80064d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d003      	beq.n	80064ee <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80064e6:	69ba      	ldr	r2, [r7, #24]
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	69ba      	ldr	r2, [r7, #24]
 80064f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80064f4:	69fb      	ldr	r3, [r7, #28]
 80064f6:	3301      	adds	r3, #1
 80064f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	fa22 f303 	lsr.w	r3, r2, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	f47f ae6b 	bne.w	80061e0 <HAL_GPIO_Init+0x14>
  }
}
 800650a:	bf00      	nop
 800650c:	bf00      	nop
 800650e:	3724      	adds	r7, #36	; 0x24
 8006510:	46bd      	mov	sp, r7
 8006512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006516:	4770      	bx	lr
 8006518:	58000400 	.word	0x58000400

0800651c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	460b      	mov	r3, r1
 8006526:	807b      	strh	r3, [r7, #2]
 8006528:	4613      	mov	r3, r2
 800652a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800652c:	787b      	ldrb	r3, [r7, #1]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006532:	887a      	ldrh	r2, [r7, #2]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006538:	e003      	b.n	8006542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800653a:	887b      	ldrh	r3, [r7, #2]
 800653c:	041a      	lsls	r2, r3, #16
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	619a      	str	r2, [r3, #24]
}
 8006542:	bf00      	nop
 8006544:	370c      	adds	r7, #12
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr

0800654e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800654e:	b480      	push	{r7}
 8006550:	b085      	sub	sp, #20
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
 8006556:	460b      	mov	r3, r1
 8006558:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006560:	887a      	ldrh	r2, [r7, #2]
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4013      	ands	r3, r2
 8006566:	041a      	lsls	r2, r3, #16
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	43d9      	mvns	r1, r3
 800656c:	887b      	ldrh	r3, [r7, #2]
 800656e:	400b      	ands	r3, r1
 8006570:	431a      	orrs	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	619a      	str	r2, [r3, #24]
}
 8006576:	bf00      	nop
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	4603      	mov	r3, r0
 800658a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800658c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006590:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006594:	88fb      	ldrh	r3, [r7, #6]
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800659c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80065a6:	88fb      	ldrh	r3, [r7, #6]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fb f87d 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80065ae:	bf00      	nop
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
	...

080065b8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80065c0:	4b19      	ldr	r3, [pc, #100]	; (8006628 <HAL_PWREx_ConfigSupply+0x70>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d00a      	beq.n	80065e2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80065cc:	4b16      	ldr	r3, [pc, #88]	; (8006628 <HAL_PWREx_ConfigSupply+0x70>)
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0307 	and.w	r3, r3, #7
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d001      	beq.n	80065de <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e01f      	b.n	800661e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80065de:	2300      	movs	r3, #0
 80065e0:	e01d      	b.n	800661e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80065e2:	4b11      	ldr	r3, [pc, #68]	; (8006628 <HAL_PWREx_ConfigSupply+0x70>)
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f023 0207 	bic.w	r2, r3, #7
 80065ea:	490f      	ldr	r1, [pc, #60]	; (8006628 <HAL_PWREx_ConfigSupply+0x70>)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4313      	orrs	r3, r2
 80065f0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80065f2:	f7fc fa67 	bl	8002ac4 <HAL_GetTick>
 80065f6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065f8:	e009      	b.n	800660e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80065fa:	f7fc fa63 	bl	8002ac4 <HAL_GetTick>
 80065fe:	4602      	mov	r2, r0
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1ad3      	subs	r3, r2, r3
 8006604:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006608:	d901      	bls.n	800660e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e007      	b.n	800661e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800660e:	4b06      	ldr	r3, [pc, #24]	; (8006628 <HAL_PWREx_ConfigSupply+0x70>)
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006616:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800661a:	d1ee      	bne.n	80065fa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	58024800 	.word	0x58024800

0800662c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800662c:	b580      	push	{r7, lr}
 800662e:	b08c      	sub	sp, #48	; 0x30
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d101      	bne.n	800663e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e397      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	f000 8087 	beq.w	800675a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800664c:	4b9e      	ldr	r3, [pc, #632]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 800664e:	691b      	ldr	r3, [r3, #16]
 8006650:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006654:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006656:	4b9c      	ldr	r3, [pc, #624]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800665c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665e:	2b10      	cmp	r3, #16
 8006660:	d007      	beq.n	8006672 <HAL_RCC_OscConfig+0x46>
 8006662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006664:	2b18      	cmp	r3, #24
 8006666:	d110      	bne.n	800668a <HAL_RCC_OscConfig+0x5e>
 8006668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b02      	cmp	r3, #2
 8006670:	d10b      	bne.n	800668a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006672:	4b95      	ldr	r3, [pc, #596]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667a:	2b00      	cmp	r3, #0
 800667c:	d06c      	beq.n	8006758 <HAL_RCC_OscConfig+0x12c>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d168      	bne.n	8006758 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006686:	2301      	movs	r3, #1
 8006688:	e371      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006692:	d106      	bne.n	80066a2 <HAL_RCC_OscConfig+0x76>
 8006694:	4b8c      	ldr	r3, [pc, #560]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a8b      	ldr	r2, [pc, #556]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 800669a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669e:	6013      	str	r3, [r2, #0]
 80066a0:	e02e      	b.n	8006700 <HAL_RCC_OscConfig+0xd4>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10c      	bne.n	80066c4 <HAL_RCC_OscConfig+0x98>
 80066aa:	4b87      	ldr	r3, [pc, #540]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a86      	ldr	r2, [pc, #536]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066b4:	6013      	str	r3, [r2, #0]
 80066b6:	4b84      	ldr	r3, [pc, #528]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a83      	ldr	r2, [pc, #524]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	e01d      	b.n	8006700 <HAL_RCC_OscConfig+0xd4>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066cc:	d10c      	bne.n	80066e8 <HAL_RCC_OscConfig+0xbc>
 80066ce:	4b7e      	ldr	r3, [pc, #504]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a7d      	ldr	r2, [pc, #500]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066d8:	6013      	str	r3, [r2, #0]
 80066da:	4b7b      	ldr	r3, [pc, #492]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a7a      	ldr	r2, [pc, #488]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e00b      	b.n	8006700 <HAL_RCC_OscConfig+0xd4>
 80066e8:	4b77      	ldr	r3, [pc, #476]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a76      	ldr	r2, [pc, #472]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	4b74      	ldr	r3, [pc, #464]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4a73      	ldr	r2, [pc, #460]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80066fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d013      	beq.n	8006730 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006708:	f7fc f9dc 	bl	8002ac4 <HAL_GetTick>
 800670c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800670e:	e008      	b.n	8006722 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006710:	f7fc f9d8 	bl	8002ac4 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	2b64      	cmp	r3, #100	; 0x64
 800671c:	d901      	bls.n	8006722 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e325      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006722:	4b69      	ldr	r3, [pc, #420]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0f0      	beq.n	8006710 <HAL_RCC_OscConfig+0xe4>
 800672e:	e014      	b.n	800675a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006730:	f7fc f9c8 	bl	8002ac4 <HAL_GetTick>
 8006734:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006736:	e008      	b.n	800674a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006738:	f7fc f9c4 	bl	8002ac4 <HAL_GetTick>
 800673c:	4602      	mov	r2, r0
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	1ad3      	subs	r3, r2, r3
 8006742:	2b64      	cmp	r3, #100	; 0x64
 8006744:	d901      	bls.n	800674a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e311      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800674a:	4b5f      	ldr	r3, [pc, #380]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006752:	2b00      	cmp	r3, #0
 8006754:	d1f0      	bne.n	8006738 <HAL_RCC_OscConfig+0x10c>
 8006756:	e000      	b.n	800675a <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	f000 808a 	beq.w	800687c <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006768:	4b57      	ldr	r3, [pc, #348]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006770:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006772:	4b55      	ldr	r3, [pc, #340]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d007      	beq.n	800678e <HAL_RCC_OscConfig+0x162>
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	2b18      	cmp	r3, #24
 8006782:	d137      	bne.n	80067f4 <HAL_RCC_OscConfig+0x1c8>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	f003 0303 	and.w	r3, r3, #3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d132      	bne.n	80067f4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800678e:	4b4e      	ldr	r3, [pc, #312]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0304 	and.w	r3, r3, #4
 8006796:	2b00      	cmp	r3, #0
 8006798:	d005      	beq.n	80067a6 <HAL_RCC_OscConfig+0x17a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d101      	bne.n	80067a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e2e3      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067a6:	4b48      	ldr	r3, [pc, #288]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f023 0219 	bic.w	r2, r3, #25
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	4945      	ldr	r1, [pc, #276]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80067b8:	f7fc f984 	bl	8002ac4 <HAL_GetTick>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067be:	e008      	b.n	80067d2 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067c0:	f7fc f980 	bl	8002ac4 <HAL_GetTick>
 80067c4:	4602      	mov	r2, r0
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	1ad3      	subs	r3, r2, r3
 80067ca:	2b02      	cmp	r3, #2
 80067cc:	d901      	bls.n	80067d2 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 80067ce:	2303      	movs	r3, #3
 80067d0:	e2cd      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80067d2:	4b3d      	ldr	r3, [pc, #244]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0304 	and.w	r3, r3, #4
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0f0      	beq.n	80067c0 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067de:	4b3a      	ldr	r3, [pc, #232]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	061b      	lsls	r3, r3, #24
 80067ec:	4936      	ldr	r1, [pc, #216]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80067ee:	4313      	orrs	r3, r2
 80067f0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80067f2:	e043      	b.n	800687c <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d026      	beq.n	800684a <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80067fc:	4b32      	ldr	r3, [pc, #200]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f023 0219 	bic.w	r2, r3, #25
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	492f      	ldr	r1, [pc, #188]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 800680a:	4313      	orrs	r3, r2
 800680c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680e:	f7fc f959 	bl	8002ac4 <HAL_GetTick>
 8006812:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006814:	e008      	b.n	8006828 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006816:	f7fc f955 	bl	8002ac4 <HAL_GetTick>
 800681a:	4602      	mov	r2, r0
 800681c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681e:	1ad3      	subs	r3, r2, r3
 8006820:	2b02      	cmp	r3, #2
 8006822:	d901      	bls.n	8006828 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e2a2      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006828:	4b27      	ldr	r3, [pc, #156]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d0f0      	beq.n	8006816 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006834:	4b24      	ldr	r3, [pc, #144]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	061b      	lsls	r3, r3, #24
 8006842:	4921      	ldr	r1, [pc, #132]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006844:	4313      	orrs	r3, r2
 8006846:	604b      	str	r3, [r1, #4]
 8006848:	e018      	b.n	800687c <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800684a:	4b1f      	ldr	r3, [pc, #124]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1e      	ldr	r2, [pc, #120]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006850:	f023 0301 	bic.w	r3, r3, #1
 8006854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006856:	f7fc f935 	bl	8002ac4 <HAL_GetTick>
 800685a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800685c:	e008      	b.n	8006870 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800685e:	f7fc f931 	bl	8002ac4 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b02      	cmp	r3, #2
 800686a:	d901      	bls.n	8006870 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e27e      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006870:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1f0      	bne.n	800685e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0310 	and.w	r3, r3, #16
 8006884:	2b00      	cmp	r3, #0
 8006886:	d06d      	beq.n	8006964 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006888:	4b0f      	ldr	r3, [pc, #60]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006890:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006892:	4b0d      	ldr	r3, [pc, #52]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 8006894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006896:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	2b08      	cmp	r3, #8
 800689c:	d007      	beq.n	80068ae <HAL_RCC_OscConfig+0x282>
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	2b18      	cmp	r3, #24
 80068a2:	d11e      	bne.n	80068e2 <HAL_RCC_OscConfig+0x2b6>
 80068a4:	697b      	ldr	r3, [r7, #20]
 80068a6:	f003 0303 	and.w	r3, r3, #3
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d119      	bne.n	80068e2 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068ae:	4b06      	ldr	r3, [pc, #24]	; (80068c8 <HAL_RCC_OscConfig+0x29c>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d008      	beq.n	80068cc <HAL_RCC_OscConfig+0x2a0>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	69db      	ldr	r3, [r3, #28]
 80068be:	2b80      	cmp	r3, #128	; 0x80
 80068c0:	d004      	beq.n	80068cc <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e253      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
 80068c6:	bf00      	nop
 80068c8:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80068cc:	4ba3      	ldr	r3, [pc, #652]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	061b      	lsls	r3, r3, #24
 80068da:	49a0      	ldr	r1, [pc, #640]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80068dc:	4313      	orrs	r3, r2
 80068de:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80068e0:	e040      	b.n	8006964 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d023      	beq.n	8006932 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80068ea:	4b9c      	ldr	r3, [pc, #624]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a9b      	ldr	r2, [pc, #620]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80068f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f6:	f7fc f8e5 	bl	8002ac4 <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80068fe:	f7fc f8e1 	bl	8002ac4 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b02      	cmp	r3, #2
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e22e      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006910:	4b92      	ldr	r3, [pc, #584]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0f0      	beq.n	80068fe <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800691c:	4b8f      	ldr	r3, [pc, #572]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6a1b      	ldr	r3, [r3, #32]
 8006928:	061b      	lsls	r3, r3, #24
 800692a:	498c      	ldr	r1, [pc, #560]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 800692c:	4313      	orrs	r3, r2
 800692e:	60cb      	str	r3, [r1, #12]
 8006930:	e018      	b.n	8006964 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006932:	4b8a      	ldr	r3, [pc, #552]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a89      	ldr	r2, [pc, #548]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006938:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800693c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800693e:	f7fc f8c1 	bl	8002ac4 <HAL_GetTick>
 8006942:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006944:	e008      	b.n	8006958 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006946:	f7fc f8bd 	bl	8002ac4 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d901      	bls.n	8006958 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e20a      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006958:	4b80      	ldr	r3, [pc, #512]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f0      	bne.n	8006946 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f003 0308 	and.w	r3, r3, #8
 800696c:	2b00      	cmp	r3, #0
 800696e:	d036      	beq.n	80069de <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d019      	beq.n	80069ac <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006978:	4b78      	ldr	r3, [pc, #480]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 800697a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800697c:	4a77      	ldr	r2, [pc, #476]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 800697e:	f043 0301 	orr.w	r3, r3, #1
 8006982:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fc f89e 	bl	8002ac4 <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800698c:	f7fc f89a 	bl	8002ac4 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e1e7      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800699e:	4b6f      	ldr	r3, [pc, #444]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80069a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0x360>
 80069aa:	e018      	b.n	80069de <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ac:	4b6b      	ldr	r3, [pc, #428]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80069ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069b0:	4a6a      	ldr	r2, [pc, #424]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80069b2:	f023 0301 	bic.w	r3, r3, #1
 80069b6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b8:	f7fc f884 	bl	8002ac4 <HAL_GetTick>
 80069bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069c0:	f7fc f880 	bl	8002ac4 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e1cd      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80069d2:	4b62      	ldr	r3, [pc, #392]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80069d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1f0      	bne.n	80069c0 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0320 	and.w	r3, r3, #32
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d036      	beq.n	8006a58 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d019      	beq.n	8006a26 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80069f2:	4b5a      	ldr	r3, [pc, #360]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	4a59      	ldr	r2, [pc, #356]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 80069f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80069fc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80069fe:	f7fc f861 	bl	8002ac4 <HAL_GetTick>
 8006a02:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a04:	e008      	b.n	8006a18 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a06:	f7fc f85d 	bl	8002ac4 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d901      	bls.n	8006a18 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e1aa      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006a18:	4b50      	ldr	r3, [pc, #320]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d0f0      	beq.n	8006a06 <HAL_RCC_OscConfig+0x3da>
 8006a24:	e018      	b.n	8006a58 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006a26:	4b4d      	ldr	r3, [pc, #308]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a4c      	ldr	r2, [pc, #304]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006a32:	f7fc f847 	bl	8002ac4 <HAL_GetTick>
 8006a36:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a38:	e008      	b.n	8006a4c <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006a3a:	f7fc f843 	bl	8002ac4 <HAL_GetTick>
 8006a3e:	4602      	mov	r2, r0
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	1ad3      	subs	r3, r2, r3
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d901      	bls.n	8006a4c <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8006a48:	2303      	movs	r3, #3
 8006a4a:	e190      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006a4c:	4b43      	ldr	r3, [pc, #268]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1f0      	bne.n	8006a3a <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0304 	and.w	r3, r3, #4
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	f000 8085 	beq.w	8006b70 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a66:	4b3e      	ldr	r3, [pc, #248]	; (8006b60 <HAL_RCC_OscConfig+0x534>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a3d      	ldr	r2, [pc, #244]	; (8006b60 <HAL_RCC_OscConfig+0x534>)
 8006a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a70:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a72:	f7fc f827 	bl	8002ac4 <HAL_GetTick>
 8006a76:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a7a:	f7fc f823 	bl	8002ac4 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b64      	cmp	r3, #100	; 0x64
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e170      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a8c:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <HAL_RCC_OscConfig+0x534>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d0f0      	beq.n	8006a7a <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d106      	bne.n	8006aae <HAL_RCC_OscConfig+0x482>
 8006aa0:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa4:	4a2d      	ldr	r2, [pc, #180]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006aa6:	f043 0301 	orr.w	r3, r3, #1
 8006aaa:	6713      	str	r3, [r2, #112]	; 0x70
 8006aac:	e02d      	b.n	8006b0a <HAL_RCC_OscConfig+0x4de>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10c      	bne.n	8006ad0 <HAL_RCC_OscConfig+0x4a4>
 8006ab6:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aba:	4a28      	ldr	r2, [pc, #160]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006abc:	f023 0301 	bic.w	r3, r3, #1
 8006ac0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ac2:	4b26      	ldr	r3, [pc, #152]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac6:	4a25      	ldr	r2, [pc, #148]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006ac8:	f023 0304 	bic.w	r3, r3, #4
 8006acc:	6713      	str	r3, [r2, #112]	; 0x70
 8006ace:	e01c      	b.n	8006b0a <HAL_RCC_OscConfig+0x4de>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	2b05      	cmp	r3, #5
 8006ad6:	d10c      	bne.n	8006af2 <HAL_RCC_OscConfig+0x4c6>
 8006ad8:	4b20      	ldr	r3, [pc, #128]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	4a1f      	ldr	r2, [pc, #124]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006ade:	f043 0304 	orr.w	r3, r3, #4
 8006ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8006ae4:	4b1d      	ldr	r3, [pc, #116]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae8:	4a1c      	ldr	r2, [pc, #112]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	6713      	str	r3, [r2, #112]	; 0x70
 8006af0:	e00b      	b.n	8006b0a <HAL_RCC_OscConfig+0x4de>
 8006af2:	4b1a      	ldr	r3, [pc, #104]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af6:	4a19      	ldr	r2, [pc, #100]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006af8:	f023 0301 	bic.w	r3, r3, #1
 8006afc:	6713      	str	r3, [r2, #112]	; 0x70
 8006afe:	4b17      	ldr	r3, [pc, #92]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b02:	4a16      	ldr	r2, [pc, #88]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006b04:	f023 0304 	bic.w	r3, r3, #4
 8006b08:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d015      	beq.n	8006b3e <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b12:	f7fb ffd7 	bl	8002ac4 <HAL_GetTick>
 8006b16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b18:	e00a      	b.n	8006b30 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b1a:	f7fb ffd3 	bl	8002ac4 <HAL_GetTick>
 8006b1e:	4602      	mov	r2, r0
 8006b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b22:	1ad3      	subs	r3, r2, r3
 8006b24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d901      	bls.n	8006b30 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	e11e      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <HAL_RCC_OscConfig+0x530>)
 8006b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b34:	f003 0302 	and.w	r3, r3, #2
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d0ee      	beq.n	8006b1a <HAL_RCC_OscConfig+0x4ee>
 8006b3c:	e018      	b.n	8006b70 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3e:	f7fb ffc1 	bl	8002ac4 <HAL_GetTick>
 8006b42:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b44:	e00e      	b.n	8006b64 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b46:	f7fb ffbd 	bl	8002ac4 <HAL_GetTick>
 8006b4a:	4602      	mov	r2, r0
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4e:	1ad3      	subs	r3, r2, r3
 8006b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d905      	bls.n	8006b64 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e108      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
 8006b5c:	58024400 	.word	0x58024400
 8006b60:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006b64:	4b84      	ldr	r3, [pc, #528]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b68:	f003 0302 	and.w	r3, r3, #2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1ea      	bne.n	8006b46 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80f9 	beq.w	8006d6c <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006b7a:	4b7f      	ldr	r3, [pc, #508]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b82:	2b18      	cmp	r3, #24
 8006b84:	f000 80b4 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	f040 8095 	bne.w	8006cbc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b92:	4b79      	ldr	r3, [pc, #484]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a78      	ldr	r2, [pc, #480]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006b98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b9e:	f7fb ff91 	bl	8002ac4 <HAL_GetTick>
 8006ba2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ba4:	e008      	b.n	8006bb8 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba6:	f7fb ff8d 	bl	8002ac4 <HAL_GetTick>
 8006baa:	4602      	mov	r2, r0
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	1ad3      	subs	r3, r2, r3
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d901      	bls.n	8006bb8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	e0da      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006bb8:	4b6f      	ldr	r3, [pc, #444]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1f0      	bne.n	8006ba6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc4:	4b6c      	ldr	r3, [pc, #432]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bc8:	4b6c      	ldr	r3, [pc, #432]	; (8006d7c <HAL_RCC_OscConfig+0x750>)
 8006bca:	4013      	ands	r3, r2
 8006bcc:	687a      	ldr	r2, [r7, #4]
 8006bce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006bd4:	0112      	lsls	r2, r2, #4
 8006bd6:	430a      	orrs	r2, r1
 8006bd8:	4967      	ldr	r1, [pc, #412]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	628b      	str	r3, [r1, #40]	; 0x28
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	3b01      	subs	r3, #1
 8006be4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bec:	3b01      	subs	r3, #1
 8006bee:	025b      	lsls	r3, r3, #9
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	431a      	orrs	r2, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	041b      	lsls	r3, r3, #16
 8006bfc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006c00:	431a      	orrs	r2, r3
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c06:	3b01      	subs	r3, #1
 8006c08:	061b      	lsls	r3, r3, #24
 8006c0a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006c0e:	495a      	ldr	r1, [pc, #360]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006c14:	4b58      	ldr	r3, [pc, #352]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c18:	4a57      	ldr	r2, [pc, #348]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c1a:	f023 0301 	bic.w	r3, r3, #1
 8006c1e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006c20:	4b55      	ldr	r3, [pc, #340]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c24:	4b56      	ldr	r3, [pc, #344]	; (8006d80 <HAL_RCC_OscConfig+0x754>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	687a      	ldr	r2, [r7, #4]
 8006c2a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006c2c:	00d2      	lsls	r2, r2, #3
 8006c2e:	4952      	ldr	r1, [pc, #328]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006c34:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c38:	f023 020c 	bic.w	r2, r3, #12
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c40:	494d      	ldr	r1, [pc, #308]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006c46:	4b4c      	ldr	r3, [pc, #304]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4a:	f023 0202 	bic.w	r2, r3, #2
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c52:	4949      	ldr	r1, [pc, #292]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c54:	4313      	orrs	r3, r2
 8006c56:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c58:	4b47      	ldr	r3, [pc, #284]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	4a46      	ldr	r2, [pc, #280]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c62:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c64:	4b44      	ldr	r3, [pc, #272]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c68:	4a43      	ldr	r2, [pc, #268]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c6e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006c70:	4b41      	ldr	r3, [pc, #260]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	4a40      	ldr	r2, [pc, #256]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c76:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006c7c:	4b3e      	ldr	r3, [pc, #248]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c80:	4a3d      	ldr	r2, [pc, #244]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c82:	f043 0301 	orr.w	r3, r3, #1
 8006c86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c88:	4b3b      	ldr	r3, [pc, #236]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	4a3a      	ldr	r2, [pc, #232]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c94:	f7fb ff16 	bl	8002ac4 <HAL_GetTick>
 8006c98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006c9a:	e008      	b.n	8006cae <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c9c:	f7fb ff12 	bl	8002ac4 <HAL_GetTick>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d901      	bls.n	8006cae <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006caa:	2303      	movs	r3, #3
 8006cac:	e05f      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006cae:	4b32      	ldr	r3, [pc, #200]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f0      	beq.n	8006c9c <HAL_RCC_OscConfig+0x670>
 8006cba:	e057      	b.n	8006d6c <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cbc:	4b2e      	ldr	r3, [pc, #184]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a2d      	ldr	r2, [pc, #180]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc8:	f7fb fefc 	bl	8002ac4 <HAL_GetTick>
 8006ccc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cd0:	f7fb fef8 	bl	8002ac4 <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e045      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006ce2:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d1f0      	bne.n	8006cd0 <HAL_RCC_OscConfig+0x6a4>
 8006cee:	e03d      	b.n	8006d6c <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006cf0:	4b21      	ldr	r3, [pc, #132]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006cf6:	4b20      	ldr	r3, [pc, #128]	; (8006d78 <HAL_RCC_OscConfig+0x74c>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d031      	beq.n	8006d68 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f003 0203 	and.w	r2, r3, #3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d12a      	bne.n	8006d68 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	091b      	lsrs	r3, r3, #4
 8006d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d122      	bne.n	8006d68 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d2c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d11a      	bne.n	8006d68 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	0a5b      	lsrs	r3, r3, #9
 8006d36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d3e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d111      	bne.n	8006d68 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	0c1b      	lsrs	r3, r3, #16
 8006d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d50:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d108      	bne.n	8006d68 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	0e1b      	lsrs	r3, r3, #24
 8006d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d62:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006d64:	429a      	cmp	r2, r3
 8006d66:	d001      	beq.n	8006d6c <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3730      	adds	r7, #48	; 0x30
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	58024400 	.word	0x58024400
 8006d7c:	fffffc0c 	.word	0xfffffc0c
 8006d80:	ffff0007 	.word	0xffff0007

08006d84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b086      	sub	sp, #24
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e19c      	b.n	80070d2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d98:	4b8a      	ldr	r3, [pc, #552]	; (8006fc4 <HAL_RCC_ClockConfig+0x240>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 030f 	and.w	r3, r3, #15
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d910      	bls.n	8006dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006da6:	4b87      	ldr	r3, [pc, #540]	; (8006fc4 <HAL_RCC_ClockConfig+0x240>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f023 020f 	bic.w	r2, r3, #15
 8006dae:	4985      	ldr	r1, [pc, #532]	; (8006fc4 <HAL_RCC_ClockConfig+0x240>)
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	4313      	orrs	r3, r2
 8006db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db6:	4b83      	ldr	r3, [pc, #524]	; (8006fc4 <HAL_RCC_ClockConfig+0x240>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f003 030f 	and.w	r3, r3, #15
 8006dbe:	683a      	ldr	r2, [r7, #0]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d001      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e184      	b.n	80070d2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0304 	and.w	r3, r3, #4
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d010      	beq.n	8006df6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	4b7b      	ldr	r3, [pc, #492]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006dda:	699b      	ldr	r3, [r3, #24]
 8006ddc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d908      	bls.n	8006df6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006de4:	4b78      	ldr	r3, [pc, #480]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006de6:	699b      	ldr	r3, [r3, #24]
 8006de8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	691b      	ldr	r3, [r3, #16]
 8006df0:	4975      	ldr	r1, [pc, #468]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006df2:	4313      	orrs	r3, r2
 8006df4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0308 	and.w	r3, r3, #8
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d010      	beq.n	8006e24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	695a      	ldr	r2, [r3, #20]
 8006e06:	4b70      	ldr	r3, [pc, #448]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e08:	69db      	ldr	r3, [r3, #28]
 8006e0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d908      	bls.n	8006e24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e12:	4b6d      	ldr	r3, [pc, #436]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e14:	69db      	ldr	r3, [r3, #28]
 8006e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	496a      	ldr	r1, [pc, #424]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e20:	4313      	orrs	r3, r2
 8006e22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 0310 	and.w	r3, r3, #16
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d010      	beq.n	8006e52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	699a      	ldr	r2, [r3, #24]
 8006e34:	4b64      	ldr	r3, [pc, #400]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d908      	bls.n	8006e52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006e40:	4b61      	ldr	r3, [pc, #388]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	495e      	ldr	r1, [pc, #376]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 0320 	and.w	r3, r3, #32
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d010      	beq.n	8006e80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	4b59      	ldr	r3, [pc, #356]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d908      	bls.n	8006e80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006e6e:	4b56      	ldr	r3, [pc, #344]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	4953      	ldr	r1, [pc, #332]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 0302 	and.w	r3, r3, #2
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d010      	beq.n	8006eae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	68da      	ldr	r2, [r3, #12]
 8006e90:	4b4d      	ldr	r3, [pc, #308]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e92:	699b      	ldr	r3, [r3, #24]
 8006e94:	f003 030f 	and.w	r3, r3, #15
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d908      	bls.n	8006eae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e9c:	4b4a      	ldr	r3, [pc, #296]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	f023 020f 	bic.w	r2, r3, #15
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	4947      	ldr	r1, [pc, #284]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f003 0301 	and.w	r3, r3, #1
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d055      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006eba:	4b43      	ldr	r3, [pc, #268]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006ebc:	699b      	ldr	r3, [r3, #24]
 8006ebe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	4940      	ldr	r1, [pc, #256]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	2b02      	cmp	r3, #2
 8006ed2:	d107      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006ed4:	4b3c      	ldr	r3, [pc, #240]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d121      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e0f6      	b.n	80070d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2b03      	cmp	r3, #3
 8006eea:	d107      	bne.n	8006efc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eec:	4b36      	ldr	r3, [pc, #216]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d115      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006ef8:	2301      	movs	r3, #1
 8006efa:	e0ea      	b.n	80070d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d107      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006f04:	4b30      	ldr	r3, [pc, #192]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d109      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e0de      	b.n	80070d2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006f14:	4b2c      	ldr	r3, [pc, #176]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0304 	and.w	r3, r3, #4
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	e0d6      	b.n	80070d2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f24:	4b28      	ldr	r3, [pc, #160]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006f26:	691b      	ldr	r3, [r3, #16]
 8006f28:	f023 0207 	bic.w	r2, r3, #7
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	4925      	ldr	r1, [pc, #148]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f36:	f7fb fdc5 	bl	8002ac4 <HAL_GetTick>
 8006f3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f3c:	e00a      	b.n	8006f54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f3e:	f7fb fdc1 	bl	8002ac4 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d901      	bls.n	8006f54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e0be      	b.n	80070d2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f54:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	00db      	lsls	r3, r3, #3
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d1eb      	bne.n	8006f3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d010      	beq.n	8006f94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f003 030f 	and.w	r3, r3, #15
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d208      	bcs.n	8006f94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f82:	4b11      	ldr	r3, [pc, #68]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f023 020f 	bic.w	r2, r3, #15
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	490e      	ldr	r1, [pc, #56]	; (8006fc8 <HAL_RCC_ClockConfig+0x244>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006f94:	4b0b      	ldr	r3, [pc, #44]	; (8006fc4 <HAL_RCC_ClockConfig+0x240>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d214      	bcs.n	8006fcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fa2:	4b08      	ldr	r3, [pc, #32]	; (8006fc4 <HAL_RCC_ClockConfig+0x240>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f023 020f 	bic.w	r2, r3, #15
 8006faa:	4906      	ldr	r1, [pc, #24]	; (8006fc4 <HAL_RCC_ClockConfig+0x240>)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fb2:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <HAL_RCC_ClockConfig+0x240>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f003 030f 	and.w	r3, r3, #15
 8006fba:	683a      	ldr	r2, [r7, #0]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d005      	beq.n	8006fcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e086      	b.n	80070d2 <HAL_RCC_ClockConfig+0x34e>
 8006fc4:	52002000 	.word	0x52002000
 8006fc8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d010      	beq.n	8006ffa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	4b3f      	ldr	r3, [pc, #252]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d208      	bcs.n	8006ffa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006fe8:	4b3c      	ldr	r3, [pc, #240]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	4939      	ldr	r1, [pc, #228]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0308 	and.w	r3, r3, #8
 8007002:	2b00      	cmp	r3, #0
 8007004:	d010      	beq.n	8007028 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695a      	ldr	r2, [r3, #20]
 800700a:	4b34      	ldr	r3, [pc, #208]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 800700c:	69db      	ldr	r3, [r3, #28]
 800700e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007012:	429a      	cmp	r2, r3
 8007014:	d208      	bcs.n	8007028 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007016:	4b31      	ldr	r3, [pc, #196]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	492e      	ldr	r1, [pc, #184]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8007024:	4313      	orrs	r3, r2
 8007026:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 0310 	and.w	r3, r3, #16
 8007030:	2b00      	cmp	r3, #0
 8007032:	d010      	beq.n	8007056 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	699a      	ldr	r2, [r3, #24]
 8007038:	4b28      	ldr	r3, [pc, #160]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007040:	429a      	cmp	r2, r3
 8007042:	d208      	bcs.n	8007056 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007044:	4b25      	ldr	r3, [pc, #148]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8007046:	69db      	ldr	r3, [r3, #28]
 8007048:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	4922      	ldr	r1, [pc, #136]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8007052:	4313      	orrs	r3, r2
 8007054:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f003 0320 	and.w	r3, r3, #32
 800705e:	2b00      	cmp	r3, #0
 8007060:	d010      	beq.n	8007084 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69da      	ldr	r2, [r3, #28]
 8007066:	4b1d      	ldr	r3, [pc, #116]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8007068:	6a1b      	ldr	r3, [r3, #32]
 800706a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800706e:	429a      	cmp	r2, r3
 8007070:	d208      	bcs.n	8007084 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007072:	4b1a      	ldr	r3, [pc, #104]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8007074:	6a1b      	ldr	r3, [r3, #32]
 8007076:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	69db      	ldr	r3, [r3, #28]
 800707e:	4917      	ldr	r1, [pc, #92]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 8007080:	4313      	orrs	r3, r2
 8007082:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007084:	f000 f834 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 8007088:	4602      	mov	r2, r0
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 800708c:	699b      	ldr	r3, [r3, #24]
 800708e:	0a1b      	lsrs	r3, r3, #8
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	4912      	ldr	r1, [pc, #72]	; (80070e0 <HAL_RCC_ClockConfig+0x35c>)
 8007096:	5ccb      	ldrb	r3, [r1, r3]
 8007098:	f003 031f 	and.w	r3, r3, #31
 800709c:	fa22 f303 	lsr.w	r3, r2, r3
 80070a0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80070a2:	4b0e      	ldr	r3, [pc, #56]	; (80070dc <HAL_RCC_ClockConfig+0x358>)
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	f003 030f 	and.w	r3, r3, #15
 80070aa:	4a0d      	ldr	r2, [pc, #52]	; (80070e0 <HAL_RCC_ClockConfig+0x35c>)
 80070ac:	5cd3      	ldrb	r3, [r2, r3]
 80070ae:	f003 031f 	and.w	r3, r3, #31
 80070b2:	693a      	ldr	r2, [r7, #16]
 80070b4:	fa22 f303 	lsr.w	r3, r2, r3
 80070b8:	4a0a      	ldr	r2, [pc, #40]	; (80070e4 <HAL_RCC_ClockConfig+0x360>)
 80070ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80070bc:	4a0a      	ldr	r2, [pc, #40]	; (80070e8 <HAL_RCC_ClockConfig+0x364>)
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80070c2:	4b0a      	ldr	r3, [pc, #40]	; (80070ec <HAL_RCC_ClockConfig+0x368>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fa fd4e 	bl	8001b68 <HAL_InitTick>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80070d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	58024400 	.word	0x58024400
 80070e0:	0801f1d4 	.word	0x0801f1d4
 80070e4:	2400000c 	.word	0x2400000c
 80070e8:	24000008 	.word	0x24000008
 80070ec:	24000010 	.word	0x24000010

080070f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b089      	sub	sp, #36	; 0x24
 80070f4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070f6:	4bb3      	ldr	r3, [pc, #716]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80070fe:	2b18      	cmp	r3, #24
 8007100:	f200 8155 	bhi.w	80073ae <HAL_RCC_GetSysClockFreq+0x2be>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007171 	.word	0x08007171
 8007110:	080073af 	.word	0x080073af
 8007114:	080073af 	.word	0x080073af
 8007118:	080073af 	.word	0x080073af
 800711c:	080073af 	.word	0x080073af
 8007120:	080073af 	.word	0x080073af
 8007124:	080073af 	.word	0x080073af
 8007128:	080073af 	.word	0x080073af
 800712c:	08007197 	.word	0x08007197
 8007130:	080073af 	.word	0x080073af
 8007134:	080073af 	.word	0x080073af
 8007138:	080073af 	.word	0x080073af
 800713c:	080073af 	.word	0x080073af
 8007140:	080073af 	.word	0x080073af
 8007144:	080073af 	.word	0x080073af
 8007148:	080073af 	.word	0x080073af
 800714c:	0800719d 	.word	0x0800719d
 8007150:	080073af 	.word	0x080073af
 8007154:	080073af 	.word	0x080073af
 8007158:	080073af 	.word	0x080073af
 800715c:	080073af 	.word	0x080073af
 8007160:	080073af 	.word	0x080073af
 8007164:	080073af 	.word	0x080073af
 8007168:	080073af 	.word	0x080073af
 800716c:	080071a3 	.word	0x080071a3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007170:	4b94      	ldr	r3, [pc, #592]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d009      	beq.n	8007190 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800717c:	4b91      	ldr	r3, [pc, #580]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	08db      	lsrs	r3, r3, #3
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	4a90      	ldr	r2, [pc, #576]	; (80073c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007188:	fa22 f303 	lsr.w	r3, r2, r3
 800718c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800718e:	e111      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007190:	4b8d      	ldr	r3, [pc, #564]	; (80073c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007192:	61bb      	str	r3, [r7, #24]
    break;
 8007194:	e10e      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007196:	4b8d      	ldr	r3, [pc, #564]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007198:	61bb      	str	r3, [r7, #24]
    break;
 800719a:	e10b      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800719c:	4b8c      	ldr	r3, [pc, #560]	; (80073d0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800719e:	61bb      	str	r3, [r7, #24]
    break;
 80071a0:	e108      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80071a2:	4b88      	ldr	r3, [pc, #544]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80071ac:	4b85      	ldr	r3, [pc, #532]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	091b      	lsrs	r3, r3, #4
 80071b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071b6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80071b8:	4b82      	ldr	r3, [pc, #520]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80071c2:	4b80      	ldr	r3, [pc, #512]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c6:	08db      	lsrs	r3, r3, #3
 80071c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	fb02 f303 	mul.w	r3, r2, r3
 80071d2:	ee07 3a90 	vmov	s15, r3
 80071d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071da:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f000 80e1 	beq.w	80073a8 <HAL_RCC_GetSysClockFreq+0x2b8>
 80071e6:	697b      	ldr	r3, [r7, #20]
 80071e8:	2b02      	cmp	r3, #2
 80071ea:	f000 8083 	beq.w	80072f4 <HAL_RCC_GetSysClockFreq+0x204>
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	2b02      	cmp	r3, #2
 80071f2:	f200 80a1 	bhi.w	8007338 <HAL_RCC_GetSysClockFreq+0x248>
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_RCC_GetSysClockFreq+0x114>
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d056      	beq.n	80072b0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007202:	e099      	b.n	8007338 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007204:	4b6f      	ldr	r3, [pc, #444]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f003 0320 	and.w	r3, r3, #32
 800720c:	2b00      	cmp	r3, #0
 800720e:	d02d      	beq.n	800726c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007210:	4b6c      	ldr	r3, [pc, #432]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	08db      	lsrs	r3, r3, #3
 8007216:	f003 0303 	and.w	r3, r3, #3
 800721a:	4a6b      	ldr	r2, [pc, #428]	; (80073c8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800721c:	fa22 f303 	lsr.w	r3, r2, r3
 8007220:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	ee07 3a90 	vmov	s15, r3
 8007228:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	ee07 3a90 	vmov	s15, r3
 8007232:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007236:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800723a:	4b62      	ldr	r3, [pc, #392]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800723c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007242:	ee07 3a90 	vmov	s15, r3
 8007246:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800724a:	ed97 6a02 	vldr	s12, [r7, #8]
 800724e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80073d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007252:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007256:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800725a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800725e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007266:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800726a:	e087      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	ee07 3a90 	vmov	s15, r3
 8007272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007276:	eddf 6a58 	vldr	s13, [pc, #352]	; 80073d8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800727a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800727e:	4b51      	ldr	r3, [pc, #324]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007286:	ee07 3a90 	vmov	s15, r3
 800728a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800728e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007292:	eddf 5a50 	vldr	s11, [pc, #320]	; 80073d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800729a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800729e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072ae:	e065      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	ee07 3a90 	vmov	s15, r3
 80072b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072ba:	eddf 6a48 	vldr	s13, [pc, #288]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2ec>
 80072be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80072c2:	4b40      	ldr	r3, [pc, #256]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072ca:	ee07 3a90 	vmov	s15, r3
 80072ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80072d6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80073d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80072da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80072ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072f2:	e043      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	eddf 6a38 	vldr	s13, [pc, #224]	; 80073e0 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007306:	4b2f      	ldr	r3, [pc, #188]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007316:	ed97 6a02 	vldr	s12, [r7, #8]
 800731a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80073d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800731e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007326:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800732a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800732e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007332:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007336:	e021      	b.n	800737c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007342:	eddf 6a26 	vldr	s13, [pc, #152]	; 80073dc <HAL_RCC_GetSysClockFreq+0x2ec>
 8007346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800734a:	4b1e      	ldr	r3, [pc, #120]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007352:	ee07 3a90 	vmov	s15, r3
 8007356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800735a:	ed97 6a02 	vldr	s12, [r7, #8]
 800735e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80073d4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800736a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800736e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007376:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800737a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800737c:	4b11      	ldr	r3, [pc, #68]	; (80073c4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	0a5b      	lsrs	r3, r3, #9
 8007382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007386:	3301      	adds	r3, #1
 8007388:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	ee07 3a90 	vmov	s15, r3
 8007390:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007394:	edd7 6a07 	vldr	s13, [r7, #28]
 8007398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800739c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073a0:	ee17 3a90 	vmov	r3, s15
 80073a4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80073a6:	e005      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	61bb      	str	r3, [r7, #24]
    break;
 80073ac:	e002      	b.n	80073b4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80073ae:	4b07      	ldr	r3, [pc, #28]	; (80073cc <HAL_RCC_GetSysClockFreq+0x2dc>)
 80073b0:	61bb      	str	r3, [r7, #24]
    break;
 80073b2:	bf00      	nop
  }

  return sysclockfreq;
 80073b4:	69bb      	ldr	r3, [r7, #24]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3724      	adds	r7, #36	; 0x24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	58024400 	.word	0x58024400
 80073c8:	03d09000 	.word	0x03d09000
 80073cc:	003d0900 	.word	0x003d0900
 80073d0:	007a1200 	.word	0x007a1200
 80073d4:	46000000 	.word	0x46000000
 80073d8:	4c742400 	.word	0x4c742400
 80073dc:	4a742400 	.word	0x4a742400
 80073e0:	4af42400 	.word	0x4af42400

080073e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80073ea:	f7ff fe81 	bl	80070f0 <HAL_RCC_GetSysClockFreq>
 80073ee:	4602      	mov	r2, r0
 80073f0:	4b10      	ldr	r3, [pc, #64]	; (8007434 <HAL_RCC_GetHCLKFreq+0x50>)
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	0a1b      	lsrs	r3, r3, #8
 80073f6:	f003 030f 	and.w	r3, r3, #15
 80073fa:	490f      	ldr	r1, [pc, #60]	; (8007438 <HAL_RCC_GetHCLKFreq+0x54>)
 80073fc:	5ccb      	ldrb	r3, [r1, r3]
 80073fe:	f003 031f 	and.w	r3, r3, #31
 8007402:	fa22 f303 	lsr.w	r3, r2, r3
 8007406:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007408:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <HAL_RCC_GetHCLKFreq+0x50>)
 800740a:	699b      	ldr	r3, [r3, #24]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	4a09      	ldr	r2, [pc, #36]	; (8007438 <HAL_RCC_GetHCLKFreq+0x54>)
 8007412:	5cd3      	ldrb	r3, [r2, r3]
 8007414:	f003 031f 	and.w	r3, r3, #31
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	fa22 f303 	lsr.w	r3, r2, r3
 800741e:	4a07      	ldr	r2, [pc, #28]	; (800743c <HAL_RCC_GetHCLKFreq+0x58>)
 8007420:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007422:	4a07      	ldr	r2, [pc, #28]	; (8007440 <HAL_RCC_GetHCLKFreq+0x5c>)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007428:	4b04      	ldr	r3, [pc, #16]	; (800743c <HAL_RCC_GetHCLKFreq+0x58>)
 800742a:	681b      	ldr	r3, [r3, #0]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}
 8007434:	58024400 	.word	0x58024400
 8007438:	0801f1d4 	.word	0x0801f1d4
 800743c:	2400000c 	.word	0x2400000c
 8007440:	24000008 	.word	0x24000008

08007444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007448:	f7ff ffcc 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 800744c:	4602      	mov	r2, r0
 800744e:	4b06      	ldr	r3, [pc, #24]	; (8007468 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007450:	69db      	ldr	r3, [r3, #28]
 8007452:	091b      	lsrs	r3, r3, #4
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	4904      	ldr	r1, [pc, #16]	; (800746c <HAL_RCC_GetPCLK1Freq+0x28>)
 800745a:	5ccb      	ldrb	r3, [r1, r3]
 800745c:	f003 031f 	and.w	r3, r3, #31
 8007460:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007464:	4618      	mov	r0, r3
 8007466:	bd80      	pop	{r7, pc}
 8007468:	58024400 	.word	0x58024400
 800746c:	0801f1d4 	.word	0x0801f1d4

08007470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007474:	f7ff ffb6 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 8007478:	4602      	mov	r2, r0
 800747a:	4b06      	ldr	r3, [pc, #24]	; (8007494 <HAL_RCC_GetPCLK2Freq+0x24>)
 800747c:	69db      	ldr	r3, [r3, #28]
 800747e:	0a1b      	lsrs	r3, r3, #8
 8007480:	f003 0307 	and.w	r3, r3, #7
 8007484:	4904      	ldr	r1, [pc, #16]	; (8007498 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007486:	5ccb      	ldrb	r3, [r1, r3]
 8007488:	f003 031f 	and.w	r3, r3, #31
 800748c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007490:	4618      	mov	r0, r3
 8007492:	bd80      	pop	{r7, pc}
 8007494:	58024400 	.word	0x58024400
 8007498:	0801f1d4 	.word	0x0801f1d4

0800749c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	223f      	movs	r2, #63	; 0x3f
 80074aa:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80074ac:	4b1a      	ldr	r3, [pc, #104]	; (8007518 <HAL_RCC_GetClockConfig+0x7c>)
 80074ae:	691b      	ldr	r3, [r3, #16]
 80074b0:	f003 0207 	and.w	r2, r3, #7
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <HAL_RCC_GetClockConfig+0x7c>)
 80074ba:	699b      	ldr	r3, [r3, #24]
 80074bc:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80074c4:	4b14      	ldr	r3, [pc, #80]	; (8007518 <HAL_RCC_GetClockConfig+0x7c>)
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	f003 020f 	and.w	r2, r3, #15
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80074d0:	4b11      	ldr	r3, [pc, #68]	; (8007518 <HAL_RCC_GetClockConfig+0x7c>)
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <HAL_RCC_GetClockConfig+0x7c>)
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80074e8:	4b0b      	ldr	r3, [pc, #44]	; (8007518 <HAL_RCC_GetClockConfig+0x7c>)
 80074ea:	69db      	ldr	r3, [r3, #28]
 80074ec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80074f4:	4b08      	ldr	r3, [pc, #32]	; (8007518 <HAL_RCC_GetClockConfig+0x7c>)
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <HAL_RCC_GetClockConfig+0x80>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 020f 	and.w	r2, r3, #15
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	601a      	str	r2, [r3, #0]
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr
 8007518:	58024400 	.word	0x58024400
 800751c:	52002000 	.word	0x52002000

08007520 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b086      	sub	sp, #24
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007528:	2300      	movs	r3, #0
 800752a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800752c:	2300      	movs	r3, #0
 800752e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d03f      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007540:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007544:	d02a      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007546:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800754a:	d824      	bhi.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800754c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007550:	d018      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007556:	d81e      	bhi.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800755c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007560:	d007      	beq.n	8007572 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007562:	e018      	b.n	8007596 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007564:	4bab      	ldr	r3, [pc, #684]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007568:	4aaa      	ldr	r2, [pc, #680]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800756a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800756e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007570:	e015      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3304      	adds	r3, #4
 8007576:	2102      	movs	r1, #2
 8007578:	4618      	mov	r0, r3
 800757a:	f001 f989 	bl	8008890 <RCCEx_PLL2_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007582:	e00c      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	3324      	adds	r3, #36	; 0x24
 8007588:	2102      	movs	r1, #2
 800758a:	4618      	mov	r0, r3
 800758c:	f001 fa32 	bl	80089f4 <RCCEx_PLL3_Config>
 8007590:	4603      	mov	r3, r0
 8007592:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007594:	e003      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	75fb      	strb	r3, [r7, #23]
      break;
 800759a:	e000      	b.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800759c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800759e:	7dfb      	ldrb	r3, [r7, #23]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d109      	bne.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80075a4:	4b9b      	ldr	r3, [pc, #620]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075b0:	4998      	ldr	r1, [pc, #608]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075b2:	4313      	orrs	r3, r2
 80075b4:	650b      	str	r3, [r1, #80]	; 0x50
 80075b6:	e001      	b.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075b8:	7dfb      	ldrb	r3, [r7, #23]
 80075ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d03d      	beq.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075cc:	2b04      	cmp	r3, #4
 80075ce:	d826      	bhi.n	800761e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80075d0:	a201      	add	r2, pc, #4	; (adr r2, 80075d8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80075d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075d6:	bf00      	nop
 80075d8:	080075ed 	.word	0x080075ed
 80075dc:	080075fb 	.word	0x080075fb
 80075e0:	0800760d 	.word	0x0800760d
 80075e4:	08007625 	.word	0x08007625
 80075e8:	08007625 	.word	0x08007625
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ec:	4b89      	ldr	r3, [pc, #548]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f0:	4a88      	ldr	r2, [pc, #544]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075f8:	e015      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	3304      	adds	r3, #4
 80075fe:	2100      	movs	r1, #0
 8007600:	4618      	mov	r0, r3
 8007602:	f001 f945 	bl	8008890 <RCCEx_PLL2_Config>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800760a:	e00c      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	3324      	adds	r3, #36	; 0x24
 8007610:	2100      	movs	r1, #0
 8007612:	4618      	mov	r0, r3
 8007614:	f001 f9ee 	bl	80089f4 <RCCEx_PLL3_Config>
 8007618:	4603      	mov	r3, r0
 800761a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800761c:	e003      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	75fb      	strb	r3, [r7, #23]
      break;
 8007622:	e000      	b.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007626:	7dfb      	ldrb	r3, [r7, #23]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d109      	bne.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800762c:	4b79      	ldr	r3, [pc, #484]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800762e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007630:	f023 0207 	bic.w	r2, r3, #7
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	4976      	ldr	r1, [pc, #472]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800763a:	4313      	orrs	r3, r2
 800763c:	650b      	str	r3, [r1, #80]	; 0x50
 800763e:	e001      	b.n	8007644 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007640:	7dfb      	ldrb	r3, [r7, #23]
 8007642:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800764c:	2b00      	cmp	r3, #0
 800764e:	d051      	beq.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007656:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800765a:	d036      	beq.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800765c:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007660:	d830      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007662:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007666:	d032      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800766c:	d82a      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800766e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007672:	d02e      	beq.n	80076d2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007674:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007678:	d824      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800767a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800767e:	d018      	beq.n	80076b2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007680:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007684:	d81e      	bhi.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007686:	2b00      	cmp	r3, #0
 8007688:	d003      	beq.n	8007692 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800768a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800768e:	d007      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007690:	e018      	b.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007692:	4b60      	ldr	r3, [pc, #384]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007696:	4a5f      	ldr	r2, [pc, #380]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800769c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800769e:	e019      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	3304      	adds	r3, #4
 80076a4:	2100      	movs	r1, #0
 80076a6:	4618      	mov	r0, r3
 80076a8:	f001 f8f2 	bl	8008890 <RCCEx_PLL2_Config>
 80076ac:	4603      	mov	r3, r0
 80076ae:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80076b0:	e010      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	3324      	adds	r3, #36	; 0x24
 80076b6:	2100      	movs	r1, #0
 80076b8:	4618      	mov	r0, r3
 80076ba:	f001 f99b 	bl	80089f4 <RCCEx_PLL3_Config>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076c2:	e007      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	75fb      	strb	r3, [r7, #23]
      break;
 80076c8:	e004      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80076ca:	bf00      	nop
 80076cc:	e002      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80076ce:	bf00      	nop
 80076d0:	e000      	b.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 80076d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076d4:	7dfb      	ldrb	r3, [r7, #23]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80076da:	4b4e      	ldr	r3, [pc, #312]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80076e8:	494a      	ldr	r1, [pc, #296]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	658b      	str	r3, [r1, #88]	; 0x58
 80076ee:	e001      	b.n	80076f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076f0:	7dfb      	ldrb	r3, [r7, #23]
 80076f2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d051      	beq.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007706:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800770a:	d036      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800770c:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007710:	d830      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007712:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007716:	d032      	beq.n	800777e <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800771c:	d82a      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800771e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007722:	d02e      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007724:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007728:	d824      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x254>
 800772a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800772e:	d018      	beq.n	8007762 <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007730:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007734:	d81e      	bhi.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_RCCEx_PeriphCLKConfig+0x222>
 800773a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800773e:	d007      	beq.n	8007750 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007740:	e018      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007742:	4b34      	ldr	r3, [pc, #208]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007746:	4a33      	ldr	r2, [pc, #204]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007748:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800774c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800774e:	e019      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	3304      	adds	r3, #4
 8007754:	2100      	movs	r1, #0
 8007756:	4618      	mov	r0, r3
 8007758:	f001 f89a 	bl	8008890 <RCCEx_PLL2_Config>
 800775c:	4603      	mov	r3, r0
 800775e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007760:	e010      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	3324      	adds	r3, #36	; 0x24
 8007766:	2100      	movs	r1, #0
 8007768:	4618      	mov	r0, r3
 800776a:	f001 f943 	bl	80089f4 <RCCEx_PLL3_Config>
 800776e:	4603      	mov	r3, r0
 8007770:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007772:	e007      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	75fb      	strb	r3, [r7, #23]
      break;
 8007778:	e004      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800777a:	bf00      	nop
 800777c:	e002      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800777e:	bf00      	nop
 8007780:	e000      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007782:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007784:	7dfb      	ldrb	r3, [r7, #23]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10a      	bne.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800778a:	4b22      	ldr	r3, [pc, #136]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800778c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007798:	491e      	ldr	r1, [pc, #120]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800779a:	4313      	orrs	r3, r2
 800779c:	658b      	str	r3, [r1, #88]	; 0x58
 800779e:	e001      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077a0:	7dfb      	ldrb	r3, [r7, #23]
 80077a2:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d035      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80077b4:	2b30      	cmp	r3, #48	; 0x30
 80077b6:	d01c      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80077b8:	2b30      	cmp	r3, #48	; 0x30
 80077ba:	d817      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80077bc:	2b20      	cmp	r3, #32
 80077be:	d00c      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 80077c0:	2b20      	cmp	r3, #32
 80077c2:	d813      	bhi.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d016      	beq.n	80077f6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 80077c8:	2b10      	cmp	r3, #16
 80077ca:	d10f      	bne.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077cc:	4b11      	ldr	r3, [pc, #68]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d0:	4a10      	ldr	r2, [pc, #64]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80077d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077d6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80077d8:	e00e      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	3304      	adds	r3, #4
 80077de:	2102      	movs	r1, #2
 80077e0:	4618      	mov	r0, r3
 80077e2:	f001 f855 	bl	8008890 <RCCEx_PLL2_Config>
 80077e6:	4603      	mov	r3, r0
 80077e8:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80077ea:	e005      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80077ec:	2301      	movs	r3, #1
 80077ee:	75fb      	strb	r3, [r7, #23]
      break;
 80077f0:	e002      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80077f2:	bf00      	nop
 80077f4:	e000      	b.n	80077f8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80077f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d10c      	bne.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80077fe:	4b05      	ldr	r3, [pc, #20]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007802:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	4902      	ldr	r1, [pc, #8]	; (8007814 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800780c:	4313      	orrs	r3, r2
 800780e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007810:	e004      	b.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007812:	bf00      	nop
 8007814:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007818:	7dfb      	ldrb	r3, [r7, #23]
 800781a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d047      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800782c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007830:	d030      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x374>
 8007832:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007836:	d82a      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007838:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800783c:	d02c      	beq.n	8007898 <HAL_RCCEx_PeriphCLKConfig+0x378>
 800783e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007842:	d824      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007848:	d018      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800784a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800784e:	d81e      	bhi.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007858:	d007      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800785a:	e018      	b.n	800788e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800785c:	4bac      	ldr	r3, [pc, #688]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800785e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007860:	4aab      	ldr	r2, [pc, #684]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007866:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007868:	e017      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	3304      	adds	r3, #4
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f001 f80d 	bl	8008890 <RCCEx_PLL2_Config>
 8007876:	4603      	mov	r3, r0
 8007878:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800787a:	e00e      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	3324      	adds	r3, #36	; 0x24
 8007880:	2100      	movs	r1, #0
 8007882:	4618      	mov	r0, r3
 8007884:	f001 f8b6 	bl	80089f4 <RCCEx_PLL3_Config>
 8007888:	4603      	mov	r3, r0
 800788a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800788c:	e005      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	75fb      	strb	r3, [r7, #23]
      break;
 8007892:	e002      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007894:	bf00      	nop
 8007896:	e000      	b.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007898:	bf00      	nop
    }

    if(ret == HAL_OK)
 800789a:	7dfb      	ldrb	r3, [r7, #23]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d109      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80078a0:	4b9b      	ldr	r3, [pc, #620]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ac:	4998      	ldr	r1, [pc, #608]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	650b      	str	r3, [r1, #80]	; 0x50
 80078b2:	e001      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	7dfb      	ldrb	r3, [r7, #23]
 80078b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d049      	beq.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078cc:	d02e      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x40c>
 80078ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078d2:	d828      	bhi.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80078d4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078d8:	d02a      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0x410>
 80078da:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80078de:	d822      	bhi.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80078e0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078e4:	d026      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80078e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80078ea:	d81c      	bhi.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80078ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f0:	d010      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80078f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078f6:	d816      	bhi.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d01d      	beq.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80078fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007900:	d111      	bne.n	8007926 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	3304      	adds	r3, #4
 8007906:	2101      	movs	r1, #1
 8007908:	4618      	mov	r0, r3
 800790a:	f000 ffc1 	bl	8008890 <RCCEx_PLL2_Config>
 800790e:	4603      	mov	r3, r0
 8007910:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007912:	e012      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3324      	adds	r3, #36	; 0x24
 8007918:	2101      	movs	r1, #1
 800791a:	4618      	mov	r0, r3
 800791c:	f001 f86a 	bl	80089f4 <RCCEx_PLL3_Config>
 8007920:	4603      	mov	r3, r0
 8007922:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007924:	e009      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	75fb      	strb	r3, [r7, #23]
      break;
 800792a:	e006      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800792c:	bf00      	nop
 800792e:	e004      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007930:	bf00      	nop
 8007932:	e002      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007934:	bf00      	nop
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8007938:	bf00      	nop
    }

    if(ret == HAL_OK)
 800793a:	7dfb      	ldrb	r3, [r7, #23]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d109      	bne.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007940:	4b73      	ldr	r3, [pc, #460]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007944:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794c:	4970      	ldr	r1, [pc, #448]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800794e:	4313      	orrs	r3, r2
 8007950:	650b      	str	r3, [r1, #80]	; 0x50
 8007952:	e001      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007954:	7dfb      	ldrb	r3, [r7, #23]
 8007956:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007960:	2b00      	cmp	r3, #0
 8007962:	d04b      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800796a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800796e:	d02e      	beq.n	80079ce <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8007970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007974:	d828      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797a:	d02a      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 800797c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007980:	d822      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007982:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007986:	d026      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8007988:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800798c:	d81c      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800798e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007992:	d010      	beq.n	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007998:	d816      	bhi.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800799a:	2b00      	cmp	r3, #0
 800799c:	d01d      	beq.n	80079da <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800799e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80079a2:	d111      	bne.n	80079c8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3304      	adds	r3, #4
 80079a8:	2101      	movs	r1, #1
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 ff70 	bl	8008890 <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079b4:	e012      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	3324      	adds	r3, #36	; 0x24
 80079ba:	2101      	movs	r1, #1
 80079bc:	4618      	mov	r0, r3
 80079be:	f001 f819 	bl	80089f4 <RCCEx_PLL3_Config>
 80079c2:	4603      	mov	r3, r0
 80079c4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80079c6:	e009      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80079c8:	2301      	movs	r3, #1
 80079ca:	75fb      	strb	r3, [r7, #23]
      break;
 80079cc:	e006      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80079ce:	bf00      	nop
 80079d0:	e004      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80079d2:	bf00      	nop
 80079d4:	e002      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80079d6:	bf00      	nop
 80079d8:	e000      	b.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 80079da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10a      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80079e2:	4b4b      	ldr	r3, [pc, #300]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80079e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079f0:	4947      	ldr	r1, [pc, #284]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80079f2:	4313      	orrs	r3, r2
 80079f4:	658b      	str	r3, [r1, #88]	; 0x58
 80079f6:	e001      	b.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f8:	7dfb      	ldrb	r3, [r7, #23]
 80079fa:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d02f      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a10:	d00e      	beq.n	8007a30 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007a12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007a16:	d814      	bhi.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d015      	beq.n	8007a48 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8007a1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a20:	d10f      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a22:	4b3b      	ldr	r3, [pc, #236]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a26:	4a3a      	ldr	r2, [pc, #232]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a2e:	e00c      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	3304      	adds	r3, #4
 8007a34:	2101      	movs	r1, #1
 8007a36:	4618      	mov	r0, r3
 8007a38:	f000 ff2a 	bl	8008890 <RCCEx_PLL2_Config>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007a40:	e003      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	75fb      	strb	r3, [r7, #23]
      break;
 8007a46:	e000      	b.n	8007a4a <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8007a48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d109      	bne.n	8007a64 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007a50:	4b2f      	ldr	r3, [pc, #188]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a54:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a5c:	492c      	ldr	r1, [pc, #176]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	650b      	str	r3, [r1, #80]	; 0x50
 8007a62:	e001      	b.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a64:	7dfb      	ldrb	r3, [r7, #23]
 8007a66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d032      	beq.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d81b      	bhi.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007a7c:	a201      	add	r2, pc, #4	; (adr r2, 8007a84 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a82:	bf00      	nop
 8007a84:	08007abb 	.word	0x08007abb
 8007a88:	08007a95 	.word	0x08007a95
 8007a8c:	08007aa3 	.word	0x08007aa3
 8007a90:	08007abb 	.word	0x08007abb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a94:	4b1e      	ldr	r3, [pc, #120]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a98:	4a1d      	ldr	r2, [pc, #116]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007a9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007aa0:	e00c      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	3304      	adds	r3, #4
 8007aa6:	2102      	movs	r1, #2
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f000 fef1 	bl	8008890 <RCCEx_PLL2_Config>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007ab2:	e003      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
      break;
 8007ab8:	e000      	b.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8007aba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d109      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ac2:	4b13      	ldr	r3, [pc, #76]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ac6:	f023 0203 	bic.w	r2, r3, #3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ace:	4910      	ldr	r1, [pc, #64]	; (8007b10 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ad4:	e001      	b.n	8007ada <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	f000 808a 	beq.w	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ae8:	4b0a      	ldr	r3, [pc, #40]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a09      	ldr	r2, [pc, #36]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007af4:	f7fa ffe6 	bl	8002ac4 <HAL_GetTick>
 8007af8:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007afa:	e00d      	b.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007afc:	f7fa ffe2 	bl	8002ac4 <HAL_GetTick>
 8007b00:	4602      	mov	r2, r0
 8007b02:	693b      	ldr	r3, [r7, #16]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	2b64      	cmp	r3, #100	; 0x64
 8007b08:	d906      	bls.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	75fb      	strb	r3, [r7, #23]
        break;
 8007b0e:	e009      	b.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007b10:	58024400 	.word	0x58024400
 8007b14:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007b18:	4bb9      	ldr	r3, [pc, #740]	; (8007e00 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d0eb      	beq.n	8007afc <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 8007b24:	7dfb      	ldrb	r3, [r7, #23]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d166      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007b2a:	4bb6      	ldr	r3, [pc, #728]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b2c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b34:	4053      	eors	r3, r2
 8007b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d013      	beq.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b3e:	4bb1      	ldr	r3, [pc, #708]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b46:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b48:	4bae      	ldr	r3, [pc, #696]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	4aad      	ldr	r2, [pc, #692]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b52:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b54:	4bab      	ldr	r3, [pc, #684]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b58:	4aaa      	ldr	r2, [pc, #680]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b5e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b60:	4aa8      	ldr	r2, [pc, #672]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b70:	d115      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b72:	f7fa ffa7 	bl	8002ac4 <HAL_GetTick>
 8007b76:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b78:	e00b      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b7a:	f7fa ffa3 	bl	8002ac4 <HAL_GetTick>
 8007b7e:	4602      	mov	r2, r0
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	1ad3      	subs	r3, r2, r3
 8007b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d902      	bls.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	75fb      	strb	r3, [r7, #23]
            break;
 8007b90:	e005      	b.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b92:	4b9c      	ldr	r3, [pc, #624]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0ed      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007b9e:	7dfb      	ldrb	r3, [r7, #23]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d126      	bne.n	8007bf2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bb2:	d10d      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007bb4:	4b93      	ldr	r3, [pc, #588]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007bc2:	0919      	lsrs	r1, r3, #4
 8007bc4:	4b90      	ldr	r3, [pc, #576]	; (8007e08 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007bc6:	400b      	ands	r3, r1
 8007bc8:	498e      	ldr	r1, [pc, #568]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	610b      	str	r3, [r1, #16]
 8007bce:	e005      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007bd0:	4b8c      	ldr	r3, [pc, #560]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bd2:	691b      	ldr	r3, [r3, #16]
 8007bd4:	4a8b      	ldr	r2, [pc, #556]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bd6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007bda:	6113      	str	r3, [r2, #16]
 8007bdc:	4b89      	ldr	r3, [pc, #548]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bea:	4986      	ldr	r1, [pc, #536]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bec:	4313      	orrs	r3, r2
 8007bee:	670b      	str	r3, [r1, #112]	; 0x70
 8007bf0:	e004      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	75bb      	strb	r3, [r7, #22]
 8007bf6:	e001      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d07e      	beq.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c0c:	2b28      	cmp	r3, #40	; 0x28
 8007c0e:	d867      	bhi.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007c10:	a201      	add	r2, pc, #4	; (adr r2, 8007c18 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c16:	bf00      	nop
 8007c18:	08007ce7 	.word	0x08007ce7
 8007c1c:	08007ce1 	.word	0x08007ce1
 8007c20:	08007ce1 	.word	0x08007ce1
 8007c24:	08007ce1 	.word	0x08007ce1
 8007c28:	08007ce1 	.word	0x08007ce1
 8007c2c:	08007ce1 	.word	0x08007ce1
 8007c30:	08007ce1 	.word	0x08007ce1
 8007c34:	08007ce1 	.word	0x08007ce1
 8007c38:	08007cbd 	.word	0x08007cbd
 8007c3c:	08007ce1 	.word	0x08007ce1
 8007c40:	08007ce1 	.word	0x08007ce1
 8007c44:	08007ce1 	.word	0x08007ce1
 8007c48:	08007ce1 	.word	0x08007ce1
 8007c4c:	08007ce1 	.word	0x08007ce1
 8007c50:	08007ce1 	.word	0x08007ce1
 8007c54:	08007ce1 	.word	0x08007ce1
 8007c58:	08007ccf 	.word	0x08007ccf
 8007c5c:	08007ce1 	.word	0x08007ce1
 8007c60:	08007ce1 	.word	0x08007ce1
 8007c64:	08007ce1 	.word	0x08007ce1
 8007c68:	08007ce1 	.word	0x08007ce1
 8007c6c:	08007ce1 	.word	0x08007ce1
 8007c70:	08007ce1 	.word	0x08007ce1
 8007c74:	08007ce1 	.word	0x08007ce1
 8007c78:	08007ce7 	.word	0x08007ce7
 8007c7c:	08007ce1 	.word	0x08007ce1
 8007c80:	08007ce1 	.word	0x08007ce1
 8007c84:	08007ce1 	.word	0x08007ce1
 8007c88:	08007ce1 	.word	0x08007ce1
 8007c8c:	08007ce1 	.word	0x08007ce1
 8007c90:	08007ce1 	.word	0x08007ce1
 8007c94:	08007ce1 	.word	0x08007ce1
 8007c98:	08007ce7 	.word	0x08007ce7
 8007c9c:	08007ce1 	.word	0x08007ce1
 8007ca0:	08007ce1 	.word	0x08007ce1
 8007ca4:	08007ce1 	.word	0x08007ce1
 8007ca8:	08007ce1 	.word	0x08007ce1
 8007cac:	08007ce1 	.word	0x08007ce1
 8007cb0:	08007ce1 	.word	0x08007ce1
 8007cb4:	08007ce1 	.word	0x08007ce1
 8007cb8:	08007ce7 	.word	0x08007ce7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	2101      	movs	r1, #1
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f000 fde4 	bl	8008890 <RCCEx_PLL2_Config>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007ccc:	e00c      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	3324      	adds	r3, #36	; 0x24
 8007cd2:	2101      	movs	r1, #1
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fe8d 	bl	80089f4 <RCCEx_PLL3_Config>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007cde:	e003      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ce4:	e000      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007ce6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d109      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007cee:	4b45      	ldr	r3, [pc, #276]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cf2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cfa:	4942      	ldr	r1, [pc, #264]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	654b      	str	r3, [r1, #84]	; 0x54
 8007d00:	e001      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d037      	beq.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d16:	2b05      	cmp	r3, #5
 8007d18:	d820      	bhi.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d63 	.word	0x08007d63
 8007d24:	08007d39 	.word	0x08007d39
 8007d28:	08007d4b 	.word	0x08007d4b
 8007d2c:	08007d63 	.word	0x08007d63
 8007d30:	08007d63 	.word	0x08007d63
 8007d34:	08007d63 	.word	0x08007d63
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	2101      	movs	r1, #1
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 fda6 	bl	8008890 <RCCEx_PLL2_Config>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d48:	e00c      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	3324      	adds	r3, #36	; 0x24
 8007d4e:	2101      	movs	r1, #1
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 fe4f 	bl	80089f4 <RCCEx_PLL3_Config>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007d5a:	e003      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	75fb      	strb	r3, [r7, #23]
      break;
 8007d60:	e000      	b.n	8007d64 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007d62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d64:	7dfb      	ldrb	r3, [r7, #23]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d109      	bne.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007d6a:	4b26      	ldr	r3, [pc, #152]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d6e:	f023 0207 	bic.w	r2, r3, #7
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d76:	4923      	ldr	r1, [pc, #140]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007d78:	4313      	orrs	r3, r2
 8007d7a:	654b      	str	r3, [r1, #84]	; 0x54
 8007d7c:	e001      	b.n	8007d82 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d7e:	7dfb      	ldrb	r3, [r7, #23]
 8007d80:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 0304 	and.w	r3, r3, #4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d040      	beq.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d94:	2b05      	cmp	r3, #5
 8007d96:	d821      	bhi.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007d98:	a201      	add	r2, pc, #4	; (adr r2, 8007da0 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d9e:	bf00      	nop
 8007da0:	08007de3 	.word	0x08007de3
 8007da4:	08007db9 	.word	0x08007db9
 8007da8:	08007dcb 	.word	0x08007dcb
 8007dac:	08007de3 	.word	0x08007de3
 8007db0:	08007de3 	.word	0x08007de3
 8007db4:	08007de3 	.word	0x08007de3
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	2101      	movs	r1, #1
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fd66 	bl	8008890 <RCCEx_PLL2_Config>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007dc8:	e00c      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	3324      	adds	r3, #36	; 0x24
 8007dce:	2101      	movs	r1, #1
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fe0f 	bl	80089f4 <RCCEx_PLL3_Config>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007dda:	e003      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	75fb      	strb	r3, [r7, #23]
      break;
 8007de0:	e000      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007de2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d110      	bne.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007dea:	4b06      	ldr	r3, [pc, #24]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dee:	f023 0207 	bic.w	r2, r3, #7
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007df8:	4902      	ldr	r1, [pc, #8]	; (8007e04 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	658b      	str	r3, [r1, #88]	; 0x58
 8007dfe:	e007      	b.n	8007e10 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007e00:	58024800 	.word	0x58024800
 8007e04:	58024400 	.word	0x58024400
 8007e08:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e0c:	7dfb      	ldrb	r3, [r7, #23]
 8007e0e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 0320 	and.w	r3, r3, #32
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d04b      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e26:	d02e      	beq.n	8007e86 <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e2c:	d828      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e32:	d02a      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e38:	d822      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e3e:	d026      	beq.n	8007e8e <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007e40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007e44:	d81c      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4a:	d010      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007e4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e50:	d816      	bhi.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d01d      	beq.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007e56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e5a:	d111      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	3304      	adds	r3, #4
 8007e60:	2100      	movs	r1, #0
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 fd14 	bl	8008890 <RCCEx_PLL2_Config>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e6c:	e012      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3324      	adds	r3, #36	; 0x24
 8007e72:	2102      	movs	r1, #2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f000 fdbd 	bl	80089f4 <RCCEx_PLL3_Config>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007e7e:	e009      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	75fb      	strb	r3, [r7, #23]
      break;
 8007e84:	e006      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007e86:	bf00      	nop
 8007e88:	e004      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007e8a:	bf00      	nop
 8007e8c:	e002      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007e8e:	bf00      	nop
 8007e90:	e000      	b.n	8007e94 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e94:	7dfb      	ldrb	r3, [r7, #23]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10a      	bne.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e9a:	4bb2      	ldr	r3, [pc, #712]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e9e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea8:	49ae      	ldr	r1, [pc, #696]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	654b      	str	r3, [r1, #84]	; 0x54
 8007eae:	e001      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d04b      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ec6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007eca:	d02e      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007ecc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007ed0:	d828      	bhi.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed6:	d02a      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007edc:	d822      	bhi.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ee2:	d026      	beq.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007ee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ee8:	d81c      	bhi.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eee:	d010      	beq.n	8007f12 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007ef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ef4:	d816      	bhi.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d01d      	beq.n	8007f36 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007efa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007efe:	d111      	bne.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	3304      	adds	r3, #4
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f000 fcc2 	bl	8008890 <RCCEx_PLL2_Config>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f10:	e012      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	3324      	adds	r3, #36	; 0x24
 8007f16:	2102      	movs	r1, #2
 8007f18:	4618      	mov	r0, r3
 8007f1a:	f000 fd6b 	bl	80089f4 <RCCEx_PLL3_Config>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007f22:	e009      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	75fb      	strb	r3, [r7, #23]
      break;
 8007f28:	e006      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007f2a:	bf00      	nop
 8007f2c:	e004      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007f2e:	bf00      	nop
 8007f30:	e002      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007f32:	bf00      	nop
 8007f34:	e000      	b.n	8007f38 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007f36:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f38:	7dfb      	ldrb	r3, [r7, #23]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007f3e:	4b89      	ldr	r3, [pc, #548]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007f4c:	4985      	ldr	r1, [pc, #532]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	658b      	str	r3, [r1, #88]	; 0x58
 8007f52:	e001      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d04b      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007f6a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f6e:	d02e      	beq.n	8007fce <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007f70:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007f74:	d828      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f7a:	d02a      	beq.n	8007fd2 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007f80:	d822      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f82:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f86:	d026      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007f88:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007f8c:	d81c      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f92:	d010      	beq.n	8007fb6 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007f94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f98:	d816      	bhi.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d01d      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fa2:	d111      	bne.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4618      	mov	r0, r3
 8007fac:	f000 fc70 	bl	8008890 <RCCEx_PLL2_Config>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fb4:	e012      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	3324      	adds	r3, #36	; 0x24
 8007fba:	2102      	movs	r1, #2
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f000 fd19 	bl	80089f4 <RCCEx_PLL3_Config>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007fc6:	e009      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	75fb      	strb	r3, [r7, #23]
      break;
 8007fcc:	e006      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007fce:	bf00      	nop
 8007fd0:	e004      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007fd2:	bf00      	nop
 8007fd4:	e002      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007fd6:	bf00      	nop
 8007fd8:	e000      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d10a      	bne.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007fe2:	4b60      	ldr	r3, [pc, #384]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fe6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ff0:	495c      	ldr	r1, [pc, #368]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	658b      	str	r3, [r1, #88]	; 0x58
 8007ff6:	e001      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff8:	7dfb      	ldrb	r3, [r7, #23]
 8007ffa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f003 0308 	and.w	r3, r3, #8
 8008004:	2b00      	cmp	r3, #0
 8008006:	d018      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800800c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008010:	d10a      	bne.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	3324      	adds	r3, #36	; 0x24
 8008016:	2102      	movs	r1, #2
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fceb 	bl	80089f4 <RCCEx_PLL3_Config>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8008028:	4b4e      	ldr	r3, [pc, #312]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800802a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800802c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008034:	494b      	ldr	r1, [pc, #300]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008036:	4313      	orrs	r3, r2
 8008038:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01a      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008050:	d10a      	bne.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	3324      	adds	r3, #36	; 0x24
 8008056:	2102      	movs	r1, #2
 8008058:	4618      	mov	r0, r3
 800805a:	f000 fccb 	bl	80089f4 <RCCEx_PLL3_Config>
 800805e:	4603      	mov	r3, r0
 8008060:	2b00      	cmp	r3, #0
 8008062:	d001      	beq.n	8008068 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008064:	2301      	movs	r3, #1
 8008066:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008068:	4b3e      	ldr	r3, [pc, #248]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800806a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008076:	493b      	ldr	r1, [pc, #236]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008078:	4313      	orrs	r3, r2
 800807a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d034      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800808e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008092:	d01d      	beq.n	80080d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008094:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008098:	d817      	bhi.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d003      	beq.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800809e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80080a2:	d009      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80080a4:	e011      	b.n	80080ca <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	3304      	adds	r3, #4
 80080aa:	2100      	movs	r1, #0
 80080ac:	4618      	mov	r0, r3
 80080ae:	f000 fbef 	bl	8008890 <RCCEx_PLL2_Config>
 80080b2:	4603      	mov	r3, r0
 80080b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080b6:	e00c      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3324      	adds	r3, #36	; 0x24
 80080bc:	2102      	movs	r1, #2
 80080be:	4618      	mov	r0, r3
 80080c0:	f000 fc98 	bl	80089f4 <RCCEx_PLL3_Config>
 80080c4:	4603      	mov	r3, r0
 80080c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80080c8:	e003      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	75fb      	strb	r3, [r7, #23]
      break;
 80080ce:	e000      	b.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 80080d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d10a      	bne.n	80080ee <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80080d8:	4b22      	ldr	r3, [pc, #136]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080e6:	491f      	ldr	r1, [pc, #124]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80080e8:	4313      	orrs	r3, r2
 80080ea:	658b      	str	r3, [r1, #88]	; 0x58
 80080ec:	e001      	b.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
 80080f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d036      	beq.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008104:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008108:	d01c      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800810a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800810e:	d816      	bhi.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008110:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008114:	d003      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008116:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800811a:	d007      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 800811c:	e00f      	b.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800811e:	4b11      	ldr	r3, [pc, #68]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008122:	4a10      	ldr	r2, [pc, #64]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008128:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800812a:	e00c      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	3324      	adds	r3, #36	; 0x24
 8008130:	2101      	movs	r1, #1
 8008132:	4618      	mov	r0, r3
 8008134:	f000 fc5e 	bl	80089f4 <RCCEx_PLL3_Config>
 8008138:	4603      	mov	r3, r0
 800813a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800813c:	e003      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800813e:	2301      	movs	r3, #1
 8008140:	75fb      	strb	r3, [r7, #23]
      break;
 8008142:	e000      	b.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008144:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008146:	7dfb      	ldrb	r3, [r7, #23]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d10d      	bne.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800814c:	4b05      	ldr	r3, [pc, #20]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800814e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008150:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800815a:	4902      	ldr	r1, [pc, #8]	; (8008164 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800815c:	4313      	orrs	r3, r2
 800815e:	654b      	str	r3, [r1, #84]	; 0x54
 8008160:	e004      	b.n	800816c <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008162:	bf00      	nop
 8008164:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008168:	7dfb      	ldrb	r3, [r7, #23]
 800816a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d029      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800817c:	2b00      	cmp	r3, #0
 800817e:	d003      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008184:	d007      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008186:	e00f      	b.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008188:	4b61      	ldr	r3, [pc, #388]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800818a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800818c:	4a60      	ldr	r2, [pc, #384]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800818e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008194:	e00b      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	3304      	adds	r3, #4
 800819a:	2102      	movs	r1, #2
 800819c:	4618      	mov	r0, r3
 800819e:	f000 fb77 	bl	8008890 <RCCEx_PLL2_Config>
 80081a2:	4603      	mov	r3, r0
 80081a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80081a6:	e002      	b.n	80081ae <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 80081a8:	2301      	movs	r3, #1
 80081aa:	75fb      	strb	r3, [r7, #23]
      break;
 80081ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081ae:	7dfb      	ldrb	r3, [r7, #23]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d109      	bne.n	80081c8 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80081b4:	4b56      	ldr	r3, [pc, #344]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c0:	4953      	ldr	r1, [pc, #332]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80081c2:	4313      	orrs	r3, r2
 80081c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80081c6:	e001      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081c8:	7dfb      	ldrb	r3, [r7, #23]
 80081ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	3324      	adds	r3, #36	; 0x24
 80081dc:	2102      	movs	r1, #2
 80081de:	4618      	mov	r0, r3
 80081e0:	f000 fc08 	bl	80089f4 <RCCEx_PLL3_Config>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d030      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008202:	d017      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008204:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008208:	d811      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800820a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800820e:	d013      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008214:	d80b      	bhi.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008216:	2b00      	cmp	r3, #0
 8008218:	d010      	beq.n	800823c <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800821a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800821e:	d106      	bne.n	800822e <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008220:	4b3b      	ldr	r3, [pc, #236]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008224:	4a3a      	ldr	r2, [pc, #232]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800822a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800822c:	e007      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800822e:	2301      	movs	r3, #1
 8008230:	75fb      	strb	r3, [r7, #23]
      break;
 8008232:	e004      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008234:	bf00      	nop
 8008236:	e002      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008238:	bf00      	nop
 800823a:	e000      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 800823c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800823e:	7dfb      	ldrb	r3, [r7, #23]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d109      	bne.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008244:	4b32      	ldr	r3, [pc, #200]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008248:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008250:	492f      	ldr	r1, [pc, #188]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008252:	4313      	orrs	r3, r2
 8008254:	654b      	str	r3, [r1, #84]	; 0x54
 8008256:	e001      	b.n	800825c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d008      	beq.n	800827a <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008268:	4b29      	ldr	r3, [pc, #164]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800826a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800826c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008274:	4926      	ldr	r1, [pc, #152]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008276:	4313      	orrs	r3, r2
 8008278:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d008      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008286:	4b22      	ldr	r3, [pc, #136]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800828a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008292:	491f      	ldr	r1, [pc, #124]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008294:	4313      	orrs	r3, r2
 8008296:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00d      	beq.n	80082c0 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80082a4:	4b1a      	ldr	r3, [pc, #104]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	4a19      	ldr	r2, [pc, #100]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80082ae:	6113      	str	r3, [r2, #16]
 80082b0:	4b17      	ldr	r3, [pc, #92]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082b2:	691a      	ldr	r2, [r3, #16]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082ba:	4915      	ldr	r1, [pc, #84]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082bc:	4313      	orrs	r3, r2
 80082be:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	da08      	bge.n	80082da <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80082c8:	4b11      	ldr	r3, [pc, #68]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d4:	490e      	ldr	r1, [pc, #56]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082e6:	4b0a      	ldr	r3, [pc, #40]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f4:	4906      	ldr	r1, [pc, #24]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80082fa:	7dbb      	ldrb	r3, [r7, #22]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d101      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	e000      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
}
 8008306:	4618      	mov	r0, r3
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	58024400 	.word	0x58024400

08008314 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008318:	f7ff f864 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 800831c:	4602      	mov	r2, r0
 800831e:	4b06      	ldr	r3, [pc, #24]	; (8008338 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	091b      	lsrs	r3, r3, #4
 8008324:	f003 0307 	and.w	r3, r3, #7
 8008328:	4904      	ldr	r1, [pc, #16]	; (800833c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800832a:	5ccb      	ldrb	r3, [r1, r3]
 800832c:	f003 031f 	and.w	r3, r3, #31
 8008330:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008334:	4618      	mov	r0, r3
 8008336:	bd80      	pop	{r7, pc}
 8008338:	58024400 	.word	0x58024400
 800833c:	0801f1d4 	.word	0x0801f1d4

08008340 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008340:	b480      	push	{r7}
 8008342:	b089      	sub	sp, #36	; 0x24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008348:	4ba1      	ldr	r3, [pc, #644]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800834a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834c:	f003 0303 	and.w	r3, r3, #3
 8008350:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008352:	4b9f      	ldr	r3, [pc, #636]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	0b1b      	lsrs	r3, r3, #12
 8008358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800835c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800835e:	4b9c      	ldr	r3, [pc, #624]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008362:	091b      	lsrs	r3, r3, #4
 8008364:	f003 0301 	and.w	r3, r3, #1
 8008368:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800836a:	4b99      	ldr	r3, [pc, #612]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800836c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836e:	08db      	lsrs	r3, r3, #3
 8008370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008374:	693a      	ldr	r2, [r7, #16]
 8008376:	fb02 f303 	mul.w	r3, r2, r3
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b00      	cmp	r3, #0
 800838a:	f000 8111 	beq.w	80085b0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b02      	cmp	r3, #2
 8008392:	f000 8083 	beq.w	800849c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008396:	69bb      	ldr	r3, [r7, #24]
 8008398:	2b02      	cmp	r3, #2
 800839a:	f200 80a1 	bhi.w	80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800839e:	69bb      	ldr	r3, [r7, #24]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80083a4:	69bb      	ldr	r3, [r7, #24]
 80083a6:	2b01      	cmp	r3, #1
 80083a8:	d056      	beq.n	8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80083aa:	e099      	b.n	80084e0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083ac:	4b88      	ldr	r3, [pc, #544]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d02d      	beq.n	8008414 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083b8:	4b85      	ldr	r3, [pc, #532]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	08db      	lsrs	r3, r3, #3
 80083be:	f003 0303 	and.w	r3, r3, #3
 80083c2:	4a84      	ldr	r2, [pc, #528]	; (80085d4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80083c4:	fa22 f303 	lsr.w	r3, r2, r3
 80083c8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	ee07 3a90 	vmov	s15, r3
 80083d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083e2:	4b7b      	ldr	r3, [pc, #492]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ea:	ee07 3a90 	vmov	s15, r3
 80083ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80083f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800840a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800840e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008412:	e087      	b.n	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800841e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80085dc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008426:	4b6a      	ldr	r3, [pc, #424]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800842a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800842e:	ee07 3a90 	vmov	s15, r3
 8008432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008436:	ed97 6a03 	vldr	s12, [r7, #12]
 800843a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800843e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800844a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800844e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008456:	e065      	b.n	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	ee07 3a90 	vmov	s15, r3
 800845e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008462:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800846a:	4b59      	ldr	r3, [pc, #356]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800846c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008472:	ee07 3a90 	vmov	s15, r3
 8008476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800847a:	ed97 6a03 	vldr	s12, [r7, #12]
 800847e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800848a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800848e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800849a:	e043      	b.n	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800849c:	697b      	ldr	r3, [r7, #20]
 800849e:	ee07 3a90 	vmov	s15, r3
 80084a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80085e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80084aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ae:	4b48      	ldr	r3, [pc, #288]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084b6:	ee07 3a90 	vmov	s15, r3
 80084ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084be:	ed97 6a03 	vldr	s12, [r7, #12]
 80084c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80084c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80084de:	e021      	b.n	8008524 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	ee07 3a90 	vmov	s15, r3
 80084e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80085e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80084ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084f2:	4b37      	ldr	r3, [pc, #220]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084fa:	ee07 3a90 	vmov	s15, r3
 80084fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008502:	ed97 6a03 	vldr	s12, [r7, #12]
 8008506:	eddf 5a34 	vldr	s11, [pc, #208]	; 80085d8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800850a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800850e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800851a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800851e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008522:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008524:	4b2a      	ldr	r3, [pc, #168]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008528:	0a5b      	lsrs	r3, r3, #9
 800852a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800852e:	ee07 3a90 	vmov	s15, r3
 8008532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800853a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800853e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800854a:	ee17 2a90 	vmov	r2, s15
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008552:	4b1f      	ldr	r3, [pc, #124]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	0c1b      	lsrs	r3, r3, #16
 8008558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800856c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008578:	ee17 2a90 	vmov	r2, s15
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008580:	4b13      	ldr	r3, [pc, #76]	; (80085d0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008584:	0e1b      	lsrs	r3, r3, #24
 8008586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800858a:	ee07 3a90 	vmov	s15, r3
 800858e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800859a:	edd7 6a07 	vldr	s13, [r7, #28]
 800859e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085a6:	ee17 2a90 	vmov	r2, s15
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80085ae:	e008      	b.n	80085c2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	609a      	str	r2, [r3, #8]
}
 80085c2:	bf00      	nop
 80085c4:	3724      	adds	r7, #36	; 0x24
 80085c6:	46bd      	mov	sp, r7
 80085c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085cc:	4770      	bx	lr
 80085ce:	bf00      	nop
 80085d0:	58024400 	.word	0x58024400
 80085d4:	03d09000 	.word	0x03d09000
 80085d8:	46000000 	.word	0x46000000
 80085dc:	4c742400 	.word	0x4c742400
 80085e0:	4a742400 	.word	0x4a742400
 80085e4:	4af42400 	.word	0x4af42400

080085e8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80085e8:	b480      	push	{r7}
 80085ea:	b089      	sub	sp, #36	; 0x24
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80085f0:	4ba1      	ldr	r3, [pc, #644]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f4:	f003 0303 	and.w	r3, r3, #3
 80085f8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80085fa:	4b9f      	ldr	r3, [pc, #636]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085fe:	0d1b      	lsrs	r3, r3, #20
 8008600:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008604:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008606:	4b9c      	ldr	r3, [pc, #624]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860a:	0a1b      	lsrs	r3, r3, #8
 800860c:	f003 0301 	and.w	r3, r3, #1
 8008610:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008612:	4b99      	ldr	r3, [pc, #612]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008616:	08db      	lsrs	r3, r3, #3
 8008618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 8111 	beq.w	8008858 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008636:	69bb      	ldr	r3, [r7, #24]
 8008638:	2b02      	cmp	r3, #2
 800863a:	f000 8083 	beq.w	8008744 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	2b02      	cmp	r3, #2
 8008642:	f200 80a1 	bhi.w	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800864c:	69bb      	ldr	r3, [r7, #24]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d056      	beq.n	8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008652:	e099      	b.n	8008788 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008654:	4b88      	ldr	r3, [pc, #544]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d02d      	beq.n	80086bc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008660:	4b85      	ldr	r3, [pc, #532]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	08db      	lsrs	r3, r3, #3
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	4a84      	ldr	r2, [pc, #528]	; (800887c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800866c:	fa22 f303 	lsr.w	r3, r2, r3
 8008670:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	ee07 3a90 	vmov	s15, r3
 8008678:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008686:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800868a:	4b7b      	ldr	r3, [pc, #492]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800868c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008692:	ee07 3a90 	vmov	s15, r3
 8008696:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800869a:	ed97 6a03 	vldr	s12, [r7, #12]
 800869e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086b6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80086ba:	e087      	b.n	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80086bc:	697b      	ldr	r3, [r7, #20]
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008884 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80086ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ce:	4b6a      	ldr	r3, [pc, #424]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086d6:	ee07 3a90 	vmov	s15, r3
 80086da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086de:	ed97 6a03 	vldr	s12, [r7, #12]
 80086e2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086fe:	e065      	b.n	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	ee07 3a90 	vmov	s15, r3
 8008706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800870a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800870e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008712:	4b59      	ldr	r3, [pc, #356]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008722:	ed97 6a03 	vldr	s12, [r7, #12]
 8008726:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800872a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800872e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008732:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800873a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800873e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008742:	e043      	b.n	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	ee07 3a90 	vmov	s15, r3
 800874a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800874e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800888c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008756:	4b48      	ldr	r3, [pc, #288]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800875e:	ee07 3a90 	vmov	s15, r3
 8008762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008766:	ed97 6a03 	vldr	s12, [r7, #12]
 800876a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800876e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008776:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800877a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800877e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008782:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008786:	e021      	b.n	80087cc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008792:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008888 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879a:	4b37      	ldr	r3, [pc, #220]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800879c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ae:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008880 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80087b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80087ca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80087cc:	4b2a      	ldr	r3, [pc, #168]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d0:	0a5b      	lsrs	r3, r3, #9
 80087d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80087e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087f2:	ee17 2a90 	vmov	r2, s15
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80087fa:	4b1f      	ldr	r3, [pc, #124]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008810:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008814:	edd7 6a07 	vldr	s13, [r7, #28]
 8008818:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800881c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008820:	ee17 2a90 	vmov	r2, s15
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008828:	4b13      	ldr	r3, [pc, #76]	; (8008878 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800882a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882c:	0e1b      	lsrs	r3, r3, #24
 800882e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008832:	ee07 3a90 	vmov	s15, r3
 8008836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800883e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008842:	edd7 6a07 	vldr	s13, [r7, #28]
 8008846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800884a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800884e:	ee17 2a90 	vmov	r2, s15
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008856:	e008      	b.n	800886a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2200      	movs	r2, #0
 8008862:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2200      	movs	r2, #0
 8008868:	609a      	str	r2, [r3, #8]
}
 800886a:	bf00      	nop
 800886c:	3724      	adds	r7, #36	; 0x24
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr
 8008876:	bf00      	nop
 8008878:	58024400 	.word	0x58024400
 800887c:	03d09000 	.word	0x03d09000
 8008880:	46000000 	.word	0x46000000
 8008884:	4c742400 	.word	0x4c742400
 8008888:	4a742400 	.word	0x4a742400
 800888c:	4af42400 	.word	0x4af42400

08008890 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800889a:	2300      	movs	r3, #0
 800889c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800889e:	4b53      	ldr	r3, [pc, #332]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088a2:	f003 0303 	and.w	r3, r3, #3
 80088a6:	2b03      	cmp	r3, #3
 80088a8:	d101      	bne.n	80088ae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e099      	b.n	80089e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80088ae:	4b4f      	ldr	r3, [pc, #316]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a4e      	ldr	r2, [pc, #312]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088b4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088ba:	f7fa f903 	bl	8002ac4 <HAL_GetTick>
 80088be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088c0:	e008      	b.n	80088d4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80088c2:	f7fa f8ff 	bl	8002ac4 <HAL_GetTick>
 80088c6:	4602      	mov	r2, r0
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	1ad3      	subs	r3, r2, r3
 80088cc:	2b02      	cmp	r3, #2
 80088ce:	d901      	bls.n	80088d4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e086      	b.n	80089e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088d4:	4b45      	ldr	r3, [pc, #276]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1f0      	bne.n	80088c2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80088e0:	4b42      	ldr	r3, [pc, #264]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	031b      	lsls	r3, r3, #12
 80088ee:	493f      	ldr	r1, [pc, #252]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80088f0:	4313      	orrs	r3, r2
 80088f2:	628b      	str	r3, [r1, #40]	; 0x28
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	3b01      	subs	r3, #1
 8008904:	025b      	lsls	r3, r3, #9
 8008906:	b29b      	uxth	r3, r3
 8008908:	431a      	orrs	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	3b01      	subs	r3, #1
 8008910:	041b      	lsls	r3, r3, #16
 8008912:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008916:	431a      	orrs	r2, r3
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	3b01      	subs	r3, #1
 800891e:	061b      	lsls	r3, r3, #24
 8008920:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008924:	4931      	ldr	r1, [pc, #196]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008926:	4313      	orrs	r3, r2
 8008928:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800892a:	4b30      	ldr	r3, [pc, #192]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 800892c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	695b      	ldr	r3, [r3, #20]
 8008936:	492d      	ldr	r1, [pc, #180]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008938:	4313      	orrs	r3, r2
 800893a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800893c:	4b2b      	ldr	r3, [pc, #172]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	f023 0220 	bic.w	r2, r3, #32
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	4928      	ldr	r1, [pc, #160]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 800894a:	4313      	orrs	r3, r2
 800894c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800894e:	4b27      	ldr	r3, [pc, #156]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008952:	4a26      	ldr	r2, [pc, #152]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008954:	f023 0310 	bic.w	r3, r3, #16
 8008958:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800895a:	4b24      	ldr	r3, [pc, #144]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 800895c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800895e:	4b24      	ldr	r3, [pc, #144]	; (80089f0 <RCCEx_PLL2_Config+0x160>)
 8008960:	4013      	ands	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	69d2      	ldr	r2, [r2, #28]
 8008966:	00d2      	lsls	r2, r2, #3
 8008968:	4920      	ldr	r1, [pc, #128]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 800896a:	4313      	orrs	r3, r2
 800896c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800896e:	4b1f      	ldr	r3, [pc, #124]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008972:	4a1e      	ldr	r2, [pc, #120]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008974:	f043 0310 	orr.w	r3, r3, #16
 8008978:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d106      	bne.n	800898e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008980:	4b1a      	ldr	r3, [pc, #104]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	4a19      	ldr	r2, [pc, #100]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008986:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800898a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800898c:	e00f      	b.n	80089ae <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d106      	bne.n	80089a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008994:	4b15      	ldr	r3, [pc, #84]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 8008996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008998:	4a14      	ldr	r2, [pc, #80]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 800899a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800899e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80089a0:	e005      	b.n	80089ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80089a2:	4b12      	ldr	r3, [pc, #72]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a6:	4a11      	ldr	r2, [pc, #68]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089ac:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80089ae:	4b0f      	ldr	r3, [pc, #60]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a0e      	ldr	r2, [pc, #56]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089ba:	f7fa f883 	bl	8002ac4 <HAL_GetTick>
 80089be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089c0:	e008      	b.n	80089d4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80089c2:	f7fa f87f 	bl	8002ac4 <HAL_GetTick>
 80089c6:	4602      	mov	r2, r0
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	1ad3      	subs	r3, r2, r3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d901      	bls.n	80089d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089d0:	2303      	movs	r3, #3
 80089d2:	e006      	b.n	80089e2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089d4:	4b05      	ldr	r3, [pc, #20]	; (80089ec <RCCEx_PLL2_Config+0x15c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d0f0      	beq.n	80089c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}
 80089ea:	bf00      	nop
 80089ec:	58024400 	.word	0x58024400
 80089f0:	ffff0007 	.word	0xffff0007

080089f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a02:	4b53      	ldr	r3, [pc, #332]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a06:	f003 0303 	and.w	r3, r3, #3
 8008a0a:	2b03      	cmp	r3, #3
 8008a0c:	d101      	bne.n	8008a12 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e099      	b.n	8008b46 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008a12:	4b4f      	ldr	r3, [pc, #316]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a4e      	ldr	r2, [pc, #312]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a1e:	f7fa f851 	bl	8002ac4 <HAL_GetTick>
 8008a22:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a24:	e008      	b.n	8008a38 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008a26:	f7fa f84d 	bl	8002ac4 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e086      	b.n	8008b46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a38:	4b45      	ldr	r3, [pc, #276]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d1f0      	bne.n	8008a26 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008a44:	4b42      	ldr	r3, [pc, #264]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a48:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	051b      	lsls	r3, r3, #20
 8008a52:	493f      	ldr	r1, [pc, #252]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	628b      	str	r3, [r1, #40]	; 0x28
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	3b01      	subs	r3, #1
 8008a68:	025b      	lsls	r3, r3, #9
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	431a      	orrs	r2, r3
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	3b01      	subs	r3, #1
 8008a74:	041b      	lsls	r3, r3, #16
 8008a76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008a7a:	431a      	orrs	r2, r3
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	061b      	lsls	r3, r3, #24
 8008a84:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008a88:	4931      	ldr	r1, [pc, #196]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008a8e:	4b30      	ldr	r3, [pc, #192]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	695b      	ldr	r3, [r3, #20]
 8008a9a:	492d      	ldr	r1, [pc, #180]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008aa0:	4b2b      	ldr	r3, [pc, #172]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008aa4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	699b      	ldr	r3, [r3, #24]
 8008aac:	4928      	ldr	r1, [pc, #160]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008ab2:	4b27      	ldr	r3, [pc, #156]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ab6:	4a26      	ldr	r2, [pc, #152]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008abc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008abe:	4b24      	ldr	r3, [pc, #144]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ac2:	4b24      	ldr	r3, [pc, #144]	; (8008b54 <RCCEx_PLL3_Config+0x160>)
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	687a      	ldr	r2, [r7, #4]
 8008ac8:	69d2      	ldr	r2, [r2, #28]
 8008aca:	00d2      	lsls	r2, r2, #3
 8008acc:	4920      	ldr	r1, [pc, #128]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ad2:	4b1f      	ldr	r3, [pc, #124]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad6:	4a1e      	ldr	r2, [pc, #120]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008adc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d106      	bne.n	8008af2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008ae4:	4b1a      	ldr	r3, [pc, #104]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae8:	4a19      	ldr	r2, [pc, #100]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008aea:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008aee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008af0:	e00f      	b.n	8008b12 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d106      	bne.n	8008b06 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008af8:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afc:	4a14      	ldr	r2, [pc, #80]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008afe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b02:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b04:	e005      	b.n	8008b12 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008b06:	4b12      	ldr	r3, [pc, #72]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b0a:	4a11      	ldr	r2, [pc, #68]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b10:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008b12:	4b0f      	ldr	r3, [pc, #60]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	4a0e      	ldr	r2, [pc, #56]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b1e:	f7f9 ffd1 	bl	8002ac4 <HAL_GetTick>
 8008b22:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b24:	e008      	b.n	8008b38 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008b26:	f7f9 ffcd 	bl	8002ac4 <HAL_GetTick>
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	1ad3      	subs	r3, r2, r3
 8008b30:	2b02      	cmp	r3, #2
 8008b32:	d901      	bls.n	8008b38 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e006      	b.n	8008b46 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b38:	4b05      	ldr	r3, [pc, #20]	; (8008b50 <RCCEx_PLL3_Config+0x15c>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d0f0      	beq.n	8008b26 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	58024400 	.word	0x58024400
 8008b54:	ffff0007 	.word	0xffff0007

08008b58 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d101      	bne.n	8008b6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	e0f1      	b.n	8008d4e <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a78      	ldr	r2, [pc, #480]	; (8008d58 <HAL_SPI_Init+0x200>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d00f      	beq.n	8008b9a <HAL_SPI_Init+0x42>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a77      	ldr	r2, [pc, #476]	; (8008d5c <HAL_SPI_Init+0x204>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d00a      	beq.n	8008b9a <HAL_SPI_Init+0x42>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	4a75      	ldr	r2, [pc, #468]	; (8008d60 <HAL_SPI_Init+0x208>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d005      	beq.n	8008b9a <HAL_SPI_Init+0x42>
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	2b0f      	cmp	r3, #15
 8008b94:	d901      	bls.n	8008b9a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e0d9      	b.n	8008d4e <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fba2 	bl	80092e4 <SPI_GetPacketSize>
 8008ba0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a6c      	ldr	r2, [pc, #432]	; (8008d58 <HAL_SPI_Init+0x200>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d00c      	beq.n	8008bc6 <HAL_SPI_Init+0x6e>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a6a      	ldr	r2, [pc, #424]	; (8008d5c <HAL_SPI_Init+0x204>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d007      	beq.n	8008bc6 <HAL_SPI_Init+0x6e>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a69      	ldr	r2, [pc, #420]	; (8008d60 <HAL_SPI_Init+0x208>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d002      	beq.n	8008bc6 <HAL_SPI_Init+0x6e>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b08      	cmp	r3, #8
 8008bc4:	d811      	bhi.n	8008bea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bca:	4a63      	ldr	r2, [pc, #396]	; (8008d58 <HAL_SPI_Init+0x200>)
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d009      	beq.n	8008be4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a61      	ldr	r2, [pc, #388]	; (8008d5c <HAL_SPI_Init+0x204>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d004      	beq.n	8008be4 <HAL_SPI_Init+0x8c>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a60      	ldr	r2, [pc, #384]	; (8008d60 <HAL_SPI_Init+0x208>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d104      	bne.n	8008bee <HAL_SPI_Init+0x96>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b10      	cmp	r3, #16
 8008be8:	d901      	bls.n	8008bee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008bea:	2301      	movs	r3, #1
 8008bec:	e0af      	b.n	8008d4e <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008bf4:	b2db      	uxtb	r3, r3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d106      	bne.n	8008c08 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f7f8 ff08 	bl	8001a18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2202      	movs	r2, #2
 8008c0c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0201 	bic.w	r2, r2, #1
 8008c1e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008c2a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	699b      	ldr	r3, [r3, #24]
 8008c30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c34:	d119      	bne.n	8008c6a <HAL_SPI_Init+0x112>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c3e:	d103      	bne.n	8008c48 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d008      	beq.n	8008c5a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10c      	bne.n	8008c6a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c58:	d107      	bne.n	8008c6a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	681a      	ldr	r2, [r3, #0]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c68:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	69da      	ldr	r2, [r3, #28]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c72:	431a      	orrs	r2, r3
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	431a      	orrs	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c7c:	ea42 0103 	orr.w	r1, r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68da      	ldr	r2, [r3, #12]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	430a      	orrs	r2, r1
 8008c8a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	699b      	ldr	r3, [r3, #24]
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	691b      	ldr	r3, [r3, #16]
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a1b      	ldr	r3, [r3, #32]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	431a      	orrs	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	431a      	orrs	r2, r3
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cca:	ea42 0103 	orr.w	r1, r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	430a      	orrs	r2, r1
 8008cd8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d113      	bne.n	8008d0a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cf4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008d08:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f022 0201 	bic.w	r2, r2, #1
 8008d18:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d00a      	beq.n	8008d3c <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	430a      	orrs	r2, r1
 8008d3a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}
 8008d56:	bf00      	nop
 8008d58:	40013000 	.word	0x40013000
 8008d5c:	40003800 	.word	0x40003800
 8008d60:	40003c00 	.word	0x40003c00

08008d64 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08a      	sub	sp, #40	; 0x28
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	4613      	mov	r3, r2
 8008d72:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	3320      	adds	r3, #32
 8008d7a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008d86:	2b01      	cmp	r3, #1
 8008d88:	d101      	bne.n	8008d8e <HAL_SPI_Transmit+0x2a>
 8008d8a:	2302      	movs	r3, #2
 8008d8c:	e1d7      	b.n	800913e <HAL_SPI_Transmit+0x3da>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	2201      	movs	r2, #1
 8008d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d96:	f7f9 fe95 	bl	8002ac4 <HAL_GetTick>
 8008d9a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d007      	beq.n	8008db8 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008da8:	2302      	movs	r3, #2
 8008daa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008db4:	7efb      	ldrb	r3, [r7, #27]
 8008db6:	e1c2      	b.n	800913e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d002      	beq.n	8008dc4 <HAL_SPI_Transmit+0x60>
 8008dbe:	88fb      	ldrh	r3, [r7, #6]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d107      	bne.n	8008dd4 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008dd0:	7efb      	ldrb	r3, [r7, #27]
 8008dd2:	e1b4      	b.n	800913e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2203      	movs	r2, #3
 8008dd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	68ba      	ldr	r2, [r7, #8]
 8008de8:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	88fa      	ldrh	r2, [r7, #6]
 8008dee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	88fa      	ldrh	r2, [r7, #6]
 8008df6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008e24:	d107      	bne.n	8008e36 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e34:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	685a      	ldr	r2, [r3, #4]
 8008e3c:	4b96      	ldr	r3, [pc, #600]	; (8009098 <HAL_SPI_Transmit+0x334>)
 8008e3e:	4013      	ands	r3, r2
 8008e40:	88f9      	ldrh	r1, [r7, #6]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	6812      	ldr	r2, [r2, #0]
 8008e46:	430b      	orrs	r3, r1
 8008e48:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681a      	ldr	r2, [r3, #0]
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f042 0201 	orr.w	r2, r2, #1
 8008e58:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e62:	d107      	bne.n	8008e74 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	2b0f      	cmp	r3, #15
 8008e7a:	d947      	bls.n	8008f0c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008e7c:	e03f      	b.n	8008efe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	f003 0302 	and.w	r3, r3, #2
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d114      	bne.n	8008eb6 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	6812      	ldr	r2, [r2, #0]
 8008e96:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e9c:	1d1a      	adds	r2, r3, #4
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	3b01      	subs	r3, #1
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008eb4:	e023      	b.n	8008efe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008eb6:	f7f9 fe05 	bl	8002ac4 <HAL_GetTick>
 8008eba:	4602      	mov	r2, r0
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	1ad3      	subs	r3, r2, r3
 8008ec0:	683a      	ldr	r2, [r7, #0]
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d803      	bhi.n	8008ece <HAL_SPI_Transmit+0x16a>
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ecc:	d102      	bne.n	8008ed4 <HAL_SPI_Transmit+0x170>
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d114      	bne.n	8008efe <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 f937 	bl	8009148 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008ee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	2201      	movs	r2, #1
 8008ef6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e11f      	b.n	800913e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1b9      	bne.n	8008e7e <HAL_SPI_Transmit+0x11a>
 8008f0a:	e0f2      	b.n	80090f2 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	f240 80e7 	bls.w	80090e4 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008f16:	e05d      	b.n	8008fd4 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	695b      	ldr	r3, [r3, #20]
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d132      	bne.n	8008f8c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b01      	cmp	r3, #1
 8008f30:	d918      	bls.n	8008f64 <HAL_SPI_Transmit+0x200>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d014      	beq.n	8008f64 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	6812      	ldr	r2, [r2, #0]
 8008f44:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f4a:	1d1a      	adds	r2, r3, #4
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	3b02      	subs	r3, #2
 8008f5a:	b29a      	uxth	r2, r3
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f62:	e037      	b.n	8008fd4 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f68:	881a      	ldrh	r2, [r3, #0]
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f72:	1c9a      	adds	r2, r3, #2
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	3b01      	subs	r3, #1
 8008f82:	b29a      	uxth	r2, r3
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f8a:	e023      	b.n	8008fd4 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f8c:	f7f9 fd9a 	bl	8002ac4 <HAL_GetTick>
 8008f90:	4602      	mov	r2, r0
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d803      	bhi.n	8008fa4 <HAL_SPI_Transmit+0x240>
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fa2:	d102      	bne.n	8008faa <HAL_SPI_Transmit+0x246>
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d114      	bne.n	8008fd4 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f8cc 	bl	8009148 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e0b4      	b.n	800913e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d19b      	bne.n	8008f18 <HAL_SPI_Transmit+0x1b4>
 8008fe0:	e087      	b.n	80090f2 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	f003 0302 	and.w	r3, r3, #2
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d155      	bne.n	800909c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ff6:	b29b      	uxth	r3, r3
 8008ff8:	2b03      	cmp	r3, #3
 8008ffa:	d918      	bls.n	800902e <HAL_SPI_Transmit+0x2ca>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009000:	2b40      	cmp	r3, #64	; 0x40
 8009002:	d914      	bls.n	800902e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009014:	1d1a      	adds	r2, r3, #4
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009020:	b29b      	uxth	r3, r3
 8009022:	3b04      	subs	r3, #4
 8009024:	b29a      	uxth	r2, r3
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800902c:	e05a      	b.n	80090e4 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009034:	b29b      	uxth	r3, r3
 8009036:	2b01      	cmp	r3, #1
 8009038:	d917      	bls.n	800906a <HAL_SPI_Transmit+0x306>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d013      	beq.n	800906a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009046:	881a      	ldrh	r2, [r3, #0]
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009050:	1c9a      	adds	r2, r3, #2
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800905c:	b29b      	uxth	r3, r3
 800905e:	3b02      	subs	r3, #2
 8009060:	b29a      	uxth	r2, r3
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009068:	e03c      	b.n	80090e4 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	3320      	adds	r3, #32
 8009074:	7812      	ldrb	r2, [r2, #0]
 8009076:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009088:	b29b      	uxth	r3, r3
 800908a:	3b01      	subs	r3, #1
 800908c:	b29a      	uxth	r2, r3
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009094:	e026      	b.n	80090e4 <HAL_SPI_Transmit+0x380>
 8009096:	bf00      	nop
 8009098:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800909c:	f7f9 fd12 	bl	8002ac4 <HAL_GetTick>
 80090a0:	4602      	mov	r2, r0
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	1ad3      	subs	r3, r2, r3
 80090a6:	683a      	ldr	r2, [r7, #0]
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d803      	bhi.n	80090b4 <HAL_SPI_Transmit+0x350>
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b2:	d102      	bne.n	80090ba <HAL_SPI_Transmit+0x356>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d114      	bne.n	80090e4 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	f000 f844 	bl	8009148 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ce:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80090e0:	2303      	movs	r3, #3
 80090e2:	e02c      	b.n	800913e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f47f af78 	bne.w	8008fe2 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	2200      	movs	r2, #0
 80090fa:	2108      	movs	r1, #8
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f000 f8c3 	bl	8009288 <SPI_WaitOnFlagUntilTimeout>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d007      	beq.n	8009118 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800910e:	f043 0220 	orr.w	r2, r3, #32
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8009118:	68f8      	ldr	r0, [r7, #12]
 800911a:	f000 f815 	bl	8009148 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	e000      	b.n	800913e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800913c:	7efb      	ldrb	r3, [r7, #27]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3720      	adds	r7, #32
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop

08009148 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	699a      	ldr	r2, [r3, #24]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0208 	orr.w	r2, r2, #8
 8009166:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699a      	ldr	r2, [r3, #24]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0210 	orr.w	r2, r2, #16
 8009176:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681a      	ldr	r2, [r3, #0]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f022 0201 	bic.w	r2, r2, #1
 8009186:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	6919      	ldr	r1, [r3, #16]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4b3c      	ldr	r3, [pc, #240]	; (8009284 <SPI_CloseTransfer+0x13c>)
 8009194:	400b      	ands	r3, r1
 8009196:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	689a      	ldr	r2, [r3, #8]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80091a6:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091ae:	b2db      	uxtb	r3, r3
 80091b0:	2b04      	cmp	r3, #4
 80091b2:	d014      	beq.n	80091de <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00f      	beq.n	80091de <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	699a      	ldr	r2, [r3, #24]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f042 0220 	orr.w	r2, r2, #32
 80091dc:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d014      	beq.n	8009214 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00f      	beq.n	8009214 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091fa:	f043 0204 	orr.w	r2, r3, #4
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	699a      	ldr	r2, [r3, #24]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009212:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800921a:	2b00      	cmp	r3, #0
 800921c:	d00f      	beq.n	800923e <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009224:	f043 0201 	orr.w	r2, r3, #1
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	699a      	ldr	r2, [r3, #24]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800923c:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00f      	beq.n	8009268 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800924e:	f043 0208 	orr.w	r2, r3, #8
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699a      	ldr	r2, [r3, #24]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009266:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009278:	bf00      	nop
 800927a:	3714      	adds	r7, #20
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr
 8009284:	fffffc90 	.word	0xfffffc90

08009288 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	603b      	str	r3, [r7, #0]
 8009294:	4613      	mov	r3, r2
 8009296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009298:	e010      	b.n	80092bc <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800929a:	f7f9 fc13 	bl	8002ac4 <HAL_GetTick>
 800929e:	4602      	mov	r2, r0
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	69ba      	ldr	r2, [r7, #24]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d803      	bhi.n	80092b2 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80092aa:	69bb      	ldr	r3, [r7, #24]
 80092ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b0:	d102      	bne.n	80092b8 <SPI_WaitOnFlagUntilTimeout+0x30>
 80092b2:	69bb      	ldr	r3, [r7, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d101      	bne.n	80092bc <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e00f      	b.n	80092dc <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	695a      	ldr	r2, [r3, #20]
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	4013      	ands	r3, r2
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	bf0c      	ite	eq
 80092cc:	2301      	moveq	r3, #1
 80092ce:	2300      	movne	r3, #0
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	461a      	mov	r2, r3
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d0df      	beq.n	800929a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3710      	adds	r7, #16
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092f0:	095b      	lsrs	r3, r3, #5
 80092f2:	3301      	adds	r3, #1
 80092f4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	3301      	adds	r3, #1
 80092fc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	3307      	adds	r3, #7
 8009302:	08db      	lsrs	r3, r3, #3
 8009304:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	fb02 f303 	mul.w	r3, r2, r3
}
 800930e:	4618      	mov	r0, r3
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr

0800931a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e049      	b.n	80093c0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009332:	b2db      	uxtb	r3, r3
 8009334:	2b00      	cmp	r3, #0
 8009336:	d106      	bne.n	8009346 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2200      	movs	r2, #0
 800933c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f7f9 f909 	bl	8002558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2202      	movs	r2, #2
 800934a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	3304      	adds	r3, #4
 8009356:	4619      	mov	r1, r3
 8009358:	4610      	mov	r0, r2
 800935a:	f000 fa03 	bl	8009764 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2201      	movs	r2, #1
 8009362:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2201      	movs	r2, #1
 8009372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2201      	movs	r2, #1
 8009382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3708      	adds	r7, #8
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80093d6:	b2db      	uxtb	r3, r3
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d001      	beq.n	80093e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80093dc:	2301      	movs	r3, #1
 80093de:	e05e      	b.n	800949e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2202      	movs	r2, #2
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68da      	ldr	r2, [r3, #12]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f042 0201 	orr.w	r2, r2, #1
 80093f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a2b      	ldr	r2, [pc, #172]	; (80094ac <HAL_TIM_Base_Start_IT+0xe4>)
 80093fe:	4293      	cmp	r3, r2
 8009400:	d02c      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940a:	d027      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	4a27      	ldr	r2, [pc, #156]	; (80094b0 <HAL_TIM_Base_Start_IT+0xe8>)
 8009412:	4293      	cmp	r3, r2
 8009414:	d022      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a26      	ldr	r2, [pc, #152]	; (80094b4 <HAL_TIM_Base_Start_IT+0xec>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d01d      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	4a24      	ldr	r2, [pc, #144]	; (80094b8 <HAL_TIM_Base_Start_IT+0xf0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d018      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a23      	ldr	r2, [pc, #140]	; (80094bc <HAL_TIM_Base_Start_IT+0xf4>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d013      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4a21      	ldr	r2, [pc, #132]	; (80094c0 <HAL_TIM_Base_Start_IT+0xf8>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00e      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	4a20      	ldr	r2, [pc, #128]	; (80094c4 <HAL_TIM_Base_Start_IT+0xfc>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d009      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4a1e      	ldr	r2, [pc, #120]	; (80094c8 <HAL_TIM_Base_Start_IT+0x100>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d004      	beq.n	800945c <HAL_TIM_Base_Start_IT+0x94>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a1d      	ldr	r2, [pc, #116]	; (80094cc <HAL_TIM_Base_Start_IT+0x104>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d115      	bne.n	8009488 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689a      	ldr	r2, [r3, #8]
 8009462:	4b1b      	ldr	r3, [pc, #108]	; (80094d0 <HAL_TIM_Base_Start_IT+0x108>)
 8009464:	4013      	ands	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2b06      	cmp	r3, #6
 800946c:	d015      	beq.n	800949a <HAL_TIM_Base_Start_IT+0xd2>
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009474:	d011      	beq.n	800949a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	681a      	ldr	r2, [r3, #0]
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f042 0201 	orr.w	r2, r2, #1
 8009484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009486:	e008      	b.n	800949a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0201 	orr.w	r2, r2, #1
 8009496:	601a      	str	r2, [r3, #0]
 8009498:	e000      	b.n	800949c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800949a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800949c:	2300      	movs	r3, #0
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	40010000 	.word	0x40010000
 80094b0:	40000400 	.word	0x40000400
 80094b4:	40000800 	.word	0x40000800
 80094b8:	40000c00 	.word	0x40000c00
 80094bc:	40010400 	.word	0x40010400
 80094c0:	40001800 	.word	0x40001800
 80094c4:	40014000 	.word	0x40014000
 80094c8:	4000e000 	.word	0x4000e000
 80094cc:	4000e400 	.word	0x4000e400
 80094d0:	00010007 	.word	0x00010007

080094d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b082      	sub	sp, #8
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691b      	ldr	r3, [r3, #16]
 80094e2:	f003 0302 	and.w	r3, r3, #2
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d122      	bne.n	8009530 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68db      	ldr	r3, [r3, #12]
 80094f0:	f003 0302 	and.w	r3, r3, #2
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d11b      	bne.n	8009530 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f06f 0202 	mvn.w	r2, #2
 8009500:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699b      	ldr	r3, [r3, #24]
 800950e:	f003 0303 	and.w	r3, r3, #3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d003      	beq.n	800951e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 f905 	bl	8009726 <HAL_TIM_IC_CaptureCallback>
 800951c:	e005      	b.n	800952a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f8f7 	bl	8009712 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f908 	bl	800973a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	f003 0304 	and.w	r3, r3, #4
 800953a:	2b04      	cmp	r3, #4
 800953c:	d122      	bne.n	8009584 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	f003 0304 	and.w	r3, r3, #4
 8009548:	2b04      	cmp	r3, #4
 800954a:	d11b      	bne.n	8009584 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f06f 0204 	mvn.w	r2, #4
 8009554:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2202      	movs	r2, #2
 800955a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	699b      	ldr	r3, [r3, #24]
 8009562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009566:	2b00      	cmp	r3, #0
 8009568:	d003      	beq.n	8009572 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 f8db 	bl	8009726 <HAL_TIM_IC_CaptureCallback>
 8009570:	e005      	b.n	800957e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f8cd 	bl	8009712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f000 f8de 	bl	800973a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2200      	movs	r2, #0
 8009582:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0308 	and.w	r3, r3, #8
 800958e:	2b08      	cmp	r3, #8
 8009590:	d122      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	68db      	ldr	r3, [r3, #12]
 8009598:	f003 0308 	and.w	r3, r3, #8
 800959c:	2b08      	cmp	r3, #8
 800959e:	d11b      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f06f 0208 	mvn.w	r2, #8
 80095a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2204      	movs	r2, #4
 80095ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	69db      	ldr	r3, [r3, #28]
 80095b6:	f003 0303 	and.w	r3, r3, #3
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d003      	beq.n	80095c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f8b1 	bl	8009726 <HAL_TIM_IC_CaptureCallback>
 80095c4:	e005      	b.n	80095d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f8a3 	bl	8009712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f000 f8b4 	bl	800973a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2200      	movs	r2, #0
 80095d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0310 	and.w	r3, r3, #16
 80095e2:	2b10      	cmp	r3, #16
 80095e4:	d122      	bne.n	800962c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f003 0310 	and.w	r3, r3, #16
 80095f0:	2b10      	cmp	r3, #16
 80095f2:	d11b      	bne.n	800962c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0210 	mvn.w	r2, #16
 80095fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2208      	movs	r2, #8
 8009602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	69db      	ldr	r3, [r3, #28]
 800960a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800960e:	2b00      	cmp	r3, #0
 8009610:	d003      	beq.n	800961a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 f887 	bl	8009726 <HAL_TIM_IC_CaptureCallback>
 8009618:	e005      	b.n	8009626 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f879 	bl	8009712 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f88a 	bl	800973a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b01      	cmp	r3, #1
 8009638:	d10e      	bne.n	8009658 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	68db      	ldr	r3, [r3, #12]
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	2b01      	cmp	r3, #1
 8009646:	d107      	bne.n	8009658 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	f06f 0201 	mvn.w	r2, #1
 8009650:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7f8 f972 	bl	800193c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	691b      	ldr	r3, [r3, #16]
 800965e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009662:	2b80      	cmp	r3, #128	; 0x80
 8009664:	d10e      	bne.n	8009684 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009670:	2b80      	cmp	r3, #128	; 0x80
 8009672:	d107      	bne.n	8009684 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800967c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f9bc 	bl	80099fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	691b      	ldr	r3, [r3, #16]
 800968a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800968e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009692:	d10e      	bne.n	80096b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800969e:	2b80      	cmp	r3, #128	; 0x80
 80096a0:	d107      	bne.n	80096b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80096aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f000 f9af 	bl	8009a10 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096bc:	2b40      	cmp	r3, #64	; 0x40
 80096be:	d10e      	bne.n	80096de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096ca:	2b40      	cmp	r3, #64	; 0x40
 80096cc:	d107      	bne.n	80096de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80096d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f000 f838 	bl	800974e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	f003 0320 	and.w	r3, r3, #32
 80096e8:	2b20      	cmp	r3, #32
 80096ea:	d10e      	bne.n	800970a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b20      	cmp	r3, #32
 80096f8:	d107      	bne.n	800970a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	f06f 0220 	mvn.w	r2, #32
 8009702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f96f 	bl	80099e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800970a:	bf00      	nop
 800970c:	3708      	adds	r7, #8
 800970e:	46bd      	mov	sp, r7
 8009710:	bd80      	pop	{r7, pc}

08009712 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009712:	b480      	push	{r7}
 8009714:	b083      	sub	sp, #12
 8009716:	af00      	add	r7, sp, #0
 8009718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800971a:	bf00      	nop
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009726:	b480      	push	{r7}
 8009728:	b083      	sub	sp, #12
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800972e:	bf00      	nop
 8009730:	370c      	adds	r7, #12
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800973a:	b480      	push	{r7}
 800973c:	b083      	sub	sp, #12
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009742:	bf00      	nop
 8009744:	370c      	adds	r7, #12
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr

0800974e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800974e:	b480      	push	{r7}
 8009750:	b083      	sub	sp, #12
 8009752:	af00      	add	r7, sp, #0
 8009754:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009756:	bf00      	nop
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr
	...

08009764 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009764:	b480      	push	{r7}
 8009766:	b085      	sub	sp, #20
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a44      	ldr	r2, [pc, #272]	; (8009888 <TIM_Base_SetConfig+0x124>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d013      	beq.n	80097a4 <TIM_Base_SetConfig+0x40>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009782:	d00f      	beq.n	80097a4 <TIM_Base_SetConfig+0x40>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a41      	ldr	r2, [pc, #260]	; (800988c <TIM_Base_SetConfig+0x128>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d00b      	beq.n	80097a4 <TIM_Base_SetConfig+0x40>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4a40      	ldr	r2, [pc, #256]	; (8009890 <TIM_Base_SetConfig+0x12c>)
 8009790:	4293      	cmp	r3, r2
 8009792:	d007      	beq.n	80097a4 <TIM_Base_SetConfig+0x40>
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a3f      	ldr	r2, [pc, #252]	; (8009894 <TIM_Base_SetConfig+0x130>)
 8009798:	4293      	cmp	r3, r2
 800979a:	d003      	beq.n	80097a4 <TIM_Base_SetConfig+0x40>
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	4a3e      	ldr	r2, [pc, #248]	; (8009898 <TIM_Base_SetConfig+0x134>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d108      	bne.n	80097b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	4a33      	ldr	r2, [pc, #204]	; (8009888 <TIM_Base_SetConfig+0x124>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d027      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097c4:	d023      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4a30      	ldr	r2, [pc, #192]	; (800988c <TIM_Base_SetConfig+0x128>)
 80097ca:	4293      	cmp	r3, r2
 80097cc:	d01f      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	4a2f      	ldr	r2, [pc, #188]	; (8009890 <TIM_Base_SetConfig+0x12c>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d01b      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	4a2e      	ldr	r2, [pc, #184]	; (8009894 <TIM_Base_SetConfig+0x130>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d017      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4a2d      	ldr	r2, [pc, #180]	; (8009898 <TIM_Base_SetConfig+0x134>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d013      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	4a2c      	ldr	r2, [pc, #176]	; (800989c <TIM_Base_SetConfig+0x138>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d00f      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	4a2b      	ldr	r2, [pc, #172]	; (80098a0 <TIM_Base_SetConfig+0x13c>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d00b      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	4a2a      	ldr	r2, [pc, #168]	; (80098a4 <TIM_Base_SetConfig+0x140>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d007      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	4a29      	ldr	r2, [pc, #164]	; (80098a8 <TIM_Base_SetConfig+0x144>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d003      	beq.n	800980e <TIM_Base_SetConfig+0xaa>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a28      	ldr	r2, [pc, #160]	; (80098ac <TIM_Base_SetConfig+0x148>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d108      	bne.n	8009820 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	4313      	orrs	r3, r2
 800981e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	695b      	ldr	r3, [r3, #20]
 800982a:	4313      	orrs	r3, r2
 800982c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	689a      	ldr	r2, [r3, #8]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a10      	ldr	r2, [pc, #64]	; (8009888 <TIM_Base_SetConfig+0x124>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d00f      	beq.n	800986c <TIM_Base_SetConfig+0x108>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a12      	ldr	r2, [pc, #72]	; (8009898 <TIM_Base_SetConfig+0x134>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d00b      	beq.n	800986c <TIM_Base_SetConfig+0x108>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a11      	ldr	r2, [pc, #68]	; (800989c <TIM_Base_SetConfig+0x138>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d007      	beq.n	800986c <TIM_Base_SetConfig+0x108>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a10      	ldr	r2, [pc, #64]	; (80098a0 <TIM_Base_SetConfig+0x13c>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d003      	beq.n	800986c <TIM_Base_SetConfig+0x108>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a0f      	ldr	r2, [pc, #60]	; (80098a4 <TIM_Base_SetConfig+0x140>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d103      	bne.n	8009874 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	691a      	ldr	r2, [r3, #16]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2201      	movs	r2, #1
 8009878:	615a      	str	r2, [r3, #20]
}
 800987a:	bf00      	nop
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	40010000 	.word	0x40010000
 800988c:	40000400 	.word	0x40000400
 8009890:	40000800 	.word	0x40000800
 8009894:	40000c00 	.word	0x40000c00
 8009898:	40010400 	.word	0x40010400
 800989c:	40014000 	.word	0x40014000
 80098a0:	40014400 	.word	0x40014400
 80098a4:	40014800 	.word	0x40014800
 80098a8:	4000e000 	.word	0x4000e000
 80098ac:	4000e400 	.word	0x4000e400

080098b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b085      	sub	sp, #20
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098c0:	2b01      	cmp	r3, #1
 80098c2:	d101      	bne.n	80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e077      	b.n	80099b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2202      	movs	r2, #2
 80098d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	689b      	ldr	r3, [r3, #8]
 80098e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a35      	ldr	r2, [pc, #212]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d004      	beq.n	80098fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a34      	ldr	r2, [pc, #208]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d108      	bne.n	800990e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009902:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	68fa      	ldr	r2, [r7, #12]
 800990a:	4313      	orrs	r3, r2
 800990c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009914:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	68fa      	ldr	r2, [r7, #12]
 800991c:	4313      	orrs	r3, r2
 800991e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	68fa      	ldr	r2, [r7, #12]
 8009926:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4a25      	ldr	r2, [pc, #148]	; (80099c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d02c      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800993a:	d027      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a22      	ldr	r2, [pc, #136]	; (80099cc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009942:	4293      	cmp	r3, r2
 8009944:	d022      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4a21      	ldr	r2, [pc, #132]	; (80099d0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d01d      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4a1f      	ldr	r2, [pc, #124]	; (80099d4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d018      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a1a      	ldr	r2, [pc, #104]	; (80099c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009960:	4293      	cmp	r3, r2
 8009962:	d013      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a1b      	ldr	r2, [pc, #108]	; (80099d8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d00e      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	4a1a      	ldr	r2, [pc, #104]	; (80099dc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d009      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a18      	ldr	r2, [pc, #96]	; (80099e0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d004      	beq.n	800998c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	4a17      	ldr	r2, [pc, #92]	; (80099e4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d10c      	bne.n	80099a6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009992:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	68ba      	ldr	r2, [r7, #8]
 800999a:	4313      	orrs	r3, r2
 800999c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2201      	movs	r2, #1
 80099aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2200      	movs	r2, #0
 80099b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80099b6:	2300      	movs	r3, #0
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr
 80099c4:	40010000 	.word	0x40010000
 80099c8:	40010400 	.word	0x40010400
 80099cc:	40000400 	.word	0x40000400
 80099d0:	40000800 	.word	0x40000800
 80099d4:	40000c00 	.word	0x40000c00
 80099d8:	40001800 	.word	0x40001800
 80099dc:	40014000 	.word	0x40014000
 80099e0:	4000e000 	.word	0x4000e000
 80099e4:	4000e400 	.word	0x4000e400

080099e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b083      	sub	sp, #12
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80099f0:	bf00      	nop
 80099f2:	370c      	adds	r7, #12
 80099f4:	46bd      	mov	sp, r7
 80099f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fa:	4770      	bx	lr

080099fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099fc:	b480      	push	{r7}
 80099fe:	b083      	sub	sp, #12
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d101      	bne.n	8009a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a32:	2301      	movs	r3, #1
 8009a34:	e042      	b.n	8009abc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d106      	bne.n	8009a4e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2200      	movs	r2, #0
 8009a44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7f8 fdf3 	bl	8002634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2224      	movs	r2, #36	; 0x24
 8009a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	f022 0201 	bic.w	r2, r2, #1
 8009a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f8c2 	bl	8009bf0 <UART_SetConfig>
 8009a6c:	4603      	mov	r3, r0
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e022      	b.n	8009abc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d002      	beq.n	8009a84 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 ff14 	bl	800a8ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	685a      	ldr	r2, [r3, #4]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689a      	ldr	r2, [r3, #8]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	681a      	ldr	r2, [r3, #0]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f042 0201 	orr.w	r2, r2, #1
 8009ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f000 ff9b 	bl	800a9f0 <UART_CheckIdleState>
 8009aba:	4603      	mov	r3, r0
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	3708      	adds	r7, #8
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	bd80      	pop	{r7, pc}

08009ac4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08a      	sub	sp, #40	; 0x28
 8009ac8:	af02      	add	r7, sp, #8
 8009aca:	60f8      	str	r0, [r7, #12]
 8009acc:	60b9      	str	r1, [r7, #8]
 8009ace:	603b      	str	r3, [r7, #0]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ada:	2b20      	cmp	r3, #32
 8009adc:	f040 8083 	bne.w	8009be6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ae0:	68bb      	ldr	r3, [r7, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d002      	beq.n	8009aec <HAL_UART_Transmit+0x28>
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e07b      	b.n	8009be8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d101      	bne.n	8009afe <HAL_UART_Transmit+0x3a>
 8009afa:	2302      	movs	r3, #2
 8009afc:	e074      	b.n	8009be8 <HAL_UART_Transmit+0x124>
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2201      	movs	r2, #1
 8009b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	2221      	movs	r2, #33	; 0x21
 8009b12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b16:	f7f8 ffd5 	bl	8002ac4 <HAL_GetTick>
 8009b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	88fa      	ldrh	r2, [r7, #6]
 8009b20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	88fa      	ldrh	r2, [r7, #6]
 8009b28:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b34:	d108      	bne.n	8009b48 <HAL_UART_Transmit+0x84>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	691b      	ldr	r3, [r3, #16]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d104      	bne.n	8009b48 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009b3e:	2300      	movs	r3, #0
 8009b40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	61bb      	str	r3, [r7, #24]
 8009b46:	e003      	b.n	8009b50 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009b58:	e02c      	b.n	8009bb4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	9300      	str	r3, [sp, #0]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	2200      	movs	r2, #0
 8009b62:	2180      	movs	r1, #128	; 0x80
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 ff8e 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009b70:	2303      	movs	r3, #3
 8009b72:	e039      	b.n	8009be8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d10b      	bne.n	8009b92 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	461a      	mov	r2, r3
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	3302      	adds	r3, #2
 8009b8e:	61bb      	str	r3, [r7, #24]
 8009b90:	e007      	b.n	8009ba2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b92:	69fb      	ldr	r3, [r7, #28]
 8009b94:	781a      	ldrb	r2, [r3, #0]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	3301      	adds	r3, #1
 8009ba0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	3b01      	subs	r3, #1
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1cc      	bne.n	8009b5a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	9300      	str	r3, [sp, #0]
 8009bc4:	697b      	ldr	r3, [r7, #20]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	2140      	movs	r1, #64	; 0x40
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 ff5b 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 8009bd0:	4603      	mov	r3, r0
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009bd6:	2303      	movs	r3, #3
 8009bd8:	e006      	b.n	8009be8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2220      	movs	r2, #32
 8009bde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009be2:	2300      	movs	r3, #0
 8009be4:	e000      	b.n	8009be8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009be6:	2302      	movs	r3, #2
  }
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3720      	adds	r7, #32
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009bf0:	b5b0      	push	{r4, r5, r7, lr}
 8009bf2:	b08e      	sub	sp, #56	; 0x38
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689a      	ldr	r2, [r3, #8]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	431a      	orrs	r2, r3
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	695b      	ldr	r3, [r3, #20]
 8009c0c:	431a      	orrs	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	69db      	ldr	r3, [r3, #28]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	4bbf      	ldr	r3, [pc, #764]	; (8009f1c <UART_SetConfig+0x32c>)
 8009c1e:	4013      	ands	r3, r2
 8009c20:	687a      	ldr	r2, [r7, #4]
 8009c22:	6812      	ldr	r2, [r2, #0]
 8009c24:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c26:	430b      	orrs	r3, r1
 8009c28:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	68da      	ldr	r2, [r3, #12]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	430a      	orrs	r2, r1
 8009c3e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	699b      	ldr	r3, [r3, #24]
 8009c44:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4ab5      	ldr	r2, [pc, #724]	; (8009f20 <UART_SetConfig+0x330>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d004      	beq.n	8009c5a <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c56:	4313      	orrs	r3, r2
 8009c58:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	689a      	ldr	r2, [r3, #8]
 8009c60:	4bb0      	ldr	r3, [pc, #704]	; (8009f24 <UART_SetConfig+0x334>)
 8009c62:	4013      	ands	r3, r2
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6812      	ldr	r2, [r2, #0]
 8009c68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c6a:	430b      	orrs	r3, r1
 8009c6c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c74:	f023 010f 	bic.w	r1, r3, #15
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	430a      	orrs	r2, r1
 8009c82:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4aa7      	ldr	r2, [pc, #668]	; (8009f28 <UART_SetConfig+0x338>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d176      	bne.n	8009d7c <UART_SetConfig+0x18c>
 8009c8e:	4ba7      	ldr	r3, [pc, #668]	; (8009f2c <UART_SetConfig+0x33c>)
 8009c90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c96:	2b28      	cmp	r3, #40	; 0x28
 8009c98:	d86c      	bhi.n	8009d74 <UART_SetConfig+0x184>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <UART_SetConfig+0xb0>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009d45 	.word	0x08009d45
 8009ca4:	08009d75 	.word	0x08009d75
 8009ca8:	08009d75 	.word	0x08009d75
 8009cac:	08009d75 	.word	0x08009d75
 8009cb0:	08009d75 	.word	0x08009d75
 8009cb4:	08009d75 	.word	0x08009d75
 8009cb8:	08009d75 	.word	0x08009d75
 8009cbc:	08009d75 	.word	0x08009d75
 8009cc0:	08009d4d 	.word	0x08009d4d
 8009cc4:	08009d75 	.word	0x08009d75
 8009cc8:	08009d75 	.word	0x08009d75
 8009ccc:	08009d75 	.word	0x08009d75
 8009cd0:	08009d75 	.word	0x08009d75
 8009cd4:	08009d75 	.word	0x08009d75
 8009cd8:	08009d75 	.word	0x08009d75
 8009cdc:	08009d75 	.word	0x08009d75
 8009ce0:	08009d55 	.word	0x08009d55
 8009ce4:	08009d75 	.word	0x08009d75
 8009ce8:	08009d75 	.word	0x08009d75
 8009cec:	08009d75 	.word	0x08009d75
 8009cf0:	08009d75 	.word	0x08009d75
 8009cf4:	08009d75 	.word	0x08009d75
 8009cf8:	08009d75 	.word	0x08009d75
 8009cfc:	08009d75 	.word	0x08009d75
 8009d00:	08009d5d 	.word	0x08009d5d
 8009d04:	08009d75 	.word	0x08009d75
 8009d08:	08009d75 	.word	0x08009d75
 8009d0c:	08009d75 	.word	0x08009d75
 8009d10:	08009d75 	.word	0x08009d75
 8009d14:	08009d75 	.word	0x08009d75
 8009d18:	08009d75 	.word	0x08009d75
 8009d1c:	08009d75 	.word	0x08009d75
 8009d20:	08009d65 	.word	0x08009d65
 8009d24:	08009d75 	.word	0x08009d75
 8009d28:	08009d75 	.word	0x08009d75
 8009d2c:	08009d75 	.word	0x08009d75
 8009d30:	08009d75 	.word	0x08009d75
 8009d34:	08009d75 	.word	0x08009d75
 8009d38:	08009d75 	.word	0x08009d75
 8009d3c:	08009d75 	.word	0x08009d75
 8009d40:	08009d6d 	.word	0x08009d6d
 8009d44:	2301      	movs	r3, #1
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e326      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009d4c:	2304      	movs	r3, #4
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	e322      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009d54:	2308      	movs	r3, #8
 8009d56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5a:	e31e      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009d5c:	2310      	movs	r3, #16
 8009d5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d62:	e31a      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009d64:	2320      	movs	r3, #32
 8009d66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d6a:	e316      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009d6c:	2340      	movs	r3, #64	; 0x40
 8009d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d72:	e312      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009d74:	2380      	movs	r3, #128	; 0x80
 8009d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d7a:	e30e      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a6b      	ldr	r2, [pc, #428]	; (8009f30 <UART_SetConfig+0x340>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d130      	bne.n	8009de8 <UART_SetConfig+0x1f8>
 8009d86:	4b69      	ldr	r3, [pc, #420]	; (8009f2c <UART_SetConfig+0x33c>)
 8009d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d8a:	f003 0307 	and.w	r3, r3, #7
 8009d8e:	2b05      	cmp	r3, #5
 8009d90:	d826      	bhi.n	8009de0 <UART_SetConfig+0x1f0>
 8009d92:	a201      	add	r2, pc, #4	; (adr r2, 8009d98 <UART_SetConfig+0x1a8>)
 8009d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d98:	08009db1 	.word	0x08009db1
 8009d9c:	08009db9 	.word	0x08009db9
 8009da0:	08009dc1 	.word	0x08009dc1
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009dd1 	.word	0x08009dd1
 8009dac:	08009dd9 	.word	0x08009dd9
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db6:	e2f0      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009db8:	2304      	movs	r3, #4
 8009dba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dbe:	e2ec      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc6:	e2e8      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009dc8:	2310      	movs	r3, #16
 8009dca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dce:	e2e4      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009dd0:	2320      	movs	r3, #32
 8009dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd6:	e2e0      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009dd8:	2340      	movs	r3, #64	; 0x40
 8009dda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dde:	e2dc      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009de0:	2380      	movs	r3, #128	; 0x80
 8009de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009de6:	e2d8      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a51      	ldr	r2, [pc, #324]	; (8009f34 <UART_SetConfig+0x344>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d130      	bne.n	8009e54 <UART_SetConfig+0x264>
 8009df2:	4b4e      	ldr	r3, [pc, #312]	; (8009f2c <UART_SetConfig+0x33c>)
 8009df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009df6:	f003 0307 	and.w	r3, r3, #7
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	d826      	bhi.n	8009e4c <UART_SetConfig+0x25c>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <UART_SetConfig+0x214>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009e1d 	.word	0x08009e1d
 8009e08:	08009e25 	.word	0x08009e25
 8009e0c:	08009e2d 	.word	0x08009e2d
 8009e10:	08009e35 	.word	0x08009e35
 8009e14:	08009e3d 	.word	0x08009e3d
 8009e18:	08009e45 	.word	0x08009e45
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e22:	e2ba      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e24:	2304      	movs	r3, #4
 8009e26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2a:	e2b6      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e2c:	2308      	movs	r3, #8
 8009e2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e32:	e2b2      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e34:	2310      	movs	r3, #16
 8009e36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3a:	e2ae      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e3c:	2320      	movs	r3, #32
 8009e3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e42:	e2aa      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e44:	2340      	movs	r3, #64	; 0x40
 8009e46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e4a:	e2a6      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e4c:	2380      	movs	r3, #128	; 0x80
 8009e4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e52:	e2a2      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a37      	ldr	r2, [pc, #220]	; (8009f38 <UART_SetConfig+0x348>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d130      	bne.n	8009ec0 <UART_SetConfig+0x2d0>
 8009e5e:	4b33      	ldr	r3, [pc, #204]	; (8009f2c <UART_SetConfig+0x33c>)
 8009e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b05      	cmp	r3, #5
 8009e68:	d826      	bhi.n	8009eb8 <UART_SetConfig+0x2c8>
 8009e6a:	a201      	add	r2, pc, #4	; (adr r2, 8009e70 <UART_SetConfig+0x280>)
 8009e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e70:	08009e89 	.word	0x08009e89
 8009e74:	08009e91 	.word	0x08009e91
 8009e78:	08009e99 	.word	0x08009e99
 8009e7c:	08009ea1 	.word	0x08009ea1
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009eb1 	.word	0x08009eb1
 8009e88:	2300      	movs	r3, #0
 8009e8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8e:	e284      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e90:	2304      	movs	r3, #4
 8009e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e96:	e280      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009e98:	2308      	movs	r3, #8
 8009e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9e:	e27c      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009ea0:	2310      	movs	r3, #16
 8009ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ea6:	e278      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009ea8:	2320      	movs	r3, #32
 8009eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eae:	e274      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009eb6:	e270      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009eb8:	2380      	movs	r3, #128	; 0x80
 8009eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ebe:	e26c      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a1d      	ldr	r2, [pc, #116]	; (8009f3c <UART_SetConfig+0x34c>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d142      	bne.n	8009f50 <UART_SetConfig+0x360>
 8009eca:	4b18      	ldr	r3, [pc, #96]	; (8009f2c <UART_SetConfig+0x33c>)
 8009ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ece:	f003 0307 	and.w	r3, r3, #7
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	d838      	bhi.n	8009f48 <UART_SetConfig+0x358>
 8009ed6:	a201      	add	r2, pc, #4	; (adr r2, 8009edc <UART_SetConfig+0x2ec>)
 8009ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009edc:	08009ef5 	.word	0x08009ef5
 8009ee0:	08009efd 	.word	0x08009efd
 8009ee4:	08009f05 	.word	0x08009f05
 8009ee8:	08009f0d 	.word	0x08009f0d
 8009eec:	08009f15 	.word	0x08009f15
 8009ef0:	08009f41 	.word	0x08009f41
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009efa:	e24e      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009efc:	2304      	movs	r3, #4
 8009efe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f02:	e24a      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009f04:	2308      	movs	r3, #8
 8009f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f0a:	e246      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009f0c:	2310      	movs	r3, #16
 8009f0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f12:	e242      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009f14:	2320      	movs	r3, #32
 8009f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f1a:	e23e      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009f1c:	cfff69f3 	.word	0xcfff69f3
 8009f20:	58000c00 	.word	0x58000c00
 8009f24:	11fff4ff 	.word	0x11fff4ff
 8009f28:	40011000 	.word	0x40011000
 8009f2c:	58024400 	.word	0x58024400
 8009f30:	40004400 	.word	0x40004400
 8009f34:	40004800 	.word	0x40004800
 8009f38:	40004c00 	.word	0x40004c00
 8009f3c:	40005000 	.word	0x40005000
 8009f40:	2340      	movs	r3, #64	; 0x40
 8009f42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f46:	e228      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009f48:	2380      	movs	r3, #128	; 0x80
 8009f4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f4e:	e224      	b.n	800a39a <UART_SetConfig+0x7aa>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4ab1      	ldr	r2, [pc, #708]	; (800a21c <UART_SetConfig+0x62c>)
 8009f56:	4293      	cmp	r3, r2
 8009f58:	d176      	bne.n	800a048 <UART_SetConfig+0x458>
 8009f5a:	4bb1      	ldr	r3, [pc, #708]	; (800a220 <UART_SetConfig+0x630>)
 8009f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f62:	2b28      	cmp	r3, #40	; 0x28
 8009f64:	d86c      	bhi.n	800a040 <UART_SetConfig+0x450>
 8009f66:	a201      	add	r2, pc, #4	; (adr r2, 8009f6c <UART_SetConfig+0x37c>)
 8009f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f6c:	0800a011 	.word	0x0800a011
 8009f70:	0800a041 	.word	0x0800a041
 8009f74:	0800a041 	.word	0x0800a041
 8009f78:	0800a041 	.word	0x0800a041
 8009f7c:	0800a041 	.word	0x0800a041
 8009f80:	0800a041 	.word	0x0800a041
 8009f84:	0800a041 	.word	0x0800a041
 8009f88:	0800a041 	.word	0x0800a041
 8009f8c:	0800a019 	.word	0x0800a019
 8009f90:	0800a041 	.word	0x0800a041
 8009f94:	0800a041 	.word	0x0800a041
 8009f98:	0800a041 	.word	0x0800a041
 8009f9c:	0800a041 	.word	0x0800a041
 8009fa0:	0800a041 	.word	0x0800a041
 8009fa4:	0800a041 	.word	0x0800a041
 8009fa8:	0800a041 	.word	0x0800a041
 8009fac:	0800a021 	.word	0x0800a021
 8009fb0:	0800a041 	.word	0x0800a041
 8009fb4:	0800a041 	.word	0x0800a041
 8009fb8:	0800a041 	.word	0x0800a041
 8009fbc:	0800a041 	.word	0x0800a041
 8009fc0:	0800a041 	.word	0x0800a041
 8009fc4:	0800a041 	.word	0x0800a041
 8009fc8:	0800a041 	.word	0x0800a041
 8009fcc:	0800a029 	.word	0x0800a029
 8009fd0:	0800a041 	.word	0x0800a041
 8009fd4:	0800a041 	.word	0x0800a041
 8009fd8:	0800a041 	.word	0x0800a041
 8009fdc:	0800a041 	.word	0x0800a041
 8009fe0:	0800a041 	.word	0x0800a041
 8009fe4:	0800a041 	.word	0x0800a041
 8009fe8:	0800a041 	.word	0x0800a041
 8009fec:	0800a031 	.word	0x0800a031
 8009ff0:	0800a041 	.word	0x0800a041
 8009ff4:	0800a041 	.word	0x0800a041
 8009ff8:	0800a041 	.word	0x0800a041
 8009ffc:	0800a041 	.word	0x0800a041
 800a000:	0800a041 	.word	0x0800a041
 800a004:	0800a041 	.word	0x0800a041
 800a008:	0800a041 	.word	0x0800a041
 800a00c:	0800a039 	.word	0x0800a039
 800a010:	2301      	movs	r3, #1
 800a012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a016:	e1c0      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a018:	2304      	movs	r3, #4
 800a01a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01e:	e1bc      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a020:	2308      	movs	r3, #8
 800a022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a026:	e1b8      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a028:	2310      	movs	r3, #16
 800a02a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02e:	e1b4      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a030:	2320      	movs	r3, #32
 800a032:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a036:	e1b0      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a038:	2340      	movs	r3, #64	; 0x40
 800a03a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a03e:	e1ac      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a040:	2380      	movs	r3, #128	; 0x80
 800a042:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a046:	e1a8      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a75      	ldr	r2, [pc, #468]	; (800a224 <UART_SetConfig+0x634>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d130      	bne.n	800a0b4 <UART_SetConfig+0x4c4>
 800a052:	4b73      	ldr	r3, [pc, #460]	; (800a220 <UART_SetConfig+0x630>)
 800a054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a056:	f003 0307 	and.w	r3, r3, #7
 800a05a:	2b05      	cmp	r3, #5
 800a05c:	d826      	bhi.n	800a0ac <UART_SetConfig+0x4bc>
 800a05e:	a201      	add	r2, pc, #4	; (adr r2, 800a064 <UART_SetConfig+0x474>)
 800a060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a064:	0800a07d 	.word	0x0800a07d
 800a068:	0800a085 	.word	0x0800a085
 800a06c:	0800a08d 	.word	0x0800a08d
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a09d 	.word	0x0800a09d
 800a078:	0800a0a5 	.word	0x0800a0a5
 800a07c:	2300      	movs	r3, #0
 800a07e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a082:	e18a      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a084:	2304      	movs	r3, #4
 800a086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08a:	e186      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a08c:	2308      	movs	r3, #8
 800a08e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a092:	e182      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a094:	2310      	movs	r3, #16
 800a096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09a:	e17e      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a09c:	2320      	movs	r3, #32
 800a09e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a2:	e17a      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a0a4:	2340      	movs	r3, #64	; 0x40
 800a0a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0aa:	e176      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a0ac:	2380      	movs	r3, #128	; 0x80
 800a0ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b2:	e172      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a5b      	ldr	r2, [pc, #364]	; (800a228 <UART_SetConfig+0x638>)
 800a0ba:	4293      	cmp	r3, r2
 800a0bc:	d130      	bne.n	800a120 <UART_SetConfig+0x530>
 800a0be:	4b58      	ldr	r3, [pc, #352]	; (800a220 <UART_SetConfig+0x630>)
 800a0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c2:	f003 0307 	and.w	r3, r3, #7
 800a0c6:	2b05      	cmp	r3, #5
 800a0c8:	d826      	bhi.n	800a118 <UART_SetConfig+0x528>
 800a0ca:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <UART_SetConfig+0x4e0>)
 800a0cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d0:	0800a0e9 	.word	0x0800a0e9
 800a0d4:	0800a0f1 	.word	0x0800a0f1
 800a0d8:	0800a0f9 	.word	0x0800a0f9
 800a0dc:	0800a101 	.word	0x0800a101
 800a0e0:	0800a109 	.word	0x0800a109
 800a0e4:	0800a111 	.word	0x0800a111
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ee:	e154      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a0f0:	2304      	movs	r3, #4
 800a0f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f6:	e150      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a0f8:	2308      	movs	r3, #8
 800a0fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fe:	e14c      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a100:	2310      	movs	r3, #16
 800a102:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a106:	e148      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a108:	2320      	movs	r3, #32
 800a10a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10e:	e144      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a110:	2340      	movs	r3, #64	; 0x40
 800a112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a116:	e140      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a118:	2380      	movs	r3, #128	; 0x80
 800a11a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a11e:	e13c      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	4a41      	ldr	r2, [pc, #260]	; (800a22c <UART_SetConfig+0x63c>)
 800a126:	4293      	cmp	r3, r2
 800a128:	f040 8082 	bne.w	800a230 <UART_SetConfig+0x640>
 800a12c:	4b3c      	ldr	r3, [pc, #240]	; (800a220 <UART_SetConfig+0x630>)
 800a12e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a130:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a134:	2b28      	cmp	r3, #40	; 0x28
 800a136:	d86d      	bhi.n	800a214 <UART_SetConfig+0x624>
 800a138:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <UART_SetConfig+0x550>)
 800a13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a13e:	bf00      	nop
 800a140:	0800a1e5 	.word	0x0800a1e5
 800a144:	0800a215 	.word	0x0800a215
 800a148:	0800a215 	.word	0x0800a215
 800a14c:	0800a215 	.word	0x0800a215
 800a150:	0800a215 	.word	0x0800a215
 800a154:	0800a215 	.word	0x0800a215
 800a158:	0800a215 	.word	0x0800a215
 800a15c:	0800a215 	.word	0x0800a215
 800a160:	0800a1ed 	.word	0x0800a1ed
 800a164:	0800a215 	.word	0x0800a215
 800a168:	0800a215 	.word	0x0800a215
 800a16c:	0800a215 	.word	0x0800a215
 800a170:	0800a215 	.word	0x0800a215
 800a174:	0800a215 	.word	0x0800a215
 800a178:	0800a215 	.word	0x0800a215
 800a17c:	0800a215 	.word	0x0800a215
 800a180:	0800a1f5 	.word	0x0800a1f5
 800a184:	0800a215 	.word	0x0800a215
 800a188:	0800a215 	.word	0x0800a215
 800a18c:	0800a215 	.word	0x0800a215
 800a190:	0800a215 	.word	0x0800a215
 800a194:	0800a215 	.word	0x0800a215
 800a198:	0800a215 	.word	0x0800a215
 800a19c:	0800a215 	.word	0x0800a215
 800a1a0:	0800a1fd 	.word	0x0800a1fd
 800a1a4:	0800a215 	.word	0x0800a215
 800a1a8:	0800a215 	.word	0x0800a215
 800a1ac:	0800a215 	.word	0x0800a215
 800a1b0:	0800a215 	.word	0x0800a215
 800a1b4:	0800a215 	.word	0x0800a215
 800a1b8:	0800a215 	.word	0x0800a215
 800a1bc:	0800a215 	.word	0x0800a215
 800a1c0:	0800a205 	.word	0x0800a205
 800a1c4:	0800a215 	.word	0x0800a215
 800a1c8:	0800a215 	.word	0x0800a215
 800a1cc:	0800a215 	.word	0x0800a215
 800a1d0:	0800a215 	.word	0x0800a215
 800a1d4:	0800a215 	.word	0x0800a215
 800a1d8:	0800a215 	.word	0x0800a215
 800a1dc:	0800a215 	.word	0x0800a215
 800a1e0:	0800a20d 	.word	0x0800a20d
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ea:	e0d6      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a1ec:	2304      	movs	r3, #4
 800a1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f2:	e0d2      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a1f4:	2308      	movs	r3, #8
 800a1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1fa:	e0ce      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a1fc:	2310      	movs	r3, #16
 800a1fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a202:	e0ca      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a204:	2320      	movs	r3, #32
 800a206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a20a:	e0c6      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a20c:	2340      	movs	r3, #64	; 0x40
 800a20e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a212:	e0c2      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a214:	2380      	movs	r3, #128	; 0x80
 800a216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a21a:	e0be      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a21c:	40011400 	.word	0x40011400
 800a220:	58024400 	.word	0x58024400
 800a224:	40007800 	.word	0x40007800
 800a228:	40007c00 	.word	0x40007c00
 800a22c:	40011800 	.word	0x40011800
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4aad      	ldr	r2, [pc, #692]	; (800a4ec <UART_SetConfig+0x8fc>)
 800a236:	4293      	cmp	r3, r2
 800a238:	d176      	bne.n	800a328 <UART_SetConfig+0x738>
 800a23a:	4bad      	ldr	r3, [pc, #692]	; (800a4f0 <UART_SetConfig+0x900>)
 800a23c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a23e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a242:	2b28      	cmp	r3, #40	; 0x28
 800a244:	d86c      	bhi.n	800a320 <UART_SetConfig+0x730>
 800a246:	a201      	add	r2, pc, #4	; (adr r2, 800a24c <UART_SetConfig+0x65c>)
 800a248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a24c:	0800a2f1 	.word	0x0800a2f1
 800a250:	0800a321 	.word	0x0800a321
 800a254:	0800a321 	.word	0x0800a321
 800a258:	0800a321 	.word	0x0800a321
 800a25c:	0800a321 	.word	0x0800a321
 800a260:	0800a321 	.word	0x0800a321
 800a264:	0800a321 	.word	0x0800a321
 800a268:	0800a321 	.word	0x0800a321
 800a26c:	0800a2f9 	.word	0x0800a2f9
 800a270:	0800a321 	.word	0x0800a321
 800a274:	0800a321 	.word	0x0800a321
 800a278:	0800a321 	.word	0x0800a321
 800a27c:	0800a321 	.word	0x0800a321
 800a280:	0800a321 	.word	0x0800a321
 800a284:	0800a321 	.word	0x0800a321
 800a288:	0800a321 	.word	0x0800a321
 800a28c:	0800a301 	.word	0x0800a301
 800a290:	0800a321 	.word	0x0800a321
 800a294:	0800a321 	.word	0x0800a321
 800a298:	0800a321 	.word	0x0800a321
 800a29c:	0800a321 	.word	0x0800a321
 800a2a0:	0800a321 	.word	0x0800a321
 800a2a4:	0800a321 	.word	0x0800a321
 800a2a8:	0800a321 	.word	0x0800a321
 800a2ac:	0800a309 	.word	0x0800a309
 800a2b0:	0800a321 	.word	0x0800a321
 800a2b4:	0800a321 	.word	0x0800a321
 800a2b8:	0800a321 	.word	0x0800a321
 800a2bc:	0800a321 	.word	0x0800a321
 800a2c0:	0800a321 	.word	0x0800a321
 800a2c4:	0800a321 	.word	0x0800a321
 800a2c8:	0800a321 	.word	0x0800a321
 800a2cc:	0800a311 	.word	0x0800a311
 800a2d0:	0800a321 	.word	0x0800a321
 800a2d4:	0800a321 	.word	0x0800a321
 800a2d8:	0800a321 	.word	0x0800a321
 800a2dc:	0800a321 	.word	0x0800a321
 800a2e0:	0800a321 	.word	0x0800a321
 800a2e4:	0800a321 	.word	0x0800a321
 800a2e8:	0800a321 	.word	0x0800a321
 800a2ec:	0800a319 	.word	0x0800a319
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2f6:	e050      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a2f8:	2304      	movs	r3, #4
 800a2fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fe:	e04c      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a300:	2308      	movs	r3, #8
 800a302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a306:	e048      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a308:	2310      	movs	r3, #16
 800a30a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30e:	e044      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a310:	2320      	movs	r3, #32
 800a312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a316:	e040      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a318:	2340      	movs	r3, #64	; 0x40
 800a31a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a31e:	e03c      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a320:	2380      	movs	r3, #128	; 0x80
 800a322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a326:	e038      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	4a71      	ldr	r2, [pc, #452]	; (800a4f4 <UART_SetConfig+0x904>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d130      	bne.n	800a394 <UART_SetConfig+0x7a4>
 800a332:	4b6f      	ldr	r3, [pc, #444]	; (800a4f0 <UART_SetConfig+0x900>)
 800a334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a336:	f003 0307 	and.w	r3, r3, #7
 800a33a:	2b05      	cmp	r3, #5
 800a33c:	d826      	bhi.n	800a38c <UART_SetConfig+0x79c>
 800a33e:	a201      	add	r2, pc, #4	; (adr r2, 800a344 <UART_SetConfig+0x754>)
 800a340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a344:	0800a35d 	.word	0x0800a35d
 800a348:	0800a365 	.word	0x0800a365
 800a34c:	0800a36d 	.word	0x0800a36d
 800a350:	0800a375 	.word	0x0800a375
 800a354:	0800a37d 	.word	0x0800a37d
 800a358:	0800a385 	.word	0x0800a385
 800a35c:	2302      	movs	r3, #2
 800a35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a362:	e01a      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a364:	2304      	movs	r3, #4
 800a366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36a:	e016      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a36c:	2308      	movs	r3, #8
 800a36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a372:	e012      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a374:	2310      	movs	r3, #16
 800a376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37a:	e00e      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a37c:	2320      	movs	r3, #32
 800a37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a382:	e00a      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a384:	2340      	movs	r3, #64	; 0x40
 800a386:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a38a:	e006      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a38c:	2380      	movs	r3, #128	; 0x80
 800a38e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a392:	e002      	b.n	800a39a <UART_SetConfig+0x7aa>
 800a394:	2380      	movs	r3, #128	; 0x80
 800a396:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	4a55      	ldr	r2, [pc, #340]	; (800a4f4 <UART_SetConfig+0x904>)
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	f040 80f0 	bne.w	800a586 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a3a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a3aa:	2b20      	cmp	r3, #32
 800a3ac:	dc46      	bgt.n	800a43c <UART_SetConfig+0x84c>
 800a3ae:	2b02      	cmp	r3, #2
 800a3b0:	db75      	blt.n	800a49e <UART_SetConfig+0x8ae>
 800a3b2:	3b02      	subs	r3, #2
 800a3b4:	2b1e      	cmp	r3, #30
 800a3b6:	d872      	bhi.n	800a49e <UART_SetConfig+0x8ae>
 800a3b8:	a201      	add	r2, pc, #4	; (adr r2, 800a3c0 <UART_SetConfig+0x7d0>)
 800a3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3be:	bf00      	nop
 800a3c0:	0800a443 	.word	0x0800a443
 800a3c4:	0800a49f 	.word	0x0800a49f
 800a3c8:	0800a44b 	.word	0x0800a44b
 800a3cc:	0800a49f 	.word	0x0800a49f
 800a3d0:	0800a49f 	.word	0x0800a49f
 800a3d4:	0800a49f 	.word	0x0800a49f
 800a3d8:	0800a45b 	.word	0x0800a45b
 800a3dc:	0800a49f 	.word	0x0800a49f
 800a3e0:	0800a49f 	.word	0x0800a49f
 800a3e4:	0800a49f 	.word	0x0800a49f
 800a3e8:	0800a49f 	.word	0x0800a49f
 800a3ec:	0800a49f 	.word	0x0800a49f
 800a3f0:	0800a49f 	.word	0x0800a49f
 800a3f4:	0800a49f 	.word	0x0800a49f
 800a3f8:	0800a46b 	.word	0x0800a46b
 800a3fc:	0800a49f 	.word	0x0800a49f
 800a400:	0800a49f 	.word	0x0800a49f
 800a404:	0800a49f 	.word	0x0800a49f
 800a408:	0800a49f 	.word	0x0800a49f
 800a40c:	0800a49f 	.word	0x0800a49f
 800a410:	0800a49f 	.word	0x0800a49f
 800a414:	0800a49f 	.word	0x0800a49f
 800a418:	0800a49f 	.word	0x0800a49f
 800a41c:	0800a49f 	.word	0x0800a49f
 800a420:	0800a49f 	.word	0x0800a49f
 800a424:	0800a49f 	.word	0x0800a49f
 800a428:	0800a49f 	.word	0x0800a49f
 800a42c:	0800a49f 	.word	0x0800a49f
 800a430:	0800a49f 	.word	0x0800a49f
 800a434:	0800a49f 	.word	0x0800a49f
 800a438:	0800a491 	.word	0x0800a491
 800a43c:	2b40      	cmp	r3, #64	; 0x40
 800a43e:	d02a      	beq.n	800a496 <UART_SetConfig+0x8a6>
 800a440:	e02d      	b.n	800a49e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a442:	f7fd ff67 	bl	8008314 <HAL_RCCEx_GetD3PCLK1Freq>
 800a446:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a448:	e02f      	b.n	800a4aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a44a:	f107 0314 	add.w	r3, r7, #20
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fd ff76 	bl	8008340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a454:	69bb      	ldr	r3, [r7, #24]
 800a456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a458:	e027      	b.n	800a4aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a45a:	f107 0308 	add.w	r3, r7, #8
 800a45e:	4618      	mov	r0, r3
 800a460:	f7fe f8c2 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a468:	e01f      	b.n	800a4aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a46a:	4b21      	ldr	r3, [pc, #132]	; (800a4f0 <UART_SetConfig+0x900>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 0320 	and.w	r3, r3, #32
 800a472:	2b00      	cmp	r3, #0
 800a474:	d009      	beq.n	800a48a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a476:	4b1e      	ldr	r3, [pc, #120]	; (800a4f0 <UART_SetConfig+0x900>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	08db      	lsrs	r3, r3, #3
 800a47c:	f003 0303 	and.w	r3, r3, #3
 800a480:	4a1d      	ldr	r2, [pc, #116]	; (800a4f8 <UART_SetConfig+0x908>)
 800a482:	fa22 f303 	lsr.w	r3, r2, r3
 800a486:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a488:	e00f      	b.n	800a4aa <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a48a:	4b1b      	ldr	r3, [pc, #108]	; (800a4f8 <UART_SetConfig+0x908>)
 800a48c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a48e:	e00c      	b.n	800a4aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a490:	4b1a      	ldr	r3, [pc, #104]	; (800a4fc <UART_SetConfig+0x90c>)
 800a492:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a494:	e009      	b.n	800a4aa <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a49a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a49c:	e005      	b.n	800a4aa <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a4a2:	2301      	movs	r3, #1
 800a4a4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a4a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	f000 81e6 	beq.w	800a87e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	4a12      	ldr	r2, [pc, #72]	; (800a500 <UART_SetConfig+0x910>)
 800a4b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4c4:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	4613      	mov	r3, r2
 800a4cc:	005b      	lsls	r3, r3, #1
 800a4ce:	4413      	add	r3, r2
 800a4d0:	6a3a      	ldr	r2, [r7, #32]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d305      	bcc.n	800a4e2 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a4dc:	6a3a      	ldr	r2, [r7, #32]
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d910      	bls.n	800a504 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a4e8:	e1c9      	b.n	800a87e <UART_SetConfig+0xc8e>
 800a4ea:	bf00      	nop
 800a4ec:	40011c00 	.word	0x40011c00
 800a4f0:	58024400 	.word	0x58024400
 800a4f4:	58000c00 	.word	0x58000c00
 800a4f8:	03d09000 	.word	0x03d09000
 800a4fc:	003d0900 	.word	0x003d0900
 800a500:	0801f1f4 	.word	0x0801f1f4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a506:	4618      	mov	r0, r3
 800a508:	f04f 0100 	mov.w	r1, #0
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a510:	4ac1      	ldr	r2, [pc, #772]	; (800a818 <UART_SetConfig+0xc28>)
 800a512:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a516:	b29a      	uxth	r2, r3
 800a518:	f04f 0300 	mov.w	r3, #0
 800a51c:	f7f5 ff60 	bl	80003e0 <__aeabi_uldivmod>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4610      	mov	r0, r2
 800a526:	4619      	mov	r1, r3
 800a528:	f04f 0200 	mov.w	r2, #0
 800a52c:	f04f 0300 	mov.w	r3, #0
 800a530:	020b      	lsls	r3, r1, #8
 800a532:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a536:	0202      	lsls	r2, r0, #8
 800a538:	6879      	ldr	r1, [r7, #4]
 800a53a:	6849      	ldr	r1, [r1, #4]
 800a53c:	0849      	lsrs	r1, r1, #1
 800a53e:	4608      	mov	r0, r1
 800a540:	f04f 0100 	mov.w	r1, #0
 800a544:	1814      	adds	r4, r2, r0
 800a546:	eb43 0501 	adc.w	r5, r3, r1
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	461a      	mov	r2, r3
 800a550:	f04f 0300 	mov.w	r3, #0
 800a554:	4620      	mov	r0, r4
 800a556:	4629      	mov	r1, r5
 800a558:	f7f5 ff42 	bl	80003e0 <__aeabi_uldivmod>
 800a55c:	4602      	mov	r2, r0
 800a55e:	460b      	mov	r3, r1
 800a560:	4613      	mov	r3, r2
 800a562:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a56a:	d308      	bcc.n	800a57e <UART_SetConfig+0x98e>
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a572:	d204      	bcs.n	800a57e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a57a:	60da      	str	r2, [r3, #12]
 800a57c:	e17f      	b.n	800a87e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a584:	e17b      	b.n	800a87e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	69db      	ldr	r3, [r3, #28]
 800a58a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a58e:	f040 80bd 	bne.w	800a70c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a592:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a596:	2b20      	cmp	r3, #32
 800a598:	dc48      	bgt.n	800a62c <UART_SetConfig+0xa3c>
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	db7b      	blt.n	800a696 <UART_SetConfig+0xaa6>
 800a59e:	2b20      	cmp	r3, #32
 800a5a0:	d879      	bhi.n	800a696 <UART_SetConfig+0xaa6>
 800a5a2:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <UART_SetConfig+0x9b8>)
 800a5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a8:	0800a633 	.word	0x0800a633
 800a5ac:	0800a63b 	.word	0x0800a63b
 800a5b0:	0800a697 	.word	0x0800a697
 800a5b4:	0800a697 	.word	0x0800a697
 800a5b8:	0800a643 	.word	0x0800a643
 800a5bc:	0800a697 	.word	0x0800a697
 800a5c0:	0800a697 	.word	0x0800a697
 800a5c4:	0800a697 	.word	0x0800a697
 800a5c8:	0800a653 	.word	0x0800a653
 800a5cc:	0800a697 	.word	0x0800a697
 800a5d0:	0800a697 	.word	0x0800a697
 800a5d4:	0800a697 	.word	0x0800a697
 800a5d8:	0800a697 	.word	0x0800a697
 800a5dc:	0800a697 	.word	0x0800a697
 800a5e0:	0800a697 	.word	0x0800a697
 800a5e4:	0800a697 	.word	0x0800a697
 800a5e8:	0800a663 	.word	0x0800a663
 800a5ec:	0800a697 	.word	0x0800a697
 800a5f0:	0800a697 	.word	0x0800a697
 800a5f4:	0800a697 	.word	0x0800a697
 800a5f8:	0800a697 	.word	0x0800a697
 800a5fc:	0800a697 	.word	0x0800a697
 800a600:	0800a697 	.word	0x0800a697
 800a604:	0800a697 	.word	0x0800a697
 800a608:	0800a697 	.word	0x0800a697
 800a60c:	0800a697 	.word	0x0800a697
 800a610:	0800a697 	.word	0x0800a697
 800a614:	0800a697 	.word	0x0800a697
 800a618:	0800a697 	.word	0x0800a697
 800a61c:	0800a697 	.word	0x0800a697
 800a620:	0800a697 	.word	0x0800a697
 800a624:	0800a697 	.word	0x0800a697
 800a628:	0800a689 	.word	0x0800a689
 800a62c:	2b40      	cmp	r3, #64	; 0x40
 800a62e:	d02e      	beq.n	800a68e <UART_SetConfig+0xa9e>
 800a630:	e031      	b.n	800a696 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a632:	f7fc ff07 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 800a636:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a638:	e033      	b.n	800a6a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a63a:	f7fc ff19 	bl	8007470 <HAL_RCC_GetPCLK2Freq>
 800a63e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a640:	e02f      	b.n	800a6a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a642:	f107 0314 	add.w	r3, r7, #20
 800a646:	4618      	mov	r0, r3
 800a648:	f7fd fe7a 	bl	8008340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a64c:	69bb      	ldr	r3, [r7, #24]
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a650:	e027      	b.n	800a6a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a652:	f107 0308 	add.w	r3, r7, #8
 800a656:	4618      	mov	r0, r3
 800a658:	f7fd ffc6 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a660:	e01f      	b.n	800a6a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a662:	4b6e      	ldr	r3, [pc, #440]	; (800a81c <UART_SetConfig+0xc2c>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 0320 	and.w	r3, r3, #32
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d009      	beq.n	800a682 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a66e:	4b6b      	ldr	r3, [pc, #428]	; (800a81c <UART_SetConfig+0xc2c>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	08db      	lsrs	r3, r3, #3
 800a674:	f003 0303 	and.w	r3, r3, #3
 800a678:	4a69      	ldr	r2, [pc, #420]	; (800a820 <UART_SetConfig+0xc30>)
 800a67a:	fa22 f303 	lsr.w	r3, r2, r3
 800a67e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a680:	e00f      	b.n	800a6a2 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a682:	4b67      	ldr	r3, [pc, #412]	; (800a820 <UART_SetConfig+0xc30>)
 800a684:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a686:	e00c      	b.n	800a6a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a688:	4b66      	ldr	r3, [pc, #408]	; (800a824 <UART_SetConfig+0xc34>)
 800a68a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a68c:	e009      	b.n	800a6a2 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a68e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a694:	e005      	b.n	800a6a2 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a696:	2300      	movs	r3, #0
 800a698:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a6a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 80ea 	beq.w	800a87e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	4a5a      	ldr	r2, [pc, #360]	; (800a818 <UART_SetConfig+0xc28>)
 800a6b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6bc:	005a      	lsls	r2, r3, #1
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	085b      	lsrs	r3, r3, #1
 800a6c4:	441a      	add	r2, r3
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d2:	2b0f      	cmp	r3, #15
 800a6d4:	d916      	bls.n	800a704 <UART_SetConfig+0xb14>
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6dc:	d212      	bcs.n	800a704 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	f023 030f 	bic.w	r3, r3, #15
 800a6e6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ea:	085b      	lsrs	r3, r3, #1
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	f003 0307 	and.w	r3, r3, #7
 800a6f2:	b29a      	uxth	r2, r3
 800a6f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a6f6:	4313      	orrs	r3, r2
 800a6f8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a700:	60da      	str	r2, [r3, #12]
 800a702:	e0bc      	b.n	800a87e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a704:	2301      	movs	r3, #1
 800a706:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a70a:	e0b8      	b.n	800a87e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a70c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a710:	2b20      	cmp	r3, #32
 800a712:	dc4b      	bgt.n	800a7ac <UART_SetConfig+0xbbc>
 800a714:	2b00      	cmp	r3, #0
 800a716:	f2c0 8087 	blt.w	800a828 <UART_SetConfig+0xc38>
 800a71a:	2b20      	cmp	r3, #32
 800a71c:	f200 8084 	bhi.w	800a828 <UART_SetConfig+0xc38>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <UART_SetConfig+0xb38>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a7b3 	.word	0x0800a7b3
 800a72c:	0800a7bb 	.word	0x0800a7bb
 800a730:	0800a829 	.word	0x0800a829
 800a734:	0800a829 	.word	0x0800a829
 800a738:	0800a7c3 	.word	0x0800a7c3
 800a73c:	0800a829 	.word	0x0800a829
 800a740:	0800a829 	.word	0x0800a829
 800a744:	0800a829 	.word	0x0800a829
 800a748:	0800a7d3 	.word	0x0800a7d3
 800a74c:	0800a829 	.word	0x0800a829
 800a750:	0800a829 	.word	0x0800a829
 800a754:	0800a829 	.word	0x0800a829
 800a758:	0800a829 	.word	0x0800a829
 800a75c:	0800a829 	.word	0x0800a829
 800a760:	0800a829 	.word	0x0800a829
 800a764:	0800a829 	.word	0x0800a829
 800a768:	0800a7e3 	.word	0x0800a7e3
 800a76c:	0800a829 	.word	0x0800a829
 800a770:	0800a829 	.word	0x0800a829
 800a774:	0800a829 	.word	0x0800a829
 800a778:	0800a829 	.word	0x0800a829
 800a77c:	0800a829 	.word	0x0800a829
 800a780:	0800a829 	.word	0x0800a829
 800a784:	0800a829 	.word	0x0800a829
 800a788:	0800a829 	.word	0x0800a829
 800a78c:	0800a829 	.word	0x0800a829
 800a790:	0800a829 	.word	0x0800a829
 800a794:	0800a829 	.word	0x0800a829
 800a798:	0800a829 	.word	0x0800a829
 800a79c:	0800a829 	.word	0x0800a829
 800a7a0:	0800a829 	.word	0x0800a829
 800a7a4:	0800a829 	.word	0x0800a829
 800a7a8:	0800a809 	.word	0x0800a809
 800a7ac:	2b40      	cmp	r3, #64	; 0x40
 800a7ae:	d02e      	beq.n	800a80e <UART_SetConfig+0xc1e>
 800a7b0:	e03a      	b.n	800a828 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7b2:	f7fc fe47 	bl	8007444 <HAL_RCC_GetPCLK1Freq>
 800a7b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a7b8:	e03c      	b.n	800a834 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a7ba:	f7fc fe59 	bl	8007470 <HAL_RCC_GetPCLK2Freq>
 800a7be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a7c0:	e038      	b.n	800a834 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c2:	f107 0314 	add.w	r3, r7, #20
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	f7fd fdba 	bl	8008340 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7d0:	e030      	b.n	800a834 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7d2:	f107 0308 	add.w	r3, r7, #8
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f7fd ff06 	bl	80085e8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7e0:	e028      	b.n	800a834 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7e2:	4b0e      	ldr	r3, [pc, #56]	; (800a81c <UART_SetConfig+0xc2c>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f003 0320 	and.w	r3, r3, #32
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d009      	beq.n	800a802 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7ee:	4b0b      	ldr	r3, [pc, #44]	; (800a81c <UART_SetConfig+0xc2c>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	08db      	lsrs	r3, r3, #3
 800a7f4:	f003 0303 	and.w	r3, r3, #3
 800a7f8:	4a09      	ldr	r2, [pc, #36]	; (800a820 <UART_SetConfig+0xc30>)
 800a7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a800:	e018      	b.n	800a834 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a802:	4b07      	ldr	r3, [pc, #28]	; (800a820 <UART_SetConfig+0xc30>)
 800a804:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a806:	e015      	b.n	800a834 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a808:	4b06      	ldr	r3, [pc, #24]	; (800a824 <UART_SetConfig+0xc34>)
 800a80a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a80c:	e012      	b.n	800a834 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a80e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a812:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a814:	e00e      	b.n	800a834 <UART_SetConfig+0xc44>
 800a816:	bf00      	nop
 800a818:	0801f1f4 	.word	0x0801f1f4
 800a81c:	58024400 	.word	0x58024400
 800a820:	03d09000 	.word	0x03d09000
 800a824:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a828:	2300      	movs	r3, #0
 800a82a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a82c:	2301      	movs	r3, #1
 800a82e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a832:	bf00      	nop
    }

    if (pclk != 0U)
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	2b00      	cmp	r3, #0
 800a838:	d021      	beq.n	800a87e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83e:	4a1a      	ldr	r2, [pc, #104]	; (800a8a8 <UART_SetConfig+0xcb8>)
 800a840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a844:	461a      	mov	r2, r3
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a848:	fbb3 f2f2 	udiv	r2, r3, r2
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	085b      	lsrs	r3, r3, #1
 800a852:	441a      	add	r2, r3
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	685b      	ldr	r3, [r3, #4]
 800a858:	fbb2 f3f3 	udiv	r3, r2, r3
 800a85c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a860:	2b0f      	cmp	r3, #15
 800a862:	d909      	bls.n	800a878 <UART_SetConfig+0xc88>
 800a864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a86a:	d205      	bcs.n	800a878 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a86e:	b29a      	uxth	r2, r3
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	60da      	str	r2, [r3, #12]
 800a876:	e002      	b.n	800a87e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2201      	movs	r2, #1
 800a882:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2201      	movs	r2, #1
 800a88a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a89a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3738      	adds	r7, #56	; 0x38
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bdb0      	pop	{r4, r5, r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0801f1f4 	.word	0x0801f1f4

0800a8ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b8:	f003 0301 	and.w	r3, r3, #1
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d00a      	beq.n	800a8d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8da:	f003 0302 	and.w	r3, r3, #2
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8fc:	f003 0304 	and.w	r3, r3, #4
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00a      	beq.n	800a91a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	430a      	orrs	r2, r1
 800a918:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a91e:	f003 0308 	and.w	r3, r3, #8
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00a      	beq.n	800a93c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	685b      	ldr	r3, [r3, #4]
 800a92c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	430a      	orrs	r2, r1
 800a93a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a940:	f003 0310 	and.w	r3, r3, #16
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00a      	beq.n	800a95e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	689b      	ldr	r3, [r3, #8]
 800a94e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	430a      	orrs	r2, r1
 800a95c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	2b00      	cmp	r3, #0
 800a968:	d00a      	beq.n	800a980 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	430a      	orrs	r2, r1
 800a97e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a984:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d01a      	beq.n	800a9c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9aa:	d10a      	bne.n	800a9c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	685b      	ldr	r3, [r3, #4]
 800a9b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	430a      	orrs	r2, r1
 800a9c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d00a      	beq.n	800a9e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	430a      	orrs	r2, r1
 800a9e2:	605a      	str	r2, [r3, #4]
  }
}
 800a9e4:	bf00      	nop
 800a9e6:	370c      	adds	r7, #12
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b086      	sub	sp, #24
 800a9f4:	af02      	add	r7, sp, #8
 800a9f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa00:	f7f8 f860 	bl	8002ac4 <HAL_GetTick>
 800aa04:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f003 0308 	and.w	r3, r3, #8
 800aa10:	2b08      	cmp	r3, #8
 800aa12:	d10e      	bne.n	800aa32 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f000 f82f 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d001      	beq.n	800aa32 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e025      	b.n	800aa7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 0304 	and.w	r3, r3, #4
 800aa3c:	2b04      	cmp	r3, #4
 800aa3e:	d10e      	bne.n	800aa5e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa44:	9300      	str	r3, [sp, #0]
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	2200      	movs	r2, #0
 800aa4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	f000 f819 	bl	800aa86 <UART_WaitOnFlagUntilTimeout>
 800aa54:	4603      	mov	r3, r0
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d001      	beq.n	800aa5e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e00f      	b.n	800aa7e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2220      	movs	r2, #32
 800aa62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2220      	movs	r2, #32
 800aa6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	2200      	movs	r2, #0
 800aa72:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa7c:	2300      	movs	r3, #0
}
 800aa7e:	4618      	mov	r0, r3
 800aa80:	3710      	adds	r7, #16
 800aa82:	46bd      	mov	sp, r7
 800aa84:	bd80      	pop	{r7, pc}

0800aa86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa86:	b580      	push	{r7, lr}
 800aa88:	b09c      	sub	sp, #112	; 0x70
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	60f8      	str	r0, [r7, #12]
 800aa8e:	60b9      	str	r1, [r7, #8]
 800aa90:	603b      	str	r3, [r7, #0]
 800aa92:	4613      	mov	r3, r2
 800aa94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa96:	e0a9      	b.n	800abec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa9e:	f000 80a5 	beq.w	800abec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aaa2:	f7f8 f80f 	bl	8002ac4 <HAL_GetTick>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d302      	bcc.n	800aab8 <UART_WaitOnFlagUntilTimeout+0x32>
 800aab2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d140      	bne.n	800ab3a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aabe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aac0:	e853 3f00 	ldrex	r3, [r3]
 800aac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aac8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aacc:	667b      	str	r3, [r7, #100]	; 0x64
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	461a      	mov	r2, r3
 800aad4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aad6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aad8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aada:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aadc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aade:	e841 2300 	strex	r3, r2, [r1]
 800aae2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1e6      	bne.n	800aab8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3308      	adds	r3, #8
 800aaf0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaf4:	e853 3f00 	ldrex	r3, [r3]
 800aaf8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aafc:	f023 0301 	bic.w	r3, r3, #1
 800ab00:	663b      	str	r3, [r7, #96]	; 0x60
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	3308      	adds	r3, #8
 800ab08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ab0a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ab0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ab10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab12:	e841 2300 	strex	r3, r2, [r1]
 800ab16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ab18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d1e5      	bne.n	800aaea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	2220      	movs	r2, #32
 800ab22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2220      	movs	r2, #32
 800ab2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e069      	b.n	800ac0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	f003 0304 	and.w	r3, r3, #4
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d051      	beq.n	800abec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab56:	d149      	bne.n	800abec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab60:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6a:	e853 3f00 	ldrex	r3, [r3]
 800ab6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab76:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	461a      	mov	r2, r3
 800ab7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab80:	637b      	str	r3, [r7, #52]	; 0x34
 800ab82:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab88:	e841 2300 	strex	r3, r2, [r1]
 800ab8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1e6      	bne.n	800ab62 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	3308      	adds	r3, #8
 800ab9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	e853 3f00 	ldrex	r3, [r3]
 800aba2:	613b      	str	r3, [r7, #16]
   return(result);
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	f023 0301 	bic.w	r3, r3, #1
 800abaa:	66bb      	str	r3, [r7, #104]	; 0x68
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	3308      	adds	r3, #8
 800abb2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800abb4:	623a      	str	r2, [r7, #32]
 800abb6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abb8:	69f9      	ldr	r1, [r7, #28]
 800abba:	6a3a      	ldr	r2, [r7, #32]
 800abbc:	e841 2300 	strex	r3, r2, [r1]
 800abc0:	61bb      	str	r3, [r7, #24]
   return(result);
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d1e5      	bne.n	800ab94 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2220      	movs	r2, #32
 800abcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	2220      	movs	r2, #32
 800abd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2220      	movs	r2, #32
 800abdc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	2200      	movs	r2, #0
 800abe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800abe8:	2303      	movs	r3, #3
 800abea:	e010      	b.n	800ac0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	69da      	ldr	r2, [r3, #28]
 800abf2:	68bb      	ldr	r3, [r7, #8]
 800abf4:	4013      	ands	r3, r2
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	bf0c      	ite	eq
 800abfc:	2301      	moveq	r3, #1
 800abfe:	2300      	movne	r3, #0
 800ac00:	b2db      	uxtb	r3, r3
 800ac02:	461a      	mov	r2, r3
 800ac04:	79fb      	ldrb	r3, [r7, #7]
 800ac06:	429a      	cmp	r2, r3
 800ac08:	f43f af46 	beq.w	800aa98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3770      	adds	r7, #112	; 0x70
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac16:	b480      	push	{r7}
 800ac18:	b085      	sub	sp, #20
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac24:	2b01      	cmp	r3, #1
 800ac26:	d101      	bne.n	800ac2c <HAL_UARTEx_DisableFifoMode+0x16>
 800ac28:	2302      	movs	r3, #2
 800ac2a:	e027      	b.n	800ac7c <HAL_UARTEx_DisableFifoMode+0x66>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2201      	movs	r2, #1
 800ac30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2224      	movs	r2, #36	; 0x24
 800ac38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f022 0201 	bic.w	r2, r2, #1
 800ac52:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ac5a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3714      	adds	r7, #20
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b084      	sub	sp, #16
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d101      	bne.n	800aca0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac9c:	2302      	movs	r3, #2
 800ac9e:	e02d      	b.n	800acfc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2201      	movs	r2, #1
 800aca4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2224      	movs	r2, #36	; 0x24
 800acac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f022 0201 	bic.w	r2, r2, #1
 800acc6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	430a      	orrs	r2, r1
 800acda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acdc:	6878      	ldr	r0, [r7, #4]
 800acde:	f000 f84f 	bl	800ad80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2220      	movs	r2, #32
 800acee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	2200      	movs	r2, #0
 800acf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acfa:	2300      	movs	r3, #0
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3710      	adds	r7, #16
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad14:	2b01      	cmp	r3, #1
 800ad16:	d101      	bne.n	800ad1c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad18:	2302      	movs	r3, #2
 800ad1a:	e02d      	b.n	800ad78 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2201      	movs	r2, #1
 800ad20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2224      	movs	r2, #36	; 0x24
 800ad28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f022 0201 	bic.w	r2, r2, #1
 800ad42:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	683a      	ldr	r2, [r7, #0]
 800ad54:	430a      	orrs	r2, r1
 800ad56:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad58:	6878      	ldr	r0, [r7, #4]
 800ad5a:	f000 f811 	bl	800ad80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2220      	movs	r2, #32
 800ad6a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b085      	sub	sp, #20
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d108      	bne.n	800ada2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2201      	movs	r2, #1
 800ad94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ada0:	e031      	b.n	800ae06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ada2:	2310      	movs	r3, #16
 800ada4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ada6:	2310      	movs	r3, #16
 800ada8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	0e5b      	lsrs	r3, r3, #25
 800adb2:	b2db      	uxtb	r3, r3
 800adb4:	f003 0307 	and.w	r3, r3, #7
 800adb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	689b      	ldr	r3, [r3, #8]
 800adc0:	0f5b      	lsrs	r3, r3, #29
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800adca:	7bbb      	ldrb	r3, [r7, #14]
 800adcc:	7b3a      	ldrb	r2, [r7, #12]
 800adce:	4911      	ldr	r1, [pc, #68]	; (800ae14 <UARTEx_SetNbDataToProcess+0x94>)
 800add0:	5c8a      	ldrb	r2, [r1, r2]
 800add2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800add6:	7b3a      	ldrb	r2, [r7, #12]
 800add8:	490f      	ldr	r1, [pc, #60]	; (800ae18 <UARTEx_SetNbDataToProcess+0x98>)
 800adda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800addc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ade0:	b29a      	uxth	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ade8:	7bfb      	ldrb	r3, [r7, #15]
 800adea:	7b7a      	ldrb	r2, [r7, #13]
 800adec:	4909      	ldr	r1, [pc, #36]	; (800ae14 <UARTEx_SetNbDataToProcess+0x94>)
 800adee:	5c8a      	ldrb	r2, [r1, r2]
 800adf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800adf4:	7b7a      	ldrb	r2, [r7, #13]
 800adf6:	4908      	ldr	r1, [pc, #32]	; (800ae18 <UARTEx_SetNbDataToProcess+0x98>)
 800adf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800adfa:	fb93 f3f2 	sdiv	r3, r3, r2
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae06:	bf00      	nop
 800ae08:	3714      	adds	r7, #20
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr
 800ae12:	bf00      	nop
 800ae14:	0801f20c 	.word	0x0801f20c
 800ae18:	0801f214 	.word	0x0801f214

0800ae1c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b084      	sub	sp, #16
 800ae20:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ae22:	4b98      	ldr	r3, [pc, #608]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae24:	22c0      	movs	r2, #192	; 0xc0
 800ae26:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ae28:	4b96      	ldr	r3, [pc, #600]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae2a:	22a8      	movs	r2, #168	; 0xa8
 800ae2c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 800ae2e:	4b95      	ldr	r3, [pc, #596]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae30:	2232      	movs	r2, #50	; 0x32
 800ae32:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800ae34:	4b93      	ldr	r3, [pc, #588]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae36:	2264      	movs	r2, #100	; 0x64
 800ae38:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800ae3a:	4b93      	ldr	r3, [pc, #588]	; (800b088 <MX_LWIP_Init+0x26c>)
 800ae3c:	22ff      	movs	r2, #255	; 0xff
 800ae3e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800ae40:	4b91      	ldr	r3, [pc, #580]	; (800b088 <MX_LWIP_Init+0x26c>)
 800ae42:	22ff      	movs	r2, #255	; 0xff
 800ae44:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800ae46:	4b90      	ldr	r3, [pc, #576]	; (800b088 <MX_LWIP_Init+0x26c>)
 800ae48:	22ff      	movs	r2, #255	; 0xff
 800ae4a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800ae4c:	4b8e      	ldr	r3, [pc, #568]	; (800b088 <MX_LWIP_Init+0x26c>)
 800ae4e:	2200      	movs	r2, #0
 800ae50:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800ae52:	4b8e      	ldr	r3, [pc, #568]	; (800b08c <MX_LWIP_Init+0x270>)
 800ae54:	22c0      	movs	r2, #192	; 0xc0
 800ae56:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800ae58:	4b8c      	ldr	r3, [pc, #560]	; (800b08c <MX_LWIP_Init+0x270>)
 800ae5a:	22a8      	movs	r2, #168	; 0xa8
 800ae5c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800ae5e:	4b8b      	ldr	r3, [pc, #556]	; (800b08c <MX_LWIP_Init+0x270>)
 800ae60:	2201      	movs	r2, #1
 800ae62:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ae64:	4b89      	ldr	r3, [pc, #548]	; (800b08c <MX_LWIP_Init+0x270>)
 800ae66:	2201      	movs	r2, #1
 800ae68:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ae6a:	2100      	movs	r1, #0
 800ae6c:	2000      	movs	r0, #0
 800ae6e:	f004 fe5d 	bl	800fb2c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800ae72:	4b84      	ldr	r3, [pc, #528]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	061a      	lsls	r2, r3, #24
 800ae78:	4b82      	ldr	r3, [pc, #520]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	041b      	lsls	r3, r3, #16
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	4b80      	ldr	r3, [pc, #512]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae82:	789b      	ldrb	r3, [r3, #2]
 800ae84:	021b      	lsls	r3, r3, #8
 800ae86:	4313      	orrs	r3, r2
 800ae88:	4a7e      	ldr	r2, [pc, #504]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae8a:	78d2      	ldrb	r2, [r2, #3]
 800ae8c:	4313      	orrs	r3, r2
 800ae8e:	061a      	lsls	r2, r3, #24
 800ae90:	4b7c      	ldr	r3, [pc, #496]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	0619      	lsls	r1, r3, #24
 800ae96:	4b7b      	ldr	r3, [pc, #492]	; (800b084 <MX_LWIP_Init+0x268>)
 800ae98:	785b      	ldrb	r3, [r3, #1]
 800ae9a:	041b      	lsls	r3, r3, #16
 800ae9c:	4319      	orrs	r1, r3
 800ae9e:	4b79      	ldr	r3, [pc, #484]	; (800b084 <MX_LWIP_Init+0x268>)
 800aea0:	789b      	ldrb	r3, [r3, #2]
 800aea2:	021b      	lsls	r3, r3, #8
 800aea4:	430b      	orrs	r3, r1
 800aea6:	4977      	ldr	r1, [pc, #476]	; (800b084 <MX_LWIP_Init+0x268>)
 800aea8:	78c9      	ldrb	r1, [r1, #3]
 800aeaa:	430b      	orrs	r3, r1
 800aeac:	021b      	lsls	r3, r3, #8
 800aeae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aeb2:	431a      	orrs	r2, r3
 800aeb4:	4b73      	ldr	r3, [pc, #460]	; (800b084 <MX_LWIP_Init+0x268>)
 800aeb6:	781b      	ldrb	r3, [r3, #0]
 800aeb8:	0619      	lsls	r1, r3, #24
 800aeba:	4b72      	ldr	r3, [pc, #456]	; (800b084 <MX_LWIP_Init+0x268>)
 800aebc:	785b      	ldrb	r3, [r3, #1]
 800aebe:	041b      	lsls	r3, r3, #16
 800aec0:	4319      	orrs	r1, r3
 800aec2:	4b70      	ldr	r3, [pc, #448]	; (800b084 <MX_LWIP_Init+0x268>)
 800aec4:	789b      	ldrb	r3, [r3, #2]
 800aec6:	021b      	lsls	r3, r3, #8
 800aec8:	430b      	orrs	r3, r1
 800aeca:	496e      	ldr	r1, [pc, #440]	; (800b084 <MX_LWIP_Init+0x268>)
 800aecc:	78c9      	ldrb	r1, [r1, #3]
 800aece:	430b      	orrs	r3, r1
 800aed0:	0a1b      	lsrs	r3, r3, #8
 800aed2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aed6:	431a      	orrs	r2, r3
 800aed8:	4b6a      	ldr	r3, [pc, #424]	; (800b084 <MX_LWIP_Init+0x268>)
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	0619      	lsls	r1, r3, #24
 800aede:	4b69      	ldr	r3, [pc, #420]	; (800b084 <MX_LWIP_Init+0x268>)
 800aee0:	785b      	ldrb	r3, [r3, #1]
 800aee2:	041b      	lsls	r3, r3, #16
 800aee4:	4319      	orrs	r1, r3
 800aee6:	4b67      	ldr	r3, [pc, #412]	; (800b084 <MX_LWIP_Init+0x268>)
 800aee8:	789b      	ldrb	r3, [r3, #2]
 800aeea:	021b      	lsls	r3, r3, #8
 800aeec:	430b      	orrs	r3, r1
 800aeee:	4965      	ldr	r1, [pc, #404]	; (800b084 <MX_LWIP_Init+0x268>)
 800aef0:	78c9      	ldrb	r1, [r1, #3]
 800aef2:	430b      	orrs	r3, r1
 800aef4:	0e1b      	lsrs	r3, r3, #24
 800aef6:	4313      	orrs	r3, r2
 800aef8:	4a65      	ldr	r2, [pc, #404]	; (800b090 <MX_LWIP_Init+0x274>)
 800aefa:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800aefc:	4b62      	ldr	r3, [pc, #392]	; (800b088 <MX_LWIP_Init+0x26c>)
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	061a      	lsls	r2, r3, #24
 800af02:	4b61      	ldr	r3, [pc, #388]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af04:	785b      	ldrb	r3, [r3, #1]
 800af06:	041b      	lsls	r3, r3, #16
 800af08:	431a      	orrs	r2, r3
 800af0a:	4b5f      	ldr	r3, [pc, #380]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af0c:	789b      	ldrb	r3, [r3, #2]
 800af0e:	021b      	lsls	r3, r3, #8
 800af10:	4313      	orrs	r3, r2
 800af12:	4a5d      	ldr	r2, [pc, #372]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af14:	78d2      	ldrb	r2, [r2, #3]
 800af16:	4313      	orrs	r3, r2
 800af18:	061a      	lsls	r2, r3, #24
 800af1a:	4b5b      	ldr	r3, [pc, #364]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af1c:	781b      	ldrb	r3, [r3, #0]
 800af1e:	0619      	lsls	r1, r3, #24
 800af20:	4b59      	ldr	r3, [pc, #356]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af22:	785b      	ldrb	r3, [r3, #1]
 800af24:	041b      	lsls	r3, r3, #16
 800af26:	4319      	orrs	r1, r3
 800af28:	4b57      	ldr	r3, [pc, #348]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af2a:	789b      	ldrb	r3, [r3, #2]
 800af2c:	021b      	lsls	r3, r3, #8
 800af2e:	430b      	orrs	r3, r1
 800af30:	4955      	ldr	r1, [pc, #340]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af32:	78c9      	ldrb	r1, [r1, #3]
 800af34:	430b      	orrs	r3, r1
 800af36:	021b      	lsls	r3, r3, #8
 800af38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af3c:	431a      	orrs	r2, r3
 800af3e:	4b52      	ldr	r3, [pc, #328]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	0619      	lsls	r1, r3, #24
 800af44:	4b50      	ldr	r3, [pc, #320]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	041b      	lsls	r3, r3, #16
 800af4a:	4319      	orrs	r1, r3
 800af4c:	4b4e      	ldr	r3, [pc, #312]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af4e:	789b      	ldrb	r3, [r3, #2]
 800af50:	021b      	lsls	r3, r3, #8
 800af52:	430b      	orrs	r3, r1
 800af54:	494c      	ldr	r1, [pc, #304]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af56:	78c9      	ldrb	r1, [r1, #3]
 800af58:	430b      	orrs	r3, r1
 800af5a:	0a1b      	lsrs	r3, r3, #8
 800af5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af60:	431a      	orrs	r2, r3
 800af62:	4b49      	ldr	r3, [pc, #292]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	0619      	lsls	r1, r3, #24
 800af68:	4b47      	ldr	r3, [pc, #284]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af6a:	785b      	ldrb	r3, [r3, #1]
 800af6c:	041b      	lsls	r3, r3, #16
 800af6e:	4319      	orrs	r1, r3
 800af70:	4b45      	ldr	r3, [pc, #276]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af72:	789b      	ldrb	r3, [r3, #2]
 800af74:	021b      	lsls	r3, r3, #8
 800af76:	430b      	orrs	r3, r1
 800af78:	4943      	ldr	r1, [pc, #268]	; (800b088 <MX_LWIP_Init+0x26c>)
 800af7a:	78c9      	ldrb	r1, [r1, #3]
 800af7c:	430b      	orrs	r3, r1
 800af7e:	0e1b      	lsrs	r3, r3, #24
 800af80:	4313      	orrs	r3, r2
 800af82:	4a44      	ldr	r2, [pc, #272]	; (800b094 <MX_LWIP_Init+0x278>)
 800af84:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800af86:	4b41      	ldr	r3, [pc, #260]	; (800b08c <MX_LWIP_Init+0x270>)
 800af88:	781b      	ldrb	r3, [r3, #0]
 800af8a:	061a      	lsls	r2, r3, #24
 800af8c:	4b3f      	ldr	r3, [pc, #252]	; (800b08c <MX_LWIP_Init+0x270>)
 800af8e:	785b      	ldrb	r3, [r3, #1]
 800af90:	041b      	lsls	r3, r3, #16
 800af92:	431a      	orrs	r2, r3
 800af94:	4b3d      	ldr	r3, [pc, #244]	; (800b08c <MX_LWIP_Init+0x270>)
 800af96:	789b      	ldrb	r3, [r3, #2]
 800af98:	021b      	lsls	r3, r3, #8
 800af9a:	4313      	orrs	r3, r2
 800af9c:	4a3b      	ldr	r2, [pc, #236]	; (800b08c <MX_LWIP_Init+0x270>)
 800af9e:	78d2      	ldrb	r2, [r2, #3]
 800afa0:	4313      	orrs	r3, r2
 800afa2:	061a      	lsls	r2, r3, #24
 800afa4:	4b39      	ldr	r3, [pc, #228]	; (800b08c <MX_LWIP_Init+0x270>)
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	0619      	lsls	r1, r3, #24
 800afaa:	4b38      	ldr	r3, [pc, #224]	; (800b08c <MX_LWIP_Init+0x270>)
 800afac:	785b      	ldrb	r3, [r3, #1]
 800afae:	041b      	lsls	r3, r3, #16
 800afb0:	4319      	orrs	r1, r3
 800afb2:	4b36      	ldr	r3, [pc, #216]	; (800b08c <MX_LWIP_Init+0x270>)
 800afb4:	789b      	ldrb	r3, [r3, #2]
 800afb6:	021b      	lsls	r3, r3, #8
 800afb8:	430b      	orrs	r3, r1
 800afba:	4934      	ldr	r1, [pc, #208]	; (800b08c <MX_LWIP_Init+0x270>)
 800afbc:	78c9      	ldrb	r1, [r1, #3]
 800afbe:	430b      	orrs	r3, r1
 800afc0:	021b      	lsls	r3, r3, #8
 800afc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800afc6:	431a      	orrs	r2, r3
 800afc8:	4b30      	ldr	r3, [pc, #192]	; (800b08c <MX_LWIP_Init+0x270>)
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	0619      	lsls	r1, r3, #24
 800afce:	4b2f      	ldr	r3, [pc, #188]	; (800b08c <MX_LWIP_Init+0x270>)
 800afd0:	785b      	ldrb	r3, [r3, #1]
 800afd2:	041b      	lsls	r3, r3, #16
 800afd4:	4319      	orrs	r1, r3
 800afd6:	4b2d      	ldr	r3, [pc, #180]	; (800b08c <MX_LWIP_Init+0x270>)
 800afd8:	789b      	ldrb	r3, [r3, #2]
 800afda:	021b      	lsls	r3, r3, #8
 800afdc:	430b      	orrs	r3, r1
 800afde:	492b      	ldr	r1, [pc, #172]	; (800b08c <MX_LWIP_Init+0x270>)
 800afe0:	78c9      	ldrb	r1, [r1, #3]
 800afe2:	430b      	orrs	r3, r1
 800afe4:	0a1b      	lsrs	r3, r3, #8
 800afe6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800afea:	431a      	orrs	r2, r3
 800afec:	4b27      	ldr	r3, [pc, #156]	; (800b08c <MX_LWIP_Init+0x270>)
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	0619      	lsls	r1, r3, #24
 800aff2:	4b26      	ldr	r3, [pc, #152]	; (800b08c <MX_LWIP_Init+0x270>)
 800aff4:	785b      	ldrb	r3, [r3, #1]
 800aff6:	041b      	lsls	r3, r3, #16
 800aff8:	4319      	orrs	r1, r3
 800affa:	4b24      	ldr	r3, [pc, #144]	; (800b08c <MX_LWIP_Init+0x270>)
 800affc:	789b      	ldrb	r3, [r3, #2]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	430b      	orrs	r3, r1
 800b002:	4922      	ldr	r1, [pc, #136]	; (800b08c <MX_LWIP_Init+0x270>)
 800b004:	78c9      	ldrb	r1, [r1, #3]
 800b006:	430b      	orrs	r3, r1
 800b008:	0e1b      	lsrs	r3, r3, #24
 800b00a:	4313      	orrs	r3, r2
 800b00c:	4a22      	ldr	r2, [pc, #136]	; (800b098 <MX_LWIP_Init+0x27c>)
 800b00e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b010:	4b22      	ldr	r3, [pc, #136]	; (800b09c <MX_LWIP_Init+0x280>)
 800b012:	9302      	str	r3, [sp, #8]
 800b014:	4b22      	ldr	r3, [pc, #136]	; (800b0a0 <MX_LWIP_Init+0x284>)
 800b016:	9301      	str	r3, [sp, #4]
 800b018:	2300      	movs	r3, #0
 800b01a:	9300      	str	r3, [sp, #0]
 800b01c:	4b1e      	ldr	r3, [pc, #120]	; (800b098 <MX_LWIP_Init+0x27c>)
 800b01e:	4a1d      	ldr	r2, [pc, #116]	; (800b094 <MX_LWIP_Init+0x278>)
 800b020:	491b      	ldr	r1, [pc, #108]	; (800b090 <MX_LWIP_Init+0x274>)
 800b022:	4820      	ldr	r0, [pc, #128]	; (800b0a4 <MX_LWIP_Init+0x288>)
 800b024:	f005 fc04 	bl	8010830 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b028:	481e      	ldr	r0, [pc, #120]	; (800b0a4 <MX_LWIP_Init+0x288>)
 800b02a:	f005 fdb3 	bl	8010b94 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b02e:	4b1d      	ldr	r3, [pc, #116]	; (800b0a4 <MX_LWIP_Init+0x288>)
 800b030:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b034:	089b      	lsrs	r3, r3, #2
 800b036:	f003 0301 	and.w	r3, r3, #1
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d003      	beq.n	800b048 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b040:	4818      	ldr	r0, [pc, #96]	; (800b0a4 <MX_LWIP_Init+0x288>)
 800b042:	f005 fdb7 	bl	8010bb4 <netif_set_up>
 800b046:	e002      	b.n	800b04e <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b048:	4816      	ldr	r0, [pc, #88]	; (800b0a4 <MX_LWIP_Init+0x288>)
 800b04a:	f005 fe1f 	bl	8010c8c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b04e:	4916      	ldr	r1, [pc, #88]	; (800b0a8 <MX_LWIP_Init+0x28c>)
 800b050:	4814      	ldr	r0, [pc, #80]	; (800b0a4 <MX_LWIP_Init+0x288>)
 800b052:	f005 feb1 	bl	8010db8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b056:	2224      	movs	r2, #36	; 0x24
 800b058:	2100      	movs	r1, #0
 800b05a:	4814      	ldr	r0, [pc, #80]	; (800b0ac <MX_LWIP_Init+0x290>)
 800b05c:	f00f fe2b 	bl	801acb6 <memset>
  attributes.name = "EthLink";
 800b060:	4b12      	ldr	r3, [pc, #72]	; (800b0ac <MX_LWIP_Init+0x290>)
 800b062:	4a13      	ldr	r2, [pc, #76]	; (800b0b0 <MX_LWIP_Init+0x294>)
 800b064:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b066:	4b11      	ldr	r3, [pc, #68]	; (800b0ac <MX_LWIP_Init+0x290>)
 800b068:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b06c:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b06e:	4b0f      	ldr	r3, [pc, #60]	; (800b0ac <MX_LWIP_Init+0x290>)
 800b070:	2210      	movs	r2, #16
 800b072:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b074:	4a0d      	ldr	r2, [pc, #52]	; (800b0ac <MX_LWIP_Init+0x290>)
 800b076:	490b      	ldr	r1, [pc, #44]	; (800b0a4 <MX_LWIP_Init+0x288>)
 800b078:	480e      	ldr	r0, [pc, #56]	; (800b0b4 <MX_LWIP_Init+0x298>)
 800b07a:	f000 fd3a 	bl	800baf2 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b07e:	bf00      	nop
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	24004fb8 	.word	0x24004fb8
 800b088:	24004fb4 	.word	0x24004fb4
 800b08c:	24004f54 	.word	0x24004f54
 800b090:	24004fb0 	.word	0x24004fb0
 800b094:	24004fbc 	.word	0x24004fbc
 800b098:	24004fc0 	.word	0x24004fc0
 800b09c:	0800fa69 	.word	0x0800fa69
 800b0a0:	0800b779 	.word	0x0800b779
 800b0a4:	24004f7c 	.word	0x24004f7c
 800b0a8:	0800b0b9 	.word	0x0800b0b9
 800b0ac:	24004f58 	.word	0x24004f58
 800b0b0:	0801bdcc 	.word	0x0801bdcc
 800b0b4:	0800b8a1 	.word	0x0800b8a1

0800b0b8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b083      	sub	sp, #12
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b0c0:	bf00      	nop
 800b0c2:	370c      	adds	r7, #12
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b08e      	sub	sp, #56	; 0x38
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b0d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b0d8:	2200      	movs	r2, #0
 800b0da:	601a      	str	r2, [r3, #0]
 800b0dc:	605a      	str	r2, [r3, #4]
 800b0de:	609a      	str	r2, [r3, #8]
 800b0e0:	60da      	str	r2, [r3, #12]
 800b0e2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a5d      	ldr	r2, [pc, #372]	; (800b260 <HAL_ETH_MspInit+0x194>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	f040 80b3 	bne.w	800b256 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b0f0:	4b5c      	ldr	r3, [pc, #368]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b0f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b0f6:	4a5b      	ldr	r2, [pc, #364]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b0f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b100:	4b58      	ldr	r3, [pc, #352]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b102:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b106:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b10a:	623b      	str	r3, [r7, #32]
 800b10c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b10e:	4b55      	ldr	r3, [pc, #340]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b110:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b114:	4a53      	ldr	r2, [pc, #332]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b11a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b11e:	4b51      	ldr	r3, [pc, #324]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b120:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b128:	61fb      	str	r3, [r7, #28]
 800b12a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b12c:	4b4d      	ldr	r3, [pc, #308]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b12e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b132:	4a4c      	ldr	r2, [pc, #304]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b138:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b13c:	4b49      	ldr	r3, [pc, #292]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b13e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b146:	61bb      	str	r3, [r7, #24]
 800b148:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b14a:	4b46      	ldr	r3, [pc, #280]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b14c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b150:	4a44      	ldr	r2, [pc, #272]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b152:	f043 0304 	orr.w	r3, r3, #4
 800b156:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b15a:	4b42      	ldr	r3, [pc, #264]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b15c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b160:	f003 0304 	and.w	r3, r3, #4
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b168:	4b3e      	ldr	r3, [pc, #248]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b16a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b16e:	4a3d      	ldr	r2, [pc, #244]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b170:	f043 0301 	orr.w	r3, r3, #1
 800b174:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b178:	4b3a      	ldr	r3, [pc, #232]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b17a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b17e:	f003 0301 	and.w	r3, r3, #1
 800b182:	613b      	str	r3, [r7, #16]
 800b184:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b186:	4b37      	ldr	r3, [pc, #220]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b18c:	4a35      	ldr	r2, [pc, #212]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b18e:	f043 0302 	orr.w	r3, r3, #2
 800b192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b196:	4b33      	ldr	r3, [pc, #204]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b19c:	f003 0302 	and.w	r3, r3, #2
 800b1a0:	60fb      	str	r3, [r7, #12]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b1a4:	4b2f      	ldr	r3, [pc, #188]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b1a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1aa:	4a2e      	ldr	r2, [pc, #184]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b1ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b1b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b1b4:	4b2b      	ldr	r3, [pc, #172]	; (800b264 <HAL_ETH_MspInit+0x198>)
 800b1b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1be:	60bb      	str	r3, [r7, #8]
 800b1c0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b1c2:	2332      	movs	r3, #50	; 0x32
 800b1c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1c6:	2302      	movs	r3, #2
 800b1c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1ce:	2300      	movs	r3, #0
 800b1d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1d2:	230b      	movs	r3, #11
 800b1d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b1d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4822      	ldr	r0, [pc, #136]	; (800b268 <HAL_ETH_MspInit+0x19c>)
 800b1de:	f7fa fff5 	bl	80061cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b1e2:	2386      	movs	r3, #134	; 0x86
 800b1e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b1e6:	2302      	movs	r3, #2
 800b1e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1f2:	230b      	movs	r3, #11
 800b1f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b1f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1fa:	4619      	mov	r1, r3
 800b1fc:	481b      	ldr	r0, [pc, #108]	; (800b26c <HAL_ETH_MspInit+0x1a0>)
 800b1fe:	f7fa ffe5 	bl	80061cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b208:	2302      	movs	r3, #2
 800b20a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b210:	2300      	movs	r3, #0
 800b212:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b214:	230b      	movs	r3, #11
 800b216:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b21c:	4619      	mov	r1, r3
 800b21e:	4814      	ldr	r0, [pc, #80]	; (800b270 <HAL_ETH_MspInit+0x1a4>)
 800b220:	f7fa ffd4 	bl	80061cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b224:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b22a:	2302      	movs	r3, #2
 800b22c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b22e:	2300      	movs	r3, #0
 800b230:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b232:	2300      	movs	r3, #0
 800b234:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b236:	230b      	movs	r3, #11
 800b238:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b23a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b23e:	4619      	mov	r1, r3
 800b240:	480c      	ldr	r0, [pc, #48]	; (800b274 <HAL_ETH_MspInit+0x1a8>)
 800b242:	f7fa ffc3 	bl	80061cc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b246:	2200      	movs	r2, #0
 800b248:	2105      	movs	r1, #5
 800b24a:	203d      	movs	r0, #61	; 0x3d
 800b24c:	f7f7 fd36 	bl	8002cbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b250:	203d      	movs	r0, #61	; 0x3d
 800b252:	f7f7 fd4d 	bl	8002cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b256:	bf00      	nop
 800b258:	3738      	adds	r7, #56	; 0x38
 800b25a:	46bd      	mov	sp, r7
 800b25c:	bd80      	pop	{r7, pc}
 800b25e:	bf00      	nop
 800b260:	40028000 	.word	0x40028000
 800b264:	58024400 	.word	0x58024400
 800b268:	58020800 	.word	0x58020800
 800b26c:	58020000 	.word	0x58020000
 800b270:	58020400 	.word	0x58020400
 800b274:	58021800 	.word	0x58021800

0800b278 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b280:	4b04      	ldr	r3, [pc, #16]	; (800b294 <HAL_ETH_RxCpltCallback+0x1c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4618      	mov	r0, r3
 800b286:	f000 fecb 	bl	800c020 <osSemaphoreRelease>
}
 800b28a:	bf00      	nop
 800b28c:	3708      	adds	r7, #8
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}
 800b292:	bf00      	nop
 800b294:	240000c0 	.word	0x240000c0

0800b298 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b0ac      	sub	sp, #176	; 0xb0
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b2b2:	4b8f      	ldr	r3, [pc, #572]	; (800b4f0 <low_level_init+0x258>)
 800b2b4:	4a8f      	ldr	r2, [pc, #572]	; (800b4f4 <low_level_init+0x25c>)
 800b2b6:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800b2bc:	2380      	movs	r3, #128	; 0x80
 800b2be:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800b2c0:	23e1      	movs	r3, #225	; 0xe1
 800b2c2:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800b2d0:	4a87      	ldr	r2, [pc, #540]	; (800b4f0 <low_level_init+0x258>)
 800b2d2:	f107 030c 	add.w	r3, r7, #12
 800b2d6:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b2d8:	4b85      	ldr	r3, [pc, #532]	; (800b4f0 <low_level_init+0x258>)
 800b2da:	2201      	movs	r2, #1
 800b2dc:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b2de:	4b84      	ldr	r3, [pc, #528]	; (800b4f0 <low_level_init+0x258>)
 800b2e0:	4a85      	ldr	r2, [pc, #532]	; (800b4f8 <low_level_init+0x260>)
 800b2e2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b2e4:	4b82      	ldr	r3, [pc, #520]	; (800b4f0 <low_level_init+0x258>)
 800b2e6:	4a85      	ldr	r2, [pc, #532]	; (800b4fc <low_level_init+0x264>)
 800b2e8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800b2ea:	4b81      	ldr	r3, [pc, #516]	; (800b4f0 <low_level_init+0x258>)
 800b2ec:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b2f0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b2f2:	487f      	ldr	r0, [pc, #508]	; (800b4f0 <low_level_init+0x258>)
 800b2f4:	f7f7 fe70 	bl	8002fd8 <HAL_ETH_Init>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b2fe:	2234      	movs	r2, #52	; 0x34
 800b300:	2100      	movs	r1, #0
 800b302:	487f      	ldr	r0, [pc, #508]	; (800b500 <low_level_init+0x268>)
 800b304:	f00f fcd7 	bl	801acb6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b308:	4b7d      	ldr	r3, [pc, #500]	; (800b500 <low_level_init+0x268>)
 800b30a:	2221      	movs	r2, #33	; 0x21
 800b30c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b30e:	4b7c      	ldr	r3, [pc, #496]	; (800b500 <low_level_init+0x268>)
 800b310:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b314:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b316:	4b7a      	ldr	r3, [pc, #488]	; (800b500 <low_level_init+0x268>)
 800b318:	2200      	movs	r2, #0
 800b31a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b31c:	4879      	ldr	r0, [pc, #484]	; (800b504 <low_level_init+0x26c>)
 800b31e:	f005 f941 	bl	80105a4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2206      	movs	r2, #6
 800b326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b32a:	4b71      	ldr	r3, [pc, #452]	; (800b4f0 <low_level_init+0x258>)
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	781a      	ldrb	r2, [r3, #0]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b336:	4b6e      	ldr	r3, [pc, #440]	; (800b4f0 <low_level_init+0x258>)
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	785a      	ldrb	r2, [r3, #1]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b342:	4b6b      	ldr	r3, [pc, #428]	; (800b4f0 <low_level_init+0x258>)
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	789a      	ldrb	r2, [r3, #2]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b34e:	4b68      	ldr	r3, [pc, #416]	; (800b4f0 <low_level_init+0x258>)
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	78da      	ldrb	r2, [r3, #3]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b35a:	4b65      	ldr	r3, [pc, #404]	; (800b4f0 <low_level_init+0x258>)
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	791a      	ldrb	r2, [r3, #4]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b366:	4b62      	ldr	r3, [pc, #392]	; (800b4f0 <low_level_init+0x258>)
 800b368:	685b      	ldr	r3, [r3, #4]
 800b36a:	795a      	ldrb	r2, [r3, #5]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b378:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b380:	f043 030a 	orr.w	r3, r3, #10
 800b384:	b2da      	uxtb	r2, r3
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b38c:	2300      	movs	r3, #0
 800b38e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b392:	e012      	b.n	800b3ba <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800b394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b398:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b39c:	fb02 f303 	mul.w	r3, r2, r3
 800b3a0:	4a59      	ldr	r2, [pc, #356]	; (800b508 <low_level_init+0x270>)
 800b3a2:	441a      	add	r2, r3
 800b3a4:	2300      	movs	r3, #0
 800b3a6:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b3aa:	4851      	ldr	r0, [pc, #324]	; (800b4f0 <low_level_init+0x258>)
 800b3ac:	f7f7 feee 	bl	800318c <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b3b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3b4:	3301      	adds	r3, #1
 800b3b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3be:	2b03      	cmp	r3, #3
 800b3c0:	d9e8      	bls.n	800b394 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	2101      	movs	r1, #1
 800b3c6:	2001      	movs	r0, #1
 800b3c8:	f000 fd4e 	bl	800be68 <osSemaphoreNew>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	4a4f      	ldr	r2, [pc, #316]	; (800b50c <low_level_init+0x274>)
 800b3d0:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b3d2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b3d6:	2224      	movs	r2, #36	; 0x24
 800b3d8:	2100      	movs	r1, #0
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f00f fc6b 	bl	801acb6 <memset>
  attributes.name = "EthIf";
 800b3e0:	4b4b      	ldr	r3, [pc, #300]	; (800b510 <low_level_init+0x278>)
 800b3e2:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b3e4:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800b3e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 800b3ec:	2330      	movs	r3, #48	; 0x30
 800b3ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 800b3f2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800b3f6:	461a      	mov	r2, r3
 800b3f8:	6879      	ldr	r1, [r7, #4]
 800b3fa:	4846      	ldr	r0, [pc, #280]	; (800b514 <low_level_init+0x27c>)
 800b3fc:	f000 fb79 	bl	800baf2 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b400:	4945      	ldr	r1, [pc, #276]	; (800b518 <low_level_init+0x280>)
 800b402:	4846      	ldr	r0, [pc, #280]	; (800b51c <low_level_init+0x284>)
 800b404:	f7f7 f9ad 	bl	8002762 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b408:	4844      	ldr	r0, [pc, #272]	; (800b51c <low_level_init+0x284>)
 800b40a:	f7f7 f9dc 	bl	80027c6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b40e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800b412:	2b00      	cmp	r3, #0
 800b414:	d165      	bne.n	800b4e2 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b416:	4841      	ldr	r0, [pc, #260]	; (800b51c <low_level_init+0x284>)
 800b418:	f7f7 fa7d 	bl	8002916 <LAN8742_GetLinkState>
 800b41c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b420:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b424:	2b01      	cmp	r3, #1
 800b426:	dc06      	bgt.n	800b436 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 800b428:	6878      	ldr	r0, [r7, #4]
 800b42a:	f005 fc95 	bl	8010d58 <netif_set_link_down>
      netif_set_down(netif);
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	f005 fc2c 	bl	8010c8c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b434:	e057      	b.n	800b4e6 <low_level_init+0x24e>
 800b436:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b43a:	3b02      	subs	r3, #2
 800b43c:	2b03      	cmp	r3, #3
 800b43e:	d82b      	bhi.n	800b498 <low_level_init+0x200>
 800b440:	a201      	add	r2, pc, #4	; (adr r2, 800b448 <low_level_init+0x1b0>)
 800b442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b446:	bf00      	nop
 800b448:	0800b459 	.word	0x0800b459
 800b44c:	0800b46b 	.word	0x0800b46b
 800b450:	0800b47b 	.word	0x0800b47b
 800b454:	0800b48b 	.word	0x0800b48b
        duplex = ETH_FULLDUPLEX_MODE;
 800b458:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b45c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b460:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b464:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b468:	e01f      	b.n	800b4aa <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800b46a:	2300      	movs	r3, #0
 800b46c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b470:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b474:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b478:	e017      	b.n	800b4aa <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800b47a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b47e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b482:	2300      	movs	r3, #0
 800b484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b488:	e00f      	b.n	800b4aa <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800b48a:	2300      	movs	r3, #0
 800b48c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b490:	2300      	movs	r3, #0
 800b492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b496:	e008      	b.n	800b4aa <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800b498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b49c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b4a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b4a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b4a8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b4aa:	f107 0314 	add.w	r3, r7, #20
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	480f      	ldr	r0, [pc, #60]	; (800b4f0 <low_level_init+0x258>)
 800b4b2:	f7f8 fc3d 	bl	8003d30 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b4b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 800b4bc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b4c0:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b4c2:	f107 0314 	add.w	r3, r7, #20
 800b4c6:	4619      	mov	r1, r3
 800b4c8:	4809      	ldr	r0, [pc, #36]	; (800b4f0 <low_level_init+0x258>)
 800b4ca:	f7f8 fe05 	bl	80040d8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b4ce:	4808      	ldr	r0, [pc, #32]	; (800b4f0 <low_level_init+0x258>)
 800b4d0:	f7f7 fe9d 	bl	800320e <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f005 fb6d 	bl	8010bb4 <netif_set_up>
    netif_set_link_up(netif);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f005 fc08 	bl	8010cf0 <netif_set_link_up>
}
 800b4e0:	e001      	b.n	800b4e6 <low_level_init+0x24e>
    Error_Handler();
 800b4e2:	f7f6 fa3d 	bl	8001960 <Error_Handler>
}
 800b4e6:	bf00      	nop
 800b4e8:	37b0      	adds	r7, #176	; 0xb0
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	240050b0 	.word	0x240050b0
 800b4f4:	40028000 	.word	0x40028000
 800b4f8:	30000080 	.word	0x30000080
 800b4fc:	30000000 	.word	0x30000000
 800b500:	24005138 	.word	0x24005138
 800b504:	0801f21c 	.word	0x0801f21c
 800b508:	30000100 	.word	0x30000100
 800b50c:	240000c0 	.word	0x240000c0
 800b510:	0801bdd4 	.word	0x0801bdd4
 800b514:	0800b729 	.word	0x0800b729
 800b518:	24000018 	.word	0x24000018
 800b51c:	24005090 	.word	0x24005090

0800b520 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b092      	sub	sp, #72	; 0x48
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b534:	f107 030c 	add.w	r3, r7, #12
 800b538:	2230      	movs	r2, #48	; 0x30
 800b53a:	2100      	movs	r1, #0
 800b53c:	4618      	mov	r0, r3
 800b53e:	f00f fbba 	bl	801acb6 <memset>

  for(q = p; q != NULL; q = q->next)
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	643b      	str	r3, [r7, #64]	; 0x40
 800b546:	e049      	b.n	800b5dc <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b548:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54a:	2b03      	cmp	r3, #3
 800b54c:	d902      	bls.n	800b554 <low_level_output+0x34>
      return ERR_IF;
 800b54e:	f06f 030b 	mvn.w	r3, #11
 800b552:	e056      	b.n	800b602 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800b554:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b556:	6859      	ldr	r1, [r3, #4]
 800b558:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b55a:	4613      	mov	r3, r2
 800b55c:	005b      	lsls	r3, r3, #1
 800b55e:	4413      	add	r3, r2
 800b560:	009b      	lsls	r3, r3, #2
 800b562:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b566:	4413      	add	r3, r2
 800b568:	3b3c      	subs	r3, #60	; 0x3c
 800b56a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b56e:	895b      	ldrh	r3, [r3, #10]
 800b570:	4619      	mov	r1, r3
 800b572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b574:	4613      	mov	r3, r2
 800b576:	005b      	lsls	r3, r3, #1
 800b578:	4413      	add	r3, r2
 800b57a:	009b      	lsls	r3, r3, #2
 800b57c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b580:	4413      	add	r3, r2
 800b582:	3b38      	subs	r3, #56	; 0x38
 800b584:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b586:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d012      	beq.n	800b5b2 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b58c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b58e:	1e5a      	subs	r2, r3, #1
 800b590:	f107 000c 	add.w	r0, r7, #12
 800b594:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b596:	460b      	mov	r3, r1
 800b598:	005b      	lsls	r3, r3, #1
 800b59a:	440b      	add	r3, r1
 800b59c:	009b      	lsls	r3, r3, #2
 800b59e:	18c1      	adds	r1, r0, r3
 800b5a0:	4613      	mov	r3, r2
 800b5a2:	005b      	lsls	r3, r3, #1
 800b5a4:	4413      	add	r3, r2
 800b5a6:	009b      	lsls	r3, r3, #2
 800b5a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5ac:	4413      	add	r3, r2
 800b5ae:	3b34      	subs	r3, #52	; 0x34
 800b5b0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b5b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10a      	bne.n	800b5d0 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800b5ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5bc:	4613      	mov	r3, r2
 800b5be:	005b      	lsls	r3, r3, #1
 800b5c0:	4413      	add	r3, r2
 800b5c2:	009b      	lsls	r3, r3, #2
 800b5c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b5c8:	4413      	add	r3, r2
 800b5ca:	3b34      	subs	r3, #52	; 0x34
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b5d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b5d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	643b      	str	r3, [r7, #64]	; 0x40
 800b5dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1b2      	bne.n	800b548 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	891b      	ldrh	r3, [r3, #8]
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	4b08      	ldr	r3, [pc, #32]	; (800b60c <low_level_output+0xec>)
 800b5ea:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b5ec:	4a07      	ldr	r2, [pc, #28]	; (800b60c <low_level_output+0xec>)
 800b5ee:	f107 030c 	add.w	r3, r7, #12
 800b5f2:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b5f4:	2214      	movs	r2, #20
 800b5f6:	4905      	ldr	r1, [pc, #20]	; (800b60c <low_level_output+0xec>)
 800b5f8:	4805      	ldr	r0, [pc, #20]	; (800b610 <low_level_output+0xf0>)
 800b5fa:	f7f7 ff07 	bl	800340c <HAL_ETH_Transmit>

  return errval;
 800b5fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b602:	4618      	mov	r0, r3
 800b604:	3748      	adds	r7, #72	; 0x48
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
 800b60a:	bf00      	nop
 800b60c:	24005138 	.word	0x24005138
 800b610:	240050b0 	.word	0x240050b0

0800b614 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b098      	sub	sp, #96	; 0x60
 800b618:	af02      	add	r7, sp, #8
 800b61a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800b620:	2300      	movs	r3, #0
 800b622:	60bb      	str	r3, [r7, #8]
 800b624:	2300      	movs	r3, #0
 800b626:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b628:	f107 030c 	add.w	r3, r7, #12
 800b62c:	2230      	movs	r2, #48	; 0x30
 800b62e:	2100      	movs	r1, #0
 800b630:	4618      	mov	r0, r3
 800b632:	f00f fb40 	bl	801acb6 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b636:	2300      	movs	r3, #0
 800b638:	653b      	str	r3, [r7, #80]	; 0x50
 800b63a:	e015      	b.n	800b668 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800b63c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b63e:	1c5a      	adds	r2, r3, #1
 800b640:	f107 010c 	add.w	r1, r7, #12
 800b644:	4613      	mov	r3, r2
 800b646:	005b      	lsls	r3, r3, #1
 800b648:	4413      	add	r3, r2
 800b64a:	009b      	lsls	r3, r3, #2
 800b64c:	4419      	add	r1, r3
 800b64e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b650:	4613      	mov	r3, r2
 800b652:	005b      	lsls	r3, r3, #1
 800b654:	4413      	add	r3, r2
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b65c:	4413      	add	r3, r2
 800b65e:	3b44      	subs	r3, #68	; 0x44
 800b660:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b662:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b664:	3301      	adds	r3, #1
 800b666:	653b      	str	r3, [r7, #80]	; 0x50
 800b668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b66a:	2b02      	cmp	r3, #2
 800b66c:	d9e6      	bls.n	800b63c <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800b66e:	f107 030c 	add.w	r3, r7, #12
 800b672:	4619      	mov	r1, r3
 800b674:	4828      	ldr	r0, [pc, #160]	; (800b718 <low_level_input+0x104>)
 800b676:	f7f8 f842 	bl	80036fe <HAL_ETH_GetRxDataBuffer>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d145      	bne.n	800b70c <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800b680:	f107 0308 	add.w	r3, r7, #8
 800b684:	4619      	mov	r1, r3
 800b686:	4824      	ldr	r0, [pc, #144]	; (800b718 <low_level_input+0x104>)
 800b688:	f7f8 f8d7 	bl	800383a <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800b68c:	4822      	ldr	r0, [pc, #136]	; (800b718 <low_level_input+0x104>)
 800b68e:	f7f8 f907 	bl	80038a0 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	64bb      	str	r3, [r7, #72]	; 0x48
 800b698:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800b69a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	dd1d      	ble.n	800b6dc <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b6a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6a2:	f003 021f 	and.w	r2, r3, #31
 800b6a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6a8:	4413      	add	r3, r2
 800b6aa:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b6ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800b6b0:	f3bf 8f4f 	dsb	sy
}
 800b6b4:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b6b6:	4a19      	ldr	r2, [pc, #100]	; (800b71c <low_level_input+0x108>)
 800b6b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ba:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6c0:	3320      	adds	r3, #32
 800b6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b6c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6c6:	3b20      	subs	r3, #32
 800b6c8:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800b6ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	dcf2      	bgt.n	800b6b6 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800b6d0:	f3bf 8f4f 	dsb	sy
}
 800b6d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b6d6:	f3bf 8f6f 	isb	sy
}
 800b6da:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800b6dc:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b6de:	4810      	ldr	r0, [pc, #64]	; (800b720 <low_level_input+0x10c>)
 800b6e0:	f004 ffdc 	bl	801069c <memp_malloc_pool>
 800b6e4:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800b6e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d00f      	beq.n	800b70c <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800b6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6ee:	4a0d      	ldr	r2, [pc, #52]	; (800b724 <low_level_input+0x110>)
 800b6f0:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	b299      	uxth	r1, r3
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	68ba      	ldr	r2, [r7, #8]
 800b6fa:	b292      	uxth	r2, r2
 800b6fc:	9201      	str	r2, [sp, #4]
 800b6fe:	9300      	str	r3, [sp, #0]
 800b700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b702:	2241      	movs	r2, #65	; 0x41
 800b704:	2000      	movs	r0, #0
 800b706:	f005 fd4b 	bl	80111a0 <pbuf_alloced_custom>
 800b70a:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800b70c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3758      	adds	r7, #88	; 0x58
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}
 800b716:	bf00      	nop
 800b718:	240050b0 	.word	0x240050b0
 800b71c:	e000ed00 	.word	0xe000ed00
 800b720:	0801f21c 	.word	0x0801f21c
 800b724:	0800b7d5 	.word	0x0800b7d5

0800b728 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b734:	4b0f      	ldr	r3, [pc, #60]	; (800b774 <ethernetif_input+0x4c>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f04f 31ff 	mov.w	r1, #4294967295
 800b73c:	4618      	mov	r0, r3
 800b73e:	f000 fc1d 	bl	800bf7c <osSemaphoreAcquire>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d1f5      	bne.n	800b734 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f7ff ff63 	bl	800b614 <low_level_input>
 800b74e:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00a      	beq.n	800b76c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	68f9      	ldr	r1, [r7, #12]
 800b75c:	68b8      	ldr	r0, [r7, #8]
 800b75e:	4798      	blx	r3
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d002      	beq.n	800b76c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800b766:	68b8      	ldr	r0, [r7, #8]
 800b768:	f005 fed4 	bl	8011514 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b76c:	68bb      	ldr	r3, [r7, #8]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d1ea      	bne.n	800b748 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b772:	e7df      	b.n	800b734 <ethernetif_input+0xc>
 800b774:	240000c0 	.word	0x240000c0

0800b778 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d106      	bne.n	800b794 <ethernetif_init+0x1c>
 800b786:	4b0e      	ldr	r3, [pc, #56]	; (800b7c0 <ethernetif_init+0x48>)
 800b788:	f240 224e 	movw	r2, #590	; 0x24e
 800b78c:	490d      	ldr	r1, [pc, #52]	; (800b7c4 <ethernetif_init+0x4c>)
 800b78e:	480e      	ldr	r0, [pc, #56]	; (800b7c8 <ethernetif_init+0x50>)
 800b790:	f00f faf4 	bl	801ad7c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	2273      	movs	r2, #115	; 0x73
 800b798:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2274      	movs	r2, #116	; 0x74
 800b7a0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	4a09      	ldr	r2, [pc, #36]	; (800b7cc <ethernetif_init+0x54>)
 800b7a8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	4a08      	ldr	r2, [pc, #32]	; (800b7d0 <ethernetif_init+0x58>)
 800b7ae:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f7ff fd71 	bl	800b298 <low_level_init>

  return ERR_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3708      	adds	r7, #8
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}
 800b7c0:	0801bddc 	.word	0x0801bddc
 800b7c4:	0801bdf8 	.word	0x0801bdf8
 800b7c8:	0801be08 	.word	0x0801be08
 800b7cc:	08018a09 	.word	0x08018a09
 800b7d0:	0800b521 	.word	0x0800b521

0800b7d4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b7d4:	b580      	push	{r7, lr}
 800b7d6:	b084      	sub	sp, #16
 800b7d8:	af00      	add	r7, sp, #0
 800b7da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b7e0:	68f9      	ldr	r1, [r7, #12]
 800b7e2:	4803      	ldr	r0, [pc, #12]	; (800b7f0 <pbuf_free_custom+0x1c>)
 800b7e4:	f004 ffce 	bl	8010784 <memp_free_pool>
}
 800b7e8:	bf00      	nop
 800b7ea:	3710      	adds	r7, #16
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	0801f21c 	.word	0x0801f21c

0800b7f4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b7f8:	f7f7 f964 	bl	8002ac4 <HAL_GetTick>
 800b7fc:	4603      	mov	r3, r0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b808:	4802      	ldr	r0, [pc, #8]	; (800b814 <ETH_PHY_IO_Init+0x10>)
 800b80a:	f7f8 fc7f 	bl	800410c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	bd80      	pop	{r7, pc}
 800b814:	240050b0 	.word	0x240050b0

0800b818 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
  return 0;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	46bd      	mov	sp, r7
 800b822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b826:	4770      	bx	lr

0800b828 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b084      	sub	sp, #16
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	60f8      	str	r0, [r7, #12]
 800b830:	60b9      	str	r1, [r7, #8]
 800b832:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	68ba      	ldr	r2, [r7, #8]
 800b838:	68f9      	ldr	r1, [r7, #12]
 800b83a:	4807      	ldr	r0, [pc, #28]	; (800b858 <ETH_PHY_IO_ReadReg+0x30>)
 800b83c:	f7f8 f9d0 	bl	8003be0 <HAL_ETH_ReadPHYRegister>
 800b840:	4603      	mov	r3, r0
 800b842:	2b00      	cmp	r3, #0
 800b844:	d002      	beq.n	800b84c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b846:	f04f 33ff 	mov.w	r3, #4294967295
 800b84a:	e000      	b.n	800b84e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b84c:	2300      	movs	r3, #0
}
 800b84e:	4618      	mov	r0, r3
 800b850:	3710      	adds	r7, #16
 800b852:	46bd      	mov	sp, r7
 800b854:	bd80      	pop	{r7, pc}
 800b856:	bf00      	nop
 800b858:	240050b0 	.word	0x240050b0

0800b85c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	68ba      	ldr	r2, [r7, #8]
 800b86c:	68f9      	ldr	r1, [r7, #12]
 800b86e:	4807      	ldr	r0, [pc, #28]	; (800b88c <ETH_PHY_IO_WriteReg+0x30>)
 800b870:	f7f8 fa0a 	bl	8003c88 <HAL_ETH_WritePHYRegister>
 800b874:	4603      	mov	r3, r0
 800b876:	2b00      	cmp	r3, #0
 800b878:	d002      	beq.n	800b880 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b87a:	f04f 33ff 	mov.w	r3, #4294967295
 800b87e:	e000      	b.n	800b882 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b880:	2300      	movs	r3, #0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3710      	adds	r7, #16
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	240050b0 	.word	0x240050b0

0800b890 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b890:	b580      	push	{r7, lr}
 800b892:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b894:	f7f7 f916 	bl	8002ac4 <HAL_GetTick>
 800b898:	4603      	mov	r3, r0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b0a0      	sub	sp, #128	; 0x80
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b8b8:	483a      	ldr	r0, [pc, #232]	; (800b9a4 <ethernet_link_thread+0x104>)
 800b8ba:	f7f7 f82c 	bl	8002916 <LAN8742_GetLinkState>
 800b8be:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b8c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8c2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8c6:	089b      	lsrs	r3, r3, #2
 800b8c8:	f003 0301 	and.w	r3, r3, #1
 800b8cc:	b2db      	uxtb	r3, r3
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d00c      	beq.n	800b8ec <ethernet_link_thread+0x4c>
 800b8d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	dc09      	bgt.n	800b8ec <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800b8d8:	4833      	ldr	r0, [pc, #204]	; (800b9a8 <ethernet_link_thread+0x108>)
 800b8da:	f7f7 fd1d 	bl	8003318 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b8de:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b8e0:	f005 f9d4 	bl	8010c8c <netif_set_down>
    netif_set_link_down(netif);
 800b8e4:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b8e6:	f005 fa37 	bl	8010d58 <netif_set_link_down>
 800b8ea:	e056      	b.n	800b99a <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b8ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b8ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8f2:	f003 0304 	and.w	r3, r3, #4
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d14f      	bne.n	800b99a <ethernet_link_thread+0xfa>
 800b8fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b8fc:	2b01      	cmp	r3, #1
 800b8fe:	dd4c      	ble.n	800b99a <ethernet_link_thread+0xfa>
 800b900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b902:	3b02      	subs	r3, #2
 800b904:	2b03      	cmp	r3, #3
 800b906:	d82b      	bhi.n	800b960 <ethernet_link_thread+0xc0>
 800b908:	a201      	add	r2, pc, #4	; (adr r2, 800b910 <ethernet_link_thread+0x70>)
 800b90a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b90e:	bf00      	nop
 800b910:	0800b921 	.word	0x0800b921
 800b914:	0800b933 	.word	0x0800b933
 800b918:	0800b943 	.word	0x0800b943
 800b91c:	0800b953 	.word	0x0800b953
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b920:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b924:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b926:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b92a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b92c:	2301      	movs	r3, #1
 800b92e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b930:	e017      	b.n	800b962 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b932:	2300      	movs	r3, #0
 800b934:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b936:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b93a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b93c:	2301      	movs	r3, #1
 800b93e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b940:	e00f      	b.n	800b962 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b946:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b948:	2300      	movs	r3, #0
 800b94a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b94c:	2301      	movs	r3, #1
 800b94e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b950:	e007      	b.n	800b962 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b952:	2300      	movs	r3, #0
 800b954:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b956:	2300      	movs	r3, #0
 800b958:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b95a:	2301      	movs	r3, #1
 800b95c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b95e:	e000      	b.n	800b962 <ethernet_link_thread+0xc2>
    default:
      break;
 800b960:	bf00      	nop
    }

    if(linkchanged)
 800b962:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b964:	2b00      	cmp	r3, #0
 800b966:	d018      	beq.n	800b99a <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b968:	f107 0308 	add.w	r3, r7, #8
 800b96c:	4619      	mov	r1, r3
 800b96e:	480e      	ldr	r0, [pc, #56]	; (800b9a8 <ethernet_link_thread+0x108>)
 800b970:	f7f8 f9de 	bl	8003d30 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b976:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b97a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b97c:	f107 0308 	add.w	r3, r7, #8
 800b980:	4619      	mov	r1, r3
 800b982:	4809      	ldr	r0, [pc, #36]	; (800b9a8 <ethernet_link_thread+0x108>)
 800b984:	f7f8 fba8 	bl	80040d8 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800b988:	4807      	ldr	r0, [pc, #28]	; (800b9a8 <ethernet_link_thread+0x108>)
 800b98a:	f7f7 fc40 	bl	800320e <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b98e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b990:	f005 f910 	bl	8010bb4 <netif_set_up>
      netif_set_link_up(netif);
 800b994:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b996:	f005 f9ab 	bl	8010cf0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b99a:	2064      	movs	r0, #100	; 0x64
 800b99c:	f000 f93b 	bl	800bc16 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b9a0:	e78a      	b.n	800b8b8 <ethernet_link_thread+0x18>
 800b9a2:	bf00      	nop
 800b9a4:	24005090 	.word	0x24005090
 800b9a8:	240050b0 	.word	0x240050b0

0800b9ac <__NVIC_SetPriority>:
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	6039      	str	r1, [r7, #0]
 800b9b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b9b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	db0a      	blt.n	800b9d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	490c      	ldr	r1, [pc, #48]	; (800b9f8 <__NVIC_SetPriority+0x4c>)
 800b9c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b9ca:	0112      	lsls	r2, r2, #4
 800b9cc:	b2d2      	uxtb	r2, r2
 800b9ce:	440b      	add	r3, r1
 800b9d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800b9d4:	e00a      	b.n	800b9ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	b2da      	uxtb	r2, r3
 800b9da:	4908      	ldr	r1, [pc, #32]	; (800b9fc <__NVIC_SetPriority+0x50>)
 800b9dc:	88fb      	ldrh	r3, [r7, #6]
 800b9de:	f003 030f 	and.w	r3, r3, #15
 800b9e2:	3b04      	subs	r3, #4
 800b9e4:	0112      	lsls	r2, r2, #4
 800b9e6:	b2d2      	uxtb	r2, r2
 800b9e8:	440b      	add	r3, r1
 800b9ea:	761a      	strb	r2, [r3, #24]
}
 800b9ec:	bf00      	nop
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr
 800b9f8:	e000e100 	.word	0xe000e100
 800b9fc:	e000ed00 	.word	0xe000ed00

0800ba00 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ba00:	b580      	push	{r7, lr}
 800ba02:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800ba04:	4b05      	ldr	r3, [pc, #20]	; (800ba1c <SysTick_Handler+0x1c>)
 800ba06:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ba08:	f002 fcb8 	bl	800e37c <xTaskGetSchedulerState>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	2b01      	cmp	r3, #1
 800ba10:	d001      	beq.n	800ba16 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800ba12:	f003 fcb9 	bl	800f388 <xPortSysTickHandler>
  }
}
 800ba16:	bf00      	nop
 800ba18:	bd80      	pop	{r7, pc}
 800ba1a:	bf00      	nop
 800ba1c:	e000e010 	.word	0xe000e010

0800ba20 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800ba24:	2100      	movs	r1, #0
 800ba26:	f06f 0004 	mvn.w	r0, #4
 800ba2a:	f7ff ffbf 	bl	800b9ac <__NVIC_SetPriority>
#endif
}
 800ba2e:	bf00      	nop
 800ba30:	bd80      	pop	{r7, pc}
	...

0800ba34 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba3a:	f3ef 8305 	mrs	r3, IPSR
 800ba3e:	603b      	str	r3, [r7, #0]
  return(result);
 800ba40:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d003      	beq.n	800ba4e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800ba46:	f06f 0305 	mvn.w	r3, #5
 800ba4a:	607b      	str	r3, [r7, #4]
 800ba4c:	e00c      	b.n	800ba68 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ba4e:	4b0a      	ldr	r3, [pc, #40]	; (800ba78 <osKernelInitialize+0x44>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d105      	bne.n	800ba62 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ba56:	4b08      	ldr	r3, [pc, #32]	; (800ba78 <osKernelInitialize+0x44>)
 800ba58:	2201      	movs	r2, #1
 800ba5a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	607b      	str	r3, [r7, #4]
 800ba60:	e002      	b.n	800ba68 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ba62:	f04f 33ff 	mov.w	r3, #4294967295
 800ba66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ba68:	687b      	ldr	r3, [r7, #4]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	370c      	adds	r7, #12
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr
 800ba76:	bf00      	nop
 800ba78:	240000c8 	.word	0x240000c8

0800ba7c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ba82:	f3ef 8305 	mrs	r3, IPSR
 800ba86:	603b      	str	r3, [r7, #0]
  return(result);
 800ba88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d003      	beq.n	800ba96 <osKernelStart+0x1a>
    stat = osErrorISR;
 800ba8e:	f06f 0305 	mvn.w	r3, #5
 800ba92:	607b      	str	r3, [r7, #4]
 800ba94:	e010      	b.n	800bab8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ba96:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <osKernelStart+0x48>)
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d109      	bne.n	800bab2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ba9e:	f7ff ffbf 	bl	800ba20 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800baa2:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <osKernelStart+0x48>)
 800baa4:	2202      	movs	r2, #2
 800baa6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800baa8:	f001 ffcc 	bl	800da44 <vTaskStartScheduler>
      stat = osOK;
 800baac:	2300      	movs	r3, #0
 800baae:	607b      	str	r3, [r7, #4]
 800bab0:	e002      	b.n	800bab8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bab2:	f04f 33ff 	mov.w	r3, #4294967295
 800bab6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bab8:	687b      	ldr	r3, [r7, #4]
}
 800baba:	4618      	mov	r0, r3
 800babc:	3708      	adds	r7, #8
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	240000c8 	.word	0x240000c8

0800bac8 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800bac8:	b580      	push	{r7, lr}
 800baca:	b082      	sub	sp, #8
 800bacc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bace:	f3ef 8305 	mrs	r3, IPSR
 800bad2:	603b      	str	r3, [r7, #0]
  return(result);
 800bad4:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d003      	beq.n	800bae2 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800bada:	f002 f8e1 	bl	800dca0 <xTaskGetTickCountFromISR>
 800bade:	6078      	str	r0, [r7, #4]
 800bae0:	e002      	b.n	800bae8 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800bae2:	f002 f8cd 	bl	800dc80 <xTaskGetTickCount>
 800bae6:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800bae8:	687b      	ldr	r3, [r7, #4]
}
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800baf2:	b580      	push	{r7, lr}
 800baf4:	b08e      	sub	sp, #56	; 0x38
 800baf6:	af04      	add	r7, sp, #16
 800baf8:	60f8      	str	r0, [r7, #12]
 800bafa:	60b9      	str	r1, [r7, #8]
 800bafc:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bafe:	2300      	movs	r3, #0
 800bb00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bb02:	f3ef 8305 	mrs	r3, IPSR
 800bb06:	617b      	str	r3, [r7, #20]
  return(result);
 800bb08:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d17e      	bne.n	800bc0c <osThreadNew+0x11a>
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d07b      	beq.n	800bc0c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bb14:	2380      	movs	r3, #128	; 0x80
 800bb16:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bb18:	2318      	movs	r3, #24
 800bb1a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bb20:	f04f 33ff 	mov.w	r3, #4294967295
 800bb24:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d045      	beq.n	800bbb8 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d002      	beq.n	800bb3a <osThreadNew+0x48>
        name = attr->name;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	699b      	ldr	r3, [r3, #24]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d002      	beq.n	800bb48 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	699b      	ldr	r3, [r3, #24]
 800bb46:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bb48:	69fb      	ldr	r3, [r7, #28]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d008      	beq.n	800bb60 <osThreadNew+0x6e>
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	2b38      	cmp	r3, #56	; 0x38
 800bb52:	d805      	bhi.n	800bb60 <osThreadNew+0x6e>
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	f003 0301 	and.w	r3, r3, #1
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <osThreadNew+0x72>
        return (NULL);
 800bb60:	2300      	movs	r3, #0
 800bb62:	e054      	b.n	800bc0e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	695b      	ldr	r3, [r3, #20]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d003      	beq.n	800bb74 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	695b      	ldr	r3, [r3, #20]
 800bb70:	089b      	lsrs	r3, r3, #2
 800bb72:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d00e      	beq.n	800bb9a <osThreadNew+0xa8>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	2bbf      	cmp	r3, #191	; 0xbf
 800bb82:	d90a      	bls.n	800bb9a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d006      	beq.n	800bb9a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	695b      	ldr	r3, [r3, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d002      	beq.n	800bb9a <osThreadNew+0xa8>
        mem = 1;
 800bb94:	2301      	movs	r3, #1
 800bb96:	61bb      	str	r3, [r7, #24]
 800bb98:	e010      	b.n	800bbbc <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	689b      	ldr	r3, [r3, #8]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d10c      	bne.n	800bbbc <osThreadNew+0xca>
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	68db      	ldr	r3, [r3, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d108      	bne.n	800bbbc <osThreadNew+0xca>
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	691b      	ldr	r3, [r3, #16]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d104      	bne.n	800bbbc <osThreadNew+0xca>
          mem = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	61bb      	str	r3, [r7, #24]
 800bbb6:	e001      	b.n	800bbbc <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bbbc:	69bb      	ldr	r3, [r7, #24]
 800bbbe:	2b01      	cmp	r3, #1
 800bbc0:	d110      	bne.n	800bbe4 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bbc6:	687a      	ldr	r2, [r7, #4]
 800bbc8:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bbca:	9202      	str	r2, [sp, #8]
 800bbcc:	9301      	str	r3, [sp, #4]
 800bbce:	69fb      	ldr	r3, [r7, #28]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	6a3a      	ldr	r2, [r7, #32]
 800bbd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbd8:	68f8      	ldr	r0, [r7, #12]
 800bbda:	f001 fd43 	bl	800d664 <xTaskCreateStatic>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	613b      	str	r3, [r7, #16]
 800bbe2:	e013      	b.n	800bc0c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d110      	bne.n	800bc0c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bbea:	6a3b      	ldr	r3, [r7, #32]
 800bbec:	b29a      	uxth	r2, r3
 800bbee:	f107 0310 	add.w	r3, r7, #16
 800bbf2:	9301      	str	r3, [sp, #4]
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bbfc:	68f8      	ldr	r0, [r7, #12]
 800bbfe:	f001 fd8e 	bl	800d71e <xTaskCreate>
 800bc02:	4603      	mov	r3, r0
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d001      	beq.n	800bc0c <osThreadNew+0x11a>
            hTask = NULL;
 800bc08:	2300      	movs	r3, #0
 800bc0a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bc0c:	693b      	ldr	r3, [r7, #16]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3728      	adds	r7, #40	; 0x28
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b084      	sub	sp, #16
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc1e:	f3ef 8305 	mrs	r3, IPSR
 800bc22:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc24:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d003      	beq.n	800bc32 <osDelay+0x1c>
    stat = osErrorISR;
 800bc2a:	f06f 0305 	mvn.w	r3, #5
 800bc2e:	60fb      	str	r3, [r7, #12]
 800bc30:	e007      	b.n	800bc42 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800bc32:	2300      	movs	r3, #0
 800bc34:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d002      	beq.n	800bc42 <osDelay+0x2c>
      vTaskDelay(ticks);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f001 fecd 	bl	800d9dc <vTaskDelay>
    }
  }

  return (stat);
 800bc42:	68fb      	ldr	r3, [r7, #12]
}
 800bc44:	4618      	mov	r0, r3
 800bc46:	3710      	adds	r7, #16
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}

0800bc4c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b088      	sub	sp, #32
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc58:	f3ef 8305 	mrs	r3, IPSR
 800bc5c:	60bb      	str	r3, [r7, #8]
  return(result);
 800bc5e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d174      	bne.n	800bd4e <osMutexNew+0x102>
    if (attr != NULL) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <osMutexNew+0x26>
      type = attr->attr_bits;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	61bb      	str	r3, [r7, #24]
 800bc70:	e001      	b.n	800bc76 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800bc72:	2300      	movs	r3, #0
 800bc74:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800bc76:	69bb      	ldr	r3, [r7, #24]
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d002      	beq.n	800bc86 <osMutexNew+0x3a>
      rmtx = 1U;
 800bc80:	2301      	movs	r3, #1
 800bc82:	617b      	str	r3, [r7, #20]
 800bc84:	e001      	b.n	800bc8a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	f003 0308 	and.w	r3, r3, #8
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d15c      	bne.n	800bd4e <osMutexNew+0x102>
      mem = -1;
 800bc94:	f04f 33ff 	mov.w	r3, #4294967295
 800bc98:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d015      	beq.n	800bccc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	689b      	ldr	r3, [r3, #8]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d006      	beq.n	800bcb6 <osMutexNew+0x6a>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	2b4f      	cmp	r3, #79	; 0x4f
 800bcae:	d902      	bls.n	800bcb6 <osMutexNew+0x6a>
          mem = 1;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	613b      	str	r3, [r7, #16]
 800bcb4:	e00c      	b.n	800bcd0 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	689b      	ldr	r3, [r3, #8]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d108      	bne.n	800bcd0 <osMutexNew+0x84>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d104      	bne.n	800bcd0 <osMutexNew+0x84>
            mem = 0;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	613b      	str	r3, [r7, #16]
 800bcca:	e001      	b.n	800bcd0 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800bccc:	2300      	movs	r3, #0
 800bcce:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	2b01      	cmp	r3, #1
 800bcd4:	d112      	bne.n	800bcfc <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800bcd6:	697b      	ldr	r3, [r7, #20]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d007      	beq.n	800bcec <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	689b      	ldr	r3, [r3, #8]
 800bce0:	4619      	mov	r1, r3
 800bce2:	2004      	movs	r0, #4
 800bce4:	f000 fd69 	bl	800c7ba <xQueueCreateMutexStatic>
 800bce8:	61f8      	str	r0, [r7, #28]
 800bcea:	e016      	b.n	800bd1a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	2001      	movs	r0, #1
 800bcf4:	f000 fd61 	bl	800c7ba <xQueueCreateMutexStatic>
 800bcf8:	61f8      	str	r0, [r7, #28]
 800bcfa:	e00e      	b.n	800bd1a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800bcfc:	693b      	ldr	r3, [r7, #16]
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d10b      	bne.n	800bd1a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d004      	beq.n	800bd12 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800bd08:	2004      	movs	r0, #4
 800bd0a:	f000 fd3e 	bl	800c78a <xQueueCreateMutex>
 800bd0e:	61f8      	str	r0, [r7, #28]
 800bd10:	e003      	b.n	800bd1a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800bd12:	2001      	movs	r0, #1
 800bd14:	f000 fd39 	bl	800c78a <xQueueCreateMutex>
 800bd18:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d00c      	beq.n	800bd3a <osMutexNew+0xee>
        if (attr != NULL) {
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d003      	beq.n	800bd2e <osMutexNew+0xe2>
          name = attr->name;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	60fb      	str	r3, [r7, #12]
 800bd2c:	e001      	b.n	800bd32 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800bd32:	68f9      	ldr	r1, [r7, #12]
 800bd34:	69f8      	ldr	r0, [r7, #28]
 800bd36:	f001 fc0d 	bl	800d554 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800bd3a:	69fb      	ldr	r3, [r7, #28]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d006      	beq.n	800bd4e <osMutexNew+0x102>
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	f043 0301 	orr.w	r3, r3, #1
 800bd4c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800bd4e:	69fb      	ldr	r3, [r7, #28]
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3720      	adds	r7, #32
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b086      	sub	sp, #24
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f023 0301 	bic.w	r3, r3, #1
 800bd68:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	f003 0301 	and.w	r3, r3, #1
 800bd70:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800bd72:	2300      	movs	r3, #0
 800bd74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bd76:	f3ef 8305 	mrs	r3, IPSR
 800bd7a:	60bb      	str	r3, [r7, #8]
  return(result);
 800bd7c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800bd82:	f06f 0305 	mvn.w	r3, #5
 800bd86:	617b      	str	r3, [r7, #20]
 800bd88:	e02c      	b.n	800bde4 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d103      	bne.n	800bd98 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800bd90:	f06f 0303 	mvn.w	r3, #3
 800bd94:	617b      	str	r3, [r7, #20]
 800bd96:	e025      	b.n	800bde4 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d011      	beq.n	800bdc2 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6938      	ldr	r0, [r7, #16]
 800bda2:	f000 fd59 	bl	800c858 <xQueueTakeMutexRecursive>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b01      	cmp	r3, #1
 800bdaa:	d01b      	beq.n	800bde4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d003      	beq.n	800bdba <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800bdb2:	f06f 0301 	mvn.w	r3, #1
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	e014      	b.n	800bde4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bdba:	f06f 0302 	mvn.w	r3, #2
 800bdbe:	617b      	str	r3, [r7, #20]
 800bdc0:	e010      	b.n	800bde4 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6938      	ldr	r0, [r7, #16]
 800bdc6:	f001 f8ed 	bl	800cfa4 <xQueueSemaphoreTake>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d009      	beq.n	800bde4 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d003      	beq.n	800bdde <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800bdd6:	f06f 0301 	mvn.w	r3, #1
 800bdda:	617b      	str	r3, [r7, #20]
 800bddc:	e002      	b.n	800bde4 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800bdde:	f06f 0302 	mvn.w	r3, #2
 800bde2:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800bde4:	697b      	ldr	r3, [r7, #20]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3718      	adds	r7, #24
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}

0800bdee <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800bdee:	b580      	push	{r7, lr}
 800bdf0:	b086      	sub	sp, #24
 800bdf2:	af00      	add	r7, sp, #0
 800bdf4:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f023 0301 	bic.w	r3, r3, #1
 800bdfc:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800be06:	2300      	movs	r3, #0
 800be08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be0a:	f3ef 8305 	mrs	r3, IPSR
 800be0e:	60bb      	str	r3, [r7, #8]
  return(result);
 800be10:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800be12:	2b00      	cmp	r3, #0
 800be14:	d003      	beq.n	800be1e <osMutexRelease+0x30>
    stat = osErrorISR;
 800be16:	f06f 0305 	mvn.w	r3, #5
 800be1a:	617b      	str	r3, [r7, #20]
 800be1c:	e01f      	b.n	800be5e <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800be1e:	693b      	ldr	r3, [r7, #16]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d103      	bne.n	800be2c <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800be24:	f06f 0303 	mvn.w	r3, #3
 800be28:	617b      	str	r3, [r7, #20]
 800be2a:	e018      	b.n	800be5e <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800be32:	6938      	ldr	r0, [r7, #16]
 800be34:	f000 fcdc 	bl	800c7f0 <xQueueGiveMutexRecursive>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d00f      	beq.n	800be5e <osMutexRelease+0x70>
        stat = osErrorResource;
 800be3e:	f06f 0302 	mvn.w	r3, #2
 800be42:	617b      	str	r3, [r7, #20]
 800be44:	e00b      	b.n	800be5e <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800be46:	2300      	movs	r3, #0
 800be48:	2200      	movs	r2, #0
 800be4a:	2100      	movs	r1, #0
 800be4c:	6938      	ldr	r0, [r7, #16]
 800be4e:	f000 fda3 	bl	800c998 <xQueueGenericSend>
 800be52:	4603      	mov	r3, r0
 800be54:	2b01      	cmp	r3, #1
 800be56:	d002      	beq.n	800be5e <osMutexRelease+0x70>
        stat = osErrorResource;
 800be58:	f06f 0302 	mvn.w	r3, #2
 800be5c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800be5e:	697b      	ldr	r3, [r7, #20]
}
 800be60:	4618      	mov	r0, r3
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}

0800be68 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800be68:	b580      	push	{r7, lr}
 800be6a:	b08a      	sub	sp, #40	; 0x28
 800be6c:	af02      	add	r7, sp, #8
 800be6e:	60f8      	str	r0, [r7, #12]
 800be70:	60b9      	str	r1, [r7, #8]
 800be72:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800be74:	2300      	movs	r3, #0
 800be76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be78:	f3ef 8305 	mrs	r3, IPSR
 800be7c:	613b      	str	r3, [r7, #16]
  return(result);
 800be7e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800be80:	2b00      	cmp	r3, #0
 800be82:	d175      	bne.n	800bf70 <osSemaphoreNew+0x108>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d072      	beq.n	800bf70 <osSemaphoreNew+0x108>
 800be8a:	68ba      	ldr	r2, [r7, #8]
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	429a      	cmp	r2, r3
 800be90:	d86e      	bhi.n	800bf70 <osSemaphoreNew+0x108>
    mem = -1;
 800be92:	f04f 33ff 	mov.w	r3, #4294967295
 800be96:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d015      	beq.n	800beca <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	689b      	ldr	r3, [r3, #8]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d006      	beq.n	800beb4 <osSemaphoreNew+0x4c>
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	2b4f      	cmp	r3, #79	; 0x4f
 800beac:	d902      	bls.n	800beb4 <osSemaphoreNew+0x4c>
        mem = 1;
 800beae:	2301      	movs	r3, #1
 800beb0:	61bb      	str	r3, [r7, #24]
 800beb2:	e00c      	b.n	800bece <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d108      	bne.n	800bece <osSemaphoreNew+0x66>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	68db      	ldr	r3, [r3, #12]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d104      	bne.n	800bece <osSemaphoreNew+0x66>
          mem = 0;
 800bec4:	2300      	movs	r3, #0
 800bec6:	61bb      	str	r3, [r7, #24]
 800bec8:	e001      	b.n	800bece <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800beca:	2300      	movs	r3, #0
 800becc:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800bece:	69bb      	ldr	r3, [r7, #24]
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d04c      	beq.n	800bf70 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d128      	bne.n	800bf2e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800bedc:	69bb      	ldr	r3, [r7, #24]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	d10a      	bne.n	800bef8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	689b      	ldr	r3, [r3, #8]
 800bee6:	2203      	movs	r2, #3
 800bee8:	9200      	str	r2, [sp, #0]
 800beea:	2200      	movs	r2, #0
 800beec:	2100      	movs	r1, #0
 800beee:	2001      	movs	r0, #1
 800bef0:	f000 fb5c 	bl	800c5ac <xQueueGenericCreateStatic>
 800bef4:	61f8      	str	r0, [r7, #28]
 800bef6:	e005      	b.n	800bf04 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800bef8:	2203      	movs	r2, #3
 800befa:	2100      	movs	r1, #0
 800befc:	2001      	movs	r0, #1
 800befe:	f000 fbcd 	bl	800c69c <xQueueGenericCreate>
 800bf02:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d022      	beq.n	800bf50 <osSemaphoreNew+0xe8>
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d01f      	beq.n	800bf50 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800bf10:	2300      	movs	r3, #0
 800bf12:	2200      	movs	r2, #0
 800bf14:	2100      	movs	r1, #0
 800bf16:	69f8      	ldr	r0, [r7, #28]
 800bf18:	f000 fd3e 	bl	800c998 <xQueueGenericSend>
 800bf1c:	4603      	mov	r3, r0
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d016      	beq.n	800bf50 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800bf22:	69f8      	ldr	r0, [r7, #28]
 800bf24:	f001 f9ca 	bl	800d2bc <vQueueDelete>
            hSemaphore = NULL;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	61fb      	str	r3, [r7, #28]
 800bf2c:	e010      	b.n	800bf50 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800bf2e:	69bb      	ldr	r3, [r7, #24]
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d108      	bne.n	800bf46 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	461a      	mov	r2, r3
 800bf3a:	68b9      	ldr	r1, [r7, #8]
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f000 fcc1 	bl	800c8c4 <xQueueCreateCountingSemaphoreStatic>
 800bf42:	61f8      	str	r0, [r7, #28]
 800bf44:	e004      	b.n	800bf50 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800bf46:	68b9      	ldr	r1, [r7, #8]
 800bf48:	68f8      	ldr	r0, [r7, #12]
 800bf4a:	f000 fcf2 	bl	800c932 <xQueueCreateCountingSemaphore>
 800bf4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d00c      	beq.n	800bf70 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d003      	beq.n	800bf64 <osSemaphoreNew+0xfc>
          name = attr->name;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	617b      	str	r3, [r7, #20]
 800bf62:	e001      	b.n	800bf68 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800bf64:	2300      	movs	r3, #0
 800bf66:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800bf68:	6979      	ldr	r1, [r7, #20]
 800bf6a:	69f8      	ldr	r0, [r7, #28]
 800bf6c:	f001 faf2 	bl	800d554 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800bf70:	69fb      	ldr	r3, [r7, #28]
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3720      	adds	r7, #32
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
	...

0800bf7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b086      	sub	sp, #24
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d103      	bne.n	800bf9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800bf94:	f06f 0303 	mvn.w	r3, #3
 800bf98:	617b      	str	r3, [r7, #20]
 800bf9a:	e039      	b.n	800c010 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf9c:	f3ef 8305 	mrs	r3, IPSR
 800bfa0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d022      	beq.n	800bfee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d003      	beq.n	800bfb6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800bfae:	f06f 0303 	mvn.w	r3, #3
 800bfb2:	617b      	str	r3, [r7, #20]
 800bfb4:	e02c      	b.n	800c010 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800bfba:	f107 0308 	add.w	r3, r7, #8
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	6938      	ldr	r0, [r7, #16]
 800bfc4:	f001 f8fa 	bl	800d1bc <xQueueReceiveFromISR>
 800bfc8:	4603      	mov	r3, r0
 800bfca:	2b01      	cmp	r3, #1
 800bfcc:	d003      	beq.n	800bfd6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800bfce:	f06f 0302 	mvn.w	r3, #2
 800bfd2:	617b      	str	r3, [r7, #20]
 800bfd4:	e01c      	b.n	800c010 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d019      	beq.n	800c010 <osSemaphoreAcquire+0x94>
 800bfdc:	4b0f      	ldr	r3, [pc, #60]	; (800c01c <osSemaphoreAcquire+0xa0>)
 800bfde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfe2:	601a      	str	r2, [r3, #0]
 800bfe4:	f3bf 8f4f 	dsb	sy
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	e010      	b.n	800c010 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800bfee:	6839      	ldr	r1, [r7, #0]
 800bff0:	6938      	ldr	r0, [r7, #16]
 800bff2:	f000 ffd7 	bl	800cfa4 <xQueueSemaphoreTake>
 800bff6:	4603      	mov	r3, r0
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d009      	beq.n	800c010 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d003      	beq.n	800c00a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c002:	f06f 0301 	mvn.w	r3, #1
 800c006:	617b      	str	r3, [r7, #20]
 800c008:	e002      	b.n	800c010 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c00a:	f06f 0302 	mvn.w	r3, #2
 800c00e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c010:	697b      	ldr	r3, [r7, #20]
}
 800c012:	4618      	mov	r0, r3
 800c014:	3718      	adds	r7, #24
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	e000ed04 	.word	0xe000ed04

0800c020 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c02c:	2300      	movs	r3, #0
 800c02e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d103      	bne.n	800c03e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c036:	f06f 0303 	mvn.w	r3, #3
 800c03a:	617b      	str	r3, [r7, #20]
 800c03c:	e02c      	b.n	800c098 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c03e:	f3ef 8305 	mrs	r3, IPSR
 800c042:	60fb      	str	r3, [r7, #12]
  return(result);
 800c044:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c046:	2b00      	cmp	r3, #0
 800c048:	d01a      	beq.n	800c080 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c04a:	2300      	movs	r3, #0
 800c04c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c04e:	f107 0308 	add.w	r3, r7, #8
 800c052:	4619      	mov	r1, r3
 800c054:	6938      	ldr	r0, [r7, #16]
 800c056:	f000 fe38 	bl	800ccca <xQueueGiveFromISR>
 800c05a:	4603      	mov	r3, r0
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d003      	beq.n	800c068 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c060:	f06f 0302 	mvn.w	r3, #2
 800c064:	617b      	str	r3, [r7, #20]
 800c066:	e017      	b.n	800c098 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d014      	beq.n	800c098 <osSemaphoreRelease+0x78>
 800c06e:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <osSemaphoreRelease+0x84>)
 800c070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c074:	601a      	str	r2, [r3, #0]
 800c076:	f3bf 8f4f 	dsb	sy
 800c07a:	f3bf 8f6f 	isb	sy
 800c07e:	e00b      	b.n	800c098 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c080:	2300      	movs	r3, #0
 800c082:	2200      	movs	r2, #0
 800c084:	2100      	movs	r1, #0
 800c086:	6938      	ldr	r0, [r7, #16]
 800c088:	f000 fc86 	bl	800c998 <xQueueGenericSend>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b01      	cmp	r3, #1
 800c090:	d002      	beq.n	800c098 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c092:	f06f 0302 	mvn.w	r3, #2
 800c096:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c098:	697b      	ldr	r3, [r7, #20]
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3718      	adds	r7, #24
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
 800c0a2:	bf00      	nop
 800c0a4:	e000ed04 	.word	0xe000ed04

0800c0a8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b08a      	sub	sp, #40	; 0x28
 800c0ac:	af02      	add	r7, sp, #8
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c0b8:	f3ef 8305 	mrs	r3, IPSR
 800c0bc:	613b      	str	r3, [r7, #16]
  return(result);
 800c0be:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d15f      	bne.n	800c184 <osMessageQueueNew+0xdc>
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d05c      	beq.n	800c184 <osMessageQueueNew+0xdc>
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d059      	beq.n	800c184 <osMessageQueueNew+0xdc>
    mem = -1;
 800c0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d029      	beq.n	800c130 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	689b      	ldr	r3, [r3, #8]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d012      	beq.n	800c10a <osMessageQueueNew+0x62>
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	2b4f      	cmp	r3, #79	; 0x4f
 800c0ea:	d90e      	bls.n	800c10a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d00a      	beq.n	800c10a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	695a      	ldr	r2, [r3, #20]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	fb01 f303 	mul.w	r3, r1, r3
 800c100:	429a      	cmp	r2, r3
 800c102:	d302      	bcc.n	800c10a <osMessageQueueNew+0x62>
        mem = 1;
 800c104:	2301      	movs	r3, #1
 800c106:	61bb      	str	r3, [r7, #24]
 800c108:	e014      	b.n	800c134 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d110      	bne.n	800c134 <osMessageQueueNew+0x8c>
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	68db      	ldr	r3, [r3, #12]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10c      	bne.n	800c134 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d108      	bne.n	800c134 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d104      	bne.n	800c134 <osMessageQueueNew+0x8c>
          mem = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	61bb      	str	r3, [r7, #24]
 800c12e:	e001      	b.n	800c134 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c130:	2300      	movs	r3, #0
 800c132:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c134:	69bb      	ldr	r3, [r7, #24]
 800c136:	2b01      	cmp	r3, #1
 800c138:	d10b      	bne.n	800c152 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	691a      	ldr	r2, [r3, #16]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	689b      	ldr	r3, [r3, #8]
 800c142:	2100      	movs	r1, #0
 800c144:	9100      	str	r1, [sp, #0]
 800c146:	68b9      	ldr	r1, [r7, #8]
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f000 fa2f 	bl	800c5ac <xQueueGenericCreateStatic>
 800c14e:	61f8      	str	r0, [r7, #28]
 800c150:	e008      	b.n	800c164 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d105      	bne.n	800c164 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c158:	2200      	movs	r2, #0
 800c15a:	68b9      	ldr	r1, [r7, #8]
 800c15c:	68f8      	ldr	r0, [r7, #12]
 800c15e:	f000 fa9d 	bl	800c69c <xQueueGenericCreate>
 800c162:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d00c      	beq.n	800c184 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d003      	beq.n	800c178 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	617b      	str	r3, [r7, #20]
 800c176:	e001      	b.n	800c17c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c178:	2300      	movs	r3, #0
 800c17a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c17c:	6979      	ldr	r1, [r7, #20]
 800c17e:	69f8      	ldr	r0, [r7, #28]
 800c180:	f001 f9e8 	bl	800d554 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c184:	69fb      	ldr	r3, [r7, #28]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3720      	adds	r7, #32
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
	...

0800c190 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c190:	b580      	push	{r7, lr}
 800c192:	b088      	sub	sp, #32
 800c194:	af00      	add	r7, sp, #0
 800c196:	60f8      	str	r0, [r7, #12]
 800c198:	60b9      	str	r1, [r7, #8]
 800c19a:	603b      	str	r3, [r7, #0]
 800c19c:	4613      	mov	r3, r2
 800c19e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1a8:	f3ef 8305 	mrs	r3, IPSR
 800c1ac:	617b      	str	r3, [r7, #20]
  return(result);
 800c1ae:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d028      	beq.n	800c206 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c1b4:	69bb      	ldr	r3, [r7, #24]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d005      	beq.n	800c1c6 <osMessageQueuePut+0x36>
 800c1ba:	68bb      	ldr	r3, [r7, #8]
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d002      	beq.n	800c1c6 <osMessageQueuePut+0x36>
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d003      	beq.n	800c1ce <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c1c6:	f06f 0303 	mvn.w	r3, #3
 800c1ca:	61fb      	str	r3, [r7, #28]
 800c1cc:	e038      	b.n	800c240 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c1d2:	f107 0210 	add.w	r2, r7, #16
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	68b9      	ldr	r1, [r7, #8]
 800c1da:	69b8      	ldr	r0, [r7, #24]
 800c1dc:	f000 fcda 	bl	800cb94 <xQueueGenericSendFromISR>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	2b01      	cmp	r3, #1
 800c1e4:	d003      	beq.n	800c1ee <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c1e6:	f06f 0302 	mvn.w	r3, #2
 800c1ea:	61fb      	str	r3, [r7, #28]
 800c1ec:	e028      	b.n	800c240 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d025      	beq.n	800c240 <osMessageQueuePut+0xb0>
 800c1f4:	4b15      	ldr	r3, [pc, #84]	; (800c24c <osMessageQueuePut+0xbc>)
 800c1f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1fa:	601a      	str	r2, [r3, #0]
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	f3bf 8f6f 	isb	sy
 800c204:	e01c      	b.n	800c240 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c206:	69bb      	ldr	r3, [r7, #24]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d002      	beq.n	800c212 <osMessageQueuePut+0x82>
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d103      	bne.n	800c21a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c212:	f06f 0303 	mvn.w	r3, #3
 800c216:	61fb      	str	r3, [r7, #28]
 800c218:	e012      	b.n	800c240 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c21a:	2300      	movs	r3, #0
 800c21c:	683a      	ldr	r2, [r7, #0]
 800c21e:	68b9      	ldr	r1, [r7, #8]
 800c220:	69b8      	ldr	r0, [r7, #24]
 800c222:	f000 fbb9 	bl	800c998 <xQueueGenericSend>
 800c226:	4603      	mov	r3, r0
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d009      	beq.n	800c240 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c22c:	683b      	ldr	r3, [r7, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c232:	f06f 0301 	mvn.w	r3, #1
 800c236:	61fb      	str	r3, [r7, #28]
 800c238:	e002      	b.n	800c240 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c23a:	f06f 0302 	mvn.w	r3, #2
 800c23e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c240:	69fb      	ldr	r3, [r7, #28]
}
 800c242:	4618      	mov	r0, r3
 800c244:	3720      	adds	r7, #32
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	e000ed04 	.word	0xe000ed04

0800c250 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	60f8      	str	r0, [r7, #12]
 800c258:	60b9      	str	r1, [r7, #8]
 800c25a:	607a      	str	r2, [r7, #4]
 800c25c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c262:	2300      	movs	r3, #0
 800c264:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c266:	f3ef 8305 	mrs	r3, IPSR
 800c26a:	617b      	str	r3, [r7, #20]
  return(result);
 800c26c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d028      	beq.n	800c2c4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d005      	beq.n	800c284 <osMessageQueueGet+0x34>
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d002      	beq.n	800c284 <osMessageQueueGet+0x34>
 800c27e:	683b      	ldr	r3, [r7, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d003      	beq.n	800c28c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c284:	f06f 0303 	mvn.w	r3, #3
 800c288:	61fb      	str	r3, [r7, #28]
 800c28a:	e037      	b.n	800c2fc <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c28c:	2300      	movs	r3, #0
 800c28e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c290:	f107 0310 	add.w	r3, r7, #16
 800c294:	461a      	mov	r2, r3
 800c296:	68b9      	ldr	r1, [r7, #8]
 800c298:	69b8      	ldr	r0, [r7, #24]
 800c29a:	f000 ff8f 	bl	800d1bc <xQueueReceiveFromISR>
 800c29e:	4603      	mov	r3, r0
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d003      	beq.n	800c2ac <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c2a4:	f06f 0302 	mvn.w	r3, #2
 800c2a8:	61fb      	str	r3, [r7, #28]
 800c2aa:	e027      	b.n	800c2fc <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d024      	beq.n	800c2fc <osMessageQueueGet+0xac>
 800c2b2:	4b15      	ldr	r3, [pc, #84]	; (800c308 <osMessageQueueGet+0xb8>)
 800c2b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2b8:	601a      	str	r2, [r3, #0]
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	e01b      	b.n	800c2fc <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c2c4:	69bb      	ldr	r3, [r7, #24]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d002      	beq.n	800c2d0 <osMessageQueueGet+0x80>
 800c2ca:	68bb      	ldr	r3, [r7, #8]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d103      	bne.n	800c2d8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c2d0:	f06f 0303 	mvn.w	r3, #3
 800c2d4:	61fb      	str	r3, [r7, #28]
 800c2d6:	e011      	b.n	800c2fc <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	68b9      	ldr	r1, [r7, #8]
 800c2dc:	69b8      	ldr	r0, [r7, #24]
 800c2de:	f000 fd81 	bl	800cde4 <xQueueReceive>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	d009      	beq.n	800c2fc <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d003      	beq.n	800c2f6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c2ee:	f06f 0301 	mvn.w	r3, #1
 800c2f2:	61fb      	str	r3, [r7, #28]
 800c2f4:	e002      	b.n	800c2fc <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c2f6:	f06f 0302 	mvn.w	r3, #2
 800c2fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c2fc:	69fb      	ldr	r3, [r7, #28]
}
 800c2fe:	4618      	mov	r0, r3
 800c300:	3720      	adds	r7, #32
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	e000ed04 	.word	0xe000ed04

0800c30c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c30c:	b480      	push	{r7}
 800c30e:	b085      	sub	sp, #20
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	4a07      	ldr	r2, [pc, #28]	; (800c338 <vApplicationGetIdleTaskMemory+0x2c>)
 800c31c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	4a06      	ldr	r2, [pc, #24]	; (800c33c <vApplicationGetIdleTaskMemory+0x30>)
 800c322:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	2280      	movs	r2, #128	; 0x80
 800c328:	601a      	str	r2, [r3, #0]
}
 800c32a:	bf00      	nop
 800c32c:	3714      	adds	r7, #20
 800c32e:	46bd      	mov	sp, r7
 800c330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c334:	4770      	bx	lr
 800c336:	bf00      	nop
 800c338:	240000cc 	.word	0x240000cc
 800c33c:	2400018c 	.word	0x2400018c

0800c340 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c340:	b480      	push	{r7}
 800c342:	b085      	sub	sp, #20
 800c344:	af00      	add	r7, sp, #0
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	60b9      	str	r1, [r7, #8]
 800c34a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4a07      	ldr	r2, [pc, #28]	; (800c36c <vApplicationGetTimerTaskMemory+0x2c>)
 800c350:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c352:	68bb      	ldr	r3, [r7, #8]
 800c354:	4a06      	ldr	r2, [pc, #24]	; (800c370 <vApplicationGetTimerTaskMemory+0x30>)
 800c356:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c35e:	601a      	str	r2, [r3, #0]
}
 800c360:	bf00      	nop
 800c362:	3714      	adds	r7, #20
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr
 800c36c:	2400038c 	.word	0x2400038c
 800c370:	2400044c 	.word	0x2400044c

0800c374 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c374:	b480      	push	{r7}
 800c376:	b083      	sub	sp, #12
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	f103 0208 	add.w	r2, r3, #8
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f04f 32ff 	mov.w	r2, #4294967295
 800c38c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f103 0208 	add.w	r2, r3, #8
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f103 0208 	add.w	r2, r3, #8
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c3a8:	bf00      	nop
 800c3aa:	370c      	adds	r7, #12
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b2:	4770      	bx	lr

0800c3b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c3b4:	b480      	push	{r7}
 800c3b6:	b083      	sub	sp, #12
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c3c2:	bf00      	nop
 800c3c4:	370c      	adds	r7, #12
 800c3c6:	46bd      	mov	sp, r7
 800c3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3cc:	4770      	bx	lr

0800c3ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c3ce:	b480      	push	{r7}
 800c3d0:	b085      	sub	sp, #20
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
 800c3d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	689a      	ldr	r2, [r3, #8]
 800c3e8:	683b      	ldr	r3, [r7, #0]
 800c3ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c3ec:	68fb      	ldr	r3, [r7, #12]
 800c3ee:	689b      	ldr	r3, [r3, #8]
 800c3f0:	683a      	ldr	r2, [r7, #0]
 800c3f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	683a      	ldr	r2, [r7, #0]
 800c3f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	681b      	ldr	r3, [r3, #0]
 800c404:	1c5a      	adds	r2, r3, #1
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	601a      	str	r2, [r3, #0]
}
 800c40a:	bf00      	nop
 800c40c:	3714      	adds	r7, #20
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c416:	b480      	push	{r7}
 800c418:	b085      	sub	sp, #20
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42c:	d103      	bne.n	800c436 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	60fb      	str	r3, [r7, #12]
 800c434:	e00c      	b.n	800c450 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	3308      	adds	r3, #8
 800c43a:	60fb      	str	r3, [r7, #12]
 800c43c:	e002      	b.n	800c444 <vListInsert+0x2e>
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	685b      	ldr	r3, [r3, #4]
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68ba      	ldr	r2, [r7, #8]
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d2f6      	bcs.n	800c43e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	685a      	ldr	r2, [r3, #4]
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c458:	683b      	ldr	r3, [r7, #0]
 800c45a:	685b      	ldr	r3, [r3, #4]
 800c45c:	683a      	ldr	r2, [r7, #0]
 800c45e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	683a      	ldr	r2, [r7, #0]
 800c46a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	687a      	ldr	r2, [r7, #4]
 800c470:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	1c5a      	adds	r2, r3, #1
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	601a      	str	r2, [r3, #0]
}
 800c47c:	bf00      	nop
 800c47e:	3714      	adds	r7, #20
 800c480:	46bd      	mov	sp, r7
 800c482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c486:	4770      	bx	lr

0800c488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c488:	b480      	push	{r7}
 800c48a:	b085      	sub	sp, #20
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	691b      	ldr	r3, [r3, #16]
 800c494:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	6892      	ldr	r2, [r2, #8]
 800c49e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	689b      	ldr	r3, [r3, #8]
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	6852      	ldr	r2, [r2, #4]
 800c4a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	685b      	ldr	r3, [r3, #4]
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d103      	bne.n	800c4bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689a      	ldr	r2, [r3, #8]
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2200      	movs	r2, #0
 800c4c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	1e5a      	subs	r2, r3, #1
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b084      	sub	sp, #16
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
 800c4e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10a      	bne.n	800c506 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c506:	f002 fead 	bl	800f264 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681a      	ldr	r2, [r3, #0]
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c512:	68f9      	ldr	r1, [r7, #12]
 800c514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c516:	fb01 f303 	mul.w	r3, r1, r3
 800c51a:	441a      	add	r2, r3
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	2200      	movs	r2, #0
 800c524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681a      	ldr	r2, [r3, #0]
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c536:	3b01      	subs	r3, #1
 800c538:	68f9      	ldr	r1, [r7, #12]
 800c53a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c53c:	fb01 f303 	mul.w	r3, r1, r3
 800c540:	441a      	add	r2, r3
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	22ff      	movs	r2, #255	; 0xff
 800c54a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	22ff      	movs	r2, #255	; 0xff
 800c552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d114      	bne.n	800c586 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	691b      	ldr	r3, [r3, #16]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d01a      	beq.n	800c59a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3310      	adds	r3, #16
 800c568:	4618      	mov	r0, r3
 800c56a:	f001 fd35 	bl	800dfd8 <xTaskRemoveFromEventList>
 800c56e:	4603      	mov	r3, r0
 800c570:	2b00      	cmp	r3, #0
 800c572:	d012      	beq.n	800c59a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c574:	4b0c      	ldr	r3, [pc, #48]	; (800c5a8 <xQueueGenericReset+0xcc>)
 800c576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c57a:	601a      	str	r2, [r3, #0]
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	f3bf 8f6f 	isb	sy
 800c584:	e009      	b.n	800c59a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	3310      	adds	r3, #16
 800c58a:	4618      	mov	r0, r3
 800c58c:	f7ff fef2 	bl	800c374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	3324      	adds	r3, #36	; 0x24
 800c594:	4618      	mov	r0, r3
 800c596:	f7ff feed 	bl	800c374 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c59a:	f002 fe93 	bl	800f2c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c59e:	2301      	movs	r3, #1
}
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3710      	adds	r7, #16
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b08e      	sub	sp, #56	; 0x38
 800c5b0:	af02      	add	r7, sp, #8
 800c5b2:	60f8      	str	r0, [r7, #12]
 800c5b4:	60b9      	str	r1, [r7, #8]
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d10a      	bne.n	800c5d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c4:	f383 8811 	msr	BASEPRI, r3
 800c5c8:	f3bf 8f6f 	isb	sy
 800c5cc:	f3bf 8f4f 	dsb	sy
 800c5d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5d2:	bf00      	nop
 800c5d4:	e7fe      	b.n	800c5d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10a      	bne.n	800c5f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5e0:	f383 8811 	msr	BASEPRI, r3
 800c5e4:	f3bf 8f6f 	isb	sy
 800c5e8:	f3bf 8f4f 	dsb	sy
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5ee:	bf00      	nop
 800c5f0:	e7fe      	b.n	800c5f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d002      	beq.n	800c5fe <xQueueGenericCreateStatic+0x52>
 800c5f8:	68bb      	ldr	r3, [r7, #8]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <xQueueGenericCreateStatic+0x56>
 800c5fe:	2301      	movs	r3, #1
 800c600:	e000      	b.n	800c604 <xQueueGenericCreateStatic+0x58>
 800c602:	2300      	movs	r3, #0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10a      	bne.n	800c61e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	623b      	str	r3, [r7, #32]
}
 800c61a:	bf00      	nop
 800c61c:	e7fe      	b.n	800c61c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d102      	bne.n	800c62a <xQueueGenericCreateStatic+0x7e>
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d101      	bne.n	800c62e <xQueueGenericCreateStatic+0x82>
 800c62a:	2301      	movs	r3, #1
 800c62c:	e000      	b.n	800c630 <xQueueGenericCreateStatic+0x84>
 800c62e:	2300      	movs	r3, #0
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10a      	bne.n	800c64a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	61fb      	str	r3, [r7, #28]
}
 800c646:	bf00      	nop
 800c648:	e7fe      	b.n	800c648 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c64a:	2350      	movs	r3, #80	; 0x50
 800c64c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c64e:	697b      	ldr	r3, [r7, #20]
 800c650:	2b50      	cmp	r3, #80	; 0x50
 800c652:	d00a      	beq.n	800c66a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	61bb      	str	r3, [r7, #24]
}
 800c666:	bf00      	nop
 800c668:	e7fe      	b.n	800c668 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c66a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c672:	2b00      	cmp	r3, #0
 800c674:	d00d      	beq.n	800c692 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c678:	2201      	movs	r2, #1
 800c67a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c67e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c684:	9300      	str	r3, [sp, #0]
 800c686:	4613      	mov	r3, r2
 800c688:	687a      	ldr	r2, [r7, #4]
 800c68a:	68b9      	ldr	r1, [r7, #8]
 800c68c:	68f8      	ldr	r0, [r7, #12]
 800c68e:	f000 f83f 	bl	800c710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c694:	4618      	mov	r0, r3
 800c696:	3730      	adds	r7, #48	; 0x30
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b08a      	sub	sp, #40	; 0x28
 800c6a0:	af02      	add	r7, sp, #8
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10a      	bne.n	800c6c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c6b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6b4:	f383 8811 	msr	BASEPRI, r3
 800c6b8:	f3bf 8f6f 	isb	sy
 800c6bc:	f3bf 8f4f 	dsb	sy
 800c6c0:	613b      	str	r3, [r7, #16]
}
 800c6c2:	bf00      	nop
 800c6c4:	e7fe      	b.n	800c6c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	68ba      	ldr	r2, [r7, #8]
 800c6ca:	fb02 f303 	mul.w	r3, r2, r3
 800c6ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	3350      	adds	r3, #80	; 0x50
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f002 fee7 	bl	800f4a8 <pvPortMalloc>
 800c6da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c6dc:	69bb      	ldr	r3, [r7, #24]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d011      	beq.n	800c706 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c6e2:	69bb      	ldr	r3, [r7, #24]
 800c6e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c6e6:	697b      	ldr	r3, [r7, #20]
 800c6e8:	3350      	adds	r3, #80	; 0x50
 800c6ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c6f4:	79fa      	ldrb	r2, [r7, #7]
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	9300      	str	r3, [sp, #0]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	697a      	ldr	r2, [r7, #20]
 800c6fe:	68b9      	ldr	r1, [r7, #8]
 800c700:	68f8      	ldr	r0, [r7, #12]
 800c702:	f000 f805 	bl	800c710 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c706:	69bb      	ldr	r3, [r7, #24]
	}
 800c708:	4618      	mov	r0, r3
 800c70a:	3720      	adds	r7, #32
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	60f8      	str	r0, [r7, #12]
 800c718:	60b9      	str	r1, [r7, #8]
 800c71a:	607a      	str	r2, [r7, #4]
 800c71c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c71e:	68bb      	ldr	r3, [r7, #8]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d103      	bne.n	800c72c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	69ba      	ldr	r2, [r7, #24]
 800c728:	601a      	str	r2, [r3, #0]
 800c72a:	e002      	b.n	800c732 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c72c:	69bb      	ldr	r3, [r7, #24]
 800c72e:	687a      	ldr	r2, [r7, #4]
 800c730:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c732:	69bb      	ldr	r3, [r7, #24]
 800c734:	68fa      	ldr	r2, [r7, #12]
 800c736:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	68ba      	ldr	r2, [r7, #8]
 800c73c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c73e:	2101      	movs	r1, #1
 800c740:	69b8      	ldr	r0, [r7, #24]
 800c742:	f7ff fecb 	bl	800c4dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	78fa      	ldrb	r2, [r7, #3]
 800c74a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c74e:	bf00      	nop
 800c750:	3710      	adds	r7, #16
 800c752:	46bd      	mov	sp, r7
 800c754:	bd80      	pop	{r7, pc}

0800c756 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c756:	b580      	push	{r7, lr}
 800c758:	b082      	sub	sp, #8
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d00e      	beq.n	800c782 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2200      	movs	r2, #0
 800c768:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2200      	movs	r2, #0
 800c76e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	2200      	movs	r2, #0
 800c774:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c776:	2300      	movs	r3, #0
 800c778:	2200      	movs	r2, #0
 800c77a:	2100      	movs	r1, #0
 800c77c:	6878      	ldr	r0, [r7, #4]
 800c77e:	f000 f90b 	bl	800c998 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c782:	bf00      	nop
 800c784:	3708      	adds	r7, #8
 800c786:	46bd      	mov	sp, r7
 800c788:	bd80      	pop	{r7, pc}

0800c78a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b086      	sub	sp, #24
 800c78e:	af00      	add	r7, sp, #0
 800c790:	4603      	mov	r3, r0
 800c792:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c794:	2301      	movs	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	2300      	movs	r3, #0
 800c79a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c79c:	79fb      	ldrb	r3, [r7, #7]
 800c79e:	461a      	mov	r2, r3
 800c7a0:	6939      	ldr	r1, [r7, #16]
 800c7a2:	6978      	ldr	r0, [r7, #20]
 800c7a4:	f7ff ff7a 	bl	800c69c <xQueueGenericCreate>
 800c7a8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f7ff ffd3 	bl	800c756 <prvInitialiseMutex>

		return xNewQueue;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
	}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3718      	adds	r7, #24
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}

0800c7ba <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c7ba:	b580      	push	{r7, lr}
 800c7bc:	b088      	sub	sp, #32
 800c7be:	af02      	add	r7, sp, #8
 800c7c0:	4603      	mov	r3, r0
 800c7c2:	6039      	str	r1, [r7, #0]
 800c7c4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c7c6:	2301      	movs	r3, #1
 800c7c8:	617b      	str	r3, [r7, #20]
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c7ce:	79fb      	ldrb	r3, [r7, #7]
 800c7d0:	9300      	str	r3, [sp, #0]
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	6939      	ldr	r1, [r7, #16]
 800c7d8:	6978      	ldr	r0, [r7, #20]
 800c7da:	f7ff fee7 	bl	800c5ac <xQueueGenericCreateStatic>
 800c7de:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff ffb8 	bl	800c756 <prvInitialiseMutex>

		return xNewQueue;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
	}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3718      	adds	r7, #24
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c7f0:	b590      	push	{r4, r7, lr}
 800c7f2:	b087      	sub	sp, #28
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c7fc:	693b      	ldr	r3, [r7, #16]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d10a      	bne.n	800c818 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800c802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c806:	f383 8811 	msr	BASEPRI, r3
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	60fb      	str	r3, [r7, #12]
}
 800c814:	bf00      	nop
 800c816:	e7fe      	b.n	800c816 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	689c      	ldr	r4, [r3, #8]
 800c81c:	f001 fd9e 	bl	800e35c <xTaskGetCurrentTaskHandle>
 800c820:	4603      	mov	r3, r0
 800c822:	429c      	cmp	r4, r3
 800c824:	d111      	bne.n	800c84a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	1e5a      	subs	r2, r3, #1
 800c82c:	693b      	ldr	r3, [r7, #16]
 800c82e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	68db      	ldr	r3, [r3, #12]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d105      	bne.n	800c844 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c838:	2300      	movs	r3, #0
 800c83a:	2200      	movs	r2, #0
 800c83c:	2100      	movs	r1, #0
 800c83e:	6938      	ldr	r0, [r7, #16]
 800c840:	f000 f8aa 	bl	800c998 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c844:	2301      	movs	r3, #1
 800c846:	617b      	str	r3, [r7, #20]
 800c848:	e001      	b.n	800c84e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c84e:	697b      	ldr	r3, [r7, #20]
	}
 800c850:	4618      	mov	r0, r3
 800c852:	371c      	adds	r7, #28
 800c854:	46bd      	mov	sp, r7
 800c856:	bd90      	pop	{r4, r7, pc}

0800c858 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c858:	b590      	push	{r4, r7, lr}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d10a      	bne.n	800c882 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800c86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c870:	f383 8811 	msr	BASEPRI, r3
 800c874:	f3bf 8f6f 	isb	sy
 800c878:	f3bf 8f4f 	dsb	sy
 800c87c:	60fb      	str	r3, [r7, #12]
}
 800c87e:	bf00      	nop
 800c880:	e7fe      	b.n	800c880 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	689c      	ldr	r4, [r3, #8]
 800c886:	f001 fd69 	bl	800e35c <xTaskGetCurrentTaskHandle>
 800c88a:	4603      	mov	r3, r0
 800c88c:	429c      	cmp	r4, r3
 800c88e:	d107      	bne.n	800c8a0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	68db      	ldr	r3, [r3, #12]
 800c894:	1c5a      	adds	r2, r3, #1
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c89a:	2301      	movs	r3, #1
 800c89c:	617b      	str	r3, [r7, #20]
 800c89e:	e00c      	b.n	800c8ba <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c8a0:	6839      	ldr	r1, [r7, #0]
 800c8a2:	6938      	ldr	r0, [r7, #16]
 800c8a4:	f000 fb7e 	bl	800cfa4 <xQueueSemaphoreTake>
 800c8a8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d004      	beq.n	800c8ba <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	68db      	ldr	r3, [r3, #12]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c8ba:	697b      	ldr	r3, [r7, #20]
	}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	371c      	adds	r7, #28
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd90      	pop	{r4, r7, pc}

0800c8c4 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08a      	sub	sp, #40	; 0x28
 800c8c8:	af02      	add	r7, sp, #8
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d10a      	bne.n	800c8ec <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800c8d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8da:	f383 8811 	msr	BASEPRI, r3
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f3bf 8f4f 	dsb	sy
 800c8e6:	61bb      	str	r3, [r7, #24]
}
 800c8e8:	bf00      	nop
 800c8ea:	e7fe      	b.n	800c8ea <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	429a      	cmp	r2, r3
 800c8f2:	d90a      	bls.n	800c90a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800c8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f8:	f383 8811 	msr	BASEPRI, r3
 800c8fc:	f3bf 8f6f 	isb	sy
 800c900:	f3bf 8f4f 	dsb	sy
 800c904:	617b      	str	r3, [r7, #20]
}
 800c906:	bf00      	nop
 800c908:	e7fe      	b.n	800c908 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c90a:	2302      	movs	r3, #2
 800c90c:	9300      	str	r3, [sp, #0]
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	2200      	movs	r2, #0
 800c912:	2100      	movs	r1, #0
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7ff fe49 	bl	800c5ac <xQueueGenericCreateStatic>
 800c91a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800c91c:	69fb      	ldr	r3, [r7, #28]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d002      	beq.n	800c928 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c922:	69fb      	ldr	r3, [r7, #28]
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c928:	69fb      	ldr	r3, [r7, #28]
	}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3720      	adds	r7, #32
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}

0800c932 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800c932:	b580      	push	{r7, lr}
 800c934:	b086      	sub	sp, #24
 800c936:	af00      	add	r7, sp, #0
 800c938:	6078      	str	r0, [r7, #4]
 800c93a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10a      	bne.n	800c958 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	613b      	str	r3, [r7, #16]
}
 800c954:	bf00      	nop
 800c956:	e7fe      	b.n	800c956 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800c958:	683a      	ldr	r2, [r7, #0]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d90a      	bls.n	800c976 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800c960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	60fb      	str	r3, [r7, #12]
}
 800c972:	bf00      	nop
 800c974:	e7fe      	b.n	800c974 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800c976:	2202      	movs	r2, #2
 800c978:	2100      	movs	r1, #0
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f7ff fe8e 	bl	800c69c <xQueueGenericCreate>
 800c980:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d002      	beq.n	800c98e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	683a      	ldr	r2, [r7, #0]
 800c98c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800c98e:	697b      	ldr	r3, [r7, #20]
	}
 800c990:	4618      	mov	r0, r3
 800c992:	3718      	adds	r7, #24
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08e      	sub	sp, #56	; 0x38
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	607a      	str	r2, [r7, #4]
 800c9a4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c9ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d10a      	bne.n	800c9ca <xQueueGenericSend+0x32>
	__asm volatile
 800c9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9b8:	f383 8811 	msr	BASEPRI, r3
 800c9bc:	f3bf 8f6f 	isb	sy
 800c9c0:	f3bf 8f4f 	dsb	sy
 800c9c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c9c6:	bf00      	nop
 800c9c8:	e7fe      	b.n	800c9c8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d103      	bne.n	800c9d8 <xQueueGenericSend+0x40>
 800c9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d101      	bne.n	800c9dc <xQueueGenericSend+0x44>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	e000      	b.n	800c9de <xQueueGenericSend+0x46>
 800c9dc:	2300      	movs	r3, #0
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d10a      	bne.n	800c9f8 <xQueueGenericSend+0x60>
	__asm volatile
 800c9e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e6:	f383 8811 	msr	BASEPRI, r3
 800c9ea:	f3bf 8f6f 	isb	sy
 800c9ee:	f3bf 8f4f 	dsb	sy
 800c9f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9f4:	bf00      	nop
 800c9f6:	e7fe      	b.n	800c9f6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	2b02      	cmp	r3, #2
 800c9fc:	d103      	bne.n	800ca06 <xQueueGenericSend+0x6e>
 800c9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca02:	2b01      	cmp	r3, #1
 800ca04:	d101      	bne.n	800ca0a <xQueueGenericSend+0x72>
 800ca06:	2301      	movs	r3, #1
 800ca08:	e000      	b.n	800ca0c <xQueueGenericSend+0x74>
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d10a      	bne.n	800ca26 <xQueueGenericSend+0x8e>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	f383 8811 	msr	BASEPRI, r3
 800ca18:	f3bf 8f6f 	isb	sy
 800ca1c:	f3bf 8f4f 	dsb	sy
 800ca20:	623b      	str	r3, [r7, #32]
}
 800ca22:	bf00      	nop
 800ca24:	e7fe      	b.n	800ca24 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ca26:	f001 fca9 	bl	800e37c <xTaskGetSchedulerState>
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d102      	bne.n	800ca36 <xQueueGenericSend+0x9e>
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <xQueueGenericSend+0xa2>
 800ca36:	2301      	movs	r3, #1
 800ca38:	e000      	b.n	800ca3c <xQueueGenericSend+0xa4>
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d10a      	bne.n	800ca56 <xQueueGenericSend+0xbe>
	__asm volatile
 800ca40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca44:	f383 8811 	msr	BASEPRI, r3
 800ca48:	f3bf 8f6f 	isb	sy
 800ca4c:	f3bf 8f4f 	dsb	sy
 800ca50:	61fb      	str	r3, [r7, #28]
}
 800ca52:	bf00      	nop
 800ca54:	e7fe      	b.n	800ca54 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca56:	f002 fc05 	bl	800f264 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d302      	bcc.n	800ca6c <xQueueGenericSend+0xd4>
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	2b02      	cmp	r3, #2
 800ca6a:	d129      	bne.n	800cac0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	68b9      	ldr	r1, [r7, #8]
 800ca70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ca72:	f000 fc5e 	bl	800d332 <prvCopyDataToQueue>
 800ca76:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d010      	beq.n	800caa2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	3324      	adds	r3, #36	; 0x24
 800ca84:	4618      	mov	r0, r3
 800ca86:	f001 faa7 	bl	800dfd8 <xTaskRemoveFromEventList>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d013      	beq.n	800cab8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ca90:	4b3f      	ldr	r3, [pc, #252]	; (800cb90 <xQueueGenericSend+0x1f8>)
 800ca92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca96:	601a      	str	r2, [r3, #0]
 800ca98:	f3bf 8f4f 	dsb	sy
 800ca9c:	f3bf 8f6f 	isb	sy
 800caa0:	e00a      	b.n	800cab8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800caa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d007      	beq.n	800cab8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800caa8:	4b39      	ldr	r3, [pc, #228]	; (800cb90 <xQueueGenericSend+0x1f8>)
 800caaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800caae:	601a      	str	r2, [r3, #0]
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cab8:	f002 fc04 	bl	800f2c4 <vPortExitCritical>
				return pdPASS;
 800cabc:	2301      	movs	r3, #1
 800cabe:	e063      	b.n	800cb88 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d103      	bne.n	800cace <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cac6:	f002 fbfd 	bl	800f2c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800caca:	2300      	movs	r3, #0
 800cacc:	e05c      	b.n	800cb88 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d106      	bne.n	800cae2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cad4:	f107 0314 	add.w	r3, r7, #20
 800cad8:	4618      	mov	r0, r3
 800cada:	f001 fae1 	bl	800e0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cade:	2301      	movs	r3, #1
 800cae0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cae2:	f002 fbef 	bl	800f2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cae6:	f001 f81f 	bl	800db28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800caea:	f002 fbbb 	bl	800f264 <vPortEnterCritical>
 800caee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caf0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caf4:	b25b      	sxtb	r3, r3
 800caf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafa:	d103      	bne.n	800cb04 <xQueueGenericSend+0x16c>
 800cafc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cafe:	2200      	movs	r2, #0
 800cb00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cb04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cb0a:	b25b      	sxtb	r3, r3
 800cb0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb10:	d103      	bne.n	800cb1a <xQueueGenericSend+0x182>
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	2200      	movs	r2, #0
 800cb16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cb1a:	f002 fbd3 	bl	800f2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cb1e:	1d3a      	adds	r2, r7, #4
 800cb20:	f107 0314 	add.w	r3, r7, #20
 800cb24:	4611      	mov	r1, r2
 800cb26:	4618      	mov	r0, r3
 800cb28:	f001 fad0 	bl	800e0cc <xTaskCheckForTimeOut>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d124      	bne.n	800cb7c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cb32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb34:	f000 fcf5 	bl	800d522 <prvIsQueueFull>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d018      	beq.n	800cb70 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	3310      	adds	r3, #16
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	4611      	mov	r1, r2
 800cb46:	4618      	mov	r0, r3
 800cb48:	f001 f9f6 	bl	800df38 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cb4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb4e:	f000 fc80 	bl	800d452 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cb52:	f000 fff7 	bl	800db44 <xTaskResumeAll>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f47f af7c 	bne.w	800ca56 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800cb5e:	4b0c      	ldr	r3, [pc, #48]	; (800cb90 <xQueueGenericSend+0x1f8>)
 800cb60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb64:	601a      	str	r2, [r3, #0]
 800cb66:	f3bf 8f4f 	dsb	sy
 800cb6a:	f3bf 8f6f 	isb	sy
 800cb6e:	e772      	b.n	800ca56 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cb70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb72:	f000 fc6e 	bl	800d452 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb76:	f000 ffe5 	bl	800db44 <xTaskResumeAll>
 800cb7a:	e76c      	b.n	800ca56 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cb7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb7e:	f000 fc68 	bl	800d452 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb82:	f000 ffdf 	bl	800db44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cb86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	3738      	adds	r7, #56	; 0x38
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	e000ed04 	.word	0xe000ed04

0800cb94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b090      	sub	sp, #64	; 0x40
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	60f8      	str	r0, [r7, #12]
 800cb9c:	60b9      	str	r1, [r7, #8]
 800cb9e:	607a      	str	r2, [r7, #4]
 800cba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d10a      	bne.n	800cbc2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800cbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb0:	f383 8811 	msr	BASEPRI, r3
 800cbb4:	f3bf 8f6f 	isb	sy
 800cbb8:	f3bf 8f4f 	dsb	sy
 800cbbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbbe:	bf00      	nop
 800cbc0:	e7fe      	b.n	800cbc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbc2:	68bb      	ldr	r3, [r7, #8]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d103      	bne.n	800cbd0 <xQueueGenericSendFromISR+0x3c>
 800cbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d101      	bne.n	800cbd4 <xQueueGenericSendFromISR+0x40>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e000      	b.n	800cbd6 <xQueueGenericSendFromISR+0x42>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d10a      	bne.n	800cbf0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800cbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbde:	f383 8811 	msr	BASEPRI, r3
 800cbe2:	f3bf 8f6f 	isb	sy
 800cbe6:	f3bf 8f4f 	dsb	sy
 800cbea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cbec:	bf00      	nop
 800cbee:	e7fe      	b.n	800cbee <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	2b02      	cmp	r3, #2
 800cbf4:	d103      	bne.n	800cbfe <xQueueGenericSendFromISR+0x6a>
 800cbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbfa:	2b01      	cmp	r3, #1
 800cbfc:	d101      	bne.n	800cc02 <xQueueGenericSendFromISR+0x6e>
 800cbfe:	2301      	movs	r3, #1
 800cc00:	e000      	b.n	800cc04 <xQueueGenericSendFromISR+0x70>
 800cc02:	2300      	movs	r3, #0
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d10a      	bne.n	800cc1e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800cc08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	623b      	str	r3, [r7, #32]
}
 800cc1a:	bf00      	nop
 800cc1c:	e7fe      	b.n	800cc1c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cc1e:	f002 fc03 	bl	800f428 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800cc22:	f3ef 8211 	mrs	r2, BASEPRI
 800cc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc2a:	f383 8811 	msr	BASEPRI, r3
 800cc2e:	f3bf 8f6f 	isb	sy
 800cc32:	f3bf 8f4f 	dsb	sy
 800cc36:	61fa      	str	r2, [r7, #28]
 800cc38:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800cc3a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc3c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d302      	bcc.n	800cc50 <xQueueGenericSendFromISR+0xbc>
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	2b02      	cmp	r3, #2
 800cc4e:	d12f      	bne.n	800ccb0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cc50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc60:	683a      	ldr	r2, [r7, #0]
 800cc62:	68b9      	ldr	r1, [r7, #8]
 800cc64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cc66:	f000 fb64 	bl	800d332 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cc6a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800cc6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc72:	d112      	bne.n	800cc9a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d016      	beq.n	800ccaa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc7e:	3324      	adds	r3, #36	; 0x24
 800cc80:	4618      	mov	r0, r3
 800cc82:	f001 f9a9 	bl	800dfd8 <xTaskRemoveFromEventList>
 800cc86:	4603      	mov	r3, r0
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d00e      	beq.n	800ccaa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00b      	beq.n	800ccaa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	2201      	movs	r2, #1
 800cc96:	601a      	str	r2, [r3, #0]
 800cc98:	e007      	b.n	800ccaa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cc9a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cc9e:	3301      	adds	r3, #1
 800cca0:	b2db      	uxtb	r3, r3
 800cca2:	b25a      	sxtb	r2, r3
 800cca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cca6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ccaa:	2301      	movs	r3, #1
 800ccac:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ccae:	e001      	b.n	800ccb4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ccb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccb6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ccbe:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ccc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	3740      	adds	r7, #64	; 0x40
 800ccc6:	46bd      	mov	sp, r7
 800ccc8:	bd80      	pop	{r7, pc}

0800ccca <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b08e      	sub	sp, #56	; 0x38
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
 800ccd2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ccd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d10a      	bne.n	800ccf4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ccde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	623b      	str	r3, [r7, #32]
}
 800ccf0:	bf00      	nop
 800ccf2:	e7fe      	b.n	800ccf2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ccf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d00a      	beq.n	800cd12 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ccfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	61fb      	str	r3, [r7, #28]
}
 800cd0e:	bf00      	nop
 800cd10:	e7fe      	b.n	800cd10 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800cd12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d103      	bne.n	800cd22 <xQueueGiveFromISR+0x58>
 800cd1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d101      	bne.n	800cd26 <xQueueGiveFromISR+0x5c>
 800cd22:	2301      	movs	r3, #1
 800cd24:	e000      	b.n	800cd28 <xQueueGiveFromISR+0x5e>
 800cd26:	2300      	movs	r3, #0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d10a      	bne.n	800cd42 <xQueueGiveFromISR+0x78>
	__asm volatile
 800cd2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd30:	f383 8811 	msr	BASEPRI, r3
 800cd34:	f3bf 8f6f 	isb	sy
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	61bb      	str	r3, [r7, #24]
}
 800cd3e:	bf00      	nop
 800cd40:	e7fe      	b.n	800cd40 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cd42:	f002 fb71 	bl	800f428 <vPortValidateInterruptPriority>
	__asm volatile
 800cd46:	f3ef 8211 	mrs	r2, BASEPRI
 800cd4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd4e:	f383 8811 	msr	BASEPRI, r3
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	f3bf 8f4f 	dsb	sy
 800cd5a:	617a      	str	r2, [r7, #20]
 800cd5c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800cd5e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cd60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800cd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd6e:	429a      	cmp	r2, r3
 800cd70:	d22b      	bcs.n	800cdca <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800cd72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd7e:	1c5a      	adds	r2, r3, #1
 800cd80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd82:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800cd84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cd88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd8c:	d112      	bne.n	800cdb4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cd8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d016      	beq.n	800cdc4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cd96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd98:	3324      	adds	r3, #36	; 0x24
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f001 f91c 	bl	800dfd8 <xTaskRemoveFromEventList>
 800cda0:	4603      	mov	r3, r0
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00e      	beq.n	800cdc4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	e007      	b.n	800cdc4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cdb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdb8:	3301      	adds	r3, #1
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	b25a      	sxtb	r2, r3
 800cdbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	637b      	str	r3, [r7, #52]	; 0x34
 800cdc8:	e001      	b.n	800cdce <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cdca:	2300      	movs	r3, #0
 800cdcc:	637b      	str	r3, [r7, #52]	; 0x34
 800cdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f383 8811 	msr	BASEPRI, r3
}
 800cdd8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3738      	adds	r7, #56	; 0x38
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b08c      	sub	sp, #48	; 0x30
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	60b9      	str	r1, [r7, #8]
 800cdee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cdf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d10a      	bne.n	800ce14 <xQueueReceive+0x30>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	623b      	str	r3, [r7, #32]
}
 800ce10:	bf00      	nop
 800ce12:	e7fe      	b.n	800ce12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce14:	68bb      	ldr	r3, [r7, #8]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d103      	bne.n	800ce22 <xQueueReceive+0x3e>
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d101      	bne.n	800ce26 <xQueueReceive+0x42>
 800ce22:	2301      	movs	r3, #1
 800ce24:	e000      	b.n	800ce28 <xQueueReceive+0x44>
 800ce26:	2300      	movs	r3, #0
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d10a      	bne.n	800ce42 <xQueueReceive+0x5e>
	__asm volatile
 800ce2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce30:	f383 8811 	msr	BASEPRI, r3
 800ce34:	f3bf 8f6f 	isb	sy
 800ce38:	f3bf 8f4f 	dsb	sy
 800ce3c:	61fb      	str	r3, [r7, #28]
}
 800ce3e:	bf00      	nop
 800ce40:	e7fe      	b.n	800ce40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce42:	f001 fa9b 	bl	800e37c <xTaskGetSchedulerState>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d102      	bne.n	800ce52 <xQueueReceive+0x6e>
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d101      	bne.n	800ce56 <xQueueReceive+0x72>
 800ce52:	2301      	movs	r3, #1
 800ce54:	e000      	b.n	800ce58 <xQueueReceive+0x74>
 800ce56:	2300      	movs	r3, #0
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d10a      	bne.n	800ce72 <xQueueReceive+0x8e>
	__asm volatile
 800ce5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce60:	f383 8811 	msr	BASEPRI, r3
 800ce64:	f3bf 8f6f 	isb	sy
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	61bb      	str	r3, [r7, #24]
}
 800ce6e:	bf00      	nop
 800ce70:	e7fe      	b.n	800ce70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce72:	f002 f9f7 	bl	800f264 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ce76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ce7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d01f      	beq.n	800cec2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ce82:	68b9      	ldr	r1, [r7, #8]
 800ce84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce86:	f000 fabe 	bl	800d406 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ce8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce8c:	1e5a      	subs	r2, r3, #1
 800ce8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce94:	691b      	ldr	r3, [r3, #16]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d00f      	beq.n	800ceba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce9c:	3310      	adds	r3, #16
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f001 f89a 	bl	800dfd8 <xTaskRemoveFromEventList>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d007      	beq.n	800ceba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ceaa:	4b3d      	ldr	r3, [pc, #244]	; (800cfa0 <xQueueReceive+0x1bc>)
 800ceac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ceb0:	601a      	str	r2, [r3, #0]
 800ceb2:	f3bf 8f4f 	dsb	sy
 800ceb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ceba:	f002 fa03 	bl	800f2c4 <vPortExitCritical>
				return pdPASS;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e069      	b.n	800cf96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d103      	bne.n	800ced0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cec8:	f002 f9fc 	bl	800f2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cecc:	2300      	movs	r3, #0
 800cece:	e062      	b.n	800cf96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ced0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ced6:	f107 0310 	add.w	r3, r7, #16
 800ceda:	4618      	mov	r0, r3
 800cedc:	f001 f8e0 	bl	800e0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cee0:	2301      	movs	r3, #1
 800cee2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cee4:	f002 f9ee 	bl	800f2c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cee8:	f000 fe1e 	bl	800db28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ceec:	f002 f9ba 	bl	800f264 <vPortEnterCritical>
 800cef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cef6:	b25b      	sxtb	r3, r3
 800cef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cefc:	d103      	bne.n	800cf06 <xQueueReceive+0x122>
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	2200      	movs	r2, #0
 800cf02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf0c:	b25b      	sxtb	r3, r3
 800cf0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf12:	d103      	bne.n	800cf1c <xQueueReceive+0x138>
 800cf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf1c:	f002 f9d2 	bl	800f2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf20:	1d3a      	adds	r2, r7, #4
 800cf22:	f107 0310 	add.w	r3, r7, #16
 800cf26:	4611      	mov	r1, r2
 800cf28:	4618      	mov	r0, r3
 800cf2a:	f001 f8cf 	bl	800e0cc <xTaskCheckForTimeOut>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d123      	bne.n	800cf7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf36:	f000 fade 	bl	800d4f6 <prvIsQueueEmpty>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d017      	beq.n	800cf70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf42:	3324      	adds	r3, #36	; 0x24
 800cf44:	687a      	ldr	r2, [r7, #4]
 800cf46:	4611      	mov	r1, r2
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f000 fff5 	bl	800df38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf50:	f000 fa7f 	bl	800d452 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf54:	f000 fdf6 	bl	800db44 <xTaskResumeAll>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d189      	bne.n	800ce72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800cf5e:	4b10      	ldr	r3, [pc, #64]	; (800cfa0 <xQueueReceive+0x1bc>)
 800cf60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	f3bf 8f4f 	dsb	sy
 800cf6a:	f3bf 8f6f 	isb	sy
 800cf6e:	e780      	b.n	800ce72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cf70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf72:	f000 fa6e 	bl	800d452 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf76:	f000 fde5 	bl	800db44 <xTaskResumeAll>
 800cf7a:	e77a      	b.n	800ce72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cf7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf7e:	f000 fa68 	bl	800d452 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cf82:	f000 fddf 	bl	800db44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf88:	f000 fab5 	bl	800d4f6 <prvIsQueueEmpty>
 800cf8c:	4603      	mov	r3, r0
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	f43f af6f 	beq.w	800ce72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cf94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3730      	adds	r7, #48	; 0x30
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	e000ed04 	.word	0xe000ed04

0800cfa4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b08e      	sub	sp, #56	; 0x38
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
 800cfac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d10a      	bne.n	800cfd6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800cfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc4:	f383 8811 	msr	BASEPRI, r3
 800cfc8:	f3bf 8f6f 	isb	sy
 800cfcc:	f3bf 8f4f 	dsb	sy
 800cfd0:	623b      	str	r3, [r7, #32]
}
 800cfd2:	bf00      	nop
 800cfd4:	e7fe      	b.n	800cfd4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cfd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d00a      	beq.n	800cff4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800cfde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	61fb      	str	r3, [r7, #28]
}
 800cff0:	bf00      	nop
 800cff2:	e7fe      	b.n	800cff2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cff4:	f001 f9c2 	bl	800e37c <xTaskGetSchedulerState>
 800cff8:	4603      	mov	r3, r0
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d102      	bne.n	800d004 <xQueueSemaphoreTake+0x60>
 800cffe:	683b      	ldr	r3, [r7, #0]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d101      	bne.n	800d008 <xQueueSemaphoreTake+0x64>
 800d004:	2301      	movs	r3, #1
 800d006:	e000      	b.n	800d00a <xQueueSemaphoreTake+0x66>
 800d008:	2300      	movs	r3, #0
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d10a      	bne.n	800d024 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	61bb      	str	r3, [r7, #24]
}
 800d020:	bf00      	nop
 800d022:	e7fe      	b.n	800d022 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d024:	f002 f91e 	bl	800f264 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d02c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d030:	2b00      	cmp	r3, #0
 800d032:	d024      	beq.n	800d07e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d036:	1e5a      	subs	r2, r3, #1
 800d038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d104      	bne.n	800d04e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d044:	f001 fb10 	bl	800e668 <pvTaskIncrementMutexHeldCount>
 800d048:	4602      	mov	r2, r0
 800d04a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d04c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d050:	691b      	ldr	r3, [r3, #16]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d00f      	beq.n	800d076 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d058:	3310      	adds	r3, #16
 800d05a:	4618      	mov	r0, r3
 800d05c:	f000 ffbc 	bl	800dfd8 <xTaskRemoveFromEventList>
 800d060:	4603      	mov	r3, r0
 800d062:	2b00      	cmp	r3, #0
 800d064:	d007      	beq.n	800d076 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d066:	4b54      	ldr	r3, [pc, #336]	; (800d1b8 <xQueueSemaphoreTake+0x214>)
 800d068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06c:	601a      	str	r2, [r3, #0]
 800d06e:	f3bf 8f4f 	dsb	sy
 800d072:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d076:	f002 f925 	bl	800f2c4 <vPortExitCritical>
				return pdPASS;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e097      	b.n	800d1ae <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d111      	bne.n	800d0a8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	2b00      	cmp	r3, #0
 800d088:	d00a      	beq.n	800d0a0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d08a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d08e:	f383 8811 	msr	BASEPRI, r3
 800d092:	f3bf 8f6f 	isb	sy
 800d096:	f3bf 8f4f 	dsb	sy
 800d09a:	617b      	str	r3, [r7, #20]
}
 800d09c:	bf00      	nop
 800d09e:	e7fe      	b.n	800d09e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d0a0:	f002 f910 	bl	800f2c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	e082      	b.n	800d1ae <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d106      	bne.n	800d0bc <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d0ae:	f107 030c 	add.w	r3, r7, #12
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 fff4 	bl	800e0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d0bc:	f002 f902 	bl	800f2c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d0c0:	f000 fd32 	bl	800db28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d0c4:	f002 f8ce 	bl	800f264 <vPortEnterCritical>
 800d0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d0ce:	b25b      	sxtb	r3, r3
 800d0d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0d4:	d103      	bne.n	800d0de <xQueueSemaphoreTake+0x13a>
 800d0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d8:	2200      	movs	r2, #0
 800d0da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d0e4:	b25b      	sxtb	r3, r3
 800d0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0ea:	d103      	bne.n	800d0f4 <xQueueSemaphoreTake+0x150>
 800d0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0f4:	f002 f8e6 	bl	800f2c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d0f8:	463a      	mov	r2, r7
 800d0fa:	f107 030c 	add.w	r3, r7, #12
 800d0fe:	4611      	mov	r1, r2
 800d100:	4618      	mov	r0, r3
 800d102:	f000 ffe3 	bl	800e0cc <xTaskCheckForTimeOut>
 800d106:	4603      	mov	r3, r0
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d132      	bne.n	800d172 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d10c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d10e:	f000 f9f2 	bl	800d4f6 <prvIsQueueEmpty>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d026      	beq.n	800d166 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	681b      	ldr	r3, [r3, #0]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d109      	bne.n	800d134 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d120:	f002 f8a0 	bl	800f264 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d126:	689b      	ldr	r3, [r3, #8]
 800d128:	4618      	mov	r0, r3
 800d12a:	f001 f945 	bl	800e3b8 <xTaskPriorityInherit>
 800d12e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d130:	f002 f8c8 	bl	800f2c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d136:	3324      	adds	r3, #36	; 0x24
 800d138:	683a      	ldr	r2, [r7, #0]
 800d13a:	4611      	mov	r1, r2
 800d13c:	4618      	mov	r0, r3
 800d13e:	f000 fefb 	bl	800df38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d142:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d144:	f000 f985 	bl	800d452 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d148:	f000 fcfc 	bl	800db44 <xTaskResumeAll>
 800d14c:	4603      	mov	r3, r0
 800d14e:	2b00      	cmp	r3, #0
 800d150:	f47f af68 	bne.w	800d024 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d154:	4b18      	ldr	r3, [pc, #96]	; (800d1b8 <xQueueSemaphoreTake+0x214>)
 800d156:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d15a:	601a      	str	r2, [r3, #0]
 800d15c:	f3bf 8f4f 	dsb	sy
 800d160:	f3bf 8f6f 	isb	sy
 800d164:	e75e      	b.n	800d024 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d166:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d168:	f000 f973 	bl	800d452 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d16c:	f000 fcea 	bl	800db44 <xTaskResumeAll>
 800d170:	e758      	b.n	800d024 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d174:	f000 f96d 	bl	800d452 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d178:	f000 fce4 	bl	800db44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d17c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d17e:	f000 f9ba 	bl	800d4f6 <prvIsQueueEmpty>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	f43f af4d 	beq.w	800d024 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d18a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00d      	beq.n	800d1ac <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d190:	f002 f868 	bl	800f264 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d194:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d196:	f000 f8b4 	bl	800d302 <prvGetDisinheritPriorityAfterTimeout>
 800d19a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d1a2:	4618      	mov	r0, r3
 800d1a4:	f001 f9de 	bl	800e564 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d1a8:	f002 f88c 	bl	800f2c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d1ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	3738      	adds	r7, #56	; 0x38
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	bd80      	pop	{r7, pc}
 800d1b6:	bf00      	nop
 800d1b8:	e000ed04 	.word	0xe000ed04

0800d1bc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b08e      	sub	sp, #56	; 0x38
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	60f8      	str	r0, [r7, #12]
 800d1c4:	60b9      	str	r1, [r7, #8]
 800d1c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10a      	bne.n	800d1e8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	623b      	str	r3, [r7, #32]
}
 800d1e4:	bf00      	nop
 800d1e6:	e7fe      	b.n	800d1e6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d103      	bne.n	800d1f6 <xQueueReceiveFromISR+0x3a>
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <xQueueReceiveFromISR+0x3e>
 800d1f6:	2301      	movs	r3, #1
 800d1f8:	e000      	b.n	800d1fc <xQueueReceiveFromISR+0x40>
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10a      	bne.n	800d216 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	f383 8811 	msr	BASEPRI, r3
 800d208:	f3bf 8f6f 	isb	sy
 800d20c:	f3bf 8f4f 	dsb	sy
 800d210:	61fb      	str	r3, [r7, #28]
}
 800d212:	bf00      	nop
 800d214:	e7fe      	b.n	800d214 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d216:	f002 f907 	bl	800f428 <vPortValidateInterruptPriority>
	__asm volatile
 800d21a:	f3ef 8211 	mrs	r2, BASEPRI
 800d21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d222:	f383 8811 	msr	BASEPRI, r3
 800d226:	f3bf 8f6f 	isb	sy
 800d22a:	f3bf 8f4f 	dsb	sy
 800d22e:	61ba      	str	r2, [r7, #24]
 800d230:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d232:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d234:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d23a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d02f      	beq.n	800d2a2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d244:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d248:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d24c:	68b9      	ldr	r1, [r7, #8]
 800d24e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d250:	f000 f8d9 	bl	800d406 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d256:	1e5a      	subs	r2, r3, #1
 800d258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d25a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d25c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d260:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d264:	d112      	bne.n	800d28c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d268:	691b      	ldr	r3, [r3, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d016      	beq.n	800d29c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	3310      	adds	r3, #16
 800d272:	4618      	mov	r0, r3
 800d274:	f000 feb0 	bl	800dfd8 <xTaskRemoveFromEventList>
 800d278:	4603      	mov	r3, r0
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00e      	beq.n	800d29c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d00b      	beq.n	800d29c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2201      	movs	r2, #1
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	e007      	b.n	800d29c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d290:	3301      	adds	r3, #1
 800d292:	b2db      	uxtb	r3, r3
 800d294:	b25a      	sxtb	r2, r3
 800d296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800d29c:	2301      	movs	r3, #1
 800d29e:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a0:	e001      	b.n	800d2a6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800d2a2:	2300      	movs	r3, #0
 800d2a4:	637b      	str	r3, [r7, #52]	; 0x34
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	f383 8811 	msr	BASEPRI, r3
}
 800d2b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d2b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d2b4:	4618      	mov	r0, r3
 800d2b6:	3738      	adds	r7, #56	; 0x38
 800d2b8:	46bd      	mov	sp, r7
 800d2ba:	bd80      	pop	{r7, pc}

0800d2bc <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b084      	sub	sp, #16
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10a      	bne.n	800d2e4 <vQueueDelete+0x28>
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	60bb      	str	r3, [r7, #8]
}
 800d2e0:	bf00      	nop
 800d2e2:	e7fe      	b.n	800d2e2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800d2e4:	68f8      	ldr	r0, [r7, #12]
 800d2e6:	f000 f95f 	bl	800d5a8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d102      	bne.n	800d2fa <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800d2f4:	68f8      	ldr	r0, [r7, #12]
 800d2f6:	f002 f9a3 	bl	800f640 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800d2fa:	bf00      	nop
 800d2fc:	3710      	adds	r7, #16
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}

0800d302 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d302:	b480      	push	{r7}
 800d304:	b085      	sub	sp, #20
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d006      	beq.n	800d320 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800d31c:	60fb      	str	r3, [r7, #12]
 800d31e:	e001      	b.n	800d324 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d320:	2300      	movs	r3, #0
 800d322:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d324:	68fb      	ldr	r3, [r7, #12]
	}
 800d326:	4618      	mov	r0, r3
 800d328:	3714      	adds	r7, #20
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d332:	b580      	push	{r7, lr}
 800d334:	b086      	sub	sp, #24
 800d336:	af00      	add	r7, sp, #0
 800d338:	60f8      	str	r0, [r7, #12]
 800d33a:	60b9      	str	r1, [r7, #8]
 800d33c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d33e:	2300      	movs	r3, #0
 800d340:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d346:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d10d      	bne.n	800d36c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d14d      	bne.n	800d3f4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	689b      	ldr	r3, [r3, #8]
 800d35c:	4618      	mov	r0, r3
 800d35e:	f001 f893 	bl	800e488 <xTaskPriorityDisinherit>
 800d362:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	2200      	movs	r2, #0
 800d368:	609a      	str	r2, [r3, #8]
 800d36a:	e043      	b.n	800d3f4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d119      	bne.n	800d3a6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	6858      	ldr	r0, [r3, #4]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37a:	461a      	mov	r2, r3
 800d37c:	68b9      	ldr	r1, [r7, #8]
 800d37e:	f00d fc8c 	bl	801ac9a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38a:	441a      	add	r2, r3
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	685a      	ldr	r2, [r3, #4]
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d32b      	bcc.n	800d3f4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	681a      	ldr	r2, [r3, #0]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	605a      	str	r2, [r3, #4]
 800d3a4:	e026      	b.n	800d3f4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	68d8      	ldr	r0, [r3, #12]
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ae:	461a      	mov	r2, r3
 800d3b0:	68b9      	ldr	r1, [r7, #8]
 800d3b2:	f00d fc72 	bl	801ac9a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	68da      	ldr	r2, [r3, #12]
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3be:	425b      	negs	r3, r3
 800d3c0:	441a      	add	r2, r3
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	68da      	ldr	r2, [r3, #12]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d207      	bcs.n	800d3e2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	689a      	ldr	r2, [r3, #8]
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3da:	425b      	negs	r3, r3
 800d3dc:	441a      	add	r2, r3
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	2b02      	cmp	r3, #2
 800d3e6:	d105      	bne.n	800d3f4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d3e8:	693b      	ldr	r3, [r7, #16]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d002      	beq.n	800d3f4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d3ee:	693b      	ldr	r3, [r7, #16]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d3f4:	693b      	ldr	r3, [r7, #16]
 800d3f6:	1c5a      	adds	r2, r3, #1
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d3fc:	697b      	ldr	r3, [r7, #20]
}
 800d3fe:	4618      	mov	r0, r3
 800d400:	3718      	adds	r7, #24
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800d406:	b580      	push	{r7, lr}
 800d408:	b082      	sub	sp, #8
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	6078      	str	r0, [r7, #4]
 800d40e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d414:	2b00      	cmp	r3, #0
 800d416:	d018      	beq.n	800d44a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	68da      	ldr	r2, [r3, #12]
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d420:	441a      	add	r2, r3
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	68da      	ldr	r2, [r3, #12]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d303      	bcc.n	800d43a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	681a      	ldr	r2, [r3, #0]
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	68d9      	ldr	r1, [r3, #12]
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d442:	461a      	mov	r2, r3
 800d444:	6838      	ldr	r0, [r7, #0]
 800d446:	f00d fc28 	bl	801ac9a <memcpy>
	}
}
 800d44a:	bf00      	nop
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d452:	b580      	push	{r7, lr}
 800d454:	b084      	sub	sp, #16
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d45a:	f001 ff03 	bl	800f264 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d464:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d466:	e011      	b.n	800d48c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d012      	beq.n	800d496 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	3324      	adds	r3, #36	; 0x24
 800d474:	4618      	mov	r0, r3
 800d476:	f000 fdaf 	bl	800dfd8 <xTaskRemoveFromEventList>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d001      	beq.n	800d484 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d480:	f000 fe86 	bl	800e190 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d484:	7bfb      	ldrb	r3, [r7, #15]
 800d486:	3b01      	subs	r3, #1
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d48c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d490:	2b00      	cmp	r3, #0
 800d492:	dce9      	bgt.n	800d468 <prvUnlockQueue+0x16>
 800d494:	e000      	b.n	800d498 <prvUnlockQueue+0x46>
					break;
 800d496:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	22ff      	movs	r2, #255	; 0xff
 800d49c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d4a0:	f001 ff10 	bl	800f2c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d4a4:	f001 fede 	bl	800f264 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d4ae:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4b0:	e011      	b.n	800d4d6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	691b      	ldr	r3, [r3, #16]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d012      	beq.n	800d4e0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	3310      	adds	r3, #16
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f000 fd8a 	bl	800dfd8 <xTaskRemoveFromEventList>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d001      	beq.n	800d4ce <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d4ca:	f000 fe61 	bl	800e190 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d4ce:	7bbb      	ldrb	r3, [r7, #14]
 800d4d0:	3b01      	subs	r3, #1
 800d4d2:	b2db      	uxtb	r3, r3
 800d4d4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d4d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	dce9      	bgt.n	800d4b2 <prvUnlockQueue+0x60>
 800d4de:	e000      	b.n	800d4e2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d4e0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	22ff      	movs	r2, #255	; 0xff
 800d4e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d4ea:	f001 feeb 	bl	800f2c4 <vPortExitCritical>
}
 800d4ee:	bf00      	nop
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b084      	sub	sp, #16
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d4fe:	f001 feb1 	bl	800f264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d506:	2b00      	cmp	r3, #0
 800d508:	d102      	bne.n	800d510 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d50a:	2301      	movs	r3, #1
 800d50c:	60fb      	str	r3, [r7, #12]
 800d50e:	e001      	b.n	800d514 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d510:	2300      	movs	r3, #0
 800d512:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d514:	f001 fed6 	bl	800f2c4 <vPortExitCritical>

	return xReturn;
 800d518:	68fb      	ldr	r3, [r7, #12]
}
 800d51a:	4618      	mov	r0, r3
 800d51c:	3710      	adds	r7, #16
 800d51e:	46bd      	mov	sp, r7
 800d520:	bd80      	pop	{r7, pc}

0800d522 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d522:	b580      	push	{r7, lr}
 800d524:	b084      	sub	sp, #16
 800d526:	af00      	add	r7, sp, #0
 800d528:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d52a:	f001 fe9b 	bl	800f264 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d536:	429a      	cmp	r2, r3
 800d538:	d102      	bne.n	800d540 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d53a:	2301      	movs	r3, #1
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	e001      	b.n	800d544 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d540:	2300      	movs	r3, #0
 800d542:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d544:	f001 febe 	bl	800f2c4 <vPortExitCritical>

	return xReturn;
 800d548:	68fb      	ldr	r3, [r7, #12]
}
 800d54a:	4618      	mov	r0, r3
 800d54c:	3710      	adds	r7, #16
 800d54e:	46bd      	mov	sp, r7
 800d550:	bd80      	pop	{r7, pc}
	...

0800d554 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d554:	b480      	push	{r7}
 800d556:	b085      	sub	sp, #20
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d55e:	2300      	movs	r3, #0
 800d560:	60fb      	str	r3, [r7, #12]
 800d562:	e014      	b.n	800d58e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d564:	4a0f      	ldr	r2, [pc, #60]	; (800d5a4 <vQueueAddToRegistry+0x50>)
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d10b      	bne.n	800d588 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d570:	490c      	ldr	r1, [pc, #48]	; (800d5a4 <vQueueAddToRegistry+0x50>)
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	683a      	ldr	r2, [r7, #0]
 800d576:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d57a:	4a0a      	ldr	r2, [pc, #40]	; (800d5a4 <vQueueAddToRegistry+0x50>)
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	00db      	lsls	r3, r3, #3
 800d580:	4413      	add	r3, r2
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d586:	e006      	b.n	800d596 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	3301      	adds	r3, #1
 800d58c:	60fb      	str	r3, [r7, #12]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2b07      	cmp	r3, #7
 800d592:	d9e7      	bls.n	800d564 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d594:	bf00      	nop
 800d596:	bf00      	nop
 800d598:	3714      	adds	r7, #20
 800d59a:	46bd      	mov	sp, r7
 800d59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a0:	4770      	bx	lr
 800d5a2:	bf00      	nop
 800d5a4:	2400516c 	.word	0x2400516c

0800d5a8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60fb      	str	r3, [r7, #12]
 800d5b4:	e016      	b.n	800d5e4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d5b6:	4a10      	ldr	r2, [pc, #64]	; (800d5f8 <vQueueUnregisterQueue+0x50>)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	00db      	lsls	r3, r3, #3
 800d5bc:	4413      	add	r3, r2
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	687a      	ldr	r2, [r7, #4]
 800d5c2:	429a      	cmp	r2, r3
 800d5c4:	d10b      	bne.n	800d5de <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d5c6:	4a0c      	ldr	r2, [pc, #48]	; (800d5f8 <vQueueUnregisterQueue+0x50>)
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2100      	movs	r1, #0
 800d5cc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d5d0:	4a09      	ldr	r2, [pc, #36]	; (800d5f8 <vQueueUnregisterQueue+0x50>)
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	00db      	lsls	r3, r3, #3
 800d5d6:	4413      	add	r3, r2
 800d5d8:	2200      	movs	r2, #0
 800d5da:	605a      	str	r2, [r3, #4]
				break;
 800d5dc:	e006      	b.n	800d5ec <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	60fb      	str	r3, [r7, #12]
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b07      	cmp	r3, #7
 800d5e8:	d9e5      	bls.n	800d5b6 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d5ea:	bf00      	nop
 800d5ec:	bf00      	nop
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr
 800d5f8:	2400516c 	.word	0x2400516c

0800d5fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b086      	sub	sp, #24
 800d600:	af00      	add	r7, sp, #0
 800d602:	60f8      	str	r0, [r7, #12]
 800d604:	60b9      	str	r1, [r7, #8]
 800d606:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d60c:	f001 fe2a 	bl	800f264 <vPortEnterCritical>
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d616:	b25b      	sxtb	r3, r3
 800d618:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d61c:	d103      	bne.n	800d626 <vQueueWaitForMessageRestricted+0x2a>
 800d61e:	697b      	ldr	r3, [r7, #20]
 800d620:	2200      	movs	r2, #0
 800d622:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d62c:	b25b      	sxtb	r3, r3
 800d62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d632:	d103      	bne.n	800d63c <vQueueWaitForMessageRestricted+0x40>
 800d634:	697b      	ldr	r3, [r7, #20]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d63c:	f001 fe42 	bl	800f2c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d644:	2b00      	cmp	r3, #0
 800d646:	d106      	bne.n	800d656 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	3324      	adds	r3, #36	; 0x24
 800d64c:	687a      	ldr	r2, [r7, #4]
 800d64e:	68b9      	ldr	r1, [r7, #8]
 800d650:	4618      	mov	r0, r3
 800d652:	f000 fc95 	bl	800df80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d656:	6978      	ldr	r0, [r7, #20]
 800d658:	f7ff fefb 	bl	800d452 <prvUnlockQueue>
	}
 800d65c:	bf00      	nop
 800d65e:	3718      	adds	r7, #24
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}

0800d664 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08e      	sub	sp, #56	; 0x38
 800d668:	af04      	add	r7, sp, #16
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
 800d670:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d674:	2b00      	cmp	r3, #0
 800d676:	d10a      	bne.n	800d68e <xTaskCreateStatic+0x2a>
	__asm volatile
 800d678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d67c:	f383 8811 	msr	BASEPRI, r3
 800d680:	f3bf 8f6f 	isb	sy
 800d684:	f3bf 8f4f 	dsb	sy
 800d688:	623b      	str	r3, [r7, #32]
}
 800d68a:	bf00      	nop
 800d68c:	e7fe      	b.n	800d68c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <xTaskCreateStatic+0x46>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	61fb      	str	r3, [r7, #28]
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d6aa:	23c0      	movs	r3, #192	; 0xc0
 800d6ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d6ae:	693b      	ldr	r3, [r7, #16]
 800d6b0:	2bc0      	cmp	r3, #192	; 0xc0
 800d6b2:	d00a      	beq.n	800d6ca <xTaskCreateStatic+0x66>
	__asm volatile
 800d6b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6b8:	f383 8811 	msr	BASEPRI, r3
 800d6bc:	f3bf 8f6f 	isb	sy
 800d6c0:	f3bf 8f4f 	dsb	sy
 800d6c4:	61bb      	str	r3, [r7, #24]
}
 800d6c6:	bf00      	nop
 800d6c8:	e7fe      	b.n	800d6c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d6ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d6cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d01e      	beq.n	800d710 <xTaskCreateStatic+0xac>
 800d6d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d01b      	beq.n	800d710 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d6e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e4:	2202      	movs	r2, #2
 800d6e6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	9303      	str	r3, [sp, #12]
 800d6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f0:	9302      	str	r3, [sp, #8]
 800d6f2:	f107 0314 	add.w	r3, r7, #20
 800d6f6:	9301      	str	r3, [sp, #4]
 800d6f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	687a      	ldr	r2, [r7, #4]
 800d700:	68b9      	ldr	r1, [r7, #8]
 800d702:	68f8      	ldr	r0, [r7, #12]
 800d704:	f000 f850 	bl	800d7a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d70a:	f000 f8f7 	bl	800d8fc <prvAddNewTaskToReadyList>
 800d70e:	e001      	b.n	800d714 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800d710:	2300      	movs	r3, #0
 800d712:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d714:	697b      	ldr	r3, [r7, #20]
	}
 800d716:	4618      	mov	r0, r3
 800d718:	3728      	adds	r7, #40	; 0x28
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b08c      	sub	sp, #48	; 0x30
 800d722:	af04      	add	r7, sp, #16
 800d724:	60f8      	str	r0, [r7, #12]
 800d726:	60b9      	str	r1, [r7, #8]
 800d728:	603b      	str	r3, [r7, #0]
 800d72a:	4613      	mov	r3, r2
 800d72c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d72e:	88fb      	ldrh	r3, [r7, #6]
 800d730:	009b      	lsls	r3, r3, #2
 800d732:	4618      	mov	r0, r3
 800d734:	f001 feb8 	bl	800f4a8 <pvPortMalloc>
 800d738:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d73a:	697b      	ldr	r3, [r7, #20]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d00e      	beq.n	800d75e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d740:	20c0      	movs	r0, #192	; 0xc0
 800d742:	f001 feb1 	bl	800f4a8 <pvPortMalloc>
 800d746:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d748:	69fb      	ldr	r3, [r7, #28]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d003      	beq.n	800d756 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	697a      	ldr	r2, [r7, #20]
 800d752:	631a      	str	r2, [r3, #48]	; 0x30
 800d754:	e005      	b.n	800d762 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d756:	6978      	ldr	r0, [r7, #20]
 800d758:	f001 ff72 	bl	800f640 <vPortFree>
 800d75c:	e001      	b.n	800d762 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d75e:	2300      	movs	r3, #0
 800d760:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d762:	69fb      	ldr	r3, [r7, #28]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d017      	beq.n	800d798 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d768:	69fb      	ldr	r3, [r7, #28]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d770:	88fa      	ldrh	r2, [r7, #6]
 800d772:	2300      	movs	r3, #0
 800d774:	9303      	str	r3, [sp, #12]
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	9302      	str	r3, [sp, #8]
 800d77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d780:	9300      	str	r3, [sp, #0]
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	68b9      	ldr	r1, [r7, #8]
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 f80e 	bl	800d7a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d78c:	69f8      	ldr	r0, [r7, #28]
 800d78e:	f000 f8b5 	bl	800d8fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d792:	2301      	movs	r3, #1
 800d794:	61bb      	str	r3, [r7, #24]
 800d796:	e002      	b.n	800d79e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d798:	f04f 33ff 	mov.w	r3, #4294967295
 800d79c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d79e:	69bb      	ldr	r3, [r7, #24]
	}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3720      	adds	r7, #32
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b088      	sub	sp, #32
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	60f8      	str	r0, [r7, #12]
 800d7b0:	60b9      	str	r1, [r7, #8]
 800d7b2:	607a      	str	r2, [r7, #4]
 800d7b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	009b      	lsls	r3, r3, #2
 800d7be:	461a      	mov	r2, r3
 800d7c0:	21a5      	movs	r1, #165	; 0xa5
 800d7c2:	f00d fa78 	bl	801acb6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d7ca:	6879      	ldr	r1, [r7, #4]
 800d7cc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d7d0:	440b      	add	r3, r1
 800d7d2:	009b      	lsls	r3, r3, #2
 800d7d4:	4413      	add	r3, r2
 800d7d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	f023 0307 	bic.w	r3, r3, #7
 800d7de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	f003 0307 	and.w	r3, r3, #7
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00a      	beq.n	800d800 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d7ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ee:	f383 8811 	msr	BASEPRI, r3
 800d7f2:	f3bf 8f6f 	isb	sy
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	617b      	str	r3, [r7, #20]
}
 800d7fc:	bf00      	nop
 800d7fe:	e7fe      	b.n	800d7fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	2b00      	cmp	r3, #0
 800d804:	d01f      	beq.n	800d846 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d806:	2300      	movs	r3, #0
 800d808:	61fb      	str	r3, [r7, #28]
 800d80a:	e012      	b.n	800d832 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d80c:	68ba      	ldr	r2, [r7, #8]
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	4413      	add	r3, r2
 800d812:	7819      	ldrb	r1, [r3, #0]
 800d814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	4413      	add	r3, r2
 800d81a:	3334      	adds	r3, #52	; 0x34
 800d81c:	460a      	mov	r2, r1
 800d81e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d820:	68ba      	ldr	r2, [r7, #8]
 800d822:	69fb      	ldr	r3, [r7, #28]
 800d824:	4413      	add	r3, r2
 800d826:	781b      	ldrb	r3, [r3, #0]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d006      	beq.n	800d83a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	3301      	adds	r3, #1
 800d830:	61fb      	str	r3, [r7, #28]
 800d832:	69fb      	ldr	r3, [r7, #28]
 800d834:	2b0f      	cmp	r3, #15
 800d836:	d9e9      	bls.n	800d80c <prvInitialiseNewTask+0x64>
 800d838:	e000      	b.n	800d83c <prvInitialiseNewTask+0x94>
			{
				break;
 800d83a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83e:	2200      	movs	r2, #0
 800d840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d844:	e003      	b.n	800d84e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d850:	2b37      	cmp	r3, #55	; 0x37
 800d852:	d901      	bls.n	800d858 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d854:	2337      	movs	r3, #55	; 0x37
 800d856:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d85c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d862:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d866:	2200      	movs	r2, #0
 800d868:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86c:	3304      	adds	r3, #4
 800d86e:	4618      	mov	r0, r3
 800d870:	f7fe fda0 	bl	800c3b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d876:	3318      	adds	r3, #24
 800d878:	4618      	mov	r0, r3
 800d87a:	f7fe fd9b 	bl	800c3b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d882:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d88c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d892:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d896:	2200      	movs	r2, #0
 800d898:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d89c:	2200      	movs	r2, #0
 800d89e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d8a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d8aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ac:	3358      	adds	r3, #88	; 0x58
 800d8ae:	2260      	movs	r2, #96	; 0x60
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f00d f9ff 	bl	801acb6 <memset>
 800d8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8ba:	4a0d      	ldr	r2, [pc, #52]	; (800d8f0 <prvInitialiseNewTask+0x148>)
 800d8bc:	65da      	str	r2, [r3, #92]	; 0x5c
 800d8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c0:	4a0c      	ldr	r2, [pc, #48]	; (800d8f4 <prvInitialiseNewTask+0x14c>)
 800d8c2:	661a      	str	r2, [r3, #96]	; 0x60
 800d8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8c6:	4a0c      	ldr	r2, [pc, #48]	; (800d8f8 <prvInitialiseNewTask+0x150>)
 800d8c8:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d8ca:	683a      	ldr	r2, [r7, #0]
 800d8cc:	68f9      	ldr	r1, [r7, #12]
 800d8ce:	69b8      	ldr	r0, [r7, #24]
 800d8d0:	f001 fb9e 	bl	800f010 <pxPortInitialiseStack>
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d002      	beq.n	800d8e6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d8e6:	bf00      	nop
 800d8e8:	3720      	adds	r7, #32
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	0801f36c 	.word	0x0801f36c
 800d8f4:	0801f38c 	.word	0x0801f38c
 800d8f8:	0801f34c 	.word	0x0801f34c

0800d8fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b082      	sub	sp, #8
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d904:	f001 fcae 	bl	800f264 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d908:	4b2d      	ldr	r3, [pc, #180]	; (800d9c0 <prvAddNewTaskToReadyList+0xc4>)
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	3301      	adds	r3, #1
 800d90e:	4a2c      	ldr	r2, [pc, #176]	; (800d9c0 <prvAddNewTaskToReadyList+0xc4>)
 800d910:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d912:	4b2c      	ldr	r3, [pc, #176]	; (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d109      	bne.n	800d92e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d91a:	4a2a      	ldr	r2, [pc, #168]	; (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d920:	4b27      	ldr	r3, [pc, #156]	; (800d9c0 <prvAddNewTaskToReadyList+0xc4>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	2b01      	cmp	r3, #1
 800d926:	d110      	bne.n	800d94a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d928:	f000 fc56 	bl	800e1d8 <prvInitialiseTaskLists>
 800d92c:	e00d      	b.n	800d94a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d92e:	4b26      	ldr	r3, [pc, #152]	; (800d9c8 <prvAddNewTaskToReadyList+0xcc>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d109      	bne.n	800d94a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d936:	4b23      	ldr	r3, [pc, #140]	; (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d938:	681b      	ldr	r3, [r3, #0]
 800d93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d940:	429a      	cmp	r2, r3
 800d942:	d802      	bhi.n	800d94a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d944:	4a1f      	ldr	r2, [pc, #124]	; (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d94a:	4b20      	ldr	r3, [pc, #128]	; (800d9cc <prvAddNewTaskToReadyList+0xd0>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	3301      	adds	r3, #1
 800d950:	4a1e      	ldr	r2, [pc, #120]	; (800d9cc <prvAddNewTaskToReadyList+0xd0>)
 800d952:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d954:	4b1d      	ldr	r3, [pc, #116]	; (800d9cc <prvAddNewTaskToReadyList+0xd0>)
 800d956:	681a      	ldr	r2, [r3, #0]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d960:	4b1b      	ldr	r3, [pc, #108]	; (800d9d0 <prvAddNewTaskToReadyList+0xd4>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	429a      	cmp	r2, r3
 800d966:	d903      	bls.n	800d970 <prvAddNewTaskToReadyList+0x74>
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d96c:	4a18      	ldr	r2, [pc, #96]	; (800d9d0 <prvAddNewTaskToReadyList+0xd4>)
 800d96e:	6013      	str	r3, [r2, #0]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d974:	4613      	mov	r3, r2
 800d976:	009b      	lsls	r3, r3, #2
 800d978:	4413      	add	r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	4a15      	ldr	r2, [pc, #84]	; (800d9d4 <prvAddNewTaskToReadyList+0xd8>)
 800d97e:	441a      	add	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	3304      	adds	r3, #4
 800d984:	4619      	mov	r1, r3
 800d986:	4610      	mov	r0, r2
 800d988:	f7fe fd21 	bl	800c3ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d98c:	f001 fc9a 	bl	800f2c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d990:	4b0d      	ldr	r3, [pc, #52]	; (800d9c8 <prvAddNewTaskToReadyList+0xcc>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d00e      	beq.n	800d9b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d998:	4b0a      	ldr	r3, [pc, #40]	; (800d9c4 <prvAddNewTaskToReadyList+0xc8>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9a2:	429a      	cmp	r2, r3
 800d9a4:	d207      	bcs.n	800d9b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d9a6:	4b0c      	ldr	r3, [pc, #48]	; (800d9d8 <prvAddNewTaskToReadyList+0xdc>)
 800d9a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9ac:	601a      	str	r2, [r3, #0]
 800d9ae:	f3bf 8f4f 	dsb	sy
 800d9b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d9b6:	bf00      	nop
 800d9b8:	3708      	adds	r7, #8
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}
 800d9be:	bf00      	nop
 800d9c0:	24000d20 	.word	0x24000d20
 800d9c4:	2400084c 	.word	0x2400084c
 800d9c8:	24000d2c 	.word	0x24000d2c
 800d9cc:	24000d3c 	.word	0x24000d3c
 800d9d0:	24000d28 	.word	0x24000d28
 800d9d4:	24000850 	.word	0x24000850
 800d9d8:	e000ed04 	.word	0xe000ed04

0800d9dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b084      	sub	sp, #16
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d017      	beq.n	800da1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d9ee:	4b13      	ldr	r3, [pc, #76]	; (800da3c <vTaskDelay+0x60>)
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d00a      	beq.n	800da0c <vTaskDelay+0x30>
	__asm volatile
 800d9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9fa:	f383 8811 	msr	BASEPRI, r3
 800d9fe:	f3bf 8f6f 	isb	sy
 800da02:	f3bf 8f4f 	dsb	sy
 800da06:	60bb      	str	r3, [r7, #8]
}
 800da08:	bf00      	nop
 800da0a:	e7fe      	b.n	800da0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800da0c:	f000 f88c 	bl	800db28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800da10:	2100      	movs	r1, #0
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f000 ff5a 	bl	800e8cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800da18:	f000 f894 	bl	800db44 <xTaskResumeAll>
 800da1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d107      	bne.n	800da34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800da24:	4b06      	ldr	r3, [pc, #24]	; (800da40 <vTaskDelay+0x64>)
 800da26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da2a:	601a      	str	r2, [r3, #0]
 800da2c:	f3bf 8f4f 	dsb	sy
 800da30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da34:	bf00      	nop
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}
 800da3c:	24000d48 	.word	0x24000d48
 800da40:	e000ed04 	.word	0xe000ed04

0800da44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b08a      	sub	sp, #40	; 0x28
 800da48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800da4e:	2300      	movs	r3, #0
 800da50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800da52:	463a      	mov	r2, r7
 800da54:	1d39      	adds	r1, r7, #4
 800da56:	f107 0308 	add.w	r3, r7, #8
 800da5a:	4618      	mov	r0, r3
 800da5c:	f7fe fc56 	bl	800c30c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800da60:	6839      	ldr	r1, [r7, #0]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	68ba      	ldr	r2, [r7, #8]
 800da66:	9202      	str	r2, [sp, #8]
 800da68:	9301      	str	r3, [sp, #4]
 800da6a:	2300      	movs	r3, #0
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	2300      	movs	r3, #0
 800da70:	460a      	mov	r2, r1
 800da72:	4925      	ldr	r1, [pc, #148]	; (800db08 <vTaskStartScheduler+0xc4>)
 800da74:	4825      	ldr	r0, [pc, #148]	; (800db0c <vTaskStartScheduler+0xc8>)
 800da76:	f7ff fdf5 	bl	800d664 <xTaskCreateStatic>
 800da7a:	4603      	mov	r3, r0
 800da7c:	4a24      	ldr	r2, [pc, #144]	; (800db10 <vTaskStartScheduler+0xcc>)
 800da7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800da80:	4b23      	ldr	r3, [pc, #140]	; (800db10 <vTaskStartScheduler+0xcc>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	2b00      	cmp	r3, #0
 800da86:	d002      	beq.n	800da8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800da88:	2301      	movs	r3, #1
 800da8a:	617b      	str	r3, [r7, #20]
 800da8c:	e001      	b.n	800da92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800da8e:	2300      	movs	r3, #0
 800da90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d102      	bne.n	800da9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800da98:	f000 ff6c 	bl	800e974 <xTimerCreateTimerTask>
 800da9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d11d      	bne.n	800dae0 <vTaskStartScheduler+0x9c>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa8:	f383 8811 	msr	BASEPRI, r3
 800daac:	f3bf 8f6f 	isb	sy
 800dab0:	f3bf 8f4f 	dsb	sy
 800dab4:	613b      	str	r3, [r7, #16]
}
 800dab6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800dab8:	4b16      	ldr	r3, [pc, #88]	; (800db14 <vTaskStartScheduler+0xd0>)
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	3358      	adds	r3, #88	; 0x58
 800dabe:	4a16      	ldr	r2, [pc, #88]	; (800db18 <vTaskStartScheduler+0xd4>)
 800dac0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dac2:	4b16      	ldr	r3, [pc, #88]	; (800db1c <vTaskStartScheduler+0xd8>)
 800dac4:	f04f 32ff 	mov.w	r2, #4294967295
 800dac8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800daca:	4b15      	ldr	r3, [pc, #84]	; (800db20 <vTaskStartScheduler+0xdc>)
 800dacc:	2201      	movs	r2, #1
 800dace:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dad0:	4b14      	ldr	r3, [pc, #80]	; (800db24 <vTaskStartScheduler+0xe0>)
 800dad2:	2200      	movs	r2, #0
 800dad4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800dad6:	f7f3 fb3b 	bl	8001150 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dada:	f001 fb21 	bl	800f120 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dade:	e00e      	b.n	800dafe <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae6:	d10a      	bne.n	800dafe <vTaskStartScheduler+0xba>
	__asm volatile
 800dae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daec:	f383 8811 	msr	BASEPRI, r3
 800daf0:	f3bf 8f6f 	isb	sy
 800daf4:	f3bf 8f4f 	dsb	sy
 800daf8:	60fb      	str	r3, [r7, #12]
}
 800dafa:	bf00      	nop
 800dafc:	e7fe      	b.n	800dafc <vTaskStartScheduler+0xb8>
}
 800dafe:	bf00      	nop
 800db00:	3718      	adds	r7, #24
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}
 800db06:	bf00      	nop
 800db08:	0801be30 	.word	0x0801be30
 800db0c:	0800e1a9 	.word	0x0800e1a9
 800db10:	24000d44 	.word	0x24000d44
 800db14:	2400084c 	.word	0x2400084c
 800db18:	2400003c 	.word	0x2400003c
 800db1c:	24000d40 	.word	0x24000d40
 800db20:	24000d2c 	.word	0x24000d2c
 800db24:	24000d24 	.word	0x24000d24

0800db28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800db28:	b480      	push	{r7}
 800db2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800db2c:	4b04      	ldr	r3, [pc, #16]	; (800db40 <vTaskSuspendAll+0x18>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	3301      	adds	r3, #1
 800db32:	4a03      	ldr	r2, [pc, #12]	; (800db40 <vTaskSuspendAll+0x18>)
 800db34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800db36:	bf00      	nop
 800db38:	46bd      	mov	sp, r7
 800db3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3e:	4770      	bx	lr
 800db40:	24000d48 	.word	0x24000d48

0800db44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b084      	sub	sp, #16
 800db48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800db4a:	2300      	movs	r3, #0
 800db4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800db4e:	2300      	movs	r3, #0
 800db50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800db52:	4b42      	ldr	r3, [pc, #264]	; (800dc5c <xTaskResumeAll+0x118>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d10a      	bne.n	800db70 <xTaskResumeAll+0x2c>
	__asm volatile
 800db5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db5e:	f383 8811 	msr	BASEPRI, r3
 800db62:	f3bf 8f6f 	isb	sy
 800db66:	f3bf 8f4f 	dsb	sy
 800db6a:	603b      	str	r3, [r7, #0]
}
 800db6c:	bf00      	nop
 800db6e:	e7fe      	b.n	800db6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800db70:	f001 fb78 	bl	800f264 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800db74:	4b39      	ldr	r3, [pc, #228]	; (800dc5c <xTaskResumeAll+0x118>)
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	3b01      	subs	r3, #1
 800db7a:	4a38      	ldr	r2, [pc, #224]	; (800dc5c <xTaskResumeAll+0x118>)
 800db7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db7e:	4b37      	ldr	r3, [pc, #220]	; (800dc5c <xTaskResumeAll+0x118>)
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d162      	bne.n	800dc4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800db86:	4b36      	ldr	r3, [pc, #216]	; (800dc60 <xTaskResumeAll+0x11c>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d05e      	beq.n	800dc4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800db8e:	e02f      	b.n	800dbf0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db90:	4b34      	ldr	r3, [pc, #208]	; (800dc64 <xTaskResumeAll+0x120>)
 800db92:	68db      	ldr	r3, [r3, #12]
 800db94:	68db      	ldr	r3, [r3, #12]
 800db96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	3318      	adds	r3, #24
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe fc73 	bl	800c488 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	3304      	adds	r3, #4
 800dba6:	4618      	mov	r0, r3
 800dba8:	f7fe fc6e 	bl	800c488 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbb0:	4b2d      	ldr	r3, [pc, #180]	; (800dc68 <xTaskResumeAll+0x124>)
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d903      	bls.n	800dbc0 <xTaskResumeAll+0x7c>
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbbc:	4a2a      	ldr	r2, [pc, #168]	; (800dc68 <xTaskResumeAll+0x124>)
 800dbbe:	6013      	str	r3, [r2, #0]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	009b      	lsls	r3, r3, #2
 800dbc8:	4413      	add	r3, r2
 800dbca:	009b      	lsls	r3, r3, #2
 800dbcc:	4a27      	ldr	r2, [pc, #156]	; (800dc6c <xTaskResumeAll+0x128>)
 800dbce:	441a      	add	r2, r3
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	3304      	adds	r3, #4
 800dbd4:	4619      	mov	r1, r3
 800dbd6:	4610      	mov	r0, r2
 800dbd8:	f7fe fbf9 	bl	800c3ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbe0:	4b23      	ldr	r3, [pc, #140]	; (800dc70 <xTaskResumeAll+0x12c>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d302      	bcc.n	800dbf0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800dbea:	4b22      	ldr	r3, [pc, #136]	; (800dc74 <xTaskResumeAll+0x130>)
 800dbec:	2201      	movs	r2, #1
 800dbee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dbf0:	4b1c      	ldr	r3, [pc, #112]	; (800dc64 <xTaskResumeAll+0x120>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1cb      	bne.n	800db90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d001      	beq.n	800dc02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dbfe:	f000 fb8d 	bl	800e31c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800dc02:	4b1d      	ldr	r3, [pc, #116]	; (800dc78 <xTaskResumeAll+0x134>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d010      	beq.n	800dc30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dc0e:	f000 f859 	bl	800dcc4 <xTaskIncrementTick>
 800dc12:	4603      	mov	r3, r0
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d002      	beq.n	800dc1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800dc18:	4b16      	ldr	r3, [pc, #88]	; (800dc74 <xTaskResumeAll+0x130>)
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	3b01      	subs	r3, #1
 800dc22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1f1      	bne.n	800dc0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800dc2a:	4b13      	ldr	r3, [pc, #76]	; (800dc78 <xTaskResumeAll+0x134>)
 800dc2c:	2200      	movs	r2, #0
 800dc2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800dc30:	4b10      	ldr	r3, [pc, #64]	; (800dc74 <xTaskResumeAll+0x130>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d009      	beq.n	800dc4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800dc38:	2301      	movs	r3, #1
 800dc3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800dc3c:	4b0f      	ldr	r3, [pc, #60]	; (800dc7c <xTaskResumeAll+0x138>)
 800dc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	f3bf 8f4f 	dsb	sy
 800dc48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800dc4c:	f001 fb3a 	bl	800f2c4 <vPortExitCritical>

	return xAlreadyYielded;
 800dc50:	68bb      	ldr	r3, [r7, #8]
}
 800dc52:	4618      	mov	r0, r3
 800dc54:	3710      	adds	r7, #16
 800dc56:	46bd      	mov	sp, r7
 800dc58:	bd80      	pop	{r7, pc}
 800dc5a:	bf00      	nop
 800dc5c:	24000d48 	.word	0x24000d48
 800dc60:	24000d20 	.word	0x24000d20
 800dc64:	24000ce0 	.word	0x24000ce0
 800dc68:	24000d28 	.word	0x24000d28
 800dc6c:	24000850 	.word	0x24000850
 800dc70:	2400084c 	.word	0x2400084c
 800dc74:	24000d34 	.word	0x24000d34
 800dc78:	24000d30 	.word	0x24000d30
 800dc7c:	e000ed04 	.word	0xe000ed04

0800dc80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800dc80:	b480      	push	{r7}
 800dc82:	b083      	sub	sp, #12
 800dc84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800dc86:	4b05      	ldr	r3, [pc, #20]	; (800dc9c <xTaskGetTickCount+0x1c>)
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800dc8c:	687b      	ldr	r3, [r7, #4]
}
 800dc8e:	4618      	mov	r0, r3
 800dc90:	370c      	adds	r7, #12
 800dc92:	46bd      	mov	sp, r7
 800dc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc98:	4770      	bx	lr
 800dc9a:	bf00      	nop
 800dc9c:	24000d24 	.word	0x24000d24

0800dca0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b082      	sub	sp, #8
 800dca4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dca6:	f001 fbbf 	bl	800f428 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800dcaa:	2300      	movs	r3, #0
 800dcac:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800dcae:	4b04      	ldr	r3, [pc, #16]	; (800dcc0 <xTaskGetTickCountFromISR+0x20>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dcb4:	683b      	ldr	r3, [r7, #0]
}
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	3708      	adds	r7, #8
 800dcba:	46bd      	mov	sp, r7
 800dcbc:	bd80      	pop	{r7, pc}
 800dcbe:	bf00      	nop
 800dcc0:	24000d24 	.word	0x24000d24

0800dcc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b086      	sub	sp, #24
 800dcc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800dcca:	2300      	movs	r3, #0
 800dccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dcce:	4b4f      	ldr	r3, [pc, #316]	; (800de0c <xTaskIncrementTick+0x148>)
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	f040 808f 	bne.w	800ddf6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800dcd8:	4b4d      	ldr	r3, [pc, #308]	; (800de10 <xTaskIncrementTick+0x14c>)
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	3301      	adds	r3, #1
 800dcde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800dce0:	4a4b      	ldr	r2, [pc, #300]	; (800de10 <xTaskIncrementTick+0x14c>)
 800dce2:	693b      	ldr	r3, [r7, #16]
 800dce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d120      	bne.n	800dd2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800dcec:	4b49      	ldr	r3, [pc, #292]	; (800de14 <xTaskIncrementTick+0x150>)
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	681b      	ldr	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00a      	beq.n	800dd0c <xTaskIncrementTick+0x48>
	__asm volatile
 800dcf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcfa:	f383 8811 	msr	BASEPRI, r3
 800dcfe:	f3bf 8f6f 	isb	sy
 800dd02:	f3bf 8f4f 	dsb	sy
 800dd06:	603b      	str	r3, [r7, #0]
}
 800dd08:	bf00      	nop
 800dd0a:	e7fe      	b.n	800dd0a <xTaskIncrementTick+0x46>
 800dd0c:	4b41      	ldr	r3, [pc, #260]	; (800de14 <xTaskIncrementTick+0x150>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	60fb      	str	r3, [r7, #12]
 800dd12:	4b41      	ldr	r3, [pc, #260]	; (800de18 <xTaskIncrementTick+0x154>)
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	4a3f      	ldr	r2, [pc, #252]	; (800de14 <xTaskIncrementTick+0x150>)
 800dd18:	6013      	str	r3, [r2, #0]
 800dd1a:	4a3f      	ldr	r2, [pc, #252]	; (800de18 <xTaskIncrementTick+0x154>)
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	6013      	str	r3, [r2, #0]
 800dd20:	4b3e      	ldr	r3, [pc, #248]	; (800de1c <xTaskIncrementTick+0x158>)
 800dd22:	681b      	ldr	r3, [r3, #0]
 800dd24:	3301      	adds	r3, #1
 800dd26:	4a3d      	ldr	r2, [pc, #244]	; (800de1c <xTaskIncrementTick+0x158>)
 800dd28:	6013      	str	r3, [r2, #0]
 800dd2a:	f000 faf7 	bl	800e31c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800dd2e:	4b3c      	ldr	r3, [pc, #240]	; (800de20 <xTaskIncrementTick+0x15c>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	693a      	ldr	r2, [r7, #16]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d349      	bcc.n	800ddcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800dd38:	4b36      	ldr	r3, [pc, #216]	; (800de14 <xTaskIncrementTick+0x150>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d104      	bne.n	800dd4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd42:	4b37      	ldr	r3, [pc, #220]	; (800de20 <xTaskIncrementTick+0x15c>)
 800dd44:	f04f 32ff 	mov.w	r2, #4294967295
 800dd48:	601a      	str	r2, [r3, #0]
					break;
 800dd4a:	e03f      	b.n	800ddcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd4c:	4b31      	ldr	r3, [pc, #196]	; (800de14 <xTaskIncrementTick+0x150>)
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	685b      	ldr	r3, [r3, #4]
 800dd5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dd5c:	693a      	ldr	r2, [r7, #16]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d203      	bcs.n	800dd6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dd64:	4a2e      	ldr	r2, [pc, #184]	; (800de20 <xTaskIncrementTick+0x15c>)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dd6a:	e02f      	b.n	800ddcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	3304      	adds	r3, #4
 800dd70:	4618      	mov	r0, r3
 800dd72:	f7fe fb89 	bl	800c488 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800dd76:	68bb      	ldr	r3, [r7, #8]
 800dd78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d004      	beq.n	800dd88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	3318      	adds	r3, #24
 800dd82:	4618      	mov	r0, r3
 800dd84:	f7fe fb80 	bl	800c488 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd8c:	4b25      	ldr	r3, [pc, #148]	; (800de24 <xTaskIncrementTick+0x160>)
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d903      	bls.n	800dd9c <xTaskIncrementTick+0xd8>
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd98:	4a22      	ldr	r2, [pc, #136]	; (800de24 <xTaskIncrementTick+0x160>)
 800dd9a:	6013      	str	r3, [r2, #0]
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dda0:	4613      	mov	r3, r2
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4413      	add	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	4a1f      	ldr	r2, [pc, #124]	; (800de28 <xTaskIncrementTick+0x164>)
 800ddaa:	441a      	add	r2, r3
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	3304      	adds	r3, #4
 800ddb0:	4619      	mov	r1, r3
 800ddb2:	4610      	mov	r0, r2
 800ddb4:	f7fe fb0b 	bl	800c3ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddbc:	4b1b      	ldr	r3, [pc, #108]	; (800de2c <xTaskIncrementTick+0x168>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddc2:	429a      	cmp	r2, r3
 800ddc4:	d3b8      	bcc.n	800dd38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ddc6:	2301      	movs	r3, #1
 800ddc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ddca:	e7b5      	b.n	800dd38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ddcc:	4b17      	ldr	r3, [pc, #92]	; (800de2c <xTaskIncrementTick+0x168>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddd2:	4915      	ldr	r1, [pc, #84]	; (800de28 <xTaskIncrementTick+0x164>)
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	009b      	lsls	r3, r3, #2
 800ddd8:	4413      	add	r3, r2
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	440b      	add	r3, r1
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d901      	bls.n	800dde8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800dde4:	2301      	movs	r3, #1
 800dde6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800dde8:	4b11      	ldr	r3, [pc, #68]	; (800de30 <xTaskIncrementTick+0x16c>)
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d007      	beq.n	800de00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800ddf0:	2301      	movs	r3, #1
 800ddf2:	617b      	str	r3, [r7, #20]
 800ddf4:	e004      	b.n	800de00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ddf6:	4b0f      	ldr	r3, [pc, #60]	; (800de34 <xTaskIncrementTick+0x170>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	4a0d      	ldr	r2, [pc, #52]	; (800de34 <xTaskIncrementTick+0x170>)
 800ddfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800de00:	697b      	ldr	r3, [r7, #20]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3718      	adds	r7, #24
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}
 800de0a:	bf00      	nop
 800de0c:	24000d48 	.word	0x24000d48
 800de10:	24000d24 	.word	0x24000d24
 800de14:	24000cd8 	.word	0x24000cd8
 800de18:	24000cdc 	.word	0x24000cdc
 800de1c:	24000d38 	.word	0x24000d38
 800de20:	24000d40 	.word	0x24000d40
 800de24:	24000d28 	.word	0x24000d28
 800de28:	24000850 	.word	0x24000850
 800de2c:	2400084c 	.word	0x2400084c
 800de30:	24000d34 	.word	0x24000d34
 800de34:	24000d30 	.word	0x24000d30

0800de38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800de3e:	4b36      	ldr	r3, [pc, #216]	; (800df18 <vTaskSwitchContext+0xe0>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d003      	beq.n	800de4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800de46:	4b35      	ldr	r3, [pc, #212]	; (800df1c <vTaskSwitchContext+0xe4>)
 800de48:	2201      	movs	r2, #1
 800de4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800de4c:	e05f      	b.n	800df0e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800de4e:	4b33      	ldr	r3, [pc, #204]	; (800df1c <vTaskSwitchContext+0xe4>)
 800de50:	2200      	movs	r2, #0
 800de52:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800de54:	f7f3 f983 	bl	800115e <getRunTimeCounterValue>
 800de58:	4603      	mov	r3, r0
 800de5a:	4a31      	ldr	r2, [pc, #196]	; (800df20 <vTaskSwitchContext+0xe8>)
 800de5c:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800de5e:	4b30      	ldr	r3, [pc, #192]	; (800df20 <vTaskSwitchContext+0xe8>)
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	4b30      	ldr	r3, [pc, #192]	; (800df24 <vTaskSwitchContext+0xec>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	429a      	cmp	r2, r3
 800de68:	d909      	bls.n	800de7e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800de6a:	4b2f      	ldr	r3, [pc, #188]	; (800df28 <vTaskSwitchContext+0xf0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800de70:	4a2b      	ldr	r2, [pc, #172]	; (800df20 <vTaskSwitchContext+0xe8>)
 800de72:	6810      	ldr	r0, [r2, #0]
 800de74:	4a2b      	ldr	r2, [pc, #172]	; (800df24 <vTaskSwitchContext+0xec>)
 800de76:	6812      	ldr	r2, [r2, #0]
 800de78:	1a82      	subs	r2, r0, r2
 800de7a:	440a      	add	r2, r1
 800de7c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800de7e:	4b28      	ldr	r3, [pc, #160]	; (800df20 <vTaskSwitchContext+0xe8>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	4a28      	ldr	r2, [pc, #160]	; (800df24 <vTaskSwitchContext+0xec>)
 800de84:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de86:	4b29      	ldr	r3, [pc, #164]	; (800df2c <vTaskSwitchContext+0xf4>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	60fb      	str	r3, [r7, #12]
 800de8c:	e010      	b.n	800deb0 <vTaskSwitchContext+0x78>
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d10a      	bne.n	800deaa <vTaskSwitchContext+0x72>
	__asm volatile
 800de94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de98:	f383 8811 	msr	BASEPRI, r3
 800de9c:	f3bf 8f6f 	isb	sy
 800dea0:	f3bf 8f4f 	dsb	sy
 800dea4:	607b      	str	r3, [r7, #4]
}
 800dea6:	bf00      	nop
 800dea8:	e7fe      	b.n	800dea8 <vTaskSwitchContext+0x70>
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	3b01      	subs	r3, #1
 800deae:	60fb      	str	r3, [r7, #12]
 800deb0:	491f      	ldr	r1, [pc, #124]	; (800df30 <vTaskSwitchContext+0xf8>)
 800deb2:	68fa      	ldr	r2, [r7, #12]
 800deb4:	4613      	mov	r3, r2
 800deb6:	009b      	lsls	r3, r3, #2
 800deb8:	4413      	add	r3, r2
 800deba:	009b      	lsls	r3, r3, #2
 800debc:	440b      	add	r3, r1
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d0e4      	beq.n	800de8e <vTaskSwitchContext+0x56>
 800dec4:	68fa      	ldr	r2, [r7, #12]
 800dec6:	4613      	mov	r3, r2
 800dec8:	009b      	lsls	r3, r3, #2
 800deca:	4413      	add	r3, r2
 800decc:	009b      	lsls	r3, r3, #2
 800dece:	4a18      	ldr	r2, [pc, #96]	; (800df30 <vTaskSwitchContext+0xf8>)
 800ded0:	4413      	add	r3, r2
 800ded2:	60bb      	str	r3, [r7, #8]
 800ded4:	68bb      	ldr	r3, [r7, #8]
 800ded6:	685b      	ldr	r3, [r3, #4]
 800ded8:	685a      	ldr	r2, [r3, #4]
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	605a      	str	r2, [r3, #4]
 800dede:	68bb      	ldr	r3, [r7, #8]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	3308      	adds	r3, #8
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d104      	bne.n	800def4 <vTaskSwitchContext+0xbc>
 800deea:	68bb      	ldr	r3, [r7, #8]
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	685a      	ldr	r2, [r3, #4]
 800def0:	68bb      	ldr	r3, [r7, #8]
 800def2:	605a      	str	r2, [r3, #4]
 800def4:	68bb      	ldr	r3, [r7, #8]
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	68db      	ldr	r3, [r3, #12]
 800defa:	4a0b      	ldr	r2, [pc, #44]	; (800df28 <vTaskSwitchContext+0xf0>)
 800defc:	6013      	str	r3, [r2, #0]
 800defe:	4a0b      	ldr	r2, [pc, #44]	; (800df2c <vTaskSwitchContext+0xf4>)
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800df04:	4b08      	ldr	r3, [pc, #32]	; (800df28 <vTaskSwitchContext+0xf0>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	3358      	adds	r3, #88	; 0x58
 800df0a:	4a0a      	ldr	r2, [pc, #40]	; (800df34 <vTaskSwitchContext+0xfc>)
 800df0c:	6013      	str	r3, [r2, #0]
}
 800df0e:	bf00      	nop
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	24000d48 	.word	0x24000d48
 800df1c:	24000d34 	.word	0x24000d34
 800df20:	24000d50 	.word	0x24000d50
 800df24:	24000d4c 	.word	0x24000d4c
 800df28:	2400084c 	.word	0x2400084c
 800df2c:	24000d28 	.word	0x24000d28
 800df30:	24000850 	.word	0x24000850
 800df34:	2400003c 	.word	0x2400003c

0800df38 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d10a      	bne.n	800df5e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800df48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df4c:	f383 8811 	msr	BASEPRI, r3
 800df50:	f3bf 8f6f 	isb	sy
 800df54:	f3bf 8f4f 	dsb	sy
 800df58:	60fb      	str	r3, [r7, #12]
}
 800df5a:	bf00      	nop
 800df5c:	e7fe      	b.n	800df5c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800df5e:	4b07      	ldr	r3, [pc, #28]	; (800df7c <vTaskPlaceOnEventList+0x44>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	3318      	adds	r3, #24
 800df64:	4619      	mov	r1, r3
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f7fe fa55 	bl	800c416 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800df6c:	2101      	movs	r1, #1
 800df6e:	6838      	ldr	r0, [r7, #0]
 800df70:	f000 fcac 	bl	800e8cc <prvAddCurrentTaskToDelayedList>
}
 800df74:	bf00      	nop
 800df76:	3710      	adds	r7, #16
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	2400084c 	.word	0x2400084c

0800df80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800df80:	b580      	push	{r7, lr}
 800df82:	b086      	sub	sp, #24
 800df84:	af00      	add	r7, sp, #0
 800df86:	60f8      	str	r0, [r7, #12]
 800df88:	60b9      	str	r1, [r7, #8]
 800df8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d10a      	bne.n	800dfa8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800df92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df96:	f383 8811 	msr	BASEPRI, r3
 800df9a:	f3bf 8f6f 	isb	sy
 800df9e:	f3bf 8f4f 	dsb	sy
 800dfa2:	617b      	str	r3, [r7, #20]
}
 800dfa4:	bf00      	nop
 800dfa6:	e7fe      	b.n	800dfa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dfa8:	4b0a      	ldr	r3, [pc, #40]	; (800dfd4 <vTaskPlaceOnEventListRestricted+0x54>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	3318      	adds	r3, #24
 800dfae:	4619      	mov	r1, r3
 800dfb0:	68f8      	ldr	r0, [r7, #12]
 800dfb2:	f7fe fa0c 	bl	800c3ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d002      	beq.n	800dfc2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800dfbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dfc0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dfc2:	6879      	ldr	r1, [r7, #4]
 800dfc4:	68b8      	ldr	r0, [r7, #8]
 800dfc6:	f000 fc81 	bl	800e8cc <prvAddCurrentTaskToDelayedList>
	}
 800dfca:	bf00      	nop
 800dfcc:	3718      	adds	r7, #24
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	2400084c 	.word	0x2400084c

0800dfd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b086      	sub	sp, #24
 800dfdc:	af00      	add	r7, sp, #0
 800dfde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	68db      	ldr	r3, [r3, #12]
 800dfe4:	68db      	ldr	r3, [r3, #12]
 800dfe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d10a      	bne.n	800e004 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	60fb      	str	r3, [r7, #12]
}
 800e000:	bf00      	nop
 800e002:	e7fe      	b.n	800e002 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	3318      	adds	r3, #24
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fe fa3d 	bl	800c488 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e00e:	4b1e      	ldr	r3, [pc, #120]	; (800e088 <xTaskRemoveFromEventList+0xb0>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d11d      	bne.n	800e052 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	3304      	adds	r3, #4
 800e01a:	4618      	mov	r0, r3
 800e01c:	f7fe fa34 	bl	800c488 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e020:	693b      	ldr	r3, [r7, #16]
 800e022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e024:	4b19      	ldr	r3, [pc, #100]	; (800e08c <xTaskRemoveFromEventList+0xb4>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	429a      	cmp	r2, r3
 800e02a:	d903      	bls.n	800e034 <xTaskRemoveFromEventList+0x5c>
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e030:	4a16      	ldr	r2, [pc, #88]	; (800e08c <xTaskRemoveFromEventList+0xb4>)
 800e032:	6013      	str	r3, [r2, #0]
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e038:	4613      	mov	r3, r2
 800e03a:	009b      	lsls	r3, r3, #2
 800e03c:	4413      	add	r3, r2
 800e03e:	009b      	lsls	r3, r3, #2
 800e040:	4a13      	ldr	r2, [pc, #76]	; (800e090 <xTaskRemoveFromEventList+0xb8>)
 800e042:	441a      	add	r2, r3
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	3304      	adds	r3, #4
 800e048:	4619      	mov	r1, r3
 800e04a:	4610      	mov	r0, r2
 800e04c:	f7fe f9bf 	bl	800c3ce <vListInsertEnd>
 800e050:	e005      	b.n	800e05e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e052:	693b      	ldr	r3, [r7, #16]
 800e054:	3318      	adds	r3, #24
 800e056:	4619      	mov	r1, r3
 800e058:	480e      	ldr	r0, [pc, #56]	; (800e094 <xTaskRemoveFromEventList+0xbc>)
 800e05a:	f7fe f9b8 	bl	800c3ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e062:	4b0d      	ldr	r3, [pc, #52]	; (800e098 <xTaskRemoveFromEventList+0xc0>)
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e068:	429a      	cmp	r2, r3
 800e06a:	d905      	bls.n	800e078 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e06c:	2301      	movs	r3, #1
 800e06e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e070:	4b0a      	ldr	r3, [pc, #40]	; (800e09c <xTaskRemoveFromEventList+0xc4>)
 800e072:	2201      	movs	r2, #1
 800e074:	601a      	str	r2, [r3, #0]
 800e076:	e001      	b.n	800e07c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e078:	2300      	movs	r3, #0
 800e07a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e07c:	697b      	ldr	r3, [r7, #20]
}
 800e07e:	4618      	mov	r0, r3
 800e080:	3718      	adds	r7, #24
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	24000d48 	.word	0x24000d48
 800e08c:	24000d28 	.word	0x24000d28
 800e090:	24000850 	.word	0x24000850
 800e094:	24000ce0 	.word	0x24000ce0
 800e098:	2400084c 	.word	0x2400084c
 800e09c:	24000d34 	.word	0x24000d34

0800e0a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e0a8:	4b06      	ldr	r3, [pc, #24]	; (800e0c4 <vTaskInternalSetTimeOutState+0x24>)
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e0b0:	4b05      	ldr	r3, [pc, #20]	; (800e0c8 <vTaskInternalSetTimeOutState+0x28>)
 800e0b2:	681a      	ldr	r2, [r3, #0]
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	605a      	str	r2, [r3, #4]
}
 800e0b8:	bf00      	nop
 800e0ba:	370c      	adds	r7, #12
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr
 800e0c4:	24000d38 	.word	0x24000d38
 800e0c8:	24000d24 	.word	0x24000d24

0800e0cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e0cc:	b580      	push	{r7, lr}
 800e0ce:	b088      	sub	sp, #32
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d10a      	bne.n	800e0f2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e0dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0e0:	f383 8811 	msr	BASEPRI, r3
 800e0e4:	f3bf 8f6f 	isb	sy
 800e0e8:	f3bf 8f4f 	dsb	sy
 800e0ec:	613b      	str	r3, [r7, #16]
}
 800e0ee:	bf00      	nop
 800e0f0:	e7fe      	b.n	800e0f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e0f2:	683b      	ldr	r3, [r7, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d10a      	bne.n	800e10e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0fc:	f383 8811 	msr	BASEPRI, r3
 800e100:	f3bf 8f6f 	isb	sy
 800e104:	f3bf 8f4f 	dsb	sy
 800e108:	60fb      	str	r3, [r7, #12]
}
 800e10a:	bf00      	nop
 800e10c:	e7fe      	b.n	800e10c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e10e:	f001 f8a9 	bl	800f264 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e112:	4b1d      	ldr	r3, [pc, #116]	; (800e188 <xTaskCheckForTimeOut+0xbc>)
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	69ba      	ldr	r2, [r7, #24]
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12a:	d102      	bne.n	800e132 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e12c:	2300      	movs	r3, #0
 800e12e:	61fb      	str	r3, [r7, #28]
 800e130:	e023      	b.n	800e17a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	4b15      	ldr	r3, [pc, #84]	; (800e18c <xTaskCheckForTimeOut+0xc0>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d007      	beq.n	800e14e <xTaskCheckForTimeOut+0x82>
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	69ba      	ldr	r2, [r7, #24]
 800e144:	429a      	cmp	r2, r3
 800e146:	d302      	bcc.n	800e14e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e148:	2301      	movs	r3, #1
 800e14a:	61fb      	str	r3, [r7, #28]
 800e14c:	e015      	b.n	800e17a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	697a      	ldr	r2, [r7, #20]
 800e154:	429a      	cmp	r2, r3
 800e156:	d20b      	bcs.n	800e170 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	1ad2      	subs	r2, r2, r3
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f7ff ff9b 	bl	800e0a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e16a:	2300      	movs	r3, #0
 800e16c:	61fb      	str	r3, [r7, #28]
 800e16e:	e004      	b.n	800e17a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e170:	683b      	ldr	r3, [r7, #0]
 800e172:	2200      	movs	r2, #0
 800e174:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e176:	2301      	movs	r3, #1
 800e178:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e17a:	f001 f8a3 	bl	800f2c4 <vPortExitCritical>

	return xReturn;
 800e17e:	69fb      	ldr	r3, [r7, #28]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3720      	adds	r7, #32
 800e184:	46bd      	mov	sp, r7
 800e186:	bd80      	pop	{r7, pc}
 800e188:	24000d24 	.word	0x24000d24
 800e18c:	24000d38 	.word	0x24000d38

0800e190 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e190:	b480      	push	{r7}
 800e192:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e194:	4b03      	ldr	r3, [pc, #12]	; (800e1a4 <vTaskMissedYield+0x14>)
 800e196:	2201      	movs	r2, #1
 800e198:	601a      	str	r2, [r3, #0]
}
 800e19a:	bf00      	nop
 800e19c:	46bd      	mov	sp, r7
 800e19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a2:	4770      	bx	lr
 800e1a4:	24000d34 	.word	0x24000d34

0800e1a8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e1a8:	b580      	push	{r7, lr}
 800e1aa:	b082      	sub	sp, #8
 800e1ac:	af00      	add	r7, sp, #0
 800e1ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e1b0:	f000 f852 	bl	800e258 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e1b4:	4b06      	ldr	r3, [pc, #24]	; (800e1d0 <prvIdleTask+0x28>)
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d9f9      	bls.n	800e1b0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e1bc:	4b05      	ldr	r3, [pc, #20]	; (800e1d4 <prvIdleTask+0x2c>)
 800e1be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1c2:	601a      	str	r2, [r3, #0]
 800e1c4:	f3bf 8f4f 	dsb	sy
 800e1c8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e1cc:	e7f0      	b.n	800e1b0 <prvIdleTask+0x8>
 800e1ce:	bf00      	nop
 800e1d0:	24000850 	.word	0x24000850
 800e1d4:	e000ed04 	.word	0xe000ed04

0800e1d8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1de:	2300      	movs	r3, #0
 800e1e0:	607b      	str	r3, [r7, #4]
 800e1e2:	e00c      	b.n	800e1fe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	4613      	mov	r3, r2
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	4413      	add	r3, r2
 800e1ec:	009b      	lsls	r3, r3, #2
 800e1ee:	4a12      	ldr	r2, [pc, #72]	; (800e238 <prvInitialiseTaskLists+0x60>)
 800e1f0:	4413      	add	r3, r2
 800e1f2:	4618      	mov	r0, r3
 800e1f4:	f7fe f8be 	bl	800c374 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	3301      	adds	r3, #1
 800e1fc:	607b      	str	r3, [r7, #4]
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	2b37      	cmp	r3, #55	; 0x37
 800e202:	d9ef      	bls.n	800e1e4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e204:	480d      	ldr	r0, [pc, #52]	; (800e23c <prvInitialiseTaskLists+0x64>)
 800e206:	f7fe f8b5 	bl	800c374 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e20a:	480d      	ldr	r0, [pc, #52]	; (800e240 <prvInitialiseTaskLists+0x68>)
 800e20c:	f7fe f8b2 	bl	800c374 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e210:	480c      	ldr	r0, [pc, #48]	; (800e244 <prvInitialiseTaskLists+0x6c>)
 800e212:	f7fe f8af 	bl	800c374 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e216:	480c      	ldr	r0, [pc, #48]	; (800e248 <prvInitialiseTaskLists+0x70>)
 800e218:	f7fe f8ac 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e21c:	480b      	ldr	r0, [pc, #44]	; (800e24c <prvInitialiseTaskLists+0x74>)
 800e21e:	f7fe f8a9 	bl	800c374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e222:	4b0b      	ldr	r3, [pc, #44]	; (800e250 <prvInitialiseTaskLists+0x78>)
 800e224:	4a05      	ldr	r2, [pc, #20]	; (800e23c <prvInitialiseTaskLists+0x64>)
 800e226:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e228:	4b0a      	ldr	r3, [pc, #40]	; (800e254 <prvInitialiseTaskLists+0x7c>)
 800e22a:	4a05      	ldr	r2, [pc, #20]	; (800e240 <prvInitialiseTaskLists+0x68>)
 800e22c:	601a      	str	r2, [r3, #0]
}
 800e22e:	bf00      	nop
 800e230:	3708      	adds	r7, #8
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	24000850 	.word	0x24000850
 800e23c:	24000cb0 	.word	0x24000cb0
 800e240:	24000cc4 	.word	0x24000cc4
 800e244:	24000ce0 	.word	0x24000ce0
 800e248:	24000cf4 	.word	0x24000cf4
 800e24c:	24000d0c 	.word	0x24000d0c
 800e250:	24000cd8 	.word	0x24000cd8
 800e254:	24000cdc 	.word	0x24000cdc

0800e258 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e25e:	e019      	b.n	800e294 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e260:	f001 f800 	bl	800f264 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e264:	4b10      	ldr	r3, [pc, #64]	; (800e2a8 <prvCheckTasksWaitingTermination+0x50>)
 800e266:	68db      	ldr	r3, [r3, #12]
 800e268:	68db      	ldr	r3, [r3, #12]
 800e26a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	3304      	adds	r3, #4
 800e270:	4618      	mov	r0, r3
 800e272:	f7fe f909 	bl	800c488 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e276:	4b0d      	ldr	r3, [pc, #52]	; (800e2ac <prvCheckTasksWaitingTermination+0x54>)
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	3b01      	subs	r3, #1
 800e27c:	4a0b      	ldr	r2, [pc, #44]	; (800e2ac <prvCheckTasksWaitingTermination+0x54>)
 800e27e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e280:	4b0b      	ldr	r3, [pc, #44]	; (800e2b0 <prvCheckTasksWaitingTermination+0x58>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	3b01      	subs	r3, #1
 800e286:	4a0a      	ldr	r2, [pc, #40]	; (800e2b0 <prvCheckTasksWaitingTermination+0x58>)
 800e288:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e28a:	f001 f81b 	bl	800f2c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	f000 f810 	bl	800e2b4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e294:	4b06      	ldr	r3, [pc, #24]	; (800e2b0 <prvCheckTasksWaitingTermination+0x58>)
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d1e1      	bne.n	800e260 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e29c:	bf00      	nop
 800e29e:	bf00      	nop
 800e2a0:	3708      	adds	r7, #8
 800e2a2:	46bd      	mov	sp, r7
 800e2a4:	bd80      	pop	{r7, pc}
 800e2a6:	bf00      	nop
 800e2a8:	24000cf4 	.word	0x24000cf4
 800e2ac:	24000d20 	.word	0x24000d20
 800e2b0:	24000d08 	.word	0x24000d08

0800e2b4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	3358      	adds	r3, #88	; 0x58
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f00c fdc1 	bl	801ae48 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d108      	bne.n	800e2e2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f001 f9b3 	bl	800f640 <vPortFree>
				vPortFree( pxTCB );
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f001 f9b0 	bl	800f640 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e2e0:	e018      	b.n	800e314 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e2e8:	2b01      	cmp	r3, #1
 800e2ea:	d103      	bne.n	800e2f4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f001 f9a7 	bl	800f640 <vPortFree>
	}
 800e2f2:	e00f      	b.n	800e314 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800e2fa:	2b02      	cmp	r3, #2
 800e2fc:	d00a      	beq.n	800e314 <prvDeleteTCB+0x60>
	__asm volatile
 800e2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e302:	f383 8811 	msr	BASEPRI, r3
 800e306:	f3bf 8f6f 	isb	sy
 800e30a:	f3bf 8f4f 	dsb	sy
 800e30e:	60fb      	str	r3, [r7, #12]
}
 800e310:	bf00      	nop
 800e312:	e7fe      	b.n	800e312 <prvDeleteTCB+0x5e>
	}
 800e314:	bf00      	nop
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}

0800e31c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e31c:	b480      	push	{r7}
 800e31e:	b083      	sub	sp, #12
 800e320:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e322:	4b0c      	ldr	r3, [pc, #48]	; (800e354 <prvResetNextTaskUnblockTime+0x38>)
 800e324:	681b      	ldr	r3, [r3, #0]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d104      	bne.n	800e336 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e32c:	4b0a      	ldr	r3, [pc, #40]	; (800e358 <prvResetNextTaskUnblockTime+0x3c>)
 800e32e:	f04f 32ff 	mov.w	r2, #4294967295
 800e332:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e334:	e008      	b.n	800e348 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e336:	4b07      	ldr	r3, [pc, #28]	; (800e354 <prvResetNextTaskUnblockTime+0x38>)
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	68db      	ldr	r3, [r3, #12]
 800e33e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	685b      	ldr	r3, [r3, #4]
 800e344:	4a04      	ldr	r2, [pc, #16]	; (800e358 <prvResetNextTaskUnblockTime+0x3c>)
 800e346:	6013      	str	r3, [r2, #0]
}
 800e348:	bf00      	nop
 800e34a:	370c      	adds	r7, #12
 800e34c:	46bd      	mov	sp, r7
 800e34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e352:	4770      	bx	lr
 800e354:	24000cd8 	.word	0x24000cd8
 800e358:	24000d40 	.word	0x24000d40

0800e35c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800e35c:	b480      	push	{r7}
 800e35e:	b083      	sub	sp, #12
 800e360:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800e362:	4b05      	ldr	r3, [pc, #20]	; (800e378 <xTaskGetCurrentTaskHandle+0x1c>)
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	607b      	str	r3, [r7, #4]

		return xReturn;
 800e368:	687b      	ldr	r3, [r7, #4]
	}
 800e36a:	4618      	mov	r0, r3
 800e36c:	370c      	adds	r7, #12
 800e36e:	46bd      	mov	sp, r7
 800e370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e374:	4770      	bx	lr
 800e376:	bf00      	nop
 800e378:	2400084c 	.word	0x2400084c

0800e37c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e37c:	b480      	push	{r7}
 800e37e:	b083      	sub	sp, #12
 800e380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e382:	4b0b      	ldr	r3, [pc, #44]	; (800e3b0 <xTaskGetSchedulerState+0x34>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d102      	bne.n	800e390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e38a:	2301      	movs	r3, #1
 800e38c:	607b      	str	r3, [r7, #4]
 800e38e:	e008      	b.n	800e3a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e390:	4b08      	ldr	r3, [pc, #32]	; (800e3b4 <xTaskGetSchedulerState+0x38>)
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d102      	bne.n	800e39e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e398:	2302      	movs	r3, #2
 800e39a:	607b      	str	r3, [r7, #4]
 800e39c:	e001      	b.n	800e3a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e3a2:	687b      	ldr	r3, [r7, #4]
	}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	24000d2c 	.word	0x24000d2c
 800e3b4:	24000d48 	.word	0x24000d48

0800e3b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e3c4:	2300      	movs	r3, #0
 800e3c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d051      	beq.n	800e472 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3d2:	4b2a      	ldr	r3, [pc, #168]	; (800e47c <xTaskPriorityInherit+0xc4>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d241      	bcs.n	800e460 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	699b      	ldr	r3, [r3, #24]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	db06      	blt.n	800e3f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e3e4:	4b25      	ldr	r3, [pc, #148]	; (800e47c <xTaskPriorityInherit+0xc4>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e3ee:	68bb      	ldr	r3, [r7, #8]
 800e3f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	6959      	ldr	r1, [r3, #20]
 800e3f6:	68bb      	ldr	r3, [r7, #8]
 800e3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	009b      	lsls	r3, r3, #2
 800e402:	4a1f      	ldr	r2, [pc, #124]	; (800e480 <xTaskPriorityInherit+0xc8>)
 800e404:	4413      	add	r3, r2
 800e406:	4299      	cmp	r1, r3
 800e408:	d122      	bne.n	800e450 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	3304      	adds	r3, #4
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe f83a 	bl	800c488 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e414:	4b19      	ldr	r3, [pc, #100]	; (800e47c <xTaskPriorityInherit+0xc4>)
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e422:	4b18      	ldr	r3, [pc, #96]	; (800e484 <xTaskPriorityInherit+0xcc>)
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	429a      	cmp	r2, r3
 800e428:	d903      	bls.n	800e432 <xTaskPriorityInherit+0x7a>
 800e42a:	68bb      	ldr	r3, [r7, #8]
 800e42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42e:	4a15      	ldr	r2, [pc, #84]	; (800e484 <xTaskPriorityInherit+0xcc>)
 800e430:	6013      	str	r3, [r2, #0]
 800e432:	68bb      	ldr	r3, [r7, #8]
 800e434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e436:	4613      	mov	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	009b      	lsls	r3, r3, #2
 800e43e:	4a10      	ldr	r2, [pc, #64]	; (800e480 <xTaskPriorityInherit+0xc8>)
 800e440:	441a      	add	r2, r3
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	3304      	adds	r3, #4
 800e446:	4619      	mov	r1, r3
 800e448:	4610      	mov	r0, r2
 800e44a:	f7fd ffc0 	bl	800c3ce <vListInsertEnd>
 800e44e:	e004      	b.n	800e45a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e450:	4b0a      	ldr	r3, [pc, #40]	; (800e47c <xTaskPriorityInherit+0xc4>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e45a:	2301      	movs	r3, #1
 800e45c:	60fb      	str	r3, [r7, #12]
 800e45e:	e008      	b.n	800e472 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e464:	4b05      	ldr	r3, [pc, #20]	; (800e47c <xTaskPriorityInherit+0xc4>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d201      	bcs.n	800e472 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e46e:	2301      	movs	r3, #1
 800e470:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e472:	68fb      	ldr	r3, [r7, #12]
	}
 800e474:	4618      	mov	r0, r3
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	2400084c 	.word	0x2400084c
 800e480:	24000850 	.word	0x24000850
 800e484:	24000d28 	.word	0x24000d28

0800e488 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b086      	sub	sp, #24
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e494:	2300      	movs	r3, #0
 800e496:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d056      	beq.n	800e54c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e49e:	4b2e      	ldr	r3, [pc, #184]	; (800e558 <xTaskPriorityDisinherit+0xd0>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	693a      	ldr	r2, [r7, #16]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d00a      	beq.n	800e4be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800e4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ac:	f383 8811 	msr	BASEPRI, r3
 800e4b0:	f3bf 8f6f 	isb	sy
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	60fb      	str	r3, [r7, #12]
}
 800e4ba:	bf00      	nop
 800e4bc:	e7fe      	b.n	800e4bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800e4be:	693b      	ldr	r3, [r7, #16]
 800e4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d10a      	bne.n	800e4dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800e4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4ca:	f383 8811 	msr	BASEPRI, r3
 800e4ce:	f3bf 8f6f 	isb	sy
 800e4d2:	f3bf 8f4f 	dsb	sy
 800e4d6:	60bb      	str	r3, [r7, #8]
}
 800e4d8:	bf00      	nop
 800e4da:	e7fe      	b.n	800e4da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800e4dc:	693b      	ldr	r3, [r7, #16]
 800e4de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4e0:	1e5a      	subs	r2, r3, #1
 800e4e2:	693b      	ldr	r3, [r7, #16]
 800e4e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e4ee:	429a      	cmp	r2, r3
 800e4f0:	d02c      	beq.n	800e54c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d128      	bne.n	800e54c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4fa:	693b      	ldr	r3, [r7, #16]
 800e4fc:	3304      	adds	r3, #4
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7fd ffc2 	bl	800c488 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e504:	693b      	ldr	r3, [r7, #16]
 800e506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e508:	693b      	ldr	r3, [r7, #16]
 800e50a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e50c:	693b      	ldr	r3, [r7, #16]
 800e50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e510:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e51c:	4b0f      	ldr	r3, [pc, #60]	; (800e55c <xTaskPriorityDisinherit+0xd4>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	429a      	cmp	r2, r3
 800e522:	d903      	bls.n	800e52c <xTaskPriorityDisinherit+0xa4>
 800e524:	693b      	ldr	r3, [r7, #16]
 800e526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e528:	4a0c      	ldr	r2, [pc, #48]	; (800e55c <xTaskPriorityDisinherit+0xd4>)
 800e52a:	6013      	str	r3, [r2, #0]
 800e52c:	693b      	ldr	r3, [r7, #16]
 800e52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e530:	4613      	mov	r3, r2
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	4413      	add	r3, r2
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	4a09      	ldr	r2, [pc, #36]	; (800e560 <xTaskPriorityDisinherit+0xd8>)
 800e53a:	441a      	add	r2, r3
 800e53c:	693b      	ldr	r3, [r7, #16]
 800e53e:	3304      	adds	r3, #4
 800e540:	4619      	mov	r1, r3
 800e542:	4610      	mov	r0, r2
 800e544:	f7fd ff43 	bl	800c3ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e548:	2301      	movs	r3, #1
 800e54a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e54c:	697b      	ldr	r3, [r7, #20]
	}
 800e54e:	4618      	mov	r0, r3
 800e550:	3718      	adds	r7, #24
 800e552:	46bd      	mov	sp, r7
 800e554:	bd80      	pop	{r7, pc}
 800e556:	bf00      	nop
 800e558:	2400084c 	.word	0x2400084c
 800e55c:	24000d28 	.word	0x24000d28
 800e560:	24000850 	.word	0x24000850

0800e564 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e564:	b580      	push	{r7, lr}
 800e566:	b088      	sub	sp, #32
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
 800e56c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e572:	2301      	movs	r3, #1
 800e574:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d06a      	beq.n	800e652 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e580:	2b00      	cmp	r3, #0
 800e582:	d10a      	bne.n	800e59a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800e584:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e588:	f383 8811 	msr	BASEPRI, r3
 800e58c:	f3bf 8f6f 	isb	sy
 800e590:	f3bf 8f4f 	dsb	sy
 800e594:	60fb      	str	r3, [r7, #12]
}
 800e596:	bf00      	nop
 800e598:	e7fe      	b.n	800e598 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e59e:	683a      	ldr	r2, [r7, #0]
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d902      	bls.n	800e5aa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	61fb      	str	r3, [r7, #28]
 800e5a8:	e002      	b.n	800e5b0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e5aa:	69bb      	ldr	r3, [r7, #24]
 800e5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e5ae:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e5b0:	69bb      	ldr	r3, [r7, #24]
 800e5b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b4:	69fa      	ldr	r2, [r7, #28]
 800e5b6:	429a      	cmp	r2, r3
 800e5b8:	d04b      	beq.n	800e652 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e5ba:	69bb      	ldr	r3, [r7, #24]
 800e5bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5be:	697a      	ldr	r2, [r7, #20]
 800e5c0:	429a      	cmp	r2, r3
 800e5c2:	d146      	bne.n	800e652 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e5c4:	4b25      	ldr	r3, [pc, #148]	; (800e65c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	69ba      	ldr	r2, [r7, #24]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d10a      	bne.n	800e5e4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800e5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d2:	f383 8811 	msr	BASEPRI, r3
 800e5d6:	f3bf 8f6f 	isb	sy
 800e5da:	f3bf 8f4f 	dsb	sy
 800e5de:	60bb      	str	r3, [r7, #8]
}
 800e5e0:	bf00      	nop
 800e5e2:	e7fe      	b.n	800e5e2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e5e4:	69bb      	ldr	r3, [r7, #24]
 800e5e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e5ea:	69bb      	ldr	r3, [r7, #24]
 800e5ec:	69fa      	ldr	r2, [r7, #28]
 800e5ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5f0:	69bb      	ldr	r3, [r7, #24]
 800e5f2:	699b      	ldr	r3, [r3, #24]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	db04      	blt.n	800e602 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5f8:	69fb      	ldr	r3, [r7, #28]
 800e5fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e5fe:	69bb      	ldr	r3, [r7, #24]
 800e600:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e602:	69bb      	ldr	r3, [r7, #24]
 800e604:	6959      	ldr	r1, [r3, #20]
 800e606:	693a      	ldr	r2, [r7, #16]
 800e608:	4613      	mov	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4413      	add	r3, r2
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	4a13      	ldr	r2, [pc, #76]	; (800e660 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e612:	4413      	add	r3, r2
 800e614:	4299      	cmp	r1, r3
 800e616:	d11c      	bne.n	800e652 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e618:	69bb      	ldr	r3, [r7, #24]
 800e61a:	3304      	adds	r3, #4
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7fd ff33 	bl	800c488 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e622:	69bb      	ldr	r3, [r7, #24]
 800e624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e626:	4b0f      	ldr	r3, [pc, #60]	; (800e664 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d903      	bls.n	800e636 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e632:	4a0c      	ldr	r2, [pc, #48]	; (800e664 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e634:	6013      	str	r3, [r2, #0]
 800e636:	69bb      	ldr	r3, [r7, #24]
 800e638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63a:	4613      	mov	r3, r2
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4413      	add	r3, r2
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	4a07      	ldr	r2, [pc, #28]	; (800e660 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e644:	441a      	add	r2, r3
 800e646:	69bb      	ldr	r3, [r7, #24]
 800e648:	3304      	adds	r3, #4
 800e64a:	4619      	mov	r1, r3
 800e64c:	4610      	mov	r0, r2
 800e64e:	f7fd febe 	bl	800c3ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e652:	bf00      	nop
 800e654:	3720      	adds	r7, #32
 800e656:	46bd      	mov	sp, r7
 800e658:	bd80      	pop	{r7, pc}
 800e65a:	bf00      	nop
 800e65c:	2400084c 	.word	0x2400084c
 800e660:	24000850 	.word	0x24000850
 800e664:	24000d28 	.word	0x24000d28

0800e668 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e668:	b480      	push	{r7}
 800e66a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e66c:	4b07      	ldr	r3, [pc, #28]	; (800e68c <pvTaskIncrementMutexHeldCount+0x24>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d004      	beq.n	800e67e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e674:	4b05      	ldr	r3, [pc, #20]	; (800e68c <pvTaskIncrementMutexHeldCount+0x24>)
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e67a:	3201      	adds	r2, #1
 800e67c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800e67e:	4b03      	ldr	r3, [pc, #12]	; (800e68c <pvTaskIncrementMutexHeldCount+0x24>)
 800e680:	681b      	ldr	r3, [r3, #0]
	}
 800e682:	4618      	mov	r0, r3
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr
 800e68c:	2400084c 	.word	0x2400084c

0800e690 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800e690:	b580      	push	{r7, lr}
 800e692:	b086      	sub	sp, #24
 800e694:	af00      	add	r7, sp, #0
 800e696:	60f8      	str	r0, [r7, #12]
 800e698:	60b9      	str	r1, [r7, #8]
 800e69a:	607a      	str	r2, [r7, #4]
 800e69c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800e69e:	f000 fde1 	bl	800f264 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e6a2:	4b29      	ldr	r3, [pc, #164]	; (800e748 <xTaskNotifyWait+0xb8>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d01c      	beq.n	800e6ea <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800e6b0:	4b25      	ldr	r3, [pc, #148]	; (800e748 <xTaskNotifyWait+0xb8>)
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e6b8:	68fa      	ldr	r2, [r7, #12]
 800e6ba:	43d2      	mvns	r2, r2
 800e6bc:	400a      	ands	r2, r1
 800e6be:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800e6c2:	4b21      	ldr	r3, [pc, #132]	; (800e748 <xTaskNotifyWait+0xb8>)
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d00b      	beq.n	800e6ea <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6d2:	2101      	movs	r1, #1
 800e6d4:	6838      	ldr	r0, [r7, #0]
 800e6d6:	f000 f8f9 	bl	800e8cc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800e6da:	4b1c      	ldr	r3, [pc, #112]	; (800e74c <xTaskNotifyWait+0xbc>)
 800e6dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6e0:	601a      	str	r2, [r3, #0]
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e6ea:	f000 fdeb 	bl	800f2c4 <vPortExitCritical>

		taskENTER_CRITICAL();
 800e6ee:	f000 fdb9 	bl	800f264 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d005      	beq.n	800e704 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800e6f8:	4b13      	ldr	r3, [pc, #76]	; (800e748 <xTaskNotifyWait+0xb8>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800e704:	4b10      	ldr	r3, [pc, #64]	; (800e748 <xTaskNotifyWait+0xb8>)
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e70c:	b2db      	uxtb	r3, r3
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d002      	beq.n	800e718 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800e712:	2300      	movs	r3, #0
 800e714:	617b      	str	r3, [r7, #20]
 800e716:	e00a      	b.n	800e72e <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800e718:	4b0b      	ldr	r3, [pc, #44]	; (800e748 <xTaskNotifyWait+0xb8>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800e720:	68ba      	ldr	r2, [r7, #8]
 800e722:	43d2      	mvns	r2, r2
 800e724:	400a      	ands	r2, r1
 800e726:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 800e72a:	2301      	movs	r3, #1
 800e72c:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e72e:	4b06      	ldr	r3, [pc, #24]	; (800e748 <xTaskNotifyWait+0xb8>)
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	2200      	movs	r2, #0
 800e734:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 800e738:	f000 fdc4 	bl	800f2c4 <vPortExitCritical>

		return xReturn;
 800e73c:	697b      	ldr	r3, [r7, #20]
	}
 800e73e:	4618      	mov	r0, r3
 800e740:	3718      	adds	r7, #24
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	2400084c 	.word	0x2400084c
 800e74c:	e000ed04 	.word	0xe000ed04

0800e750 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800e750:	b580      	push	{r7, lr}
 800e752:	b08a      	sub	sp, #40	; 0x28
 800e754:	af00      	add	r7, sp, #0
 800e756:	60f8      	str	r0, [r7, #12]
 800e758:	60b9      	str	r1, [r7, #8]
 800e75a:	603b      	str	r3, [r7, #0]
 800e75c:	4613      	mov	r3, r2
 800e75e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800e760:	2301      	movs	r3, #1
 800e762:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d10a      	bne.n	800e780 <xTaskGenericNotify+0x30>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	61bb      	str	r3, [r7, #24]
}
 800e77c:	bf00      	nop
 800e77e:	e7fe      	b.n	800e77e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800e784:	f000 fd6e 	bl	800f264 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d004      	beq.n	800e798 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800e78e:	6a3b      	ldr	r3, [r7, #32]
 800e790:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800e798:	6a3b      	ldr	r3, [r7, #32]
 800e79a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800e79e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800e7a0:	6a3b      	ldr	r3, [r7, #32]
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800e7a8:	79fb      	ldrb	r3, [r7, #7]
 800e7aa:	2b04      	cmp	r3, #4
 800e7ac:	d82d      	bhi.n	800e80a <xTaskGenericNotify+0xba>
 800e7ae:	a201      	add	r2, pc, #4	; (adr r2, 800e7b4 <xTaskGenericNotify+0x64>)
 800e7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7b4:	0800e82d 	.word	0x0800e82d
 800e7b8:	0800e7c9 	.word	0x0800e7c9
 800e7bc:	0800e7db 	.word	0x0800e7db
 800e7c0:	0800e7eb 	.word	0x0800e7eb
 800e7c4:	0800e7f5 	.word	0x0800e7f5
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800e7c8:	6a3b      	ldr	r3, [r7, #32]
 800e7ca:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	431a      	orrs	r2, r3
 800e7d2:	6a3b      	ldr	r3, [r7, #32]
 800e7d4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800e7d8:	e02b      	b.n	800e832 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800e7da:	6a3b      	ldr	r3, [r7, #32]
 800e7dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e7e0:	1c5a      	adds	r2, r3, #1
 800e7e2:	6a3b      	ldr	r3, [r7, #32]
 800e7e4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800e7e8:	e023      	b.n	800e832 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800e7ea:	6a3b      	ldr	r3, [r7, #32]
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800e7f2:	e01e      	b.n	800e832 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800e7f4:	7ffb      	ldrb	r3, [r7, #31]
 800e7f6:	2b02      	cmp	r3, #2
 800e7f8:	d004      	beq.n	800e804 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800e7fa:	6a3b      	ldr	r3, [r7, #32]
 800e7fc:	68ba      	ldr	r2, [r7, #8]
 800e7fe:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800e802:	e016      	b.n	800e832 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800e804:	2300      	movs	r3, #0
 800e806:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800e808:	e013      	b.n	800e832 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800e80a:	6a3b      	ldr	r3, [r7, #32]
 800e80c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e810:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e814:	d00c      	beq.n	800e830 <xTaskGenericNotify+0xe0>
	__asm volatile
 800e816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e81a:	f383 8811 	msr	BASEPRI, r3
 800e81e:	f3bf 8f6f 	isb	sy
 800e822:	f3bf 8f4f 	dsb	sy
 800e826:	617b      	str	r3, [r7, #20]
}
 800e828:	bf00      	nop
 800e82a:	e7fe      	b.n	800e82a <xTaskGenericNotify+0xda>
					break;
 800e82c:	bf00      	nop
 800e82e:	e000      	b.n	800e832 <xTaskGenericNotify+0xe2>

					break;
 800e830:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800e832:	7ffb      	ldrb	r3, [r7, #31]
 800e834:	2b01      	cmp	r3, #1
 800e836:	d13a      	bne.n	800e8ae <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e838:	6a3b      	ldr	r3, [r7, #32]
 800e83a:	3304      	adds	r3, #4
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7fd fe23 	bl	800c488 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800e842:	6a3b      	ldr	r3, [r7, #32]
 800e844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e846:	4b1d      	ldr	r3, [pc, #116]	; (800e8bc <xTaskGenericNotify+0x16c>)
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d903      	bls.n	800e856 <xTaskGenericNotify+0x106>
 800e84e:	6a3b      	ldr	r3, [r7, #32]
 800e850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e852:	4a1a      	ldr	r2, [pc, #104]	; (800e8bc <xTaskGenericNotify+0x16c>)
 800e854:	6013      	str	r3, [r2, #0]
 800e856:	6a3b      	ldr	r3, [r7, #32]
 800e858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e85a:	4613      	mov	r3, r2
 800e85c:	009b      	lsls	r3, r3, #2
 800e85e:	4413      	add	r3, r2
 800e860:	009b      	lsls	r3, r3, #2
 800e862:	4a17      	ldr	r2, [pc, #92]	; (800e8c0 <xTaskGenericNotify+0x170>)
 800e864:	441a      	add	r2, r3
 800e866:	6a3b      	ldr	r3, [r7, #32]
 800e868:	3304      	adds	r3, #4
 800e86a:	4619      	mov	r1, r3
 800e86c:	4610      	mov	r0, r2
 800e86e:	f7fd fdae 	bl	800c3ce <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800e872:	6a3b      	ldr	r3, [r7, #32]
 800e874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00a      	beq.n	800e890 <xTaskGenericNotify+0x140>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	613b      	str	r3, [r7, #16]
}
 800e88c:	bf00      	nop
 800e88e:	e7fe      	b.n	800e88e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e894:	4b0b      	ldr	r3, [pc, #44]	; (800e8c4 <xTaskGenericNotify+0x174>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e89a:	429a      	cmp	r2, r3
 800e89c:	d907      	bls.n	800e8ae <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800e89e:	4b0a      	ldr	r3, [pc, #40]	; (800e8c8 <xTaskGenericNotify+0x178>)
 800e8a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e8a4:	601a      	str	r2, [r3, #0]
 800e8a6:	f3bf 8f4f 	dsb	sy
 800e8aa:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800e8ae:	f000 fd09 	bl	800f2c4 <vPortExitCritical>

		return xReturn;
 800e8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	3728      	adds	r7, #40	; 0x28
 800e8b8:	46bd      	mov	sp, r7
 800e8ba:	bd80      	pop	{r7, pc}
 800e8bc:	24000d28 	.word	0x24000d28
 800e8c0:	24000850 	.word	0x24000850
 800e8c4:	2400084c 	.word	0x2400084c
 800e8c8:	e000ed04 	.word	0xe000ed04

0800e8cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
 800e8d2:	6078      	str	r0, [r7, #4]
 800e8d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e8d6:	4b21      	ldr	r3, [pc, #132]	; (800e95c <prvAddCurrentTaskToDelayedList+0x90>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8dc:	4b20      	ldr	r3, [pc, #128]	; (800e960 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	3304      	adds	r3, #4
 800e8e2:	4618      	mov	r0, r3
 800e8e4:	f7fd fdd0 	bl	800c488 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ee:	d10a      	bne.n	800e906 <prvAddCurrentTaskToDelayedList+0x3a>
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d007      	beq.n	800e906 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8f6:	4b1a      	ldr	r3, [pc, #104]	; (800e960 <prvAddCurrentTaskToDelayedList+0x94>)
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	3304      	adds	r3, #4
 800e8fc:	4619      	mov	r1, r3
 800e8fe:	4819      	ldr	r0, [pc, #100]	; (800e964 <prvAddCurrentTaskToDelayedList+0x98>)
 800e900:	f7fd fd65 	bl	800c3ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e904:	e026      	b.n	800e954 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e906:	68fa      	ldr	r2, [r7, #12]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4413      	add	r3, r2
 800e90c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e90e:	4b14      	ldr	r3, [pc, #80]	; (800e960 <prvAddCurrentTaskToDelayedList+0x94>)
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	68ba      	ldr	r2, [r7, #8]
 800e914:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e916:	68ba      	ldr	r2, [r7, #8]
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	429a      	cmp	r2, r3
 800e91c:	d209      	bcs.n	800e932 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e91e:	4b12      	ldr	r3, [pc, #72]	; (800e968 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e920:	681a      	ldr	r2, [r3, #0]
 800e922:	4b0f      	ldr	r3, [pc, #60]	; (800e960 <prvAddCurrentTaskToDelayedList+0x94>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	3304      	adds	r3, #4
 800e928:	4619      	mov	r1, r3
 800e92a:	4610      	mov	r0, r2
 800e92c:	f7fd fd73 	bl	800c416 <vListInsert>
}
 800e930:	e010      	b.n	800e954 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e932:	4b0e      	ldr	r3, [pc, #56]	; (800e96c <prvAddCurrentTaskToDelayedList+0xa0>)
 800e934:	681a      	ldr	r2, [r3, #0]
 800e936:	4b0a      	ldr	r3, [pc, #40]	; (800e960 <prvAddCurrentTaskToDelayedList+0x94>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	3304      	adds	r3, #4
 800e93c:	4619      	mov	r1, r3
 800e93e:	4610      	mov	r0, r2
 800e940:	f7fd fd69 	bl	800c416 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e944:	4b0a      	ldr	r3, [pc, #40]	; (800e970 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	68ba      	ldr	r2, [r7, #8]
 800e94a:	429a      	cmp	r2, r3
 800e94c:	d202      	bcs.n	800e954 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e94e:	4a08      	ldr	r2, [pc, #32]	; (800e970 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	6013      	str	r3, [r2, #0]
}
 800e954:	bf00      	nop
 800e956:	3710      	adds	r7, #16
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}
 800e95c:	24000d24 	.word	0x24000d24
 800e960:	2400084c 	.word	0x2400084c
 800e964:	24000d0c 	.word	0x24000d0c
 800e968:	24000cdc 	.word	0x24000cdc
 800e96c:	24000cd8 	.word	0x24000cd8
 800e970:	24000d40 	.word	0x24000d40

0800e974 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e974:	b580      	push	{r7, lr}
 800e976:	b08a      	sub	sp, #40	; 0x28
 800e978:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e97a:	2300      	movs	r3, #0
 800e97c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e97e:	f000 fb07 	bl	800ef90 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e982:	4b1c      	ldr	r3, [pc, #112]	; (800e9f4 <xTimerCreateTimerTask+0x80>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d021      	beq.n	800e9ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e98a:	2300      	movs	r3, #0
 800e98c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e98e:	2300      	movs	r3, #0
 800e990:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e992:	1d3a      	adds	r2, r7, #4
 800e994:	f107 0108 	add.w	r1, r7, #8
 800e998:	f107 030c 	add.w	r3, r7, #12
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7fd fccf 	bl	800c340 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e9a2:	6879      	ldr	r1, [r7, #4]
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	68fa      	ldr	r2, [r7, #12]
 800e9a8:	9202      	str	r2, [sp, #8]
 800e9aa:	9301      	str	r3, [sp, #4]
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	9300      	str	r3, [sp, #0]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	460a      	mov	r2, r1
 800e9b4:	4910      	ldr	r1, [pc, #64]	; (800e9f8 <xTimerCreateTimerTask+0x84>)
 800e9b6:	4811      	ldr	r0, [pc, #68]	; (800e9fc <xTimerCreateTimerTask+0x88>)
 800e9b8:	f7fe fe54 	bl	800d664 <xTaskCreateStatic>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	4a10      	ldr	r2, [pc, #64]	; (800ea00 <xTimerCreateTimerTask+0x8c>)
 800e9c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ea00 <xTimerCreateTimerTask+0x8c>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d001      	beq.n	800e9ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e9ce:	697b      	ldr	r3, [r7, #20]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d10a      	bne.n	800e9ea <xTimerCreateTimerTask+0x76>
	__asm volatile
 800e9d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9d8:	f383 8811 	msr	BASEPRI, r3
 800e9dc:	f3bf 8f6f 	isb	sy
 800e9e0:	f3bf 8f4f 	dsb	sy
 800e9e4:	613b      	str	r3, [r7, #16]
}
 800e9e6:	bf00      	nop
 800e9e8:	e7fe      	b.n	800e9e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e9ea:	697b      	ldr	r3, [r7, #20]
}
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	3718      	adds	r7, #24
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	24000d84 	.word	0x24000d84
 800e9f8:	0801be60 	.word	0x0801be60
 800e9fc:	0800eb39 	.word	0x0800eb39
 800ea00:	24000d88 	.word	0x24000d88

0800ea04 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b08a      	sub	sp, #40	; 0x28
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
 800ea10:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea12:	2300      	movs	r3, #0
 800ea14:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d10a      	bne.n	800ea32 <xTimerGenericCommand+0x2e>
	__asm volatile
 800ea1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea20:	f383 8811 	msr	BASEPRI, r3
 800ea24:	f3bf 8f6f 	isb	sy
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	623b      	str	r3, [r7, #32]
}
 800ea2e:	bf00      	nop
 800ea30:	e7fe      	b.n	800ea30 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800ea32:	4b1a      	ldr	r3, [pc, #104]	; (800ea9c <xTimerGenericCommand+0x98>)
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d02a      	beq.n	800ea90 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	2b05      	cmp	r3, #5
 800ea4a:	dc18      	bgt.n	800ea7e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800ea4c:	f7ff fc96 	bl	800e37c <xTaskGetSchedulerState>
 800ea50:	4603      	mov	r3, r0
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d109      	bne.n	800ea6a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ea56:	4b11      	ldr	r3, [pc, #68]	; (800ea9c <xTimerGenericCommand+0x98>)
 800ea58:	6818      	ldr	r0, [r3, #0]
 800ea5a:	f107 0110 	add.w	r1, r7, #16
 800ea5e:	2300      	movs	r3, #0
 800ea60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea62:	f7fd ff99 	bl	800c998 <xQueueGenericSend>
 800ea66:	6278      	str	r0, [r7, #36]	; 0x24
 800ea68:	e012      	b.n	800ea90 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ea6a:	4b0c      	ldr	r3, [pc, #48]	; (800ea9c <xTimerGenericCommand+0x98>)
 800ea6c:	6818      	ldr	r0, [r3, #0]
 800ea6e:	f107 0110 	add.w	r1, r7, #16
 800ea72:	2300      	movs	r3, #0
 800ea74:	2200      	movs	r2, #0
 800ea76:	f7fd ff8f 	bl	800c998 <xQueueGenericSend>
 800ea7a:	6278      	str	r0, [r7, #36]	; 0x24
 800ea7c:	e008      	b.n	800ea90 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ea7e:	4b07      	ldr	r3, [pc, #28]	; (800ea9c <xTimerGenericCommand+0x98>)
 800ea80:	6818      	ldr	r0, [r3, #0]
 800ea82:	f107 0110 	add.w	r1, r7, #16
 800ea86:	2300      	movs	r3, #0
 800ea88:	683a      	ldr	r2, [r7, #0]
 800ea8a:	f7fe f883 	bl	800cb94 <xQueueGenericSendFromISR>
 800ea8e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ea90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3728      	adds	r7, #40	; 0x28
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	24000d84 	.word	0x24000d84

0800eaa0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b088      	sub	sp, #32
 800eaa4:	af02      	add	r7, sp, #8
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eaaa:	4b22      	ldr	r3, [pc, #136]	; (800eb34 <prvProcessExpiredTimer+0x94>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	68db      	ldr	r3, [r3, #12]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eab4:	697b      	ldr	r3, [r7, #20]
 800eab6:	3304      	adds	r3, #4
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7fd fce5 	bl	800c488 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eac4:	f003 0304 	and.w	r3, r3, #4
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d022      	beq.n	800eb12 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	699a      	ldr	r2, [r3, #24]
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	18d1      	adds	r1, r2, r3
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	683a      	ldr	r2, [r7, #0]
 800ead8:	6978      	ldr	r0, [r7, #20]
 800eada:	f000 f8d1 	bl	800ec80 <prvInsertTimerInActiveList>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d01f      	beq.n	800eb24 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eae4:	2300      	movs	r3, #0
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	2300      	movs	r3, #0
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	2100      	movs	r1, #0
 800eaee:	6978      	ldr	r0, [r7, #20]
 800eaf0:	f7ff ff88 	bl	800ea04 <xTimerGenericCommand>
 800eaf4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eaf6:	693b      	ldr	r3, [r7, #16]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d113      	bne.n	800eb24 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800eafc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb00:	f383 8811 	msr	BASEPRI, r3
 800eb04:	f3bf 8f6f 	isb	sy
 800eb08:	f3bf 8f4f 	dsb	sy
 800eb0c:	60fb      	str	r3, [r7, #12]
}
 800eb0e:	bf00      	nop
 800eb10:	e7fe      	b.n	800eb10 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb12:	697b      	ldr	r3, [r7, #20]
 800eb14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb18:	f023 0301 	bic.w	r3, r3, #1
 800eb1c:	b2da      	uxtb	r2, r3
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	6a1b      	ldr	r3, [r3, #32]
 800eb28:	6978      	ldr	r0, [r7, #20]
 800eb2a:	4798      	blx	r3
}
 800eb2c:	bf00      	nop
 800eb2e:	3718      	adds	r7, #24
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	24000d7c 	.word	0x24000d7c

0800eb38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb40:	f107 0308 	add.w	r3, r7, #8
 800eb44:	4618      	mov	r0, r3
 800eb46:	f000 f857 	bl	800ebf8 <prvGetNextExpireTime>
 800eb4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800eb4c:	68bb      	ldr	r3, [r7, #8]
 800eb4e:	4619      	mov	r1, r3
 800eb50:	68f8      	ldr	r0, [r7, #12]
 800eb52:	f000 f803 	bl	800eb5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800eb56:	f000 f8d5 	bl	800ed04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800eb5a:	e7f1      	b.n	800eb40 <prvTimerTask+0x8>

0800eb5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b084      	sub	sp, #16
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	6078      	str	r0, [r7, #4]
 800eb64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800eb66:	f7fe ffdf 	bl	800db28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800eb6a:	f107 0308 	add.w	r3, r7, #8
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f000 f866 	bl	800ec40 <prvSampleTimeNow>
 800eb74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800eb76:	68bb      	ldr	r3, [r7, #8]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d130      	bne.n	800ebde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d10a      	bne.n	800eb98 <prvProcessTimerOrBlockTask+0x3c>
 800eb82:	687a      	ldr	r2, [r7, #4]
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	429a      	cmp	r2, r3
 800eb88:	d806      	bhi.n	800eb98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800eb8a:	f7fe ffdb 	bl	800db44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800eb8e:	68f9      	ldr	r1, [r7, #12]
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f7ff ff85 	bl	800eaa0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800eb96:	e024      	b.n	800ebe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800eb98:	683b      	ldr	r3, [r7, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d008      	beq.n	800ebb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800eb9e:	4b13      	ldr	r3, [pc, #76]	; (800ebec <prvProcessTimerOrBlockTask+0x90>)
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d101      	bne.n	800ebac <prvProcessTimerOrBlockTask+0x50>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e000      	b.n	800ebae <prvProcessTimerOrBlockTask+0x52>
 800ebac:	2300      	movs	r3, #0
 800ebae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ebb0:	4b0f      	ldr	r3, [pc, #60]	; (800ebf0 <prvProcessTimerOrBlockTask+0x94>)
 800ebb2:	6818      	ldr	r0, [r3, #0]
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	1ad3      	subs	r3, r2, r3
 800ebba:	683a      	ldr	r2, [r7, #0]
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	f7fe fd1d 	bl	800d5fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ebc2:	f7fe ffbf 	bl	800db44 <xTaskResumeAll>
 800ebc6:	4603      	mov	r3, r0
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d10a      	bne.n	800ebe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ebcc:	4b09      	ldr	r3, [pc, #36]	; (800ebf4 <prvProcessTimerOrBlockTask+0x98>)
 800ebce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ebd2:	601a      	str	r2, [r3, #0]
 800ebd4:	f3bf 8f4f 	dsb	sy
 800ebd8:	f3bf 8f6f 	isb	sy
}
 800ebdc:	e001      	b.n	800ebe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ebde:	f7fe ffb1 	bl	800db44 <xTaskResumeAll>
}
 800ebe2:	bf00      	nop
 800ebe4:	3710      	adds	r7, #16
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}
 800ebea:	bf00      	nop
 800ebec:	24000d80 	.word	0x24000d80
 800ebf0:	24000d84 	.word	0x24000d84
 800ebf4:	e000ed04 	.word	0xe000ed04

0800ebf8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec00:	4b0e      	ldr	r3, [pc, #56]	; (800ec3c <prvGetNextExpireTime+0x44>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d101      	bne.n	800ec0e <prvGetNextExpireTime+0x16>
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	e000      	b.n	800ec10 <prvGetNextExpireTime+0x18>
 800ec0e:	2200      	movs	r2, #0
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d105      	bne.n	800ec28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec1c:	4b07      	ldr	r3, [pc, #28]	; (800ec3c <prvGetNextExpireTime+0x44>)
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	68db      	ldr	r3, [r3, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	60fb      	str	r3, [r7, #12]
 800ec26:	e001      	b.n	800ec2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ec2c:	68fb      	ldr	r3, [r7, #12]
}
 800ec2e:	4618      	mov	r0, r3
 800ec30:	3714      	adds	r7, #20
 800ec32:	46bd      	mov	sp, r7
 800ec34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec38:	4770      	bx	lr
 800ec3a:	bf00      	nop
 800ec3c:	24000d7c 	.word	0x24000d7c

0800ec40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b084      	sub	sp, #16
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ec48:	f7ff f81a 	bl	800dc80 <xTaskGetTickCount>
 800ec4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ec4e:	4b0b      	ldr	r3, [pc, #44]	; (800ec7c <prvSampleTimeNow+0x3c>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	429a      	cmp	r2, r3
 800ec56:	d205      	bcs.n	800ec64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ec58:	f000 f936 	bl	800eec8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	e002      	b.n	800ec6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2200      	movs	r2, #0
 800ec68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ec6a:	4a04      	ldr	r2, [pc, #16]	; (800ec7c <prvSampleTimeNow+0x3c>)
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ec70:	68fb      	ldr	r3, [r7, #12]
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3710      	adds	r7, #16
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	24000d8c 	.word	0x24000d8c

0800ec80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
 800ec8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ec8e:	2300      	movs	r3, #0
 800ec90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	68fa      	ldr	r2, [r7, #12]
 800ec9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ec9e:	68ba      	ldr	r2, [r7, #8]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d812      	bhi.n	800eccc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eca6:	687a      	ldr	r2, [r7, #4]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	1ad2      	subs	r2, r2, r3
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d302      	bcc.n	800ecba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	617b      	str	r3, [r7, #20]
 800ecb8:	e01b      	b.n	800ecf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ecba:	4b10      	ldr	r3, [pc, #64]	; (800ecfc <prvInsertTimerInActiveList+0x7c>)
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	3304      	adds	r3, #4
 800ecc2:	4619      	mov	r1, r3
 800ecc4:	4610      	mov	r0, r2
 800ecc6:	f7fd fba6 	bl	800c416 <vListInsert>
 800ecca:	e012      	b.n	800ecf2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800eccc:	687a      	ldr	r2, [r7, #4]
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d206      	bcs.n	800ece2 <prvInsertTimerInActiveList+0x62>
 800ecd4:	68ba      	ldr	r2, [r7, #8]
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d302      	bcc.n	800ece2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ecdc:	2301      	movs	r3, #1
 800ecde:	617b      	str	r3, [r7, #20]
 800ece0:	e007      	b.n	800ecf2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ece2:	4b07      	ldr	r3, [pc, #28]	; (800ed00 <prvInsertTimerInActiveList+0x80>)
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	3304      	adds	r3, #4
 800ecea:	4619      	mov	r1, r3
 800ecec:	4610      	mov	r0, r2
 800ecee:	f7fd fb92 	bl	800c416 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ecf2:	697b      	ldr	r3, [r7, #20]
}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	3718      	adds	r7, #24
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	bd80      	pop	{r7, pc}
 800ecfc:	24000d80 	.word	0x24000d80
 800ed00:	24000d7c 	.word	0x24000d7c

0800ed04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed04:	b580      	push	{r7, lr}
 800ed06:	b08e      	sub	sp, #56	; 0x38
 800ed08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed0a:	e0ca      	b.n	800eea2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	da18      	bge.n	800ed44 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed12:	1d3b      	adds	r3, r7, #4
 800ed14:	3304      	adds	r3, #4
 800ed16:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d10a      	bne.n	800ed34 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800ed1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed22:	f383 8811 	msr	BASEPRI, r3
 800ed26:	f3bf 8f6f 	isb	sy
 800ed2a:	f3bf 8f4f 	dsb	sy
 800ed2e:	61fb      	str	r3, [r7, #28]
}
 800ed30:	bf00      	nop
 800ed32:	e7fe      	b.n	800ed32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ed34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed3a:	6850      	ldr	r0, [r2, #4]
 800ed3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed3e:	6892      	ldr	r2, [r2, #8]
 800ed40:	4611      	mov	r1, r2
 800ed42:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	f2c0 80aa 	blt.w	800eea0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ed50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed52:	695b      	ldr	r3, [r3, #20]
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d004      	beq.n	800ed62 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ed58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	f7fd fb93 	bl	800c488 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ed62:	463b      	mov	r3, r7
 800ed64:	4618      	mov	r0, r3
 800ed66:	f7ff ff6b 	bl	800ec40 <prvSampleTimeNow>
 800ed6a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2b09      	cmp	r3, #9
 800ed70:	f200 8097 	bhi.w	800eea2 <prvProcessReceivedCommands+0x19e>
 800ed74:	a201      	add	r2, pc, #4	; (adr r2, 800ed7c <prvProcessReceivedCommands+0x78>)
 800ed76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed7a:	bf00      	nop
 800ed7c:	0800eda5 	.word	0x0800eda5
 800ed80:	0800eda5 	.word	0x0800eda5
 800ed84:	0800eda5 	.word	0x0800eda5
 800ed88:	0800ee19 	.word	0x0800ee19
 800ed8c:	0800ee2d 	.word	0x0800ee2d
 800ed90:	0800ee77 	.word	0x0800ee77
 800ed94:	0800eda5 	.word	0x0800eda5
 800ed98:	0800eda5 	.word	0x0800eda5
 800ed9c:	0800ee19 	.word	0x0800ee19
 800eda0:	0800ee2d 	.word	0x0800ee2d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eda4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800edaa:	f043 0301 	orr.w	r3, r3, #1
 800edae:	b2da      	uxtb	r2, r3
 800edb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800edb6:	68ba      	ldr	r2, [r7, #8]
 800edb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edba:	699b      	ldr	r3, [r3, #24]
 800edbc:	18d1      	adds	r1, r2, r3
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edc2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edc4:	f7ff ff5c 	bl	800ec80 <prvInsertTimerInActiveList>
 800edc8:	4603      	mov	r3, r0
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d069      	beq.n	800eea2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800edce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd0:	6a1b      	ldr	r3, [r3, #32]
 800edd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edd4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800edd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edd8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eddc:	f003 0304 	and.w	r3, r3, #4
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d05e      	beq.n	800eea2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ede4:	68ba      	ldr	r2, [r7, #8]
 800ede6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ede8:	699b      	ldr	r3, [r3, #24]
 800edea:	441a      	add	r2, r3
 800edec:	2300      	movs	r3, #0
 800edee:	9300      	str	r3, [sp, #0]
 800edf0:	2300      	movs	r3, #0
 800edf2:	2100      	movs	r1, #0
 800edf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edf6:	f7ff fe05 	bl	800ea04 <xTimerGenericCommand>
 800edfa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800edfc:	6a3b      	ldr	r3, [r7, #32]
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d14f      	bne.n	800eea2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ee02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee06:	f383 8811 	msr	BASEPRI, r3
 800ee0a:	f3bf 8f6f 	isb	sy
 800ee0e:	f3bf 8f4f 	dsb	sy
 800ee12:	61bb      	str	r3, [r7, #24]
}
 800ee14:	bf00      	nop
 800ee16:	e7fe      	b.n	800ee16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee1e:	f023 0301 	bic.w	r3, r3, #1
 800ee22:	b2da      	uxtb	r2, r3
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ee2a:	e03a      	b.n	800eea2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee32:	f043 0301 	orr.w	r3, r3, #1
 800ee36:	b2da      	uxtb	r2, r3
 800ee38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ee3e:	68ba      	ldr	r2, [r7, #8]
 800ee40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee42:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ee44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee46:	699b      	ldr	r3, [r3, #24]
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d10a      	bne.n	800ee62 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ee4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee50:	f383 8811 	msr	BASEPRI, r3
 800ee54:	f3bf 8f6f 	isb	sy
 800ee58:	f3bf 8f4f 	dsb	sy
 800ee5c:	617b      	str	r3, [r7, #20]
}
 800ee5e:	bf00      	nop
 800ee60:	e7fe      	b.n	800ee60 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ee62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee64:	699a      	ldr	r2, [r3, #24]
 800ee66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee68:	18d1      	adds	r1, r2, r3
 800ee6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee70:	f7ff ff06 	bl	800ec80 <prvInsertTimerInActiveList>
					break;
 800ee74:	e015      	b.n	800eea2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ee76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee7c:	f003 0302 	and.w	r3, r3, #2
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d103      	bne.n	800ee8c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ee84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee86:	f000 fbdb 	bl	800f640 <vPortFree>
 800ee8a:	e00a      	b.n	800eea2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee92:	f023 0301 	bic.w	r3, r3, #1
 800ee96:	b2da      	uxtb	r2, r3
 800ee98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee9a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ee9e:	e000      	b.n	800eea2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800eea0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800eea2:	4b08      	ldr	r3, [pc, #32]	; (800eec4 <prvProcessReceivedCommands+0x1c0>)
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	1d39      	adds	r1, r7, #4
 800eea8:	2200      	movs	r2, #0
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fd ff9a 	bl	800cde4 <xQueueReceive>
 800eeb0:	4603      	mov	r3, r0
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	f47f af2a 	bne.w	800ed0c <prvProcessReceivedCommands+0x8>
	}
}
 800eeb8:	bf00      	nop
 800eeba:	bf00      	nop
 800eebc:	3730      	adds	r7, #48	; 0x30
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}
 800eec2:	bf00      	nop
 800eec4:	24000d84 	.word	0x24000d84

0800eec8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800eec8:	b580      	push	{r7, lr}
 800eeca:	b088      	sub	sp, #32
 800eecc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800eece:	e048      	b.n	800ef62 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800eed0:	4b2d      	ldr	r3, [pc, #180]	; (800ef88 <prvSwitchTimerLists+0xc0>)
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eeda:	4b2b      	ldr	r3, [pc, #172]	; (800ef88 <prvSwitchTimerLists+0xc0>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	3304      	adds	r3, #4
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fd facd 	bl	800c488 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	6a1b      	ldr	r3, [r3, #32]
 800eef2:	68f8      	ldr	r0, [r7, #12]
 800eef4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eefc:	f003 0304 	and.w	r3, r3, #4
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d02e      	beq.n	800ef62 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	699b      	ldr	r3, [r3, #24]
 800ef08:	693a      	ldr	r2, [r7, #16]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef0e:	68ba      	ldr	r2, [r7, #8]
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	429a      	cmp	r2, r3
 800ef14:	d90e      	bls.n	800ef34 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	68fa      	ldr	r2, [r7, #12]
 800ef20:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef22:	4b19      	ldr	r3, [pc, #100]	; (800ef88 <prvSwitchTimerLists+0xc0>)
 800ef24:	681a      	ldr	r2, [r3, #0]
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	3304      	adds	r3, #4
 800ef2a:	4619      	mov	r1, r3
 800ef2c:	4610      	mov	r0, r2
 800ef2e:	f7fd fa72 	bl	800c416 <vListInsert>
 800ef32:	e016      	b.n	800ef62 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef34:	2300      	movs	r3, #0
 800ef36:	9300      	str	r3, [sp, #0]
 800ef38:	2300      	movs	r3, #0
 800ef3a:	693a      	ldr	r2, [r7, #16]
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	68f8      	ldr	r0, [r7, #12]
 800ef40:	f7ff fd60 	bl	800ea04 <xTimerGenericCommand>
 800ef44:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d10a      	bne.n	800ef62 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ef4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef50:	f383 8811 	msr	BASEPRI, r3
 800ef54:	f3bf 8f6f 	isb	sy
 800ef58:	f3bf 8f4f 	dsb	sy
 800ef5c:	603b      	str	r3, [r7, #0]
}
 800ef5e:	bf00      	nop
 800ef60:	e7fe      	b.n	800ef60 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef62:	4b09      	ldr	r3, [pc, #36]	; (800ef88 <prvSwitchTimerLists+0xc0>)
 800ef64:	681b      	ldr	r3, [r3, #0]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d1b1      	bne.n	800eed0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ef6c:	4b06      	ldr	r3, [pc, #24]	; (800ef88 <prvSwitchTimerLists+0xc0>)
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ef72:	4b06      	ldr	r3, [pc, #24]	; (800ef8c <prvSwitchTimerLists+0xc4>)
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	4a04      	ldr	r2, [pc, #16]	; (800ef88 <prvSwitchTimerLists+0xc0>)
 800ef78:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ef7a:	4a04      	ldr	r2, [pc, #16]	; (800ef8c <prvSwitchTimerLists+0xc4>)
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	6013      	str	r3, [r2, #0]
}
 800ef80:	bf00      	nop
 800ef82:	3718      	adds	r7, #24
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	24000d7c 	.word	0x24000d7c
 800ef8c:	24000d80 	.word	0x24000d80

0800ef90 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b082      	sub	sp, #8
 800ef94:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ef96:	f000 f965 	bl	800f264 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ef9a:	4b15      	ldr	r3, [pc, #84]	; (800eff0 <prvCheckForValidListAndQueue+0x60>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d120      	bne.n	800efe4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800efa2:	4814      	ldr	r0, [pc, #80]	; (800eff4 <prvCheckForValidListAndQueue+0x64>)
 800efa4:	f7fd f9e6 	bl	800c374 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800efa8:	4813      	ldr	r0, [pc, #76]	; (800eff8 <prvCheckForValidListAndQueue+0x68>)
 800efaa:	f7fd f9e3 	bl	800c374 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800efae:	4b13      	ldr	r3, [pc, #76]	; (800effc <prvCheckForValidListAndQueue+0x6c>)
 800efb0:	4a10      	ldr	r2, [pc, #64]	; (800eff4 <prvCheckForValidListAndQueue+0x64>)
 800efb2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800efb4:	4b12      	ldr	r3, [pc, #72]	; (800f000 <prvCheckForValidListAndQueue+0x70>)
 800efb6:	4a10      	ldr	r2, [pc, #64]	; (800eff8 <prvCheckForValidListAndQueue+0x68>)
 800efb8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800efba:	2300      	movs	r3, #0
 800efbc:	9300      	str	r3, [sp, #0]
 800efbe:	4b11      	ldr	r3, [pc, #68]	; (800f004 <prvCheckForValidListAndQueue+0x74>)
 800efc0:	4a11      	ldr	r2, [pc, #68]	; (800f008 <prvCheckForValidListAndQueue+0x78>)
 800efc2:	2110      	movs	r1, #16
 800efc4:	200a      	movs	r0, #10
 800efc6:	f7fd faf1 	bl	800c5ac <xQueueGenericCreateStatic>
 800efca:	4603      	mov	r3, r0
 800efcc:	4a08      	ldr	r2, [pc, #32]	; (800eff0 <prvCheckForValidListAndQueue+0x60>)
 800efce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800efd0:	4b07      	ldr	r3, [pc, #28]	; (800eff0 <prvCheckForValidListAndQueue+0x60>)
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d005      	beq.n	800efe4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800efd8:	4b05      	ldr	r3, [pc, #20]	; (800eff0 <prvCheckForValidListAndQueue+0x60>)
 800efda:	681b      	ldr	r3, [r3, #0]
 800efdc:	490b      	ldr	r1, [pc, #44]	; (800f00c <prvCheckForValidListAndQueue+0x7c>)
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fe fab8 	bl	800d554 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800efe4:	f000 f96e 	bl	800f2c4 <vPortExitCritical>
}
 800efe8:	bf00      	nop
 800efea:	46bd      	mov	sp, r7
 800efec:	bd80      	pop	{r7, pc}
 800efee:	bf00      	nop
 800eff0:	24000d84 	.word	0x24000d84
 800eff4:	24000d54 	.word	0x24000d54
 800eff8:	24000d68 	.word	0x24000d68
 800effc:	24000d7c 	.word	0x24000d7c
 800f000:	24000d80 	.word	0x24000d80
 800f004:	24000e30 	.word	0x24000e30
 800f008:	24000d90 	.word	0x24000d90
 800f00c:	0801be68 	.word	0x0801be68

0800f010 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	3b04      	subs	r3, #4
 800f020:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f028:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	3b04      	subs	r3, #4
 800f02e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f030:	68bb      	ldr	r3, [r7, #8]
 800f032:	f023 0201 	bic.w	r2, r3, #1
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	3b04      	subs	r3, #4
 800f03e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f040:	4a0c      	ldr	r2, [pc, #48]	; (800f074 <pxPortInitialiseStack+0x64>)
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	3b14      	subs	r3, #20
 800f04a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	3b04      	subs	r3, #4
 800f056:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	f06f 0202 	mvn.w	r2, #2
 800f05e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	3b20      	subs	r3, #32
 800f064:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f066:	68fb      	ldr	r3, [r7, #12]
}
 800f068:	4618      	mov	r0, r3
 800f06a:	3714      	adds	r7, #20
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr
 800f074:	0800f079 	.word	0x0800f079

0800f078 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f078:	b480      	push	{r7}
 800f07a:	b085      	sub	sp, #20
 800f07c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f07e:	2300      	movs	r3, #0
 800f080:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f082:	4b12      	ldr	r3, [pc, #72]	; (800f0cc <prvTaskExitError+0x54>)
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f08a:	d00a      	beq.n	800f0a2 <prvTaskExitError+0x2a>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	60fb      	str	r3, [r7, #12]
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <prvTaskExitError+0x28>
	__asm volatile
 800f0a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0a6:	f383 8811 	msr	BASEPRI, r3
 800f0aa:	f3bf 8f6f 	isb	sy
 800f0ae:	f3bf 8f4f 	dsb	sy
 800f0b2:	60bb      	str	r3, [r7, #8]
}
 800f0b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f0b6:	bf00      	nop
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d0fc      	beq.n	800f0b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f0be:	bf00      	nop
 800f0c0:	bf00      	nop
 800f0c2:	3714      	adds	r7, #20
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ca:	4770      	bx	lr
 800f0cc:	2400002c 	.word	0x2400002c

0800f0d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f0d0:	4b07      	ldr	r3, [pc, #28]	; (800f0f0 <pxCurrentTCBConst2>)
 800f0d2:	6819      	ldr	r1, [r3, #0]
 800f0d4:	6808      	ldr	r0, [r1, #0]
 800f0d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0da:	f380 8809 	msr	PSP, r0
 800f0de:	f3bf 8f6f 	isb	sy
 800f0e2:	f04f 0000 	mov.w	r0, #0
 800f0e6:	f380 8811 	msr	BASEPRI, r0
 800f0ea:	4770      	bx	lr
 800f0ec:	f3af 8000 	nop.w

0800f0f0 <pxCurrentTCBConst2>:
 800f0f0:	2400084c 	.word	0x2400084c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f0f4:	bf00      	nop
 800f0f6:	bf00      	nop

0800f0f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f0f8:	4808      	ldr	r0, [pc, #32]	; (800f11c <prvPortStartFirstTask+0x24>)
 800f0fa:	6800      	ldr	r0, [r0, #0]
 800f0fc:	6800      	ldr	r0, [r0, #0]
 800f0fe:	f380 8808 	msr	MSP, r0
 800f102:	f04f 0000 	mov.w	r0, #0
 800f106:	f380 8814 	msr	CONTROL, r0
 800f10a:	b662      	cpsie	i
 800f10c:	b661      	cpsie	f
 800f10e:	f3bf 8f4f 	dsb	sy
 800f112:	f3bf 8f6f 	isb	sy
 800f116:	df00      	svc	0
 800f118:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f11a:	bf00      	nop
 800f11c:	e000ed08 	.word	0xe000ed08

0800f120 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b086      	sub	sp, #24
 800f124:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f126:	4b46      	ldr	r3, [pc, #280]	; (800f240 <xPortStartScheduler+0x120>)
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	4a46      	ldr	r2, [pc, #280]	; (800f244 <xPortStartScheduler+0x124>)
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d10a      	bne.n	800f146 <xPortStartScheduler+0x26>
	__asm volatile
 800f130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f134:	f383 8811 	msr	BASEPRI, r3
 800f138:	f3bf 8f6f 	isb	sy
 800f13c:	f3bf 8f4f 	dsb	sy
 800f140:	613b      	str	r3, [r7, #16]
}
 800f142:	bf00      	nop
 800f144:	e7fe      	b.n	800f144 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f146:	4b3e      	ldr	r3, [pc, #248]	; (800f240 <xPortStartScheduler+0x120>)
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	4a3f      	ldr	r2, [pc, #252]	; (800f248 <xPortStartScheduler+0x128>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d10a      	bne.n	800f166 <xPortStartScheduler+0x46>
	__asm volatile
 800f150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f154:	f383 8811 	msr	BASEPRI, r3
 800f158:	f3bf 8f6f 	isb	sy
 800f15c:	f3bf 8f4f 	dsb	sy
 800f160:	60fb      	str	r3, [r7, #12]
}
 800f162:	bf00      	nop
 800f164:	e7fe      	b.n	800f164 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f166:	4b39      	ldr	r3, [pc, #228]	; (800f24c <xPortStartScheduler+0x12c>)
 800f168:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	781b      	ldrb	r3, [r3, #0]
 800f16e:	b2db      	uxtb	r3, r3
 800f170:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f172:	697b      	ldr	r3, [r7, #20]
 800f174:	22ff      	movs	r2, #255	; 0xff
 800f176:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	b2db      	uxtb	r3, r3
 800f17e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f180:	78fb      	ldrb	r3, [r7, #3]
 800f182:	b2db      	uxtb	r3, r3
 800f184:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f188:	b2da      	uxtb	r2, r3
 800f18a:	4b31      	ldr	r3, [pc, #196]	; (800f250 <xPortStartScheduler+0x130>)
 800f18c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f18e:	4b31      	ldr	r3, [pc, #196]	; (800f254 <xPortStartScheduler+0x134>)
 800f190:	2207      	movs	r2, #7
 800f192:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f194:	e009      	b.n	800f1aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f196:	4b2f      	ldr	r3, [pc, #188]	; (800f254 <xPortStartScheduler+0x134>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	3b01      	subs	r3, #1
 800f19c:	4a2d      	ldr	r2, [pc, #180]	; (800f254 <xPortStartScheduler+0x134>)
 800f19e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f1a0:	78fb      	ldrb	r3, [r7, #3]
 800f1a2:	b2db      	uxtb	r3, r3
 800f1a4:	005b      	lsls	r3, r3, #1
 800f1a6:	b2db      	uxtb	r3, r3
 800f1a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1aa:	78fb      	ldrb	r3, [r7, #3]
 800f1ac:	b2db      	uxtb	r3, r3
 800f1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1b2:	2b80      	cmp	r3, #128	; 0x80
 800f1b4:	d0ef      	beq.n	800f196 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f1b6:	4b27      	ldr	r3, [pc, #156]	; (800f254 <xPortStartScheduler+0x134>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	f1c3 0307 	rsb	r3, r3, #7
 800f1be:	2b04      	cmp	r3, #4
 800f1c0:	d00a      	beq.n	800f1d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800f1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1c6:	f383 8811 	msr	BASEPRI, r3
 800f1ca:	f3bf 8f6f 	isb	sy
 800f1ce:	f3bf 8f4f 	dsb	sy
 800f1d2:	60bb      	str	r3, [r7, #8]
}
 800f1d4:	bf00      	nop
 800f1d6:	e7fe      	b.n	800f1d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f1d8:	4b1e      	ldr	r3, [pc, #120]	; (800f254 <xPortStartScheduler+0x134>)
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	021b      	lsls	r3, r3, #8
 800f1de:	4a1d      	ldr	r2, [pc, #116]	; (800f254 <xPortStartScheduler+0x134>)
 800f1e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f1e2:	4b1c      	ldr	r3, [pc, #112]	; (800f254 <xPortStartScheduler+0x134>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f1ea:	4a1a      	ldr	r2, [pc, #104]	; (800f254 <xPortStartScheduler+0x134>)
 800f1ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f1f6:	4b18      	ldr	r3, [pc, #96]	; (800f258 <xPortStartScheduler+0x138>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	4a17      	ldr	r2, [pc, #92]	; (800f258 <xPortStartScheduler+0x138>)
 800f1fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f200:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f202:	4b15      	ldr	r3, [pc, #84]	; (800f258 <xPortStartScheduler+0x138>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	4a14      	ldr	r2, [pc, #80]	; (800f258 <xPortStartScheduler+0x138>)
 800f208:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f20c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f20e:	f000 f8dd 	bl	800f3cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f212:	4b12      	ldr	r3, [pc, #72]	; (800f25c <xPortStartScheduler+0x13c>)
 800f214:	2200      	movs	r2, #0
 800f216:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f218:	f000 f8fc 	bl	800f414 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f21c:	4b10      	ldr	r3, [pc, #64]	; (800f260 <xPortStartScheduler+0x140>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a0f      	ldr	r2, [pc, #60]	; (800f260 <xPortStartScheduler+0x140>)
 800f222:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f226:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f228:	f7ff ff66 	bl	800f0f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f22c:	f7fe fe04 	bl	800de38 <vTaskSwitchContext>
	prvTaskExitError();
 800f230:	f7ff ff22 	bl	800f078 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f234:	2300      	movs	r3, #0
}
 800f236:	4618      	mov	r0, r3
 800f238:	3718      	adds	r7, #24
 800f23a:	46bd      	mov	sp, r7
 800f23c:	bd80      	pop	{r7, pc}
 800f23e:	bf00      	nop
 800f240:	e000ed00 	.word	0xe000ed00
 800f244:	410fc271 	.word	0x410fc271
 800f248:	410fc270 	.word	0x410fc270
 800f24c:	e000e400 	.word	0xe000e400
 800f250:	24000e80 	.word	0x24000e80
 800f254:	24000e84 	.word	0x24000e84
 800f258:	e000ed20 	.word	0xe000ed20
 800f25c:	2400002c 	.word	0x2400002c
 800f260:	e000ef34 	.word	0xe000ef34

0800f264 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
	__asm volatile
 800f26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f26e:	f383 8811 	msr	BASEPRI, r3
 800f272:	f3bf 8f6f 	isb	sy
 800f276:	f3bf 8f4f 	dsb	sy
 800f27a:	607b      	str	r3, [r7, #4]
}
 800f27c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f27e:	4b0f      	ldr	r3, [pc, #60]	; (800f2bc <vPortEnterCritical+0x58>)
 800f280:	681b      	ldr	r3, [r3, #0]
 800f282:	3301      	adds	r3, #1
 800f284:	4a0d      	ldr	r2, [pc, #52]	; (800f2bc <vPortEnterCritical+0x58>)
 800f286:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f288:	4b0c      	ldr	r3, [pc, #48]	; (800f2bc <vPortEnterCritical+0x58>)
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	2b01      	cmp	r3, #1
 800f28e:	d10f      	bne.n	800f2b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f290:	4b0b      	ldr	r3, [pc, #44]	; (800f2c0 <vPortEnterCritical+0x5c>)
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	b2db      	uxtb	r3, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	d00a      	beq.n	800f2b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800f29a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f29e:	f383 8811 	msr	BASEPRI, r3
 800f2a2:	f3bf 8f6f 	isb	sy
 800f2a6:	f3bf 8f4f 	dsb	sy
 800f2aa:	603b      	str	r3, [r7, #0]
}
 800f2ac:	bf00      	nop
 800f2ae:	e7fe      	b.n	800f2ae <vPortEnterCritical+0x4a>
	}
}
 800f2b0:	bf00      	nop
 800f2b2:	370c      	adds	r7, #12
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ba:	4770      	bx	lr
 800f2bc:	2400002c 	.word	0x2400002c
 800f2c0:	e000ed04 	.word	0xe000ed04

0800f2c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f2ca:	4b12      	ldr	r3, [pc, #72]	; (800f314 <vPortExitCritical+0x50>)
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d10a      	bne.n	800f2e8 <vPortExitCritical+0x24>
	__asm volatile
 800f2d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d6:	f383 8811 	msr	BASEPRI, r3
 800f2da:	f3bf 8f6f 	isb	sy
 800f2de:	f3bf 8f4f 	dsb	sy
 800f2e2:	607b      	str	r3, [r7, #4]
}
 800f2e4:	bf00      	nop
 800f2e6:	e7fe      	b.n	800f2e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f2e8:	4b0a      	ldr	r3, [pc, #40]	; (800f314 <vPortExitCritical+0x50>)
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	3b01      	subs	r3, #1
 800f2ee:	4a09      	ldr	r2, [pc, #36]	; (800f314 <vPortExitCritical+0x50>)
 800f2f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f2f2:	4b08      	ldr	r3, [pc, #32]	; (800f314 <vPortExitCritical+0x50>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d105      	bne.n	800f306 <vPortExitCritical+0x42>
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f2fe:	683b      	ldr	r3, [r7, #0]
 800f300:	f383 8811 	msr	BASEPRI, r3
}
 800f304:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f306:	bf00      	nop
 800f308:	370c      	adds	r7, #12
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
 800f312:	bf00      	nop
 800f314:	2400002c 	.word	0x2400002c
	...

0800f320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f320:	f3ef 8009 	mrs	r0, PSP
 800f324:	f3bf 8f6f 	isb	sy
 800f328:	4b15      	ldr	r3, [pc, #84]	; (800f380 <pxCurrentTCBConst>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	f01e 0f10 	tst.w	lr, #16
 800f330:	bf08      	it	eq
 800f332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f33a:	6010      	str	r0, [r2, #0]
 800f33c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f340:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f344:	f380 8811 	msr	BASEPRI, r0
 800f348:	f3bf 8f4f 	dsb	sy
 800f34c:	f3bf 8f6f 	isb	sy
 800f350:	f7fe fd72 	bl	800de38 <vTaskSwitchContext>
 800f354:	f04f 0000 	mov.w	r0, #0
 800f358:	f380 8811 	msr	BASEPRI, r0
 800f35c:	bc09      	pop	{r0, r3}
 800f35e:	6819      	ldr	r1, [r3, #0]
 800f360:	6808      	ldr	r0, [r1, #0]
 800f362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f366:	f01e 0f10 	tst.w	lr, #16
 800f36a:	bf08      	it	eq
 800f36c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f370:	f380 8809 	msr	PSP, r0
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	4770      	bx	lr
 800f37a:	bf00      	nop
 800f37c:	f3af 8000 	nop.w

0800f380 <pxCurrentTCBConst>:
 800f380:	2400084c 	.word	0x2400084c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f384:	bf00      	nop
 800f386:	bf00      	nop

0800f388 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b082      	sub	sp, #8
 800f38c:	af00      	add	r7, sp, #0
	__asm volatile
 800f38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	607b      	str	r3, [r7, #4]
}
 800f3a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f3a2:	f7fe fc8f 	bl	800dcc4 <xTaskIncrementTick>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d003      	beq.n	800f3b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f3ac:	4b06      	ldr	r3, [pc, #24]	; (800f3c8 <xPortSysTickHandler+0x40>)
 800f3ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f3b2:	601a      	str	r2, [r3, #0]
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	f383 8811 	msr	BASEPRI, r3
}
 800f3be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f3c0:	bf00      	nop
 800f3c2:	3708      	adds	r7, #8
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	e000ed04 	.word	0xe000ed04

0800f3cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f3cc:	b480      	push	{r7}
 800f3ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f3d0:	4b0b      	ldr	r3, [pc, #44]	; (800f400 <vPortSetupTimerInterrupt+0x34>)
 800f3d2:	2200      	movs	r2, #0
 800f3d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f3d6:	4b0b      	ldr	r3, [pc, #44]	; (800f404 <vPortSetupTimerInterrupt+0x38>)
 800f3d8:	2200      	movs	r2, #0
 800f3da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f3dc:	4b0a      	ldr	r3, [pc, #40]	; (800f408 <vPortSetupTimerInterrupt+0x3c>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4a0a      	ldr	r2, [pc, #40]	; (800f40c <vPortSetupTimerInterrupt+0x40>)
 800f3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f3e6:	095b      	lsrs	r3, r3, #5
 800f3e8:	4a09      	ldr	r2, [pc, #36]	; (800f410 <vPortSetupTimerInterrupt+0x44>)
 800f3ea:	3b01      	subs	r3, #1
 800f3ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f3ee:	4b04      	ldr	r3, [pc, #16]	; (800f400 <vPortSetupTimerInterrupt+0x34>)
 800f3f0:	2207      	movs	r2, #7
 800f3f2:	601a      	str	r2, [r3, #0]
}
 800f3f4:	bf00      	nop
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3fc:	4770      	bx	lr
 800f3fe:	bf00      	nop
 800f400:	e000e010 	.word	0xe000e010
 800f404:	e000e018 	.word	0xe000e018
 800f408:	24000008 	.word	0x24000008
 800f40c:	51eb851f 	.word	0x51eb851f
 800f410:	e000e014 	.word	0xe000e014

0800f414 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f414:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f424 <vPortEnableVFP+0x10>
 800f418:	6801      	ldr	r1, [r0, #0]
 800f41a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f41e:	6001      	str	r1, [r0, #0]
 800f420:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f422:	bf00      	nop
 800f424:	e000ed88 	.word	0xe000ed88

0800f428 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f428:	b480      	push	{r7}
 800f42a:	b085      	sub	sp, #20
 800f42c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f42e:	f3ef 8305 	mrs	r3, IPSR
 800f432:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	2b0f      	cmp	r3, #15
 800f438:	d914      	bls.n	800f464 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f43a:	4a17      	ldr	r2, [pc, #92]	; (800f498 <vPortValidateInterruptPriority+0x70>)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	4413      	add	r3, r2
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f444:	4b15      	ldr	r3, [pc, #84]	; (800f49c <vPortValidateInterruptPriority+0x74>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	7afa      	ldrb	r2, [r7, #11]
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d20a      	bcs.n	800f464 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f452:	f383 8811 	msr	BASEPRI, r3
 800f456:	f3bf 8f6f 	isb	sy
 800f45a:	f3bf 8f4f 	dsb	sy
 800f45e:	607b      	str	r3, [r7, #4]
}
 800f460:	bf00      	nop
 800f462:	e7fe      	b.n	800f462 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f464:	4b0e      	ldr	r3, [pc, #56]	; (800f4a0 <vPortValidateInterruptPriority+0x78>)
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f46c:	4b0d      	ldr	r3, [pc, #52]	; (800f4a4 <vPortValidateInterruptPriority+0x7c>)
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	429a      	cmp	r2, r3
 800f472:	d90a      	bls.n	800f48a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f478:	f383 8811 	msr	BASEPRI, r3
 800f47c:	f3bf 8f6f 	isb	sy
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	603b      	str	r3, [r7, #0]
}
 800f486:	bf00      	nop
 800f488:	e7fe      	b.n	800f488 <vPortValidateInterruptPriority+0x60>
	}
 800f48a:	bf00      	nop
 800f48c:	3714      	adds	r7, #20
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr
 800f496:	bf00      	nop
 800f498:	e000e3f0 	.word	0xe000e3f0
 800f49c:	24000e80 	.word	0x24000e80
 800f4a0:	e000ed0c 	.word	0xe000ed0c
 800f4a4:	24000e84 	.word	0x24000e84

0800f4a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b08a      	sub	sp, #40	; 0x28
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f4b0:	2300      	movs	r3, #0
 800f4b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f4b4:	f7fe fb38 	bl	800db28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f4b8:	4b5b      	ldr	r3, [pc, #364]	; (800f628 <pvPortMalloc+0x180>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d101      	bne.n	800f4c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f4c0:	f000 f920 	bl	800f704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f4c4:	4b59      	ldr	r3, [pc, #356]	; (800f62c <pvPortMalloc+0x184>)
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	4013      	ands	r3, r2
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	f040 8093 	bne.w	800f5f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d01d      	beq.n	800f514 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f4d8:	2208      	movs	r2, #8
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	4413      	add	r3, r2
 800f4de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f003 0307 	and.w	r3, r3, #7
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d014      	beq.n	800f514 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f023 0307 	bic.w	r3, r3, #7
 800f4f0:	3308      	adds	r3, #8
 800f4f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f003 0307 	and.w	r3, r3, #7
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d00a      	beq.n	800f514 <pvPortMalloc+0x6c>
	__asm volatile
 800f4fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f502:	f383 8811 	msr	BASEPRI, r3
 800f506:	f3bf 8f6f 	isb	sy
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	617b      	str	r3, [r7, #20]
}
 800f510:	bf00      	nop
 800f512:	e7fe      	b.n	800f512 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d06e      	beq.n	800f5f8 <pvPortMalloc+0x150>
 800f51a:	4b45      	ldr	r3, [pc, #276]	; (800f630 <pvPortMalloc+0x188>)
 800f51c:	681b      	ldr	r3, [r3, #0]
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	429a      	cmp	r2, r3
 800f522:	d869      	bhi.n	800f5f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f524:	4b43      	ldr	r3, [pc, #268]	; (800f634 <pvPortMalloc+0x18c>)
 800f526:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f528:	4b42      	ldr	r3, [pc, #264]	; (800f634 <pvPortMalloc+0x18c>)
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f52e:	e004      	b.n	800f53a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f532:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f53a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	429a      	cmp	r2, r3
 800f542:	d903      	bls.n	800f54c <pvPortMalloc+0xa4>
 800f544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d1f1      	bne.n	800f530 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f54c:	4b36      	ldr	r3, [pc, #216]	; (800f628 <pvPortMalloc+0x180>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f552:	429a      	cmp	r2, r3
 800f554:	d050      	beq.n	800f5f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f556:	6a3b      	ldr	r3, [r7, #32]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	2208      	movs	r2, #8
 800f55c:	4413      	add	r3, r2
 800f55e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f562:	681a      	ldr	r2, [r3, #0]
 800f564:	6a3b      	ldr	r3, [r7, #32]
 800f566:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56a:	685a      	ldr	r2, [r3, #4]
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	1ad2      	subs	r2, r2, r3
 800f570:	2308      	movs	r3, #8
 800f572:	005b      	lsls	r3, r3, #1
 800f574:	429a      	cmp	r2, r3
 800f576:	d91f      	bls.n	800f5b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	4413      	add	r3, r2
 800f57e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f580:	69bb      	ldr	r3, [r7, #24]
 800f582:	f003 0307 	and.w	r3, r3, #7
 800f586:	2b00      	cmp	r3, #0
 800f588:	d00a      	beq.n	800f5a0 <pvPortMalloc+0xf8>
	__asm volatile
 800f58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f58e:	f383 8811 	msr	BASEPRI, r3
 800f592:	f3bf 8f6f 	isb	sy
 800f596:	f3bf 8f4f 	dsb	sy
 800f59a:	613b      	str	r3, [r7, #16]
}
 800f59c:	bf00      	nop
 800f59e:	e7fe      	b.n	800f59e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a2:	685a      	ldr	r2, [r3, #4]
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	1ad2      	subs	r2, r2, r3
 800f5a8:	69bb      	ldr	r3, [r7, #24]
 800f5aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	687a      	ldr	r2, [r7, #4]
 800f5b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f5b2:	69b8      	ldr	r0, [r7, #24]
 800f5b4:	f000 f908 	bl	800f7c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5b8:	4b1d      	ldr	r3, [pc, #116]	; (800f630 <pvPortMalloc+0x188>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5be:	685b      	ldr	r3, [r3, #4]
 800f5c0:	1ad3      	subs	r3, r2, r3
 800f5c2:	4a1b      	ldr	r2, [pc, #108]	; (800f630 <pvPortMalloc+0x188>)
 800f5c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f5c6:	4b1a      	ldr	r3, [pc, #104]	; (800f630 <pvPortMalloc+0x188>)
 800f5c8:	681a      	ldr	r2, [r3, #0]
 800f5ca:	4b1b      	ldr	r3, [pc, #108]	; (800f638 <pvPortMalloc+0x190>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	429a      	cmp	r2, r3
 800f5d0:	d203      	bcs.n	800f5da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f5d2:	4b17      	ldr	r3, [pc, #92]	; (800f630 <pvPortMalloc+0x188>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4a18      	ldr	r2, [pc, #96]	; (800f638 <pvPortMalloc+0x190>)
 800f5d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f5da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5dc:	685a      	ldr	r2, [r3, #4]
 800f5de:	4b13      	ldr	r3, [pc, #76]	; (800f62c <pvPortMalloc+0x184>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	431a      	orrs	r2, r3
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f5ee:	4b13      	ldr	r3, [pc, #76]	; (800f63c <pvPortMalloc+0x194>)
 800f5f0:	681b      	ldr	r3, [r3, #0]
 800f5f2:	3301      	adds	r3, #1
 800f5f4:	4a11      	ldr	r2, [pc, #68]	; (800f63c <pvPortMalloc+0x194>)
 800f5f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f5f8:	f7fe faa4 	bl	800db44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	f003 0307 	and.w	r3, r3, #7
 800f602:	2b00      	cmp	r3, #0
 800f604:	d00a      	beq.n	800f61c <pvPortMalloc+0x174>
	__asm volatile
 800f606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f60a:	f383 8811 	msr	BASEPRI, r3
 800f60e:	f3bf 8f6f 	isb	sy
 800f612:	f3bf 8f4f 	dsb	sy
 800f616:	60fb      	str	r3, [r7, #12]
}
 800f618:	bf00      	nop
 800f61a:	e7fe      	b.n	800f61a <pvPortMalloc+0x172>
	return pvReturn;
 800f61c:	69fb      	ldr	r3, [r7, #28]
}
 800f61e:	4618      	mov	r0, r3
 800f620:	3728      	adds	r7, #40	; 0x28
 800f622:	46bd      	mov	sp, r7
 800f624:	bd80      	pop	{r7, pc}
 800f626:	bf00      	nop
 800f628:	24004a90 	.word	0x24004a90
 800f62c:	24004aa4 	.word	0x24004aa4
 800f630:	24004a94 	.word	0x24004a94
 800f634:	24004a88 	.word	0x24004a88
 800f638:	24004a98 	.word	0x24004a98
 800f63c:	24004a9c 	.word	0x24004a9c

0800f640 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f640:	b580      	push	{r7, lr}
 800f642:	b086      	sub	sp, #24
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	2b00      	cmp	r3, #0
 800f650:	d04d      	beq.n	800f6ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f652:	2308      	movs	r3, #8
 800f654:	425b      	negs	r3, r3
 800f656:	697a      	ldr	r2, [r7, #20]
 800f658:	4413      	add	r3, r2
 800f65a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f65c:	697b      	ldr	r3, [r7, #20]
 800f65e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	685a      	ldr	r2, [r3, #4]
 800f664:	4b24      	ldr	r3, [pc, #144]	; (800f6f8 <vPortFree+0xb8>)
 800f666:	681b      	ldr	r3, [r3, #0]
 800f668:	4013      	ands	r3, r2
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d10a      	bne.n	800f684 <vPortFree+0x44>
	__asm volatile
 800f66e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f672:	f383 8811 	msr	BASEPRI, r3
 800f676:	f3bf 8f6f 	isb	sy
 800f67a:	f3bf 8f4f 	dsb	sy
 800f67e:	60fb      	str	r3, [r7, #12]
}
 800f680:	bf00      	nop
 800f682:	e7fe      	b.n	800f682 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d00a      	beq.n	800f6a2 <vPortFree+0x62>
	__asm volatile
 800f68c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f690:	f383 8811 	msr	BASEPRI, r3
 800f694:	f3bf 8f6f 	isb	sy
 800f698:	f3bf 8f4f 	dsb	sy
 800f69c:	60bb      	str	r3, [r7, #8]
}
 800f69e:	bf00      	nop
 800f6a0:	e7fe      	b.n	800f6a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	685a      	ldr	r2, [r3, #4]
 800f6a6:	4b14      	ldr	r3, [pc, #80]	; (800f6f8 <vPortFree+0xb8>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	4013      	ands	r3, r2
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d01e      	beq.n	800f6ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d11a      	bne.n	800f6ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	685a      	ldr	r2, [r3, #4]
 800f6bc:	4b0e      	ldr	r3, [pc, #56]	; (800f6f8 <vPortFree+0xb8>)
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	43db      	mvns	r3, r3
 800f6c2:	401a      	ands	r2, r3
 800f6c4:	693b      	ldr	r3, [r7, #16]
 800f6c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f6c8:	f7fe fa2e 	bl	800db28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f6cc:	693b      	ldr	r3, [r7, #16]
 800f6ce:	685a      	ldr	r2, [r3, #4]
 800f6d0:	4b0a      	ldr	r3, [pc, #40]	; (800f6fc <vPortFree+0xbc>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4413      	add	r3, r2
 800f6d6:	4a09      	ldr	r2, [pc, #36]	; (800f6fc <vPortFree+0xbc>)
 800f6d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f6da:	6938      	ldr	r0, [r7, #16]
 800f6dc:	f000 f874 	bl	800f7c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f6e0:	4b07      	ldr	r3, [pc, #28]	; (800f700 <vPortFree+0xc0>)
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	3301      	adds	r3, #1
 800f6e6:	4a06      	ldr	r2, [pc, #24]	; (800f700 <vPortFree+0xc0>)
 800f6e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f6ea:	f7fe fa2b 	bl	800db44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f6ee:	bf00      	nop
 800f6f0:	3718      	adds	r7, #24
 800f6f2:	46bd      	mov	sp, r7
 800f6f4:	bd80      	pop	{r7, pc}
 800f6f6:	bf00      	nop
 800f6f8:	24004aa4 	.word	0x24004aa4
 800f6fc:	24004a94 	.word	0x24004a94
 800f700:	24004aa0 	.word	0x24004aa0

0800f704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f704:	b480      	push	{r7}
 800f706:	b085      	sub	sp, #20
 800f708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f70a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f70e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f710:	4b27      	ldr	r3, [pc, #156]	; (800f7b0 <prvHeapInit+0xac>)
 800f712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f003 0307 	and.w	r3, r3, #7
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00c      	beq.n	800f738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f71e:	68fb      	ldr	r3, [r7, #12]
 800f720:	3307      	adds	r3, #7
 800f722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f023 0307 	bic.w	r3, r3, #7
 800f72a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f72c:	68ba      	ldr	r2, [r7, #8]
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	1ad3      	subs	r3, r2, r3
 800f732:	4a1f      	ldr	r2, [pc, #124]	; (800f7b0 <prvHeapInit+0xac>)
 800f734:	4413      	add	r3, r2
 800f736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f73c:	4a1d      	ldr	r2, [pc, #116]	; (800f7b4 <prvHeapInit+0xb0>)
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f742:	4b1c      	ldr	r3, [pc, #112]	; (800f7b4 <prvHeapInit+0xb0>)
 800f744:	2200      	movs	r2, #0
 800f746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	68ba      	ldr	r2, [r7, #8]
 800f74c:	4413      	add	r3, r2
 800f74e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f750:	2208      	movs	r2, #8
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	1a9b      	subs	r3, r3, r2
 800f756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f023 0307 	bic.w	r3, r3, #7
 800f75e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	4a15      	ldr	r2, [pc, #84]	; (800f7b8 <prvHeapInit+0xb4>)
 800f764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f766:	4b14      	ldr	r3, [pc, #80]	; (800f7b8 <prvHeapInit+0xb4>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2200      	movs	r2, #0
 800f76c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f76e:	4b12      	ldr	r3, [pc, #72]	; (800f7b8 <prvHeapInit+0xb4>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	2200      	movs	r2, #0
 800f774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f77a:	683b      	ldr	r3, [r7, #0]
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	1ad2      	subs	r2, r2, r3
 800f780:	683b      	ldr	r3, [r7, #0]
 800f782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f784:	4b0c      	ldr	r3, [pc, #48]	; (800f7b8 <prvHeapInit+0xb4>)
 800f786:	681a      	ldr	r2, [r3, #0]
 800f788:	683b      	ldr	r3, [r7, #0]
 800f78a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	685b      	ldr	r3, [r3, #4]
 800f790:	4a0a      	ldr	r2, [pc, #40]	; (800f7bc <prvHeapInit+0xb8>)
 800f792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	685b      	ldr	r3, [r3, #4]
 800f798:	4a09      	ldr	r2, [pc, #36]	; (800f7c0 <prvHeapInit+0xbc>)
 800f79a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f79c:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <prvHeapInit+0xc0>)
 800f79e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f7a2:	601a      	str	r2, [r3, #0]
}
 800f7a4:	bf00      	nop
 800f7a6:	3714      	adds	r7, #20
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ae:	4770      	bx	lr
 800f7b0:	24000e88 	.word	0x24000e88
 800f7b4:	24004a88 	.word	0x24004a88
 800f7b8:	24004a90 	.word	0x24004a90
 800f7bc:	24004a98 	.word	0x24004a98
 800f7c0:	24004a94 	.word	0x24004a94
 800f7c4:	24004aa4 	.word	0x24004aa4

0800f7c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f7c8:	b480      	push	{r7}
 800f7ca:	b085      	sub	sp, #20
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f7d0:	4b28      	ldr	r3, [pc, #160]	; (800f874 <prvInsertBlockIntoFreeList+0xac>)
 800f7d2:	60fb      	str	r3, [r7, #12]
 800f7d4:	e002      	b.n	800f7dc <prvInsertBlockIntoFreeList+0x14>
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	60fb      	str	r3, [r7, #12]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	687a      	ldr	r2, [r7, #4]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d8f7      	bhi.n	800f7d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	685b      	ldr	r3, [r3, #4]
 800f7ee:	68ba      	ldr	r2, [r7, #8]
 800f7f0:	4413      	add	r3, r2
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d108      	bne.n	800f80a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	685a      	ldr	r2, [r3, #4]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	685b      	ldr	r3, [r3, #4]
 800f800:	441a      	add	r2, r3
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	68ba      	ldr	r2, [r7, #8]
 800f814:	441a      	add	r2, r3
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	429a      	cmp	r2, r3
 800f81c:	d118      	bne.n	800f850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	681a      	ldr	r2, [r3, #0]
 800f822:	4b15      	ldr	r3, [pc, #84]	; (800f878 <prvInsertBlockIntoFreeList+0xb0>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	429a      	cmp	r2, r3
 800f828:	d00d      	beq.n	800f846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	685a      	ldr	r2, [r3, #4]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	685b      	ldr	r3, [r3, #4]
 800f834:	441a      	add	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	681a      	ldr	r2, [r3, #0]
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	601a      	str	r2, [r3, #0]
 800f844:	e008      	b.n	800f858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f846:	4b0c      	ldr	r3, [pc, #48]	; (800f878 <prvInsertBlockIntoFreeList+0xb0>)
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	601a      	str	r2, [r3, #0]
 800f84e:	e003      	b.n	800f858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681a      	ldr	r2, [r3, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f858:	68fa      	ldr	r2, [r7, #12]
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d002      	beq.n	800f866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	687a      	ldr	r2, [r7, #4]
 800f864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f866:	bf00      	nop
 800f868:	3714      	adds	r7, #20
 800f86a:	46bd      	mov	sp, r7
 800f86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f870:	4770      	bx	lr
 800f872:	bf00      	nop
 800f874:	24004a88 	.word	0x24004a88
 800f878:	24004a90 	.word	0x24004a90

0800f87c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b084      	sub	sp, #16
 800f880:	af00      	add	r7, sp, #0
 800f882:	6078      	str	r0, [r7, #4]
 800f884:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f886:	f008 fa81 	bl	8017d8c <sys_timeouts_sleeptime>
 800f88a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f892:	d10b      	bne.n	800f8ac <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f894:	4813      	ldr	r0, [pc, #76]	; (800f8e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800f896:	f00b f88a 	bl	801a9ae <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f89a:	2200      	movs	r2, #0
 800f89c:	6839      	ldr	r1, [r7, #0]
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f00b f812 	bl	801a8c8 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f8a4:	480f      	ldr	r0, [pc, #60]	; (800f8e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800f8a6:	f00b f873 	bl	801a990 <sys_mutex_lock>
    return;
 800f8aa:	e018      	b.n	800f8de <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d102      	bne.n	800f8b8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f8b2:	f008 fa31 	bl	8017d18 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f8b6:	e7e6      	b.n	800f886 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f8b8:	480a      	ldr	r0, [pc, #40]	; (800f8e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800f8ba:	f00b f878 	bl	801a9ae <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	6839      	ldr	r1, [r7, #0]
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f00b f800 	bl	801a8c8 <sys_arch_mbox_fetch>
 800f8c8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f8ca:	4806      	ldr	r0, [pc, #24]	; (800f8e4 <tcpip_timeouts_mbox_fetch+0x68>)
 800f8cc:	f00b f860 	bl	801a990 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f8d0:	68bb      	ldr	r3, [r7, #8]
 800f8d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8d6:	d102      	bne.n	800f8de <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f8d8:	f008 fa1e 	bl	8017d18 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f8dc:	e7d3      	b.n	800f886 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f8de:	3710      	adds	r7, #16
 800f8e0:	46bd      	mov	sp, r7
 800f8e2:	bd80      	pop	{r7, pc}
 800f8e4:	240051ac 	.word	0x240051ac

0800f8e8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b084      	sub	sp, #16
 800f8ec:	af00      	add	r7, sp, #0
 800f8ee:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f8f0:	4810      	ldr	r0, [pc, #64]	; (800f934 <tcpip_thread+0x4c>)
 800f8f2:	f00b f84d 	bl	801a990 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f8f6:	4b10      	ldr	r3, [pc, #64]	; (800f938 <tcpip_thread+0x50>)
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d005      	beq.n	800f90a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f8fe:	4b0e      	ldr	r3, [pc, #56]	; (800f938 <tcpip_thread+0x50>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	4a0e      	ldr	r2, [pc, #56]	; (800f93c <tcpip_thread+0x54>)
 800f904:	6812      	ldr	r2, [r2, #0]
 800f906:	4610      	mov	r0, r2
 800f908:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f90a:	f107 030c 	add.w	r3, r7, #12
 800f90e:	4619      	mov	r1, r3
 800f910:	480b      	ldr	r0, [pc, #44]	; (800f940 <tcpip_thread+0x58>)
 800f912:	f7ff ffb3 	bl	800f87c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d106      	bne.n	800f92a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f91c:	4b09      	ldr	r3, [pc, #36]	; (800f944 <tcpip_thread+0x5c>)
 800f91e:	2291      	movs	r2, #145	; 0x91
 800f920:	4909      	ldr	r1, [pc, #36]	; (800f948 <tcpip_thread+0x60>)
 800f922:	480a      	ldr	r0, [pc, #40]	; (800f94c <tcpip_thread+0x64>)
 800f924:	f00b fa2a 	bl	801ad7c <iprintf>
      continue;
 800f928:	e003      	b.n	800f932 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	4618      	mov	r0, r3
 800f92e:	f000 f80f 	bl	800f950 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f932:	e7ea      	b.n	800f90a <tcpip_thread+0x22>
 800f934:	240051ac 	.word	0x240051ac
 800f938:	24004aa8 	.word	0x24004aa8
 800f93c:	24004aac 	.word	0x24004aac
 800f940:	24004ab0 	.word	0x24004ab0
 800f944:	0801be70 	.word	0x0801be70
 800f948:	0801bea0 	.word	0x0801bea0
 800f94c:	0801bec0 	.word	0x0801bec0

0800f950 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b082      	sub	sp, #8
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	781b      	ldrb	r3, [r3, #0]
 800f95c:	2b02      	cmp	r3, #2
 800f95e:	d026      	beq.n	800f9ae <tcpip_thread_handle_msg+0x5e>
 800f960:	2b02      	cmp	r3, #2
 800f962:	dc2b      	bgt.n	800f9bc <tcpip_thread_handle_msg+0x6c>
 800f964:	2b00      	cmp	r3, #0
 800f966:	d002      	beq.n	800f96e <tcpip_thread_handle_msg+0x1e>
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d015      	beq.n	800f998 <tcpip_thread_handle_msg+0x48>
 800f96c:	e026      	b.n	800f9bc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	687a      	ldr	r2, [r7, #4]
 800f974:	6850      	ldr	r0, [r2, #4]
 800f976:	687a      	ldr	r2, [r7, #4]
 800f978:	6892      	ldr	r2, [r2, #8]
 800f97a:	4611      	mov	r1, r2
 800f97c:	4798      	blx	r3
 800f97e:	4603      	mov	r3, r0
 800f980:	2b00      	cmp	r3, #0
 800f982:	d004      	beq.n	800f98e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	685b      	ldr	r3, [r3, #4]
 800f988:	4618      	mov	r0, r3
 800f98a:	f001 fdc3 	bl	8011514 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f98e:	6879      	ldr	r1, [r7, #4]
 800f990:	2009      	movs	r0, #9
 800f992:	f000 ff1b 	bl	80107cc <memp_free>
      break;
 800f996:	e018      	b.n	800f9ca <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	685b      	ldr	r3, [r3, #4]
 800f99c:	687a      	ldr	r2, [r7, #4]
 800f99e:	6892      	ldr	r2, [r2, #8]
 800f9a0:	4610      	mov	r0, r2
 800f9a2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f9a4:	6879      	ldr	r1, [r7, #4]
 800f9a6:	2008      	movs	r0, #8
 800f9a8:	f000 ff10 	bl	80107cc <memp_free>
      break;
 800f9ac:	e00d      	b.n	800f9ca <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	687a      	ldr	r2, [r7, #4]
 800f9b4:	6892      	ldr	r2, [r2, #8]
 800f9b6:	4610      	mov	r0, r2
 800f9b8:	4798      	blx	r3
      break;
 800f9ba:	e006      	b.n	800f9ca <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f9bc:	4b05      	ldr	r3, [pc, #20]	; (800f9d4 <tcpip_thread_handle_msg+0x84>)
 800f9be:	22cf      	movs	r2, #207	; 0xcf
 800f9c0:	4905      	ldr	r1, [pc, #20]	; (800f9d8 <tcpip_thread_handle_msg+0x88>)
 800f9c2:	4806      	ldr	r0, [pc, #24]	; (800f9dc <tcpip_thread_handle_msg+0x8c>)
 800f9c4:	f00b f9da 	bl	801ad7c <iprintf>
      break;
 800f9c8:	bf00      	nop
  }
}
 800f9ca:	bf00      	nop
 800f9cc:	3708      	adds	r7, #8
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}
 800f9d2:	bf00      	nop
 800f9d4:	0801be70 	.word	0x0801be70
 800f9d8:	0801bea0 	.word	0x0801bea0
 800f9dc:	0801bec0 	.word	0x0801bec0

0800f9e0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b086      	sub	sp, #24
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	60f8      	str	r0, [r7, #12]
 800f9e8:	60b9      	str	r1, [r7, #8]
 800f9ea:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f9ec:	481a      	ldr	r0, [pc, #104]	; (800fa58 <tcpip_inpkt+0x78>)
 800f9ee:	f00a ff9c 	bl	801a92a <sys_mbox_valid>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d105      	bne.n	800fa04 <tcpip_inpkt+0x24>
 800f9f8:	4b18      	ldr	r3, [pc, #96]	; (800fa5c <tcpip_inpkt+0x7c>)
 800f9fa:	22fc      	movs	r2, #252	; 0xfc
 800f9fc:	4918      	ldr	r1, [pc, #96]	; (800fa60 <tcpip_inpkt+0x80>)
 800f9fe:	4819      	ldr	r0, [pc, #100]	; (800fa64 <tcpip_inpkt+0x84>)
 800fa00:	f00b f9bc 	bl	801ad7c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800fa04:	2009      	movs	r0, #9
 800fa06:	f000 fe6b 	bl	80106e0 <memp_malloc>
 800fa0a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800fa0c:	697b      	ldr	r3, [r7, #20]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d102      	bne.n	800fa18 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800fa12:	f04f 33ff 	mov.w	r3, #4294967295
 800fa16:	e01a      	b.n	800fa4e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	2200      	movs	r2, #0
 800fa1c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800fa1e:	697b      	ldr	r3, [r7, #20]
 800fa20:	68fa      	ldr	r2, [r7, #12]
 800fa22:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800fa24:	697b      	ldr	r3, [r7, #20]
 800fa26:	68ba      	ldr	r2, [r7, #8]
 800fa28:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800fa2a:	697b      	ldr	r3, [r7, #20]
 800fa2c:	687a      	ldr	r2, [r7, #4]
 800fa2e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800fa30:	6979      	ldr	r1, [r7, #20]
 800fa32:	4809      	ldr	r0, [pc, #36]	; (800fa58 <tcpip_inpkt+0x78>)
 800fa34:	f00a ff2e 	bl	801a894 <sys_mbox_trypost>
 800fa38:	4603      	mov	r3, r0
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d006      	beq.n	800fa4c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800fa3e:	6979      	ldr	r1, [r7, #20]
 800fa40:	2009      	movs	r0, #9
 800fa42:	f000 fec3 	bl	80107cc <memp_free>
    return ERR_MEM;
 800fa46:	f04f 33ff 	mov.w	r3, #4294967295
 800fa4a:	e000      	b.n	800fa4e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800fa4c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800fa4e:	4618      	mov	r0, r3
 800fa50:	3718      	adds	r7, #24
 800fa52:	46bd      	mov	sp, r7
 800fa54:	bd80      	pop	{r7, pc}
 800fa56:	bf00      	nop
 800fa58:	24004ab0 	.word	0x24004ab0
 800fa5c:	0801be70 	.word	0x0801be70
 800fa60:	0801bee8 	.word	0x0801bee8
 800fa64:	0801bec0 	.word	0x0801bec0

0800fa68 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b082      	sub	sp, #8
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800fa72:	683b      	ldr	r3, [r7, #0]
 800fa74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fa78:	f003 0318 	and.w	r3, r3, #24
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d006      	beq.n	800fa8e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800fa80:	4a08      	ldr	r2, [pc, #32]	; (800faa4 <tcpip_input+0x3c>)
 800fa82:	6839      	ldr	r1, [r7, #0]
 800fa84:	6878      	ldr	r0, [r7, #4]
 800fa86:	f7ff ffab 	bl	800f9e0 <tcpip_inpkt>
 800fa8a:	4603      	mov	r3, r0
 800fa8c:	e005      	b.n	800fa9a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800fa8e:	4a06      	ldr	r2, [pc, #24]	; (800faa8 <tcpip_input+0x40>)
 800fa90:	6839      	ldr	r1, [r7, #0]
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7ff ffa4 	bl	800f9e0 <tcpip_inpkt>
 800fa98:	4603      	mov	r3, r0
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3708      	adds	r7, #8
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	0801a6b5 	.word	0x0801a6b5
 800faa8:	080194a5 	.word	0x080194a5

0800faac <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800fab6:	4819      	ldr	r0, [pc, #100]	; (800fb1c <tcpip_try_callback+0x70>)
 800fab8:	f00a ff37 	bl	801a92a <sys_mbox_valid>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d106      	bne.n	800fad0 <tcpip_try_callback+0x24>
 800fac2:	4b17      	ldr	r3, [pc, #92]	; (800fb20 <tcpip_try_callback+0x74>)
 800fac4:	f240 125d 	movw	r2, #349	; 0x15d
 800fac8:	4916      	ldr	r1, [pc, #88]	; (800fb24 <tcpip_try_callback+0x78>)
 800faca:	4817      	ldr	r0, [pc, #92]	; (800fb28 <tcpip_try_callback+0x7c>)
 800facc:	f00b f956 	bl	801ad7c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800fad0:	2008      	movs	r0, #8
 800fad2:	f000 fe05 	bl	80106e0 <memp_malloc>
 800fad6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d102      	bne.n	800fae4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800fade:	f04f 33ff 	mov.w	r3, #4294967295
 800fae2:	e017      	b.n	800fb14 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800fae4:	68fb      	ldr	r3, [r7, #12]
 800fae6:	2201      	movs	r2, #1
 800fae8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	687a      	ldr	r2, [r7, #4]
 800faee:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	683a      	ldr	r2, [r7, #0]
 800faf4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800faf6:	68f9      	ldr	r1, [r7, #12]
 800faf8:	4808      	ldr	r0, [pc, #32]	; (800fb1c <tcpip_try_callback+0x70>)
 800fafa:	f00a fecb 	bl	801a894 <sys_mbox_trypost>
 800fafe:	4603      	mov	r3, r0
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d006      	beq.n	800fb12 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800fb04:	68f9      	ldr	r1, [r7, #12]
 800fb06:	2008      	movs	r0, #8
 800fb08:	f000 fe60 	bl	80107cc <memp_free>
    return ERR_MEM;
 800fb0c:	f04f 33ff 	mov.w	r3, #4294967295
 800fb10:	e000      	b.n	800fb14 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3710      	adds	r7, #16
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	24004ab0 	.word	0x24004ab0
 800fb20:	0801be70 	.word	0x0801be70
 800fb24:	0801bee8 	.word	0x0801bee8
 800fb28:	0801bec0 	.word	0x0801bec0

0800fb2c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af02      	add	r7, sp, #8
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  lwip_init();
 800fb36:	f000 f92d 	bl	800fd94 <lwip_init>

  tcpip_init_done = initfunc;
 800fb3a:	4a17      	ldr	r2, [pc, #92]	; (800fb98 <tcpip_init+0x6c>)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800fb40:	4a16      	ldr	r2, [pc, #88]	; (800fb9c <tcpip_init+0x70>)
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800fb46:	2106      	movs	r1, #6
 800fb48:	4815      	ldr	r0, [pc, #84]	; (800fba0 <tcpip_init+0x74>)
 800fb4a:	f00a fe89 	bl	801a860 <sys_mbox_new>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d006      	beq.n	800fb62 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800fb54:	4b13      	ldr	r3, [pc, #76]	; (800fba4 <tcpip_init+0x78>)
 800fb56:	f240 2261 	movw	r2, #609	; 0x261
 800fb5a:	4913      	ldr	r1, [pc, #76]	; (800fba8 <tcpip_init+0x7c>)
 800fb5c:	4813      	ldr	r0, [pc, #76]	; (800fbac <tcpip_init+0x80>)
 800fb5e:	f00b f90d 	bl	801ad7c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800fb62:	4813      	ldr	r0, [pc, #76]	; (800fbb0 <tcpip_init+0x84>)
 800fb64:	f00a fefe 	bl	801a964 <sys_mutex_new>
 800fb68:	4603      	mov	r3, r0
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d006      	beq.n	800fb7c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800fb6e:	4b0d      	ldr	r3, [pc, #52]	; (800fba4 <tcpip_init+0x78>)
 800fb70:	f240 2265 	movw	r2, #613	; 0x265
 800fb74:	490f      	ldr	r1, [pc, #60]	; (800fbb4 <tcpip_init+0x88>)
 800fb76:	480d      	ldr	r0, [pc, #52]	; (800fbac <tcpip_init+0x80>)
 800fb78:	f00b f900 	bl	801ad7c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800fb7c:	2318      	movs	r3, #24
 800fb7e:	9300      	str	r3, [sp, #0]
 800fb80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fb84:	2200      	movs	r2, #0
 800fb86:	490c      	ldr	r1, [pc, #48]	; (800fbb8 <tcpip_init+0x8c>)
 800fb88:	480c      	ldr	r0, [pc, #48]	; (800fbbc <tcpip_init+0x90>)
 800fb8a:	f00a ff1d 	bl	801a9c8 <sys_thread_new>
}
 800fb8e:	bf00      	nop
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
 800fb96:	bf00      	nop
 800fb98:	24004aa8 	.word	0x24004aa8
 800fb9c:	24004aac 	.word	0x24004aac
 800fba0:	24004ab0 	.word	0x24004ab0
 800fba4:	0801be70 	.word	0x0801be70
 800fba8:	0801bef8 	.word	0x0801bef8
 800fbac:	0801bec0 	.word	0x0801bec0
 800fbb0:	240051ac 	.word	0x240051ac
 800fbb4:	0801bf1c 	.word	0x0801bf1c
 800fbb8:	0800f8e9 	.word	0x0800f8e9
 800fbbc:	0801bf40 	.word	0x0801bf40

0800fbc0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fbca:	88fb      	ldrh	r3, [r7, #6]
 800fbcc:	021b      	lsls	r3, r3, #8
 800fbce:	b21a      	sxth	r2, r3
 800fbd0:	88fb      	ldrh	r3, [r7, #6]
 800fbd2:	0a1b      	lsrs	r3, r3, #8
 800fbd4:	b29b      	uxth	r3, r3
 800fbd6:	b21b      	sxth	r3, r3
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	b21b      	sxth	r3, r3
 800fbdc:	b29b      	uxth	r3, r3
}
 800fbde:	4618      	mov	r0, r3
 800fbe0:	370c      	adds	r7, #12
 800fbe2:	46bd      	mov	sp, r7
 800fbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe8:	4770      	bx	lr

0800fbea <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fbea:	b480      	push	{r7}
 800fbec:	b083      	sub	sp, #12
 800fbee:	af00      	add	r7, sp, #0
 800fbf0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	061a      	lsls	r2, r3, #24
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	021b      	lsls	r3, r3, #8
 800fbfa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fbfe:	431a      	orrs	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	0a1b      	lsrs	r3, r3, #8
 800fc04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fc08:	431a      	orrs	r2, r3
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	0e1b      	lsrs	r3, r3, #24
 800fc0e:	4313      	orrs	r3, r2
}
 800fc10:	4618      	mov	r0, r3
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr

0800fc1c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800fc1c:	b480      	push	{r7}
 800fc1e:	b089      	sub	sp, #36	; 0x24
 800fc20:	af00      	add	r7, sp, #0
 800fc22:	6078      	str	r0, [r7, #4]
 800fc24:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fc2e:	2300      	movs	r3, #0
 800fc30:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fc32:	69fb      	ldr	r3, [r7, #28]
 800fc34:	f003 0301 	and.w	r3, r3, #1
 800fc38:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fc3a:	693b      	ldr	r3, [r7, #16]
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d00d      	beq.n	800fc5c <lwip_standard_chksum+0x40>
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	dd0a      	ble.n	800fc5c <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fc46:	69fa      	ldr	r2, [r7, #28]
 800fc48:	1c53      	adds	r3, r2, #1
 800fc4a:	61fb      	str	r3, [r7, #28]
 800fc4c:	f107 030e 	add.w	r3, r7, #14
 800fc50:	3301      	adds	r3, #1
 800fc52:	7812      	ldrb	r2, [r2, #0]
 800fc54:	701a      	strb	r2, [r3, #0]
    len--;
 800fc56:	683b      	ldr	r3, [r7, #0]
 800fc58:	3b01      	subs	r3, #1
 800fc5a:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fc5c:	69fb      	ldr	r3, [r7, #28]
 800fc5e:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fc60:	e00a      	b.n	800fc78 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fc62:	69bb      	ldr	r3, [r7, #24]
 800fc64:	1c9a      	adds	r2, r3, #2
 800fc66:	61ba      	str	r2, [r7, #24]
 800fc68:	881b      	ldrh	r3, [r3, #0]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	697b      	ldr	r3, [r7, #20]
 800fc6e:	4413      	add	r3, r2
 800fc70:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	3b02      	subs	r3, #2
 800fc76:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fc78:	683b      	ldr	r3, [r7, #0]
 800fc7a:	2b01      	cmp	r3, #1
 800fc7c:	dcf1      	bgt.n	800fc62 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fc7e:	683b      	ldr	r3, [r7, #0]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	dd04      	ble.n	800fc8e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fc84:	f107 030e 	add.w	r3, r7, #14
 800fc88:	69ba      	ldr	r2, [r7, #24]
 800fc8a:	7812      	ldrb	r2, [r2, #0]
 800fc8c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800fc8e:	89fb      	ldrh	r3, [r7, #14]
 800fc90:	461a      	mov	r2, r3
 800fc92:	697b      	ldr	r3, [r7, #20]
 800fc94:	4413      	add	r3, r2
 800fc96:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	0c1a      	lsrs	r2, r3, #16
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	b29b      	uxth	r3, r3
 800fca0:	4413      	add	r3, r2
 800fca2:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fca4:	697b      	ldr	r3, [r7, #20]
 800fca6:	0c1a      	lsrs	r2, r3, #16
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	4413      	add	r3, r2
 800fcae:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fcb0:	693b      	ldr	r3, [r7, #16]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d007      	beq.n	800fcc6 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fcb6:	697b      	ldr	r3, [r7, #20]
 800fcb8:	021b      	lsls	r3, r3, #8
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	697b      	ldr	r3, [r7, #20]
 800fcbe:	0a1b      	lsrs	r3, r3, #8
 800fcc0:	b2db      	uxtb	r3, r3
 800fcc2:	4313      	orrs	r3, r2
 800fcc4:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fcc6:	697b      	ldr	r3, [r7, #20]
 800fcc8:	b29b      	uxth	r3, r3
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3724      	adds	r7, #36	; 0x24
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr

0800fcd6 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800fcd6:	b580      	push	{r7, lr}
 800fcd8:	b082      	sub	sp, #8
 800fcda:	af00      	add	r7, sp, #0
 800fcdc:	6078      	str	r0, [r7, #4]
 800fcde:	460b      	mov	r3, r1
 800fce0:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fce2:	887b      	ldrh	r3, [r7, #2]
 800fce4:	4619      	mov	r1, r3
 800fce6:	6878      	ldr	r0, [r7, #4]
 800fce8:	f7ff ff98 	bl	800fc1c <lwip_standard_chksum>
 800fcec:	4603      	mov	r3, r0
 800fcee:	43db      	mvns	r3, r3
 800fcf0:	b29b      	uxth	r3, r3
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}

0800fcfa <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fcfa:	b580      	push	{r7, lr}
 800fcfc:	b086      	sub	sp, #24
 800fcfe:	af00      	add	r7, sp, #0
 800fd00:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800fd02:	2300      	movs	r3, #0
 800fd04:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800fd06:	2300      	movs	r3, #0
 800fd08:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	613b      	str	r3, [r7, #16]
 800fd0e:	e02b      	b.n	800fd68 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800fd10:	693b      	ldr	r3, [r7, #16]
 800fd12:	685a      	ldr	r2, [r3, #4]
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	895b      	ldrh	r3, [r3, #10]
 800fd18:	4619      	mov	r1, r3
 800fd1a:	4610      	mov	r0, r2
 800fd1c:	f7ff ff7e 	bl	800fc1c <lwip_standard_chksum>
 800fd20:	4603      	mov	r3, r0
 800fd22:	461a      	mov	r2, r3
 800fd24:	697b      	ldr	r3, [r7, #20]
 800fd26:	4413      	add	r3, r2
 800fd28:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	0c1a      	lsrs	r2, r3, #16
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	b29b      	uxth	r3, r3
 800fd32:	4413      	add	r3, r2
 800fd34:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	895b      	ldrh	r3, [r3, #10]
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	b29b      	uxth	r3, r3
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d00e      	beq.n	800fd62 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	bf0c      	ite	eq
 800fd4a:	2301      	moveq	r3, #1
 800fd4c:	2300      	movne	r3, #0
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800fd52:	697b      	ldr	r3, [r7, #20]
 800fd54:	021b      	lsls	r3, r3, #8
 800fd56:	b29a      	uxth	r2, r3
 800fd58:	697b      	ldr	r3, [r7, #20]
 800fd5a:	0a1b      	lsrs	r3, r3, #8
 800fd5c:	b2db      	uxtb	r3, r3
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fd62:	693b      	ldr	r3, [r7, #16]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	613b      	str	r3, [r7, #16]
 800fd68:	693b      	ldr	r3, [r7, #16]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d1d0      	bne.n	800fd10 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800fd6e:	68fb      	ldr	r3, [r7, #12]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d007      	beq.n	800fd84 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	021b      	lsls	r3, r3, #8
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	0a1b      	lsrs	r3, r3, #8
 800fd7e:	b2db      	uxtb	r3, r3
 800fd80:	4313      	orrs	r3, r2
 800fd82:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800fd84:	697b      	ldr	r3, [r7, #20]
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	43db      	mvns	r3, r3
 800fd8a:	b29b      	uxth	r3, r3
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}

0800fd94 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b082      	sub	sp, #8
 800fd98:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fd9e:	f00a fdd5 	bl	801a94c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fda2:	f000 f8d5 	bl	800ff50 <mem_init>
  memp_init();
 800fda6:	f000 fc2d 	bl	8010604 <memp_init>
  pbuf_init();
  netif_init();
 800fdaa:	f000 fd39 	bl	8010820 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fdae:	f008 f825 	bl	8017dfc <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fdb2:	f001 fe59 	bl	8011a68 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fdb6:	f007 ff67 	bl	8017c88 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fdba:	bf00      	nop
 800fdbc:	3708      	adds	r7, #8
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
	...

0800fdc4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	4603      	mov	r3, r0
 800fdcc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fdce:	4b05      	ldr	r3, [pc, #20]	; (800fde4 <ptr_to_mem+0x20>)
 800fdd0:	681a      	ldr	r2, [r3, #0]
 800fdd2:	88fb      	ldrh	r3, [r7, #6]
 800fdd4:	4413      	add	r3, r2
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
 800fde2:	bf00      	nop
 800fde4:	24004ab4 	.word	0x24004ab4

0800fde8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fdf0:	4b05      	ldr	r3, [pc, #20]	; (800fe08 <mem_to_ptr+0x20>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	687a      	ldr	r2, [r7, #4]
 800fdf6:	1ad3      	subs	r3, r2, r3
 800fdf8:	b29b      	uxth	r3, r3
}
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	370c      	adds	r7, #12
 800fdfe:	46bd      	mov	sp, r7
 800fe00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe04:	4770      	bx	lr
 800fe06:	bf00      	nop
 800fe08:	24004ab4 	.word	0x24004ab4

0800fe0c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fe0c:	b590      	push	{r4, r7, lr}
 800fe0e:	b085      	sub	sp, #20
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fe14:	4b45      	ldr	r3, [pc, #276]	; (800ff2c <plug_holes+0x120>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d206      	bcs.n	800fe2c <plug_holes+0x20>
 800fe1e:	4b44      	ldr	r3, [pc, #272]	; (800ff30 <plug_holes+0x124>)
 800fe20:	f240 12df 	movw	r2, #479	; 0x1df
 800fe24:	4943      	ldr	r1, [pc, #268]	; (800ff34 <plug_holes+0x128>)
 800fe26:	4844      	ldr	r0, [pc, #272]	; (800ff38 <plug_holes+0x12c>)
 800fe28:	f00a ffa8 	bl	801ad7c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fe2c:	4b43      	ldr	r3, [pc, #268]	; (800ff3c <plug_holes+0x130>)
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	687a      	ldr	r2, [r7, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d306      	bcc.n	800fe44 <plug_holes+0x38>
 800fe36:	4b3e      	ldr	r3, [pc, #248]	; (800ff30 <plug_holes+0x124>)
 800fe38:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fe3c:	4940      	ldr	r1, [pc, #256]	; (800ff40 <plug_holes+0x134>)
 800fe3e:	483e      	ldr	r0, [pc, #248]	; (800ff38 <plug_holes+0x12c>)
 800fe40:	f00a ff9c 	bl	801ad7c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	791b      	ldrb	r3, [r3, #4]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d006      	beq.n	800fe5a <plug_holes+0x4e>
 800fe4c:	4b38      	ldr	r3, [pc, #224]	; (800ff30 <plug_holes+0x124>)
 800fe4e:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fe52:	493c      	ldr	r1, [pc, #240]	; (800ff44 <plug_holes+0x138>)
 800fe54:	4838      	ldr	r0, [pc, #224]	; (800ff38 <plug_holes+0x12c>)
 800fe56:	f00a ff91 	bl	801ad7c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	881b      	ldrh	r3, [r3, #0]
 800fe5e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800fe62:	d906      	bls.n	800fe72 <plug_holes+0x66>
 800fe64:	4b32      	ldr	r3, [pc, #200]	; (800ff30 <plug_holes+0x124>)
 800fe66:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fe6a:	4937      	ldr	r1, [pc, #220]	; (800ff48 <plug_holes+0x13c>)
 800fe6c:	4832      	ldr	r0, [pc, #200]	; (800ff38 <plug_holes+0x12c>)
 800fe6e:	f00a ff85 	bl	801ad7c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	881b      	ldrh	r3, [r3, #0]
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7ff ffa4 	bl	800fdc4 <ptr_to_mem>
 800fe7c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	429a      	cmp	r2, r3
 800fe84:	d024      	beq.n	800fed0 <plug_holes+0xc4>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	791b      	ldrb	r3, [r3, #4]
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d120      	bne.n	800fed0 <plug_holes+0xc4>
 800fe8e:	4b2b      	ldr	r3, [pc, #172]	; (800ff3c <plug_holes+0x130>)
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	68fa      	ldr	r2, [r7, #12]
 800fe94:	429a      	cmp	r2, r3
 800fe96:	d01b      	beq.n	800fed0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fe98:	4b2c      	ldr	r3, [pc, #176]	; (800ff4c <plug_holes+0x140>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	68fa      	ldr	r2, [r7, #12]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d102      	bne.n	800fea8 <plug_holes+0x9c>
      lfree = mem;
 800fea2:	4a2a      	ldr	r2, [pc, #168]	; (800ff4c <plug_holes+0x140>)
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	881a      	ldrh	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	881b      	ldrh	r3, [r3, #0]
 800feb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800feb8:	d00a      	beq.n	800fed0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	881b      	ldrh	r3, [r3, #0]
 800febe:	4618      	mov	r0, r3
 800fec0:	f7ff ff80 	bl	800fdc4 <ptr_to_mem>
 800fec4:	4604      	mov	r4, r0
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	f7ff ff8e 	bl	800fde8 <mem_to_ptr>
 800fecc:	4603      	mov	r3, r0
 800fece:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	885b      	ldrh	r3, [r3, #2]
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7ff ff75 	bl	800fdc4 <ptr_to_mem>
 800feda:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fedc:	68ba      	ldr	r2, [r7, #8]
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	d01f      	beq.n	800ff24 <plug_holes+0x118>
 800fee4:	68bb      	ldr	r3, [r7, #8]
 800fee6:	791b      	ldrb	r3, [r3, #4]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d11b      	bne.n	800ff24 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800feec:	4b17      	ldr	r3, [pc, #92]	; (800ff4c <plug_holes+0x140>)
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	687a      	ldr	r2, [r7, #4]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d102      	bne.n	800fefc <plug_holes+0xf0>
      lfree = pmem;
 800fef6:	4a15      	ldr	r2, [pc, #84]	; (800ff4c <plug_holes+0x140>)
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	881a      	ldrh	r2, [r3, #0]
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	881b      	ldrh	r3, [r3, #0]
 800ff08:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ff0c:	d00a      	beq.n	800ff24 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	881b      	ldrh	r3, [r3, #0]
 800ff12:	4618      	mov	r0, r3
 800ff14:	f7ff ff56 	bl	800fdc4 <ptr_to_mem>
 800ff18:	4604      	mov	r4, r0
 800ff1a:	68b8      	ldr	r0, [r7, #8]
 800ff1c:	f7ff ff64 	bl	800fde8 <mem_to_ptr>
 800ff20:	4603      	mov	r3, r0
 800ff22:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800ff24:	bf00      	nop
 800ff26:	3714      	adds	r7, #20
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	bd90      	pop	{r4, r7, pc}
 800ff2c:	24004ab4 	.word	0x24004ab4
 800ff30:	0801bf50 	.word	0x0801bf50
 800ff34:	0801bf80 	.word	0x0801bf80
 800ff38:	0801bf98 	.word	0x0801bf98
 800ff3c:	24004ab8 	.word	0x24004ab8
 800ff40:	0801bfc0 	.word	0x0801bfc0
 800ff44:	0801bfdc 	.word	0x0801bfdc
 800ff48:	0801bff8 	.word	0x0801bff8
 800ff4c:	24004ac0 	.word	0x24004ac0

0800ff50 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ff50:	b580      	push	{r7, lr}
 800ff52:	b082      	sub	sp, #8
 800ff54:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ff56:	4b1d      	ldr	r3, [pc, #116]	; (800ffcc <mem_init+0x7c>)
 800ff58:	4a1d      	ldr	r2, [pc, #116]	; (800ffd0 <mem_init+0x80>)
 800ff5a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ff5c:	4b1b      	ldr	r3, [pc, #108]	; (800ffcc <mem_init+0x7c>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ff68:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	2200      	movs	r2, #0
 800ff74:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ff76:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800ff7a:	f7ff ff23 	bl	800fdc4 <ptr_to_mem>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	4a14      	ldr	r2, [pc, #80]	; (800ffd4 <mem_init+0x84>)
 800ff82:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ff84:	4b13      	ldr	r3, [pc, #76]	; (800ffd4 <mem_init+0x84>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	2201      	movs	r2, #1
 800ff8a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ff8c:	4b11      	ldr	r3, [pc, #68]	; (800ffd4 <mem_init+0x84>)
 800ff8e:	681b      	ldr	r3, [r3, #0]
 800ff90:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ff94:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ff96:	4b0f      	ldr	r3, [pc, #60]	; (800ffd4 <mem_init+0x84>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ff9e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ffa0:	4b0a      	ldr	r3, [pc, #40]	; (800ffcc <mem_init+0x7c>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4a0c      	ldr	r2, [pc, #48]	; (800ffd8 <mem_init+0x88>)
 800ffa6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ffa8:	480c      	ldr	r0, [pc, #48]	; (800ffdc <mem_init+0x8c>)
 800ffaa:	f00a fcdb 	bl	801a964 <sys_mutex_new>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d006      	beq.n	800ffc2 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ffb4:	4b0a      	ldr	r3, [pc, #40]	; (800ffe0 <mem_init+0x90>)
 800ffb6:	f240 221f 	movw	r2, #543	; 0x21f
 800ffba:	490a      	ldr	r1, [pc, #40]	; (800ffe4 <mem_init+0x94>)
 800ffbc:	480a      	ldr	r0, [pc, #40]	; (800ffe8 <mem_init+0x98>)
 800ffbe:	f00a fedd 	bl	801ad7c <iprintf>
  }
}
 800ffc2:	bf00      	nop
 800ffc4:	3708      	adds	r7, #8
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	24004ab4 	.word	0x24004ab4
 800ffd0:	30002000 	.word	0x30002000
 800ffd4:	24004ab8 	.word	0x24004ab8
 800ffd8:	24004ac0 	.word	0x24004ac0
 800ffdc:	24004abc 	.word	0x24004abc
 800ffe0:	0801bf50 	.word	0x0801bf50
 800ffe4:	0801c024 	.word	0x0801c024
 800ffe8:	0801bf98 	.word	0x0801bf98

0800ffec <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ffec:	b580      	push	{r7, lr}
 800ffee:	b086      	sub	sp, #24
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fff4:	6878      	ldr	r0, [r7, #4]
 800fff6:	f7ff fef7 	bl	800fde8 <mem_to_ptr>
 800fffa:	4603      	mov	r3, r0
 800fffc:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	881b      	ldrh	r3, [r3, #0]
 8010002:	4618      	mov	r0, r3
 8010004:	f7ff fede 	bl	800fdc4 <ptr_to_mem>
 8010008:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	885b      	ldrh	r3, [r3, #2]
 801000e:	4618      	mov	r0, r3
 8010010:	f7ff fed8 	bl	800fdc4 <ptr_to_mem>
 8010014:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	881b      	ldrh	r3, [r3, #0]
 801001a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801001e:	d818      	bhi.n	8010052 <mem_link_valid+0x66>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	885b      	ldrh	r3, [r3, #2]
 8010024:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010028:	d813      	bhi.n	8010052 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801002e:	8afa      	ldrh	r2, [r7, #22]
 8010030:	429a      	cmp	r2, r3
 8010032:	d004      	beq.n	801003e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	8afa      	ldrh	r2, [r7, #22]
 801003a:	429a      	cmp	r2, r3
 801003c:	d109      	bne.n	8010052 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801003e:	4b08      	ldr	r3, [pc, #32]	; (8010060 <mem_link_valid+0x74>)
 8010040:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010042:	693a      	ldr	r2, [r7, #16]
 8010044:	429a      	cmp	r2, r3
 8010046:	d006      	beq.n	8010056 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8010048:	693b      	ldr	r3, [r7, #16]
 801004a:	885b      	ldrh	r3, [r3, #2]
 801004c:	8afa      	ldrh	r2, [r7, #22]
 801004e:	429a      	cmp	r2, r3
 8010050:	d001      	beq.n	8010056 <mem_link_valid+0x6a>
    return 0;
 8010052:	2300      	movs	r3, #0
 8010054:	e000      	b.n	8010058 <mem_link_valid+0x6c>
  }
  return 1;
 8010056:	2301      	movs	r3, #1
}
 8010058:	4618      	mov	r0, r3
 801005a:	3718      	adds	r7, #24
 801005c:	46bd      	mov	sp, r7
 801005e:	bd80      	pop	{r7, pc}
 8010060:	24004ab8 	.word	0x24004ab8

08010064 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b088      	sub	sp, #32
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d070      	beq.n	8010154 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f003 0303 	and.w	r3, r3, #3
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00d      	beq.n	8010098 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801007c:	4b37      	ldr	r3, [pc, #220]	; (801015c <mem_free+0xf8>)
 801007e:	f240 2273 	movw	r2, #627	; 0x273
 8010082:	4937      	ldr	r1, [pc, #220]	; (8010160 <mem_free+0xfc>)
 8010084:	4837      	ldr	r0, [pc, #220]	; (8010164 <mem_free+0x100>)
 8010086:	f00a fe79 	bl	801ad7c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801008a:	f00a fcbd 	bl	801aa08 <sys_arch_protect>
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	68f8      	ldr	r0, [r7, #12]
 8010092:	f00a fcc7 	bl	801aa24 <sys_arch_unprotect>
    return;
 8010096:	e05e      	b.n	8010156 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	3b08      	subs	r3, #8
 801009c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801009e:	4b32      	ldr	r3, [pc, #200]	; (8010168 <mem_free+0x104>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	69fa      	ldr	r2, [r7, #28]
 80100a4:	429a      	cmp	r2, r3
 80100a6:	d306      	bcc.n	80100b6 <mem_free+0x52>
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f103 020c 	add.w	r2, r3, #12
 80100ae:	4b2f      	ldr	r3, [pc, #188]	; (801016c <mem_free+0x108>)
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d90d      	bls.n	80100d2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80100b6:	4b29      	ldr	r3, [pc, #164]	; (801015c <mem_free+0xf8>)
 80100b8:	f240 227f 	movw	r2, #639	; 0x27f
 80100bc:	492c      	ldr	r1, [pc, #176]	; (8010170 <mem_free+0x10c>)
 80100be:	4829      	ldr	r0, [pc, #164]	; (8010164 <mem_free+0x100>)
 80100c0:	f00a fe5c 	bl	801ad7c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80100c4:	f00a fca0 	bl	801aa08 <sys_arch_protect>
 80100c8:	6138      	str	r0, [r7, #16]
 80100ca:	6938      	ldr	r0, [r7, #16]
 80100cc:	f00a fcaa 	bl	801aa24 <sys_arch_unprotect>
    return;
 80100d0:	e041      	b.n	8010156 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80100d2:	4828      	ldr	r0, [pc, #160]	; (8010174 <mem_free+0x110>)
 80100d4:	f00a fc5c 	bl	801a990 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80100d8:	69fb      	ldr	r3, [r7, #28]
 80100da:	791b      	ldrb	r3, [r3, #4]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d110      	bne.n	8010102 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80100e0:	4b1e      	ldr	r3, [pc, #120]	; (801015c <mem_free+0xf8>)
 80100e2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80100e6:	4924      	ldr	r1, [pc, #144]	; (8010178 <mem_free+0x114>)
 80100e8:	481e      	ldr	r0, [pc, #120]	; (8010164 <mem_free+0x100>)
 80100ea:	f00a fe47 	bl	801ad7c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80100ee:	4821      	ldr	r0, [pc, #132]	; (8010174 <mem_free+0x110>)
 80100f0:	f00a fc5d 	bl	801a9ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80100f4:	f00a fc88 	bl	801aa08 <sys_arch_protect>
 80100f8:	6178      	str	r0, [r7, #20]
 80100fa:	6978      	ldr	r0, [r7, #20]
 80100fc:	f00a fc92 	bl	801aa24 <sys_arch_unprotect>
    return;
 8010100:	e029      	b.n	8010156 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010102:	69f8      	ldr	r0, [r7, #28]
 8010104:	f7ff ff72 	bl	800ffec <mem_link_valid>
 8010108:	4603      	mov	r3, r0
 801010a:	2b00      	cmp	r3, #0
 801010c:	d110      	bne.n	8010130 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801010e:	4b13      	ldr	r3, [pc, #76]	; (801015c <mem_free+0xf8>)
 8010110:	f240 2295 	movw	r2, #661	; 0x295
 8010114:	4919      	ldr	r1, [pc, #100]	; (801017c <mem_free+0x118>)
 8010116:	4813      	ldr	r0, [pc, #76]	; (8010164 <mem_free+0x100>)
 8010118:	f00a fe30 	bl	801ad7c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801011c:	4815      	ldr	r0, [pc, #84]	; (8010174 <mem_free+0x110>)
 801011e:	f00a fc46 	bl	801a9ae <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010122:	f00a fc71 	bl	801aa08 <sys_arch_protect>
 8010126:	61b8      	str	r0, [r7, #24]
 8010128:	69b8      	ldr	r0, [r7, #24]
 801012a:	f00a fc7b 	bl	801aa24 <sys_arch_unprotect>
    return;
 801012e:	e012      	b.n	8010156 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	2200      	movs	r2, #0
 8010134:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010136:	4b12      	ldr	r3, [pc, #72]	; (8010180 <mem_free+0x11c>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	69fa      	ldr	r2, [r7, #28]
 801013c:	429a      	cmp	r2, r3
 801013e:	d202      	bcs.n	8010146 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010140:	4a0f      	ldr	r2, [pc, #60]	; (8010180 <mem_free+0x11c>)
 8010142:	69fb      	ldr	r3, [r7, #28]
 8010144:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010146:	69f8      	ldr	r0, [r7, #28]
 8010148:	f7ff fe60 	bl	800fe0c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801014c:	4809      	ldr	r0, [pc, #36]	; (8010174 <mem_free+0x110>)
 801014e:	f00a fc2e 	bl	801a9ae <sys_mutex_unlock>
 8010152:	e000      	b.n	8010156 <mem_free+0xf2>
    return;
 8010154:	bf00      	nop
}
 8010156:	3720      	adds	r7, #32
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}
 801015c:	0801bf50 	.word	0x0801bf50
 8010160:	0801c040 	.word	0x0801c040
 8010164:	0801bf98 	.word	0x0801bf98
 8010168:	24004ab4 	.word	0x24004ab4
 801016c:	24004ab8 	.word	0x24004ab8
 8010170:	0801c064 	.word	0x0801c064
 8010174:	24004abc 	.word	0x24004abc
 8010178:	0801c080 	.word	0x0801c080
 801017c:	0801c0a8 	.word	0x0801c0a8
 8010180:	24004ac0 	.word	0x24004ac0

08010184 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b088      	sub	sp, #32
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	460b      	mov	r3, r1
 801018e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010190:	887b      	ldrh	r3, [r7, #2]
 8010192:	3303      	adds	r3, #3
 8010194:	b29b      	uxth	r3, r3
 8010196:	f023 0303 	bic.w	r3, r3, #3
 801019a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801019c:	8bfb      	ldrh	r3, [r7, #30]
 801019e:	2b0b      	cmp	r3, #11
 80101a0:	d801      	bhi.n	80101a6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80101a2:	230c      	movs	r3, #12
 80101a4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80101a6:	8bfb      	ldrh	r3, [r7, #30]
 80101a8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80101ac:	d803      	bhi.n	80101b6 <mem_trim+0x32>
 80101ae:	8bfa      	ldrh	r2, [r7, #30]
 80101b0:	887b      	ldrh	r3, [r7, #2]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d201      	bcs.n	80101ba <mem_trim+0x36>
    return NULL;
 80101b6:	2300      	movs	r3, #0
 80101b8:	e0d8      	b.n	801036c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80101ba:	4b6e      	ldr	r3, [pc, #440]	; (8010374 <mem_trim+0x1f0>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	687a      	ldr	r2, [r7, #4]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d304      	bcc.n	80101ce <mem_trim+0x4a>
 80101c4:	4b6c      	ldr	r3, [pc, #432]	; (8010378 <mem_trim+0x1f4>)
 80101c6:	681b      	ldr	r3, [r3, #0]
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d306      	bcc.n	80101dc <mem_trim+0x58>
 80101ce:	4b6b      	ldr	r3, [pc, #428]	; (801037c <mem_trim+0x1f8>)
 80101d0:	f240 22d1 	movw	r2, #721	; 0x2d1
 80101d4:	496a      	ldr	r1, [pc, #424]	; (8010380 <mem_trim+0x1fc>)
 80101d6:	486b      	ldr	r0, [pc, #428]	; (8010384 <mem_trim+0x200>)
 80101d8:	f00a fdd0 	bl	801ad7c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80101dc:	4b65      	ldr	r3, [pc, #404]	; (8010374 <mem_trim+0x1f0>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	687a      	ldr	r2, [r7, #4]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d304      	bcc.n	80101f0 <mem_trim+0x6c>
 80101e6:	4b64      	ldr	r3, [pc, #400]	; (8010378 <mem_trim+0x1f4>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	687a      	ldr	r2, [r7, #4]
 80101ec:	429a      	cmp	r2, r3
 80101ee:	d307      	bcc.n	8010200 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80101f0:	f00a fc0a 	bl	801aa08 <sys_arch_protect>
 80101f4:	60b8      	str	r0, [r7, #8]
 80101f6:	68b8      	ldr	r0, [r7, #8]
 80101f8:	f00a fc14 	bl	801aa24 <sys_arch_unprotect>
    return rmem;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	e0b5      	b.n	801036c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	3b08      	subs	r3, #8
 8010204:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010206:	69b8      	ldr	r0, [r7, #24]
 8010208:	f7ff fdee 	bl	800fde8 <mem_to_ptr>
 801020c:	4603      	mov	r3, r0
 801020e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010210:	69bb      	ldr	r3, [r7, #24]
 8010212:	881a      	ldrh	r2, [r3, #0]
 8010214:	8afb      	ldrh	r3, [r7, #22]
 8010216:	1ad3      	subs	r3, r2, r3
 8010218:	b29b      	uxth	r3, r3
 801021a:	3b08      	subs	r3, #8
 801021c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801021e:	8bfa      	ldrh	r2, [r7, #30]
 8010220:	8abb      	ldrh	r3, [r7, #20]
 8010222:	429a      	cmp	r2, r3
 8010224:	d906      	bls.n	8010234 <mem_trim+0xb0>
 8010226:	4b55      	ldr	r3, [pc, #340]	; (801037c <mem_trim+0x1f8>)
 8010228:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801022c:	4956      	ldr	r1, [pc, #344]	; (8010388 <mem_trim+0x204>)
 801022e:	4855      	ldr	r0, [pc, #340]	; (8010384 <mem_trim+0x200>)
 8010230:	f00a fda4 	bl	801ad7c <iprintf>
  if (newsize > size) {
 8010234:	8bfa      	ldrh	r2, [r7, #30]
 8010236:	8abb      	ldrh	r3, [r7, #20]
 8010238:	429a      	cmp	r2, r3
 801023a:	d901      	bls.n	8010240 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 801023c:	2300      	movs	r3, #0
 801023e:	e095      	b.n	801036c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010240:	8bfa      	ldrh	r2, [r7, #30]
 8010242:	8abb      	ldrh	r3, [r7, #20]
 8010244:	429a      	cmp	r2, r3
 8010246:	d101      	bne.n	801024c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	e08f      	b.n	801036c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801024c:	484f      	ldr	r0, [pc, #316]	; (801038c <mem_trim+0x208>)
 801024e:	f00a fb9f 	bl	801a990 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010252:	69bb      	ldr	r3, [r7, #24]
 8010254:	881b      	ldrh	r3, [r3, #0]
 8010256:	4618      	mov	r0, r3
 8010258:	f7ff fdb4 	bl	800fdc4 <ptr_to_mem>
 801025c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	791b      	ldrb	r3, [r3, #4]
 8010262:	2b00      	cmp	r3, #0
 8010264:	d13f      	bne.n	80102e6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010266:	69bb      	ldr	r3, [r7, #24]
 8010268:	881b      	ldrh	r3, [r3, #0]
 801026a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801026e:	d106      	bne.n	801027e <mem_trim+0xfa>
 8010270:	4b42      	ldr	r3, [pc, #264]	; (801037c <mem_trim+0x1f8>)
 8010272:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010276:	4946      	ldr	r1, [pc, #280]	; (8010390 <mem_trim+0x20c>)
 8010278:	4842      	ldr	r0, [pc, #264]	; (8010384 <mem_trim+0x200>)
 801027a:	f00a fd7f 	bl	801ad7c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	881b      	ldrh	r3, [r3, #0]
 8010282:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010284:	8afa      	ldrh	r2, [r7, #22]
 8010286:	8bfb      	ldrh	r3, [r7, #30]
 8010288:	4413      	add	r3, r2
 801028a:	b29b      	uxth	r3, r3
 801028c:	3308      	adds	r3, #8
 801028e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010290:	4b40      	ldr	r3, [pc, #256]	; (8010394 <mem_trim+0x210>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	693a      	ldr	r2, [r7, #16]
 8010296:	429a      	cmp	r2, r3
 8010298:	d106      	bne.n	80102a8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 801029a:	89fb      	ldrh	r3, [r7, #14]
 801029c:	4618      	mov	r0, r3
 801029e:	f7ff fd91 	bl	800fdc4 <ptr_to_mem>
 80102a2:	4603      	mov	r3, r0
 80102a4:	4a3b      	ldr	r2, [pc, #236]	; (8010394 <mem_trim+0x210>)
 80102a6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80102a8:	89fb      	ldrh	r3, [r7, #14]
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7ff fd8a 	bl	800fdc4 <ptr_to_mem>
 80102b0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80102b2:	693b      	ldr	r3, [r7, #16]
 80102b4:	2200      	movs	r2, #0
 80102b6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80102b8:	693b      	ldr	r3, [r7, #16]
 80102ba:	89ba      	ldrh	r2, [r7, #12]
 80102bc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80102be:	693b      	ldr	r3, [r7, #16]
 80102c0:	8afa      	ldrh	r2, [r7, #22]
 80102c2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80102c4:	69bb      	ldr	r3, [r7, #24]
 80102c6:	89fa      	ldrh	r2, [r7, #14]
 80102c8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	881b      	ldrh	r3, [r3, #0]
 80102ce:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80102d2:	d047      	beq.n	8010364 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	881b      	ldrh	r3, [r3, #0]
 80102d8:	4618      	mov	r0, r3
 80102da:	f7ff fd73 	bl	800fdc4 <ptr_to_mem>
 80102de:	4602      	mov	r2, r0
 80102e0:	89fb      	ldrh	r3, [r7, #14]
 80102e2:	8053      	strh	r3, [r2, #2]
 80102e4:	e03e      	b.n	8010364 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80102e6:	8bfb      	ldrh	r3, [r7, #30]
 80102e8:	f103 0214 	add.w	r2, r3, #20
 80102ec:	8abb      	ldrh	r3, [r7, #20]
 80102ee:	429a      	cmp	r2, r3
 80102f0:	d838      	bhi.n	8010364 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80102f2:	8afa      	ldrh	r2, [r7, #22]
 80102f4:	8bfb      	ldrh	r3, [r7, #30]
 80102f6:	4413      	add	r3, r2
 80102f8:	b29b      	uxth	r3, r3
 80102fa:	3308      	adds	r3, #8
 80102fc:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80102fe:	69bb      	ldr	r3, [r7, #24]
 8010300:	881b      	ldrh	r3, [r3, #0]
 8010302:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010306:	d106      	bne.n	8010316 <mem_trim+0x192>
 8010308:	4b1c      	ldr	r3, [pc, #112]	; (801037c <mem_trim+0x1f8>)
 801030a:	f240 3216 	movw	r2, #790	; 0x316
 801030e:	4920      	ldr	r1, [pc, #128]	; (8010390 <mem_trim+0x20c>)
 8010310:	481c      	ldr	r0, [pc, #112]	; (8010384 <mem_trim+0x200>)
 8010312:	f00a fd33 	bl	801ad7c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010316:	89fb      	ldrh	r3, [r7, #14]
 8010318:	4618      	mov	r0, r3
 801031a:	f7ff fd53 	bl	800fdc4 <ptr_to_mem>
 801031e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010320:	4b1c      	ldr	r3, [pc, #112]	; (8010394 <mem_trim+0x210>)
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	693a      	ldr	r2, [r7, #16]
 8010326:	429a      	cmp	r2, r3
 8010328:	d202      	bcs.n	8010330 <mem_trim+0x1ac>
      lfree = mem2;
 801032a:	4a1a      	ldr	r2, [pc, #104]	; (8010394 <mem_trim+0x210>)
 801032c:	693b      	ldr	r3, [r7, #16]
 801032e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010330:	693b      	ldr	r3, [r7, #16]
 8010332:	2200      	movs	r2, #0
 8010334:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010336:	69bb      	ldr	r3, [r7, #24]
 8010338:	881a      	ldrh	r2, [r3, #0]
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	8afa      	ldrh	r2, [r7, #22]
 8010342:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010344:	69bb      	ldr	r3, [r7, #24]
 8010346:	89fa      	ldrh	r2, [r7, #14]
 8010348:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	881b      	ldrh	r3, [r3, #0]
 801034e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010352:	d007      	beq.n	8010364 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	881b      	ldrh	r3, [r3, #0]
 8010358:	4618      	mov	r0, r3
 801035a:	f7ff fd33 	bl	800fdc4 <ptr_to_mem>
 801035e:	4602      	mov	r2, r0
 8010360:	89fb      	ldrh	r3, [r7, #14]
 8010362:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010364:	4809      	ldr	r0, [pc, #36]	; (801038c <mem_trim+0x208>)
 8010366:	f00a fb22 	bl	801a9ae <sys_mutex_unlock>
  return rmem;
 801036a:	687b      	ldr	r3, [r7, #4]
}
 801036c:	4618      	mov	r0, r3
 801036e:	3720      	adds	r7, #32
 8010370:	46bd      	mov	sp, r7
 8010372:	bd80      	pop	{r7, pc}
 8010374:	24004ab4 	.word	0x24004ab4
 8010378:	24004ab8 	.word	0x24004ab8
 801037c:	0801bf50 	.word	0x0801bf50
 8010380:	0801c0dc 	.word	0x0801c0dc
 8010384:	0801bf98 	.word	0x0801bf98
 8010388:	0801c0f4 	.word	0x0801c0f4
 801038c:	24004abc 	.word	0x24004abc
 8010390:	0801c114 	.word	0x0801c114
 8010394:	24004ac0 	.word	0x24004ac0

08010398 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b088      	sub	sp, #32
 801039c:	af00      	add	r7, sp, #0
 801039e:	4603      	mov	r3, r0
 80103a0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80103a2:	88fb      	ldrh	r3, [r7, #6]
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d101      	bne.n	80103ac <mem_malloc+0x14>
    return NULL;
 80103a8:	2300      	movs	r3, #0
 80103aa:	e0e2      	b.n	8010572 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80103ac:	88fb      	ldrh	r3, [r7, #6]
 80103ae:	3303      	adds	r3, #3
 80103b0:	b29b      	uxth	r3, r3
 80103b2:	f023 0303 	bic.w	r3, r3, #3
 80103b6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80103b8:	8bbb      	ldrh	r3, [r7, #28]
 80103ba:	2b0b      	cmp	r3, #11
 80103bc:	d801      	bhi.n	80103c2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80103be:	230c      	movs	r3, #12
 80103c0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80103c2:	8bbb      	ldrh	r3, [r7, #28]
 80103c4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80103c8:	d803      	bhi.n	80103d2 <mem_malloc+0x3a>
 80103ca:	8bba      	ldrh	r2, [r7, #28]
 80103cc:	88fb      	ldrh	r3, [r7, #6]
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d201      	bcs.n	80103d6 <mem_malloc+0x3e>
    return NULL;
 80103d2:	2300      	movs	r3, #0
 80103d4:	e0cd      	b.n	8010572 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80103d6:	4869      	ldr	r0, [pc, #420]	; (801057c <mem_malloc+0x1e4>)
 80103d8:	f00a fada 	bl	801a990 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80103dc:	4b68      	ldr	r3, [pc, #416]	; (8010580 <mem_malloc+0x1e8>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7ff fd01 	bl	800fde8 <mem_to_ptr>
 80103e6:	4603      	mov	r3, r0
 80103e8:	83fb      	strh	r3, [r7, #30]
 80103ea:	e0b7      	b.n	801055c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80103ec:	8bfb      	ldrh	r3, [r7, #30]
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7ff fce8 	bl	800fdc4 <ptr_to_mem>
 80103f4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80103f6:	697b      	ldr	r3, [r7, #20]
 80103f8:	791b      	ldrb	r3, [r3, #4]
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f040 80a7 	bne.w	801054e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010400:	697b      	ldr	r3, [r7, #20]
 8010402:	881b      	ldrh	r3, [r3, #0]
 8010404:	461a      	mov	r2, r3
 8010406:	8bfb      	ldrh	r3, [r7, #30]
 8010408:	1ad3      	subs	r3, r2, r3
 801040a:	f1a3 0208 	sub.w	r2, r3, #8
 801040e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010410:	429a      	cmp	r2, r3
 8010412:	f0c0 809c 	bcc.w	801054e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	881b      	ldrh	r3, [r3, #0]
 801041a:	461a      	mov	r2, r3
 801041c:	8bfb      	ldrh	r3, [r7, #30]
 801041e:	1ad3      	subs	r3, r2, r3
 8010420:	f1a3 0208 	sub.w	r2, r3, #8
 8010424:	8bbb      	ldrh	r3, [r7, #28]
 8010426:	3314      	adds	r3, #20
 8010428:	429a      	cmp	r2, r3
 801042a:	d333      	bcc.n	8010494 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801042c:	8bfa      	ldrh	r2, [r7, #30]
 801042e:	8bbb      	ldrh	r3, [r7, #28]
 8010430:	4413      	add	r3, r2
 8010432:	b29b      	uxth	r3, r3
 8010434:	3308      	adds	r3, #8
 8010436:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010438:	8a7b      	ldrh	r3, [r7, #18]
 801043a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801043e:	d106      	bne.n	801044e <mem_malloc+0xb6>
 8010440:	4b50      	ldr	r3, [pc, #320]	; (8010584 <mem_malloc+0x1ec>)
 8010442:	f240 3287 	movw	r2, #903	; 0x387
 8010446:	4950      	ldr	r1, [pc, #320]	; (8010588 <mem_malloc+0x1f0>)
 8010448:	4850      	ldr	r0, [pc, #320]	; (801058c <mem_malloc+0x1f4>)
 801044a:	f00a fc97 	bl	801ad7c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801044e:	8a7b      	ldrh	r3, [r7, #18]
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff fcb7 	bl	800fdc4 <ptr_to_mem>
 8010456:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	2200      	movs	r2, #0
 801045c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801045e:	697b      	ldr	r3, [r7, #20]
 8010460:	881a      	ldrh	r2, [r3, #0]
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	8bfa      	ldrh	r2, [r7, #30]
 801046a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801046c:	697b      	ldr	r3, [r7, #20]
 801046e:	8a7a      	ldrh	r2, [r7, #18]
 8010470:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010472:	697b      	ldr	r3, [r7, #20]
 8010474:	2201      	movs	r2, #1
 8010476:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	881b      	ldrh	r3, [r3, #0]
 801047c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010480:	d00b      	beq.n	801049a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	881b      	ldrh	r3, [r3, #0]
 8010486:	4618      	mov	r0, r3
 8010488:	f7ff fc9c 	bl	800fdc4 <ptr_to_mem>
 801048c:	4602      	mov	r2, r0
 801048e:	8a7b      	ldrh	r3, [r7, #18]
 8010490:	8053      	strh	r3, [r2, #2]
 8010492:	e002      	b.n	801049a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010494:	697b      	ldr	r3, [r7, #20]
 8010496:	2201      	movs	r2, #1
 8010498:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801049a:	4b39      	ldr	r3, [pc, #228]	; (8010580 <mem_malloc+0x1e8>)
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	697a      	ldr	r2, [r7, #20]
 80104a0:	429a      	cmp	r2, r3
 80104a2:	d127      	bne.n	80104f4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80104a4:	4b36      	ldr	r3, [pc, #216]	; (8010580 <mem_malloc+0x1e8>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80104aa:	e005      	b.n	80104b8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80104ac:	69bb      	ldr	r3, [r7, #24]
 80104ae:	881b      	ldrh	r3, [r3, #0]
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7ff fc87 	bl	800fdc4 <ptr_to_mem>
 80104b6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	791b      	ldrb	r3, [r3, #4]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d004      	beq.n	80104ca <mem_malloc+0x132>
 80104c0:	4b33      	ldr	r3, [pc, #204]	; (8010590 <mem_malloc+0x1f8>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	69ba      	ldr	r2, [r7, #24]
 80104c6:	429a      	cmp	r2, r3
 80104c8:	d1f0      	bne.n	80104ac <mem_malloc+0x114>
          }
          lfree = cur;
 80104ca:	4a2d      	ldr	r2, [pc, #180]	; (8010580 <mem_malloc+0x1e8>)
 80104cc:	69bb      	ldr	r3, [r7, #24]
 80104ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80104d0:	4b2b      	ldr	r3, [pc, #172]	; (8010580 <mem_malloc+0x1e8>)
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	4b2e      	ldr	r3, [pc, #184]	; (8010590 <mem_malloc+0x1f8>)
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	429a      	cmp	r2, r3
 80104da:	d00b      	beq.n	80104f4 <mem_malloc+0x15c>
 80104dc:	4b28      	ldr	r3, [pc, #160]	; (8010580 <mem_malloc+0x1e8>)
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	791b      	ldrb	r3, [r3, #4]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d006      	beq.n	80104f4 <mem_malloc+0x15c>
 80104e6:	4b27      	ldr	r3, [pc, #156]	; (8010584 <mem_malloc+0x1ec>)
 80104e8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80104ec:	4929      	ldr	r1, [pc, #164]	; (8010594 <mem_malloc+0x1fc>)
 80104ee:	4827      	ldr	r0, [pc, #156]	; (801058c <mem_malloc+0x1f4>)
 80104f0:	f00a fc44 	bl	801ad7c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80104f4:	4821      	ldr	r0, [pc, #132]	; (801057c <mem_malloc+0x1e4>)
 80104f6:	f00a fa5a 	bl	801a9ae <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80104fa:	8bba      	ldrh	r2, [r7, #28]
 80104fc:	697b      	ldr	r3, [r7, #20]
 80104fe:	4413      	add	r3, r2
 8010500:	3308      	adds	r3, #8
 8010502:	4a23      	ldr	r2, [pc, #140]	; (8010590 <mem_malloc+0x1f8>)
 8010504:	6812      	ldr	r2, [r2, #0]
 8010506:	4293      	cmp	r3, r2
 8010508:	d906      	bls.n	8010518 <mem_malloc+0x180>
 801050a:	4b1e      	ldr	r3, [pc, #120]	; (8010584 <mem_malloc+0x1ec>)
 801050c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010510:	4921      	ldr	r1, [pc, #132]	; (8010598 <mem_malloc+0x200>)
 8010512:	481e      	ldr	r0, [pc, #120]	; (801058c <mem_malloc+0x1f4>)
 8010514:	f00a fc32 	bl	801ad7c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010518:	697b      	ldr	r3, [r7, #20]
 801051a:	f003 0303 	and.w	r3, r3, #3
 801051e:	2b00      	cmp	r3, #0
 8010520:	d006      	beq.n	8010530 <mem_malloc+0x198>
 8010522:	4b18      	ldr	r3, [pc, #96]	; (8010584 <mem_malloc+0x1ec>)
 8010524:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010528:	491c      	ldr	r1, [pc, #112]	; (801059c <mem_malloc+0x204>)
 801052a:	4818      	ldr	r0, [pc, #96]	; (801058c <mem_malloc+0x1f4>)
 801052c:	f00a fc26 	bl	801ad7c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	f003 0303 	and.w	r3, r3, #3
 8010536:	2b00      	cmp	r3, #0
 8010538:	d006      	beq.n	8010548 <mem_malloc+0x1b0>
 801053a:	4b12      	ldr	r3, [pc, #72]	; (8010584 <mem_malloc+0x1ec>)
 801053c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010540:	4917      	ldr	r1, [pc, #92]	; (80105a0 <mem_malloc+0x208>)
 8010542:	4812      	ldr	r0, [pc, #72]	; (801058c <mem_malloc+0x1f4>)
 8010544:	f00a fc1a 	bl	801ad7c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	3308      	adds	r3, #8
 801054c:	e011      	b.n	8010572 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 801054e:	8bfb      	ldrh	r3, [r7, #30]
 8010550:	4618      	mov	r0, r3
 8010552:	f7ff fc37 	bl	800fdc4 <ptr_to_mem>
 8010556:	4603      	mov	r3, r0
 8010558:	881b      	ldrh	r3, [r3, #0]
 801055a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801055c:	8bfa      	ldrh	r2, [r7, #30]
 801055e:	8bbb      	ldrh	r3, [r7, #28]
 8010560:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8010564:	429a      	cmp	r2, r3
 8010566:	f4ff af41 	bcc.w	80103ec <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801056a:	4804      	ldr	r0, [pc, #16]	; (801057c <mem_malloc+0x1e4>)
 801056c:	f00a fa1f 	bl	801a9ae <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010570:	2300      	movs	r3, #0
}
 8010572:	4618      	mov	r0, r3
 8010574:	3720      	adds	r7, #32
 8010576:	46bd      	mov	sp, r7
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop
 801057c:	24004abc 	.word	0x24004abc
 8010580:	24004ac0 	.word	0x24004ac0
 8010584:	0801bf50 	.word	0x0801bf50
 8010588:	0801c114 	.word	0x0801c114
 801058c:	0801bf98 	.word	0x0801bf98
 8010590:	24004ab8 	.word	0x24004ab8
 8010594:	0801c128 	.word	0x0801c128
 8010598:	0801c144 	.word	0x0801c144
 801059c:	0801c174 	.word	0x0801c174
 80105a0:	0801c1a4 	.word	0x0801c1a4

080105a4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80105a4:	b480      	push	{r7}
 80105a6:	b085      	sub	sp, #20
 80105a8:	af00      	add	r7, sp, #0
 80105aa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	689b      	ldr	r3, [r3, #8]
 80105b0:	2200      	movs	r2, #0
 80105b2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	685b      	ldr	r3, [r3, #4]
 80105b8:	3303      	adds	r3, #3
 80105ba:	f023 0303 	bic.w	r3, r3, #3
 80105be:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80105c0:	2300      	movs	r3, #0
 80105c2:	60fb      	str	r3, [r7, #12]
 80105c4:	e011      	b.n	80105ea <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	689b      	ldr	r3, [r3, #8]
 80105ca:	681a      	ldr	r2, [r3, #0]
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	689b      	ldr	r3, [r3, #8]
 80105d4:	68ba      	ldr	r2, [r7, #8]
 80105d6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	881b      	ldrh	r3, [r3, #0]
 80105dc:	461a      	mov	r2, r3
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	4413      	add	r3, r2
 80105e2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	3301      	adds	r3, #1
 80105e8:	60fb      	str	r3, [r7, #12]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	885b      	ldrh	r3, [r3, #2]
 80105ee:	461a      	mov	r2, r3
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	4293      	cmp	r3, r2
 80105f4:	dbe7      	blt.n	80105c6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80105f6:	bf00      	nop
 80105f8:	bf00      	nop
 80105fa:	3714      	adds	r7, #20
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr

08010604 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801060a:	2300      	movs	r3, #0
 801060c:	80fb      	strh	r3, [r7, #6]
 801060e:	e009      	b.n	8010624 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010610:	88fb      	ldrh	r3, [r7, #6]
 8010612:	4a08      	ldr	r2, [pc, #32]	; (8010634 <memp_init+0x30>)
 8010614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010618:	4618      	mov	r0, r3
 801061a:	f7ff ffc3 	bl	80105a4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801061e:	88fb      	ldrh	r3, [r7, #6]
 8010620:	3301      	adds	r3, #1
 8010622:	80fb      	strh	r3, [r7, #6]
 8010624:	88fb      	ldrh	r3, [r7, #6]
 8010626:	2b0c      	cmp	r3, #12
 8010628:	d9f2      	bls.n	8010610 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801062a:	bf00      	nop
 801062c:	bf00      	nop
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}
 8010634:	0801f2c4 	.word	0x0801f2c4

08010638 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b084      	sub	sp, #16
 801063c:	af00      	add	r7, sp, #0
 801063e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010640:	f00a f9e2 	bl	801aa08 <sys_arch_protect>
 8010644:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	689b      	ldr	r3, [r3, #8]
 801064a:	681b      	ldr	r3, [r3, #0]
 801064c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801064e:	68bb      	ldr	r3, [r7, #8]
 8010650:	2b00      	cmp	r3, #0
 8010652:	d015      	beq.n	8010680 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	689b      	ldr	r3, [r3, #8]
 8010658:	68ba      	ldr	r2, [r7, #8]
 801065a:	6812      	ldr	r2, [r2, #0]
 801065c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801065e:	68bb      	ldr	r3, [r7, #8]
 8010660:	f003 0303 	and.w	r3, r3, #3
 8010664:	2b00      	cmp	r3, #0
 8010666:	d006      	beq.n	8010676 <do_memp_malloc_pool+0x3e>
 8010668:	4b09      	ldr	r3, [pc, #36]	; (8010690 <do_memp_malloc_pool+0x58>)
 801066a:	f44f 728c 	mov.w	r2, #280	; 0x118
 801066e:	4909      	ldr	r1, [pc, #36]	; (8010694 <do_memp_malloc_pool+0x5c>)
 8010670:	4809      	ldr	r0, [pc, #36]	; (8010698 <do_memp_malloc_pool+0x60>)
 8010672:	f00a fb83 	bl	801ad7c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010676:	68f8      	ldr	r0, [r7, #12]
 8010678:	f00a f9d4 	bl	801aa24 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	e003      	b.n	8010688 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f00a f9cf 	bl	801aa24 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010686:	2300      	movs	r3, #0
}
 8010688:	4618      	mov	r0, r3
 801068a:	3710      	adds	r7, #16
 801068c:	46bd      	mov	sp, r7
 801068e:	bd80      	pop	{r7, pc}
 8010690:	0801c1c8 	.word	0x0801c1c8
 8010694:	0801c1f8 	.word	0x0801c1f8
 8010698:	0801c21c 	.word	0x0801c21c

0801069c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801069c:	b580      	push	{r7, lr}
 801069e:	b082      	sub	sp, #8
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d106      	bne.n	80106b8 <memp_malloc_pool+0x1c>
 80106aa:	4b0a      	ldr	r3, [pc, #40]	; (80106d4 <memp_malloc_pool+0x38>)
 80106ac:	f44f 729e 	mov.w	r2, #316	; 0x13c
 80106b0:	4909      	ldr	r1, [pc, #36]	; (80106d8 <memp_malloc_pool+0x3c>)
 80106b2:	480a      	ldr	r0, [pc, #40]	; (80106dc <memp_malloc_pool+0x40>)
 80106b4:	f00a fb62 	bl	801ad7c <iprintf>
  if (desc == NULL) {
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d101      	bne.n	80106c2 <memp_malloc_pool+0x26>
    return NULL;
 80106be:	2300      	movs	r3, #0
 80106c0:	e003      	b.n	80106ca <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f7ff ffb8 	bl	8010638 <do_memp_malloc_pool>
 80106c8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80106ca:	4618      	mov	r0, r3
 80106cc:	3708      	adds	r7, #8
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	0801c1c8 	.word	0x0801c1c8
 80106d8:	0801c244 	.word	0x0801c244
 80106dc:	0801c21c 	.word	0x0801c21c

080106e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80106e0:	b580      	push	{r7, lr}
 80106e2:	b084      	sub	sp, #16
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	4603      	mov	r3, r0
 80106e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80106ea:	79fb      	ldrb	r3, [r7, #7]
 80106ec:	2b0c      	cmp	r3, #12
 80106ee:	d908      	bls.n	8010702 <memp_malloc+0x22>
 80106f0:	4b0a      	ldr	r3, [pc, #40]	; (801071c <memp_malloc+0x3c>)
 80106f2:	f240 1257 	movw	r2, #343	; 0x157
 80106f6:	490a      	ldr	r1, [pc, #40]	; (8010720 <memp_malloc+0x40>)
 80106f8:	480a      	ldr	r0, [pc, #40]	; (8010724 <memp_malloc+0x44>)
 80106fa:	f00a fb3f 	bl	801ad7c <iprintf>
 80106fe:	2300      	movs	r3, #0
 8010700:	e008      	b.n	8010714 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010702:	79fb      	ldrb	r3, [r7, #7]
 8010704:	4a08      	ldr	r2, [pc, #32]	; (8010728 <memp_malloc+0x48>)
 8010706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801070a:	4618      	mov	r0, r3
 801070c:	f7ff ff94 	bl	8010638 <do_memp_malloc_pool>
 8010710:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010712:	68fb      	ldr	r3, [r7, #12]
}
 8010714:	4618      	mov	r0, r3
 8010716:	3710      	adds	r7, #16
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}
 801071c:	0801c1c8 	.word	0x0801c1c8
 8010720:	0801c258 	.word	0x0801c258
 8010724:	0801c21c 	.word	0x0801c21c
 8010728:	0801f2c4 	.word	0x0801f2c4

0801072c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b084      	sub	sp, #16
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010736:	683b      	ldr	r3, [r7, #0]
 8010738:	f003 0303 	and.w	r3, r3, #3
 801073c:	2b00      	cmp	r3, #0
 801073e:	d006      	beq.n	801074e <do_memp_free_pool+0x22>
 8010740:	4b0d      	ldr	r3, [pc, #52]	; (8010778 <do_memp_free_pool+0x4c>)
 8010742:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010746:	490d      	ldr	r1, [pc, #52]	; (801077c <do_memp_free_pool+0x50>)
 8010748:	480d      	ldr	r0, [pc, #52]	; (8010780 <do_memp_free_pool+0x54>)
 801074a:	f00a fb17 	bl	801ad7c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010752:	f00a f959 	bl	801aa08 <sys_arch_protect>
 8010756:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	689b      	ldr	r3, [r3, #8]
 801075c:	681a      	ldr	r2, [r3, #0]
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	68fa      	ldr	r2, [r7, #12]
 8010768:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801076a:	68b8      	ldr	r0, [r7, #8]
 801076c:	f00a f95a 	bl	801aa24 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010770:	bf00      	nop
 8010772:	3710      	adds	r7, #16
 8010774:	46bd      	mov	sp, r7
 8010776:	bd80      	pop	{r7, pc}
 8010778:	0801c1c8 	.word	0x0801c1c8
 801077c:	0801c278 	.word	0x0801c278
 8010780:	0801c21c 	.word	0x0801c21c

08010784 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b082      	sub	sp, #8
 8010788:	af00      	add	r7, sp, #0
 801078a:	6078      	str	r0, [r7, #4]
 801078c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d106      	bne.n	80107a2 <memp_free_pool+0x1e>
 8010794:	4b0a      	ldr	r3, [pc, #40]	; (80107c0 <memp_free_pool+0x3c>)
 8010796:	f240 1295 	movw	r2, #405	; 0x195
 801079a:	490a      	ldr	r1, [pc, #40]	; (80107c4 <memp_free_pool+0x40>)
 801079c:	480a      	ldr	r0, [pc, #40]	; (80107c8 <memp_free_pool+0x44>)
 801079e:	f00a faed 	bl	801ad7c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d007      	beq.n	80107b8 <memp_free_pool+0x34>
 80107a8:	683b      	ldr	r3, [r7, #0]
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d004      	beq.n	80107b8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80107ae:	6839      	ldr	r1, [r7, #0]
 80107b0:	6878      	ldr	r0, [r7, #4]
 80107b2:	f7ff ffbb 	bl	801072c <do_memp_free_pool>
 80107b6:	e000      	b.n	80107ba <memp_free_pool+0x36>
    return;
 80107b8:	bf00      	nop
}
 80107ba:	3708      	adds	r7, #8
 80107bc:	46bd      	mov	sp, r7
 80107be:	bd80      	pop	{r7, pc}
 80107c0:	0801c1c8 	.word	0x0801c1c8
 80107c4:	0801c244 	.word	0x0801c244
 80107c8:	0801c21c 	.word	0x0801c21c

080107cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b082      	sub	sp, #8
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	4603      	mov	r3, r0
 80107d4:	6039      	str	r1, [r7, #0]
 80107d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80107d8:	79fb      	ldrb	r3, [r7, #7]
 80107da:	2b0c      	cmp	r3, #12
 80107dc:	d907      	bls.n	80107ee <memp_free+0x22>
 80107de:	4b0c      	ldr	r3, [pc, #48]	; (8010810 <memp_free+0x44>)
 80107e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80107e4:	490b      	ldr	r1, [pc, #44]	; (8010814 <memp_free+0x48>)
 80107e6:	480c      	ldr	r0, [pc, #48]	; (8010818 <memp_free+0x4c>)
 80107e8:	f00a fac8 	bl	801ad7c <iprintf>
 80107ec:	e00c      	b.n	8010808 <memp_free+0x3c>

  if (mem == NULL) {
 80107ee:	683b      	ldr	r3, [r7, #0]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d008      	beq.n	8010806 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80107f4:	79fb      	ldrb	r3, [r7, #7]
 80107f6:	4a09      	ldr	r2, [pc, #36]	; (801081c <memp_free+0x50>)
 80107f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107fc:	6839      	ldr	r1, [r7, #0]
 80107fe:	4618      	mov	r0, r3
 8010800:	f7ff ff94 	bl	801072c <do_memp_free_pool>
 8010804:	e000      	b.n	8010808 <memp_free+0x3c>
    return;
 8010806:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010808:	3708      	adds	r7, #8
 801080a:	46bd      	mov	sp, r7
 801080c:	bd80      	pop	{r7, pc}
 801080e:	bf00      	nop
 8010810:	0801c1c8 	.word	0x0801c1c8
 8010814:	0801c298 	.word	0x0801c298
 8010818:	0801c21c 	.word	0x0801c21c
 801081c:	0801f2c4 	.word	0x0801f2c4

08010820 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010820:	b480      	push	{r7}
 8010822:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010824:	bf00      	nop
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr
	...

08010830 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b086      	sub	sp, #24
 8010834:	af00      	add	r7, sp, #0
 8010836:	60f8      	str	r0, [r7, #12]
 8010838:	60b9      	str	r1, [r7, #8]
 801083a:	607a      	str	r2, [r7, #4]
 801083c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d108      	bne.n	8010856 <netif_add+0x26>
 8010844:	4b57      	ldr	r3, [pc, #348]	; (80109a4 <netif_add+0x174>)
 8010846:	f240 1227 	movw	r2, #295	; 0x127
 801084a:	4957      	ldr	r1, [pc, #348]	; (80109a8 <netif_add+0x178>)
 801084c:	4857      	ldr	r0, [pc, #348]	; (80109ac <netif_add+0x17c>)
 801084e:	f00a fa95 	bl	801ad7c <iprintf>
 8010852:	2300      	movs	r3, #0
 8010854:	e0a2      	b.n	801099c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010858:	2b00      	cmp	r3, #0
 801085a:	d108      	bne.n	801086e <netif_add+0x3e>
 801085c:	4b51      	ldr	r3, [pc, #324]	; (80109a4 <netif_add+0x174>)
 801085e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010862:	4953      	ldr	r1, [pc, #332]	; (80109b0 <netif_add+0x180>)
 8010864:	4851      	ldr	r0, [pc, #324]	; (80109ac <netif_add+0x17c>)
 8010866:	f00a fa89 	bl	801ad7c <iprintf>
 801086a:	2300      	movs	r3, #0
 801086c:	e096      	b.n	801099c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	2b00      	cmp	r3, #0
 8010872:	d101      	bne.n	8010878 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010874:	4b4f      	ldr	r3, [pc, #316]	; (80109b4 <netif_add+0x184>)
 8010876:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d101      	bne.n	8010882 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801087e:	4b4d      	ldr	r3, [pc, #308]	; (80109b4 <netif_add+0x184>)
 8010880:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010882:	683b      	ldr	r3, [r7, #0]
 8010884:	2b00      	cmp	r3, #0
 8010886:	d101      	bne.n	801088c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010888:	4b4a      	ldr	r3, [pc, #296]	; (80109b4 <netif_add+0x184>)
 801088a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801088c:	68fb      	ldr	r3, [r7, #12]
 801088e:	2200      	movs	r2, #0
 8010890:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010892:	68fb      	ldr	r3, [r7, #12]
 8010894:	2200      	movs	r2, #0
 8010896:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	2200      	movs	r2, #0
 801089c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	4a45      	ldr	r2, [pc, #276]	; (80109b8 <netif_add+0x188>)
 80108a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2200      	movs	r2, #0
 80108a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	2200      	movs	r2, #0
 80108ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	2200      	movs	r2, #0
 80108b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	6a3a      	ldr	r2, [r7, #32]
 80108bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80108be:	4b3f      	ldr	r3, [pc, #252]	; (80109bc <netif_add+0x18c>)
 80108c0:	781a      	ldrb	r2, [r3, #0]
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80108c8:	68fb      	ldr	r3, [r7, #12]
 80108ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80108ce:	683b      	ldr	r3, [r7, #0]
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	68b9      	ldr	r1, [r7, #8]
 80108d4:	68f8      	ldr	r0, [r7, #12]
 80108d6:	f000 f913 	bl	8010b00 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80108da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108dc:	68f8      	ldr	r0, [r7, #12]
 80108de:	4798      	blx	r3
 80108e0:	4603      	mov	r3, r0
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d001      	beq.n	80108ea <netif_add+0xba>
    return NULL;
 80108e6:	2300      	movs	r3, #0
 80108e8:	e058      	b.n	801099c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80108f0:	2bff      	cmp	r3, #255	; 0xff
 80108f2:	d103      	bne.n	80108fc <netif_add+0xcc>
        netif->num = 0;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	2200      	movs	r2, #0
 80108f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80108fc:	2300      	movs	r3, #0
 80108fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010900:	4b2f      	ldr	r3, [pc, #188]	; (80109c0 <netif_add+0x190>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	617b      	str	r3, [r7, #20]
 8010906:	e02b      	b.n	8010960 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8010908:	697a      	ldr	r2, [r7, #20]
 801090a:	68fb      	ldr	r3, [r7, #12]
 801090c:	429a      	cmp	r2, r3
 801090e:	d106      	bne.n	801091e <netif_add+0xee>
 8010910:	4b24      	ldr	r3, [pc, #144]	; (80109a4 <netif_add+0x174>)
 8010912:	f240 128b 	movw	r2, #395	; 0x18b
 8010916:	492b      	ldr	r1, [pc, #172]	; (80109c4 <netif_add+0x194>)
 8010918:	4824      	ldr	r0, [pc, #144]	; (80109ac <netif_add+0x17c>)
 801091a:	f00a fa2f 	bl	801ad7c <iprintf>
        num_netifs++;
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	3301      	adds	r3, #1
 8010922:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8010924:	693b      	ldr	r3, [r7, #16]
 8010926:	2bff      	cmp	r3, #255	; 0xff
 8010928:	dd06      	ble.n	8010938 <netif_add+0x108>
 801092a:	4b1e      	ldr	r3, [pc, #120]	; (80109a4 <netif_add+0x174>)
 801092c:	f240 128d 	movw	r2, #397	; 0x18d
 8010930:	4925      	ldr	r1, [pc, #148]	; (80109c8 <netif_add+0x198>)
 8010932:	481e      	ldr	r0, [pc, #120]	; (80109ac <netif_add+0x17c>)
 8010934:	f00a fa22 	bl	801ad7c <iprintf>
        if (netif2->num == netif->num) {
 8010938:	697b      	ldr	r3, [r7, #20]
 801093a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010944:	429a      	cmp	r2, r3
 8010946:	d108      	bne.n	801095a <netif_add+0x12a>
          netif->num++;
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801094e:	3301      	adds	r3, #1
 8010950:	b2da      	uxtb	r2, r3
 8010952:	68fb      	ldr	r3, [r7, #12]
 8010954:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010958:	e005      	b.n	8010966 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	617b      	str	r3, [r7, #20]
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	2b00      	cmp	r3, #0
 8010964:	d1d0      	bne.n	8010908 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010966:	697b      	ldr	r3, [r7, #20]
 8010968:	2b00      	cmp	r3, #0
 801096a:	d1be      	bne.n	80108ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010972:	2bfe      	cmp	r3, #254	; 0xfe
 8010974:	d103      	bne.n	801097e <netif_add+0x14e>
    netif_num = 0;
 8010976:	4b11      	ldr	r3, [pc, #68]	; (80109bc <netif_add+0x18c>)
 8010978:	2200      	movs	r2, #0
 801097a:	701a      	strb	r2, [r3, #0]
 801097c:	e006      	b.n	801098c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010984:	3301      	adds	r3, #1
 8010986:	b2da      	uxtb	r2, r3
 8010988:	4b0c      	ldr	r3, [pc, #48]	; (80109bc <netif_add+0x18c>)
 801098a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801098c:	4b0c      	ldr	r3, [pc, #48]	; (80109c0 <netif_add+0x190>)
 801098e:	681a      	ldr	r2, [r3, #0]
 8010990:	68fb      	ldr	r3, [r7, #12]
 8010992:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010994:	4a0a      	ldr	r2, [pc, #40]	; (80109c0 <netif_add+0x190>)
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801099a:	68fb      	ldr	r3, [r7, #12]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3718      	adds	r7, #24
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}
 80109a4:	0801c2b4 	.word	0x0801c2b4
 80109a8:	0801c348 	.word	0x0801c348
 80109ac:	0801c304 	.word	0x0801c304
 80109b0:	0801c364 	.word	0x0801c364
 80109b4:	0801f338 	.word	0x0801f338
 80109b8:	08010ddb 	.word	0x08010ddb
 80109bc:	24004af8 	.word	0x24004af8
 80109c0:	24008260 	.word	0x24008260
 80109c4:	0801c388 	.word	0x0801c388
 80109c8:	0801c39c 	.word	0x0801c39c

080109cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80109cc:	b580      	push	{r7, lr}
 80109ce:	b082      	sub	sp, #8
 80109d0:	af00      	add	r7, sp, #0
 80109d2:	6078      	str	r0, [r7, #4]
 80109d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80109d6:	6839      	ldr	r1, [r7, #0]
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	f002 fe2d 	bl	8013638 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80109de:	6839      	ldr	r1, [r7, #0]
 80109e0:	6878      	ldr	r0, [r7, #4]
 80109e2:	f007 fb95 	bl	8018110 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80109e6:	bf00      	nop
 80109e8:	3708      	adds	r7, #8
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}
	...

080109f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80109f0:	b580      	push	{r7, lr}
 80109f2:	b086      	sub	sp, #24
 80109f4:	af00      	add	r7, sp, #0
 80109f6:	60f8      	str	r0, [r7, #12]
 80109f8:	60b9      	str	r1, [r7, #8]
 80109fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d106      	bne.n	8010a10 <netif_do_set_ipaddr+0x20>
 8010a02:	4b1d      	ldr	r3, [pc, #116]	; (8010a78 <netif_do_set_ipaddr+0x88>)
 8010a04:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010a08:	491c      	ldr	r1, [pc, #112]	; (8010a7c <netif_do_set_ipaddr+0x8c>)
 8010a0a:	481d      	ldr	r0, [pc, #116]	; (8010a80 <netif_do_set_ipaddr+0x90>)
 8010a0c:	f00a f9b6 	bl	801ad7c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d106      	bne.n	8010a24 <netif_do_set_ipaddr+0x34>
 8010a16:	4b18      	ldr	r3, [pc, #96]	; (8010a78 <netif_do_set_ipaddr+0x88>)
 8010a18:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010a1c:	4917      	ldr	r1, [pc, #92]	; (8010a7c <netif_do_set_ipaddr+0x8c>)
 8010a1e:	4818      	ldr	r0, [pc, #96]	; (8010a80 <netif_do_set_ipaddr+0x90>)
 8010a20:	f00a f9ac 	bl	801ad7c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	681a      	ldr	r2, [r3, #0]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	3304      	adds	r3, #4
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d01c      	beq.n	8010a6c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	3304      	adds	r3, #4
 8010a3c:	681a      	ldr	r2, [r3, #0]
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010a42:	f107 0314 	add.w	r3, r7, #20
 8010a46:	4619      	mov	r1, r3
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f7ff ffbf 	bl	80109cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d002      	beq.n	8010a5a <netif_do_set_ipaddr+0x6a>
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	e000      	b.n	8010a5c <netif_do_set_ipaddr+0x6c>
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	68fa      	ldr	r2, [r7, #12]
 8010a5e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010a60:	2101      	movs	r1, #1
 8010a62:	68f8      	ldr	r0, [r7, #12]
 8010a64:	f000 f8d2 	bl	8010c0c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010a68:	2301      	movs	r3, #1
 8010a6a:	e000      	b.n	8010a6e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010a6c:	2300      	movs	r3, #0
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3718      	adds	r7, #24
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}
 8010a76:	bf00      	nop
 8010a78:	0801c2b4 	.word	0x0801c2b4
 8010a7c:	0801c3cc 	.word	0x0801c3cc
 8010a80:	0801c304 	.word	0x0801c304

08010a84 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010a84:	b480      	push	{r7}
 8010a86:	b085      	sub	sp, #20
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010a90:	68bb      	ldr	r3, [r7, #8]
 8010a92:	681a      	ldr	r2, [r3, #0]
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	3308      	adds	r3, #8
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	429a      	cmp	r2, r3
 8010a9c:	d00a      	beq.n	8010ab4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010a9e:	68bb      	ldr	r3, [r7, #8]
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d002      	beq.n	8010aaa <netif_do_set_netmask+0x26>
 8010aa4:	68bb      	ldr	r3, [r7, #8]
 8010aa6:	681b      	ldr	r3, [r3, #0]
 8010aa8:	e000      	b.n	8010aac <netif_do_set_netmask+0x28>
 8010aaa:	2300      	movs	r3, #0
 8010aac:	68fa      	ldr	r2, [r7, #12]
 8010aae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e000      	b.n	8010ab6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010ab4:	2300      	movs	r3, #0
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3714      	adds	r7, #20
 8010aba:	46bd      	mov	sp, r7
 8010abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac0:	4770      	bx	lr

08010ac2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010ac2:	b480      	push	{r7}
 8010ac4:	b085      	sub	sp, #20
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	60f8      	str	r0, [r7, #12]
 8010aca:	60b9      	str	r1, [r7, #8]
 8010acc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	681a      	ldr	r2, [r3, #0]
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	330c      	adds	r3, #12
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d00a      	beq.n	8010af2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010adc:	68bb      	ldr	r3, [r7, #8]
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d002      	beq.n	8010ae8 <netif_do_set_gw+0x26>
 8010ae2:	68bb      	ldr	r3, [r7, #8]
 8010ae4:	681b      	ldr	r3, [r3, #0]
 8010ae6:	e000      	b.n	8010aea <netif_do_set_gw+0x28>
 8010ae8:	2300      	movs	r3, #0
 8010aea:	68fa      	ldr	r2, [r7, #12]
 8010aec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010aee:	2301      	movs	r3, #1
 8010af0:	e000      	b.n	8010af4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010af2:	2300      	movs	r3, #0
}
 8010af4:	4618      	mov	r0, r3
 8010af6:	3714      	adds	r7, #20
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010b00:	b580      	push	{r7, lr}
 8010b02:	b088      	sub	sp, #32
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	60f8      	str	r0, [r7, #12]
 8010b08:	60b9      	str	r1, [r7, #8]
 8010b0a:	607a      	str	r2, [r7, #4]
 8010b0c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010b12:	2300      	movs	r3, #0
 8010b14:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010b16:	68bb      	ldr	r3, [r7, #8]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d101      	bne.n	8010b20 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010b1c:	4b1c      	ldr	r3, [pc, #112]	; (8010b90 <netif_set_addr+0x90>)
 8010b1e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d101      	bne.n	8010b2a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010b26:	4b1a      	ldr	r3, [pc, #104]	; (8010b90 <netif_set_addr+0x90>)
 8010b28:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010b2a:	683b      	ldr	r3, [r7, #0]
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d101      	bne.n	8010b34 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010b30:	4b17      	ldr	r3, [pc, #92]	; (8010b90 <netif_set_addr+0x90>)
 8010b32:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010b34:	68bb      	ldr	r3, [r7, #8]
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d003      	beq.n	8010b42 <netif_set_addr+0x42>
 8010b3a:	68bb      	ldr	r3, [r7, #8]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	2b00      	cmp	r3, #0
 8010b40:	d101      	bne.n	8010b46 <netif_set_addr+0x46>
 8010b42:	2301      	movs	r3, #1
 8010b44:	e000      	b.n	8010b48 <netif_set_addr+0x48>
 8010b46:	2300      	movs	r3, #0
 8010b48:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010b4a:	697b      	ldr	r3, [r7, #20]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d006      	beq.n	8010b5e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010b50:	f107 0310 	add.w	r3, r7, #16
 8010b54:	461a      	mov	r2, r3
 8010b56:	68b9      	ldr	r1, [r7, #8]
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f7ff ff49 	bl	80109f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010b5e:	69fa      	ldr	r2, [r7, #28]
 8010b60:	6879      	ldr	r1, [r7, #4]
 8010b62:	68f8      	ldr	r0, [r7, #12]
 8010b64:	f7ff ff8e 	bl	8010a84 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010b68:	69ba      	ldr	r2, [r7, #24]
 8010b6a:	6839      	ldr	r1, [r7, #0]
 8010b6c:	68f8      	ldr	r0, [r7, #12]
 8010b6e:	f7ff ffa8 	bl	8010ac2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010b72:	697b      	ldr	r3, [r7, #20]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d106      	bne.n	8010b86 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010b78:	f107 0310 	add.w	r3, r7, #16
 8010b7c:	461a      	mov	r2, r3
 8010b7e:	68b9      	ldr	r1, [r7, #8]
 8010b80:	68f8      	ldr	r0, [r7, #12]
 8010b82:	f7ff ff35 	bl	80109f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010b86:	bf00      	nop
 8010b88:	3720      	adds	r7, #32
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	0801f338 	.word	0x0801f338

08010b94 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010b94:	b480      	push	{r7}
 8010b96:	b083      	sub	sp, #12
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010b9c:	4a04      	ldr	r2, [pc, #16]	; (8010bb0 <netif_set_default+0x1c>)
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010ba2:	bf00      	nop
 8010ba4:	370c      	adds	r7, #12
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bac:	4770      	bx	lr
 8010bae:	bf00      	nop
 8010bb0:	24008264 	.word	0x24008264

08010bb4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d107      	bne.n	8010bd2 <netif_set_up+0x1e>
 8010bc2:	4b0f      	ldr	r3, [pc, #60]	; (8010c00 <netif_set_up+0x4c>)
 8010bc4:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010bc8:	490e      	ldr	r1, [pc, #56]	; (8010c04 <netif_set_up+0x50>)
 8010bca:	480f      	ldr	r0, [pc, #60]	; (8010c08 <netif_set_up+0x54>)
 8010bcc:	f00a f8d6 	bl	801ad7c <iprintf>
 8010bd0:	e013      	b.n	8010bfa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010bd8:	f003 0301 	and.w	r3, r3, #1
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d10c      	bne.n	8010bfa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010be6:	f043 0301 	orr.w	r3, r3, #1
 8010bea:	b2da      	uxtb	r2, r3
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010bf2:	2103      	movs	r1, #3
 8010bf4:	6878      	ldr	r0, [r7, #4]
 8010bf6:	f000 f809 	bl	8010c0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010bfa:	3708      	adds	r7, #8
 8010bfc:	46bd      	mov	sp, r7
 8010bfe:	bd80      	pop	{r7, pc}
 8010c00:	0801c2b4 	.word	0x0801c2b4
 8010c04:	0801c43c 	.word	0x0801c43c
 8010c08:	0801c304 	.word	0x0801c304

08010c0c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010c0c:	b580      	push	{r7, lr}
 8010c0e:	b082      	sub	sp, #8
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
 8010c14:	460b      	mov	r3, r1
 8010c16:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d106      	bne.n	8010c2c <netif_issue_reports+0x20>
 8010c1e:	4b18      	ldr	r3, [pc, #96]	; (8010c80 <netif_issue_reports+0x74>)
 8010c20:	f240 326d 	movw	r2, #877	; 0x36d
 8010c24:	4917      	ldr	r1, [pc, #92]	; (8010c84 <netif_issue_reports+0x78>)
 8010c26:	4818      	ldr	r0, [pc, #96]	; (8010c88 <netif_issue_reports+0x7c>)
 8010c28:	f00a f8a8 	bl	801ad7c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c32:	f003 0304 	and.w	r3, r3, #4
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d01e      	beq.n	8010c78 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c40:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d017      	beq.n	8010c78 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010c48:	78fb      	ldrb	r3, [r7, #3]
 8010c4a:	f003 0301 	and.w	r3, r3, #1
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d013      	beq.n	8010c7a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	3304      	adds	r3, #4
 8010c56:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010c58:	2b00      	cmp	r3, #0
 8010c5a:	d00e      	beq.n	8010c7a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c62:	f003 0308 	and.w	r3, r3, #8
 8010c66:	2b00      	cmp	r3, #0
 8010c68:	d007      	beq.n	8010c7a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	3304      	adds	r3, #4
 8010c6e:	4619      	mov	r1, r3
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f008 f9b7 	bl	8018fe4 <etharp_request>
 8010c76:	e000      	b.n	8010c7a <netif_issue_reports+0x6e>
    return;
 8010c78:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010c7a:	3708      	adds	r7, #8
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	0801c2b4 	.word	0x0801c2b4
 8010c84:	0801c458 	.word	0x0801c458
 8010c88:	0801c304 	.word	0x0801c304

08010c8c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d107      	bne.n	8010caa <netif_set_down+0x1e>
 8010c9a:	4b12      	ldr	r3, [pc, #72]	; (8010ce4 <netif_set_down+0x58>)
 8010c9c:	f240 329b 	movw	r2, #923	; 0x39b
 8010ca0:	4911      	ldr	r1, [pc, #68]	; (8010ce8 <netif_set_down+0x5c>)
 8010ca2:	4812      	ldr	r0, [pc, #72]	; (8010cec <netif_set_down+0x60>)
 8010ca4:	f00a f86a 	bl	801ad7c <iprintf>
 8010ca8:	e019      	b.n	8010cde <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cb0:	f003 0301 	and.w	r3, r3, #1
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d012      	beq.n	8010cde <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cbe:	f023 0301 	bic.w	r3, r3, #1
 8010cc2:	b2da      	uxtb	r2, r3
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cd0:	f003 0308 	and.w	r3, r3, #8
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f007 fd41 	bl	8018760 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010cde:	3708      	adds	r7, #8
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bd80      	pop	{r7, pc}
 8010ce4:	0801c2b4 	.word	0x0801c2b4
 8010ce8:	0801c47c 	.word	0x0801c47c
 8010cec:	0801c304 	.word	0x0801c304

08010cf0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010cf0:	b580      	push	{r7, lr}
 8010cf2:	b082      	sub	sp, #8
 8010cf4:	af00      	add	r7, sp, #0
 8010cf6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d107      	bne.n	8010d0e <netif_set_link_up+0x1e>
 8010cfe:	4b13      	ldr	r3, [pc, #76]	; (8010d4c <netif_set_link_up+0x5c>)
 8010d00:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010d04:	4912      	ldr	r1, [pc, #72]	; (8010d50 <netif_set_link_up+0x60>)
 8010d06:	4813      	ldr	r0, [pc, #76]	; (8010d54 <netif_set_link_up+0x64>)
 8010d08:	f00a f838 	bl	801ad7c <iprintf>
 8010d0c:	e01b      	b.n	8010d46 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d14:	f003 0304 	and.w	r3, r3, #4
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d114      	bne.n	8010d46 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d22:	f043 0304 	orr.w	r3, r3, #4
 8010d26:	b2da      	uxtb	r2, r3
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010d2e:	2103      	movs	r1, #3
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f7ff ff6b 	bl	8010c0c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	69db      	ldr	r3, [r3, #28]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d003      	beq.n	8010d46 <netif_set_link_up+0x56>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	69db      	ldr	r3, [r3, #28]
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010d46:	3708      	adds	r7, #8
 8010d48:	46bd      	mov	sp, r7
 8010d4a:	bd80      	pop	{r7, pc}
 8010d4c:	0801c2b4 	.word	0x0801c2b4
 8010d50:	0801c49c 	.word	0x0801c49c
 8010d54:	0801c304 	.word	0x0801c304

08010d58 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b082      	sub	sp, #8
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d107      	bne.n	8010d76 <netif_set_link_down+0x1e>
 8010d66:	4b11      	ldr	r3, [pc, #68]	; (8010dac <netif_set_link_down+0x54>)
 8010d68:	f240 4206 	movw	r2, #1030	; 0x406
 8010d6c:	4910      	ldr	r1, [pc, #64]	; (8010db0 <netif_set_link_down+0x58>)
 8010d6e:	4811      	ldr	r0, [pc, #68]	; (8010db4 <netif_set_link_down+0x5c>)
 8010d70:	f00a f804 	bl	801ad7c <iprintf>
 8010d74:	e017      	b.n	8010da6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d7c:	f003 0304 	and.w	r3, r3, #4
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d010      	beq.n	8010da6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d8a:	f023 0304 	bic.w	r3, r3, #4
 8010d8e:	b2da      	uxtb	r2, r3
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	69db      	ldr	r3, [r3, #28]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d003      	beq.n	8010da6 <netif_set_link_down+0x4e>
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	69db      	ldr	r3, [r3, #28]
 8010da2:	6878      	ldr	r0, [r7, #4]
 8010da4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010da6:	3708      	adds	r7, #8
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}
 8010dac:	0801c2b4 	.word	0x0801c2b4
 8010db0:	0801c4c0 	.word	0x0801c4c0
 8010db4:	0801c304 	.word	0x0801c304

08010db8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b083      	sub	sp, #12
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
 8010dc0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d002      	beq.n	8010dce <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	683a      	ldr	r2, [r7, #0]
 8010dcc:	61da      	str	r2, [r3, #28]
  }
}
 8010dce:	bf00      	nop
 8010dd0:	370c      	adds	r7, #12
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd8:	4770      	bx	lr

08010dda <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010dda:	b480      	push	{r7}
 8010ddc:	b085      	sub	sp, #20
 8010dde:	af00      	add	r7, sp, #0
 8010de0:	60f8      	str	r0, [r7, #12]
 8010de2:	60b9      	str	r1, [r7, #8]
 8010de4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010de6:	f06f 030b 	mvn.w	r3, #11
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3714      	adds	r7, #20
 8010dee:	46bd      	mov	sp, r7
 8010df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df4:	4770      	bx	lr
	...

08010df8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b085      	sub	sp, #20
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010e02:	79fb      	ldrb	r3, [r7, #7]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d013      	beq.n	8010e30 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010e08:	4b0d      	ldr	r3, [pc, #52]	; (8010e40 <netif_get_by_index+0x48>)
 8010e0a:	681b      	ldr	r3, [r3, #0]
 8010e0c:	60fb      	str	r3, [r7, #12]
 8010e0e:	e00c      	b.n	8010e2a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e16:	3301      	adds	r3, #1
 8010e18:	b2db      	uxtb	r3, r3
 8010e1a:	79fa      	ldrb	r2, [r7, #7]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	d101      	bne.n	8010e24 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	e006      	b.n	8010e32 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	681b      	ldr	r3, [r3, #0]
 8010e28:	60fb      	str	r3, [r7, #12]
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2b00      	cmp	r3, #0
 8010e2e:	d1ef      	bne.n	8010e10 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	3714      	adds	r7, #20
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop
 8010e40:	24008260 	.word	0x24008260

08010e44 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010e4a:	f009 fddd 	bl	801aa08 <sys_arch_protect>
 8010e4e:	6038      	str	r0, [r7, #0]
 8010e50:	4b0d      	ldr	r3, [pc, #52]	; (8010e88 <pbuf_free_ooseq+0x44>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	701a      	strb	r2, [r3, #0]
 8010e56:	6838      	ldr	r0, [r7, #0]
 8010e58:	f009 fde4 	bl	801aa24 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010e5c:	4b0b      	ldr	r3, [pc, #44]	; (8010e8c <pbuf_free_ooseq+0x48>)
 8010e5e:	681b      	ldr	r3, [r3, #0]
 8010e60:	607b      	str	r3, [r7, #4]
 8010e62:	e00a      	b.n	8010e7a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d003      	beq.n	8010e74 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f002 fc21 	bl	80136b4 <tcp_free_ooseq>
      return;
 8010e72:	e005      	b.n	8010e80 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	607b      	str	r3, [r7, #4]
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d1f1      	bne.n	8010e64 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010e80:	3708      	adds	r7, #8
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
 8010e86:	bf00      	nop
 8010e88:	24008268 	.word	0x24008268
 8010e8c:	24008270 	.word	0x24008270

08010e90 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b082      	sub	sp, #8
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010e98:	f7ff ffd4 	bl	8010e44 <pbuf_free_ooseq>
}
 8010e9c:	bf00      	nop
 8010e9e:	3708      	adds	r7, #8
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	bd80      	pop	{r7, pc}

08010ea4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010eaa:	f009 fdad 	bl	801aa08 <sys_arch_protect>
 8010eae:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010eb0:	4b0f      	ldr	r3, [pc, #60]	; (8010ef0 <pbuf_pool_is_empty+0x4c>)
 8010eb2:	781b      	ldrb	r3, [r3, #0]
 8010eb4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010eb6:	4b0e      	ldr	r3, [pc, #56]	; (8010ef0 <pbuf_pool_is_empty+0x4c>)
 8010eb8:	2201      	movs	r2, #1
 8010eba:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010ebc:	6878      	ldr	r0, [r7, #4]
 8010ebe:	f009 fdb1 	bl	801aa24 <sys_arch_unprotect>

  if (!queued) {
 8010ec2:	78fb      	ldrb	r3, [r7, #3]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d10f      	bne.n	8010ee8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010ec8:	2100      	movs	r1, #0
 8010eca:	480a      	ldr	r0, [pc, #40]	; (8010ef4 <pbuf_pool_is_empty+0x50>)
 8010ecc:	f7fe fdee 	bl	800faac <tcpip_try_callback>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d008      	beq.n	8010ee8 <pbuf_pool_is_empty+0x44>
 8010ed6:	f009 fd97 	bl	801aa08 <sys_arch_protect>
 8010eda:	6078      	str	r0, [r7, #4]
 8010edc:	4b04      	ldr	r3, [pc, #16]	; (8010ef0 <pbuf_pool_is_empty+0x4c>)
 8010ede:	2200      	movs	r2, #0
 8010ee0:	701a      	strb	r2, [r3, #0]
 8010ee2:	6878      	ldr	r0, [r7, #4]
 8010ee4:	f009 fd9e 	bl	801aa24 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010ee8:	bf00      	nop
 8010eea:	3708      	adds	r7, #8
 8010eec:	46bd      	mov	sp, r7
 8010eee:	bd80      	pop	{r7, pc}
 8010ef0:	24008268 	.word	0x24008268
 8010ef4:	08010e91 	.word	0x08010e91

08010ef8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010ef8:	b480      	push	{r7}
 8010efa:	b085      	sub	sp, #20
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	60b9      	str	r1, [r7, #8]
 8010f02:	4611      	mov	r1, r2
 8010f04:	461a      	mov	r2, r3
 8010f06:	460b      	mov	r3, r1
 8010f08:	80fb      	strh	r3, [r7, #6]
 8010f0a:	4613      	mov	r3, r2
 8010f0c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	2200      	movs	r2, #0
 8010f12:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	68ba      	ldr	r2, [r7, #8]
 8010f18:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	88fa      	ldrh	r2, [r7, #6]
 8010f1e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	88ba      	ldrh	r2, [r7, #4]
 8010f24:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010f26:	8b3b      	ldrh	r3, [r7, #24]
 8010f28:	b2da      	uxtb	r2, r3
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	7f3a      	ldrb	r2, [r7, #28]
 8010f32:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010f34:	68fb      	ldr	r3, [r7, #12]
 8010f36:	2201      	movs	r2, #1
 8010f38:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	73da      	strb	r2, [r3, #15]
}
 8010f40:	bf00      	nop
 8010f42:	3714      	adds	r7, #20
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b08c      	sub	sp, #48	; 0x30
 8010f50:	af02      	add	r7, sp, #8
 8010f52:	4603      	mov	r3, r0
 8010f54:	71fb      	strb	r3, [r7, #7]
 8010f56:	460b      	mov	r3, r1
 8010f58:	80bb      	strh	r3, [r7, #4]
 8010f5a:	4613      	mov	r3, r2
 8010f5c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010f5e:	79fb      	ldrb	r3, [r7, #7]
 8010f60:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010f62:	887b      	ldrh	r3, [r7, #2]
 8010f64:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010f68:	d07f      	beq.n	801106a <pbuf_alloc+0x11e>
 8010f6a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010f6e:	f300 80c8 	bgt.w	8011102 <pbuf_alloc+0x1b6>
 8010f72:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010f76:	d010      	beq.n	8010f9a <pbuf_alloc+0x4e>
 8010f78:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010f7c:	f300 80c1 	bgt.w	8011102 <pbuf_alloc+0x1b6>
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d002      	beq.n	8010f8a <pbuf_alloc+0x3e>
 8010f84:	2b41      	cmp	r3, #65	; 0x41
 8010f86:	f040 80bc 	bne.w	8011102 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010f8a:	887a      	ldrh	r2, [r7, #2]
 8010f8c:	88bb      	ldrh	r3, [r7, #4]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	2000      	movs	r0, #0
 8010f92:	f000 f8d1 	bl	8011138 <pbuf_alloc_reference>
 8010f96:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010f98:	e0bd      	b.n	8011116 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010f9a:	2300      	movs	r3, #0
 8010f9c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010fa2:	88bb      	ldrh	r3, [r7, #4]
 8010fa4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010fa6:	200c      	movs	r0, #12
 8010fa8:	f7ff fb9a 	bl	80106e0 <memp_malloc>
 8010fac:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d109      	bne.n	8010fc8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010fb4:	f7ff ff76 	bl	8010ea4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	d002      	beq.n	8010fc4 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010fbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010fc0:	f000 faa8 	bl	8011514 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010fc4:	2300      	movs	r3, #0
 8010fc6:	e0a7      	b.n	8011118 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fca:	3303      	adds	r3, #3
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	f023 0303 	bic.w	r3, r3, #3
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8010fd8:	b29b      	uxth	r3, r3
 8010fda:	8b7a      	ldrh	r2, [r7, #26]
 8010fdc:	4293      	cmp	r3, r2
 8010fde:	bf28      	it	cs
 8010fe0:	4613      	movcs	r3, r2
 8010fe2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010fe6:	3310      	adds	r3, #16
 8010fe8:	693a      	ldr	r2, [r7, #16]
 8010fea:	4413      	add	r3, r2
 8010fec:	3303      	adds	r3, #3
 8010fee:	f023 0303 	bic.w	r3, r3, #3
 8010ff2:	4618      	mov	r0, r3
 8010ff4:	89f9      	ldrh	r1, [r7, #14]
 8010ff6:	8b7a      	ldrh	r2, [r7, #26]
 8010ff8:	2300      	movs	r3, #0
 8010ffa:	9301      	str	r3, [sp, #4]
 8010ffc:	887b      	ldrh	r3, [r7, #2]
 8010ffe:	9300      	str	r3, [sp, #0]
 8011000:	460b      	mov	r3, r1
 8011002:	4601      	mov	r1, r0
 8011004:	6938      	ldr	r0, [r7, #16]
 8011006:	f7ff ff77 	bl	8010ef8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801100a:	693b      	ldr	r3, [r7, #16]
 801100c:	685b      	ldr	r3, [r3, #4]
 801100e:	f003 0303 	and.w	r3, r3, #3
 8011012:	2b00      	cmp	r3, #0
 8011014:	d006      	beq.n	8011024 <pbuf_alloc+0xd8>
 8011016:	4b42      	ldr	r3, [pc, #264]	; (8011120 <pbuf_alloc+0x1d4>)
 8011018:	f44f 7280 	mov.w	r2, #256	; 0x100
 801101c:	4941      	ldr	r1, [pc, #260]	; (8011124 <pbuf_alloc+0x1d8>)
 801101e:	4842      	ldr	r0, [pc, #264]	; (8011128 <pbuf_alloc+0x1dc>)
 8011020:	f009 feac 	bl	801ad7c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011024:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011026:	3303      	adds	r3, #3
 8011028:	f023 0303 	bic.w	r3, r3, #3
 801102c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011030:	d106      	bne.n	8011040 <pbuf_alloc+0xf4>
 8011032:	4b3b      	ldr	r3, [pc, #236]	; (8011120 <pbuf_alloc+0x1d4>)
 8011034:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011038:	493c      	ldr	r1, [pc, #240]	; (801112c <pbuf_alloc+0x1e0>)
 801103a:	483b      	ldr	r0, [pc, #236]	; (8011128 <pbuf_alloc+0x1dc>)
 801103c:	f009 fe9e 	bl	801ad7c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	2b00      	cmp	r3, #0
 8011044:	d102      	bne.n	801104c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8011046:	693b      	ldr	r3, [r7, #16]
 8011048:	627b      	str	r3, [r7, #36]	; 0x24
 801104a:	e002      	b.n	8011052 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	693a      	ldr	r2, [r7, #16]
 8011050:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8011052:	693b      	ldr	r3, [r7, #16]
 8011054:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8011056:	8b7a      	ldrh	r2, [r7, #26]
 8011058:	89fb      	ldrh	r3, [r7, #14]
 801105a:	1ad3      	subs	r3, r2, r3
 801105c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801105e:	2300      	movs	r3, #0
 8011060:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8011062:	8b7b      	ldrh	r3, [r7, #26]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d19e      	bne.n	8010fa6 <pbuf_alloc+0x5a>
      break;
 8011068:	e055      	b.n	8011116 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801106a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801106c:	3303      	adds	r3, #3
 801106e:	b29b      	uxth	r3, r3
 8011070:	f023 0303 	bic.w	r3, r3, #3
 8011074:	b29a      	uxth	r2, r3
 8011076:	88bb      	ldrh	r3, [r7, #4]
 8011078:	3303      	adds	r3, #3
 801107a:	b29b      	uxth	r3, r3
 801107c:	f023 0303 	bic.w	r3, r3, #3
 8011080:	b29b      	uxth	r3, r3
 8011082:	4413      	add	r3, r2
 8011084:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8011086:	8b3b      	ldrh	r3, [r7, #24]
 8011088:	3310      	adds	r3, #16
 801108a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801108c:	8b3a      	ldrh	r2, [r7, #24]
 801108e:	88bb      	ldrh	r3, [r7, #4]
 8011090:	3303      	adds	r3, #3
 8011092:	f023 0303 	bic.w	r3, r3, #3
 8011096:	429a      	cmp	r2, r3
 8011098:	d306      	bcc.n	80110a8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801109a:	8afa      	ldrh	r2, [r7, #22]
 801109c:	88bb      	ldrh	r3, [r7, #4]
 801109e:	3303      	adds	r3, #3
 80110a0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80110a4:	429a      	cmp	r2, r3
 80110a6:	d201      	bcs.n	80110ac <pbuf_alloc+0x160>
        return NULL;
 80110a8:	2300      	movs	r3, #0
 80110aa:	e035      	b.n	8011118 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80110ac:	8afb      	ldrh	r3, [r7, #22]
 80110ae:	4618      	mov	r0, r3
 80110b0:	f7ff f972 	bl	8010398 <mem_malloc>
 80110b4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80110b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d101      	bne.n	80110c0 <pbuf_alloc+0x174>
        return NULL;
 80110bc:	2300      	movs	r3, #0
 80110be:	e02b      	b.n	8011118 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80110c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110c2:	3310      	adds	r3, #16
 80110c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80110c6:	4413      	add	r3, r2
 80110c8:	3303      	adds	r3, #3
 80110ca:	f023 0303 	bic.w	r3, r3, #3
 80110ce:	4618      	mov	r0, r3
 80110d0:	88b9      	ldrh	r1, [r7, #4]
 80110d2:	88ba      	ldrh	r2, [r7, #4]
 80110d4:	2300      	movs	r3, #0
 80110d6:	9301      	str	r3, [sp, #4]
 80110d8:	887b      	ldrh	r3, [r7, #2]
 80110da:	9300      	str	r3, [sp, #0]
 80110dc:	460b      	mov	r3, r1
 80110de:	4601      	mov	r1, r0
 80110e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80110e2:	f7ff ff09 	bl	8010ef8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80110e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	f003 0303 	and.w	r3, r3, #3
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d010      	beq.n	8011114 <pbuf_alloc+0x1c8>
 80110f2:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <pbuf_alloc+0x1d4>)
 80110f4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80110f8:	490d      	ldr	r1, [pc, #52]	; (8011130 <pbuf_alloc+0x1e4>)
 80110fa:	480b      	ldr	r0, [pc, #44]	; (8011128 <pbuf_alloc+0x1dc>)
 80110fc:	f009 fe3e 	bl	801ad7c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011100:	e008      	b.n	8011114 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011102:	4b07      	ldr	r3, [pc, #28]	; (8011120 <pbuf_alloc+0x1d4>)
 8011104:	f240 1227 	movw	r2, #295	; 0x127
 8011108:	490a      	ldr	r1, [pc, #40]	; (8011134 <pbuf_alloc+0x1e8>)
 801110a:	4807      	ldr	r0, [pc, #28]	; (8011128 <pbuf_alloc+0x1dc>)
 801110c:	f009 fe36 	bl	801ad7c <iprintf>
      return NULL;
 8011110:	2300      	movs	r3, #0
 8011112:	e001      	b.n	8011118 <pbuf_alloc+0x1cc>
      break;
 8011114:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011118:	4618      	mov	r0, r3
 801111a:	3728      	adds	r7, #40	; 0x28
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	0801c4e4 	.word	0x0801c4e4
 8011124:	0801c514 	.word	0x0801c514
 8011128:	0801c544 	.word	0x0801c544
 801112c:	0801c56c 	.word	0x0801c56c
 8011130:	0801c5a0 	.word	0x0801c5a0
 8011134:	0801c5cc 	.word	0x0801c5cc

08011138 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af02      	add	r7, sp, #8
 801113e:	6078      	str	r0, [r7, #4]
 8011140:	460b      	mov	r3, r1
 8011142:	807b      	strh	r3, [r7, #2]
 8011144:	4613      	mov	r3, r2
 8011146:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011148:	883b      	ldrh	r3, [r7, #0]
 801114a:	2b41      	cmp	r3, #65	; 0x41
 801114c:	d009      	beq.n	8011162 <pbuf_alloc_reference+0x2a>
 801114e:	883b      	ldrh	r3, [r7, #0]
 8011150:	2b01      	cmp	r3, #1
 8011152:	d006      	beq.n	8011162 <pbuf_alloc_reference+0x2a>
 8011154:	4b0f      	ldr	r3, [pc, #60]	; (8011194 <pbuf_alloc_reference+0x5c>)
 8011156:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801115a:	490f      	ldr	r1, [pc, #60]	; (8011198 <pbuf_alloc_reference+0x60>)
 801115c:	480f      	ldr	r0, [pc, #60]	; (801119c <pbuf_alloc_reference+0x64>)
 801115e:	f009 fe0d 	bl	801ad7c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011162:	200b      	movs	r0, #11
 8011164:	f7ff fabc 	bl	80106e0 <memp_malloc>
 8011168:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d101      	bne.n	8011174 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011170:	2300      	movs	r3, #0
 8011172:	e00b      	b.n	801118c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011174:	8879      	ldrh	r1, [r7, #2]
 8011176:	887a      	ldrh	r2, [r7, #2]
 8011178:	2300      	movs	r3, #0
 801117a:	9301      	str	r3, [sp, #4]
 801117c:	883b      	ldrh	r3, [r7, #0]
 801117e:	9300      	str	r3, [sp, #0]
 8011180:	460b      	mov	r3, r1
 8011182:	6879      	ldr	r1, [r7, #4]
 8011184:	68f8      	ldr	r0, [r7, #12]
 8011186:	f7ff feb7 	bl	8010ef8 <pbuf_init_alloced_pbuf>
  return p;
 801118a:	68fb      	ldr	r3, [r7, #12]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3710      	adds	r7, #16
 8011190:	46bd      	mov	sp, r7
 8011192:	bd80      	pop	{r7, pc}
 8011194:	0801c4e4 	.word	0x0801c4e4
 8011198:	0801c5e8 	.word	0x0801c5e8
 801119c:	0801c544 	.word	0x0801c544

080111a0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 80111a0:	b580      	push	{r7, lr}
 80111a2:	b088      	sub	sp, #32
 80111a4:	af02      	add	r7, sp, #8
 80111a6:	607b      	str	r3, [r7, #4]
 80111a8:	4603      	mov	r3, r0
 80111aa:	73fb      	strb	r3, [r7, #15]
 80111ac:	460b      	mov	r3, r1
 80111ae:	81bb      	strh	r3, [r7, #12]
 80111b0:	4613      	mov	r3, r2
 80111b2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 80111b4:	7bfb      	ldrb	r3, [r7, #15]
 80111b6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80111b8:	8a7b      	ldrh	r3, [r7, #18]
 80111ba:	3303      	adds	r3, #3
 80111bc:	f023 0203 	bic.w	r2, r3, #3
 80111c0:	89bb      	ldrh	r3, [r7, #12]
 80111c2:	441a      	add	r2, r3
 80111c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111c6:	429a      	cmp	r2, r3
 80111c8:	d901      	bls.n	80111ce <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80111ca:	2300      	movs	r3, #0
 80111cc:	e018      	b.n	8011200 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 80111ce:	6a3b      	ldr	r3, [r7, #32]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d007      	beq.n	80111e4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80111d4:	8a7b      	ldrh	r3, [r7, #18]
 80111d6:	3303      	adds	r3, #3
 80111d8:	f023 0303 	bic.w	r3, r3, #3
 80111dc:	6a3a      	ldr	r2, [r7, #32]
 80111de:	4413      	add	r3, r2
 80111e0:	617b      	str	r3, [r7, #20]
 80111e2:	e001      	b.n	80111e8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80111e4:	2300      	movs	r3, #0
 80111e6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80111e8:	6878      	ldr	r0, [r7, #4]
 80111ea:	89b9      	ldrh	r1, [r7, #12]
 80111ec:	89ba      	ldrh	r2, [r7, #12]
 80111ee:	2302      	movs	r3, #2
 80111f0:	9301      	str	r3, [sp, #4]
 80111f2:	897b      	ldrh	r3, [r7, #10]
 80111f4:	9300      	str	r3, [sp, #0]
 80111f6:	460b      	mov	r3, r1
 80111f8:	6979      	ldr	r1, [r7, #20]
 80111fa:	f7ff fe7d 	bl	8010ef8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80111fe:	687b      	ldr	r3, [r7, #4]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3718      	adds	r7, #24
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
 8011210:	460b      	mov	r3, r1
 8011212:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d106      	bne.n	8011228 <pbuf_realloc+0x20>
 801121a:	4b3a      	ldr	r3, [pc, #232]	; (8011304 <pbuf_realloc+0xfc>)
 801121c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011220:	4939      	ldr	r1, [pc, #228]	; (8011308 <pbuf_realloc+0x100>)
 8011222:	483a      	ldr	r0, [pc, #232]	; (801130c <pbuf_realloc+0x104>)
 8011224:	f009 fdaa 	bl	801ad7c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	891b      	ldrh	r3, [r3, #8]
 801122c:	887a      	ldrh	r2, [r7, #2]
 801122e:	429a      	cmp	r2, r3
 8011230:	d263      	bcs.n	80112fa <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	891a      	ldrh	r2, [r3, #8]
 8011236:	887b      	ldrh	r3, [r7, #2]
 8011238:	1ad3      	subs	r3, r2, r3
 801123a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801123c:	887b      	ldrh	r3, [r7, #2]
 801123e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011244:	e018      	b.n	8011278 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	895b      	ldrh	r3, [r3, #10]
 801124a:	897a      	ldrh	r2, [r7, #10]
 801124c:	1ad3      	subs	r3, r2, r3
 801124e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	891a      	ldrh	r2, [r3, #8]
 8011254:	893b      	ldrh	r3, [r7, #8]
 8011256:	1ad3      	subs	r3, r2, r3
 8011258:	b29a      	uxth	r2, r3
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d106      	bne.n	8011278 <pbuf_realloc+0x70>
 801126a:	4b26      	ldr	r3, [pc, #152]	; (8011304 <pbuf_realloc+0xfc>)
 801126c:	f240 12af 	movw	r2, #431	; 0x1af
 8011270:	4927      	ldr	r1, [pc, #156]	; (8011310 <pbuf_realloc+0x108>)
 8011272:	4826      	ldr	r0, [pc, #152]	; (801130c <pbuf_realloc+0x104>)
 8011274:	f009 fd82 	bl	801ad7c <iprintf>
  while (rem_len > q->len) {
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	895b      	ldrh	r3, [r3, #10]
 801127c:	897a      	ldrh	r2, [r7, #10]
 801127e:	429a      	cmp	r2, r3
 8011280:	d8e1      	bhi.n	8011246 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	7b1b      	ldrb	r3, [r3, #12]
 8011286:	f003 030f 	and.w	r3, r3, #15
 801128a:	2b00      	cmp	r3, #0
 801128c:	d121      	bne.n	80112d2 <pbuf_realloc+0xca>
 801128e:	68fb      	ldr	r3, [r7, #12]
 8011290:	895b      	ldrh	r3, [r3, #10]
 8011292:	897a      	ldrh	r2, [r7, #10]
 8011294:	429a      	cmp	r2, r3
 8011296:	d01c      	beq.n	80112d2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	7b5b      	ldrb	r3, [r3, #13]
 801129c:	f003 0302 	and.w	r3, r3, #2
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d116      	bne.n	80112d2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	685a      	ldr	r2, [r3, #4]
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	1ad3      	subs	r3, r2, r3
 80112ac:	b29a      	uxth	r2, r3
 80112ae:	897b      	ldrh	r3, [r7, #10]
 80112b0:	4413      	add	r3, r2
 80112b2:	b29b      	uxth	r3, r3
 80112b4:	4619      	mov	r1, r3
 80112b6:	68f8      	ldr	r0, [r7, #12]
 80112b8:	f7fe ff64 	bl	8010184 <mem_trim>
 80112bc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d106      	bne.n	80112d2 <pbuf_realloc+0xca>
 80112c4:	4b0f      	ldr	r3, [pc, #60]	; (8011304 <pbuf_realloc+0xfc>)
 80112c6:	f240 12bd 	movw	r2, #445	; 0x1bd
 80112ca:	4912      	ldr	r1, [pc, #72]	; (8011314 <pbuf_realloc+0x10c>)
 80112cc:	480f      	ldr	r0, [pc, #60]	; (801130c <pbuf_realloc+0x104>)
 80112ce:	f009 fd55 	bl	801ad7c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	897a      	ldrh	r2, [r7, #10]
 80112d6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	895a      	ldrh	r2, [r3, #10]
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d004      	beq.n	80112f2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	4618      	mov	r0, r3
 80112ee:	f000 f911 	bl	8011514 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	2200      	movs	r2, #0
 80112f6:	601a      	str	r2, [r3, #0]
 80112f8:	e000      	b.n	80112fc <pbuf_realloc+0xf4>
    return;
 80112fa:	bf00      	nop

}
 80112fc:	3710      	adds	r7, #16
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	0801c4e4 	.word	0x0801c4e4
 8011308:	0801c5fc 	.word	0x0801c5fc
 801130c:	0801c544 	.word	0x0801c544
 8011310:	0801c614 	.word	0x0801c614
 8011314:	0801c62c 	.word	0x0801c62c

08011318 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b086      	sub	sp, #24
 801131c:	af00      	add	r7, sp, #0
 801131e:	60f8      	str	r0, [r7, #12]
 8011320:	60b9      	str	r1, [r7, #8]
 8011322:	4613      	mov	r3, r2
 8011324:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d106      	bne.n	801133a <pbuf_add_header_impl+0x22>
 801132c:	4b2b      	ldr	r3, [pc, #172]	; (80113dc <pbuf_add_header_impl+0xc4>)
 801132e:	f240 12df 	movw	r2, #479	; 0x1df
 8011332:	492b      	ldr	r1, [pc, #172]	; (80113e0 <pbuf_add_header_impl+0xc8>)
 8011334:	482b      	ldr	r0, [pc, #172]	; (80113e4 <pbuf_add_header_impl+0xcc>)
 8011336:	f009 fd21 	bl	801ad7c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d003      	beq.n	8011348 <pbuf_add_header_impl+0x30>
 8011340:	68bb      	ldr	r3, [r7, #8]
 8011342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011346:	d301      	bcc.n	801134c <pbuf_add_header_impl+0x34>
    return 1;
 8011348:	2301      	movs	r3, #1
 801134a:	e043      	b.n	80113d4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d101      	bne.n	8011356 <pbuf_add_header_impl+0x3e>
    return 0;
 8011352:	2300      	movs	r3, #0
 8011354:	e03e      	b.n	80113d4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011356:	68bb      	ldr	r3, [r7, #8]
 8011358:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	891a      	ldrh	r2, [r3, #8]
 801135e:	8a7b      	ldrh	r3, [r7, #18]
 8011360:	4413      	add	r3, r2
 8011362:	b29b      	uxth	r3, r3
 8011364:	8a7a      	ldrh	r2, [r7, #18]
 8011366:	429a      	cmp	r2, r3
 8011368:	d901      	bls.n	801136e <pbuf_add_header_impl+0x56>
    return 1;
 801136a:	2301      	movs	r3, #1
 801136c:	e032      	b.n	80113d4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	7b1b      	ldrb	r3, [r3, #12]
 8011372:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011374:	8a3b      	ldrh	r3, [r7, #16]
 8011376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801137a:	2b00      	cmp	r3, #0
 801137c:	d00c      	beq.n	8011398 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	685a      	ldr	r2, [r3, #4]
 8011382:	68bb      	ldr	r3, [r7, #8]
 8011384:	425b      	negs	r3, r3
 8011386:	4413      	add	r3, r2
 8011388:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	3310      	adds	r3, #16
 801138e:	697a      	ldr	r2, [r7, #20]
 8011390:	429a      	cmp	r2, r3
 8011392:	d20d      	bcs.n	80113b0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011394:	2301      	movs	r3, #1
 8011396:	e01d      	b.n	80113d4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011398:	79fb      	ldrb	r3, [r7, #7]
 801139a:	2b00      	cmp	r3, #0
 801139c:	d006      	beq.n	80113ac <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	685a      	ldr	r2, [r3, #4]
 80113a2:	68bb      	ldr	r3, [r7, #8]
 80113a4:	425b      	negs	r3, r3
 80113a6:	4413      	add	r3, r2
 80113a8:	617b      	str	r3, [r7, #20]
 80113aa:	e001      	b.n	80113b0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 80113ac:	2301      	movs	r3, #1
 80113ae:	e011      	b.n	80113d4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	697a      	ldr	r2, [r7, #20]
 80113b4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	895a      	ldrh	r2, [r3, #10]
 80113ba:	8a7b      	ldrh	r3, [r7, #18]
 80113bc:	4413      	add	r3, r2
 80113be:	b29a      	uxth	r2, r3
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	891a      	ldrh	r2, [r3, #8]
 80113c8:	8a7b      	ldrh	r3, [r7, #18]
 80113ca:	4413      	add	r3, r2
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	811a      	strh	r2, [r3, #8]


  return 0;
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3718      	adds	r7, #24
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}
 80113dc:	0801c4e4 	.word	0x0801c4e4
 80113e0:	0801c648 	.word	0x0801c648
 80113e4:	0801c544 	.word	0x0801c544

080113e8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	b082      	sub	sp, #8
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
 80113f0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80113f2:	2200      	movs	r2, #0
 80113f4:	6839      	ldr	r1, [r7, #0]
 80113f6:	6878      	ldr	r0, [r7, #4]
 80113f8:	f7ff ff8e 	bl	8011318 <pbuf_add_header_impl>
 80113fc:	4603      	mov	r3, r0
}
 80113fe:	4618      	mov	r0, r3
 8011400:	3708      	adds	r7, #8
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
	...

08011408 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011408:	b580      	push	{r7, lr}
 801140a:	b084      	sub	sp, #16
 801140c:	af00      	add	r7, sp, #0
 801140e:	6078      	str	r0, [r7, #4]
 8011410:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d106      	bne.n	8011426 <pbuf_remove_header+0x1e>
 8011418:	4b20      	ldr	r3, [pc, #128]	; (801149c <pbuf_remove_header+0x94>)
 801141a:	f240 224b 	movw	r2, #587	; 0x24b
 801141e:	4920      	ldr	r1, [pc, #128]	; (80114a0 <pbuf_remove_header+0x98>)
 8011420:	4820      	ldr	r0, [pc, #128]	; (80114a4 <pbuf_remove_header+0x9c>)
 8011422:	f009 fcab 	bl	801ad7c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d003      	beq.n	8011434 <pbuf_remove_header+0x2c>
 801142c:	683b      	ldr	r3, [r7, #0]
 801142e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011432:	d301      	bcc.n	8011438 <pbuf_remove_header+0x30>
    return 1;
 8011434:	2301      	movs	r3, #1
 8011436:	e02c      	b.n	8011492 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	2b00      	cmp	r3, #0
 801143c:	d101      	bne.n	8011442 <pbuf_remove_header+0x3a>
    return 0;
 801143e:	2300      	movs	r3, #0
 8011440:	e027      	b.n	8011492 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	895b      	ldrh	r3, [r3, #10]
 801144a:	89fa      	ldrh	r2, [r7, #14]
 801144c:	429a      	cmp	r2, r3
 801144e:	d908      	bls.n	8011462 <pbuf_remove_header+0x5a>
 8011450:	4b12      	ldr	r3, [pc, #72]	; (801149c <pbuf_remove_header+0x94>)
 8011452:	f240 2255 	movw	r2, #597	; 0x255
 8011456:	4914      	ldr	r1, [pc, #80]	; (80114a8 <pbuf_remove_header+0xa0>)
 8011458:	4812      	ldr	r0, [pc, #72]	; (80114a4 <pbuf_remove_header+0x9c>)
 801145a:	f009 fc8f 	bl	801ad7c <iprintf>
 801145e:	2301      	movs	r3, #1
 8011460:	e017      	b.n	8011492 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	685b      	ldr	r3, [r3, #4]
 8011466:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	685a      	ldr	r2, [r3, #4]
 801146c:	683b      	ldr	r3, [r7, #0]
 801146e:	441a      	add	r2, r3
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	895a      	ldrh	r2, [r3, #10]
 8011478:	89fb      	ldrh	r3, [r7, #14]
 801147a:	1ad3      	subs	r3, r2, r3
 801147c:	b29a      	uxth	r2, r3
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	891a      	ldrh	r2, [r3, #8]
 8011486:	89fb      	ldrh	r3, [r7, #14]
 8011488:	1ad3      	subs	r3, r2, r3
 801148a:	b29a      	uxth	r2, r3
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011490:	2300      	movs	r3, #0
}
 8011492:	4618      	mov	r0, r3
 8011494:	3710      	adds	r7, #16
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
 801149a:	bf00      	nop
 801149c:	0801c4e4 	.word	0x0801c4e4
 80114a0:	0801c648 	.word	0x0801c648
 80114a4:	0801c544 	.word	0x0801c544
 80114a8:	0801c654 	.word	0x0801c654

080114ac <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b082      	sub	sp, #8
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	460b      	mov	r3, r1
 80114b6:	807b      	strh	r3, [r7, #2]
 80114b8:	4613      	mov	r3, r2
 80114ba:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80114bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	da08      	bge.n	80114d6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80114c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114c8:	425b      	negs	r3, r3
 80114ca:	4619      	mov	r1, r3
 80114cc:	6878      	ldr	r0, [r7, #4]
 80114ce:	f7ff ff9b 	bl	8011408 <pbuf_remove_header>
 80114d2:	4603      	mov	r3, r0
 80114d4:	e007      	b.n	80114e6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80114d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114da:	787a      	ldrb	r2, [r7, #1]
 80114dc:	4619      	mov	r1, r3
 80114de:	6878      	ldr	r0, [r7, #4]
 80114e0:	f7ff ff1a 	bl	8011318 <pbuf_add_header_impl>
 80114e4:	4603      	mov	r3, r0
  }
}
 80114e6:	4618      	mov	r0, r3
 80114e8:	3708      	adds	r7, #8
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}

080114ee <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80114ee:	b580      	push	{r7, lr}
 80114f0:	b082      	sub	sp, #8
 80114f2:	af00      	add	r7, sp, #0
 80114f4:	6078      	str	r0, [r7, #4]
 80114f6:	460b      	mov	r3, r1
 80114f8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80114fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80114fe:	2201      	movs	r2, #1
 8011500:	4619      	mov	r1, r3
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f7ff ffd2 	bl	80114ac <pbuf_header_impl>
 8011508:	4603      	mov	r3, r0
}
 801150a:	4618      	mov	r0, r3
 801150c:	3708      	adds	r7, #8
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}
	...

08011514 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b088      	sub	sp, #32
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d10b      	bne.n	801153a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	2b00      	cmp	r3, #0
 8011526:	d106      	bne.n	8011536 <pbuf_free+0x22>
 8011528:	4b3b      	ldr	r3, [pc, #236]	; (8011618 <pbuf_free+0x104>)
 801152a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801152e:	493b      	ldr	r1, [pc, #236]	; (801161c <pbuf_free+0x108>)
 8011530:	483b      	ldr	r0, [pc, #236]	; (8011620 <pbuf_free+0x10c>)
 8011532:	f009 fc23 	bl	801ad7c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011536:	2300      	movs	r3, #0
 8011538:	e069      	b.n	801160e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801153e:	e062      	b.n	8011606 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011540:	f009 fa62 	bl	801aa08 <sys_arch_protect>
 8011544:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	7b9b      	ldrb	r3, [r3, #14]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d106      	bne.n	801155c <pbuf_free+0x48>
 801154e:	4b32      	ldr	r3, [pc, #200]	; (8011618 <pbuf_free+0x104>)
 8011550:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011554:	4933      	ldr	r1, [pc, #204]	; (8011624 <pbuf_free+0x110>)
 8011556:	4832      	ldr	r0, [pc, #200]	; (8011620 <pbuf_free+0x10c>)
 8011558:	f009 fc10 	bl	801ad7c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	7b9b      	ldrb	r3, [r3, #14]
 8011560:	3b01      	subs	r3, #1
 8011562:	b2da      	uxtb	r2, r3
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	739a      	strb	r2, [r3, #14]
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	7b9b      	ldrb	r3, [r3, #14]
 801156c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801156e:	69b8      	ldr	r0, [r7, #24]
 8011570:	f009 fa58 	bl	801aa24 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011574:	7dfb      	ldrb	r3, [r7, #23]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d143      	bne.n	8011602 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	7b1b      	ldrb	r3, [r3, #12]
 8011584:	f003 030f 	and.w	r3, r3, #15
 8011588:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	7b5b      	ldrb	r3, [r3, #13]
 801158e:	f003 0302 	and.w	r3, r3, #2
 8011592:	2b00      	cmp	r3, #0
 8011594:	d011      	beq.n	80115ba <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801159a:	68bb      	ldr	r3, [r7, #8]
 801159c:	691b      	ldr	r3, [r3, #16]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d106      	bne.n	80115b0 <pbuf_free+0x9c>
 80115a2:	4b1d      	ldr	r3, [pc, #116]	; (8011618 <pbuf_free+0x104>)
 80115a4:	f240 22ff 	movw	r2, #767	; 0x2ff
 80115a8:	491f      	ldr	r1, [pc, #124]	; (8011628 <pbuf_free+0x114>)
 80115aa:	481d      	ldr	r0, [pc, #116]	; (8011620 <pbuf_free+0x10c>)
 80115ac:	f009 fbe6 	bl	801ad7c <iprintf>
        pc->custom_free_function(p);
 80115b0:	68bb      	ldr	r3, [r7, #8]
 80115b2:	691b      	ldr	r3, [r3, #16]
 80115b4:	6878      	ldr	r0, [r7, #4]
 80115b6:	4798      	blx	r3
 80115b8:	e01d      	b.n	80115f6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80115ba:	7bfb      	ldrb	r3, [r7, #15]
 80115bc:	2b02      	cmp	r3, #2
 80115be:	d104      	bne.n	80115ca <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80115c0:	6879      	ldr	r1, [r7, #4]
 80115c2:	200c      	movs	r0, #12
 80115c4:	f7ff f902 	bl	80107cc <memp_free>
 80115c8:	e015      	b.n	80115f6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80115ca:	7bfb      	ldrb	r3, [r7, #15]
 80115cc:	2b01      	cmp	r3, #1
 80115ce:	d104      	bne.n	80115da <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80115d0:	6879      	ldr	r1, [r7, #4]
 80115d2:	200b      	movs	r0, #11
 80115d4:	f7ff f8fa 	bl	80107cc <memp_free>
 80115d8:	e00d      	b.n	80115f6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80115da:	7bfb      	ldrb	r3, [r7, #15]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d103      	bne.n	80115e8 <pbuf_free+0xd4>
          mem_free(p);
 80115e0:	6878      	ldr	r0, [r7, #4]
 80115e2:	f7fe fd3f 	bl	8010064 <mem_free>
 80115e6:	e006      	b.n	80115f6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80115e8:	4b0b      	ldr	r3, [pc, #44]	; (8011618 <pbuf_free+0x104>)
 80115ea:	f240 320f 	movw	r2, #783	; 0x30f
 80115ee:	490f      	ldr	r1, [pc, #60]	; (801162c <pbuf_free+0x118>)
 80115f0:	480b      	ldr	r0, [pc, #44]	; (8011620 <pbuf_free+0x10c>)
 80115f2:	f009 fbc3 	bl	801ad7c <iprintf>
        }
      }
      count++;
 80115f6:	7ffb      	ldrb	r3, [r7, #31]
 80115f8:	3301      	adds	r3, #1
 80115fa:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80115fc:	693b      	ldr	r3, [r7, #16]
 80115fe:	607b      	str	r3, [r7, #4]
 8011600:	e001      	b.n	8011606 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011602:	2300      	movs	r3, #0
 8011604:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d199      	bne.n	8011540 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801160c:	7ffb      	ldrb	r3, [r7, #31]
}
 801160e:	4618      	mov	r0, r3
 8011610:	3720      	adds	r7, #32
 8011612:	46bd      	mov	sp, r7
 8011614:	bd80      	pop	{r7, pc}
 8011616:	bf00      	nop
 8011618:	0801c4e4 	.word	0x0801c4e4
 801161c:	0801c648 	.word	0x0801c648
 8011620:	0801c544 	.word	0x0801c544
 8011624:	0801c674 	.word	0x0801c674
 8011628:	0801c68c 	.word	0x0801c68c
 801162c:	0801c6b0 	.word	0x0801c6b0

08011630 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011630:	b480      	push	{r7}
 8011632:	b085      	sub	sp, #20
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011638:	2300      	movs	r3, #0
 801163a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801163c:	e005      	b.n	801164a <pbuf_clen+0x1a>
    ++len;
 801163e:	89fb      	ldrh	r3, [r7, #14]
 8011640:	3301      	adds	r3, #1
 8011642:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801164a:	687b      	ldr	r3, [r7, #4]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1f6      	bne.n	801163e <pbuf_clen+0xe>
  }
  return len;
 8011650:	89fb      	ldrh	r3, [r7, #14]
}
 8011652:	4618      	mov	r0, r3
 8011654:	3714      	adds	r7, #20
 8011656:	46bd      	mov	sp, r7
 8011658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165c:	4770      	bx	lr
	...

08011660 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b084      	sub	sp, #16
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d016      	beq.n	801169c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801166e:	f009 f9cb 	bl	801aa08 <sys_arch_protect>
 8011672:	60f8      	str	r0, [r7, #12]
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	7b9b      	ldrb	r3, [r3, #14]
 8011678:	3301      	adds	r3, #1
 801167a:	b2da      	uxtb	r2, r3
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	739a      	strb	r2, [r3, #14]
 8011680:	68f8      	ldr	r0, [r7, #12]
 8011682:	f009 f9cf 	bl	801aa24 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	7b9b      	ldrb	r3, [r3, #14]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d106      	bne.n	801169c <pbuf_ref+0x3c>
 801168e:	4b05      	ldr	r3, [pc, #20]	; (80116a4 <pbuf_ref+0x44>)
 8011690:	f240 3242 	movw	r2, #834	; 0x342
 8011694:	4904      	ldr	r1, [pc, #16]	; (80116a8 <pbuf_ref+0x48>)
 8011696:	4805      	ldr	r0, [pc, #20]	; (80116ac <pbuf_ref+0x4c>)
 8011698:	f009 fb70 	bl	801ad7c <iprintf>
  }
}
 801169c:	bf00      	nop
 801169e:	3710      	adds	r7, #16
 80116a0:	46bd      	mov	sp, r7
 80116a2:	bd80      	pop	{r7, pc}
 80116a4:	0801c4e4 	.word	0x0801c4e4
 80116a8:	0801c6c4 	.word	0x0801c6c4
 80116ac:	0801c544 	.word	0x0801c544

080116b0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b084      	sub	sp, #16
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d002      	beq.n	80116c6 <pbuf_cat+0x16>
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d107      	bne.n	80116d6 <pbuf_cat+0x26>
 80116c6:	4b20      	ldr	r3, [pc, #128]	; (8011748 <pbuf_cat+0x98>)
 80116c8:	f240 3259 	movw	r2, #857	; 0x359
 80116cc:	491f      	ldr	r1, [pc, #124]	; (801174c <pbuf_cat+0x9c>)
 80116ce:	4820      	ldr	r0, [pc, #128]	; (8011750 <pbuf_cat+0xa0>)
 80116d0:	f009 fb54 	bl	801ad7c <iprintf>
 80116d4:	e034      	b.n	8011740 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	60fb      	str	r3, [r7, #12]
 80116da:	e00a      	b.n	80116f2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	891a      	ldrh	r2, [r3, #8]
 80116e0:	683b      	ldr	r3, [r7, #0]
 80116e2:	891b      	ldrh	r3, [r3, #8]
 80116e4:	4413      	add	r3, r2
 80116e6:	b29a      	uxth	r2, r3
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	60fb      	str	r3, [r7, #12]
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d1f0      	bne.n	80116dc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	891a      	ldrh	r2, [r3, #8]
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	895b      	ldrh	r3, [r3, #10]
 8011702:	429a      	cmp	r2, r3
 8011704:	d006      	beq.n	8011714 <pbuf_cat+0x64>
 8011706:	4b10      	ldr	r3, [pc, #64]	; (8011748 <pbuf_cat+0x98>)
 8011708:	f240 3262 	movw	r2, #866	; 0x362
 801170c:	4911      	ldr	r1, [pc, #68]	; (8011754 <pbuf_cat+0xa4>)
 801170e:	4810      	ldr	r0, [pc, #64]	; (8011750 <pbuf_cat+0xa0>)
 8011710:	f009 fb34 	bl	801ad7c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d006      	beq.n	801172a <pbuf_cat+0x7a>
 801171c:	4b0a      	ldr	r3, [pc, #40]	; (8011748 <pbuf_cat+0x98>)
 801171e:	f240 3263 	movw	r2, #867	; 0x363
 8011722:	490d      	ldr	r1, [pc, #52]	; (8011758 <pbuf_cat+0xa8>)
 8011724:	480a      	ldr	r0, [pc, #40]	; (8011750 <pbuf_cat+0xa0>)
 8011726:	f009 fb29 	bl	801ad7c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	891a      	ldrh	r2, [r3, #8]
 801172e:	683b      	ldr	r3, [r7, #0]
 8011730:	891b      	ldrh	r3, [r3, #8]
 8011732:	4413      	add	r3, r2
 8011734:	b29a      	uxth	r2, r3
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	683a      	ldr	r2, [r7, #0]
 801173e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	0801c4e4 	.word	0x0801c4e4
 801174c:	0801c6d8 	.word	0x0801c6d8
 8011750:	0801c544 	.word	0x0801c544
 8011754:	0801c710 	.word	0x0801c710
 8011758:	0801c740 	.word	0x0801c740

0801175c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801175c:	b580      	push	{r7, lr}
 801175e:	b082      	sub	sp, #8
 8011760:	af00      	add	r7, sp, #0
 8011762:	6078      	str	r0, [r7, #4]
 8011764:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8011766:	6839      	ldr	r1, [r7, #0]
 8011768:	6878      	ldr	r0, [r7, #4]
 801176a:	f7ff ffa1 	bl	80116b0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801176e:	6838      	ldr	r0, [r7, #0]
 8011770:	f7ff ff76 	bl	8011660 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011774:	bf00      	nop
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b086      	sub	sp, #24
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011786:	2300      	movs	r3, #0
 8011788:	617b      	str	r3, [r7, #20]
 801178a:	2300      	movs	r3, #0
 801178c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d008      	beq.n	80117a6 <pbuf_copy+0x2a>
 8011794:	683b      	ldr	r3, [r7, #0]
 8011796:	2b00      	cmp	r3, #0
 8011798:	d005      	beq.n	80117a6 <pbuf_copy+0x2a>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	891a      	ldrh	r2, [r3, #8]
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	891b      	ldrh	r3, [r3, #8]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	d209      	bcs.n	80117ba <pbuf_copy+0x3e>
 80117a6:	4b57      	ldr	r3, [pc, #348]	; (8011904 <pbuf_copy+0x188>)
 80117a8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80117ac:	4956      	ldr	r1, [pc, #344]	; (8011908 <pbuf_copy+0x18c>)
 80117ae:	4857      	ldr	r0, [pc, #348]	; (801190c <pbuf_copy+0x190>)
 80117b0:	f009 fae4 	bl	801ad7c <iprintf>
 80117b4:	f06f 030f 	mvn.w	r3, #15
 80117b8:	e09f      	b.n	80118fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	895b      	ldrh	r3, [r3, #10]
 80117be:	461a      	mov	r2, r3
 80117c0:	697b      	ldr	r3, [r7, #20]
 80117c2:	1ad2      	subs	r2, r2, r3
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	895b      	ldrh	r3, [r3, #10]
 80117c8:	4619      	mov	r1, r3
 80117ca:	693b      	ldr	r3, [r7, #16]
 80117cc:	1acb      	subs	r3, r1, r3
 80117ce:	429a      	cmp	r2, r3
 80117d0:	d306      	bcc.n	80117e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80117d2:	683b      	ldr	r3, [r7, #0]
 80117d4:	895b      	ldrh	r3, [r3, #10]
 80117d6:	461a      	mov	r2, r3
 80117d8:	693b      	ldr	r3, [r7, #16]
 80117da:	1ad3      	subs	r3, r2, r3
 80117dc:	60fb      	str	r3, [r7, #12]
 80117de:	e005      	b.n	80117ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	895b      	ldrh	r3, [r3, #10]
 80117e4:	461a      	mov	r2, r3
 80117e6:	697b      	ldr	r3, [r7, #20]
 80117e8:	1ad3      	subs	r3, r2, r3
 80117ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	685a      	ldr	r2, [r3, #4]
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	18d0      	adds	r0, r2, r3
 80117f4:	683b      	ldr	r3, [r7, #0]
 80117f6:	685a      	ldr	r2, [r3, #4]
 80117f8:	693b      	ldr	r3, [r7, #16]
 80117fa:	4413      	add	r3, r2
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	4619      	mov	r1, r3
 8011800:	f009 fa4b 	bl	801ac9a <memcpy>
    offset_to += len;
 8011804:	697a      	ldr	r2, [r7, #20]
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	4413      	add	r3, r2
 801180a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801180c:	693a      	ldr	r2, [r7, #16]
 801180e:	68fb      	ldr	r3, [r7, #12]
 8011810:	4413      	add	r3, r2
 8011812:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	895b      	ldrh	r3, [r3, #10]
 8011818:	461a      	mov	r2, r3
 801181a:	697b      	ldr	r3, [r7, #20]
 801181c:	4293      	cmp	r3, r2
 801181e:	d906      	bls.n	801182e <pbuf_copy+0xb2>
 8011820:	4b38      	ldr	r3, [pc, #224]	; (8011904 <pbuf_copy+0x188>)
 8011822:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011826:	493a      	ldr	r1, [pc, #232]	; (8011910 <pbuf_copy+0x194>)
 8011828:	4838      	ldr	r0, [pc, #224]	; (801190c <pbuf_copy+0x190>)
 801182a:	f009 faa7 	bl	801ad7c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	895b      	ldrh	r3, [r3, #10]
 8011832:	461a      	mov	r2, r3
 8011834:	693b      	ldr	r3, [r7, #16]
 8011836:	4293      	cmp	r3, r2
 8011838:	d906      	bls.n	8011848 <pbuf_copy+0xcc>
 801183a:	4b32      	ldr	r3, [pc, #200]	; (8011904 <pbuf_copy+0x188>)
 801183c:	f240 32da 	movw	r2, #986	; 0x3da
 8011840:	4934      	ldr	r1, [pc, #208]	; (8011914 <pbuf_copy+0x198>)
 8011842:	4832      	ldr	r0, [pc, #200]	; (801190c <pbuf_copy+0x190>)
 8011844:	f009 fa9a 	bl	801ad7c <iprintf>
    if (offset_from >= p_from->len) {
 8011848:	683b      	ldr	r3, [r7, #0]
 801184a:	895b      	ldrh	r3, [r3, #10]
 801184c:	461a      	mov	r2, r3
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	4293      	cmp	r3, r2
 8011852:	d304      	bcc.n	801185e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011854:	2300      	movs	r3, #0
 8011856:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011858:	683b      	ldr	r3, [r7, #0]
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	895b      	ldrh	r3, [r3, #10]
 8011862:	461a      	mov	r2, r3
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	4293      	cmp	r3, r2
 8011868:	d114      	bne.n	8011894 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801186a:	2300      	movs	r3, #0
 801186c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d10c      	bne.n	8011894 <pbuf_copy+0x118>
 801187a:	683b      	ldr	r3, [r7, #0]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d009      	beq.n	8011894 <pbuf_copy+0x118>
 8011880:	4b20      	ldr	r3, [pc, #128]	; (8011904 <pbuf_copy+0x188>)
 8011882:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011886:	4924      	ldr	r1, [pc, #144]	; (8011918 <pbuf_copy+0x19c>)
 8011888:	4820      	ldr	r0, [pc, #128]	; (801190c <pbuf_copy+0x190>)
 801188a:	f009 fa77 	bl	801ad7c <iprintf>
 801188e:	f06f 030f 	mvn.w	r3, #15
 8011892:	e032      	b.n	80118fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d013      	beq.n	80118c2 <pbuf_copy+0x146>
 801189a:	683b      	ldr	r3, [r7, #0]
 801189c:	895a      	ldrh	r2, [r3, #10]
 801189e:	683b      	ldr	r3, [r7, #0]
 80118a0:	891b      	ldrh	r3, [r3, #8]
 80118a2:	429a      	cmp	r2, r3
 80118a4:	d10d      	bne.n	80118c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d009      	beq.n	80118c2 <pbuf_copy+0x146>
 80118ae:	4b15      	ldr	r3, [pc, #84]	; (8011904 <pbuf_copy+0x188>)
 80118b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80118b4:	4919      	ldr	r1, [pc, #100]	; (801191c <pbuf_copy+0x1a0>)
 80118b6:	4815      	ldr	r0, [pc, #84]	; (801190c <pbuf_copy+0x190>)
 80118b8:	f009 fa60 	bl	801ad7c <iprintf>
 80118bc:	f06f 0305 	mvn.w	r3, #5
 80118c0:	e01b      	b.n	80118fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d013      	beq.n	80118f0 <pbuf_copy+0x174>
 80118c8:	687b      	ldr	r3, [r7, #4]
 80118ca:	895a      	ldrh	r2, [r3, #10]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	891b      	ldrh	r3, [r3, #8]
 80118d0:	429a      	cmp	r2, r3
 80118d2:	d10d      	bne.n	80118f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d009      	beq.n	80118f0 <pbuf_copy+0x174>
 80118dc:	4b09      	ldr	r3, [pc, #36]	; (8011904 <pbuf_copy+0x188>)
 80118de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80118e2:	490e      	ldr	r1, [pc, #56]	; (801191c <pbuf_copy+0x1a0>)
 80118e4:	4809      	ldr	r0, [pc, #36]	; (801190c <pbuf_copy+0x190>)
 80118e6:	f009 fa49 	bl	801ad7c <iprintf>
 80118ea:	f06f 0305 	mvn.w	r3, #5
 80118ee:	e004      	b.n	80118fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	f47f af61 	bne.w	80117ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80118f8:	2300      	movs	r3, #0
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	3718      	adds	r7, #24
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}
 8011902:	bf00      	nop
 8011904:	0801c4e4 	.word	0x0801c4e4
 8011908:	0801c78c 	.word	0x0801c78c
 801190c:	0801c544 	.word	0x0801c544
 8011910:	0801c7bc 	.word	0x0801c7bc
 8011914:	0801c7d4 	.word	0x0801c7d4
 8011918:	0801c7f0 	.word	0x0801c7f0
 801191c:	0801c800 	.word	0x0801c800

08011920 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011920:	b580      	push	{r7, lr}
 8011922:	b088      	sub	sp, #32
 8011924:	af00      	add	r7, sp, #0
 8011926:	60f8      	str	r0, [r7, #12]
 8011928:	60b9      	str	r1, [r7, #8]
 801192a:	4611      	mov	r1, r2
 801192c:	461a      	mov	r2, r3
 801192e:	460b      	mov	r3, r1
 8011930:	80fb      	strh	r3, [r7, #6]
 8011932:	4613      	mov	r3, r2
 8011934:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011936:	2300      	movs	r3, #0
 8011938:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801193a:	2300      	movs	r3, #0
 801193c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2b00      	cmp	r3, #0
 8011942:	d108      	bne.n	8011956 <pbuf_copy_partial+0x36>
 8011944:	4b2b      	ldr	r3, [pc, #172]	; (80119f4 <pbuf_copy_partial+0xd4>)
 8011946:	f240 420a 	movw	r2, #1034	; 0x40a
 801194a:	492b      	ldr	r1, [pc, #172]	; (80119f8 <pbuf_copy_partial+0xd8>)
 801194c:	482b      	ldr	r0, [pc, #172]	; (80119fc <pbuf_copy_partial+0xdc>)
 801194e:	f009 fa15 	bl	801ad7c <iprintf>
 8011952:	2300      	movs	r3, #0
 8011954:	e04a      	b.n	80119ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011956:	68bb      	ldr	r3, [r7, #8]
 8011958:	2b00      	cmp	r3, #0
 801195a:	d108      	bne.n	801196e <pbuf_copy_partial+0x4e>
 801195c:	4b25      	ldr	r3, [pc, #148]	; (80119f4 <pbuf_copy_partial+0xd4>)
 801195e:	f240 420b 	movw	r2, #1035	; 0x40b
 8011962:	4927      	ldr	r1, [pc, #156]	; (8011a00 <pbuf_copy_partial+0xe0>)
 8011964:	4825      	ldr	r0, [pc, #148]	; (80119fc <pbuf_copy_partial+0xdc>)
 8011966:	f009 fa09 	bl	801ad7c <iprintf>
 801196a:	2300      	movs	r3, #0
 801196c:	e03e      	b.n	80119ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	61fb      	str	r3, [r7, #28]
 8011972:	e034      	b.n	80119de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011974:	88bb      	ldrh	r3, [r7, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d00a      	beq.n	8011990 <pbuf_copy_partial+0x70>
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	895b      	ldrh	r3, [r3, #10]
 801197e:	88ba      	ldrh	r2, [r7, #4]
 8011980:	429a      	cmp	r2, r3
 8011982:	d305      	bcc.n	8011990 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011984:	69fb      	ldr	r3, [r7, #28]
 8011986:	895b      	ldrh	r3, [r3, #10]
 8011988:	88ba      	ldrh	r2, [r7, #4]
 801198a:	1ad3      	subs	r3, r2, r3
 801198c:	80bb      	strh	r3, [r7, #4]
 801198e:	e023      	b.n	80119d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011990:	69fb      	ldr	r3, [r7, #28]
 8011992:	895a      	ldrh	r2, [r3, #10]
 8011994:	88bb      	ldrh	r3, [r7, #4]
 8011996:	1ad3      	subs	r3, r2, r3
 8011998:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801199a:	8b3a      	ldrh	r2, [r7, #24]
 801199c:	88fb      	ldrh	r3, [r7, #6]
 801199e:	429a      	cmp	r2, r3
 80119a0:	d901      	bls.n	80119a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80119a2:	88fb      	ldrh	r3, [r7, #6]
 80119a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80119a6:	8b7b      	ldrh	r3, [r7, #26]
 80119a8:	68ba      	ldr	r2, [r7, #8]
 80119aa:	18d0      	adds	r0, r2, r3
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	685a      	ldr	r2, [r3, #4]
 80119b0:	88bb      	ldrh	r3, [r7, #4]
 80119b2:	4413      	add	r3, r2
 80119b4:	8b3a      	ldrh	r2, [r7, #24]
 80119b6:	4619      	mov	r1, r3
 80119b8:	f009 f96f 	bl	801ac9a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80119bc:	8afa      	ldrh	r2, [r7, #22]
 80119be:	8b3b      	ldrh	r3, [r7, #24]
 80119c0:	4413      	add	r3, r2
 80119c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80119c4:	8b7a      	ldrh	r2, [r7, #26]
 80119c6:	8b3b      	ldrh	r3, [r7, #24]
 80119c8:	4413      	add	r3, r2
 80119ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80119cc:	88fa      	ldrh	r2, [r7, #6]
 80119ce:	8b3b      	ldrh	r3, [r7, #24]
 80119d0:	1ad3      	subs	r3, r2, r3
 80119d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80119d4:	2300      	movs	r3, #0
 80119d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80119d8:	69fb      	ldr	r3, [r7, #28]
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	61fb      	str	r3, [r7, #28]
 80119de:	88fb      	ldrh	r3, [r7, #6]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d002      	beq.n	80119ea <pbuf_copy_partial+0xca>
 80119e4:	69fb      	ldr	r3, [r7, #28]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d1c4      	bne.n	8011974 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80119ea:	8afb      	ldrh	r3, [r7, #22]
}
 80119ec:	4618      	mov	r0, r3
 80119ee:	3720      	adds	r7, #32
 80119f0:	46bd      	mov	sp, r7
 80119f2:	bd80      	pop	{r7, pc}
 80119f4:	0801c4e4 	.word	0x0801c4e4
 80119f8:	0801c82c 	.word	0x0801c82c
 80119fc:	0801c544 	.word	0x0801c544
 8011a00:	0801c84c 	.word	0x0801c84c

08011a04 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b084      	sub	sp, #16
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	603a      	str	r2, [r7, #0]
 8011a0e:	71fb      	strb	r3, [r7, #7]
 8011a10:	460b      	mov	r3, r1
 8011a12:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011a14:	683b      	ldr	r3, [r7, #0]
 8011a16:	8919      	ldrh	r1, [r3, #8]
 8011a18:	88ba      	ldrh	r2, [r7, #4]
 8011a1a:	79fb      	ldrb	r3, [r7, #7]
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f7ff fa95 	bl	8010f4c <pbuf_alloc>
 8011a22:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d101      	bne.n	8011a2e <pbuf_clone+0x2a>
    return NULL;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	e011      	b.n	8011a52 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011a2e:	6839      	ldr	r1, [r7, #0]
 8011a30:	68f8      	ldr	r0, [r7, #12]
 8011a32:	f7ff fea3 	bl	801177c <pbuf_copy>
 8011a36:	4603      	mov	r3, r0
 8011a38:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011a3a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d006      	beq.n	8011a50 <pbuf_clone+0x4c>
 8011a42:	4b06      	ldr	r3, [pc, #24]	; (8011a5c <pbuf_clone+0x58>)
 8011a44:	f240 5224 	movw	r2, #1316	; 0x524
 8011a48:	4905      	ldr	r1, [pc, #20]	; (8011a60 <pbuf_clone+0x5c>)
 8011a4a:	4806      	ldr	r0, [pc, #24]	; (8011a64 <pbuf_clone+0x60>)
 8011a4c:	f009 f996 	bl	801ad7c <iprintf>
  return q;
 8011a50:	68fb      	ldr	r3, [r7, #12]
}
 8011a52:	4618      	mov	r0, r3
 8011a54:	3710      	adds	r7, #16
 8011a56:	46bd      	mov	sp, r7
 8011a58:	bd80      	pop	{r7, pc}
 8011a5a:	bf00      	nop
 8011a5c:	0801c4e4 	.word	0x0801c4e4
 8011a60:	0801c958 	.word	0x0801c958
 8011a64:	0801c544 	.word	0x0801c544

08011a68 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011a68:	b580      	push	{r7, lr}
 8011a6a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011a6c:	f009 f99e 	bl	801adac <rand>
 8011a70:	4603      	mov	r3, r0
 8011a72:	b29b      	uxth	r3, r3
 8011a74:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011a78:	b29b      	uxth	r3, r3
 8011a7a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011a7e:	b29a      	uxth	r2, r3
 8011a80:	4b01      	ldr	r3, [pc, #4]	; (8011a88 <tcp_init+0x20>)
 8011a82:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011a84:	bf00      	nop
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	24000030 	.word	0x24000030

08011a8c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011a8c:	b580      	push	{r7, lr}
 8011a8e:	b082      	sub	sp, #8
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	7d1b      	ldrb	r3, [r3, #20]
 8011a98:	2b01      	cmp	r3, #1
 8011a9a:	d105      	bne.n	8011aa8 <tcp_free+0x1c>
 8011a9c:	4b06      	ldr	r3, [pc, #24]	; (8011ab8 <tcp_free+0x2c>)
 8011a9e:	22d4      	movs	r2, #212	; 0xd4
 8011aa0:	4906      	ldr	r1, [pc, #24]	; (8011abc <tcp_free+0x30>)
 8011aa2:	4807      	ldr	r0, [pc, #28]	; (8011ac0 <tcp_free+0x34>)
 8011aa4:	f009 f96a 	bl	801ad7c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011aa8:	6879      	ldr	r1, [r7, #4]
 8011aaa:	2001      	movs	r0, #1
 8011aac:	f7fe fe8e 	bl	80107cc <memp_free>
}
 8011ab0:	bf00      	nop
 8011ab2:	3708      	adds	r7, #8
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}
 8011ab8:	0801c9e4 	.word	0x0801c9e4
 8011abc:	0801ca14 	.word	0x0801ca14
 8011ac0:	0801ca28 	.word	0x0801ca28

08011ac4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b082      	sub	sp, #8
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	7d1b      	ldrb	r3, [r3, #20]
 8011ad0:	2b01      	cmp	r3, #1
 8011ad2:	d105      	bne.n	8011ae0 <tcp_free_listen+0x1c>
 8011ad4:	4b06      	ldr	r3, [pc, #24]	; (8011af0 <tcp_free_listen+0x2c>)
 8011ad6:	22df      	movs	r2, #223	; 0xdf
 8011ad8:	4906      	ldr	r1, [pc, #24]	; (8011af4 <tcp_free_listen+0x30>)
 8011ada:	4807      	ldr	r0, [pc, #28]	; (8011af8 <tcp_free_listen+0x34>)
 8011adc:	f009 f94e 	bl	801ad7c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011ae0:	6879      	ldr	r1, [r7, #4]
 8011ae2:	2002      	movs	r0, #2
 8011ae4:	f7fe fe72 	bl	80107cc <memp_free>
}
 8011ae8:	bf00      	nop
 8011aea:	3708      	adds	r7, #8
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}
 8011af0:	0801c9e4 	.word	0x0801c9e4
 8011af4:	0801ca50 	.word	0x0801ca50
 8011af8:	0801ca28 	.word	0x0801ca28

08011afc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011afc:	b580      	push	{r7, lr}
 8011afe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011b00:	f001 f85c 	bl	8012bbc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011b04:	4b07      	ldr	r3, [pc, #28]	; (8011b24 <tcp_tmr+0x28>)
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	3301      	adds	r3, #1
 8011b0a:	b2da      	uxtb	r2, r3
 8011b0c:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <tcp_tmr+0x28>)
 8011b0e:	701a      	strb	r2, [r3, #0]
 8011b10:	4b04      	ldr	r3, [pc, #16]	; (8011b24 <tcp_tmr+0x28>)
 8011b12:	781b      	ldrb	r3, [r3, #0]
 8011b14:	f003 0301 	and.w	r3, r3, #1
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d001      	beq.n	8011b20 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011b1c:	f000 fd0e 	bl	801253c <tcp_slowtmr>
  }
}
 8011b20:	bf00      	nop
 8011b22:	bd80      	pop	{r7, pc}
 8011b24:	24004af9 	.word	0x24004af9

08011b28 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b084      	sub	sp, #16
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
 8011b30:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d105      	bne.n	8011b44 <tcp_remove_listener+0x1c>
 8011b38:	4b0d      	ldr	r3, [pc, #52]	; (8011b70 <tcp_remove_listener+0x48>)
 8011b3a:	22ff      	movs	r2, #255	; 0xff
 8011b3c:	490d      	ldr	r1, [pc, #52]	; (8011b74 <tcp_remove_listener+0x4c>)
 8011b3e:	480e      	ldr	r0, [pc, #56]	; (8011b78 <tcp_remove_listener+0x50>)
 8011b40:	f009 f91c 	bl	801ad7c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	60fb      	str	r3, [r7, #12]
 8011b48:	e00a      	b.n	8011b60 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b4e:	683a      	ldr	r2, [r7, #0]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d102      	bne.n	8011b5a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	2200      	movs	r2, #0
 8011b58:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	60fb      	str	r3, [r7, #12]
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d1f1      	bne.n	8011b4a <tcp_remove_listener+0x22>
    }
  }
}
 8011b66:	bf00      	nop
 8011b68:	bf00      	nop
 8011b6a:	3710      	adds	r7, #16
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	0801c9e4 	.word	0x0801c9e4
 8011b74:	0801ca6c 	.word	0x0801ca6c
 8011b78:	0801ca28 	.word	0x0801ca28

08011b7c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d106      	bne.n	8011b98 <tcp_listen_closed+0x1c>
 8011b8a:	4b14      	ldr	r3, [pc, #80]	; (8011bdc <tcp_listen_closed+0x60>)
 8011b8c:	f240 1211 	movw	r2, #273	; 0x111
 8011b90:	4913      	ldr	r1, [pc, #76]	; (8011be0 <tcp_listen_closed+0x64>)
 8011b92:	4814      	ldr	r0, [pc, #80]	; (8011be4 <tcp_listen_closed+0x68>)
 8011b94:	f009 f8f2 	bl	801ad7c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	7d1b      	ldrb	r3, [r3, #20]
 8011b9c:	2b01      	cmp	r3, #1
 8011b9e:	d006      	beq.n	8011bae <tcp_listen_closed+0x32>
 8011ba0:	4b0e      	ldr	r3, [pc, #56]	; (8011bdc <tcp_listen_closed+0x60>)
 8011ba2:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011ba6:	4910      	ldr	r1, [pc, #64]	; (8011be8 <tcp_listen_closed+0x6c>)
 8011ba8:	480e      	ldr	r0, [pc, #56]	; (8011be4 <tcp_listen_closed+0x68>)
 8011baa:	f009 f8e7 	bl	801ad7c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011bae:	2301      	movs	r3, #1
 8011bb0:	60fb      	str	r3, [r7, #12]
 8011bb2:	e00b      	b.n	8011bcc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011bb4:	4a0d      	ldr	r2, [pc, #52]	; (8011bec <tcp_listen_closed+0x70>)
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	6879      	ldr	r1, [r7, #4]
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7ff ffb1 	bl	8011b28 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	3301      	adds	r3, #1
 8011bca:	60fb      	str	r3, [r7, #12]
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2b03      	cmp	r3, #3
 8011bd0:	d9f0      	bls.n	8011bb4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011bd2:	bf00      	nop
 8011bd4:	bf00      	nop
 8011bd6:	3710      	adds	r7, #16
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	0801c9e4 	.word	0x0801c9e4
 8011be0:	0801ca94 	.word	0x0801ca94
 8011be4:	0801ca28 	.word	0x0801ca28
 8011be8:	0801caa0 	.word	0x0801caa0
 8011bec:	0801f310 	.word	0x0801f310

08011bf0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011bf0:	b5b0      	push	{r4, r5, r7, lr}
 8011bf2:	b088      	sub	sp, #32
 8011bf4:	af04      	add	r7, sp, #16
 8011bf6:	6078      	str	r0, [r7, #4]
 8011bf8:	460b      	mov	r3, r1
 8011bfa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d106      	bne.n	8011c10 <tcp_close_shutdown+0x20>
 8011c02:	4b63      	ldr	r3, [pc, #396]	; (8011d90 <tcp_close_shutdown+0x1a0>)
 8011c04:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011c08:	4962      	ldr	r1, [pc, #392]	; (8011d94 <tcp_close_shutdown+0x1a4>)
 8011c0a:	4863      	ldr	r0, [pc, #396]	; (8011d98 <tcp_close_shutdown+0x1a8>)
 8011c0c:	f009 f8b6 	bl	801ad7c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011c10:	78fb      	ldrb	r3, [r7, #3]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d066      	beq.n	8011ce4 <tcp_close_shutdown+0xf4>
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	7d1b      	ldrb	r3, [r3, #20]
 8011c1a:	2b04      	cmp	r3, #4
 8011c1c:	d003      	beq.n	8011c26 <tcp_close_shutdown+0x36>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	7d1b      	ldrb	r3, [r3, #20]
 8011c22:	2b07      	cmp	r3, #7
 8011c24:	d15e      	bne.n	8011ce4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d104      	bne.n	8011c38 <tcp_close_shutdown+0x48>
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011c32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011c36:	d055      	beq.n	8011ce4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	8b5b      	ldrh	r3, [r3, #26]
 8011c3c:	f003 0310 	and.w	r3, r3, #16
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d106      	bne.n	8011c52 <tcp_close_shutdown+0x62>
 8011c44:	4b52      	ldr	r3, [pc, #328]	; (8011d90 <tcp_close_shutdown+0x1a0>)
 8011c46:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011c4a:	4954      	ldr	r1, [pc, #336]	; (8011d9c <tcp_close_shutdown+0x1ac>)
 8011c4c:	4852      	ldr	r0, [pc, #328]	; (8011d98 <tcp_close_shutdown+0x1a8>)
 8011c4e:	f009 f895 	bl	801ad7c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011c5a:	687d      	ldr	r5, [r7, #4]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	3304      	adds	r3, #4
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	8ad2      	ldrh	r2, [r2, #22]
 8011c64:	6879      	ldr	r1, [r7, #4]
 8011c66:	8b09      	ldrh	r1, [r1, #24]
 8011c68:	9102      	str	r1, [sp, #8]
 8011c6a:	9201      	str	r2, [sp, #4]
 8011c6c:	9300      	str	r3, [sp, #0]
 8011c6e:	462b      	mov	r3, r5
 8011c70:	4622      	mov	r2, r4
 8011c72:	4601      	mov	r1, r0
 8011c74:	6878      	ldr	r0, [r7, #4]
 8011c76:	f005 fd85 	bl	8017784 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f001 fb66 	bl	801334c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011c80:	4b47      	ldr	r3, [pc, #284]	; (8011da0 <tcp_close_shutdown+0x1b0>)
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	687a      	ldr	r2, [r7, #4]
 8011c86:	429a      	cmp	r2, r3
 8011c88:	d105      	bne.n	8011c96 <tcp_close_shutdown+0xa6>
 8011c8a:	4b45      	ldr	r3, [pc, #276]	; (8011da0 <tcp_close_shutdown+0x1b0>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	68db      	ldr	r3, [r3, #12]
 8011c90:	4a43      	ldr	r2, [pc, #268]	; (8011da0 <tcp_close_shutdown+0x1b0>)
 8011c92:	6013      	str	r3, [r2, #0]
 8011c94:	e013      	b.n	8011cbe <tcp_close_shutdown+0xce>
 8011c96:	4b42      	ldr	r3, [pc, #264]	; (8011da0 <tcp_close_shutdown+0x1b0>)
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	60fb      	str	r3, [r7, #12]
 8011c9c:	e00c      	b.n	8011cb8 <tcp_close_shutdown+0xc8>
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	68db      	ldr	r3, [r3, #12]
 8011ca2:	687a      	ldr	r2, [r7, #4]
 8011ca4:	429a      	cmp	r2, r3
 8011ca6:	d104      	bne.n	8011cb2 <tcp_close_shutdown+0xc2>
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	68da      	ldr	r2, [r3, #12]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	60da      	str	r2, [r3, #12]
 8011cb0:	e005      	b.n	8011cbe <tcp_close_shutdown+0xce>
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	68db      	ldr	r3, [r3, #12]
 8011cb6:	60fb      	str	r3, [r7, #12]
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d1ef      	bne.n	8011c9e <tcp_close_shutdown+0xae>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	60da      	str	r2, [r3, #12]
 8011cc4:	4b37      	ldr	r3, [pc, #220]	; (8011da4 <tcp_close_shutdown+0x1b4>)
 8011cc6:	2201      	movs	r2, #1
 8011cc8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011cca:	4b37      	ldr	r3, [pc, #220]	; (8011da8 <tcp_close_shutdown+0x1b8>)
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	429a      	cmp	r2, r3
 8011cd2:	d102      	bne.n	8011cda <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011cd4:	f003 fffa 	bl	8015ccc <tcp_trigger_input_pcb_close>
 8011cd8:	e002      	b.n	8011ce0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7ff fed6 	bl	8011a8c <tcp_free>
      }
      return ERR_OK;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	e050      	b.n	8011d86 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	7d1b      	ldrb	r3, [r3, #20]
 8011ce8:	2b02      	cmp	r3, #2
 8011cea:	d03b      	beq.n	8011d64 <tcp_close_shutdown+0x174>
 8011cec:	2b02      	cmp	r3, #2
 8011cee:	dc44      	bgt.n	8011d7a <tcp_close_shutdown+0x18a>
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d002      	beq.n	8011cfa <tcp_close_shutdown+0x10a>
 8011cf4:	2b01      	cmp	r3, #1
 8011cf6:	d02a      	beq.n	8011d4e <tcp_close_shutdown+0x15e>
 8011cf8:	e03f      	b.n	8011d7a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	8adb      	ldrh	r3, [r3, #22]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d021      	beq.n	8011d46 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011d02:	4b2a      	ldr	r3, [pc, #168]	; (8011dac <tcp_close_shutdown+0x1bc>)
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	687a      	ldr	r2, [r7, #4]
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d105      	bne.n	8011d18 <tcp_close_shutdown+0x128>
 8011d0c:	4b27      	ldr	r3, [pc, #156]	; (8011dac <tcp_close_shutdown+0x1bc>)
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	68db      	ldr	r3, [r3, #12]
 8011d12:	4a26      	ldr	r2, [pc, #152]	; (8011dac <tcp_close_shutdown+0x1bc>)
 8011d14:	6013      	str	r3, [r2, #0]
 8011d16:	e013      	b.n	8011d40 <tcp_close_shutdown+0x150>
 8011d18:	4b24      	ldr	r3, [pc, #144]	; (8011dac <tcp_close_shutdown+0x1bc>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	60bb      	str	r3, [r7, #8]
 8011d1e:	e00c      	b.n	8011d3a <tcp_close_shutdown+0x14a>
 8011d20:	68bb      	ldr	r3, [r7, #8]
 8011d22:	68db      	ldr	r3, [r3, #12]
 8011d24:	687a      	ldr	r2, [r7, #4]
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d104      	bne.n	8011d34 <tcp_close_shutdown+0x144>
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	68da      	ldr	r2, [r3, #12]
 8011d2e:	68bb      	ldr	r3, [r7, #8]
 8011d30:	60da      	str	r2, [r3, #12]
 8011d32:	e005      	b.n	8011d40 <tcp_close_shutdown+0x150>
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	68db      	ldr	r3, [r3, #12]
 8011d38:	60bb      	str	r3, [r7, #8]
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d1ef      	bne.n	8011d20 <tcp_close_shutdown+0x130>
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2200      	movs	r2, #0
 8011d44:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011d46:	6878      	ldr	r0, [r7, #4]
 8011d48:	f7ff fea0 	bl	8011a8c <tcp_free>
      break;
 8011d4c:	e01a      	b.n	8011d84 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011d4e:	6878      	ldr	r0, [r7, #4]
 8011d50:	f7ff ff14 	bl	8011b7c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011d54:	6879      	ldr	r1, [r7, #4]
 8011d56:	4816      	ldr	r0, [pc, #88]	; (8011db0 <tcp_close_shutdown+0x1c0>)
 8011d58:	f001 fb48 	bl	80133ec <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011d5c:	6878      	ldr	r0, [r7, #4]
 8011d5e:	f7ff feb1 	bl	8011ac4 <tcp_free_listen>
      break;
 8011d62:	e00f      	b.n	8011d84 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011d64:	6879      	ldr	r1, [r7, #4]
 8011d66:	480e      	ldr	r0, [pc, #56]	; (8011da0 <tcp_close_shutdown+0x1b0>)
 8011d68:	f001 fb40 	bl	80133ec <tcp_pcb_remove>
 8011d6c:	4b0d      	ldr	r3, [pc, #52]	; (8011da4 <tcp_close_shutdown+0x1b4>)
 8011d6e:	2201      	movs	r2, #1
 8011d70:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011d72:	6878      	ldr	r0, [r7, #4]
 8011d74:	f7ff fe8a 	bl	8011a8c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011d78:	e004      	b.n	8011d84 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 f81a 	bl	8011db4 <tcp_close_shutdown_fin>
 8011d80:	4603      	mov	r3, r0
 8011d82:	e000      	b.n	8011d86 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011d84:	2300      	movs	r3, #0
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3710      	adds	r7, #16
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bdb0      	pop	{r4, r5, r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	0801c9e4 	.word	0x0801c9e4
 8011d94:	0801cab8 	.word	0x0801cab8
 8011d98:	0801ca28 	.word	0x0801ca28
 8011d9c:	0801cad8 	.word	0x0801cad8
 8011da0:	24008270 	.word	0x24008270
 8011da4:	2400826c 	.word	0x2400826c
 8011da8:	24008284 	.word	0x24008284
 8011dac:	2400827c 	.word	0x2400827c
 8011db0:	24008278 	.word	0x24008278

08011db4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d106      	bne.n	8011dd0 <tcp_close_shutdown_fin+0x1c>
 8011dc2:	4b2e      	ldr	r3, [pc, #184]	; (8011e7c <tcp_close_shutdown_fin+0xc8>)
 8011dc4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011dc8:	492d      	ldr	r1, [pc, #180]	; (8011e80 <tcp_close_shutdown_fin+0xcc>)
 8011dca:	482e      	ldr	r0, [pc, #184]	; (8011e84 <tcp_close_shutdown_fin+0xd0>)
 8011dcc:	f008 ffd6 	bl	801ad7c <iprintf>

  switch (pcb->state) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	7d1b      	ldrb	r3, [r3, #20]
 8011dd4:	2b07      	cmp	r3, #7
 8011dd6:	d020      	beq.n	8011e1a <tcp_close_shutdown_fin+0x66>
 8011dd8:	2b07      	cmp	r3, #7
 8011dda:	dc2b      	bgt.n	8011e34 <tcp_close_shutdown_fin+0x80>
 8011ddc:	2b03      	cmp	r3, #3
 8011dde:	d002      	beq.n	8011de6 <tcp_close_shutdown_fin+0x32>
 8011de0:	2b04      	cmp	r3, #4
 8011de2:	d00d      	beq.n	8011e00 <tcp_close_shutdown_fin+0x4c>
 8011de4:	e026      	b.n	8011e34 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011de6:	6878      	ldr	r0, [r7, #4]
 8011de8:	f004 fdda 	bl	80169a0 <tcp_send_fin>
 8011dec:	4603      	mov	r3, r0
 8011dee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d11f      	bne.n	8011e38 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2205      	movs	r2, #5
 8011dfc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011dfe:	e01b      	b.n	8011e38 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f004 fdcd 	bl	80169a0 <tcp_send_fin>
 8011e06:	4603      	mov	r3, r0
 8011e08:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d114      	bne.n	8011e3c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	2205      	movs	r2, #5
 8011e16:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011e18:	e010      	b.n	8011e3c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f004 fdc0 	bl	80169a0 <tcp_send_fin>
 8011e20:	4603      	mov	r3, r0
 8011e22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011e24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d109      	bne.n	8011e40 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2209      	movs	r2, #9
 8011e30:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011e32:	e005      	b.n	8011e40 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011e34:	2300      	movs	r3, #0
 8011e36:	e01c      	b.n	8011e72 <tcp_close_shutdown_fin+0xbe>
      break;
 8011e38:	bf00      	nop
 8011e3a:	e002      	b.n	8011e42 <tcp_close_shutdown_fin+0x8e>
      break;
 8011e3c:	bf00      	nop
 8011e3e:	e000      	b.n	8011e42 <tcp_close_shutdown_fin+0x8e>
      break;
 8011e40:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d103      	bne.n	8011e52 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f004 fee6 	bl	8016c1c <tcp_output>
 8011e50:	e00d      	b.n	8011e6e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e5a:	d108      	bne.n	8011e6e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	8b5b      	ldrh	r3, [r3, #26]
 8011e60:	f043 0308 	orr.w	r3, r3, #8
 8011e64:	b29a      	uxth	r2, r3
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011e6a:	2300      	movs	r3, #0
 8011e6c:	e001      	b.n	8011e72 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	0801c9e4 	.word	0x0801c9e4
 8011e80:	0801ca94 	.word	0x0801ca94
 8011e84:	0801ca28 	.word	0x0801ca28

08011e88 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011e88:	b580      	push	{r7, lr}
 8011e8a:	b082      	sub	sp, #8
 8011e8c:	af00      	add	r7, sp, #0
 8011e8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d109      	bne.n	8011eaa <tcp_close+0x22>
 8011e96:	4b0f      	ldr	r3, [pc, #60]	; (8011ed4 <tcp_close+0x4c>)
 8011e98:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011e9c:	490e      	ldr	r1, [pc, #56]	; (8011ed8 <tcp_close+0x50>)
 8011e9e:	480f      	ldr	r0, [pc, #60]	; (8011edc <tcp_close+0x54>)
 8011ea0:	f008 ff6c 	bl	801ad7c <iprintf>
 8011ea4:	f06f 030f 	mvn.w	r3, #15
 8011ea8:	e00f      	b.n	8011eca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	7d1b      	ldrb	r3, [r3, #20]
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d006      	beq.n	8011ec0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	8b5b      	ldrh	r3, [r3, #26]
 8011eb6:	f043 0310 	orr.w	r3, r3, #16
 8011eba:	b29a      	uxth	r2, r3
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011ec0:	2101      	movs	r1, #1
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f7ff fe94 	bl	8011bf0 <tcp_close_shutdown>
 8011ec8:	4603      	mov	r3, r0
}
 8011eca:	4618      	mov	r0, r3
 8011ecc:	3708      	adds	r7, #8
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	0801c9e4 	.word	0x0801c9e4
 8011ed8:	0801caf4 	.word	0x0801caf4
 8011edc:	0801ca28 	.word	0x0801ca28

08011ee0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b08e      	sub	sp, #56	; 0x38
 8011ee4:	af04      	add	r7, sp, #16
 8011ee6:	6078      	str	r0, [r7, #4]
 8011ee8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d107      	bne.n	8011f00 <tcp_abandon+0x20>
 8011ef0:	4b52      	ldr	r3, [pc, #328]	; (801203c <tcp_abandon+0x15c>)
 8011ef2:	f240 223d 	movw	r2, #573	; 0x23d
 8011ef6:	4952      	ldr	r1, [pc, #328]	; (8012040 <tcp_abandon+0x160>)
 8011ef8:	4852      	ldr	r0, [pc, #328]	; (8012044 <tcp_abandon+0x164>)
 8011efa:	f008 ff3f 	bl	801ad7c <iprintf>
 8011efe:	e099      	b.n	8012034 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	7d1b      	ldrb	r3, [r3, #20]
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d106      	bne.n	8011f16 <tcp_abandon+0x36>
 8011f08:	4b4c      	ldr	r3, [pc, #304]	; (801203c <tcp_abandon+0x15c>)
 8011f0a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011f0e:	494e      	ldr	r1, [pc, #312]	; (8012048 <tcp_abandon+0x168>)
 8011f10:	484c      	ldr	r0, [pc, #304]	; (8012044 <tcp_abandon+0x164>)
 8011f12:	f008 ff33 	bl	801ad7c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	7d1b      	ldrb	r3, [r3, #20]
 8011f1a:	2b0a      	cmp	r3, #10
 8011f1c:	d107      	bne.n	8011f2e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011f1e:	6879      	ldr	r1, [r7, #4]
 8011f20:	484a      	ldr	r0, [pc, #296]	; (801204c <tcp_abandon+0x16c>)
 8011f22:	f001 fa63 	bl	80133ec <tcp_pcb_remove>
    tcp_free(pcb);
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f7ff fdb0 	bl	8011a8c <tcp_free>
 8011f2c:	e082      	b.n	8012034 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011f32:	2300      	movs	r3, #0
 8011f34:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f3a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011f3c:	687b      	ldr	r3, [r7, #4]
 8011f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f40:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f48:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	691b      	ldr	r3, [r3, #16]
 8011f4e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	7d1b      	ldrb	r3, [r3, #20]
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d126      	bne.n	8011fa6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	8adb      	ldrh	r3, [r3, #22]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d02e      	beq.n	8011fbe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011f60:	4b3b      	ldr	r3, [pc, #236]	; (8012050 <tcp_abandon+0x170>)
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	687a      	ldr	r2, [r7, #4]
 8011f66:	429a      	cmp	r2, r3
 8011f68:	d105      	bne.n	8011f76 <tcp_abandon+0x96>
 8011f6a:	4b39      	ldr	r3, [pc, #228]	; (8012050 <tcp_abandon+0x170>)
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	68db      	ldr	r3, [r3, #12]
 8011f70:	4a37      	ldr	r2, [pc, #220]	; (8012050 <tcp_abandon+0x170>)
 8011f72:	6013      	str	r3, [r2, #0]
 8011f74:	e013      	b.n	8011f9e <tcp_abandon+0xbe>
 8011f76:	4b36      	ldr	r3, [pc, #216]	; (8012050 <tcp_abandon+0x170>)
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	61fb      	str	r3, [r7, #28]
 8011f7c:	e00c      	b.n	8011f98 <tcp_abandon+0xb8>
 8011f7e:	69fb      	ldr	r3, [r7, #28]
 8011f80:	68db      	ldr	r3, [r3, #12]
 8011f82:	687a      	ldr	r2, [r7, #4]
 8011f84:	429a      	cmp	r2, r3
 8011f86:	d104      	bne.n	8011f92 <tcp_abandon+0xb2>
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	68da      	ldr	r2, [r3, #12]
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	60da      	str	r2, [r3, #12]
 8011f90:	e005      	b.n	8011f9e <tcp_abandon+0xbe>
 8011f92:	69fb      	ldr	r3, [r7, #28]
 8011f94:	68db      	ldr	r3, [r3, #12]
 8011f96:	61fb      	str	r3, [r7, #28]
 8011f98:	69fb      	ldr	r3, [r7, #28]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d1ef      	bne.n	8011f7e <tcp_abandon+0x9e>
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	60da      	str	r2, [r3, #12]
 8011fa4:	e00b      	b.n	8011fbe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011fa6:	683b      	ldr	r3, [r7, #0]
 8011fa8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	8adb      	ldrh	r3, [r3, #22]
 8011fae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011fb0:	6879      	ldr	r1, [r7, #4]
 8011fb2:	4828      	ldr	r0, [pc, #160]	; (8012054 <tcp_abandon+0x174>)
 8011fb4:	f001 fa1a 	bl	80133ec <tcp_pcb_remove>
 8011fb8:	4b27      	ldr	r3, [pc, #156]	; (8012058 <tcp_abandon+0x178>)
 8011fba:	2201      	movs	r2, #1
 8011fbc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fc2:	2b00      	cmp	r3, #0
 8011fc4:	d004      	beq.n	8011fd0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f000 fed6 	bl	8012d7c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d004      	beq.n	8011fe2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011fd8:	687b      	ldr	r3, [r7, #4]
 8011fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f000 fecd 	bl	8012d7c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d004      	beq.n	8011ff4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f000 fec4 	bl	8012d7c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d00e      	beq.n	8012018 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011ffa:	6879      	ldr	r1, [r7, #4]
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	3304      	adds	r3, #4
 8012000:	687a      	ldr	r2, [r7, #4]
 8012002:	8b12      	ldrh	r2, [r2, #24]
 8012004:	9202      	str	r2, [sp, #8]
 8012006:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012008:	9201      	str	r2, [sp, #4]
 801200a:	9300      	str	r3, [sp, #0]
 801200c:	460b      	mov	r3, r1
 801200e:	697a      	ldr	r2, [r7, #20]
 8012010:	69b9      	ldr	r1, [r7, #24]
 8012012:	6878      	ldr	r0, [r7, #4]
 8012014:	f005 fbb6 	bl	8017784 <tcp_rst>
    }
    last_state = pcb->state;
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	7d1b      	ldrb	r3, [r3, #20]
 801201c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f7ff fd34 	bl	8011a8c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d004      	beq.n	8012034 <tcp_abandon+0x154>
 801202a:	693b      	ldr	r3, [r7, #16]
 801202c:	f06f 010c 	mvn.w	r1, #12
 8012030:	68f8      	ldr	r0, [r7, #12]
 8012032:	4798      	blx	r3
  }
}
 8012034:	3728      	adds	r7, #40	; 0x28
 8012036:	46bd      	mov	sp, r7
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	0801c9e4 	.word	0x0801c9e4
 8012040:	0801cb28 	.word	0x0801cb28
 8012044:	0801ca28 	.word	0x0801ca28
 8012048:	0801cb44 	.word	0x0801cb44
 801204c:	24008280 	.word	0x24008280
 8012050:	2400827c 	.word	0x2400827c
 8012054:	24008270 	.word	0x24008270
 8012058:	2400826c 	.word	0x2400826c

0801205c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801205c:	b580      	push	{r7, lr}
 801205e:	b082      	sub	sp, #8
 8012060:	af00      	add	r7, sp, #0
 8012062:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012064:	2101      	movs	r1, #1
 8012066:	6878      	ldr	r0, [r7, #4]
 8012068:	f7ff ff3a 	bl	8011ee0 <tcp_abandon>
}
 801206c:	bf00      	nop
 801206e:	3708      	adds	r7, #8
 8012070:	46bd      	mov	sp, r7
 8012072:	bd80      	pop	{r7, pc}

08012074 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012074:	b580      	push	{r7, lr}
 8012076:	b088      	sub	sp, #32
 8012078:	af00      	add	r7, sp, #0
 801207a:	60f8      	str	r0, [r7, #12]
 801207c:	60b9      	str	r1, [r7, #8]
 801207e:	4613      	mov	r3, r2
 8012080:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8012082:	2304      	movs	r3, #4
 8012084:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012086:	68bb      	ldr	r3, [r7, #8]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d101      	bne.n	8012090 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801208c:	4b3e      	ldr	r3, [pc, #248]	; (8012188 <tcp_bind+0x114>)
 801208e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d109      	bne.n	80120aa <tcp_bind+0x36>
 8012096:	4b3d      	ldr	r3, [pc, #244]	; (801218c <tcp_bind+0x118>)
 8012098:	f240 22a9 	movw	r2, #681	; 0x2a9
 801209c:	493c      	ldr	r1, [pc, #240]	; (8012190 <tcp_bind+0x11c>)
 801209e:	483d      	ldr	r0, [pc, #244]	; (8012194 <tcp_bind+0x120>)
 80120a0:	f008 fe6c 	bl	801ad7c <iprintf>
 80120a4:	f06f 030f 	mvn.w	r3, #15
 80120a8:	e06a      	b.n	8012180 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	7d1b      	ldrb	r3, [r3, #20]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d009      	beq.n	80120c6 <tcp_bind+0x52>
 80120b2:	4b36      	ldr	r3, [pc, #216]	; (801218c <tcp_bind+0x118>)
 80120b4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80120b8:	4937      	ldr	r1, [pc, #220]	; (8012198 <tcp_bind+0x124>)
 80120ba:	4836      	ldr	r0, [pc, #216]	; (8012194 <tcp_bind+0x120>)
 80120bc:	f008 fe5e 	bl	801ad7c <iprintf>
 80120c0:	f06f 0305 	mvn.w	r3, #5
 80120c4:	e05c      	b.n	8012180 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 80120c6:	88fb      	ldrh	r3, [r7, #6]
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d109      	bne.n	80120e0 <tcp_bind+0x6c>
    port = tcp_new_port();
 80120cc:	f000 f9f0 	bl	80124b0 <tcp_new_port>
 80120d0:	4603      	mov	r3, r0
 80120d2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 80120d4:	88fb      	ldrh	r3, [r7, #6]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d135      	bne.n	8012146 <tcp_bind+0xd2>
      return ERR_BUF;
 80120da:	f06f 0301 	mvn.w	r3, #1
 80120de:	e04f      	b.n	8012180 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 80120e0:	2300      	movs	r3, #0
 80120e2:	61fb      	str	r3, [r7, #28]
 80120e4:	e02b      	b.n	801213e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80120e6:	4a2d      	ldr	r2, [pc, #180]	; (801219c <tcp_bind+0x128>)
 80120e8:	69fb      	ldr	r3, [r7, #28]
 80120ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	61bb      	str	r3, [r7, #24]
 80120f2:	e01e      	b.n	8012132 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 80120f4:	69bb      	ldr	r3, [r7, #24]
 80120f6:	8adb      	ldrh	r3, [r3, #22]
 80120f8:	88fa      	ldrh	r2, [r7, #6]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d116      	bne.n	801212c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 80120fe:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012100:	2b00      	cmp	r3, #0
 8012102:	d010      	beq.n	8012126 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012104:	69bb      	ldr	r3, [r7, #24]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00c      	beq.n	8012126 <tcp_bind+0xb2>
 801210c:	68bb      	ldr	r3, [r7, #8]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d009      	beq.n	8012126 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012112:	68bb      	ldr	r3, [r7, #8]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d005      	beq.n	8012126 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801211a:	69bb      	ldr	r3, [r7, #24]
 801211c:	681a      	ldr	r2, [r3, #0]
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012122:	429a      	cmp	r2, r3
 8012124:	d102      	bne.n	801212c <tcp_bind+0xb8>
              return ERR_USE;
 8012126:	f06f 0307 	mvn.w	r3, #7
 801212a:	e029      	b.n	8012180 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801212c:	69bb      	ldr	r3, [r7, #24]
 801212e:	68db      	ldr	r3, [r3, #12]
 8012130:	61bb      	str	r3, [r7, #24]
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d1dd      	bne.n	80120f4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012138:	69fb      	ldr	r3, [r7, #28]
 801213a:	3301      	adds	r3, #1
 801213c:	61fb      	str	r3, [r7, #28]
 801213e:	69fa      	ldr	r2, [r7, #28]
 8012140:	697b      	ldr	r3, [r7, #20]
 8012142:	429a      	cmp	r2, r3
 8012144:	dbcf      	blt.n	80120e6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012146:	68bb      	ldr	r3, [r7, #8]
 8012148:	2b00      	cmp	r3, #0
 801214a:	d00c      	beq.n	8012166 <tcp_bind+0xf2>
 801214c:	68bb      	ldr	r3, [r7, #8]
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	d008      	beq.n	8012166 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012154:	68bb      	ldr	r3, [r7, #8]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d002      	beq.n	8012160 <tcp_bind+0xec>
 801215a:	68bb      	ldr	r3, [r7, #8]
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	e000      	b.n	8012162 <tcp_bind+0xee>
 8012160:	2300      	movs	r3, #0
 8012162:	68fa      	ldr	r2, [r7, #12]
 8012164:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	88fa      	ldrh	r2, [r7, #6]
 801216a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801216c:	4b0c      	ldr	r3, [pc, #48]	; (80121a0 <tcp_bind+0x12c>)
 801216e:	681a      	ldr	r2, [r3, #0]
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	60da      	str	r2, [r3, #12]
 8012174:	4a0a      	ldr	r2, [pc, #40]	; (80121a0 <tcp_bind+0x12c>)
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	6013      	str	r3, [r2, #0]
 801217a:	f005 fcc5 	bl	8017b08 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801217e:	2300      	movs	r3, #0
}
 8012180:	4618      	mov	r0, r3
 8012182:	3720      	adds	r7, #32
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}
 8012188:	0801f338 	.word	0x0801f338
 801218c:	0801c9e4 	.word	0x0801c9e4
 8012190:	0801cb78 	.word	0x0801cb78
 8012194:	0801ca28 	.word	0x0801ca28
 8012198:	0801cb90 	.word	0x0801cb90
 801219c:	0801f310 	.word	0x0801f310
 80121a0:	2400827c 	.word	0x2400827c

080121a4 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80121a4:	b580      	push	{r7, lr}
 80121a6:	b084      	sub	sp, #16
 80121a8:	af00      	add	r7, sp, #0
 80121aa:	60f8      	str	r0, [r7, #12]
 80121ac:	60b9      	str	r1, [r7, #8]
 80121ae:	4613      	mov	r3, r2
 80121b0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 80121b2:	68bb      	ldr	r3, [r7, #8]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d106      	bne.n	80121c6 <tcp_accept_null+0x22>
 80121b8:	4b07      	ldr	r3, [pc, #28]	; (80121d8 <tcp_accept_null+0x34>)
 80121ba:	f240 320f 	movw	r2, #783	; 0x30f
 80121be:	4907      	ldr	r1, [pc, #28]	; (80121dc <tcp_accept_null+0x38>)
 80121c0:	4807      	ldr	r0, [pc, #28]	; (80121e0 <tcp_accept_null+0x3c>)
 80121c2:	f008 fddb 	bl	801ad7c <iprintf>

  tcp_abort(pcb);
 80121c6:	68b8      	ldr	r0, [r7, #8]
 80121c8:	f7ff ff48 	bl	801205c <tcp_abort>

  return ERR_ABRT;
 80121cc:	f06f 030c 	mvn.w	r3, #12
}
 80121d0:	4618      	mov	r0, r3
 80121d2:	3710      	adds	r7, #16
 80121d4:	46bd      	mov	sp, r7
 80121d6:	bd80      	pop	{r7, pc}
 80121d8:	0801c9e4 	.word	0x0801c9e4
 80121dc:	0801cbb8 	.word	0x0801cbb8
 80121e0:	0801ca28 	.word	0x0801ca28

080121e4 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 80121e4:	b580      	push	{r7, lr}
 80121e6:	b082      	sub	sp, #8
 80121e8:	af00      	add	r7, sp, #0
 80121ea:	6078      	str	r0, [r7, #4]
 80121ec:	460b      	mov	r3, r1
 80121ee:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 80121f0:	78fb      	ldrb	r3, [r7, #3]
 80121f2:	2200      	movs	r2, #0
 80121f4:	4619      	mov	r1, r3
 80121f6:	6878      	ldr	r0, [r7, #4]
 80121f8:	f000 f806 	bl	8012208 <tcp_listen_with_backlog_and_err>
 80121fc:	4603      	mov	r3, r0
}
 80121fe:	4618      	mov	r0, r3
 8012200:	3708      	adds	r7, #8
 8012202:	46bd      	mov	sp, r7
 8012204:	bd80      	pop	{r7, pc}
	...

08012208 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8012208:	b580      	push	{r7, lr}
 801220a:	b088      	sub	sp, #32
 801220c:	af00      	add	r7, sp, #0
 801220e:	60f8      	str	r0, [r7, #12]
 8012210:	460b      	mov	r3, r1
 8012212:	607a      	str	r2, [r7, #4]
 8012214:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8012216:	2300      	movs	r3, #0
 8012218:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	2b00      	cmp	r3, #0
 801221e:	d109      	bne.n	8012234 <tcp_listen_with_backlog_and_err+0x2c>
 8012220:	4b47      	ldr	r3, [pc, #284]	; (8012340 <tcp_listen_with_backlog_and_err+0x138>)
 8012222:	f240 3259 	movw	r2, #857	; 0x359
 8012226:	4947      	ldr	r1, [pc, #284]	; (8012344 <tcp_listen_with_backlog_and_err+0x13c>)
 8012228:	4847      	ldr	r0, [pc, #284]	; (8012348 <tcp_listen_with_backlog_and_err+0x140>)
 801222a:	f008 fda7 	bl	801ad7c <iprintf>
 801222e:	23f0      	movs	r3, #240	; 0xf0
 8012230:	76fb      	strb	r3, [r7, #27]
 8012232:	e079      	b.n	8012328 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	7d1b      	ldrb	r3, [r3, #20]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d009      	beq.n	8012250 <tcp_listen_with_backlog_and_err+0x48>
 801223c:	4b40      	ldr	r3, [pc, #256]	; (8012340 <tcp_listen_with_backlog_and_err+0x138>)
 801223e:	f240 325a 	movw	r2, #858	; 0x35a
 8012242:	4942      	ldr	r1, [pc, #264]	; (801234c <tcp_listen_with_backlog_and_err+0x144>)
 8012244:	4840      	ldr	r0, [pc, #256]	; (8012348 <tcp_listen_with_backlog_and_err+0x140>)
 8012246:	f008 fd99 	bl	801ad7c <iprintf>
 801224a:	23f1      	movs	r3, #241	; 0xf1
 801224c:	76fb      	strb	r3, [r7, #27]
 801224e:	e06b      	b.n	8012328 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	7d1b      	ldrb	r3, [r3, #20]
 8012254:	2b01      	cmp	r3, #1
 8012256:	d104      	bne.n	8012262 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801225c:	23f7      	movs	r3, #247	; 0xf7
 801225e:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012260:	e062      	b.n	8012328 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8012262:	2002      	movs	r0, #2
 8012264:	f7fe fa3c 	bl	80106e0 <memp_malloc>
 8012268:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	2b00      	cmp	r3, #0
 801226e:	d102      	bne.n	8012276 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8012270:	23ff      	movs	r3, #255	; 0xff
 8012272:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012274:	e058      	b.n	8012328 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	691a      	ldr	r2, [r3, #16]
 801227a:	69fb      	ldr	r3, [r7, #28]
 801227c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	8ada      	ldrh	r2, [r3, #22]
 8012282:	69fb      	ldr	r3, [r7, #28]
 8012284:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012286:	69fb      	ldr	r3, [r7, #28]
 8012288:	2201      	movs	r2, #1
 801228a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	7d5a      	ldrb	r2, [r3, #21]
 8012290:	69fb      	ldr	r3, [r7, #28]
 8012292:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	7a5a      	ldrb	r2, [r3, #9]
 8012298:	69fb      	ldr	r3, [r7, #28]
 801229a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801229c:	69fb      	ldr	r3, [r7, #28]
 801229e:	2200      	movs	r2, #0
 80122a0:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	7ada      	ldrb	r2, [r3, #11]
 80122a6:	69fb      	ldr	r3, [r7, #28]
 80122a8:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	7a9a      	ldrb	r2, [r3, #10]
 80122ae:	69fb      	ldr	r3, [r7, #28]
 80122b0:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	69fb      	ldr	r3, [r7, #28]
 80122b8:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	8adb      	ldrh	r3, [r3, #22]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d021      	beq.n	8012306 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80122c2:	4b23      	ldr	r3, [pc, #140]	; (8012350 <tcp_listen_with_backlog_and_err+0x148>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	68fa      	ldr	r2, [r7, #12]
 80122c8:	429a      	cmp	r2, r3
 80122ca:	d105      	bne.n	80122d8 <tcp_listen_with_backlog_and_err+0xd0>
 80122cc:	4b20      	ldr	r3, [pc, #128]	; (8012350 <tcp_listen_with_backlog_and_err+0x148>)
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	68db      	ldr	r3, [r3, #12]
 80122d2:	4a1f      	ldr	r2, [pc, #124]	; (8012350 <tcp_listen_with_backlog_and_err+0x148>)
 80122d4:	6013      	str	r3, [r2, #0]
 80122d6:	e013      	b.n	8012300 <tcp_listen_with_backlog_and_err+0xf8>
 80122d8:	4b1d      	ldr	r3, [pc, #116]	; (8012350 <tcp_listen_with_backlog_and_err+0x148>)
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	617b      	str	r3, [r7, #20]
 80122de:	e00c      	b.n	80122fa <tcp_listen_with_backlog_and_err+0xf2>
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	68db      	ldr	r3, [r3, #12]
 80122e4:	68fa      	ldr	r2, [r7, #12]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d104      	bne.n	80122f4 <tcp_listen_with_backlog_and_err+0xec>
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	68da      	ldr	r2, [r3, #12]
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	60da      	str	r2, [r3, #12]
 80122f2:	e005      	b.n	8012300 <tcp_listen_with_backlog_and_err+0xf8>
 80122f4:	697b      	ldr	r3, [r7, #20]
 80122f6:	68db      	ldr	r3, [r3, #12]
 80122f8:	617b      	str	r3, [r7, #20]
 80122fa:	697b      	ldr	r3, [r7, #20]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d1ef      	bne.n	80122e0 <tcp_listen_with_backlog_and_err+0xd8>
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	2200      	movs	r2, #0
 8012304:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8012306:	68f8      	ldr	r0, [r7, #12]
 8012308:	f7ff fbc0 	bl	8011a8c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	4a11      	ldr	r2, [pc, #68]	; (8012354 <tcp_listen_with_backlog_and_err+0x14c>)
 8012310:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8012312:	4b11      	ldr	r3, [pc, #68]	; (8012358 <tcp_listen_with_backlog_and_err+0x150>)
 8012314:	681a      	ldr	r2, [r3, #0]
 8012316:	69fb      	ldr	r3, [r7, #28]
 8012318:	60da      	str	r2, [r3, #12]
 801231a:	4a0f      	ldr	r2, [pc, #60]	; (8012358 <tcp_listen_with_backlog_and_err+0x150>)
 801231c:	69fb      	ldr	r3, [r7, #28]
 801231e:	6013      	str	r3, [r2, #0]
 8012320:	f005 fbf2 	bl	8017b08 <tcp_timer_needed>
  res = ERR_OK;
 8012324:	2300      	movs	r3, #0
 8012326:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d002      	beq.n	8012334 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	7efa      	ldrb	r2, [r7, #27]
 8012332:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012334:	69fb      	ldr	r3, [r7, #28]
}
 8012336:	4618      	mov	r0, r3
 8012338:	3720      	adds	r7, #32
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	0801c9e4 	.word	0x0801c9e4
 8012344:	0801cbd8 	.word	0x0801cbd8
 8012348:	0801ca28 	.word	0x0801ca28
 801234c:	0801cc08 	.word	0x0801cc08
 8012350:	2400827c 	.word	0x2400827c
 8012354:	080121a5 	.word	0x080121a5
 8012358:	24008278 	.word	0x24008278

0801235c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2b00      	cmp	r3, #0
 8012368:	d106      	bne.n	8012378 <tcp_update_rcv_ann_wnd+0x1c>
 801236a:	4b25      	ldr	r3, [pc, #148]	; (8012400 <tcp_update_rcv_ann_wnd+0xa4>)
 801236c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012370:	4924      	ldr	r1, [pc, #144]	; (8012404 <tcp_update_rcv_ann_wnd+0xa8>)
 8012372:	4825      	ldr	r0, [pc, #148]	; (8012408 <tcp_update_rcv_ann_wnd+0xac>)
 8012374:	f008 fd02 	bl	801ad7c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801237c:	687a      	ldr	r2, [r7, #4]
 801237e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012380:	4413      	add	r3, r2
 8012382:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801238c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012390:	bf28      	it	cs
 8012392:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012396:	b292      	uxth	r2, r2
 8012398:	4413      	add	r3, r2
 801239a:	68fa      	ldr	r2, [r7, #12]
 801239c:	1ad3      	subs	r3, r2, r3
 801239e:	2b00      	cmp	r3, #0
 80123a0:	db08      	blt.n	80123b4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123ae:	68fa      	ldr	r2, [r7, #12]
 80123b0:	1ad3      	subs	r3, r2, r3
 80123b2:	e020      	b.n	80123f6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123bc:	1ad3      	subs	r3, r2, r3
 80123be:	2b00      	cmp	r3, #0
 80123c0:	dd03      	ble.n	80123ca <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	2200      	movs	r2, #0
 80123c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80123c8:	e014      	b.n	80123f4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d2:	1ad3      	subs	r3, r2, r3
 80123d4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80123d6:	68bb      	ldr	r3, [r7, #8]
 80123d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80123dc:	d306      	bcc.n	80123ec <tcp_update_rcv_ann_wnd+0x90>
 80123de:	4b08      	ldr	r3, [pc, #32]	; (8012400 <tcp_update_rcv_ann_wnd+0xa4>)
 80123e0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80123e4:	4909      	ldr	r1, [pc, #36]	; (801240c <tcp_update_rcv_ann_wnd+0xb0>)
 80123e6:	4808      	ldr	r0, [pc, #32]	; (8012408 <tcp_update_rcv_ann_wnd+0xac>)
 80123e8:	f008 fcc8 	bl	801ad7c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80123ec:	68bb      	ldr	r3, [r7, #8]
 80123ee:	b29a      	uxth	r2, r3
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80123f4:	2300      	movs	r3, #0
  }
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	0801c9e4 	.word	0x0801c9e4
 8012404:	0801cc40 	.word	0x0801cc40
 8012408:	0801ca28 	.word	0x0801ca28
 801240c:	0801cc64 	.word	0x0801cc64

08012410 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
 8012418:	460b      	mov	r3, r1
 801241a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d107      	bne.n	8012432 <tcp_recved+0x22>
 8012422:	4b1f      	ldr	r3, [pc, #124]	; (80124a0 <tcp_recved+0x90>)
 8012424:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012428:	491e      	ldr	r1, [pc, #120]	; (80124a4 <tcp_recved+0x94>)
 801242a:	481f      	ldr	r0, [pc, #124]	; (80124a8 <tcp_recved+0x98>)
 801242c:	f008 fca6 	bl	801ad7c <iprintf>
 8012430:	e032      	b.n	8012498 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	7d1b      	ldrb	r3, [r3, #20]
 8012436:	2b01      	cmp	r3, #1
 8012438:	d106      	bne.n	8012448 <tcp_recved+0x38>
 801243a:	4b19      	ldr	r3, [pc, #100]	; (80124a0 <tcp_recved+0x90>)
 801243c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012440:	491a      	ldr	r1, [pc, #104]	; (80124ac <tcp_recved+0x9c>)
 8012442:	4819      	ldr	r0, [pc, #100]	; (80124a8 <tcp_recved+0x98>)
 8012444:	f008 fc9a 	bl	801ad7c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801244c:	887b      	ldrh	r3, [r7, #2]
 801244e:	4413      	add	r3, r2
 8012450:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012452:	89fb      	ldrh	r3, [r7, #14]
 8012454:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012458:	d804      	bhi.n	8012464 <tcp_recved+0x54>
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801245e:	89fa      	ldrh	r2, [r7, #14]
 8012460:	429a      	cmp	r2, r3
 8012462:	d204      	bcs.n	801246e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801246a:	851a      	strh	r2, [r3, #40]	; 0x28
 801246c:	e002      	b.n	8012474 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	89fa      	ldrh	r2, [r7, #14]
 8012472:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012474:	6878      	ldr	r0, [r7, #4]
 8012476:	f7ff ff71 	bl	801235c <tcp_update_rcv_ann_wnd>
 801247a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801247c:	68bb      	ldr	r3, [r7, #8]
 801247e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012482:	d309      	bcc.n	8012498 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	8b5b      	ldrh	r3, [r3, #26]
 8012488:	f043 0302 	orr.w	r3, r3, #2
 801248c:	b29a      	uxth	r2, r3
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f004 fbc2 	bl	8016c1c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012498:	3710      	adds	r7, #16
 801249a:	46bd      	mov	sp, r7
 801249c:	bd80      	pop	{r7, pc}
 801249e:	bf00      	nop
 80124a0:	0801c9e4 	.word	0x0801c9e4
 80124a4:	0801cc80 	.word	0x0801cc80
 80124a8:	0801ca28 	.word	0x0801ca28
 80124ac:	0801cc98 	.word	0x0801cc98

080124b0 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80124b0:	b480      	push	{r7}
 80124b2:	b083      	sub	sp, #12
 80124b4:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80124b6:	2300      	movs	r3, #0
 80124b8:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 80124ba:	4b1e      	ldr	r3, [pc, #120]	; (8012534 <tcp_new_port+0x84>)
 80124bc:	881b      	ldrh	r3, [r3, #0]
 80124be:	3301      	adds	r3, #1
 80124c0:	b29a      	uxth	r2, r3
 80124c2:	4b1c      	ldr	r3, [pc, #112]	; (8012534 <tcp_new_port+0x84>)
 80124c4:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 80124c6:	4b1b      	ldr	r3, [pc, #108]	; (8012534 <tcp_new_port+0x84>)
 80124c8:	881b      	ldrh	r3, [r3, #0]
 80124ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80124ce:	4293      	cmp	r3, r2
 80124d0:	d103      	bne.n	80124da <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80124d2:	4b18      	ldr	r3, [pc, #96]	; (8012534 <tcp_new_port+0x84>)
 80124d4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80124d8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80124da:	2300      	movs	r3, #0
 80124dc:	71fb      	strb	r3, [r7, #7]
 80124de:	e01e      	b.n	801251e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80124e0:	79fb      	ldrb	r3, [r7, #7]
 80124e2:	4a15      	ldr	r2, [pc, #84]	; (8012538 <tcp_new_port+0x88>)
 80124e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	603b      	str	r3, [r7, #0]
 80124ec:	e011      	b.n	8012512 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	8ada      	ldrh	r2, [r3, #22]
 80124f2:	4b10      	ldr	r3, [pc, #64]	; (8012534 <tcp_new_port+0x84>)
 80124f4:	881b      	ldrh	r3, [r3, #0]
 80124f6:	429a      	cmp	r2, r3
 80124f8:	d108      	bne.n	801250c <tcp_new_port+0x5c>
        n++;
 80124fa:	88bb      	ldrh	r3, [r7, #4]
 80124fc:	3301      	adds	r3, #1
 80124fe:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012500:	88bb      	ldrh	r3, [r7, #4]
 8012502:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012506:	d3d8      	bcc.n	80124ba <tcp_new_port+0xa>
          return 0;
 8012508:	2300      	movs	r3, #0
 801250a:	e00d      	b.n	8012528 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801250c:	683b      	ldr	r3, [r7, #0]
 801250e:	68db      	ldr	r3, [r3, #12]
 8012510:	603b      	str	r3, [r7, #0]
 8012512:	683b      	ldr	r3, [r7, #0]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1ea      	bne.n	80124ee <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012518:	79fb      	ldrb	r3, [r7, #7]
 801251a:	3301      	adds	r3, #1
 801251c:	71fb      	strb	r3, [r7, #7]
 801251e:	79fb      	ldrb	r3, [r7, #7]
 8012520:	2b03      	cmp	r3, #3
 8012522:	d9dd      	bls.n	80124e0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012524:	4b03      	ldr	r3, [pc, #12]	; (8012534 <tcp_new_port+0x84>)
 8012526:	881b      	ldrh	r3, [r3, #0]
}
 8012528:	4618      	mov	r0, r3
 801252a:	370c      	adds	r7, #12
 801252c:	46bd      	mov	sp, r7
 801252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012532:	4770      	bx	lr
 8012534:	24000030 	.word	0x24000030
 8012538:	0801f310 	.word	0x0801f310

0801253c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801253c:	b5b0      	push	{r4, r5, r7, lr}
 801253e:	b090      	sub	sp, #64	; 0x40
 8012540:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012542:	2300      	movs	r3, #0
 8012544:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012548:	4b94      	ldr	r3, [pc, #592]	; (801279c <tcp_slowtmr+0x260>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	3301      	adds	r3, #1
 801254e:	4a93      	ldr	r2, [pc, #588]	; (801279c <tcp_slowtmr+0x260>)
 8012550:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012552:	4b93      	ldr	r3, [pc, #588]	; (80127a0 <tcp_slowtmr+0x264>)
 8012554:	781b      	ldrb	r3, [r3, #0]
 8012556:	3301      	adds	r3, #1
 8012558:	b2da      	uxtb	r2, r3
 801255a:	4b91      	ldr	r3, [pc, #580]	; (80127a0 <tcp_slowtmr+0x264>)
 801255c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801255e:	2300      	movs	r3, #0
 8012560:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012562:	4b90      	ldr	r3, [pc, #576]	; (80127a4 <tcp_slowtmr+0x268>)
 8012564:	681b      	ldr	r3, [r3, #0]
 8012566:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012568:	e29d      	b.n	8012aa6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801256c:	7d1b      	ldrb	r3, [r3, #20]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d106      	bne.n	8012580 <tcp_slowtmr+0x44>
 8012572:	4b8d      	ldr	r3, [pc, #564]	; (80127a8 <tcp_slowtmr+0x26c>)
 8012574:	f240 42be 	movw	r2, #1214	; 0x4be
 8012578:	498c      	ldr	r1, [pc, #560]	; (80127ac <tcp_slowtmr+0x270>)
 801257a:	488d      	ldr	r0, [pc, #564]	; (80127b0 <tcp_slowtmr+0x274>)
 801257c:	f008 fbfe 	bl	801ad7c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012582:	7d1b      	ldrb	r3, [r3, #20]
 8012584:	2b01      	cmp	r3, #1
 8012586:	d106      	bne.n	8012596 <tcp_slowtmr+0x5a>
 8012588:	4b87      	ldr	r3, [pc, #540]	; (80127a8 <tcp_slowtmr+0x26c>)
 801258a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801258e:	4989      	ldr	r1, [pc, #548]	; (80127b4 <tcp_slowtmr+0x278>)
 8012590:	4887      	ldr	r0, [pc, #540]	; (80127b0 <tcp_slowtmr+0x274>)
 8012592:	f008 fbf3 	bl	801ad7c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012598:	7d1b      	ldrb	r3, [r3, #20]
 801259a:	2b0a      	cmp	r3, #10
 801259c:	d106      	bne.n	80125ac <tcp_slowtmr+0x70>
 801259e:	4b82      	ldr	r3, [pc, #520]	; (80127a8 <tcp_slowtmr+0x26c>)
 80125a0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80125a4:	4984      	ldr	r1, [pc, #528]	; (80127b8 <tcp_slowtmr+0x27c>)
 80125a6:	4882      	ldr	r0, [pc, #520]	; (80127b0 <tcp_slowtmr+0x274>)
 80125a8:	f008 fbe8 	bl	801ad7c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80125ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ae:	7f9a      	ldrb	r2, [r3, #30]
 80125b0:	4b7b      	ldr	r3, [pc, #492]	; (80127a0 <tcp_slowtmr+0x264>)
 80125b2:	781b      	ldrb	r3, [r3, #0]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	d105      	bne.n	80125c4 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80125b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ba:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80125bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80125c2:	e270      	b.n	8012aa6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80125c4:	4b76      	ldr	r3, [pc, #472]	; (80127a0 <tcp_slowtmr+0x264>)
 80125c6:	781a      	ldrb	r2, [r3, #0]
 80125c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125ca:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80125cc:	2300      	movs	r3, #0
 80125ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80125d2:	2300      	movs	r3, #0
 80125d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80125d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125da:	7d1b      	ldrb	r3, [r3, #20]
 80125dc:	2b02      	cmp	r3, #2
 80125de:	d10a      	bne.n	80125f6 <tcp_slowtmr+0xba>
 80125e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125e6:	2b05      	cmp	r3, #5
 80125e8:	d905      	bls.n	80125f6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80125ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125ee:	3301      	adds	r3, #1
 80125f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80125f4:	e11e      	b.n	8012834 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80125f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125f8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80125fc:	2b0b      	cmp	r3, #11
 80125fe:	d905      	bls.n	801260c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012600:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012604:	3301      	adds	r3, #1
 8012606:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801260a:	e113      	b.n	8012834 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801260c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801260e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012612:	2b00      	cmp	r3, #0
 8012614:	d075      	beq.n	8012702 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801261a:	2b00      	cmp	r3, #0
 801261c:	d006      	beq.n	801262c <tcp_slowtmr+0xf0>
 801261e:	4b62      	ldr	r3, [pc, #392]	; (80127a8 <tcp_slowtmr+0x26c>)
 8012620:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012624:	4965      	ldr	r1, [pc, #404]	; (80127bc <tcp_slowtmr+0x280>)
 8012626:	4862      	ldr	r0, [pc, #392]	; (80127b0 <tcp_slowtmr+0x274>)
 8012628:	f008 fba8 	bl	801ad7c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801262c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801262e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012630:	2b00      	cmp	r3, #0
 8012632:	d106      	bne.n	8012642 <tcp_slowtmr+0x106>
 8012634:	4b5c      	ldr	r3, [pc, #368]	; (80127a8 <tcp_slowtmr+0x26c>)
 8012636:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801263a:	4961      	ldr	r1, [pc, #388]	; (80127c0 <tcp_slowtmr+0x284>)
 801263c:	485c      	ldr	r0, [pc, #368]	; (80127b0 <tcp_slowtmr+0x274>)
 801263e:	f008 fb9d 	bl	801ad7c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012644:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012648:	2b0b      	cmp	r3, #11
 801264a:	d905      	bls.n	8012658 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801264c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012650:	3301      	adds	r3, #1
 8012652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012656:	e0ed      	b.n	8012834 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801265a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801265e:	3b01      	subs	r3, #1
 8012660:	4a58      	ldr	r2, [pc, #352]	; (80127c4 <tcp_slowtmr+0x288>)
 8012662:	5cd3      	ldrb	r3, [r2, r3]
 8012664:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012668:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801266c:	7c7a      	ldrb	r2, [r7, #17]
 801266e:	429a      	cmp	r2, r3
 8012670:	d907      	bls.n	8012682 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012674:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012678:	3301      	adds	r3, #1
 801267a:	b2da      	uxtb	r2, r3
 801267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012684:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012688:	7c7a      	ldrb	r2, [r7, #17]
 801268a:	429a      	cmp	r2, r3
 801268c:	f200 80d2 	bhi.w	8012834 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012690:	2301      	movs	r3, #1
 8012692:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012696:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801269a:	2b00      	cmp	r3, #0
 801269c:	d108      	bne.n	80126b0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801269e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126a0:	f005 f964 	bl	801796c <tcp_zero_window_probe>
 80126a4:	4603      	mov	r3, r0
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d014      	beq.n	80126d4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80126aa:	2300      	movs	r3, #0
 80126ac:	623b      	str	r3, [r7, #32]
 80126ae:	e011      	b.n	80126d4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80126b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80126b6:	4619      	mov	r1, r3
 80126b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126ba:	f004 f829 	bl	8016710 <tcp_split_unsent_seg>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d107      	bne.n	80126d4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80126c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80126c6:	f004 faa9 	bl	8016c1c <tcp_output>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d101      	bne.n	80126d4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80126d0:	2300      	movs	r3, #0
 80126d2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80126d4:	6a3b      	ldr	r3, [r7, #32]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	f000 80ac 	beq.w	8012834 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80126dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126de:	2200      	movs	r2, #0
 80126e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80126e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126e6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126ea:	2b06      	cmp	r3, #6
 80126ec:	f200 80a2 	bhi.w	8012834 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80126f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126f6:	3301      	adds	r3, #1
 80126f8:	b2da      	uxtb	r2, r3
 80126fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126fc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012700:	e098      	b.n	8012834 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8012702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012704:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012708:	2b00      	cmp	r3, #0
 801270a:	db0f      	blt.n	801272c <tcp_slowtmr+0x1f0>
 801270c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012712:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012716:	4293      	cmp	r3, r2
 8012718:	d008      	beq.n	801272c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012720:	b29b      	uxth	r3, r3
 8012722:	3301      	adds	r3, #1
 8012724:	b29b      	uxth	r3, r3
 8012726:	b21a      	sxth	r2, r3
 8012728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012734:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012738:	429a      	cmp	r2, r3
 801273a:	db7b      	blt.n	8012834 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801273c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801273e:	f004 fd5f 	bl	8017200 <tcp_rexmit_rto_prepare>
 8012742:	4603      	mov	r3, r0
 8012744:	2b00      	cmp	r3, #0
 8012746:	d007      	beq.n	8012758 <tcp_slowtmr+0x21c>
 8012748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801274c:	2b00      	cmp	r3, #0
 801274e:	d171      	bne.n	8012834 <tcp_slowtmr+0x2f8>
 8012750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012754:	2b00      	cmp	r3, #0
 8012756:	d06d      	beq.n	8012834 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8012758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801275a:	7d1b      	ldrb	r3, [r3, #20]
 801275c:	2b02      	cmp	r3, #2
 801275e:	d03a      	beq.n	80127d6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8012760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012766:	2b0c      	cmp	r3, #12
 8012768:	bf28      	it	cs
 801276a:	230c      	movcs	r3, #12
 801276c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801276e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012770:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012774:	10db      	asrs	r3, r3, #3
 8012776:	b21b      	sxth	r3, r3
 8012778:	461a      	mov	r2, r3
 801277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012780:	4413      	add	r3, r2
 8012782:	7efa      	ldrb	r2, [r7, #27]
 8012784:	4910      	ldr	r1, [pc, #64]	; (80127c8 <tcp_slowtmr+0x28c>)
 8012786:	5c8a      	ldrb	r2, [r1, r2]
 8012788:	4093      	lsls	r3, r2
 801278a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801278c:	697b      	ldr	r3, [r7, #20]
 801278e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012792:	4293      	cmp	r3, r2
 8012794:	dc1a      	bgt.n	80127cc <tcp_slowtmr+0x290>
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	b21a      	sxth	r2, r3
 801279a:	e019      	b.n	80127d0 <tcp_slowtmr+0x294>
 801279c:	24008274 	.word	0x24008274
 80127a0:	24004afa 	.word	0x24004afa
 80127a4:	24008270 	.word	0x24008270
 80127a8:	0801c9e4 	.word	0x0801c9e4
 80127ac:	0801cd28 	.word	0x0801cd28
 80127b0:	0801ca28 	.word	0x0801ca28
 80127b4:	0801cd54 	.word	0x0801cd54
 80127b8:	0801cd80 	.word	0x0801cd80
 80127bc:	0801cdb0 	.word	0x0801cdb0
 80127c0:	0801cde4 	.word	0x0801cde4
 80127c4:	0801f308 	.word	0x0801f308
 80127c8:	0801f2f8 	.word	0x0801f2f8
 80127cc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80127d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80127d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127d8:	2200      	movs	r2, #0
 80127da:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80127dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127de:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80127e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80127e8:	4293      	cmp	r3, r2
 80127ea:	bf28      	it	cs
 80127ec:	4613      	movcs	r3, r2
 80127ee:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80127f0:	8a7b      	ldrh	r3, [r7, #18]
 80127f2:	085b      	lsrs	r3, r3, #1
 80127f4:	b29a      	uxth	r2, r3
 80127f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80127fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012802:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012804:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012806:	005b      	lsls	r3, r3, #1
 8012808:	b29b      	uxth	r3, r3
 801280a:	429a      	cmp	r2, r3
 801280c:	d206      	bcs.n	801281c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801280e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012812:	005b      	lsls	r3, r3, #1
 8012814:	b29a      	uxth	r2, r3
 8012816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012818:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801281c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801281e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8012820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8012826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012828:	2200      	movs	r2, #0
 801282a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801282e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012830:	f004 fd56 	bl	80172e0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8012834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012836:	7d1b      	ldrb	r3, [r3, #20]
 8012838:	2b06      	cmp	r3, #6
 801283a:	d111      	bne.n	8012860 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801283c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801283e:	8b5b      	ldrh	r3, [r3, #26]
 8012840:	f003 0310 	and.w	r3, r3, #16
 8012844:	2b00      	cmp	r3, #0
 8012846:	d00b      	beq.n	8012860 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012848:	4b9c      	ldr	r3, [pc, #624]	; (8012abc <tcp_slowtmr+0x580>)
 801284a:	681a      	ldr	r2, [r3, #0]
 801284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801284e:	6a1b      	ldr	r3, [r3, #32]
 8012850:	1ad3      	subs	r3, r2, r3
 8012852:	2b28      	cmp	r3, #40	; 0x28
 8012854:	d904      	bls.n	8012860 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012856:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801285a:	3301      	adds	r3, #1
 801285c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012862:	7a5b      	ldrb	r3, [r3, #9]
 8012864:	f003 0308 	and.w	r3, r3, #8
 8012868:	2b00      	cmp	r3, #0
 801286a:	d04a      	beq.n	8012902 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801286c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012870:	2b04      	cmp	r3, #4
 8012872:	d003      	beq.n	801287c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012876:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012878:	2b07      	cmp	r3, #7
 801287a:	d142      	bne.n	8012902 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801287c:	4b8f      	ldr	r3, [pc, #572]	; (8012abc <tcp_slowtmr+0x580>)
 801287e:	681a      	ldr	r2, [r3, #0]
 8012880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012882:	6a1b      	ldr	r3, [r3, #32]
 8012884:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012888:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801288c:	4b8c      	ldr	r3, [pc, #560]	; (8012ac0 <tcp_slowtmr+0x584>)
 801288e:	440b      	add	r3, r1
 8012890:	498c      	ldr	r1, [pc, #560]	; (8012ac4 <tcp_slowtmr+0x588>)
 8012892:	fba1 1303 	umull	r1, r3, r1, r3
 8012896:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012898:	429a      	cmp	r2, r3
 801289a:	d90a      	bls.n	80128b2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801289c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128a0:	3301      	adds	r3, #1
 80128a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80128a6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80128aa:	3301      	adds	r3, #1
 80128ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80128b0:	e027      	b.n	8012902 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128b2:	4b82      	ldr	r3, [pc, #520]	; (8012abc <tcp_slowtmr+0x580>)
 80128b4:	681a      	ldr	r2, [r3, #0]
 80128b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b8:	6a1b      	ldr	r3, [r3, #32]
 80128ba:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80128bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128be:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80128c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80128c8:	4618      	mov	r0, r3
 80128ca:	4b7f      	ldr	r3, [pc, #508]	; (8012ac8 <tcp_slowtmr+0x58c>)
 80128cc:	fb03 f300 	mul.w	r3, r3, r0
 80128d0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80128d2:	497c      	ldr	r1, [pc, #496]	; (8012ac4 <tcp_slowtmr+0x588>)
 80128d4:	fba1 1303 	umull	r1, r3, r1, r3
 80128d8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128da:	429a      	cmp	r2, r3
 80128dc:	d911      	bls.n	8012902 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 80128de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128e0:	f005 f804 	bl	80178ec <tcp_keepalive>
 80128e4:	4603      	mov	r3, r0
 80128e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80128ea:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d107      	bne.n	8012902 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 80128f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128f4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80128f8:	3301      	adds	r3, #1
 80128fa:	b2da      	uxtb	r2, r3
 80128fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fe:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012904:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012906:	2b00      	cmp	r3, #0
 8012908:	d011      	beq.n	801292e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801290a:	4b6c      	ldr	r3, [pc, #432]	; (8012abc <tcp_slowtmr+0x580>)
 801290c:	681a      	ldr	r2, [r3, #0]
 801290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012910:	6a1b      	ldr	r3, [r3, #32]
 8012912:	1ad2      	subs	r2, r2, r3
 8012914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012916:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801291a:	4619      	mov	r1, r3
 801291c:	460b      	mov	r3, r1
 801291e:	005b      	lsls	r3, r3, #1
 8012920:	440b      	add	r3, r1
 8012922:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012924:	429a      	cmp	r2, r3
 8012926:	d302      	bcc.n	801292e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8012928:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801292a:	f000 fec3 	bl	80136b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012930:	7d1b      	ldrb	r3, [r3, #20]
 8012932:	2b03      	cmp	r3, #3
 8012934:	d10b      	bne.n	801294e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012936:	4b61      	ldr	r3, [pc, #388]	; (8012abc <tcp_slowtmr+0x580>)
 8012938:	681a      	ldr	r2, [r3, #0]
 801293a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801293c:	6a1b      	ldr	r3, [r3, #32]
 801293e:	1ad3      	subs	r3, r2, r3
 8012940:	2b28      	cmp	r3, #40	; 0x28
 8012942:	d904      	bls.n	801294e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012944:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012948:	3301      	adds	r3, #1
 801294a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012950:	7d1b      	ldrb	r3, [r3, #20]
 8012952:	2b09      	cmp	r3, #9
 8012954:	d10b      	bne.n	801296e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012956:	4b59      	ldr	r3, [pc, #356]	; (8012abc <tcp_slowtmr+0x580>)
 8012958:	681a      	ldr	r2, [r3, #0]
 801295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295c:	6a1b      	ldr	r3, [r3, #32]
 801295e:	1ad3      	subs	r3, r2, r3
 8012960:	2bf0      	cmp	r3, #240	; 0xf0
 8012962:	d904      	bls.n	801296e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8012964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012968:	3301      	adds	r3, #1
 801296a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801296e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012972:	2b00      	cmp	r3, #0
 8012974:	d060      	beq.n	8012a38 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801297c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801297e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012980:	f000 fce4 	bl	801334c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012986:	2b00      	cmp	r3, #0
 8012988:	d010      	beq.n	80129ac <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801298a:	4b50      	ldr	r3, [pc, #320]	; (8012acc <tcp_slowtmr+0x590>)
 801298c:	681b      	ldr	r3, [r3, #0]
 801298e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012990:	429a      	cmp	r2, r3
 8012992:	d106      	bne.n	80129a2 <tcp_slowtmr+0x466>
 8012994:	4b4e      	ldr	r3, [pc, #312]	; (8012ad0 <tcp_slowtmr+0x594>)
 8012996:	f240 526d 	movw	r2, #1389	; 0x56d
 801299a:	494e      	ldr	r1, [pc, #312]	; (8012ad4 <tcp_slowtmr+0x598>)
 801299c:	484e      	ldr	r0, [pc, #312]	; (8012ad8 <tcp_slowtmr+0x59c>)
 801299e:	f008 f9ed 	bl	801ad7c <iprintf>
        prev->next = pcb->next;
 80129a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a4:	68da      	ldr	r2, [r3, #12]
 80129a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129a8:	60da      	str	r2, [r3, #12]
 80129aa:	e00f      	b.n	80129cc <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80129ac:	4b47      	ldr	r3, [pc, #284]	; (8012acc <tcp_slowtmr+0x590>)
 80129ae:	681b      	ldr	r3, [r3, #0]
 80129b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129b2:	429a      	cmp	r2, r3
 80129b4:	d006      	beq.n	80129c4 <tcp_slowtmr+0x488>
 80129b6:	4b46      	ldr	r3, [pc, #280]	; (8012ad0 <tcp_slowtmr+0x594>)
 80129b8:	f240 5271 	movw	r2, #1393	; 0x571
 80129bc:	4947      	ldr	r1, [pc, #284]	; (8012adc <tcp_slowtmr+0x5a0>)
 80129be:	4846      	ldr	r0, [pc, #280]	; (8012ad8 <tcp_slowtmr+0x59c>)
 80129c0:	f008 f9dc 	bl	801ad7c <iprintf>
        tcp_active_pcbs = pcb->next;
 80129c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c6:	68db      	ldr	r3, [r3, #12]
 80129c8:	4a40      	ldr	r2, [pc, #256]	; (8012acc <tcp_slowtmr+0x590>)
 80129ca:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80129cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d013      	beq.n	80129fc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80129d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80129d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129da:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80129dc:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80129de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e0:	3304      	adds	r3, #4
 80129e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80129e4:	8ad2      	ldrh	r2, [r2, #22]
 80129e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80129e8:	8b09      	ldrh	r1, [r1, #24]
 80129ea:	9102      	str	r1, [sp, #8]
 80129ec:	9201      	str	r2, [sp, #4]
 80129ee:	9300      	str	r3, [sp, #0]
 80129f0:	462b      	mov	r3, r5
 80129f2:	4622      	mov	r2, r4
 80129f4:	4601      	mov	r1, r0
 80129f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129f8:	f004 fec4 	bl	8017784 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80129fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129fe:	691b      	ldr	r3, [r3, #16]
 8012a00:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a04:	7d1b      	ldrb	r3, [r3, #20]
 8012a06:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a0e:	68db      	ldr	r3, [r3, #12]
 8012a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012a12:	6838      	ldr	r0, [r7, #0]
 8012a14:	f7ff f83a 	bl	8011a8c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012a18:	4b31      	ldr	r3, [pc, #196]	; (8012ae0 <tcp_slowtmr+0x5a4>)
 8012a1a:	2200      	movs	r2, #0
 8012a1c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	d004      	beq.n	8012a2e <tcp_slowtmr+0x4f2>
 8012a24:	68fb      	ldr	r3, [r7, #12]
 8012a26:	f06f 010c 	mvn.w	r1, #12
 8012a2a:	68b8      	ldr	r0, [r7, #8]
 8012a2c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012a2e:	4b2c      	ldr	r3, [pc, #176]	; (8012ae0 <tcp_slowtmr+0x5a4>)
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d037      	beq.n	8012aa6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012a36:	e592      	b.n	801255e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3e:	68db      	ldr	r3, [r3, #12]
 8012a40:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a44:	7f1b      	ldrb	r3, [r3, #28]
 8012a46:	3301      	adds	r3, #1
 8012a48:	b2da      	uxtb	r2, r3
 8012a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a4c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a50:	7f1a      	ldrb	r2, [r3, #28]
 8012a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a54:	7f5b      	ldrb	r3, [r3, #29]
 8012a56:	429a      	cmp	r2, r3
 8012a58:	d325      	bcc.n	8012aa6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012a60:	4b1f      	ldr	r3, [pc, #124]	; (8012ae0 <tcp_slowtmr+0x5a4>)
 8012a62:	2200      	movs	r2, #0
 8012a64:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d00b      	beq.n	8012a88 <tcp_slowtmr+0x54c>
 8012a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012a76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012a78:	6912      	ldr	r2, [r2, #16]
 8012a7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a7c:	4610      	mov	r0, r2
 8012a7e:	4798      	blx	r3
 8012a80:	4603      	mov	r3, r0
 8012a82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012a86:	e002      	b.n	8012a8e <tcp_slowtmr+0x552>
 8012a88:	2300      	movs	r3, #0
 8012a8a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012a8e:	4b14      	ldr	r3, [pc, #80]	; (8012ae0 <tcp_slowtmr+0x5a4>)
 8012a90:	781b      	ldrb	r3, [r3, #0]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d000      	beq.n	8012a98 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012a96:	e562      	b.n	801255e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012a98:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d102      	bne.n	8012aa6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012aa2:	f004 f8bb 	bl	8016c1c <tcp_output>
  while (pcb != NULL) {
 8012aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	f47f ad5e 	bne.w	801256a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012aae:	2300      	movs	r3, #0
 8012ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012ab2:	4b0c      	ldr	r3, [pc, #48]	; (8012ae4 <tcp_slowtmr+0x5a8>)
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012ab8:	e069      	b.n	8012b8e <tcp_slowtmr+0x652>
 8012aba:	bf00      	nop
 8012abc:	24008274 	.word	0x24008274
 8012ac0:	000a4cb8 	.word	0x000a4cb8
 8012ac4:	10624dd3 	.word	0x10624dd3
 8012ac8:	000124f8 	.word	0x000124f8
 8012acc:	24008270 	.word	0x24008270
 8012ad0:	0801c9e4 	.word	0x0801c9e4
 8012ad4:	0801ce1c 	.word	0x0801ce1c
 8012ad8:	0801ca28 	.word	0x0801ca28
 8012adc:	0801ce48 	.word	0x0801ce48
 8012ae0:	2400826c 	.word	0x2400826c
 8012ae4:	24008280 	.word	0x24008280
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aea:	7d1b      	ldrb	r3, [r3, #20]
 8012aec:	2b0a      	cmp	r3, #10
 8012aee:	d006      	beq.n	8012afe <tcp_slowtmr+0x5c2>
 8012af0:	4b2b      	ldr	r3, [pc, #172]	; (8012ba0 <tcp_slowtmr+0x664>)
 8012af2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012af6:	492b      	ldr	r1, [pc, #172]	; (8012ba4 <tcp_slowtmr+0x668>)
 8012af8:	482b      	ldr	r0, [pc, #172]	; (8012ba8 <tcp_slowtmr+0x66c>)
 8012afa:	f008 f93f 	bl	801ad7c <iprintf>
    pcb_remove = 0;
 8012afe:	2300      	movs	r3, #0
 8012b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b04:	4b29      	ldr	r3, [pc, #164]	; (8012bac <tcp_slowtmr+0x670>)
 8012b06:	681a      	ldr	r2, [r3, #0]
 8012b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b0a:	6a1b      	ldr	r3, [r3, #32]
 8012b0c:	1ad3      	subs	r3, r2, r3
 8012b0e:	2bf0      	cmp	r3, #240	; 0xf0
 8012b10:	d904      	bls.n	8012b1c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012b12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b16:	3301      	adds	r3, #1
 8012b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d02f      	beq.n	8012b84 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012b24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012b26:	f000 fc11 	bl	801334c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d010      	beq.n	8012b52 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012b30:	4b1f      	ldr	r3, [pc, #124]	; (8012bb0 <tcp_slowtmr+0x674>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b36:	429a      	cmp	r2, r3
 8012b38:	d106      	bne.n	8012b48 <tcp_slowtmr+0x60c>
 8012b3a:	4b19      	ldr	r3, [pc, #100]	; (8012ba0 <tcp_slowtmr+0x664>)
 8012b3c:	f240 52af 	movw	r2, #1455	; 0x5af
 8012b40:	491c      	ldr	r1, [pc, #112]	; (8012bb4 <tcp_slowtmr+0x678>)
 8012b42:	4819      	ldr	r0, [pc, #100]	; (8012ba8 <tcp_slowtmr+0x66c>)
 8012b44:	f008 f91a 	bl	801ad7c <iprintf>
        prev->next = pcb->next;
 8012b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b4a:	68da      	ldr	r2, [r3, #12]
 8012b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b4e:	60da      	str	r2, [r3, #12]
 8012b50:	e00f      	b.n	8012b72 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012b52:	4b17      	ldr	r3, [pc, #92]	; (8012bb0 <tcp_slowtmr+0x674>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012b58:	429a      	cmp	r2, r3
 8012b5a:	d006      	beq.n	8012b6a <tcp_slowtmr+0x62e>
 8012b5c:	4b10      	ldr	r3, [pc, #64]	; (8012ba0 <tcp_slowtmr+0x664>)
 8012b5e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012b62:	4915      	ldr	r1, [pc, #84]	; (8012bb8 <tcp_slowtmr+0x67c>)
 8012b64:	4810      	ldr	r0, [pc, #64]	; (8012ba8 <tcp_slowtmr+0x66c>)
 8012b66:	f008 f909 	bl	801ad7c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b6c:	68db      	ldr	r3, [r3, #12]
 8012b6e:	4a10      	ldr	r2, [pc, #64]	; (8012bb0 <tcp_slowtmr+0x674>)
 8012b70:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b74:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b78:	68db      	ldr	r3, [r3, #12]
 8012b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012b7c:	69f8      	ldr	r0, [r7, #28]
 8012b7e:	f7fe ff85 	bl	8011a8c <tcp_free>
 8012b82:	e004      	b.n	8012b8e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b86:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d1a9      	bne.n	8012ae8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012b94:	bf00      	nop
 8012b96:	bf00      	nop
 8012b98:	3730      	adds	r7, #48	; 0x30
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	0801c9e4 	.word	0x0801c9e4
 8012ba4:	0801ce74 	.word	0x0801ce74
 8012ba8:	0801ca28 	.word	0x0801ca28
 8012bac:	24008274 	.word	0x24008274
 8012bb0:	24008280 	.word	0x24008280
 8012bb4:	0801cea4 	.word	0x0801cea4
 8012bb8:	0801cecc 	.word	0x0801cecc

08012bbc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b082      	sub	sp, #8
 8012bc0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012bc2:	4b2d      	ldr	r3, [pc, #180]	; (8012c78 <tcp_fasttmr+0xbc>)
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	3301      	adds	r3, #1
 8012bc8:	b2da      	uxtb	r2, r3
 8012bca:	4b2b      	ldr	r3, [pc, #172]	; (8012c78 <tcp_fasttmr+0xbc>)
 8012bcc:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012bce:	4b2b      	ldr	r3, [pc, #172]	; (8012c7c <tcp_fasttmr+0xc0>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012bd4:	e048      	b.n	8012c68 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	7f9a      	ldrb	r2, [r3, #30]
 8012bda:	4b27      	ldr	r3, [pc, #156]	; (8012c78 <tcp_fasttmr+0xbc>)
 8012bdc:	781b      	ldrb	r3, [r3, #0]
 8012bde:	429a      	cmp	r2, r3
 8012be0:	d03f      	beq.n	8012c62 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012be2:	4b25      	ldr	r3, [pc, #148]	; (8012c78 <tcp_fasttmr+0xbc>)
 8012be4:	781a      	ldrb	r2, [r3, #0]
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	8b5b      	ldrh	r3, [r3, #26]
 8012bee:	f003 0301 	and.w	r3, r3, #1
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d010      	beq.n	8012c18 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	8b5b      	ldrh	r3, [r3, #26]
 8012bfa:	f043 0302 	orr.w	r3, r3, #2
 8012bfe:	b29a      	uxth	r2, r3
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012c04:	6878      	ldr	r0, [r7, #4]
 8012c06:	f004 f809 	bl	8016c1c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	8b5b      	ldrh	r3, [r3, #26]
 8012c0e:	f023 0303 	bic.w	r3, r3, #3
 8012c12:	b29a      	uxth	r2, r3
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	8b5b      	ldrh	r3, [r3, #26]
 8012c1c:	f003 0308 	and.w	r3, r3, #8
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d009      	beq.n	8012c38 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	8b5b      	ldrh	r3, [r3, #26]
 8012c28:	f023 0308 	bic.w	r3, r3, #8
 8012c2c:	b29a      	uxth	r2, r3
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012c32:	6878      	ldr	r0, [r7, #4]
 8012c34:	f7ff f8be 	bl	8011db4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	68db      	ldr	r3, [r3, #12]
 8012c3c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d00a      	beq.n	8012c5c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012c46:	4b0e      	ldr	r3, [pc, #56]	; (8012c80 <tcp_fasttmr+0xc4>)
 8012c48:	2200      	movs	r2, #0
 8012c4a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f000 f819 	bl	8012c84 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012c52:	4b0b      	ldr	r3, [pc, #44]	; (8012c80 <tcp_fasttmr+0xc4>)
 8012c54:	781b      	ldrb	r3, [r3, #0]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d000      	beq.n	8012c5c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012c5a:	e7b8      	b.n	8012bce <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012c5c:	683b      	ldr	r3, [r7, #0]
 8012c5e:	607b      	str	r3, [r7, #4]
 8012c60:	e002      	b.n	8012c68 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d1b3      	bne.n	8012bd6 <tcp_fasttmr+0x1a>
    }
  }
}
 8012c6e:	bf00      	nop
 8012c70:	bf00      	nop
 8012c72:	3708      	adds	r7, #8
 8012c74:	46bd      	mov	sp, r7
 8012c76:	bd80      	pop	{r7, pc}
 8012c78:	24004afa 	.word	0x24004afa
 8012c7c:	24008270 	.word	0x24008270
 8012c80:	2400826c 	.word	0x2400826c

08012c84 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012c84:	b590      	push	{r4, r7, lr}
 8012c86:	b085      	sub	sp, #20
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d109      	bne.n	8012ca6 <tcp_process_refused_data+0x22>
 8012c92:	4b37      	ldr	r3, [pc, #220]	; (8012d70 <tcp_process_refused_data+0xec>)
 8012c94:	f240 6209 	movw	r2, #1545	; 0x609
 8012c98:	4936      	ldr	r1, [pc, #216]	; (8012d74 <tcp_process_refused_data+0xf0>)
 8012c9a:	4837      	ldr	r0, [pc, #220]	; (8012d78 <tcp_process_refused_data+0xf4>)
 8012c9c:	f008 f86e 	bl	801ad7c <iprintf>
 8012ca0:	f06f 030f 	mvn.w	r3, #15
 8012ca4:	e060      	b.n	8012d68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012caa:	7b5b      	ldrb	r3, [r3, #13]
 8012cac:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cb2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d00b      	beq.n	8012cdc <tcp_process_refused_data+0x58>
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	6918      	ldr	r0, [r3, #16]
 8012cce:	2300      	movs	r3, #0
 8012cd0:	68ba      	ldr	r2, [r7, #8]
 8012cd2:	6879      	ldr	r1, [r7, #4]
 8012cd4:	47a0      	blx	r4
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	73fb      	strb	r3, [r7, #15]
 8012cda:	e007      	b.n	8012cec <tcp_process_refused_data+0x68>
 8012cdc:	2300      	movs	r3, #0
 8012cde:	68ba      	ldr	r2, [r7, #8]
 8012ce0:	6879      	ldr	r1, [r7, #4]
 8012ce2:	2000      	movs	r0, #0
 8012ce4:	f000 f8c2 	bl	8012e6c <tcp_recv_null>
 8012ce8:	4603      	mov	r3, r0
 8012cea:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d12a      	bne.n	8012d4a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012cf4:	7bbb      	ldrb	r3, [r7, #14]
 8012cf6:	f003 0320 	and.w	r3, r3, #32
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d033      	beq.n	8012d66 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012d06:	d005      	beq.n	8012d14 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d0c:	3301      	adds	r3, #1
 8012d0e:	b29a      	uxth	r2, r3
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d00b      	beq.n	8012d36 <tcp_process_refused_data+0xb2>
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6918      	ldr	r0, [r3, #16]
 8012d28:	2300      	movs	r3, #0
 8012d2a:	2200      	movs	r2, #0
 8012d2c:	6879      	ldr	r1, [r7, #4]
 8012d2e:	47a0      	blx	r4
 8012d30:	4603      	mov	r3, r0
 8012d32:	73fb      	strb	r3, [r7, #15]
 8012d34:	e001      	b.n	8012d3a <tcp_process_refused_data+0xb6>
 8012d36:	2300      	movs	r3, #0
 8012d38:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d3e:	f113 0f0d 	cmn.w	r3, #13
 8012d42:	d110      	bne.n	8012d66 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012d44:	f06f 030c 	mvn.w	r3, #12
 8012d48:	e00e      	b.n	8012d68 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d4e:	f113 0f0d 	cmn.w	r3, #13
 8012d52:	d102      	bne.n	8012d5a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012d54:	f06f 030c 	mvn.w	r3, #12
 8012d58:	e006      	b.n	8012d68 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	68ba      	ldr	r2, [r7, #8]
 8012d5e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012d60:	f06f 0304 	mvn.w	r3, #4
 8012d64:	e000      	b.n	8012d68 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012d66:	2300      	movs	r3, #0
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3714      	adds	r7, #20
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd90      	pop	{r4, r7, pc}
 8012d70:	0801c9e4 	.word	0x0801c9e4
 8012d74:	0801cef4 	.word	0x0801cef4
 8012d78:	0801ca28 	.word	0x0801ca28

08012d7c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012d84:	e007      	b.n	8012d96 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	681b      	ldr	r3, [r3, #0]
 8012d8a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012d8c:	6878      	ldr	r0, [r7, #4]
 8012d8e:	f000 f80a 	bl	8012da6 <tcp_seg_free>
    seg = next;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d1f4      	bne.n	8012d86 <tcp_segs_free+0xa>
  }
}
 8012d9c:	bf00      	nop
 8012d9e:	bf00      	nop
 8012da0:	3710      	adds	r7, #16
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bd80      	pop	{r7, pc}

08012da6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012da6:	b580      	push	{r7, lr}
 8012da8:	b082      	sub	sp, #8
 8012daa:	af00      	add	r7, sp, #0
 8012dac:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d00c      	beq.n	8012dce <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d004      	beq.n	8012dc6 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	685b      	ldr	r3, [r3, #4]
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	f7fe fba7 	bl	8011514 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012dc6:	6879      	ldr	r1, [r7, #4]
 8012dc8:	2003      	movs	r0, #3
 8012dca:	f7fd fcff 	bl	80107cc <memp_free>
  }
}
 8012dce:	bf00      	nop
 8012dd0:	3708      	adds	r7, #8
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	bd80      	pop	{r7, pc}
	...

08012dd8 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b082      	sub	sp, #8
 8012ddc:	af00      	add	r7, sp, #0
 8012dde:	6078      	str	r0, [r7, #4]
 8012de0:	460b      	mov	r3, r1
 8012de2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d107      	bne.n	8012dfa <tcp_setprio+0x22>
 8012dea:	4b07      	ldr	r3, [pc, #28]	; (8012e08 <tcp_setprio+0x30>)
 8012dec:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8012df0:	4906      	ldr	r1, [pc, #24]	; (8012e0c <tcp_setprio+0x34>)
 8012df2:	4807      	ldr	r0, [pc, #28]	; (8012e10 <tcp_setprio+0x38>)
 8012df4:	f007 ffc2 	bl	801ad7c <iprintf>
 8012df8:	e002      	b.n	8012e00 <tcp_setprio+0x28>

  pcb->prio = prio;
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	78fa      	ldrb	r2, [r7, #3]
 8012dfe:	755a      	strb	r2, [r3, #21]
}
 8012e00:	3708      	adds	r7, #8
 8012e02:	46bd      	mov	sp, r7
 8012e04:	bd80      	pop	{r7, pc}
 8012e06:	bf00      	nop
 8012e08:	0801c9e4 	.word	0x0801c9e4
 8012e0c:	0801cf1c 	.word	0x0801cf1c
 8012e10:	0801ca28 	.word	0x0801ca28

08012e14 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012e14:	b580      	push	{r7, lr}
 8012e16:	b084      	sub	sp, #16
 8012e18:	af00      	add	r7, sp, #0
 8012e1a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d106      	bne.n	8012e30 <tcp_seg_copy+0x1c>
 8012e22:	4b0f      	ldr	r3, [pc, #60]	; (8012e60 <tcp_seg_copy+0x4c>)
 8012e24:	f240 6282 	movw	r2, #1666	; 0x682
 8012e28:	490e      	ldr	r1, [pc, #56]	; (8012e64 <tcp_seg_copy+0x50>)
 8012e2a:	480f      	ldr	r0, [pc, #60]	; (8012e68 <tcp_seg_copy+0x54>)
 8012e2c:	f007 ffa6 	bl	801ad7c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012e30:	2003      	movs	r0, #3
 8012e32:	f7fd fc55 	bl	80106e0 <memp_malloc>
 8012e36:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012e38:	68fb      	ldr	r3, [r7, #12]
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d101      	bne.n	8012e42 <tcp_seg_copy+0x2e>
    return NULL;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	e00a      	b.n	8012e58 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012e42:	2210      	movs	r2, #16
 8012e44:	6879      	ldr	r1, [r7, #4]
 8012e46:	68f8      	ldr	r0, [r7, #12]
 8012e48:	f007 ff27 	bl	801ac9a <memcpy>
  pbuf_ref(cseg->p);
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	685b      	ldr	r3, [r3, #4]
 8012e50:	4618      	mov	r0, r3
 8012e52:	f7fe fc05 	bl	8011660 <pbuf_ref>
  return cseg;
 8012e56:	68fb      	ldr	r3, [r7, #12]
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3710      	adds	r7, #16
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	0801c9e4 	.word	0x0801c9e4
 8012e64:	0801cf38 	.word	0x0801cf38
 8012e68:	0801ca28 	.word	0x0801ca28

08012e6c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012e6c:	b580      	push	{r7, lr}
 8012e6e:	b084      	sub	sp, #16
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	60f8      	str	r0, [r7, #12]
 8012e74:	60b9      	str	r1, [r7, #8]
 8012e76:	607a      	str	r2, [r7, #4]
 8012e78:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012e7a:	68bb      	ldr	r3, [r7, #8]
 8012e7c:	2b00      	cmp	r3, #0
 8012e7e:	d109      	bne.n	8012e94 <tcp_recv_null+0x28>
 8012e80:	4b12      	ldr	r3, [pc, #72]	; (8012ecc <tcp_recv_null+0x60>)
 8012e82:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012e86:	4912      	ldr	r1, [pc, #72]	; (8012ed0 <tcp_recv_null+0x64>)
 8012e88:	4812      	ldr	r0, [pc, #72]	; (8012ed4 <tcp_recv_null+0x68>)
 8012e8a:	f007 ff77 	bl	801ad7c <iprintf>
 8012e8e:	f06f 030f 	mvn.w	r3, #15
 8012e92:	e016      	b.n	8012ec2 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d009      	beq.n	8012eae <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	891b      	ldrh	r3, [r3, #8]
 8012e9e:	4619      	mov	r1, r3
 8012ea0:	68b8      	ldr	r0, [r7, #8]
 8012ea2:	f7ff fab5 	bl	8012410 <tcp_recved>
    pbuf_free(p);
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f7fe fb34 	bl	8011514 <pbuf_free>
 8012eac:	e008      	b.n	8012ec0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012eae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d104      	bne.n	8012ec0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012eb6:	68b8      	ldr	r0, [r7, #8]
 8012eb8:	f7fe ffe6 	bl	8011e88 <tcp_close>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	e000      	b.n	8012ec2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012ec0:	2300      	movs	r3, #0
}
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	3710      	adds	r7, #16
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}
 8012eca:	bf00      	nop
 8012ecc:	0801c9e4 	.word	0x0801c9e4
 8012ed0:	0801cf54 	.word	0x0801cf54
 8012ed4:	0801ca28 	.word	0x0801ca28

08012ed8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b086      	sub	sp, #24
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	4603      	mov	r3, r0
 8012ee0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	db01      	blt.n	8012eee <tcp_kill_prio+0x16>
 8012eea:	79fb      	ldrb	r3, [r7, #7]
 8012eec:	e000      	b.n	8012ef0 <tcp_kill_prio+0x18>
 8012eee:	237f      	movs	r3, #127	; 0x7f
 8012ef0:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012ef2:	7afb      	ldrb	r3, [r7, #11]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d034      	beq.n	8012f62 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012ef8:	7afb      	ldrb	r3, [r7, #11]
 8012efa:	3b01      	subs	r3, #1
 8012efc:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012efe:	2300      	movs	r3, #0
 8012f00:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012f02:	2300      	movs	r3, #0
 8012f04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f06:	4b19      	ldr	r3, [pc, #100]	; (8012f6c <tcp_kill_prio+0x94>)
 8012f08:	681b      	ldr	r3, [r3, #0]
 8012f0a:	617b      	str	r3, [r7, #20]
 8012f0c:	e01f      	b.n	8012f4e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	7d5b      	ldrb	r3, [r3, #21]
 8012f12:	7afa      	ldrb	r2, [r7, #11]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d80c      	bhi.n	8012f32 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012f1c:	7afa      	ldrb	r2, [r7, #11]
 8012f1e:	429a      	cmp	r2, r3
 8012f20:	d112      	bne.n	8012f48 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012f22:	4b13      	ldr	r3, [pc, #76]	; (8012f70 <tcp_kill_prio+0x98>)
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	6a1b      	ldr	r3, [r3, #32]
 8012f2a:	1ad3      	subs	r3, r2, r3
 8012f2c:	68fa      	ldr	r2, [r7, #12]
 8012f2e:	429a      	cmp	r2, r3
 8012f30:	d80a      	bhi.n	8012f48 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012f32:	4b0f      	ldr	r3, [pc, #60]	; (8012f70 <tcp_kill_prio+0x98>)
 8012f34:	681a      	ldr	r2, [r3, #0]
 8012f36:	697b      	ldr	r3, [r7, #20]
 8012f38:	6a1b      	ldr	r3, [r3, #32]
 8012f3a:	1ad3      	subs	r3, r2, r3
 8012f3c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012f42:	697b      	ldr	r3, [r7, #20]
 8012f44:	7d5b      	ldrb	r3, [r3, #21]
 8012f46:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	68db      	ldr	r3, [r3, #12]
 8012f4c:	617b      	str	r3, [r7, #20]
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d1dc      	bne.n	8012f0e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012f54:	693b      	ldr	r3, [r7, #16]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d004      	beq.n	8012f64 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012f5a:	6938      	ldr	r0, [r7, #16]
 8012f5c:	f7ff f87e 	bl	801205c <tcp_abort>
 8012f60:	e000      	b.n	8012f64 <tcp_kill_prio+0x8c>
    return;
 8012f62:	bf00      	nop
  }
}
 8012f64:	3718      	adds	r7, #24
 8012f66:	46bd      	mov	sp, r7
 8012f68:	bd80      	pop	{r7, pc}
 8012f6a:	bf00      	nop
 8012f6c:	24008270 	.word	0x24008270
 8012f70:	24008274 	.word	0x24008274

08012f74 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012f74:	b580      	push	{r7, lr}
 8012f76:	b086      	sub	sp, #24
 8012f78:	af00      	add	r7, sp, #0
 8012f7a:	4603      	mov	r3, r0
 8012f7c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012f7e:	79fb      	ldrb	r3, [r7, #7]
 8012f80:	2b08      	cmp	r3, #8
 8012f82:	d009      	beq.n	8012f98 <tcp_kill_state+0x24>
 8012f84:	79fb      	ldrb	r3, [r7, #7]
 8012f86:	2b09      	cmp	r3, #9
 8012f88:	d006      	beq.n	8012f98 <tcp_kill_state+0x24>
 8012f8a:	4b1a      	ldr	r3, [pc, #104]	; (8012ff4 <tcp_kill_state+0x80>)
 8012f8c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012f90:	4919      	ldr	r1, [pc, #100]	; (8012ff8 <tcp_kill_state+0x84>)
 8012f92:	481a      	ldr	r0, [pc, #104]	; (8012ffc <tcp_kill_state+0x88>)
 8012f94:	f007 fef2 	bl	801ad7c <iprintf>

  inactivity = 0;
 8012f98:	2300      	movs	r3, #0
 8012f9a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012f9c:	2300      	movs	r3, #0
 8012f9e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fa0:	4b17      	ldr	r3, [pc, #92]	; (8013000 <tcp_kill_state+0x8c>)
 8012fa2:	681b      	ldr	r3, [r3, #0]
 8012fa4:	617b      	str	r3, [r7, #20]
 8012fa6:	e017      	b.n	8012fd8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	7d1b      	ldrb	r3, [r3, #20]
 8012fac:	79fa      	ldrb	r2, [r7, #7]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d10f      	bne.n	8012fd2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012fb2:	4b14      	ldr	r3, [pc, #80]	; (8013004 <tcp_kill_state+0x90>)
 8012fb4:	681a      	ldr	r2, [r3, #0]
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	6a1b      	ldr	r3, [r3, #32]
 8012fba:	1ad3      	subs	r3, r2, r3
 8012fbc:	68fa      	ldr	r2, [r7, #12]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d807      	bhi.n	8012fd2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012fc2:	4b10      	ldr	r3, [pc, #64]	; (8013004 <tcp_kill_state+0x90>)
 8012fc4:	681a      	ldr	r2, [r3, #0]
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	6a1b      	ldr	r3, [r3, #32]
 8012fca:	1ad3      	subs	r3, r2, r3
 8012fcc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012fce:	697b      	ldr	r3, [r7, #20]
 8012fd0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	68db      	ldr	r3, [r3, #12]
 8012fd6:	617b      	str	r3, [r7, #20]
 8012fd8:	697b      	ldr	r3, [r7, #20]
 8012fda:	2b00      	cmp	r3, #0
 8012fdc:	d1e4      	bne.n	8012fa8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012fde:	693b      	ldr	r3, [r7, #16]
 8012fe0:	2b00      	cmp	r3, #0
 8012fe2:	d003      	beq.n	8012fec <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012fe4:	2100      	movs	r1, #0
 8012fe6:	6938      	ldr	r0, [r7, #16]
 8012fe8:	f7fe ff7a 	bl	8011ee0 <tcp_abandon>
  }
}
 8012fec:	bf00      	nop
 8012fee:	3718      	adds	r7, #24
 8012ff0:	46bd      	mov	sp, r7
 8012ff2:	bd80      	pop	{r7, pc}
 8012ff4:	0801c9e4 	.word	0x0801c9e4
 8012ff8:	0801cf70 	.word	0x0801cf70
 8012ffc:	0801ca28 	.word	0x0801ca28
 8013000:	24008270 	.word	0x24008270
 8013004:	24008274 	.word	0x24008274

08013008 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b084      	sub	sp, #16
 801300c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801300e:	2300      	movs	r3, #0
 8013010:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013012:	2300      	movs	r3, #0
 8013014:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013016:	4b12      	ldr	r3, [pc, #72]	; (8013060 <tcp_kill_timewait+0x58>)
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	60fb      	str	r3, [r7, #12]
 801301c:	e012      	b.n	8013044 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801301e:	4b11      	ldr	r3, [pc, #68]	; (8013064 <tcp_kill_timewait+0x5c>)
 8013020:	681a      	ldr	r2, [r3, #0]
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	6a1b      	ldr	r3, [r3, #32]
 8013026:	1ad3      	subs	r3, r2, r3
 8013028:	687a      	ldr	r2, [r7, #4]
 801302a:	429a      	cmp	r2, r3
 801302c:	d807      	bhi.n	801303e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801302e:	4b0d      	ldr	r3, [pc, #52]	; (8013064 <tcp_kill_timewait+0x5c>)
 8013030:	681a      	ldr	r2, [r3, #0]
 8013032:	68fb      	ldr	r3, [r7, #12]
 8013034:	6a1b      	ldr	r3, [r3, #32]
 8013036:	1ad3      	subs	r3, r2, r3
 8013038:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	68db      	ldr	r3, [r3, #12]
 8013042:	60fb      	str	r3, [r7, #12]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d1e9      	bne.n	801301e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d002      	beq.n	8013056 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013050:	68b8      	ldr	r0, [r7, #8]
 8013052:	f7ff f803 	bl	801205c <tcp_abort>
  }
}
 8013056:	bf00      	nop
 8013058:	3710      	adds	r7, #16
 801305a:	46bd      	mov	sp, r7
 801305c:	bd80      	pop	{r7, pc}
 801305e:	bf00      	nop
 8013060:	24008280 	.word	0x24008280
 8013064:	24008274 	.word	0x24008274

08013068 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801306e:	4b10      	ldr	r3, [pc, #64]	; (80130b0 <tcp_handle_closepend+0x48>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013074:	e014      	b.n	80130a0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	8b5b      	ldrh	r3, [r3, #26]
 8013080:	f003 0308 	and.w	r3, r3, #8
 8013084:	2b00      	cmp	r3, #0
 8013086:	d009      	beq.n	801309c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	8b5b      	ldrh	r3, [r3, #26]
 801308c:	f023 0308 	bic.w	r3, r3, #8
 8013090:	b29a      	uxth	r2, r3
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f7fe fe8c 	bl	8011db4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801309c:	683b      	ldr	r3, [r7, #0]
 801309e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d1e7      	bne.n	8013076 <tcp_handle_closepend+0xe>
  }
}
 80130a6:	bf00      	nop
 80130a8:	bf00      	nop
 80130aa:	3708      	adds	r7, #8
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}
 80130b0:	24008270 	.word	0x24008270

080130b4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	4603      	mov	r3, r0
 80130bc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130be:	2001      	movs	r0, #1
 80130c0:	f7fd fb0e 	bl	80106e0 <memp_malloc>
 80130c4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d126      	bne.n	801311a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80130cc:	f7ff ffcc 	bl	8013068 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80130d0:	f7ff ff9a 	bl	8013008 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130d4:	2001      	movs	r0, #1
 80130d6:	f7fd fb03 	bl	80106e0 <memp_malloc>
 80130da:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d11b      	bne.n	801311a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80130e2:	2009      	movs	r0, #9
 80130e4:	f7ff ff46 	bl	8012f74 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130e8:	2001      	movs	r0, #1
 80130ea:	f7fd faf9 	bl	80106e0 <memp_malloc>
 80130ee:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d111      	bne.n	801311a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80130f6:	2008      	movs	r0, #8
 80130f8:	f7ff ff3c 	bl	8012f74 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80130fc:	2001      	movs	r0, #1
 80130fe:	f7fd faef 	bl	80106e0 <memp_malloc>
 8013102:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d107      	bne.n	801311a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801310a:	79fb      	ldrb	r3, [r7, #7]
 801310c:	4618      	mov	r0, r3
 801310e:	f7ff fee3 	bl	8012ed8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013112:	2001      	movs	r0, #1
 8013114:	f7fd fae4 	bl	80106e0 <memp_malloc>
 8013118:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	2b00      	cmp	r3, #0
 801311e:	d03f      	beq.n	80131a0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013120:	229c      	movs	r2, #156	; 0x9c
 8013122:	2100      	movs	r1, #0
 8013124:	68f8      	ldr	r0, [r7, #12]
 8013126:	f007 fdc6 	bl	801acb6 <memset>
    pcb->prio = prio;
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	79fa      	ldrb	r2, [r7, #7]
 801312e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013136:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013140:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	22ff      	movs	r2, #255	; 0xff
 801314e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013156:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2206      	movs	r2, #6
 801315c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	2206      	movs	r2, #6
 8013164:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801316c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801316e:	68fb      	ldr	r3, [r7, #12]
 8013170:	2201      	movs	r2, #1
 8013172:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013176:	4b0d      	ldr	r3, [pc, #52]	; (80131ac <tcp_alloc+0xf8>)
 8013178:	681a      	ldr	r2, [r3, #0]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801317e:	4b0c      	ldr	r3, [pc, #48]	; (80131b0 <tcp_alloc+0xfc>)
 8013180:	781a      	ldrb	r2, [r3, #0]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801318c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	4a08      	ldr	r2, [pc, #32]	; (80131b4 <tcp_alloc+0x100>)
 8013194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	4a07      	ldr	r2, [pc, #28]	; (80131b8 <tcp_alloc+0x104>)
 801319c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80131a0:	68fb      	ldr	r3, [r7, #12]
}
 80131a2:	4618      	mov	r0, r3
 80131a4:	3710      	adds	r7, #16
 80131a6:	46bd      	mov	sp, r7
 80131a8:	bd80      	pop	{r7, pc}
 80131aa:	bf00      	nop
 80131ac:	24008274 	.word	0x24008274
 80131b0:	24004afa 	.word	0x24004afa
 80131b4:	08012e6d 	.word	0x08012e6d
 80131b8:	006ddd00 	.word	0x006ddd00

080131bc <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 80131c0:	2040      	movs	r0, #64	; 0x40
 80131c2:	f7ff ff77 	bl	80130b4 <tcp_alloc>
 80131c6:	4603      	mov	r3, r0
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	bd80      	pop	{r7, pc}

080131cc <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 80131cc:	b480      	push	{r7}
 80131ce:	b083      	sub	sp, #12
 80131d0:	af00      	add	r7, sp, #0
 80131d2:	6078      	str	r0, [r7, #4]
 80131d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d002      	beq.n	80131e2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	683a      	ldr	r2, [r7, #0]
 80131e0:	611a      	str	r2, [r3, #16]
  }
}
 80131e2:	bf00      	nop
 80131e4:	370c      	adds	r7, #12
 80131e6:	46bd      	mov	sp, r7
 80131e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ec:	4770      	bx	lr
	...

080131f0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b082      	sub	sp, #8
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d00e      	beq.n	801321e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	7d1b      	ldrb	r3, [r3, #20]
 8013204:	2b01      	cmp	r3, #1
 8013206:	d106      	bne.n	8013216 <tcp_recv+0x26>
 8013208:	4b07      	ldr	r3, [pc, #28]	; (8013228 <tcp_recv+0x38>)
 801320a:	f240 72df 	movw	r2, #2015	; 0x7df
 801320e:	4907      	ldr	r1, [pc, #28]	; (801322c <tcp_recv+0x3c>)
 8013210:	4807      	ldr	r0, [pc, #28]	; (8013230 <tcp_recv+0x40>)
 8013212:	f007 fdb3 	bl	801ad7c <iprintf>
    pcb->recv = recv;
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	683a      	ldr	r2, [r7, #0]
 801321a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801321e:	bf00      	nop
 8013220:	3708      	adds	r7, #8
 8013222:	46bd      	mov	sp, r7
 8013224:	bd80      	pop	{r7, pc}
 8013226:	bf00      	nop
 8013228:	0801c9e4 	.word	0x0801c9e4
 801322c:	0801cf80 	.word	0x0801cf80
 8013230:	0801ca28 	.word	0x0801ca28

08013234 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
 801323c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d00e      	beq.n	8013262 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	7d1b      	ldrb	r3, [r3, #20]
 8013248:	2b01      	cmp	r3, #1
 801324a:	d106      	bne.n	801325a <tcp_sent+0x26>
 801324c:	4b07      	ldr	r3, [pc, #28]	; (801326c <tcp_sent+0x38>)
 801324e:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013252:	4907      	ldr	r1, [pc, #28]	; (8013270 <tcp_sent+0x3c>)
 8013254:	4807      	ldr	r0, [pc, #28]	; (8013274 <tcp_sent+0x40>)
 8013256:	f007 fd91 	bl	801ad7c <iprintf>
    pcb->sent = sent;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	683a      	ldr	r2, [r7, #0]
 801325e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013262:	bf00      	nop
 8013264:	3708      	adds	r7, #8
 8013266:	46bd      	mov	sp, r7
 8013268:	bd80      	pop	{r7, pc}
 801326a:	bf00      	nop
 801326c:	0801c9e4 	.word	0x0801c9e4
 8013270:	0801cfa8 	.word	0x0801cfa8
 8013274:	0801ca28 	.word	0x0801ca28

08013278 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b082      	sub	sp, #8
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
 8013280:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d00e      	beq.n	80132a6 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	7d1b      	ldrb	r3, [r3, #20]
 801328c:	2b01      	cmp	r3, #1
 801328e:	d106      	bne.n	801329e <tcp_err+0x26>
 8013290:	4b07      	ldr	r3, [pc, #28]	; (80132b0 <tcp_err+0x38>)
 8013292:	f640 020d 	movw	r2, #2061	; 0x80d
 8013296:	4907      	ldr	r1, [pc, #28]	; (80132b4 <tcp_err+0x3c>)
 8013298:	4807      	ldr	r0, [pc, #28]	; (80132b8 <tcp_err+0x40>)
 801329a:	f007 fd6f 	bl	801ad7c <iprintf>
    pcb->errf = err;
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	683a      	ldr	r2, [r7, #0]
 80132a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 80132a6:	bf00      	nop
 80132a8:	3708      	adds	r7, #8
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}
 80132ae:	bf00      	nop
 80132b0:	0801c9e4 	.word	0x0801c9e4
 80132b4:	0801cfd0 	.word	0x0801cfd0
 80132b8:	0801ca28 	.word	0x0801ca28

080132bc <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 80132bc:	b480      	push	{r7}
 80132be:	b085      	sub	sp, #20
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
 80132c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d008      	beq.n	80132de <tcp_accept+0x22>
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	7d1b      	ldrb	r3, [r3, #20]
 80132d0:	2b01      	cmp	r3, #1
 80132d2:	d104      	bne.n	80132de <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	683a      	ldr	r2, [r7, #0]
 80132dc:	619a      	str	r2, [r3, #24]
  }
}
 80132de:	bf00      	nop
 80132e0:	3714      	adds	r7, #20
 80132e2:	46bd      	mov	sp, r7
 80132e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e8:	4770      	bx	lr
	...

080132ec <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b084      	sub	sp, #16
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	4613      	mov	r3, r2
 80132f8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d107      	bne.n	8013310 <tcp_poll+0x24>
 8013300:	4b0e      	ldr	r3, [pc, #56]	; (801333c <tcp_poll+0x50>)
 8013302:	f640 023d 	movw	r2, #2109	; 0x83d
 8013306:	490e      	ldr	r1, [pc, #56]	; (8013340 <tcp_poll+0x54>)
 8013308:	480e      	ldr	r0, [pc, #56]	; (8013344 <tcp_poll+0x58>)
 801330a:	f007 fd37 	bl	801ad7c <iprintf>
 801330e:	e011      	b.n	8013334 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	7d1b      	ldrb	r3, [r3, #20]
 8013314:	2b01      	cmp	r3, #1
 8013316:	d106      	bne.n	8013326 <tcp_poll+0x3a>
 8013318:	4b08      	ldr	r3, [pc, #32]	; (801333c <tcp_poll+0x50>)
 801331a:	f640 023e 	movw	r2, #2110	; 0x83e
 801331e:	490a      	ldr	r1, [pc, #40]	; (8013348 <tcp_poll+0x5c>)
 8013320:	4808      	ldr	r0, [pc, #32]	; (8013344 <tcp_poll+0x58>)
 8013322:	f007 fd2b 	bl	801ad7c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	68ba      	ldr	r2, [r7, #8]
 801332a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	79fa      	ldrb	r2, [r7, #7]
 8013332:	775a      	strb	r2, [r3, #29]
}
 8013334:	3710      	adds	r7, #16
 8013336:	46bd      	mov	sp, r7
 8013338:	bd80      	pop	{r7, pc}
 801333a:	bf00      	nop
 801333c:	0801c9e4 	.word	0x0801c9e4
 8013340:	0801cff8 	.word	0x0801cff8
 8013344:	0801ca28 	.word	0x0801ca28
 8013348:	0801d010 	.word	0x0801d010

0801334c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801334c:	b580      	push	{r7, lr}
 801334e:	b082      	sub	sp, #8
 8013350:	af00      	add	r7, sp, #0
 8013352:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d107      	bne.n	801336a <tcp_pcb_purge+0x1e>
 801335a:	4b21      	ldr	r3, [pc, #132]	; (80133e0 <tcp_pcb_purge+0x94>)
 801335c:	f640 0251 	movw	r2, #2129	; 0x851
 8013360:	4920      	ldr	r1, [pc, #128]	; (80133e4 <tcp_pcb_purge+0x98>)
 8013362:	4821      	ldr	r0, [pc, #132]	; (80133e8 <tcp_pcb_purge+0x9c>)
 8013364:	f007 fd0a 	bl	801ad7c <iprintf>
 8013368:	e037      	b.n	80133da <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	7d1b      	ldrb	r3, [r3, #20]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d033      	beq.n	80133da <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013376:	2b0a      	cmp	r3, #10
 8013378:	d02f      	beq.n	80133da <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801337e:	2b01      	cmp	r3, #1
 8013380:	d02b      	beq.n	80133da <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013386:	2b00      	cmp	r3, #0
 8013388:	d007      	beq.n	801339a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801338e:	4618      	mov	r0, r3
 8013390:	f7fe f8c0 	bl	8011514 <pbuf_free>
      pcb->refused_data = NULL;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	2200      	movs	r2, #0
 8013398:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d002      	beq.n	80133a8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80133a2:	6878      	ldr	r0, [r7, #4]
 80133a4:	f000 f986 	bl	80136b4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133ae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7ff fce1 	bl	8012d7c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133be:	4618      	mov	r0, r3
 80133c0:	f7ff fcdc 	bl	8012d7c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	66da      	str	r2, [r3, #108]	; 0x6c
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	2200      	movs	r2, #0
 80133d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80133da:	3708      	adds	r7, #8
 80133dc:	46bd      	mov	sp, r7
 80133de:	bd80      	pop	{r7, pc}
 80133e0:	0801c9e4 	.word	0x0801c9e4
 80133e4:	0801d030 	.word	0x0801d030
 80133e8:	0801ca28 	.word	0x0801ca28

080133ec <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80133ec:	b580      	push	{r7, lr}
 80133ee:	b084      	sub	sp, #16
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	6078      	str	r0, [r7, #4]
 80133f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d106      	bne.n	801340a <tcp_pcb_remove+0x1e>
 80133fc:	4b3e      	ldr	r3, [pc, #248]	; (80134f8 <tcp_pcb_remove+0x10c>)
 80133fe:	f640 0283 	movw	r2, #2179	; 0x883
 8013402:	493e      	ldr	r1, [pc, #248]	; (80134fc <tcp_pcb_remove+0x110>)
 8013404:	483e      	ldr	r0, [pc, #248]	; (8013500 <tcp_pcb_remove+0x114>)
 8013406:	f007 fcb9 	bl	801ad7c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d106      	bne.n	801341e <tcp_pcb_remove+0x32>
 8013410:	4b39      	ldr	r3, [pc, #228]	; (80134f8 <tcp_pcb_remove+0x10c>)
 8013412:	f640 0284 	movw	r2, #2180	; 0x884
 8013416:	493b      	ldr	r1, [pc, #236]	; (8013504 <tcp_pcb_remove+0x118>)
 8013418:	4839      	ldr	r0, [pc, #228]	; (8013500 <tcp_pcb_remove+0x114>)
 801341a:	f007 fcaf 	bl	801ad7c <iprintf>

  TCP_RMV(pcblist, pcb);
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	683a      	ldr	r2, [r7, #0]
 8013424:	429a      	cmp	r2, r3
 8013426:	d105      	bne.n	8013434 <tcp_pcb_remove+0x48>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	68da      	ldr	r2, [r3, #12]
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	601a      	str	r2, [r3, #0]
 8013432:	e013      	b.n	801345c <tcp_pcb_remove+0x70>
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	681b      	ldr	r3, [r3, #0]
 8013438:	60fb      	str	r3, [r7, #12]
 801343a:	e00c      	b.n	8013456 <tcp_pcb_remove+0x6a>
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	68db      	ldr	r3, [r3, #12]
 8013440:	683a      	ldr	r2, [r7, #0]
 8013442:	429a      	cmp	r2, r3
 8013444:	d104      	bne.n	8013450 <tcp_pcb_remove+0x64>
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	68da      	ldr	r2, [r3, #12]
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	60da      	str	r2, [r3, #12]
 801344e:	e005      	b.n	801345c <tcp_pcb_remove+0x70>
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	60fb      	str	r3, [r7, #12]
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d1ef      	bne.n	801343c <tcp_pcb_remove+0x50>
 801345c:	683b      	ldr	r3, [r7, #0]
 801345e:	2200      	movs	r2, #0
 8013460:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013462:	6838      	ldr	r0, [r7, #0]
 8013464:	f7ff ff72 	bl	801334c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	7d1b      	ldrb	r3, [r3, #20]
 801346c:	2b0a      	cmp	r3, #10
 801346e:	d013      	beq.n	8013498 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013470:	683b      	ldr	r3, [r7, #0]
 8013472:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013474:	2b01      	cmp	r3, #1
 8013476:	d00f      	beq.n	8013498 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	8b5b      	ldrh	r3, [r3, #26]
 801347c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013480:	2b00      	cmp	r3, #0
 8013482:	d009      	beq.n	8013498 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	8b5b      	ldrh	r3, [r3, #26]
 8013488:	f043 0302 	orr.w	r3, r3, #2
 801348c:	b29a      	uxth	r2, r3
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013492:	6838      	ldr	r0, [r7, #0]
 8013494:	f003 fbc2 	bl	8016c1c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	7d1b      	ldrb	r3, [r3, #20]
 801349c:	2b01      	cmp	r3, #1
 801349e:	d020      	beq.n	80134e2 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d006      	beq.n	80134b6 <tcp_pcb_remove+0xca>
 80134a8:	4b13      	ldr	r3, [pc, #76]	; (80134f8 <tcp_pcb_remove+0x10c>)
 80134aa:	f640 0293 	movw	r2, #2195	; 0x893
 80134ae:	4916      	ldr	r1, [pc, #88]	; (8013508 <tcp_pcb_remove+0x11c>)
 80134b0:	4813      	ldr	r0, [pc, #76]	; (8013500 <tcp_pcb_remove+0x114>)
 80134b2:	f007 fc63 	bl	801ad7c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80134b6:	683b      	ldr	r3, [r7, #0]
 80134b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134ba:	2b00      	cmp	r3, #0
 80134bc:	d006      	beq.n	80134cc <tcp_pcb_remove+0xe0>
 80134be:	4b0e      	ldr	r3, [pc, #56]	; (80134f8 <tcp_pcb_remove+0x10c>)
 80134c0:	f640 0294 	movw	r2, #2196	; 0x894
 80134c4:	4911      	ldr	r1, [pc, #68]	; (801350c <tcp_pcb_remove+0x120>)
 80134c6:	480e      	ldr	r0, [pc, #56]	; (8013500 <tcp_pcb_remove+0x114>)
 80134c8:	f007 fc58 	bl	801ad7c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d006      	beq.n	80134e2 <tcp_pcb_remove+0xf6>
 80134d4:	4b08      	ldr	r3, [pc, #32]	; (80134f8 <tcp_pcb_remove+0x10c>)
 80134d6:	f640 0296 	movw	r2, #2198	; 0x896
 80134da:	490d      	ldr	r1, [pc, #52]	; (8013510 <tcp_pcb_remove+0x124>)
 80134dc:	4808      	ldr	r0, [pc, #32]	; (8013500 <tcp_pcb_remove+0x114>)
 80134de:	f007 fc4d 	bl	801ad7c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80134e2:	683b      	ldr	r3, [r7, #0]
 80134e4:	2200      	movs	r2, #0
 80134e6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	2200      	movs	r2, #0
 80134ec:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80134ee:	bf00      	nop
 80134f0:	3710      	adds	r7, #16
 80134f2:	46bd      	mov	sp, r7
 80134f4:	bd80      	pop	{r7, pc}
 80134f6:	bf00      	nop
 80134f8:	0801c9e4 	.word	0x0801c9e4
 80134fc:	0801d04c 	.word	0x0801d04c
 8013500:	0801ca28 	.word	0x0801ca28
 8013504:	0801d068 	.word	0x0801d068
 8013508:	0801d088 	.word	0x0801d088
 801350c:	0801d0a0 	.word	0x0801d0a0
 8013510:	0801d0bc 	.word	0x0801d0bc

08013514 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013514:	b580      	push	{r7, lr}
 8013516:	b082      	sub	sp, #8
 8013518:	af00      	add	r7, sp, #0
 801351a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d106      	bne.n	8013530 <tcp_next_iss+0x1c>
 8013522:	4b0a      	ldr	r3, [pc, #40]	; (801354c <tcp_next_iss+0x38>)
 8013524:	f640 02af 	movw	r2, #2223	; 0x8af
 8013528:	4909      	ldr	r1, [pc, #36]	; (8013550 <tcp_next_iss+0x3c>)
 801352a:	480a      	ldr	r0, [pc, #40]	; (8013554 <tcp_next_iss+0x40>)
 801352c:	f007 fc26 	bl	801ad7c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013530:	4b09      	ldr	r3, [pc, #36]	; (8013558 <tcp_next_iss+0x44>)
 8013532:	681a      	ldr	r2, [r3, #0]
 8013534:	4b09      	ldr	r3, [pc, #36]	; (801355c <tcp_next_iss+0x48>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	4413      	add	r3, r2
 801353a:	4a07      	ldr	r2, [pc, #28]	; (8013558 <tcp_next_iss+0x44>)
 801353c:	6013      	str	r3, [r2, #0]
  return iss;
 801353e:	4b06      	ldr	r3, [pc, #24]	; (8013558 <tcp_next_iss+0x44>)
 8013540:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013542:	4618      	mov	r0, r3
 8013544:	3708      	adds	r7, #8
 8013546:	46bd      	mov	sp, r7
 8013548:	bd80      	pop	{r7, pc}
 801354a:	bf00      	nop
 801354c:	0801c9e4 	.word	0x0801c9e4
 8013550:	0801d0d4 	.word	0x0801d0d4
 8013554:	0801ca28 	.word	0x0801ca28
 8013558:	24000034 	.word	0x24000034
 801355c:	24008274 	.word	0x24008274

08013560 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b086      	sub	sp, #24
 8013564:	af00      	add	r7, sp, #0
 8013566:	4603      	mov	r3, r0
 8013568:	60b9      	str	r1, [r7, #8]
 801356a:	607a      	str	r2, [r7, #4]
 801356c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d106      	bne.n	8013582 <tcp_eff_send_mss_netif+0x22>
 8013574:	4b14      	ldr	r3, [pc, #80]	; (80135c8 <tcp_eff_send_mss_netif+0x68>)
 8013576:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801357a:	4914      	ldr	r1, [pc, #80]	; (80135cc <tcp_eff_send_mss_netif+0x6c>)
 801357c:	4814      	ldr	r0, [pc, #80]	; (80135d0 <tcp_eff_send_mss_netif+0x70>)
 801357e:	f007 fbfd 	bl	801ad7c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013582:	68bb      	ldr	r3, [r7, #8]
 8013584:	2b00      	cmp	r3, #0
 8013586:	d101      	bne.n	801358c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013588:	89fb      	ldrh	r3, [r7, #14]
 801358a:	e019      	b.n	80135c0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801358c:	68bb      	ldr	r3, [r7, #8]
 801358e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013590:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013592:	8afb      	ldrh	r3, [r7, #22]
 8013594:	2b00      	cmp	r3, #0
 8013596:	d012      	beq.n	80135be <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013598:	2328      	movs	r3, #40	; 0x28
 801359a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801359c:	8afa      	ldrh	r2, [r7, #22]
 801359e:	8abb      	ldrh	r3, [r7, #20]
 80135a0:	429a      	cmp	r2, r3
 80135a2:	d904      	bls.n	80135ae <tcp_eff_send_mss_netif+0x4e>
 80135a4:	8afa      	ldrh	r2, [r7, #22]
 80135a6:	8abb      	ldrh	r3, [r7, #20]
 80135a8:	1ad3      	subs	r3, r2, r3
 80135aa:	b29b      	uxth	r3, r3
 80135ac:	e000      	b.n	80135b0 <tcp_eff_send_mss_netif+0x50>
 80135ae:	2300      	movs	r3, #0
 80135b0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80135b2:	8a7a      	ldrh	r2, [r7, #18]
 80135b4:	89fb      	ldrh	r3, [r7, #14]
 80135b6:	4293      	cmp	r3, r2
 80135b8:	bf28      	it	cs
 80135ba:	4613      	movcs	r3, r2
 80135bc:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80135be:	89fb      	ldrh	r3, [r7, #14]
}
 80135c0:	4618      	mov	r0, r3
 80135c2:	3718      	adds	r7, #24
 80135c4:	46bd      	mov	sp, r7
 80135c6:	bd80      	pop	{r7, pc}
 80135c8:	0801c9e4 	.word	0x0801c9e4
 80135cc:	0801d0f0 	.word	0x0801d0f0
 80135d0:	0801ca28 	.word	0x0801ca28

080135d4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80135d4:	b580      	push	{r7, lr}
 80135d6:	b084      	sub	sp, #16
 80135d8:	af00      	add	r7, sp, #0
 80135da:	6078      	str	r0, [r7, #4]
 80135dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80135de:	683b      	ldr	r3, [r7, #0]
 80135e0:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d119      	bne.n	801361c <tcp_netif_ip_addr_changed_pcblist+0x48>
 80135e8:	4b10      	ldr	r3, [pc, #64]	; (801362c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80135ea:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80135ee:	4910      	ldr	r1, [pc, #64]	; (8013630 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80135f0:	4810      	ldr	r0, [pc, #64]	; (8013634 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80135f2:	f007 fbc3 	bl	801ad7c <iprintf>

  while (pcb != NULL) {
 80135f6:	e011      	b.n	801361c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	681a      	ldr	r2, [r3, #0]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	429a      	cmp	r2, r3
 8013602:	d108      	bne.n	8013616 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	68db      	ldr	r3, [r3, #12]
 8013608:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f7fe fd26 	bl	801205c <tcp_abort>
      pcb = next;
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	60fb      	str	r3, [r7, #12]
 8013614:	e002      	b.n	801361c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d1ea      	bne.n	80135f8 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013622:	bf00      	nop
 8013624:	bf00      	nop
 8013626:	3710      	adds	r7, #16
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	0801c9e4 	.word	0x0801c9e4
 8013630:	0801d118 	.word	0x0801d118
 8013634:	0801ca28 	.word	0x0801ca28

08013638 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b084      	sub	sp, #16
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
 8013640:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d02a      	beq.n	801369e <tcp_netif_ip_addr_changed+0x66>
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d026      	beq.n	801369e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013650:	4b15      	ldr	r3, [pc, #84]	; (80136a8 <tcp_netif_ip_addr_changed+0x70>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	4619      	mov	r1, r3
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff ffbc 	bl	80135d4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801365c:	4b13      	ldr	r3, [pc, #76]	; (80136ac <tcp_netif_ip_addr_changed+0x74>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	4619      	mov	r1, r3
 8013662:	6878      	ldr	r0, [r7, #4]
 8013664:	f7ff ffb6 	bl	80135d4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013668:	683b      	ldr	r3, [r7, #0]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d017      	beq.n	801369e <tcp_netif_ip_addr_changed+0x66>
 801366e:	683b      	ldr	r3, [r7, #0]
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d013      	beq.n	801369e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013676:	4b0e      	ldr	r3, [pc, #56]	; (80136b0 <tcp_netif_ip_addr_changed+0x78>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	60fb      	str	r3, [r7, #12]
 801367c:	e00c      	b.n	8013698 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	687b      	ldr	r3, [r7, #4]
 8013684:	681b      	ldr	r3, [r3, #0]
 8013686:	429a      	cmp	r2, r3
 8013688:	d103      	bne.n	8013692 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	60fb      	str	r3, [r7, #12]
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d1ef      	bne.n	801367e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801369e:	bf00      	nop
 80136a0:	3710      	adds	r7, #16
 80136a2:	46bd      	mov	sp, r7
 80136a4:	bd80      	pop	{r7, pc}
 80136a6:	bf00      	nop
 80136a8:	24008270 	.word	0x24008270
 80136ac:	2400827c 	.word	0x2400827c
 80136b0:	24008278 	.word	0x24008278

080136b4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80136b4:	b580      	push	{r7, lr}
 80136b6:	b082      	sub	sp, #8
 80136b8:	af00      	add	r7, sp, #0
 80136ba:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80136bc:	687b      	ldr	r3, [r7, #4]
 80136be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d007      	beq.n	80136d4 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136c8:	4618      	mov	r0, r3
 80136ca:	f7ff fb57 	bl	8012d7c <tcp_segs_free>
    pcb->ooseq = NULL;
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	2200      	movs	r2, #0
 80136d2:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80136d4:	bf00      	nop
 80136d6:	3708      	adds	r7, #8
 80136d8:	46bd      	mov	sp, r7
 80136da:	bd80      	pop	{r7, pc}

080136dc <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80136dc:	b590      	push	{r4, r7, lr}
 80136de:	b08d      	sub	sp, #52	; 0x34
 80136e0:	af04      	add	r7, sp, #16
 80136e2:	6078      	str	r0, [r7, #4]
 80136e4:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d105      	bne.n	80136f8 <tcp_input+0x1c>
 80136ec:	4b9b      	ldr	r3, [pc, #620]	; (801395c <tcp_input+0x280>)
 80136ee:	2283      	movs	r2, #131	; 0x83
 80136f0:	499b      	ldr	r1, [pc, #620]	; (8013960 <tcp_input+0x284>)
 80136f2:	489c      	ldr	r0, [pc, #624]	; (8013964 <tcp_input+0x288>)
 80136f4:	f007 fb42 	bl	801ad7c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	4a9a      	ldr	r2, [pc, #616]	; (8013968 <tcp_input+0x28c>)
 80136fe:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	895b      	ldrh	r3, [r3, #10]
 8013704:	2b13      	cmp	r3, #19
 8013706:	f240 83c4 	bls.w	8013e92 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801370a:	4b98      	ldr	r3, [pc, #608]	; (801396c <tcp_input+0x290>)
 801370c:	695b      	ldr	r3, [r3, #20]
 801370e:	4a97      	ldr	r2, [pc, #604]	; (801396c <tcp_input+0x290>)
 8013710:	6812      	ldr	r2, [r2, #0]
 8013712:	4611      	mov	r1, r2
 8013714:	4618      	mov	r0, r3
 8013716:	f006 f8c1 	bl	801989c <ip4_addr_isbroadcast_u32>
 801371a:	4603      	mov	r3, r0
 801371c:	2b00      	cmp	r3, #0
 801371e:	f040 83ba 	bne.w	8013e96 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013722:	4b92      	ldr	r3, [pc, #584]	; (801396c <tcp_input+0x290>)
 8013724:	695b      	ldr	r3, [r3, #20]
 8013726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801372a:	2be0      	cmp	r3, #224	; 0xe0
 801372c:	f000 83b3 	beq.w	8013e96 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013730:	4b8d      	ldr	r3, [pc, #564]	; (8013968 <tcp_input+0x28c>)
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	899b      	ldrh	r3, [r3, #12]
 8013736:	b29b      	uxth	r3, r3
 8013738:	4618      	mov	r0, r3
 801373a:	f7fc fa41 	bl	800fbc0 <lwip_htons>
 801373e:	4603      	mov	r3, r0
 8013740:	0b1b      	lsrs	r3, r3, #12
 8013742:	b29b      	uxth	r3, r3
 8013744:	b2db      	uxtb	r3, r3
 8013746:	009b      	lsls	r3, r3, #2
 8013748:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801374a:	7cbb      	ldrb	r3, [r7, #18]
 801374c:	2b13      	cmp	r3, #19
 801374e:	f240 83a4 	bls.w	8013e9a <tcp_input+0x7be>
 8013752:	7cbb      	ldrb	r3, [r7, #18]
 8013754:	b29a      	uxth	r2, r3
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	891b      	ldrh	r3, [r3, #8]
 801375a:	429a      	cmp	r2, r3
 801375c:	f200 839d 	bhi.w	8013e9a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013760:	7cbb      	ldrb	r3, [r7, #18]
 8013762:	b29b      	uxth	r3, r3
 8013764:	3b14      	subs	r3, #20
 8013766:	b29a      	uxth	r2, r3
 8013768:	4b81      	ldr	r3, [pc, #516]	; (8013970 <tcp_input+0x294>)
 801376a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801376c:	4b81      	ldr	r3, [pc, #516]	; (8013974 <tcp_input+0x298>)
 801376e:	2200      	movs	r2, #0
 8013770:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	895a      	ldrh	r2, [r3, #10]
 8013776:	7cbb      	ldrb	r3, [r7, #18]
 8013778:	b29b      	uxth	r3, r3
 801377a:	429a      	cmp	r2, r3
 801377c:	d309      	bcc.n	8013792 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801377e:	4b7c      	ldr	r3, [pc, #496]	; (8013970 <tcp_input+0x294>)
 8013780:	881a      	ldrh	r2, [r3, #0]
 8013782:	4b7d      	ldr	r3, [pc, #500]	; (8013978 <tcp_input+0x29c>)
 8013784:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013786:	7cbb      	ldrb	r3, [r7, #18]
 8013788:	4619      	mov	r1, r3
 801378a:	6878      	ldr	r0, [r7, #4]
 801378c:	f7fd fe3c 	bl	8011408 <pbuf_remove_header>
 8013790:	e04e      	b.n	8013830 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d105      	bne.n	80137a6 <tcp_input+0xca>
 801379a:	4b70      	ldr	r3, [pc, #448]	; (801395c <tcp_input+0x280>)
 801379c:	22c2      	movs	r2, #194	; 0xc2
 801379e:	4977      	ldr	r1, [pc, #476]	; (801397c <tcp_input+0x2a0>)
 80137a0:	4870      	ldr	r0, [pc, #448]	; (8013964 <tcp_input+0x288>)
 80137a2:	f007 faeb 	bl	801ad7c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80137a6:	2114      	movs	r1, #20
 80137a8:	6878      	ldr	r0, [r7, #4]
 80137aa:	f7fd fe2d 	bl	8011408 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	895a      	ldrh	r2, [r3, #10]
 80137b2:	4b71      	ldr	r3, [pc, #452]	; (8013978 <tcp_input+0x29c>)
 80137b4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80137b6:	4b6e      	ldr	r3, [pc, #440]	; (8013970 <tcp_input+0x294>)
 80137b8:	881a      	ldrh	r2, [r3, #0]
 80137ba:	4b6f      	ldr	r3, [pc, #444]	; (8013978 <tcp_input+0x29c>)
 80137bc:	881b      	ldrh	r3, [r3, #0]
 80137be:	1ad3      	subs	r3, r2, r3
 80137c0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80137c2:	4b6d      	ldr	r3, [pc, #436]	; (8013978 <tcp_input+0x29c>)
 80137c4:	881b      	ldrh	r3, [r3, #0]
 80137c6:	4619      	mov	r1, r3
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f7fd fe1d 	bl	8011408 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	681b      	ldr	r3, [r3, #0]
 80137d2:	895b      	ldrh	r3, [r3, #10]
 80137d4:	8a3a      	ldrh	r2, [r7, #16]
 80137d6:	429a      	cmp	r2, r3
 80137d8:	f200 8361 	bhi.w	8013e9e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	685b      	ldr	r3, [r3, #4]
 80137e2:	4a64      	ldr	r2, [pc, #400]	; (8013974 <tcp_input+0x298>)
 80137e4:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	8a3a      	ldrh	r2, [r7, #16]
 80137ec:	4611      	mov	r1, r2
 80137ee:	4618      	mov	r0, r3
 80137f0:	f7fd fe0a 	bl	8011408 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	891a      	ldrh	r2, [r3, #8]
 80137f8:	8a3b      	ldrh	r3, [r7, #16]
 80137fa:	1ad3      	subs	r3, r2, r3
 80137fc:	b29a      	uxth	r2, r3
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	895b      	ldrh	r3, [r3, #10]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d005      	beq.n	8013816 <tcp_input+0x13a>
 801380a:	4b54      	ldr	r3, [pc, #336]	; (801395c <tcp_input+0x280>)
 801380c:	22df      	movs	r2, #223	; 0xdf
 801380e:	495c      	ldr	r1, [pc, #368]	; (8013980 <tcp_input+0x2a4>)
 8013810:	4854      	ldr	r0, [pc, #336]	; (8013964 <tcp_input+0x288>)
 8013812:	f007 fab3 	bl	801ad7c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	891a      	ldrh	r2, [r3, #8]
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	891b      	ldrh	r3, [r3, #8]
 8013820:	429a      	cmp	r2, r3
 8013822:	d005      	beq.n	8013830 <tcp_input+0x154>
 8013824:	4b4d      	ldr	r3, [pc, #308]	; (801395c <tcp_input+0x280>)
 8013826:	22e0      	movs	r2, #224	; 0xe0
 8013828:	4956      	ldr	r1, [pc, #344]	; (8013984 <tcp_input+0x2a8>)
 801382a:	484e      	ldr	r0, [pc, #312]	; (8013964 <tcp_input+0x288>)
 801382c:	f007 faa6 	bl	801ad7c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013830:	4b4d      	ldr	r3, [pc, #308]	; (8013968 <tcp_input+0x28c>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	881b      	ldrh	r3, [r3, #0]
 8013836:	b29b      	uxth	r3, r3
 8013838:	4a4b      	ldr	r2, [pc, #300]	; (8013968 <tcp_input+0x28c>)
 801383a:	6814      	ldr	r4, [r2, #0]
 801383c:	4618      	mov	r0, r3
 801383e:	f7fc f9bf 	bl	800fbc0 <lwip_htons>
 8013842:	4603      	mov	r3, r0
 8013844:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013846:	4b48      	ldr	r3, [pc, #288]	; (8013968 <tcp_input+0x28c>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	885b      	ldrh	r3, [r3, #2]
 801384c:	b29b      	uxth	r3, r3
 801384e:	4a46      	ldr	r2, [pc, #280]	; (8013968 <tcp_input+0x28c>)
 8013850:	6814      	ldr	r4, [r2, #0]
 8013852:	4618      	mov	r0, r3
 8013854:	f7fc f9b4 	bl	800fbc0 <lwip_htons>
 8013858:	4603      	mov	r3, r0
 801385a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801385c:	4b42      	ldr	r3, [pc, #264]	; (8013968 <tcp_input+0x28c>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	685b      	ldr	r3, [r3, #4]
 8013862:	4a41      	ldr	r2, [pc, #260]	; (8013968 <tcp_input+0x28c>)
 8013864:	6814      	ldr	r4, [r2, #0]
 8013866:	4618      	mov	r0, r3
 8013868:	f7fc f9bf 	bl	800fbea <lwip_htonl>
 801386c:	4603      	mov	r3, r0
 801386e:	6063      	str	r3, [r4, #4]
 8013870:	6863      	ldr	r3, [r4, #4]
 8013872:	4a45      	ldr	r2, [pc, #276]	; (8013988 <tcp_input+0x2ac>)
 8013874:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8013876:	4b3c      	ldr	r3, [pc, #240]	; (8013968 <tcp_input+0x28c>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	689b      	ldr	r3, [r3, #8]
 801387c:	4a3a      	ldr	r2, [pc, #232]	; (8013968 <tcp_input+0x28c>)
 801387e:	6814      	ldr	r4, [r2, #0]
 8013880:	4618      	mov	r0, r3
 8013882:	f7fc f9b2 	bl	800fbea <lwip_htonl>
 8013886:	4603      	mov	r3, r0
 8013888:	60a3      	str	r3, [r4, #8]
 801388a:	68a3      	ldr	r3, [r4, #8]
 801388c:	4a3f      	ldr	r2, [pc, #252]	; (801398c <tcp_input+0x2b0>)
 801388e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013890:	4b35      	ldr	r3, [pc, #212]	; (8013968 <tcp_input+0x28c>)
 8013892:	681b      	ldr	r3, [r3, #0]
 8013894:	89db      	ldrh	r3, [r3, #14]
 8013896:	b29b      	uxth	r3, r3
 8013898:	4a33      	ldr	r2, [pc, #204]	; (8013968 <tcp_input+0x28c>)
 801389a:	6814      	ldr	r4, [r2, #0]
 801389c:	4618      	mov	r0, r3
 801389e:	f7fc f98f 	bl	800fbc0 <lwip_htons>
 80138a2:	4603      	mov	r3, r0
 80138a4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80138a6:	4b30      	ldr	r3, [pc, #192]	; (8013968 <tcp_input+0x28c>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	899b      	ldrh	r3, [r3, #12]
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7fc f986 	bl	800fbc0 <lwip_htons>
 80138b4:	4603      	mov	r3, r0
 80138b6:	b2db      	uxtb	r3, r3
 80138b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138bc:	b2da      	uxtb	r2, r3
 80138be:	4b34      	ldr	r3, [pc, #208]	; (8013990 <tcp_input+0x2b4>)
 80138c0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	891a      	ldrh	r2, [r3, #8]
 80138c6:	4b33      	ldr	r3, [pc, #204]	; (8013994 <tcp_input+0x2b8>)
 80138c8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80138ca:	4b31      	ldr	r3, [pc, #196]	; (8013990 <tcp_input+0x2b4>)
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	f003 0303 	and.w	r3, r3, #3
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d00c      	beq.n	80138f0 <tcp_input+0x214>
    tcplen++;
 80138d6:	4b2f      	ldr	r3, [pc, #188]	; (8013994 <tcp_input+0x2b8>)
 80138d8:	881b      	ldrh	r3, [r3, #0]
 80138da:	3301      	adds	r3, #1
 80138dc:	b29a      	uxth	r2, r3
 80138de:	4b2d      	ldr	r3, [pc, #180]	; (8013994 <tcp_input+0x2b8>)
 80138e0:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	891a      	ldrh	r2, [r3, #8]
 80138e6:	4b2b      	ldr	r3, [pc, #172]	; (8013994 <tcp_input+0x2b8>)
 80138e8:	881b      	ldrh	r3, [r3, #0]
 80138ea:	429a      	cmp	r2, r3
 80138ec:	f200 82d9 	bhi.w	8013ea2 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80138f0:	2300      	movs	r3, #0
 80138f2:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138f4:	4b28      	ldr	r3, [pc, #160]	; (8013998 <tcp_input+0x2bc>)
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	61fb      	str	r3, [r7, #28]
 80138fa:	e09d      	b.n	8013a38 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	7d1b      	ldrb	r3, [r3, #20]
 8013900:	2b00      	cmp	r3, #0
 8013902:	d105      	bne.n	8013910 <tcp_input+0x234>
 8013904:	4b15      	ldr	r3, [pc, #84]	; (801395c <tcp_input+0x280>)
 8013906:	22fb      	movs	r2, #251	; 0xfb
 8013908:	4924      	ldr	r1, [pc, #144]	; (801399c <tcp_input+0x2c0>)
 801390a:	4816      	ldr	r0, [pc, #88]	; (8013964 <tcp_input+0x288>)
 801390c:	f007 fa36 	bl	801ad7c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013910:	69fb      	ldr	r3, [r7, #28]
 8013912:	7d1b      	ldrb	r3, [r3, #20]
 8013914:	2b0a      	cmp	r3, #10
 8013916:	d105      	bne.n	8013924 <tcp_input+0x248>
 8013918:	4b10      	ldr	r3, [pc, #64]	; (801395c <tcp_input+0x280>)
 801391a:	22fc      	movs	r2, #252	; 0xfc
 801391c:	4920      	ldr	r1, [pc, #128]	; (80139a0 <tcp_input+0x2c4>)
 801391e:	4811      	ldr	r0, [pc, #68]	; (8013964 <tcp_input+0x288>)
 8013920:	f007 fa2c 	bl	801ad7c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013924:	69fb      	ldr	r3, [r7, #28]
 8013926:	7d1b      	ldrb	r3, [r3, #20]
 8013928:	2b01      	cmp	r3, #1
 801392a:	d105      	bne.n	8013938 <tcp_input+0x25c>
 801392c:	4b0b      	ldr	r3, [pc, #44]	; (801395c <tcp_input+0x280>)
 801392e:	22fd      	movs	r2, #253	; 0xfd
 8013930:	491c      	ldr	r1, [pc, #112]	; (80139a4 <tcp_input+0x2c8>)
 8013932:	480c      	ldr	r0, [pc, #48]	; (8013964 <tcp_input+0x288>)
 8013934:	f007 fa22 	bl	801ad7c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	7a1b      	ldrb	r3, [r3, #8]
 801393c:	2b00      	cmp	r3, #0
 801393e:	d033      	beq.n	80139a8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	7a1a      	ldrb	r2, [r3, #8]
 8013944:	4b09      	ldr	r3, [pc, #36]	; (801396c <tcp_input+0x290>)
 8013946:	685b      	ldr	r3, [r3, #4]
 8013948:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801394c:	3301      	adds	r3, #1
 801394e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013950:	429a      	cmp	r2, r3
 8013952:	d029      	beq.n	80139a8 <tcp_input+0x2cc>
      prev = pcb;
 8013954:	69fb      	ldr	r3, [r7, #28]
 8013956:	61bb      	str	r3, [r7, #24]
      continue;
 8013958:	e06b      	b.n	8013a32 <tcp_input+0x356>
 801395a:	bf00      	nop
 801395c:	0801d14c 	.word	0x0801d14c
 8013960:	0801d180 	.word	0x0801d180
 8013964:	0801d198 	.word	0x0801d198
 8013968:	24004b0c 	.word	0x24004b0c
 801396c:	240051b0 	.word	0x240051b0
 8013970:	24004b10 	.word	0x24004b10
 8013974:	24004b14 	.word	0x24004b14
 8013978:	24004b12 	.word	0x24004b12
 801397c:	0801d1c0 	.word	0x0801d1c0
 8013980:	0801d1d0 	.word	0x0801d1d0
 8013984:	0801d1dc 	.word	0x0801d1dc
 8013988:	24004b1c 	.word	0x24004b1c
 801398c:	24004b20 	.word	0x24004b20
 8013990:	24004b28 	.word	0x24004b28
 8013994:	24004b26 	.word	0x24004b26
 8013998:	24008270 	.word	0x24008270
 801399c:	0801d1fc 	.word	0x0801d1fc
 80139a0:	0801d224 	.word	0x0801d224
 80139a4:	0801d250 	.word	0x0801d250
    }

    if (pcb->remote_port == tcphdr->src &&
 80139a8:	69fb      	ldr	r3, [r7, #28]
 80139aa:	8b1a      	ldrh	r2, [r3, #24]
 80139ac:	4b94      	ldr	r3, [pc, #592]	; (8013c00 <tcp_input+0x524>)
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	881b      	ldrh	r3, [r3, #0]
 80139b2:	b29b      	uxth	r3, r3
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d13a      	bne.n	8013a2e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80139b8:	69fb      	ldr	r3, [r7, #28]
 80139ba:	8ada      	ldrh	r2, [r3, #22]
 80139bc:	4b90      	ldr	r3, [pc, #576]	; (8013c00 <tcp_input+0x524>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	885b      	ldrh	r3, [r3, #2]
 80139c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80139c4:	429a      	cmp	r2, r3
 80139c6:	d132      	bne.n	8013a2e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	685a      	ldr	r2, [r3, #4]
 80139cc:	4b8d      	ldr	r3, [pc, #564]	; (8013c04 <tcp_input+0x528>)
 80139ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d12c      	bne.n	8013a2e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80139d4:	69fb      	ldr	r3, [r7, #28]
 80139d6:	681a      	ldr	r2, [r3, #0]
 80139d8:	4b8a      	ldr	r3, [pc, #552]	; (8013c04 <tcp_input+0x528>)
 80139da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139dc:	429a      	cmp	r2, r3
 80139de:	d126      	bne.n	8013a2e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	68db      	ldr	r3, [r3, #12]
 80139e4:	69fa      	ldr	r2, [r7, #28]
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d106      	bne.n	80139f8 <tcp_input+0x31c>
 80139ea:	4b87      	ldr	r3, [pc, #540]	; (8013c08 <tcp_input+0x52c>)
 80139ec:	f240 120d 	movw	r2, #269	; 0x10d
 80139f0:	4986      	ldr	r1, [pc, #536]	; (8013c0c <tcp_input+0x530>)
 80139f2:	4887      	ldr	r0, [pc, #540]	; (8013c10 <tcp_input+0x534>)
 80139f4:	f007 f9c2 	bl	801ad7c <iprintf>
      if (prev != NULL) {
 80139f8:	69bb      	ldr	r3, [r7, #24]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d00a      	beq.n	8013a14 <tcp_input+0x338>
        prev->next = pcb->next;
 80139fe:	69fb      	ldr	r3, [r7, #28]
 8013a00:	68da      	ldr	r2, [r3, #12]
 8013a02:	69bb      	ldr	r3, [r7, #24]
 8013a04:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013a06:	4b83      	ldr	r3, [pc, #524]	; (8013c14 <tcp_input+0x538>)
 8013a08:	681a      	ldr	r2, [r3, #0]
 8013a0a:	69fb      	ldr	r3, [r7, #28]
 8013a0c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013a0e:	4a81      	ldr	r2, [pc, #516]	; (8013c14 <tcp_input+0x538>)
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	68db      	ldr	r3, [r3, #12]
 8013a18:	69fa      	ldr	r2, [r7, #28]
 8013a1a:	429a      	cmp	r2, r3
 8013a1c:	d111      	bne.n	8013a42 <tcp_input+0x366>
 8013a1e:	4b7a      	ldr	r3, [pc, #488]	; (8013c08 <tcp_input+0x52c>)
 8013a20:	f240 1215 	movw	r2, #277	; 0x115
 8013a24:	497c      	ldr	r1, [pc, #496]	; (8013c18 <tcp_input+0x53c>)
 8013a26:	487a      	ldr	r0, [pc, #488]	; (8013c10 <tcp_input+0x534>)
 8013a28:	f007 f9a8 	bl	801ad7c <iprintf>
      break;
 8013a2c:	e009      	b.n	8013a42 <tcp_input+0x366>
    }
    prev = pcb;
 8013a2e:	69fb      	ldr	r3, [r7, #28]
 8013a30:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a32:	69fb      	ldr	r3, [r7, #28]
 8013a34:	68db      	ldr	r3, [r3, #12]
 8013a36:	61fb      	str	r3, [r7, #28]
 8013a38:	69fb      	ldr	r3, [r7, #28]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f47f af5e 	bne.w	80138fc <tcp_input+0x220>
 8013a40:	e000      	b.n	8013a44 <tcp_input+0x368>
      break;
 8013a42:	bf00      	nop
  }

  if (pcb == NULL) {
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	f040 8095 	bne.w	8013b76 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a4c:	4b73      	ldr	r3, [pc, #460]	; (8013c1c <tcp_input+0x540>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	61fb      	str	r3, [r7, #28]
 8013a52:	e03f      	b.n	8013ad4 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013a54:	69fb      	ldr	r3, [r7, #28]
 8013a56:	7d1b      	ldrb	r3, [r3, #20]
 8013a58:	2b0a      	cmp	r3, #10
 8013a5a:	d006      	beq.n	8013a6a <tcp_input+0x38e>
 8013a5c:	4b6a      	ldr	r3, [pc, #424]	; (8013c08 <tcp_input+0x52c>)
 8013a5e:	f240 121f 	movw	r2, #287	; 0x11f
 8013a62:	496f      	ldr	r1, [pc, #444]	; (8013c20 <tcp_input+0x544>)
 8013a64:	486a      	ldr	r0, [pc, #424]	; (8013c10 <tcp_input+0x534>)
 8013a66:	f007 f989 	bl	801ad7c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a6a:	69fb      	ldr	r3, [r7, #28]
 8013a6c:	7a1b      	ldrb	r3, [r3, #8]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d009      	beq.n	8013a86 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	7a1a      	ldrb	r2, [r3, #8]
 8013a76:	4b63      	ldr	r3, [pc, #396]	; (8013c04 <tcp_input+0x528>)
 8013a78:	685b      	ldr	r3, [r3, #4]
 8013a7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a7e:	3301      	adds	r3, #1
 8013a80:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a82:	429a      	cmp	r2, r3
 8013a84:	d122      	bne.n	8013acc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013a86:	69fb      	ldr	r3, [r7, #28]
 8013a88:	8b1a      	ldrh	r2, [r3, #24]
 8013a8a:	4b5d      	ldr	r3, [pc, #372]	; (8013c00 <tcp_input+0x524>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	881b      	ldrh	r3, [r3, #0]
 8013a90:	b29b      	uxth	r3, r3
 8013a92:	429a      	cmp	r2, r3
 8013a94:	d11b      	bne.n	8013ace <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013a96:	69fb      	ldr	r3, [r7, #28]
 8013a98:	8ada      	ldrh	r2, [r3, #22]
 8013a9a:	4b59      	ldr	r3, [pc, #356]	; (8013c00 <tcp_input+0x524>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	885b      	ldrh	r3, [r3, #2]
 8013aa0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013aa2:	429a      	cmp	r2, r3
 8013aa4:	d113      	bne.n	8013ace <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013aa6:	69fb      	ldr	r3, [r7, #28]
 8013aa8:	685a      	ldr	r2, [r3, #4]
 8013aaa:	4b56      	ldr	r3, [pc, #344]	; (8013c04 <tcp_input+0x528>)
 8013aac:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013aae:	429a      	cmp	r2, r3
 8013ab0:	d10d      	bne.n	8013ace <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013ab2:	69fb      	ldr	r3, [r7, #28]
 8013ab4:	681a      	ldr	r2, [r3, #0]
 8013ab6:	4b53      	ldr	r3, [pc, #332]	; (8013c04 <tcp_input+0x528>)
 8013ab8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013aba:	429a      	cmp	r2, r3
 8013abc:	d107      	bne.n	8013ace <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013abe:	69f8      	ldr	r0, [r7, #28]
 8013ac0:	f000 fb54 	bl	801416c <tcp_timewait_input>
        }
        pbuf_free(p);
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f7fd fd25 	bl	8011514 <pbuf_free>
        return;
 8013aca:	e1f0      	b.n	8013eae <tcp_input+0x7d2>
        continue;
 8013acc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ace:	69fb      	ldr	r3, [r7, #28]
 8013ad0:	68db      	ldr	r3, [r3, #12]
 8013ad2:	61fb      	str	r3, [r7, #28]
 8013ad4:	69fb      	ldr	r3, [r7, #28]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d1bc      	bne.n	8013a54 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013ada:	2300      	movs	r3, #0
 8013adc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ade:	4b51      	ldr	r3, [pc, #324]	; (8013c24 <tcp_input+0x548>)
 8013ae0:	681b      	ldr	r3, [r3, #0]
 8013ae2:	617b      	str	r3, [r7, #20]
 8013ae4:	e02a      	b.n	8013b3c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013ae6:	697b      	ldr	r3, [r7, #20]
 8013ae8:	7a1b      	ldrb	r3, [r3, #8]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d00c      	beq.n	8013b08 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	7a1a      	ldrb	r2, [r3, #8]
 8013af2:	4b44      	ldr	r3, [pc, #272]	; (8013c04 <tcp_input+0x528>)
 8013af4:	685b      	ldr	r3, [r3, #4]
 8013af6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013afa:	3301      	adds	r3, #1
 8013afc:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d002      	beq.n	8013b08 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013b02:	697b      	ldr	r3, [r7, #20]
 8013b04:	61bb      	str	r3, [r7, #24]
        continue;
 8013b06:	e016      	b.n	8013b36 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013b08:	697b      	ldr	r3, [r7, #20]
 8013b0a:	8ada      	ldrh	r2, [r3, #22]
 8013b0c:	4b3c      	ldr	r3, [pc, #240]	; (8013c00 <tcp_input+0x524>)
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	885b      	ldrh	r3, [r3, #2]
 8013b12:	b29b      	uxth	r3, r3
 8013b14:	429a      	cmp	r2, r3
 8013b16:	d10c      	bne.n	8013b32 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013b18:	697b      	ldr	r3, [r7, #20]
 8013b1a:	681a      	ldr	r2, [r3, #0]
 8013b1c:	4b39      	ldr	r3, [pc, #228]	; (8013c04 <tcp_input+0x528>)
 8013b1e:	695b      	ldr	r3, [r3, #20]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d00f      	beq.n	8013b44 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013b24:	697b      	ldr	r3, [r7, #20]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d00d      	beq.n	8013b46 <tcp_input+0x46a>
 8013b2a:	697b      	ldr	r3, [r7, #20]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d009      	beq.n	8013b46 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	68db      	ldr	r3, [r3, #12]
 8013b3a:	617b      	str	r3, [r7, #20]
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d1d1      	bne.n	8013ae6 <tcp_input+0x40a>
 8013b42:	e000      	b.n	8013b46 <tcp_input+0x46a>
            break;
 8013b44:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013b46:	697b      	ldr	r3, [r7, #20]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d014      	beq.n	8013b76 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013b4c:	69bb      	ldr	r3, [r7, #24]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d00a      	beq.n	8013b68 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013b52:	697b      	ldr	r3, [r7, #20]
 8013b54:	68da      	ldr	r2, [r3, #12]
 8013b56:	69bb      	ldr	r3, [r7, #24]
 8013b58:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013b5a:	4b32      	ldr	r3, [pc, #200]	; (8013c24 <tcp_input+0x548>)
 8013b5c:	681a      	ldr	r2, [r3, #0]
 8013b5e:	697b      	ldr	r3, [r7, #20]
 8013b60:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013b62:	4a30      	ldr	r2, [pc, #192]	; (8013c24 <tcp_input+0x548>)
 8013b64:	697b      	ldr	r3, [r7, #20]
 8013b66:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013b68:	6978      	ldr	r0, [r7, #20]
 8013b6a:	f000 fa01 	bl	8013f70 <tcp_listen_input>
      }
      pbuf_free(p);
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f7fd fcd0 	bl	8011514 <pbuf_free>
      return;
 8013b74:	e19b      	b.n	8013eae <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	f000 8160 	beq.w	8013e3e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013b7e:	4b2a      	ldr	r3, [pc, #168]	; (8013c28 <tcp_input+0x54c>)
 8013b80:	2200      	movs	r2, #0
 8013b82:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	891a      	ldrh	r2, [r3, #8]
 8013b88:	4b27      	ldr	r3, [pc, #156]	; (8013c28 <tcp_input+0x54c>)
 8013b8a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013b8c:	4a26      	ldr	r2, [pc, #152]	; (8013c28 <tcp_input+0x54c>)
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013b92:	4b1b      	ldr	r3, [pc, #108]	; (8013c00 <tcp_input+0x524>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	4a24      	ldr	r2, [pc, #144]	; (8013c28 <tcp_input+0x54c>)
 8013b98:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013b9a:	4b24      	ldr	r3, [pc, #144]	; (8013c2c <tcp_input+0x550>)
 8013b9c:	2200      	movs	r2, #0
 8013b9e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013ba0:	4b23      	ldr	r3, [pc, #140]	; (8013c30 <tcp_input+0x554>)
 8013ba2:	2200      	movs	r2, #0
 8013ba4:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013ba6:	4b23      	ldr	r3, [pc, #140]	; (8013c34 <tcp_input+0x558>)
 8013ba8:	2200      	movs	r2, #0
 8013baa:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013bac:	4b22      	ldr	r3, [pc, #136]	; (8013c38 <tcp_input+0x55c>)
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	f003 0308 	and.w	r3, r3, #8
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d006      	beq.n	8013bc6 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	7b5b      	ldrb	r3, [r3, #13]
 8013bbc:	f043 0301 	orr.w	r3, r3, #1
 8013bc0:	b2da      	uxtb	r2, r3
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013bc6:	69fb      	ldr	r3, [r7, #28]
 8013bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d038      	beq.n	8013c40 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013bce:	69f8      	ldr	r0, [r7, #28]
 8013bd0:	f7ff f858 	bl	8012c84 <tcp_process_refused_data>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	f113 0f0d 	cmn.w	r3, #13
 8013bda:	d007      	beq.n	8013bec <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d02d      	beq.n	8013c40 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013be4:	4b15      	ldr	r3, [pc, #84]	; (8013c3c <tcp_input+0x560>)
 8013be6:	881b      	ldrh	r3, [r3, #0]
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d029      	beq.n	8013c40 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013bec:	69fb      	ldr	r3, [r7, #28]
 8013bee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	f040 8104 	bne.w	8013dfe <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013bf6:	69f8      	ldr	r0, [r7, #28]
 8013bf8:	f003 fe16 	bl	8017828 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013bfc:	e0ff      	b.n	8013dfe <tcp_input+0x722>
 8013bfe:	bf00      	nop
 8013c00:	24004b0c 	.word	0x24004b0c
 8013c04:	240051b0 	.word	0x240051b0
 8013c08:	0801d14c 	.word	0x0801d14c
 8013c0c:	0801d278 	.word	0x0801d278
 8013c10:	0801d198 	.word	0x0801d198
 8013c14:	24008270 	.word	0x24008270
 8013c18:	0801d2a4 	.word	0x0801d2a4
 8013c1c:	24008280 	.word	0x24008280
 8013c20:	0801d2d0 	.word	0x0801d2d0
 8013c24:	24008278 	.word	0x24008278
 8013c28:	24004afc 	.word	0x24004afc
 8013c2c:	24004b2c 	.word	0x24004b2c
 8013c30:	24004b29 	.word	0x24004b29
 8013c34:	24004b24 	.word	0x24004b24
 8013c38:	24004b28 	.word	0x24004b28
 8013c3c:	24004b26 	.word	0x24004b26
      }
    }
    tcp_input_pcb = pcb;
 8013c40:	4a9c      	ldr	r2, [pc, #624]	; (8013eb4 <tcp_input+0x7d8>)
 8013c42:	69fb      	ldr	r3, [r7, #28]
 8013c44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013c46:	69f8      	ldr	r0, [r7, #28]
 8013c48:	f000 fb0a 	bl	8014260 <tcp_process>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013c50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c54:	f113 0f0d 	cmn.w	r3, #13
 8013c58:	f000 80d3 	beq.w	8013e02 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8013c5c:	4b96      	ldr	r3, [pc, #600]	; (8013eb8 <tcp_input+0x7dc>)
 8013c5e:	781b      	ldrb	r3, [r3, #0]
 8013c60:	f003 0308 	and.w	r3, r3, #8
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d015      	beq.n	8013c94 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013c68:	69fb      	ldr	r3, [r7, #28]
 8013c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d008      	beq.n	8013c84 <tcp_input+0x5a8>
 8013c72:	69fb      	ldr	r3, [r7, #28]
 8013c74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c78:	69fa      	ldr	r2, [r7, #28]
 8013c7a:	6912      	ldr	r2, [r2, #16]
 8013c7c:	f06f 010d 	mvn.w	r1, #13
 8013c80:	4610      	mov	r0, r2
 8013c82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013c84:	69f9      	ldr	r1, [r7, #28]
 8013c86:	488d      	ldr	r0, [pc, #564]	; (8013ebc <tcp_input+0x7e0>)
 8013c88:	f7ff fbb0 	bl	80133ec <tcp_pcb_remove>
        tcp_free(pcb);
 8013c8c:	69f8      	ldr	r0, [r7, #28]
 8013c8e:	f7fd fefd 	bl	8011a8c <tcp_free>
 8013c92:	e0c1      	b.n	8013e18 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8013c94:	2300      	movs	r3, #0
 8013c96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013c98:	4b89      	ldr	r3, [pc, #548]	; (8013ec0 <tcp_input+0x7e4>)
 8013c9a:	881b      	ldrh	r3, [r3, #0]
 8013c9c:	2b00      	cmp	r3, #0
 8013c9e:	d01d      	beq.n	8013cdc <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013ca0:	4b87      	ldr	r3, [pc, #540]	; (8013ec0 <tcp_input+0x7e4>)
 8013ca2:	881b      	ldrh	r3, [r3, #0]
 8013ca4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	d00a      	beq.n	8013cc6 <tcp_input+0x5ea>
 8013cb0:	69fb      	ldr	r3, [r7, #28]
 8013cb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cb6:	69fa      	ldr	r2, [r7, #28]
 8013cb8:	6910      	ldr	r0, [r2, #16]
 8013cba:	89fa      	ldrh	r2, [r7, #14]
 8013cbc:	69f9      	ldr	r1, [r7, #28]
 8013cbe:	4798      	blx	r3
 8013cc0:	4603      	mov	r3, r0
 8013cc2:	74fb      	strb	r3, [r7, #19]
 8013cc4:	e001      	b.n	8013cca <tcp_input+0x5ee>
 8013cc6:	2300      	movs	r3, #0
 8013cc8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013cca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cce:	f113 0f0d 	cmn.w	r3, #13
 8013cd2:	f000 8098 	beq.w	8013e06 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013cd6:	4b7a      	ldr	r3, [pc, #488]	; (8013ec0 <tcp_input+0x7e4>)
 8013cd8:	2200      	movs	r2, #0
 8013cda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013cdc:	69f8      	ldr	r0, [r7, #28]
 8013cde:	f000 f907 	bl	8013ef0 <tcp_input_delayed_close>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	f040 8090 	bne.w	8013e0a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013cea:	4b76      	ldr	r3, [pc, #472]	; (8013ec4 <tcp_input+0x7e8>)
 8013cec:	681b      	ldr	r3, [r3, #0]
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d041      	beq.n	8013d76 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013cf2:	69fb      	ldr	r3, [r7, #28]
 8013cf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d006      	beq.n	8013d08 <tcp_input+0x62c>
 8013cfa:	4b73      	ldr	r3, [pc, #460]	; (8013ec8 <tcp_input+0x7ec>)
 8013cfc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013d00:	4972      	ldr	r1, [pc, #456]	; (8013ecc <tcp_input+0x7f0>)
 8013d02:	4873      	ldr	r0, [pc, #460]	; (8013ed0 <tcp_input+0x7f4>)
 8013d04:	f007 f83a 	bl	801ad7c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013d08:	69fb      	ldr	r3, [r7, #28]
 8013d0a:	8b5b      	ldrh	r3, [r3, #26]
 8013d0c:	f003 0310 	and.w	r3, r3, #16
 8013d10:	2b00      	cmp	r3, #0
 8013d12:	d008      	beq.n	8013d26 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013d14:	4b6b      	ldr	r3, [pc, #428]	; (8013ec4 <tcp_input+0x7e8>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	4618      	mov	r0, r3
 8013d1a:	f7fd fbfb 	bl	8011514 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013d1e:	69f8      	ldr	r0, [r7, #28]
 8013d20:	f7fe f99c 	bl	801205c <tcp_abort>
            goto aborted;
 8013d24:	e078      	b.n	8013e18 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013d26:	69fb      	ldr	r3, [r7, #28]
 8013d28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d00c      	beq.n	8013d4a <tcp_input+0x66e>
 8013d30:	69fb      	ldr	r3, [r7, #28]
 8013d32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013d36:	69fb      	ldr	r3, [r7, #28]
 8013d38:	6918      	ldr	r0, [r3, #16]
 8013d3a:	4b62      	ldr	r3, [pc, #392]	; (8013ec4 <tcp_input+0x7e8>)
 8013d3c:	681a      	ldr	r2, [r3, #0]
 8013d3e:	2300      	movs	r3, #0
 8013d40:	69f9      	ldr	r1, [r7, #28]
 8013d42:	47a0      	blx	r4
 8013d44:	4603      	mov	r3, r0
 8013d46:	74fb      	strb	r3, [r7, #19]
 8013d48:	e008      	b.n	8013d5c <tcp_input+0x680>
 8013d4a:	4b5e      	ldr	r3, [pc, #376]	; (8013ec4 <tcp_input+0x7e8>)
 8013d4c:	681a      	ldr	r2, [r3, #0]
 8013d4e:	2300      	movs	r3, #0
 8013d50:	69f9      	ldr	r1, [r7, #28]
 8013d52:	2000      	movs	r0, #0
 8013d54:	f7ff f88a 	bl	8012e6c <tcp_recv_null>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013d5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d60:	f113 0f0d 	cmn.w	r3, #13
 8013d64:	d053      	beq.n	8013e0e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013d66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d003      	beq.n	8013d76 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013d6e:	4b55      	ldr	r3, [pc, #340]	; (8013ec4 <tcp_input+0x7e8>)
 8013d70:	681a      	ldr	r2, [r3, #0]
 8013d72:	69fb      	ldr	r3, [r7, #28]
 8013d74:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013d76:	4b50      	ldr	r3, [pc, #320]	; (8013eb8 <tcp_input+0x7dc>)
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	f003 0320 	and.w	r3, r3, #32
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d030      	beq.n	8013de4 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8013d82:	69fb      	ldr	r3, [r7, #28]
 8013d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d009      	beq.n	8013d9e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d8e:	7b5a      	ldrb	r2, [r3, #13]
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d94:	f042 0220 	orr.w	r2, r2, #32
 8013d98:	b2d2      	uxtb	r2, r2
 8013d9a:	735a      	strb	r2, [r3, #13]
 8013d9c:	e022      	b.n	8013de4 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013d9e:	69fb      	ldr	r3, [r7, #28]
 8013da0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013da2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013da6:	d005      	beq.n	8013db4 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dac:	3301      	adds	r3, #1
 8013dae:	b29a      	uxth	r2, r3
 8013db0:	69fb      	ldr	r3, [r7, #28]
 8013db2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013db4:	69fb      	ldr	r3, [r7, #28]
 8013db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d00b      	beq.n	8013dd6 <tcp_input+0x6fa>
 8013dbe:	69fb      	ldr	r3, [r7, #28]
 8013dc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013dc4:	69fb      	ldr	r3, [r7, #28]
 8013dc6:	6918      	ldr	r0, [r3, #16]
 8013dc8:	2300      	movs	r3, #0
 8013dca:	2200      	movs	r2, #0
 8013dcc:	69f9      	ldr	r1, [r7, #28]
 8013dce:	47a0      	blx	r4
 8013dd0:	4603      	mov	r3, r0
 8013dd2:	74fb      	strb	r3, [r7, #19]
 8013dd4:	e001      	b.n	8013dda <tcp_input+0x6fe>
 8013dd6:	2300      	movs	r3, #0
 8013dd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013dda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013dde:	f113 0f0d 	cmn.w	r3, #13
 8013de2:	d016      	beq.n	8013e12 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013de4:	4b33      	ldr	r3, [pc, #204]	; (8013eb4 <tcp_input+0x7d8>)
 8013de6:	2200      	movs	r2, #0
 8013de8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013dea:	69f8      	ldr	r0, [r7, #28]
 8013dec:	f000 f880 	bl	8013ef0 <tcp_input_delayed_close>
 8013df0:	4603      	mov	r3, r0
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d10f      	bne.n	8013e16 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013df6:	69f8      	ldr	r0, [r7, #28]
 8013df8:	f002 ff10 	bl	8016c1c <tcp_output>
 8013dfc:	e00c      	b.n	8013e18 <tcp_input+0x73c>
        goto aborted;
 8013dfe:	bf00      	nop
 8013e00:	e00a      	b.n	8013e18 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013e02:	bf00      	nop
 8013e04:	e008      	b.n	8013e18 <tcp_input+0x73c>
              goto aborted;
 8013e06:	bf00      	nop
 8013e08:	e006      	b.n	8013e18 <tcp_input+0x73c>
          goto aborted;
 8013e0a:	bf00      	nop
 8013e0c:	e004      	b.n	8013e18 <tcp_input+0x73c>
            goto aborted;
 8013e0e:	bf00      	nop
 8013e10:	e002      	b.n	8013e18 <tcp_input+0x73c>
              goto aborted;
 8013e12:	bf00      	nop
 8013e14:	e000      	b.n	8013e18 <tcp_input+0x73c>
          goto aborted;
 8013e16:	bf00      	nop
    tcp_input_pcb = NULL;
 8013e18:	4b26      	ldr	r3, [pc, #152]	; (8013eb4 <tcp_input+0x7d8>)
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013e1e:	4b29      	ldr	r3, [pc, #164]	; (8013ec4 <tcp_input+0x7e8>)
 8013e20:	2200      	movs	r2, #0
 8013e22:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013e24:	4b2b      	ldr	r3, [pc, #172]	; (8013ed4 <tcp_input+0x7f8>)
 8013e26:	685b      	ldr	r3, [r3, #4]
 8013e28:	2b00      	cmp	r3, #0
 8013e2a:	d03f      	beq.n	8013eac <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8013e2c:	4b29      	ldr	r3, [pc, #164]	; (8013ed4 <tcp_input+0x7f8>)
 8013e2e:	685b      	ldr	r3, [r3, #4]
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fd fb6f 	bl	8011514 <pbuf_free>
      inseg.p = NULL;
 8013e36:	4b27      	ldr	r3, [pc, #156]	; (8013ed4 <tcp_input+0x7f8>)
 8013e38:	2200      	movs	r2, #0
 8013e3a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013e3c:	e036      	b.n	8013eac <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013e3e:	4b26      	ldr	r3, [pc, #152]	; (8013ed8 <tcp_input+0x7fc>)
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	899b      	ldrh	r3, [r3, #12]
 8013e44:	b29b      	uxth	r3, r3
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7fb feba 	bl	800fbc0 <lwip_htons>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	b2db      	uxtb	r3, r3
 8013e50:	f003 0304 	and.w	r3, r3, #4
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d118      	bne.n	8013e8a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e58:	4b20      	ldr	r3, [pc, #128]	; (8013edc <tcp_input+0x800>)
 8013e5a:	6819      	ldr	r1, [r3, #0]
 8013e5c:	4b20      	ldr	r3, [pc, #128]	; (8013ee0 <tcp_input+0x804>)
 8013e5e:	881b      	ldrh	r3, [r3, #0]
 8013e60:	461a      	mov	r2, r3
 8013e62:	4b20      	ldr	r3, [pc, #128]	; (8013ee4 <tcp_input+0x808>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e68:	4b1b      	ldr	r3, [pc, #108]	; (8013ed8 <tcp_input+0x7fc>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e6c:	885b      	ldrh	r3, [r3, #2]
 8013e6e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013e70:	4a19      	ldr	r2, [pc, #100]	; (8013ed8 <tcp_input+0x7fc>)
 8013e72:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013e74:	8812      	ldrh	r2, [r2, #0]
 8013e76:	b292      	uxth	r2, r2
 8013e78:	9202      	str	r2, [sp, #8]
 8013e7a:	9301      	str	r3, [sp, #4]
 8013e7c:	4b1a      	ldr	r3, [pc, #104]	; (8013ee8 <tcp_input+0x80c>)
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	4b1a      	ldr	r3, [pc, #104]	; (8013eec <tcp_input+0x810>)
 8013e82:	4602      	mov	r2, r0
 8013e84:	2000      	movs	r0, #0
 8013e86:	f003 fc7d 	bl	8017784 <tcp_rst>
    pbuf_free(p);
 8013e8a:	6878      	ldr	r0, [r7, #4]
 8013e8c:	f7fd fb42 	bl	8011514 <pbuf_free>
  return;
 8013e90:	e00c      	b.n	8013eac <tcp_input+0x7d0>
    goto dropped;
 8013e92:	bf00      	nop
 8013e94:	e006      	b.n	8013ea4 <tcp_input+0x7c8>
    goto dropped;
 8013e96:	bf00      	nop
 8013e98:	e004      	b.n	8013ea4 <tcp_input+0x7c8>
    goto dropped;
 8013e9a:	bf00      	nop
 8013e9c:	e002      	b.n	8013ea4 <tcp_input+0x7c8>
      goto dropped;
 8013e9e:	bf00      	nop
 8013ea0:	e000      	b.n	8013ea4 <tcp_input+0x7c8>
      goto dropped;
 8013ea2:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013ea4:	6878      	ldr	r0, [r7, #4]
 8013ea6:	f7fd fb35 	bl	8011514 <pbuf_free>
 8013eaa:	e000      	b.n	8013eae <tcp_input+0x7d2>
  return;
 8013eac:	bf00      	nop
}
 8013eae:	3724      	adds	r7, #36	; 0x24
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd90      	pop	{r4, r7, pc}
 8013eb4:	24008284 	.word	0x24008284
 8013eb8:	24004b29 	.word	0x24004b29
 8013ebc:	24008270 	.word	0x24008270
 8013ec0:	24004b24 	.word	0x24004b24
 8013ec4:	24004b2c 	.word	0x24004b2c
 8013ec8:	0801d14c 	.word	0x0801d14c
 8013ecc:	0801d300 	.word	0x0801d300
 8013ed0:	0801d198 	.word	0x0801d198
 8013ed4:	24004afc 	.word	0x24004afc
 8013ed8:	24004b0c 	.word	0x24004b0c
 8013edc:	24004b20 	.word	0x24004b20
 8013ee0:	24004b26 	.word	0x24004b26
 8013ee4:	24004b1c 	.word	0x24004b1c
 8013ee8:	240051c0 	.word	0x240051c0
 8013eec:	240051c4 	.word	0x240051c4

08013ef0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b082      	sub	sp, #8
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d106      	bne.n	8013f0c <tcp_input_delayed_close+0x1c>
 8013efe:	4b17      	ldr	r3, [pc, #92]	; (8013f5c <tcp_input_delayed_close+0x6c>)
 8013f00:	f240 225a 	movw	r2, #602	; 0x25a
 8013f04:	4916      	ldr	r1, [pc, #88]	; (8013f60 <tcp_input_delayed_close+0x70>)
 8013f06:	4817      	ldr	r0, [pc, #92]	; (8013f64 <tcp_input_delayed_close+0x74>)
 8013f08:	f006 ff38 	bl	801ad7c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013f0c:	4b16      	ldr	r3, [pc, #88]	; (8013f68 <tcp_input_delayed_close+0x78>)
 8013f0e:	781b      	ldrb	r3, [r3, #0]
 8013f10:	f003 0310 	and.w	r3, r3, #16
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d01c      	beq.n	8013f52 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	8b5b      	ldrh	r3, [r3, #26]
 8013f1c:	f003 0310 	and.w	r3, r3, #16
 8013f20:	2b00      	cmp	r3, #0
 8013f22:	d10d      	bne.n	8013f40 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d008      	beq.n	8013f40 <tcp_input_delayed_close+0x50>
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f34:	687a      	ldr	r2, [r7, #4]
 8013f36:	6912      	ldr	r2, [r2, #16]
 8013f38:	f06f 010e 	mvn.w	r1, #14
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f40:	6879      	ldr	r1, [r7, #4]
 8013f42:	480a      	ldr	r0, [pc, #40]	; (8013f6c <tcp_input_delayed_close+0x7c>)
 8013f44:	f7ff fa52 	bl	80133ec <tcp_pcb_remove>
    tcp_free(pcb);
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f7fd fd9f 	bl	8011a8c <tcp_free>
    return 1;
 8013f4e:	2301      	movs	r3, #1
 8013f50:	e000      	b.n	8013f54 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013f52:	2300      	movs	r3, #0
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3708      	adds	r7, #8
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}
 8013f5c:	0801d14c 	.word	0x0801d14c
 8013f60:	0801d31c 	.word	0x0801d31c
 8013f64:	0801d198 	.word	0x0801d198
 8013f68:	24004b29 	.word	0x24004b29
 8013f6c:	24008270 	.word	0x24008270

08013f70 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013f70:	b590      	push	{r4, r7, lr}
 8013f72:	b08b      	sub	sp, #44	; 0x2c
 8013f74:	af04      	add	r7, sp, #16
 8013f76:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013f78:	4b6f      	ldr	r3, [pc, #444]	; (8014138 <tcp_listen_input+0x1c8>)
 8013f7a:	781b      	ldrb	r3, [r3, #0]
 8013f7c:	f003 0304 	and.w	r3, r3, #4
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	f040 80d2 	bne.w	801412a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d106      	bne.n	8013f9a <tcp_listen_input+0x2a>
 8013f8c:	4b6b      	ldr	r3, [pc, #428]	; (801413c <tcp_listen_input+0x1cc>)
 8013f8e:	f240 2281 	movw	r2, #641	; 0x281
 8013f92:	496b      	ldr	r1, [pc, #428]	; (8014140 <tcp_listen_input+0x1d0>)
 8013f94:	486b      	ldr	r0, [pc, #428]	; (8014144 <tcp_listen_input+0x1d4>)
 8013f96:	f006 fef1 	bl	801ad7c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013f9a:	4b67      	ldr	r3, [pc, #412]	; (8014138 <tcp_listen_input+0x1c8>)
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	f003 0310 	and.w	r3, r3, #16
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d019      	beq.n	8013fda <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fa6:	4b68      	ldr	r3, [pc, #416]	; (8014148 <tcp_listen_input+0x1d8>)
 8013fa8:	6819      	ldr	r1, [r3, #0]
 8013faa:	4b68      	ldr	r3, [pc, #416]	; (801414c <tcp_listen_input+0x1dc>)
 8013fac:	881b      	ldrh	r3, [r3, #0]
 8013fae:	461a      	mov	r2, r3
 8013fb0:	4b67      	ldr	r3, [pc, #412]	; (8014150 <tcp_listen_input+0x1e0>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fb6:	4b67      	ldr	r3, [pc, #412]	; (8014154 <tcp_listen_input+0x1e4>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fba:	885b      	ldrh	r3, [r3, #2]
 8013fbc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fbe:	4a65      	ldr	r2, [pc, #404]	; (8014154 <tcp_listen_input+0x1e4>)
 8013fc0:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fc2:	8812      	ldrh	r2, [r2, #0]
 8013fc4:	b292      	uxth	r2, r2
 8013fc6:	9202      	str	r2, [sp, #8]
 8013fc8:	9301      	str	r3, [sp, #4]
 8013fca:	4b63      	ldr	r3, [pc, #396]	; (8014158 <tcp_listen_input+0x1e8>)
 8013fcc:	9300      	str	r3, [sp, #0]
 8013fce:	4b63      	ldr	r3, [pc, #396]	; (801415c <tcp_listen_input+0x1ec>)
 8013fd0:	4602      	mov	r2, r0
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f003 fbd6 	bl	8017784 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013fd8:	e0a9      	b.n	801412e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013fda:	4b57      	ldr	r3, [pc, #348]	; (8014138 <tcp_listen_input+0x1c8>)
 8013fdc:	781b      	ldrb	r3, [r3, #0]
 8013fde:	f003 0302 	and.w	r3, r3, #2
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	f000 80a3 	beq.w	801412e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	7d5b      	ldrb	r3, [r3, #21]
 8013fec:	4618      	mov	r0, r3
 8013fee:	f7ff f861 	bl	80130b4 <tcp_alloc>
 8013ff2:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	2b00      	cmp	r3, #0
 8013ff8:	d111      	bne.n	801401e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	699b      	ldr	r3, [r3, #24]
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d00a      	beq.n	8014018 <tcp_listen_input+0xa8>
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	699b      	ldr	r3, [r3, #24]
 8014006:	687a      	ldr	r2, [r7, #4]
 8014008:	6910      	ldr	r0, [r2, #16]
 801400a:	f04f 32ff 	mov.w	r2, #4294967295
 801400e:	2100      	movs	r1, #0
 8014010:	4798      	blx	r3
 8014012:	4603      	mov	r3, r0
 8014014:	73bb      	strb	r3, [r7, #14]
      return;
 8014016:	e08b      	b.n	8014130 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014018:	23f0      	movs	r3, #240	; 0xf0
 801401a:	73bb      	strb	r3, [r7, #14]
      return;
 801401c:	e088      	b.n	8014130 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801401e:	4b50      	ldr	r3, [pc, #320]	; (8014160 <tcp_listen_input+0x1f0>)
 8014020:	695a      	ldr	r2, [r3, #20]
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014026:	4b4e      	ldr	r3, [pc, #312]	; (8014160 <tcp_listen_input+0x1f0>)
 8014028:	691a      	ldr	r2, [r3, #16]
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	8ada      	ldrh	r2, [r3, #22]
 8014032:	697b      	ldr	r3, [r7, #20]
 8014034:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014036:	4b47      	ldr	r3, [pc, #284]	; (8014154 <tcp_listen_input+0x1e4>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	881b      	ldrh	r3, [r3, #0]
 801403c:	b29a      	uxth	r2, r3
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014042:	697b      	ldr	r3, [r7, #20]
 8014044:	2203      	movs	r2, #3
 8014046:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014048:	4b41      	ldr	r3, [pc, #260]	; (8014150 <tcp_listen_input+0x1e0>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	1c5a      	adds	r2, r3, #1
 801404e:	697b      	ldr	r3, [r7, #20]
 8014050:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014052:	697b      	ldr	r3, [r7, #20]
 8014054:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801405a:	6978      	ldr	r0, [r7, #20]
 801405c:	f7ff fa5a 	bl	8013514 <tcp_next_iss>
 8014060:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014062:	697b      	ldr	r3, [r7, #20]
 8014064:	693a      	ldr	r2, [r7, #16]
 8014066:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8014068:	697b      	ldr	r3, [r7, #20]
 801406a:	693a      	ldr	r2, [r7, #16]
 801406c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801406e:	697b      	ldr	r3, [r7, #20]
 8014070:	693a      	ldr	r2, [r7, #16]
 8014072:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8014074:	697b      	ldr	r3, [r7, #20]
 8014076:	693a      	ldr	r2, [r7, #16]
 8014078:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801407a:	4b35      	ldr	r3, [pc, #212]	; (8014150 <tcp_listen_input+0x1e0>)
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	1e5a      	subs	r2, r3, #1
 8014080:	697b      	ldr	r3, [r7, #20]
 8014082:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	691a      	ldr	r2, [r3, #16]
 8014088:	697b      	ldr	r3, [r7, #20]
 801408a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801408c:	697b      	ldr	r3, [r7, #20]
 801408e:	687a      	ldr	r2, [r7, #4]
 8014090:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	7a5b      	ldrb	r3, [r3, #9]
 8014096:	f003 030c 	and.w	r3, r3, #12
 801409a:	b2da      	uxtb	r2, r3
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	7a1a      	ldrb	r2, [r3, #8]
 80140a4:	697b      	ldr	r3, [r7, #20]
 80140a6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80140a8:	4b2e      	ldr	r3, [pc, #184]	; (8014164 <tcp_listen_input+0x1f4>)
 80140aa:	681a      	ldr	r2, [r3, #0]
 80140ac:	697b      	ldr	r3, [r7, #20]
 80140ae:	60da      	str	r2, [r3, #12]
 80140b0:	4a2c      	ldr	r2, [pc, #176]	; (8014164 <tcp_listen_input+0x1f4>)
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	6013      	str	r3, [r2, #0]
 80140b6:	f003 fd27 	bl	8017b08 <tcp_timer_needed>
 80140ba:	4b2b      	ldr	r3, [pc, #172]	; (8014168 <tcp_listen_input+0x1f8>)
 80140bc:	2201      	movs	r2, #1
 80140be:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80140c0:	6978      	ldr	r0, [r7, #20]
 80140c2:	f001 fd8d 	bl	8015be0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80140c6:	4b23      	ldr	r3, [pc, #140]	; (8014154 <tcp_listen_input+0x1e4>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	89db      	ldrh	r3, [r3, #14]
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	697b      	ldr	r3, [r7, #20]
 80140d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80140d4:	697b      	ldr	r3, [r7, #20]
 80140d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80140da:	697b      	ldr	r3, [r7, #20]
 80140dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	3304      	adds	r3, #4
 80140e8:	4618      	mov	r0, r3
 80140ea:	f005 f941 	bl	8019370 <ip4_route>
 80140ee:	4601      	mov	r1, r0
 80140f0:	697b      	ldr	r3, [r7, #20]
 80140f2:	3304      	adds	r3, #4
 80140f4:	461a      	mov	r2, r3
 80140f6:	4620      	mov	r0, r4
 80140f8:	f7ff fa32 	bl	8013560 <tcp_eff_send_mss_netif>
 80140fc:	4603      	mov	r3, r0
 80140fe:	461a      	mov	r2, r3
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014104:	2112      	movs	r1, #18
 8014106:	6978      	ldr	r0, [r7, #20]
 8014108:	f002 fc9a 	bl	8016a40 <tcp_enqueue_flags>
 801410c:	4603      	mov	r3, r0
 801410e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d004      	beq.n	8014122 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014118:	2100      	movs	r1, #0
 801411a:	6978      	ldr	r0, [r7, #20]
 801411c:	f7fd fee0 	bl	8011ee0 <tcp_abandon>
      return;
 8014120:	e006      	b.n	8014130 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014122:	6978      	ldr	r0, [r7, #20]
 8014124:	f002 fd7a 	bl	8016c1c <tcp_output>
  return;
 8014128:	e001      	b.n	801412e <tcp_listen_input+0x1be>
    return;
 801412a:	bf00      	nop
 801412c:	e000      	b.n	8014130 <tcp_listen_input+0x1c0>
  return;
 801412e:	bf00      	nop
}
 8014130:	371c      	adds	r7, #28
 8014132:	46bd      	mov	sp, r7
 8014134:	bd90      	pop	{r4, r7, pc}
 8014136:	bf00      	nop
 8014138:	24004b28 	.word	0x24004b28
 801413c:	0801d14c 	.word	0x0801d14c
 8014140:	0801d344 	.word	0x0801d344
 8014144:	0801d198 	.word	0x0801d198
 8014148:	24004b20 	.word	0x24004b20
 801414c:	24004b26 	.word	0x24004b26
 8014150:	24004b1c 	.word	0x24004b1c
 8014154:	24004b0c 	.word	0x24004b0c
 8014158:	240051c0 	.word	0x240051c0
 801415c:	240051c4 	.word	0x240051c4
 8014160:	240051b0 	.word	0x240051b0
 8014164:	24008270 	.word	0x24008270
 8014168:	2400826c 	.word	0x2400826c

0801416c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801416c:	b580      	push	{r7, lr}
 801416e:	b086      	sub	sp, #24
 8014170:	af04      	add	r7, sp, #16
 8014172:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014174:	4b2f      	ldr	r3, [pc, #188]	; (8014234 <tcp_timewait_input+0xc8>)
 8014176:	781b      	ldrb	r3, [r3, #0]
 8014178:	f003 0304 	and.w	r3, r3, #4
 801417c:	2b00      	cmp	r3, #0
 801417e:	d153      	bne.n	8014228 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d106      	bne.n	8014194 <tcp_timewait_input+0x28>
 8014186:	4b2c      	ldr	r3, [pc, #176]	; (8014238 <tcp_timewait_input+0xcc>)
 8014188:	f240 22ee 	movw	r2, #750	; 0x2ee
 801418c:	492b      	ldr	r1, [pc, #172]	; (801423c <tcp_timewait_input+0xd0>)
 801418e:	482c      	ldr	r0, [pc, #176]	; (8014240 <tcp_timewait_input+0xd4>)
 8014190:	f006 fdf4 	bl	801ad7c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014194:	4b27      	ldr	r3, [pc, #156]	; (8014234 <tcp_timewait_input+0xc8>)
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	f003 0302 	and.w	r3, r3, #2
 801419c:	2b00      	cmp	r3, #0
 801419e:	d02a      	beq.n	80141f6 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80141a0:	4b28      	ldr	r3, [pc, #160]	; (8014244 <tcp_timewait_input+0xd8>)
 80141a2:	681a      	ldr	r2, [r3, #0]
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141a8:	1ad3      	subs	r3, r2, r3
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	db2d      	blt.n	801420a <tcp_timewait_input+0x9e>
 80141ae:	4b25      	ldr	r3, [pc, #148]	; (8014244 <tcp_timewait_input+0xd8>)
 80141b0:	681a      	ldr	r2, [r3, #0]
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141b6:	6879      	ldr	r1, [r7, #4]
 80141b8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80141ba:	440b      	add	r3, r1
 80141bc:	1ad3      	subs	r3, r2, r3
 80141be:	2b00      	cmp	r3, #0
 80141c0:	dc23      	bgt.n	801420a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141c2:	4b21      	ldr	r3, [pc, #132]	; (8014248 <tcp_timewait_input+0xdc>)
 80141c4:	6819      	ldr	r1, [r3, #0]
 80141c6:	4b21      	ldr	r3, [pc, #132]	; (801424c <tcp_timewait_input+0xe0>)
 80141c8:	881b      	ldrh	r3, [r3, #0]
 80141ca:	461a      	mov	r2, r3
 80141cc:	4b1d      	ldr	r3, [pc, #116]	; (8014244 <tcp_timewait_input+0xd8>)
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80141d2:	4b1f      	ldr	r3, [pc, #124]	; (8014250 <tcp_timewait_input+0xe4>)
 80141d4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141d6:	885b      	ldrh	r3, [r3, #2]
 80141d8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80141da:	4a1d      	ldr	r2, [pc, #116]	; (8014250 <tcp_timewait_input+0xe4>)
 80141dc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141de:	8812      	ldrh	r2, [r2, #0]
 80141e0:	b292      	uxth	r2, r2
 80141e2:	9202      	str	r2, [sp, #8]
 80141e4:	9301      	str	r3, [sp, #4]
 80141e6:	4b1b      	ldr	r3, [pc, #108]	; (8014254 <tcp_timewait_input+0xe8>)
 80141e8:	9300      	str	r3, [sp, #0]
 80141ea:	4b1b      	ldr	r3, [pc, #108]	; (8014258 <tcp_timewait_input+0xec>)
 80141ec:	4602      	mov	r2, r0
 80141ee:	6878      	ldr	r0, [r7, #4]
 80141f0:	f003 fac8 	bl	8017784 <tcp_rst>
      return;
 80141f4:	e01b      	b.n	801422e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80141f6:	4b0f      	ldr	r3, [pc, #60]	; (8014234 <tcp_timewait_input+0xc8>)
 80141f8:	781b      	ldrb	r3, [r3, #0]
 80141fa:	f003 0301 	and.w	r3, r3, #1
 80141fe:	2b00      	cmp	r3, #0
 8014200:	d003      	beq.n	801420a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014202:	4b16      	ldr	r3, [pc, #88]	; (801425c <tcp_timewait_input+0xf0>)
 8014204:	681a      	ldr	r2, [r3, #0]
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801420a:	4b10      	ldr	r3, [pc, #64]	; (801424c <tcp_timewait_input+0xe0>)
 801420c:	881b      	ldrh	r3, [r3, #0]
 801420e:	2b00      	cmp	r3, #0
 8014210:	d00c      	beq.n	801422c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	8b5b      	ldrh	r3, [r3, #26]
 8014216:	f043 0302 	orr.w	r3, r3, #2
 801421a:	b29a      	uxth	r2, r3
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014220:	6878      	ldr	r0, [r7, #4]
 8014222:	f002 fcfb 	bl	8016c1c <tcp_output>
  }
  return;
 8014226:	e001      	b.n	801422c <tcp_timewait_input+0xc0>
    return;
 8014228:	bf00      	nop
 801422a:	e000      	b.n	801422e <tcp_timewait_input+0xc2>
  return;
 801422c:	bf00      	nop
}
 801422e:	3708      	adds	r7, #8
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}
 8014234:	24004b28 	.word	0x24004b28
 8014238:	0801d14c 	.word	0x0801d14c
 801423c:	0801d364 	.word	0x0801d364
 8014240:	0801d198 	.word	0x0801d198
 8014244:	24004b1c 	.word	0x24004b1c
 8014248:	24004b20 	.word	0x24004b20
 801424c:	24004b26 	.word	0x24004b26
 8014250:	24004b0c 	.word	0x24004b0c
 8014254:	240051c0 	.word	0x240051c0
 8014258:	240051c4 	.word	0x240051c4
 801425c:	24008274 	.word	0x24008274

08014260 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014260:	b590      	push	{r4, r7, lr}
 8014262:	b08d      	sub	sp, #52	; 0x34
 8014264:	af04      	add	r7, sp, #16
 8014266:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014268:	2300      	movs	r3, #0
 801426a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801426c:	2300      	movs	r3, #0
 801426e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2b00      	cmp	r3, #0
 8014274:	d106      	bne.n	8014284 <tcp_process+0x24>
 8014276:	4ba5      	ldr	r3, [pc, #660]	; (801450c <tcp_process+0x2ac>)
 8014278:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801427c:	49a4      	ldr	r1, [pc, #656]	; (8014510 <tcp_process+0x2b0>)
 801427e:	48a5      	ldr	r0, [pc, #660]	; (8014514 <tcp_process+0x2b4>)
 8014280:	f006 fd7c 	bl	801ad7c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014284:	4ba4      	ldr	r3, [pc, #656]	; (8014518 <tcp_process+0x2b8>)
 8014286:	781b      	ldrb	r3, [r3, #0]
 8014288:	f003 0304 	and.w	r3, r3, #4
 801428c:	2b00      	cmp	r3, #0
 801428e:	d04e      	beq.n	801432e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	7d1b      	ldrb	r3, [r3, #20]
 8014294:	2b02      	cmp	r3, #2
 8014296:	d108      	bne.n	80142aa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801429c:	4b9f      	ldr	r3, [pc, #636]	; (801451c <tcp_process+0x2bc>)
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	429a      	cmp	r2, r3
 80142a2:	d123      	bne.n	80142ec <tcp_process+0x8c>
        acceptable = 1;
 80142a4:	2301      	movs	r3, #1
 80142a6:	76fb      	strb	r3, [r7, #27]
 80142a8:	e020      	b.n	80142ec <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142ae:	4b9c      	ldr	r3, [pc, #624]	; (8014520 <tcp_process+0x2c0>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	429a      	cmp	r2, r3
 80142b4:	d102      	bne.n	80142bc <tcp_process+0x5c>
        acceptable = 1;
 80142b6:	2301      	movs	r3, #1
 80142b8:	76fb      	strb	r3, [r7, #27]
 80142ba:	e017      	b.n	80142ec <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80142bc:	4b98      	ldr	r3, [pc, #608]	; (8014520 <tcp_process+0x2c0>)
 80142be:	681a      	ldr	r2, [r3, #0]
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142c4:	1ad3      	subs	r3, r2, r3
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	db10      	blt.n	80142ec <tcp_process+0x8c>
 80142ca:	4b95      	ldr	r3, [pc, #596]	; (8014520 <tcp_process+0x2c0>)
 80142cc:	681a      	ldr	r2, [r3, #0]
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142d2:	6879      	ldr	r1, [r7, #4]
 80142d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80142d6:	440b      	add	r3, r1
 80142d8:	1ad3      	subs	r3, r2, r3
 80142da:	2b00      	cmp	r3, #0
 80142dc:	dc06      	bgt.n	80142ec <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	8b5b      	ldrh	r3, [r3, #26]
 80142e2:	f043 0302 	orr.w	r3, r3, #2
 80142e6:	b29a      	uxth	r2, r3
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80142ec:	7efb      	ldrb	r3, [r7, #27]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d01b      	beq.n	801432a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	7d1b      	ldrb	r3, [r3, #20]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d106      	bne.n	8014308 <tcp_process+0xa8>
 80142fa:	4b84      	ldr	r3, [pc, #528]	; (801450c <tcp_process+0x2ac>)
 80142fc:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014300:	4988      	ldr	r1, [pc, #544]	; (8014524 <tcp_process+0x2c4>)
 8014302:	4884      	ldr	r0, [pc, #528]	; (8014514 <tcp_process+0x2b4>)
 8014304:	f006 fd3a 	bl	801ad7c <iprintf>
      recv_flags |= TF_RESET;
 8014308:	4b87      	ldr	r3, [pc, #540]	; (8014528 <tcp_process+0x2c8>)
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	f043 0308 	orr.w	r3, r3, #8
 8014310:	b2da      	uxtb	r2, r3
 8014312:	4b85      	ldr	r3, [pc, #532]	; (8014528 <tcp_process+0x2c8>)
 8014314:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014316:	687b      	ldr	r3, [r7, #4]
 8014318:	8b5b      	ldrh	r3, [r3, #26]
 801431a:	f023 0301 	bic.w	r3, r3, #1
 801431e:	b29a      	uxth	r2, r3
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014324:	f06f 030d 	mvn.w	r3, #13
 8014328:	e37a      	b.n	8014a20 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801432a:	2300      	movs	r3, #0
 801432c:	e378      	b.n	8014a20 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801432e:	4b7a      	ldr	r3, [pc, #488]	; (8014518 <tcp_process+0x2b8>)
 8014330:	781b      	ldrb	r3, [r3, #0]
 8014332:	f003 0302 	and.w	r3, r3, #2
 8014336:	2b00      	cmp	r3, #0
 8014338:	d010      	beq.n	801435c <tcp_process+0xfc>
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	7d1b      	ldrb	r3, [r3, #20]
 801433e:	2b02      	cmp	r3, #2
 8014340:	d00c      	beq.n	801435c <tcp_process+0xfc>
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	7d1b      	ldrb	r3, [r3, #20]
 8014346:	2b03      	cmp	r3, #3
 8014348:	d008      	beq.n	801435c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	8b5b      	ldrh	r3, [r3, #26]
 801434e:	f043 0302 	orr.w	r3, r3, #2
 8014352:	b29a      	uxth	r2, r3
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014358:	2300      	movs	r3, #0
 801435a:	e361      	b.n	8014a20 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	8b5b      	ldrh	r3, [r3, #26]
 8014360:	f003 0310 	and.w	r3, r3, #16
 8014364:	2b00      	cmp	r3, #0
 8014366:	d103      	bne.n	8014370 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014368:	4b70      	ldr	r3, [pc, #448]	; (801452c <tcp_process+0x2cc>)
 801436a:	681a      	ldr	r2, [r3, #0]
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2200      	movs	r2, #0
 8014374:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2200      	movs	r2, #0
 801437c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014380:	6878      	ldr	r0, [r7, #4]
 8014382:	f001 fc2d 	bl	8015be0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014386:	687b      	ldr	r3, [r7, #4]
 8014388:	7d1b      	ldrb	r3, [r3, #20]
 801438a:	3b02      	subs	r3, #2
 801438c:	2b07      	cmp	r3, #7
 801438e:	f200 8337 	bhi.w	8014a00 <tcp_process+0x7a0>
 8014392:	a201      	add	r2, pc, #4	; (adr r2, 8014398 <tcp_process+0x138>)
 8014394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014398:	080143b9 	.word	0x080143b9
 801439c:	080145e9 	.word	0x080145e9
 80143a0:	08014761 	.word	0x08014761
 80143a4:	0801478b 	.word	0x0801478b
 80143a8:	080148af 	.word	0x080148af
 80143ac:	08014761 	.word	0x08014761
 80143b0:	0801493b 	.word	0x0801493b
 80143b4:	080149cb 	.word	0x080149cb
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80143b8:	4b57      	ldr	r3, [pc, #348]	; (8014518 <tcp_process+0x2b8>)
 80143ba:	781b      	ldrb	r3, [r3, #0]
 80143bc:	f003 0310 	and.w	r3, r3, #16
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	f000 80e4 	beq.w	801458e <tcp_process+0x32e>
 80143c6:	4b54      	ldr	r3, [pc, #336]	; (8014518 <tcp_process+0x2b8>)
 80143c8:	781b      	ldrb	r3, [r3, #0]
 80143ca:	f003 0302 	and.w	r3, r3, #2
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	f000 80dd 	beq.w	801458e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143d8:	1c5a      	adds	r2, r3, #1
 80143da:	4b50      	ldr	r3, [pc, #320]	; (801451c <tcp_process+0x2bc>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	429a      	cmp	r2, r3
 80143e0:	f040 80d5 	bne.w	801458e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80143e4:	4b4e      	ldr	r3, [pc, #312]	; (8014520 <tcp_process+0x2c0>)
 80143e6:	681b      	ldr	r3, [r3, #0]
 80143e8:	1c5a      	adds	r2, r3, #1
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 80143f6:	4b49      	ldr	r3, [pc, #292]	; (801451c <tcp_process+0x2bc>)
 80143f8:	681a      	ldr	r2, [r3, #0]
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80143fe:	4b4c      	ldr	r3, [pc, #304]	; (8014530 <tcp_process+0x2d0>)
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	89db      	ldrh	r3, [r3, #14]
 8014404:	b29a      	uxth	r2, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014412:	687b      	ldr	r3, [r7, #4]
 8014414:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014418:	4b41      	ldr	r3, [pc, #260]	; (8014520 <tcp_process+0x2c0>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	1e5a      	subs	r2, r3, #1
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	2204      	movs	r2, #4
 8014426:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014428:	687b      	ldr	r3, [r7, #4]
 801442a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	3304      	adds	r3, #4
 8014430:	4618      	mov	r0, r3
 8014432:	f004 ff9d 	bl	8019370 <ip4_route>
 8014436:	4601      	mov	r1, r0
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	3304      	adds	r3, #4
 801443c:	461a      	mov	r2, r3
 801443e:	4620      	mov	r0, r4
 8014440:	f7ff f88e 	bl	8013560 <tcp_eff_send_mss_netif>
 8014444:	4603      	mov	r3, r0
 8014446:	461a      	mov	r2, r3
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014450:	009a      	lsls	r2, r3, #2
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014456:	005b      	lsls	r3, r3, #1
 8014458:	f241 111c 	movw	r1, #4380	; 0x111c
 801445c:	428b      	cmp	r3, r1
 801445e:	bf38      	it	cc
 8014460:	460b      	movcc	r3, r1
 8014462:	429a      	cmp	r2, r3
 8014464:	d204      	bcs.n	8014470 <tcp_process+0x210>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801446a:	009b      	lsls	r3, r3, #2
 801446c:	b29b      	uxth	r3, r3
 801446e:	e00d      	b.n	801448c <tcp_process+0x22c>
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014474:	005b      	lsls	r3, r3, #1
 8014476:	f241 121c 	movw	r2, #4380	; 0x111c
 801447a:	4293      	cmp	r3, r2
 801447c:	d904      	bls.n	8014488 <tcp_process+0x228>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014482:	005b      	lsls	r3, r3, #1
 8014484:	b29b      	uxth	r3, r3
 8014486:	e001      	b.n	801448c <tcp_process+0x22c>
 8014488:	f241 131c 	movw	r3, #4380	; 0x111c
 801448c:	687a      	ldr	r2, [r7, #4]
 801448e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014498:	2b00      	cmp	r3, #0
 801449a:	d106      	bne.n	80144aa <tcp_process+0x24a>
 801449c:	4b1b      	ldr	r3, [pc, #108]	; (801450c <tcp_process+0x2ac>)
 801449e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80144a2:	4924      	ldr	r1, [pc, #144]	; (8014534 <tcp_process+0x2d4>)
 80144a4:	481b      	ldr	r0, [pc, #108]	; (8014514 <tcp_process+0x2b4>)
 80144a6:	f006 fc69 	bl	801ad7c <iprintf>
        --pcb->snd_queuelen;
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80144b0:	3b01      	subs	r3, #1
 80144b2:	b29a      	uxth	r2, r3
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144be:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80144c0:	69fb      	ldr	r3, [r7, #28]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d111      	bne.n	80144ea <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144ca:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80144cc:	69fb      	ldr	r3, [r7, #28]
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d106      	bne.n	80144e0 <tcp_process+0x280>
 80144d2:	4b0e      	ldr	r3, [pc, #56]	; (801450c <tcp_process+0x2ac>)
 80144d4:	f44f 725d 	mov.w	r2, #884	; 0x374
 80144d8:	4917      	ldr	r1, [pc, #92]	; (8014538 <tcp_process+0x2d8>)
 80144da:	480e      	ldr	r0, [pc, #56]	; (8014514 <tcp_process+0x2b4>)
 80144dc:	f006 fc4e 	bl	801ad7c <iprintf>
          pcb->unsent = rseg->next;
 80144e0:	69fb      	ldr	r3, [r7, #28]
 80144e2:	681a      	ldr	r2, [r3, #0]
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80144e8:	e003      	b.n	80144f2 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 80144ea:	69fb      	ldr	r3, [r7, #28]
 80144ec:	681a      	ldr	r2, [r3, #0]
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80144f2:	69f8      	ldr	r0, [r7, #28]
 80144f4:	f7fe fc57 	bl	8012da6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d11d      	bne.n	801453c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014506:	861a      	strh	r2, [r3, #48]	; 0x30
 8014508:	e01f      	b.n	801454a <tcp_process+0x2ea>
 801450a:	bf00      	nop
 801450c:	0801d14c 	.word	0x0801d14c
 8014510:	0801d384 	.word	0x0801d384
 8014514:	0801d198 	.word	0x0801d198
 8014518:	24004b28 	.word	0x24004b28
 801451c:	24004b20 	.word	0x24004b20
 8014520:	24004b1c 	.word	0x24004b1c
 8014524:	0801d3a0 	.word	0x0801d3a0
 8014528:	24004b29 	.word	0x24004b29
 801452c:	24008274 	.word	0x24008274
 8014530:	24004b0c 	.word	0x24004b0c
 8014534:	0801d3c0 	.word	0x0801d3c0
 8014538:	0801d3d8 	.word	0x0801d3d8
        } else {
          pcb->rtime = 0;
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	2200      	movs	r2, #0
 8014540:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	2200      	movs	r2, #0
 8014546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014550:	2b00      	cmp	r3, #0
 8014552:	d00a      	beq.n	801456a <tcp_process+0x30a>
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801455a:	687a      	ldr	r2, [r7, #4]
 801455c:	6910      	ldr	r0, [r2, #16]
 801455e:	2200      	movs	r2, #0
 8014560:	6879      	ldr	r1, [r7, #4]
 8014562:	4798      	blx	r3
 8014564:	4603      	mov	r3, r0
 8014566:	76bb      	strb	r3, [r7, #26]
 8014568:	e001      	b.n	801456e <tcp_process+0x30e>
 801456a:	2300      	movs	r3, #0
 801456c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801456e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014572:	f113 0f0d 	cmn.w	r3, #13
 8014576:	d102      	bne.n	801457e <tcp_process+0x31e>
          return ERR_ABRT;
 8014578:	f06f 030c 	mvn.w	r3, #12
 801457c:	e250      	b.n	8014a20 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	8b5b      	ldrh	r3, [r3, #26]
 8014582:	f043 0302 	orr.w	r3, r3, #2
 8014586:	b29a      	uxth	r2, r3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801458c:	e23a      	b.n	8014a04 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801458e:	4b9d      	ldr	r3, [pc, #628]	; (8014804 <tcp_process+0x5a4>)
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	f003 0310 	and.w	r3, r3, #16
 8014596:	2b00      	cmp	r3, #0
 8014598:	f000 8234 	beq.w	8014a04 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801459c:	4b9a      	ldr	r3, [pc, #616]	; (8014808 <tcp_process+0x5a8>)
 801459e:	6819      	ldr	r1, [r3, #0]
 80145a0:	4b9a      	ldr	r3, [pc, #616]	; (801480c <tcp_process+0x5ac>)
 80145a2:	881b      	ldrh	r3, [r3, #0]
 80145a4:	461a      	mov	r2, r3
 80145a6:	4b9a      	ldr	r3, [pc, #616]	; (8014810 <tcp_process+0x5b0>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145ac:	4b99      	ldr	r3, [pc, #612]	; (8014814 <tcp_process+0x5b4>)
 80145ae:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145b0:	885b      	ldrh	r3, [r3, #2]
 80145b2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145b4:	4a97      	ldr	r2, [pc, #604]	; (8014814 <tcp_process+0x5b4>)
 80145b6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145b8:	8812      	ldrh	r2, [r2, #0]
 80145ba:	b292      	uxth	r2, r2
 80145bc:	9202      	str	r2, [sp, #8]
 80145be:	9301      	str	r3, [sp, #4]
 80145c0:	4b95      	ldr	r3, [pc, #596]	; (8014818 <tcp_process+0x5b8>)
 80145c2:	9300      	str	r3, [sp, #0]
 80145c4:	4b95      	ldr	r3, [pc, #596]	; (801481c <tcp_process+0x5bc>)
 80145c6:	4602      	mov	r2, r0
 80145c8:	6878      	ldr	r0, [r7, #4]
 80145ca:	f003 f8db 	bl	8017784 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80145ce:	687b      	ldr	r3, [r7, #4]
 80145d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80145d4:	2b05      	cmp	r3, #5
 80145d6:	f200 8215 	bhi.w	8014a04 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2200      	movs	r2, #0
 80145de:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80145e0:	6878      	ldr	r0, [r7, #4]
 80145e2:	f002 fea5 	bl	8017330 <tcp_rexmit_rto>
      break;
 80145e6:	e20d      	b.n	8014a04 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80145e8:	4b86      	ldr	r3, [pc, #536]	; (8014804 <tcp_process+0x5a4>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	f003 0310 	and.w	r3, r3, #16
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f000 80a1 	beq.w	8014738 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80145f6:	4b84      	ldr	r3, [pc, #528]	; (8014808 <tcp_process+0x5a8>)
 80145f8:	681a      	ldr	r2, [r3, #0]
 80145fa:	687b      	ldr	r3, [r7, #4]
 80145fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145fe:	1ad3      	subs	r3, r2, r3
 8014600:	3b01      	subs	r3, #1
 8014602:	2b00      	cmp	r3, #0
 8014604:	db7e      	blt.n	8014704 <tcp_process+0x4a4>
 8014606:	4b80      	ldr	r3, [pc, #512]	; (8014808 <tcp_process+0x5a8>)
 8014608:	681a      	ldr	r2, [r3, #0]
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801460e:	1ad3      	subs	r3, r2, r3
 8014610:	2b00      	cmp	r3, #0
 8014612:	dc77      	bgt.n	8014704 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2204      	movs	r2, #4
 8014618:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801461e:	2b00      	cmp	r3, #0
 8014620:	d102      	bne.n	8014628 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014622:	23fa      	movs	r3, #250	; 0xfa
 8014624:	76bb      	strb	r3, [r7, #26]
 8014626:	e01d      	b.n	8014664 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801462c:	699b      	ldr	r3, [r3, #24]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d106      	bne.n	8014640 <tcp_process+0x3e0>
 8014632:	4b7b      	ldr	r3, [pc, #492]	; (8014820 <tcp_process+0x5c0>)
 8014634:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014638:	497a      	ldr	r1, [pc, #488]	; (8014824 <tcp_process+0x5c4>)
 801463a:	487b      	ldr	r0, [pc, #492]	; (8014828 <tcp_process+0x5c8>)
 801463c:	f006 fb9e 	bl	801ad7c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014644:	699b      	ldr	r3, [r3, #24]
 8014646:	2b00      	cmp	r3, #0
 8014648:	d00a      	beq.n	8014660 <tcp_process+0x400>
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801464e:	699b      	ldr	r3, [r3, #24]
 8014650:	687a      	ldr	r2, [r7, #4]
 8014652:	6910      	ldr	r0, [r2, #16]
 8014654:	2200      	movs	r2, #0
 8014656:	6879      	ldr	r1, [r7, #4]
 8014658:	4798      	blx	r3
 801465a:	4603      	mov	r3, r0
 801465c:	76bb      	strb	r3, [r7, #26]
 801465e:	e001      	b.n	8014664 <tcp_process+0x404>
 8014660:	23f0      	movs	r3, #240	; 0xf0
 8014662:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014664:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d00a      	beq.n	8014682 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801466c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014670:	f113 0f0d 	cmn.w	r3, #13
 8014674:	d002      	beq.n	801467c <tcp_process+0x41c>
              tcp_abort(pcb);
 8014676:	6878      	ldr	r0, [r7, #4]
 8014678:	f7fd fcf0 	bl	801205c <tcp_abort>
            }
            return ERR_ABRT;
 801467c:	f06f 030c 	mvn.w	r3, #12
 8014680:	e1ce      	b.n	8014a20 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f000 fae0 	bl	8014c48 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014688:	4b68      	ldr	r3, [pc, #416]	; (801482c <tcp_process+0x5cc>)
 801468a:	881b      	ldrh	r3, [r3, #0]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d005      	beq.n	801469c <tcp_process+0x43c>
            recv_acked--;
 8014690:	4b66      	ldr	r3, [pc, #408]	; (801482c <tcp_process+0x5cc>)
 8014692:	881b      	ldrh	r3, [r3, #0]
 8014694:	3b01      	subs	r3, #1
 8014696:	b29a      	uxth	r2, r3
 8014698:	4b64      	ldr	r3, [pc, #400]	; (801482c <tcp_process+0x5cc>)
 801469a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146a0:	009a      	lsls	r2, r3, #2
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146a6:	005b      	lsls	r3, r3, #1
 80146a8:	f241 111c 	movw	r1, #4380	; 0x111c
 80146ac:	428b      	cmp	r3, r1
 80146ae:	bf38      	it	cc
 80146b0:	460b      	movcc	r3, r1
 80146b2:	429a      	cmp	r2, r3
 80146b4:	d204      	bcs.n	80146c0 <tcp_process+0x460>
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	b29b      	uxth	r3, r3
 80146be:	e00d      	b.n	80146dc <tcp_process+0x47c>
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146c4:	005b      	lsls	r3, r3, #1
 80146c6:	f241 121c 	movw	r2, #4380	; 0x111c
 80146ca:	4293      	cmp	r3, r2
 80146cc:	d904      	bls.n	80146d8 <tcp_process+0x478>
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146d2:	005b      	lsls	r3, r3, #1
 80146d4:	b29b      	uxth	r3, r3
 80146d6:	e001      	b.n	80146dc <tcp_process+0x47c>
 80146d8:	f241 131c 	movw	r3, #4380	; 0x111c
 80146dc:	687a      	ldr	r2, [r7, #4]
 80146de:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80146e2:	4b53      	ldr	r3, [pc, #332]	; (8014830 <tcp_process+0x5d0>)
 80146e4:	781b      	ldrb	r3, [r3, #0]
 80146e6:	f003 0320 	and.w	r3, r3, #32
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d037      	beq.n	801475e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	8b5b      	ldrh	r3, [r3, #26]
 80146f2:	f043 0302 	orr.w	r3, r3, #2
 80146f6:	b29a      	uxth	r2, r3
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2207      	movs	r2, #7
 8014700:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014702:	e02c      	b.n	801475e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014704:	4b40      	ldr	r3, [pc, #256]	; (8014808 <tcp_process+0x5a8>)
 8014706:	6819      	ldr	r1, [r3, #0]
 8014708:	4b40      	ldr	r3, [pc, #256]	; (801480c <tcp_process+0x5ac>)
 801470a:	881b      	ldrh	r3, [r3, #0]
 801470c:	461a      	mov	r2, r3
 801470e:	4b40      	ldr	r3, [pc, #256]	; (8014810 <tcp_process+0x5b0>)
 8014710:	681b      	ldr	r3, [r3, #0]
 8014712:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014714:	4b3f      	ldr	r3, [pc, #252]	; (8014814 <tcp_process+0x5b4>)
 8014716:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014718:	885b      	ldrh	r3, [r3, #2]
 801471a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801471c:	4a3d      	ldr	r2, [pc, #244]	; (8014814 <tcp_process+0x5b4>)
 801471e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014720:	8812      	ldrh	r2, [r2, #0]
 8014722:	b292      	uxth	r2, r2
 8014724:	9202      	str	r2, [sp, #8]
 8014726:	9301      	str	r3, [sp, #4]
 8014728:	4b3b      	ldr	r3, [pc, #236]	; (8014818 <tcp_process+0x5b8>)
 801472a:	9300      	str	r3, [sp, #0]
 801472c:	4b3b      	ldr	r3, [pc, #236]	; (801481c <tcp_process+0x5bc>)
 801472e:	4602      	mov	r2, r0
 8014730:	6878      	ldr	r0, [r7, #4]
 8014732:	f003 f827 	bl	8017784 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014736:	e167      	b.n	8014a08 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014738:	4b32      	ldr	r3, [pc, #200]	; (8014804 <tcp_process+0x5a4>)
 801473a:	781b      	ldrb	r3, [r3, #0]
 801473c:	f003 0302 	and.w	r3, r3, #2
 8014740:	2b00      	cmp	r3, #0
 8014742:	f000 8161 	beq.w	8014a08 <tcp_process+0x7a8>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801474a:	1e5a      	subs	r2, r3, #1
 801474c:	4b30      	ldr	r3, [pc, #192]	; (8014810 <tcp_process+0x5b0>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	429a      	cmp	r2, r3
 8014752:	f040 8159 	bne.w	8014a08 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f002 fe0c 	bl	8017374 <tcp_rexmit>
      break;
 801475c:	e154      	b.n	8014a08 <tcp_process+0x7a8>
 801475e:	e153      	b.n	8014a08 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014760:	6878      	ldr	r0, [r7, #4]
 8014762:	f000 fa71 	bl	8014c48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8014766:	4b32      	ldr	r3, [pc, #200]	; (8014830 <tcp_process+0x5d0>)
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	f003 0320 	and.w	r3, r3, #32
 801476e:	2b00      	cmp	r3, #0
 8014770:	f000 814c 	beq.w	8014a0c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	8b5b      	ldrh	r3, [r3, #26]
 8014778:	f043 0302 	orr.w	r3, r3, #2
 801477c:	b29a      	uxth	r2, r3
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	2207      	movs	r2, #7
 8014786:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014788:	e140      	b.n	8014a0c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f000 fa5c 	bl	8014c48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014790:	4b27      	ldr	r3, [pc, #156]	; (8014830 <tcp_process+0x5d0>)
 8014792:	781b      	ldrb	r3, [r3, #0]
 8014794:	f003 0320 	and.w	r3, r3, #32
 8014798:	2b00      	cmp	r3, #0
 801479a:	d071      	beq.n	8014880 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801479c:	4b19      	ldr	r3, [pc, #100]	; (8014804 <tcp_process+0x5a4>)
 801479e:	781b      	ldrb	r3, [r3, #0]
 80147a0:	f003 0310 	and.w	r3, r3, #16
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d060      	beq.n	801486a <tcp_process+0x60a>
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80147ac:	4b16      	ldr	r3, [pc, #88]	; (8014808 <tcp_process+0x5a8>)
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	429a      	cmp	r2, r3
 80147b2:	d15a      	bne.n	801486a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d156      	bne.n	801486a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	8b5b      	ldrh	r3, [r3, #26]
 80147c0:	f043 0302 	orr.w	r3, r3, #2
 80147c4:	b29a      	uxth	r2, r3
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80147ca:	6878      	ldr	r0, [r7, #4]
 80147cc:	f7fe fdbe 	bl	801334c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80147d0:	4b18      	ldr	r3, [pc, #96]	; (8014834 <tcp_process+0x5d4>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	429a      	cmp	r2, r3
 80147d8:	d105      	bne.n	80147e6 <tcp_process+0x586>
 80147da:	4b16      	ldr	r3, [pc, #88]	; (8014834 <tcp_process+0x5d4>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	68db      	ldr	r3, [r3, #12]
 80147e0:	4a14      	ldr	r2, [pc, #80]	; (8014834 <tcp_process+0x5d4>)
 80147e2:	6013      	str	r3, [r2, #0]
 80147e4:	e02e      	b.n	8014844 <tcp_process+0x5e4>
 80147e6:	4b13      	ldr	r3, [pc, #76]	; (8014834 <tcp_process+0x5d4>)
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	617b      	str	r3, [r7, #20]
 80147ec:	e027      	b.n	801483e <tcp_process+0x5de>
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	68db      	ldr	r3, [r3, #12]
 80147f2:	687a      	ldr	r2, [r7, #4]
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d11f      	bne.n	8014838 <tcp_process+0x5d8>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	68da      	ldr	r2, [r3, #12]
 80147fc:	697b      	ldr	r3, [r7, #20]
 80147fe:	60da      	str	r2, [r3, #12]
 8014800:	e020      	b.n	8014844 <tcp_process+0x5e4>
 8014802:	bf00      	nop
 8014804:	24004b28 	.word	0x24004b28
 8014808:	24004b20 	.word	0x24004b20
 801480c:	24004b26 	.word	0x24004b26
 8014810:	24004b1c 	.word	0x24004b1c
 8014814:	24004b0c 	.word	0x24004b0c
 8014818:	240051c0 	.word	0x240051c0
 801481c:	240051c4 	.word	0x240051c4
 8014820:	0801d14c 	.word	0x0801d14c
 8014824:	0801d3ec 	.word	0x0801d3ec
 8014828:	0801d198 	.word	0x0801d198
 801482c:	24004b24 	.word	0x24004b24
 8014830:	24004b29 	.word	0x24004b29
 8014834:	24008270 	.word	0x24008270
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	68db      	ldr	r3, [r3, #12]
 801483c:	617b      	str	r3, [r7, #20]
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d1d4      	bne.n	80147ee <tcp_process+0x58e>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	2200      	movs	r2, #0
 8014848:	60da      	str	r2, [r3, #12]
 801484a:	4b77      	ldr	r3, [pc, #476]	; (8014a28 <tcp_process+0x7c8>)
 801484c:	2201      	movs	r2, #1
 801484e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014850:	687b      	ldr	r3, [r7, #4]
 8014852:	220a      	movs	r2, #10
 8014854:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8014856:	4b75      	ldr	r3, [pc, #468]	; (8014a2c <tcp_process+0x7cc>)
 8014858:	681a      	ldr	r2, [r3, #0]
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	60da      	str	r2, [r3, #12]
 801485e:	4a73      	ldr	r2, [pc, #460]	; (8014a2c <tcp_process+0x7cc>)
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6013      	str	r3, [r2, #0]
 8014864:	f003 f950 	bl	8017b08 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8014868:	e0d2      	b.n	8014a10 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	8b5b      	ldrh	r3, [r3, #26]
 801486e:	f043 0302 	orr.w	r3, r3, #2
 8014872:	b29a      	uxth	r2, r3
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2208      	movs	r2, #8
 801487c:	751a      	strb	r2, [r3, #20]
      break;
 801487e:	e0c7      	b.n	8014a10 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014880:	4b6b      	ldr	r3, [pc, #428]	; (8014a30 <tcp_process+0x7d0>)
 8014882:	781b      	ldrb	r3, [r3, #0]
 8014884:	f003 0310 	and.w	r3, r3, #16
 8014888:	2b00      	cmp	r3, #0
 801488a:	f000 80c1 	beq.w	8014a10 <tcp_process+0x7b0>
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014892:	4b68      	ldr	r3, [pc, #416]	; (8014a34 <tcp_process+0x7d4>)
 8014894:	681b      	ldr	r3, [r3, #0]
 8014896:	429a      	cmp	r2, r3
 8014898:	f040 80ba 	bne.w	8014a10 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	f040 80b5 	bne.w	8014a10 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	2206      	movs	r2, #6
 80148aa:	751a      	strb	r2, [r3, #20]
      break;
 80148ac:	e0b0      	b.n	8014a10 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80148ae:	6878      	ldr	r0, [r7, #4]
 80148b0:	f000 f9ca 	bl	8014c48 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80148b4:	4b60      	ldr	r3, [pc, #384]	; (8014a38 <tcp_process+0x7d8>)
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	f003 0320 	and.w	r3, r3, #32
 80148bc:	2b00      	cmp	r3, #0
 80148be:	f000 80a9 	beq.w	8014a14 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	8b5b      	ldrh	r3, [r3, #26]
 80148c6:	f043 0302 	orr.w	r3, r3, #2
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80148d0:	6878      	ldr	r0, [r7, #4]
 80148d2:	f7fe fd3b 	bl	801334c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80148d6:	4b59      	ldr	r3, [pc, #356]	; (8014a3c <tcp_process+0x7dc>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	687a      	ldr	r2, [r7, #4]
 80148dc:	429a      	cmp	r2, r3
 80148de:	d105      	bne.n	80148ec <tcp_process+0x68c>
 80148e0:	4b56      	ldr	r3, [pc, #344]	; (8014a3c <tcp_process+0x7dc>)
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	68db      	ldr	r3, [r3, #12]
 80148e6:	4a55      	ldr	r2, [pc, #340]	; (8014a3c <tcp_process+0x7dc>)
 80148e8:	6013      	str	r3, [r2, #0]
 80148ea:	e013      	b.n	8014914 <tcp_process+0x6b4>
 80148ec:	4b53      	ldr	r3, [pc, #332]	; (8014a3c <tcp_process+0x7dc>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	613b      	str	r3, [r7, #16]
 80148f2:	e00c      	b.n	801490e <tcp_process+0x6ae>
 80148f4:	693b      	ldr	r3, [r7, #16]
 80148f6:	68db      	ldr	r3, [r3, #12]
 80148f8:	687a      	ldr	r2, [r7, #4]
 80148fa:	429a      	cmp	r2, r3
 80148fc:	d104      	bne.n	8014908 <tcp_process+0x6a8>
 80148fe:	687b      	ldr	r3, [r7, #4]
 8014900:	68da      	ldr	r2, [r3, #12]
 8014902:	693b      	ldr	r3, [r7, #16]
 8014904:	60da      	str	r2, [r3, #12]
 8014906:	e005      	b.n	8014914 <tcp_process+0x6b4>
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	68db      	ldr	r3, [r3, #12]
 801490c:	613b      	str	r3, [r7, #16]
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d1ef      	bne.n	80148f4 <tcp_process+0x694>
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	2200      	movs	r2, #0
 8014918:	60da      	str	r2, [r3, #12]
 801491a:	4b43      	ldr	r3, [pc, #268]	; (8014a28 <tcp_process+0x7c8>)
 801491c:	2201      	movs	r2, #1
 801491e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	220a      	movs	r2, #10
 8014924:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014926:	4b41      	ldr	r3, [pc, #260]	; (8014a2c <tcp_process+0x7cc>)
 8014928:	681a      	ldr	r2, [r3, #0]
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	60da      	str	r2, [r3, #12]
 801492e:	4a3f      	ldr	r2, [pc, #252]	; (8014a2c <tcp_process+0x7cc>)
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	6013      	str	r3, [r2, #0]
 8014934:	f003 f8e8 	bl	8017b08 <tcp_timer_needed>
      }
      break;
 8014938:	e06c      	b.n	8014a14 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 f984 	bl	8014c48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014940:	4b3b      	ldr	r3, [pc, #236]	; (8014a30 <tcp_process+0x7d0>)
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	f003 0310 	and.w	r3, r3, #16
 8014948:	2b00      	cmp	r3, #0
 801494a:	d065      	beq.n	8014a18 <tcp_process+0x7b8>
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014950:	4b38      	ldr	r3, [pc, #224]	; (8014a34 <tcp_process+0x7d4>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	429a      	cmp	r2, r3
 8014956:	d15f      	bne.n	8014a18 <tcp_process+0x7b8>
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801495c:	2b00      	cmp	r3, #0
 801495e:	d15b      	bne.n	8014a18 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	f7fe fcf3 	bl	801334c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014966:	4b35      	ldr	r3, [pc, #212]	; (8014a3c <tcp_process+0x7dc>)
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	687a      	ldr	r2, [r7, #4]
 801496c:	429a      	cmp	r2, r3
 801496e:	d105      	bne.n	801497c <tcp_process+0x71c>
 8014970:	4b32      	ldr	r3, [pc, #200]	; (8014a3c <tcp_process+0x7dc>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	68db      	ldr	r3, [r3, #12]
 8014976:	4a31      	ldr	r2, [pc, #196]	; (8014a3c <tcp_process+0x7dc>)
 8014978:	6013      	str	r3, [r2, #0]
 801497a:	e013      	b.n	80149a4 <tcp_process+0x744>
 801497c:	4b2f      	ldr	r3, [pc, #188]	; (8014a3c <tcp_process+0x7dc>)
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	60fb      	str	r3, [r7, #12]
 8014982:	e00c      	b.n	801499e <tcp_process+0x73e>
 8014984:	68fb      	ldr	r3, [r7, #12]
 8014986:	68db      	ldr	r3, [r3, #12]
 8014988:	687a      	ldr	r2, [r7, #4]
 801498a:	429a      	cmp	r2, r3
 801498c:	d104      	bne.n	8014998 <tcp_process+0x738>
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	68da      	ldr	r2, [r3, #12]
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	60da      	str	r2, [r3, #12]
 8014996:	e005      	b.n	80149a4 <tcp_process+0x744>
 8014998:	68fb      	ldr	r3, [r7, #12]
 801499a:	68db      	ldr	r3, [r3, #12]
 801499c:	60fb      	str	r3, [r7, #12]
 801499e:	68fb      	ldr	r3, [r7, #12]
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d1ef      	bne.n	8014984 <tcp_process+0x724>
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2200      	movs	r2, #0
 80149a8:	60da      	str	r2, [r3, #12]
 80149aa:	4b1f      	ldr	r3, [pc, #124]	; (8014a28 <tcp_process+0x7c8>)
 80149ac:	2201      	movs	r2, #1
 80149ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	220a      	movs	r2, #10
 80149b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80149b6:	4b1d      	ldr	r3, [pc, #116]	; (8014a2c <tcp_process+0x7cc>)
 80149b8:	681a      	ldr	r2, [r3, #0]
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	60da      	str	r2, [r3, #12]
 80149be:	4a1b      	ldr	r2, [pc, #108]	; (8014a2c <tcp_process+0x7cc>)
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	6013      	str	r3, [r2, #0]
 80149c4:	f003 f8a0 	bl	8017b08 <tcp_timer_needed>
      }
      break;
 80149c8:	e026      	b.n	8014a18 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80149ca:	6878      	ldr	r0, [r7, #4]
 80149cc:	f000 f93c 	bl	8014c48 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80149d0:	4b17      	ldr	r3, [pc, #92]	; (8014a30 <tcp_process+0x7d0>)
 80149d2:	781b      	ldrb	r3, [r3, #0]
 80149d4:	f003 0310 	and.w	r3, r3, #16
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d01f      	beq.n	8014a1c <tcp_process+0x7bc>
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149e0:	4b14      	ldr	r3, [pc, #80]	; (8014a34 <tcp_process+0x7d4>)
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	429a      	cmp	r2, r3
 80149e6:	d119      	bne.n	8014a1c <tcp_process+0x7bc>
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d115      	bne.n	8014a1c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80149f0:	4b11      	ldr	r3, [pc, #68]	; (8014a38 <tcp_process+0x7d8>)
 80149f2:	781b      	ldrb	r3, [r3, #0]
 80149f4:	f043 0310 	orr.w	r3, r3, #16
 80149f8:	b2da      	uxtb	r2, r3
 80149fa:	4b0f      	ldr	r3, [pc, #60]	; (8014a38 <tcp_process+0x7d8>)
 80149fc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80149fe:	e00d      	b.n	8014a1c <tcp_process+0x7bc>
    default:
      break;
 8014a00:	bf00      	nop
 8014a02:	e00c      	b.n	8014a1e <tcp_process+0x7be>
      break;
 8014a04:	bf00      	nop
 8014a06:	e00a      	b.n	8014a1e <tcp_process+0x7be>
      break;
 8014a08:	bf00      	nop
 8014a0a:	e008      	b.n	8014a1e <tcp_process+0x7be>
      break;
 8014a0c:	bf00      	nop
 8014a0e:	e006      	b.n	8014a1e <tcp_process+0x7be>
      break;
 8014a10:	bf00      	nop
 8014a12:	e004      	b.n	8014a1e <tcp_process+0x7be>
      break;
 8014a14:	bf00      	nop
 8014a16:	e002      	b.n	8014a1e <tcp_process+0x7be>
      break;
 8014a18:	bf00      	nop
 8014a1a:	e000      	b.n	8014a1e <tcp_process+0x7be>
      break;
 8014a1c:	bf00      	nop
  }
  return ERR_OK;
 8014a1e:	2300      	movs	r3, #0
}
 8014a20:	4618      	mov	r0, r3
 8014a22:	3724      	adds	r7, #36	; 0x24
 8014a24:	46bd      	mov	sp, r7
 8014a26:	bd90      	pop	{r4, r7, pc}
 8014a28:	2400826c 	.word	0x2400826c
 8014a2c:	24008280 	.word	0x24008280
 8014a30:	24004b28 	.word	0x24004b28
 8014a34:	24004b20 	.word	0x24004b20
 8014a38:	24004b29 	.word	0x24004b29
 8014a3c:	24008270 	.word	0x24008270

08014a40 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014a40:	b590      	push	{r4, r7, lr}
 8014a42:	b085      	sub	sp, #20
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d106      	bne.n	8014a5e <tcp_oos_insert_segment+0x1e>
 8014a50:	4b3b      	ldr	r3, [pc, #236]	; (8014b40 <tcp_oos_insert_segment+0x100>)
 8014a52:	f240 421f 	movw	r2, #1055	; 0x41f
 8014a56:	493b      	ldr	r1, [pc, #236]	; (8014b44 <tcp_oos_insert_segment+0x104>)
 8014a58:	483b      	ldr	r0, [pc, #236]	; (8014b48 <tcp_oos_insert_segment+0x108>)
 8014a5a:	f006 f98f 	bl	801ad7c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	68db      	ldr	r3, [r3, #12]
 8014a62:	899b      	ldrh	r3, [r3, #12]
 8014a64:	b29b      	uxth	r3, r3
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7fb f8aa 	bl	800fbc0 <lwip_htons>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	b2db      	uxtb	r3, r3
 8014a70:	f003 0301 	and.w	r3, r3, #1
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d028      	beq.n	8014aca <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014a78:	6838      	ldr	r0, [r7, #0]
 8014a7a:	f7fe f97f 	bl	8012d7c <tcp_segs_free>
    next = NULL;
 8014a7e:	2300      	movs	r3, #0
 8014a80:	603b      	str	r3, [r7, #0]
 8014a82:	e056      	b.n	8014b32 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014a84:	683b      	ldr	r3, [r7, #0]
 8014a86:	68db      	ldr	r3, [r3, #12]
 8014a88:	899b      	ldrh	r3, [r3, #12]
 8014a8a:	b29b      	uxth	r3, r3
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f7fb f897 	bl	800fbc0 <lwip_htons>
 8014a92:	4603      	mov	r3, r0
 8014a94:	b2db      	uxtb	r3, r3
 8014a96:	f003 0301 	and.w	r3, r3, #1
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d00d      	beq.n	8014aba <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	68db      	ldr	r3, [r3, #12]
 8014aa2:	899b      	ldrh	r3, [r3, #12]
 8014aa4:	b29c      	uxth	r4, r3
 8014aa6:	2001      	movs	r0, #1
 8014aa8:	f7fb f88a 	bl	800fbc0 <lwip_htons>
 8014aac:	4603      	mov	r3, r0
 8014aae:	461a      	mov	r2, r3
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	68db      	ldr	r3, [r3, #12]
 8014ab4:	4322      	orrs	r2, r4
 8014ab6:	b292      	uxth	r2, r2
 8014ab8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014aba:	683b      	ldr	r3, [r7, #0]
 8014abc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014abe:	683b      	ldr	r3, [r7, #0]
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014ac4:	68f8      	ldr	r0, [r7, #12]
 8014ac6:	f7fe f96e 	bl	8012da6 <tcp_seg_free>
    while (next &&
 8014aca:	683b      	ldr	r3, [r7, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d00e      	beq.n	8014aee <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	891b      	ldrh	r3, [r3, #8]
 8014ad4:	461a      	mov	r2, r3
 8014ad6:	4b1d      	ldr	r3, [pc, #116]	; (8014b4c <tcp_oos_insert_segment+0x10c>)
 8014ad8:	681b      	ldr	r3, [r3, #0]
 8014ada:	441a      	add	r2, r3
 8014adc:	683b      	ldr	r3, [r7, #0]
 8014ade:	68db      	ldr	r3, [r3, #12]
 8014ae0:	685b      	ldr	r3, [r3, #4]
 8014ae2:	6839      	ldr	r1, [r7, #0]
 8014ae4:	8909      	ldrh	r1, [r1, #8]
 8014ae6:	440b      	add	r3, r1
 8014ae8:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	daca      	bge.n	8014a84 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d01e      	beq.n	8014b32 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	891b      	ldrh	r3, [r3, #8]
 8014af8:	461a      	mov	r2, r3
 8014afa:	4b14      	ldr	r3, [pc, #80]	; (8014b4c <tcp_oos_insert_segment+0x10c>)
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	441a      	add	r2, r3
 8014b00:	683b      	ldr	r3, [r7, #0]
 8014b02:	68db      	ldr	r3, [r3, #12]
 8014b04:	685b      	ldr	r3, [r3, #4]
 8014b06:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	dd12      	ble.n	8014b32 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014b0c:	683b      	ldr	r3, [r7, #0]
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	685b      	ldr	r3, [r3, #4]
 8014b12:	b29a      	uxth	r2, r3
 8014b14:	4b0d      	ldr	r3, [pc, #52]	; (8014b4c <tcp_oos_insert_segment+0x10c>)
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	b29b      	uxth	r3, r3
 8014b1a:	1ad3      	subs	r3, r2, r3
 8014b1c:	b29a      	uxth	r2, r3
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	685a      	ldr	r2, [r3, #4]
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	891b      	ldrh	r3, [r3, #8]
 8014b2a:	4619      	mov	r1, r3
 8014b2c:	4610      	mov	r0, r2
 8014b2e:	f7fc fb6b 	bl	8011208 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	683a      	ldr	r2, [r7, #0]
 8014b36:	601a      	str	r2, [r3, #0]
}
 8014b38:	bf00      	nop
 8014b3a:	3714      	adds	r7, #20
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd90      	pop	{r4, r7, pc}
 8014b40:	0801d14c 	.word	0x0801d14c
 8014b44:	0801d40c 	.word	0x0801d40c
 8014b48:	0801d198 	.word	0x0801d198
 8014b4c:	24004b1c 	.word	0x24004b1c

08014b50 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014b50:	b5b0      	push	{r4, r5, r7, lr}
 8014b52:	b086      	sub	sp, #24
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	607a      	str	r2, [r7, #4]
 8014b5c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014b5e:	e03e      	b.n	8014bde <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014b60:	68bb      	ldr	r3, [r7, #8]
 8014b62:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014b64:	68bb      	ldr	r3, [r7, #8]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014b6a:	697b      	ldr	r3, [r7, #20]
 8014b6c:	685b      	ldr	r3, [r3, #4]
 8014b6e:	4618      	mov	r0, r3
 8014b70:	f7fc fd5e 	bl	8011630 <pbuf_clen>
 8014b74:	4603      	mov	r3, r0
 8014b76:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014b7e:	8a7a      	ldrh	r2, [r7, #18]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d906      	bls.n	8014b92 <tcp_free_acked_segments+0x42>
 8014b84:	4b2a      	ldr	r3, [pc, #168]	; (8014c30 <tcp_free_acked_segments+0xe0>)
 8014b86:	f240 4257 	movw	r2, #1111	; 0x457
 8014b8a:	492a      	ldr	r1, [pc, #168]	; (8014c34 <tcp_free_acked_segments+0xe4>)
 8014b8c:	482a      	ldr	r0, [pc, #168]	; (8014c38 <tcp_free_acked_segments+0xe8>)
 8014b8e:	f006 f8f5 	bl	801ad7c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014b98:	8a7b      	ldrh	r3, [r7, #18]
 8014b9a:	1ad3      	subs	r3, r2, r3
 8014b9c:	b29a      	uxth	r2, r3
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014ba4:	697b      	ldr	r3, [r7, #20]
 8014ba6:	891a      	ldrh	r2, [r3, #8]
 8014ba8:	4b24      	ldr	r3, [pc, #144]	; (8014c3c <tcp_free_acked_segments+0xec>)
 8014baa:	881b      	ldrh	r3, [r3, #0]
 8014bac:	4413      	add	r3, r2
 8014bae:	b29a      	uxth	r2, r3
 8014bb0:	4b22      	ldr	r3, [pc, #136]	; (8014c3c <tcp_free_acked_segments+0xec>)
 8014bb2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014bb4:	6978      	ldr	r0, [r7, #20]
 8014bb6:	f7fe f8f6 	bl	8012da6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d00c      	beq.n	8014bde <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014bc4:	68bb      	ldr	r3, [r7, #8]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d109      	bne.n	8014bde <tcp_free_acked_segments+0x8e>
 8014bca:	683b      	ldr	r3, [r7, #0]
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	d106      	bne.n	8014bde <tcp_free_acked_segments+0x8e>
 8014bd0:	4b17      	ldr	r3, [pc, #92]	; (8014c30 <tcp_free_acked_segments+0xe0>)
 8014bd2:	f240 4261 	movw	r2, #1121	; 0x461
 8014bd6:	491a      	ldr	r1, [pc, #104]	; (8014c40 <tcp_free_acked_segments+0xf0>)
 8014bd8:	4817      	ldr	r0, [pc, #92]	; (8014c38 <tcp_free_acked_segments+0xe8>)
 8014bda:	f006 f8cf 	bl	801ad7c <iprintf>
  while (seg_list != NULL &&
 8014bde:	68bb      	ldr	r3, [r7, #8]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d020      	beq.n	8014c26 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014be4:	68bb      	ldr	r3, [r7, #8]
 8014be6:	68db      	ldr	r3, [r3, #12]
 8014be8:	685b      	ldr	r3, [r3, #4]
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7fa fffd 	bl	800fbea <lwip_htonl>
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	68bb      	ldr	r3, [r7, #8]
 8014bf4:	891b      	ldrh	r3, [r3, #8]
 8014bf6:	461d      	mov	r5, r3
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	899b      	ldrh	r3, [r3, #12]
 8014bfe:	b29b      	uxth	r3, r3
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7fa ffdd 	bl	800fbc0 <lwip_htons>
 8014c06:	4603      	mov	r3, r0
 8014c08:	b2db      	uxtb	r3, r3
 8014c0a:	f003 0303 	and.w	r3, r3, #3
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d001      	beq.n	8014c16 <tcp_free_acked_segments+0xc6>
 8014c12:	2301      	movs	r3, #1
 8014c14:	e000      	b.n	8014c18 <tcp_free_acked_segments+0xc8>
 8014c16:	2300      	movs	r3, #0
 8014c18:	442b      	add	r3, r5
 8014c1a:	18e2      	adds	r2, r4, r3
 8014c1c:	4b09      	ldr	r3, [pc, #36]	; (8014c44 <tcp_free_acked_segments+0xf4>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	dd9c      	ble.n	8014b60 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014c26:	68bb      	ldr	r3, [r7, #8]
}
 8014c28:	4618      	mov	r0, r3
 8014c2a:	3718      	adds	r7, #24
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8014c30:	0801d14c 	.word	0x0801d14c
 8014c34:	0801d434 	.word	0x0801d434
 8014c38:	0801d198 	.word	0x0801d198
 8014c3c:	24004b24 	.word	0x24004b24
 8014c40:	0801d45c 	.word	0x0801d45c
 8014c44:	24004b20 	.word	0x24004b20

08014c48 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014c48:	b5b0      	push	{r4, r5, r7, lr}
 8014c4a:	b094      	sub	sp, #80	; 0x50
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014c50:	2300      	movs	r3, #0
 8014c52:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d106      	bne.n	8014c68 <tcp_receive+0x20>
 8014c5a:	4ba6      	ldr	r3, [pc, #664]	; (8014ef4 <tcp_receive+0x2ac>)
 8014c5c:	f240 427b 	movw	r2, #1147	; 0x47b
 8014c60:	49a5      	ldr	r1, [pc, #660]	; (8014ef8 <tcp_receive+0x2b0>)
 8014c62:	48a6      	ldr	r0, [pc, #664]	; (8014efc <tcp_receive+0x2b4>)
 8014c64:	f006 f88a 	bl	801ad7c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	7d1b      	ldrb	r3, [r3, #20]
 8014c6c:	2b03      	cmp	r3, #3
 8014c6e:	d806      	bhi.n	8014c7e <tcp_receive+0x36>
 8014c70:	4ba0      	ldr	r3, [pc, #640]	; (8014ef4 <tcp_receive+0x2ac>)
 8014c72:	f240 427c 	movw	r2, #1148	; 0x47c
 8014c76:	49a2      	ldr	r1, [pc, #648]	; (8014f00 <tcp_receive+0x2b8>)
 8014c78:	48a0      	ldr	r0, [pc, #640]	; (8014efc <tcp_receive+0x2b4>)
 8014c7a:	f006 f87f 	bl	801ad7c <iprintf>

  if (flags & TCP_ACK) {
 8014c7e:	4ba1      	ldr	r3, [pc, #644]	; (8014f04 <tcp_receive+0x2bc>)
 8014c80:	781b      	ldrb	r3, [r3, #0]
 8014c82:	f003 0310 	and.w	r3, r3, #16
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	f000 8263 	beq.w	8015152 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014c92:	461a      	mov	r2, r3
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014c98:	4413      	add	r3, r2
 8014c9a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014ca0:	4b99      	ldr	r3, [pc, #612]	; (8014f08 <tcp_receive+0x2c0>)
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	1ad3      	subs	r3, r2, r3
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	db1b      	blt.n	8014ce2 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014cae:	4b96      	ldr	r3, [pc, #600]	; (8014f08 <tcp_receive+0x2c0>)
 8014cb0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014cb2:	429a      	cmp	r2, r3
 8014cb4:	d106      	bne.n	8014cc4 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014cba:	4b94      	ldr	r3, [pc, #592]	; (8014f0c <tcp_receive+0x2c4>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	1ad3      	subs	r3, r2, r3
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	db0e      	blt.n	8014ce2 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014cc8:	4b90      	ldr	r3, [pc, #576]	; (8014f0c <tcp_receive+0x2c4>)
 8014cca:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014ccc:	429a      	cmp	r2, r3
 8014cce:	d125      	bne.n	8014d1c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014cd0:	4b8f      	ldr	r3, [pc, #572]	; (8014f10 <tcp_receive+0x2c8>)
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	89db      	ldrh	r3, [r3, #14]
 8014cd6:	b29a      	uxth	r2, r3
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014cde:	429a      	cmp	r2, r3
 8014ce0:	d91c      	bls.n	8014d1c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014ce2:	4b8b      	ldr	r3, [pc, #556]	; (8014f10 <tcp_receive+0x2c8>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	89db      	ldrh	r3, [r3, #14]
 8014ce8:	b29a      	uxth	r2, r3
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d205      	bcs.n	8014d0c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014d0c:	4b7e      	ldr	r3, [pc, #504]	; (8014f08 <tcp_receive+0x2c0>)
 8014d0e:	681a      	ldr	r2, [r3, #0]
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014d14:	4b7d      	ldr	r3, [pc, #500]	; (8014f0c <tcp_receive+0x2c4>)
 8014d16:	681a      	ldr	r2, [r3, #0]
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014d1c:	4b7b      	ldr	r3, [pc, #492]	; (8014f0c <tcp_receive+0x2c4>)
 8014d1e:	681a      	ldr	r2, [r3, #0]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d24:	1ad3      	subs	r3, r2, r3
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	dc58      	bgt.n	8014ddc <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014d2a:	4b7a      	ldr	r3, [pc, #488]	; (8014f14 <tcp_receive+0x2cc>)
 8014d2c:	881b      	ldrh	r3, [r3, #0]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d14b      	bne.n	8014dca <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d36:	687a      	ldr	r2, [r7, #4]
 8014d38:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014d3c:	4413      	add	r3, r2
 8014d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d142      	bne.n	8014dca <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	db3d      	blt.n	8014dca <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014d52:	4b6e      	ldr	r3, [pc, #440]	; (8014f0c <tcp_receive+0x2c4>)
 8014d54:	681b      	ldr	r3, [r3, #0]
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d137      	bne.n	8014dca <tcp_receive+0x182>
              found_dupack = 1;
 8014d5a:	2301      	movs	r3, #1
 8014d5c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d64:	2bff      	cmp	r3, #255	; 0xff
 8014d66:	d007      	beq.n	8014d78 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d6e:	3301      	adds	r3, #1
 8014d70:	b2da      	uxtb	r2, r3
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d7e:	2b03      	cmp	r3, #3
 8014d80:	d91b      	bls.n	8014dba <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014d8c:	4413      	add	r3, r2
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014d96:	429a      	cmp	r2, r3
 8014d98:	d30a      	bcc.n	8014db0 <tcp_receive+0x168>
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014da4:	4413      	add	r3, r2
 8014da6:	b29a      	uxth	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014dae:	e004      	b.n	8014dba <tcp_receive+0x172>
 8014db0:	687b      	ldr	r3, [r7, #4]
 8014db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014db6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014dc0:	2b02      	cmp	r3, #2
 8014dc2:	d902      	bls.n	8014dca <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014dc4:	6878      	ldr	r0, [r7, #4]
 8014dc6:	f002 fb41 	bl	801744c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014dca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	f040 8160 	bne.w	8015092 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	2200      	movs	r2, #0
 8014dd6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014dda:	e15a      	b.n	8015092 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014ddc:	4b4b      	ldr	r3, [pc, #300]	; (8014f0c <tcp_receive+0x2c4>)
 8014dde:	681a      	ldr	r2, [r3, #0]
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014de4:	1ad3      	subs	r3, r2, r3
 8014de6:	3b01      	subs	r3, #1
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	f2c0 814d 	blt.w	8015088 <tcp_receive+0x440>
 8014dee:	4b47      	ldr	r3, [pc, #284]	; (8014f0c <tcp_receive+0x2c4>)
 8014df0:	681a      	ldr	r2, [r3, #0]
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014df6:	1ad3      	subs	r3, r2, r3
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	f300 8145 	bgt.w	8015088 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	8b5b      	ldrh	r3, [r3, #26]
 8014e02:	f003 0304 	and.w	r3, r3, #4
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d010      	beq.n	8014e2c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	8b5b      	ldrh	r3, [r3, #26]
 8014e0e:	f023 0304 	bic.w	r3, r3, #4
 8014e12:	b29a      	uxth	r2, r3
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	2200      	movs	r2, #0
 8014e28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	2200      	movs	r2, #0
 8014e30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e3a:	10db      	asrs	r3, r3, #3
 8014e3c:	b21b      	sxth	r3, r3
 8014e3e:	b29a      	uxth	r2, r3
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014e46:	b29b      	uxth	r3, r3
 8014e48:	4413      	add	r3, r2
 8014e4a:	b29b      	uxth	r3, r3
 8014e4c:	b21a      	sxth	r2, r3
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014e54:	4b2d      	ldr	r3, [pc, #180]	; (8014f0c <tcp_receive+0x2c4>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	b29a      	uxth	r2, r3
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e5e:	b29b      	uxth	r3, r3
 8014e60:	1ad3      	subs	r3, r2, r3
 8014e62:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	2200      	movs	r2, #0
 8014e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014e6c:	4b27      	ldr	r3, [pc, #156]	; (8014f0c <tcp_receive+0x2c4>)
 8014e6e:	681a      	ldr	r2, [r3, #0]
 8014e70:	687b      	ldr	r3, [r7, #4]
 8014e72:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	7d1b      	ldrb	r3, [r3, #20]
 8014e78:	2b03      	cmp	r3, #3
 8014e7a:	f240 8096 	bls.w	8014faa <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d244      	bcs.n	8014f18 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	8b5b      	ldrh	r3, [r3, #26]
 8014e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d001      	beq.n	8014e9e <tcp_receive+0x256>
 8014e9a:	2301      	movs	r3, #1
 8014e9c:	e000      	b.n	8014ea0 <tcp_receive+0x258>
 8014e9e:	2302      	movs	r3, #2
 8014ea0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014ea4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014ea8:	b29a      	uxth	r2, r3
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014eae:	fb12 f303 	smulbb	r3, r2, r3
 8014eb2:	b29b      	uxth	r3, r3
 8014eb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014eb6:	4293      	cmp	r3, r2
 8014eb8:	bf28      	it	cs
 8014eba:	4613      	movcs	r3, r2
 8014ebc:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014ec4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014ec6:	4413      	add	r3, r2
 8014ec8:	b29a      	uxth	r2, r3
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014ed0:	429a      	cmp	r2, r3
 8014ed2:	d309      	bcc.n	8014ee8 <tcp_receive+0x2a0>
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014eda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014edc:	4413      	add	r3, r2
 8014ede:	b29a      	uxth	r2, r3
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014ee6:	e060      	b.n	8014faa <tcp_receive+0x362>
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014eee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014ef2:	e05a      	b.n	8014faa <tcp_receive+0x362>
 8014ef4:	0801d14c 	.word	0x0801d14c
 8014ef8:	0801d47c 	.word	0x0801d47c
 8014efc:	0801d198 	.word	0x0801d198
 8014f00:	0801d498 	.word	0x0801d498
 8014f04:	24004b28 	.word	0x24004b28
 8014f08:	24004b1c 	.word	0x24004b1c
 8014f0c:	24004b20 	.word	0x24004b20
 8014f10:	24004b0c 	.word	0x24004b0c
 8014f14:	24004b26 	.word	0x24004b26
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f20:	4413      	add	r3, r2
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d309      	bcc.n	8014f42 <tcp_receive+0x2fa>
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f36:	4413      	add	r3, r2
 8014f38:	b29a      	uxth	r2, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014f40:	e004      	b.n	8014f4c <tcp_receive+0x304>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f52:	687b      	ldr	r3, [r7, #4]
 8014f54:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f58:	429a      	cmp	r2, r3
 8014f5a:	d326      	bcc.n	8014faa <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014f5c:	687b      	ldr	r3, [r7, #4]
 8014f5e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f62:	687b      	ldr	r3, [r7, #4]
 8014f64:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	b29a      	uxth	r2, r3
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f7c:	4413      	add	r3, r2
 8014f7e:	b29a      	uxth	r2, r3
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d30a      	bcc.n	8014fa0 <tcp_receive+0x358>
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f94:	4413      	add	r3, r2
 8014f96:	b29a      	uxth	r2, r3
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f9e:	e004      	b.n	8014faa <tcp_receive+0x362>
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fa6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fb2:	4a98      	ldr	r2, [pc, #608]	; (8015214 <tcp_receive+0x5cc>)
 8014fb4:	6878      	ldr	r0, [r7, #4]
 8014fb6:	f7ff fdcb 	bl	8014b50 <tcp_free_acked_segments>
 8014fba:	4602      	mov	r2, r0
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc8:	4a93      	ldr	r2, [pc, #588]	; (8015218 <tcp_receive+0x5d0>)
 8014fca:	6878      	ldr	r0, [r7, #4]
 8014fcc:	f7ff fdc0 	bl	8014b50 <tcp_free_acked_segments>
 8014fd0:	4602      	mov	r2, r0
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d104      	bne.n	8014fe8 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fe4:	861a      	strh	r2, [r3, #48]	; 0x30
 8014fe6:	e002      	b.n	8014fee <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2200      	movs	r2, #0
 8014fec:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d103      	bne.n	8015004 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	2200      	movs	r2, #0
 8015000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801500a:	4b84      	ldr	r3, [pc, #528]	; (801521c <tcp_receive+0x5d4>)
 801500c:	881b      	ldrh	r3, [r3, #0]
 801500e:	4413      	add	r3, r2
 8015010:	b29a      	uxth	r2, r3
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	8b5b      	ldrh	r3, [r3, #26]
 801501c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015020:	2b00      	cmp	r3, #0
 8015022:	d035      	beq.n	8015090 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015028:	2b00      	cmp	r3, #0
 801502a:	d118      	bne.n	801505e <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015030:	2b00      	cmp	r3, #0
 8015032:	d00c      	beq.n	801504e <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801503c:	68db      	ldr	r3, [r3, #12]
 801503e:	685b      	ldr	r3, [r3, #4]
 8015040:	4618      	mov	r0, r3
 8015042:	f7fa fdd2 	bl	800fbea <lwip_htonl>
 8015046:	4603      	mov	r3, r0
 8015048:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801504a:	2b00      	cmp	r3, #0
 801504c:	dc20      	bgt.n	8015090 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	8b5b      	ldrh	r3, [r3, #26]
 8015052:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015056:	b29a      	uxth	r2, r3
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801505c:	e018      	b.n	8015090 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015066:	68db      	ldr	r3, [r3, #12]
 8015068:	685b      	ldr	r3, [r3, #4]
 801506a:	4618      	mov	r0, r3
 801506c:	f7fa fdbd 	bl	800fbea <lwip_htonl>
 8015070:	4603      	mov	r3, r0
 8015072:	1ae3      	subs	r3, r4, r3
 8015074:	2b00      	cmp	r3, #0
 8015076:	dc0b      	bgt.n	8015090 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	8b5b      	ldrh	r3, [r3, #26]
 801507c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8015080:	b29a      	uxth	r2, r3
 8015082:	687b      	ldr	r3, [r7, #4]
 8015084:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015086:	e003      	b.n	8015090 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015088:	6878      	ldr	r0, [r7, #4]
 801508a:	f002 fbcd 	bl	8017828 <tcp_send_empty_ack>
 801508e:	e000      	b.n	8015092 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015090:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015096:	2b00      	cmp	r3, #0
 8015098:	d05b      	beq.n	8015152 <tcp_receive+0x50a>
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801509e:	4b60      	ldr	r3, [pc, #384]	; (8015220 <tcp_receive+0x5d8>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	1ad3      	subs	r3, r2, r3
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	da54      	bge.n	8015152 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80150a8:	4b5e      	ldr	r3, [pc, #376]	; (8015224 <tcp_receive+0x5dc>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	b29a      	uxth	r2, r3
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	1ad3      	subs	r3, r2, r3
 80150b6:	b29b      	uxth	r3, r3
 80150b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80150bc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150c6:	10db      	asrs	r3, r3, #3
 80150c8:	b21b      	sxth	r3, r3
 80150ca:	b29b      	uxth	r3, r3
 80150cc:	1ad3      	subs	r3, r2, r3
 80150ce:	b29b      	uxth	r3, r3
 80150d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150da:	b29a      	uxth	r2, r3
 80150dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80150e0:	4413      	add	r3, r2
 80150e2:	b29b      	uxth	r3, r3
 80150e4:	b21a      	sxth	r2, r3
 80150e6:	687b      	ldr	r3, [r7, #4]
 80150e8:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80150ea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80150ee:	2b00      	cmp	r3, #0
 80150f0:	da05      	bge.n	80150fe <tcp_receive+0x4b6>
        m = (s16_t) - m;
 80150f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80150f6:	425b      	negs	r3, r3
 80150f8:	b29b      	uxth	r3, r3
 80150fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80150fe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015108:	109b      	asrs	r3, r3, #2
 801510a:	b21b      	sxth	r3, r3
 801510c:	b29b      	uxth	r3, r3
 801510e:	1ad3      	subs	r3, r2, r3
 8015110:	b29b      	uxth	r3, r3
 8015112:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801511c:	b29a      	uxth	r2, r3
 801511e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015122:	4413      	add	r3, r2
 8015124:	b29b      	uxth	r3, r3
 8015126:	b21a      	sxth	r2, r3
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015132:	10db      	asrs	r3, r3, #3
 8015134:	b21b      	sxth	r3, r3
 8015136:	b29a      	uxth	r2, r3
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801513e:	b29b      	uxth	r3, r3
 8015140:	4413      	add	r3, r2
 8015142:	b29b      	uxth	r3, r3
 8015144:	b21a      	sxth	r2, r3
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2200      	movs	r2, #0
 8015150:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015152:	4b35      	ldr	r3, [pc, #212]	; (8015228 <tcp_receive+0x5e0>)
 8015154:	881b      	ldrh	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	f000 84e1 	beq.w	8015b1e <tcp_receive+0xed6>
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	7d1b      	ldrb	r3, [r3, #20]
 8015160:	2b06      	cmp	r3, #6
 8015162:	f200 84dc 	bhi.w	8015b1e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801516a:	4b30      	ldr	r3, [pc, #192]	; (801522c <tcp_receive+0x5e4>)
 801516c:	681b      	ldr	r3, [r3, #0]
 801516e:	1ad3      	subs	r3, r2, r3
 8015170:	3b01      	subs	r3, #1
 8015172:	2b00      	cmp	r3, #0
 8015174:	f2c0 808e 	blt.w	8015294 <tcp_receive+0x64c>
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801517c:	4b2a      	ldr	r3, [pc, #168]	; (8015228 <tcp_receive+0x5e0>)
 801517e:	881b      	ldrh	r3, [r3, #0]
 8015180:	4619      	mov	r1, r3
 8015182:	4b2a      	ldr	r3, [pc, #168]	; (801522c <tcp_receive+0x5e4>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	440b      	add	r3, r1
 8015188:	1ad3      	subs	r3, r2, r3
 801518a:	3301      	adds	r3, #1
 801518c:	2b00      	cmp	r3, #0
 801518e:	f300 8081 	bgt.w	8015294 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015192:	4b27      	ldr	r3, [pc, #156]	; (8015230 <tcp_receive+0x5e8>)
 8015194:	685b      	ldr	r3, [r3, #4]
 8015196:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801519c:	4b23      	ldr	r3, [pc, #140]	; (801522c <tcp_receive+0x5e4>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	1ad3      	subs	r3, r2, r3
 80151a2:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80151a4:	4b22      	ldr	r3, [pc, #136]	; (8015230 <tcp_receive+0x5e8>)
 80151a6:	685b      	ldr	r3, [r3, #4]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d106      	bne.n	80151ba <tcp_receive+0x572>
 80151ac:	4b21      	ldr	r3, [pc, #132]	; (8015234 <tcp_receive+0x5ec>)
 80151ae:	f240 5294 	movw	r2, #1428	; 0x594
 80151b2:	4921      	ldr	r1, [pc, #132]	; (8015238 <tcp_receive+0x5f0>)
 80151b4:	4821      	ldr	r0, [pc, #132]	; (801523c <tcp_receive+0x5f4>)
 80151b6:	f005 fde1 	bl	801ad7c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80151c0:	4293      	cmp	r3, r2
 80151c2:	d906      	bls.n	80151d2 <tcp_receive+0x58a>
 80151c4:	4b1b      	ldr	r3, [pc, #108]	; (8015234 <tcp_receive+0x5ec>)
 80151c6:	f240 5295 	movw	r2, #1429	; 0x595
 80151ca:	491d      	ldr	r1, [pc, #116]	; (8015240 <tcp_receive+0x5f8>)
 80151cc:	481b      	ldr	r0, [pc, #108]	; (801523c <tcp_receive+0x5f4>)
 80151ce:	f005 fdd5 	bl	801ad7c <iprintf>
      off = (u16_t)off32;
 80151d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80151d8:	4b15      	ldr	r3, [pc, #84]	; (8015230 <tcp_receive+0x5e8>)
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	891b      	ldrh	r3, [r3, #8]
 80151de:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80151e2:	429a      	cmp	r2, r3
 80151e4:	d906      	bls.n	80151f4 <tcp_receive+0x5ac>
 80151e6:	4b13      	ldr	r3, [pc, #76]	; (8015234 <tcp_receive+0x5ec>)
 80151e8:	f240 5297 	movw	r2, #1431	; 0x597
 80151ec:	4915      	ldr	r1, [pc, #84]	; (8015244 <tcp_receive+0x5fc>)
 80151ee:	4813      	ldr	r0, [pc, #76]	; (801523c <tcp_receive+0x5f4>)
 80151f0:	f005 fdc4 	bl	801ad7c <iprintf>
      inseg.len -= off;
 80151f4:	4b0e      	ldr	r3, [pc, #56]	; (8015230 <tcp_receive+0x5e8>)
 80151f6:	891a      	ldrh	r2, [r3, #8]
 80151f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151fc:	1ad3      	subs	r3, r2, r3
 80151fe:	b29a      	uxth	r2, r3
 8015200:	4b0b      	ldr	r3, [pc, #44]	; (8015230 <tcp_receive+0x5e8>)
 8015202:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015204:	4b0a      	ldr	r3, [pc, #40]	; (8015230 <tcp_receive+0x5e8>)
 8015206:	685b      	ldr	r3, [r3, #4]
 8015208:	891a      	ldrh	r2, [r3, #8]
 801520a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801520e:	1ad3      	subs	r3, r2, r3
 8015210:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015212:	e029      	b.n	8015268 <tcp_receive+0x620>
 8015214:	0801d4b4 	.word	0x0801d4b4
 8015218:	0801d4bc 	.word	0x0801d4bc
 801521c:	24004b24 	.word	0x24004b24
 8015220:	24004b20 	.word	0x24004b20
 8015224:	24008274 	.word	0x24008274
 8015228:	24004b26 	.word	0x24004b26
 801522c:	24004b1c 	.word	0x24004b1c
 8015230:	24004afc 	.word	0x24004afc
 8015234:	0801d14c 	.word	0x0801d14c
 8015238:	0801d4c4 	.word	0x0801d4c4
 801523c:	0801d198 	.word	0x0801d198
 8015240:	0801d4d4 	.word	0x0801d4d4
 8015244:	0801d4e4 	.word	0x0801d4e4
        off -= p->len;
 8015248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801524a:	895b      	ldrh	r3, [r3, #10]
 801524c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015250:	1ad3      	subs	r3, r2, r3
 8015252:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015258:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801525a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801525c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801525e:	2200      	movs	r2, #0
 8015260:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801526a:	895b      	ldrh	r3, [r3, #10]
 801526c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015270:	429a      	cmp	r2, r3
 8015272:	d8e9      	bhi.n	8015248 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015274:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015278:	4619      	mov	r1, r3
 801527a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801527c:	f7fc f8c4 	bl	8011408 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015284:	4a91      	ldr	r2, [pc, #580]	; (80154cc <tcp_receive+0x884>)
 8015286:	6013      	str	r3, [r2, #0]
 8015288:	4b91      	ldr	r3, [pc, #580]	; (80154d0 <tcp_receive+0x888>)
 801528a:	68db      	ldr	r3, [r3, #12]
 801528c:	4a8f      	ldr	r2, [pc, #572]	; (80154cc <tcp_receive+0x884>)
 801528e:	6812      	ldr	r2, [r2, #0]
 8015290:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015292:	e00d      	b.n	80152b0 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015294:	4b8d      	ldr	r3, [pc, #564]	; (80154cc <tcp_receive+0x884>)
 8015296:	681a      	ldr	r2, [r3, #0]
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801529c:	1ad3      	subs	r3, r2, r3
 801529e:	2b00      	cmp	r3, #0
 80152a0:	da06      	bge.n	80152b0 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	8b5b      	ldrh	r3, [r3, #26]
 80152a6:	f043 0302 	orr.w	r3, r3, #2
 80152aa:	b29a      	uxth	r2, r3
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80152b0:	4b86      	ldr	r3, [pc, #536]	; (80154cc <tcp_receive+0x884>)
 80152b2:	681a      	ldr	r2, [r3, #0]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152b8:	1ad3      	subs	r3, r2, r3
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f2c0 842a 	blt.w	8015b14 <tcp_receive+0xecc>
 80152c0:	4b82      	ldr	r3, [pc, #520]	; (80154cc <tcp_receive+0x884>)
 80152c2:	681a      	ldr	r2, [r3, #0]
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152c8:	6879      	ldr	r1, [r7, #4]
 80152ca:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80152cc:	440b      	add	r3, r1
 80152ce:	1ad3      	subs	r3, r2, r3
 80152d0:	3301      	adds	r3, #1
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	f300 841e 	bgt.w	8015b14 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80152d8:	687b      	ldr	r3, [r7, #4]
 80152da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80152dc:	4b7b      	ldr	r3, [pc, #492]	; (80154cc <tcp_receive+0x884>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	429a      	cmp	r2, r3
 80152e2:	f040 829a 	bne.w	801581a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80152e6:	4b7a      	ldr	r3, [pc, #488]	; (80154d0 <tcp_receive+0x888>)
 80152e8:	891c      	ldrh	r4, [r3, #8]
 80152ea:	4b79      	ldr	r3, [pc, #484]	; (80154d0 <tcp_receive+0x888>)
 80152ec:	68db      	ldr	r3, [r3, #12]
 80152ee:	899b      	ldrh	r3, [r3, #12]
 80152f0:	b29b      	uxth	r3, r3
 80152f2:	4618      	mov	r0, r3
 80152f4:	f7fa fc64 	bl	800fbc0 <lwip_htons>
 80152f8:	4603      	mov	r3, r0
 80152fa:	b2db      	uxtb	r3, r3
 80152fc:	f003 0303 	and.w	r3, r3, #3
 8015300:	2b00      	cmp	r3, #0
 8015302:	d001      	beq.n	8015308 <tcp_receive+0x6c0>
 8015304:	2301      	movs	r3, #1
 8015306:	e000      	b.n	801530a <tcp_receive+0x6c2>
 8015308:	2300      	movs	r3, #0
 801530a:	4423      	add	r3, r4
 801530c:	b29a      	uxth	r2, r3
 801530e:	4b71      	ldr	r3, [pc, #452]	; (80154d4 <tcp_receive+0x88c>)
 8015310:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015316:	4b6f      	ldr	r3, [pc, #444]	; (80154d4 <tcp_receive+0x88c>)
 8015318:	881b      	ldrh	r3, [r3, #0]
 801531a:	429a      	cmp	r2, r3
 801531c:	d275      	bcs.n	801540a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801531e:	4b6c      	ldr	r3, [pc, #432]	; (80154d0 <tcp_receive+0x888>)
 8015320:	68db      	ldr	r3, [r3, #12]
 8015322:	899b      	ldrh	r3, [r3, #12]
 8015324:	b29b      	uxth	r3, r3
 8015326:	4618      	mov	r0, r3
 8015328:	f7fa fc4a 	bl	800fbc0 <lwip_htons>
 801532c:	4603      	mov	r3, r0
 801532e:	b2db      	uxtb	r3, r3
 8015330:	f003 0301 	and.w	r3, r3, #1
 8015334:	2b00      	cmp	r3, #0
 8015336:	d01f      	beq.n	8015378 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015338:	4b65      	ldr	r3, [pc, #404]	; (80154d0 <tcp_receive+0x888>)
 801533a:	68db      	ldr	r3, [r3, #12]
 801533c:	899b      	ldrh	r3, [r3, #12]
 801533e:	b29b      	uxth	r3, r3
 8015340:	b21b      	sxth	r3, r3
 8015342:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015346:	b21c      	sxth	r4, r3
 8015348:	4b61      	ldr	r3, [pc, #388]	; (80154d0 <tcp_receive+0x888>)
 801534a:	68db      	ldr	r3, [r3, #12]
 801534c:	899b      	ldrh	r3, [r3, #12]
 801534e:	b29b      	uxth	r3, r3
 8015350:	4618      	mov	r0, r3
 8015352:	f7fa fc35 	bl	800fbc0 <lwip_htons>
 8015356:	4603      	mov	r3, r0
 8015358:	b2db      	uxtb	r3, r3
 801535a:	b29b      	uxth	r3, r3
 801535c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015360:	b29b      	uxth	r3, r3
 8015362:	4618      	mov	r0, r3
 8015364:	f7fa fc2c 	bl	800fbc0 <lwip_htons>
 8015368:	4603      	mov	r3, r0
 801536a:	b21b      	sxth	r3, r3
 801536c:	4323      	orrs	r3, r4
 801536e:	b21a      	sxth	r2, r3
 8015370:	4b57      	ldr	r3, [pc, #348]	; (80154d0 <tcp_receive+0x888>)
 8015372:	68db      	ldr	r3, [r3, #12]
 8015374:	b292      	uxth	r2, r2
 8015376:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801537c:	4b54      	ldr	r3, [pc, #336]	; (80154d0 <tcp_receive+0x888>)
 801537e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015380:	4b53      	ldr	r3, [pc, #332]	; (80154d0 <tcp_receive+0x888>)
 8015382:	68db      	ldr	r3, [r3, #12]
 8015384:	899b      	ldrh	r3, [r3, #12]
 8015386:	b29b      	uxth	r3, r3
 8015388:	4618      	mov	r0, r3
 801538a:	f7fa fc19 	bl	800fbc0 <lwip_htons>
 801538e:	4603      	mov	r3, r0
 8015390:	b2db      	uxtb	r3, r3
 8015392:	f003 0302 	and.w	r3, r3, #2
 8015396:	2b00      	cmp	r3, #0
 8015398:	d005      	beq.n	80153a6 <tcp_receive+0x75e>
            inseg.len -= 1;
 801539a:	4b4d      	ldr	r3, [pc, #308]	; (80154d0 <tcp_receive+0x888>)
 801539c:	891b      	ldrh	r3, [r3, #8]
 801539e:	3b01      	subs	r3, #1
 80153a0:	b29a      	uxth	r2, r3
 80153a2:	4b4b      	ldr	r3, [pc, #300]	; (80154d0 <tcp_receive+0x888>)
 80153a4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80153a6:	4b4a      	ldr	r3, [pc, #296]	; (80154d0 <tcp_receive+0x888>)
 80153a8:	685b      	ldr	r3, [r3, #4]
 80153aa:	4a49      	ldr	r2, [pc, #292]	; (80154d0 <tcp_receive+0x888>)
 80153ac:	8912      	ldrh	r2, [r2, #8]
 80153ae:	4611      	mov	r1, r2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7fb ff29 	bl	8011208 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80153b6:	4b46      	ldr	r3, [pc, #280]	; (80154d0 <tcp_receive+0x888>)
 80153b8:	891c      	ldrh	r4, [r3, #8]
 80153ba:	4b45      	ldr	r3, [pc, #276]	; (80154d0 <tcp_receive+0x888>)
 80153bc:	68db      	ldr	r3, [r3, #12]
 80153be:	899b      	ldrh	r3, [r3, #12]
 80153c0:	b29b      	uxth	r3, r3
 80153c2:	4618      	mov	r0, r3
 80153c4:	f7fa fbfc 	bl	800fbc0 <lwip_htons>
 80153c8:	4603      	mov	r3, r0
 80153ca:	b2db      	uxtb	r3, r3
 80153cc:	f003 0303 	and.w	r3, r3, #3
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d001      	beq.n	80153d8 <tcp_receive+0x790>
 80153d4:	2301      	movs	r3, #1
 80153d6:	e000      	b.n	80153da <tcp_receive+0x792>
 80153d8:	2300      	movs	r3, #0
 80153da:	4423      	add	r3, r4
 80153dc:	b29a      	uxth	r2, r3
 80153de:	4b3d      	ldr	r3, [pc, #244]	; (80154d4 <tcp_receive+0x88c>)
 80153e0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80153e2:	4b3c      	ldr	r3, [pc, #240]	; (80154d4 <tcp_receive+0x88c>)
 80153e4:	881b      	ldrh	r3, [r3, #0]
 80153e6:	461a      	mov	r2, r3
 80153e8:	4b38      	ldr	r3, [pc, #224]	; (80154cc <tcp_receive+0x884>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	441a      	add	r2, r3
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153f2:	6879      	ldr	r1, [r7, #4]
 80153f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80153f6:	440b      	add	r3, r1
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d006      	beq.n	801540a <tcp_receive+0x7c2>
 80153fc:	4b36      	ldr	r3, [pc, #216]	; (80154d8 <tcp_receive+0x890>)
 80153fe:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015402:	4936      	ldr	r1, [pc, #216]	; (80154dc <tcp_receive+0x894>)
 8015404:	4836      	ldr	r0, [pc, #216]	; (80154e0 <tcp_receive+0x898>)
 8015406:	f005 fcb9 	bl	801ad7c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801540e:	2b00      	cmp	r3, #0
 8015410:	f000 80e7 	beq.w	80155e2 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015414:	4b2e      	ldr	r3, [pc, #184]	; (80154d0 <tcp_receive+0x888>)
 8015416:	68db      	ldr	r3, [r3, #12]
 8015418:	899b      	ldrh	r3, [r3, #12]
 801541a:	b29b      	uxth	r3, r3
 801541c:	4618      	mov	r0, r3
 801541e:	f7fa fbcf 	bl	800fbc0 <lwip_htons>
 8015422:	4603      	mov	r3, r0
 8015424:	b2db      	uxtb	r3, r3
 8015426:	f003 0301 	and.w	r3, r3, #1
 801542a:	2b00      	cmp	r3, #0
 801542c:	d010      	beq.n	8015450 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801542e:	e00a      	b.n	8015446 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015434:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801543a:	681a      	ldr	r2, [r3, #0]
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015440:	68f8      	ldr	r0, [r7, #12]
 8015442:	f7fd fcb0 	bl	8012da6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801544a:	2b00      	cmp	r3, #0
 801544c:	d1f0      	bne.n	8015430 <tcp_receive+0x7e8>
 801544e:	e0c8      	b.n	80155e2 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015454:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015456:	e052      	b.n	80154fe <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801545a:	68db      	ldr	r3, [r3, #12]
 801545c:	899b      	ldrh	r3, [r3, #12]
 801545e:	b29b      	uxth	r3, r3
 8015460:	4618      	mov	r0, r3
 8015462:	f7fa fbad 	bl	800fbc0 <lwip_htons>
 8015466:	4603      	mov	r3, r0
 8015468:	b2db      	uxtb	r3, r3
 801546a:	f003 0301 	and.w	r3, r3, #1
 801546e:	2b00      	cmp	r3, #0
 8015470:	d03d      	beq.n	80154ee <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015472:	4b17      	ldr	r3, [pc, #92]	; (80154d0 <tcp_receive+0x888>)
 8015474:	68db      	ldr	r3, [r3, #12]
 8015476:	899b      	ldrh	r3, [r3, #12]
 8015478:	b29b      	uxth	r3, r3
 801547a:	4618      	mov	r0, r3
 801547c:	f7fa fba0 	bl	800fbc0 <lwip_htons>
 8015480:	4603      	mov	r3, r0
 8015482:	b2db      	uxtb	r3, r3
 8015484:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015488:	2b00      	cmp	r3, #0
 801548a:	d130      	bne.n	80154ee <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801548c:	4b10      	ldr	r3, [pc, #64]	; (80154d0 <tcp_receive+0x888>)
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	899b      	ldrh	r3, [r3, #12]
 8015492:	b29c      	uxth	r4, r3
 8015494:	2001      	movs	r0, #1
 8015496:	f7fa fb93 	bl	800fbc0 <lwip_htons>
 801549a:	4603      	mov	r3, r0
 801549c:	461a      	mov	r2, r3
 801549e:	4b0c      	ldr	r3, [pc, #48]	; (80154d0 <tcp_receive+0x888>)
 80154a0:	68db      	ldr	r3, [r3, #12]
 80154a2:	4322      	orrs	r2, r4
 80154a4:	b292      	uxth	r2, r2
 80154a6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80154a8:	4b09      	ldr	r3, [pc, #36]	; (80154d0 <tcp_receive+0x888>)
 80154aa:	891c      	ldrh	r4, [r3, #8]
 80154ac:	4b08      	ldr	r3, [pc, #32]	; (80154d0 <tcp_receive+0x888>)
 80154ae:	68db      	ldr	r3, [r3, #12]
 80154b0:	899b      	ldrh	r3, [r3, #12]
 80154b2:	b29b      	uxth	r3, r3
 80154b4:	4618      	mov	r0, r3
 80154b6:	f7fa fb83 	bl	800fbc0 <lwip_htons>
 80154ba:	4603      	mov	r3, r0
 80154bc:	b2db      	uxtb	r3, r3
 80154be:	f003 0303 	and.w	r3, r3, #3
 80154c2:	2b00      	cmp	r3, #0
 80154c4:	d00e      	beq.n	80154e4 <tcp_receive+0x89c>
 80154c6:	2301      	movs	r3, #1
 80154c8:	e00d      	b.n	80154e6 <tcp_receive+0x89e>
 80154ca:	bf00      	nop
 80154cc:	24004b1c 	.word	0x24004b1c
 80154d0:	24004afc 	.word	0x24004afc
 80154d4:	24004b26 	.word	0x24004b26
 80154d8:	0801d14c 	.word	0x0801d14c
 80154dc:	0801d4f4 	.word	0x0801d4f4
 80154e0:	0801d198 	.word	0x0801d198
 80154e4:	2300      	movs	r3, #0
 80154e6:	4423      	add	r3, r4
 80154e8:	b29a      	uxth	r2, r3
 80154ea:	4b98      	ldr	r3, [pc, #608]	; (801574c <tcp_receive+0xb04>)
 80154ec:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80154ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154f0:	613b      	str	r3, [r7, #16]
              next = next->next;
 80154f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 80154f8:	6938      	ldr	r0, [r7, #16]
 80154fa:	f7fd fc54 	bl	8012da6 <tcp_seg_free>
            while (next &&
 80154fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015500:	2b00      	cmp	r3, #0
 8015502:	d00e      	beq.n	8015522 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015504:	4b91      	ldr	r3, [pc, #580]	; (801574c <tcp_receive+0xb04>)
 8015506:	881b      	ldrh	r3, [r3, #0]
 8015508:	461a      	mov	r2, r3
 801550a:	4b91      	ldr	r3, [pc, #580]	; (8015750 <tcp_receive+0xb08>)
 801550c:	681b      	ldr	r3, [r3, #0]
 801550e:	441a      	add	r2, r3
 8015510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015512:	68db      	ldr	r3, [r3, #12]
 8015514:	685b      	ldr	r3, [r3, #4]
 8015516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015518:	8909      	ldrh	r1, [r1, #8]
 801551a:	440b      	add	r3, r1
 801551c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801551e:	2b00      	cmp	r3, #0
 8015520:	da9a      	bge.n	8015458 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015522:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015524:	2b00      	cmp	r3, #0
 8015526:	d059      	beq.n	80155dc <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015528:	4b88      	ldr	r3, [pc, #544]	; (801574c <tcp_receive+0xb04>)
 801552a:	881b      	ldrh	r3, [r3, #0]
 801552c:	461a      	mov	r2, r3
 801552e:	4b88      	ldr	r3, [pc, #544]	; (8015750 <tcp_receive+0xb08>)
 8015530:	681b      	ldr	r3, [r3, #0]
 8015532:	441a      	add	r2, r3
 8015534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015536:	68db      	ldr	r3, [r3, #12]
 8015538:	685b      	ldr	r3, [r3, #4]
 801553a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801553c:	2b00      	cmp	r3, #0
 801553e:	dd4d      	ble.n	80155dc <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015540:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015542:	68db      	ldr	r3, [r3, #12]
 8015544:	685b      	ldr	r3, [r3, #4]
 8015546:	b29a      	uxth	r2, r3
 8015548:	4b81      	ldr	r3, [pc, #516]	; (8015750 <tcp_receive+0xb08>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	b29b      	uxth	r3, r3
 801554e:	1ad3      	subs	r3, r2, r3
 8015550:	b29a      	uxth	r2, r3
 8015552:	4b80      	ldr	r3, [pc, #512]	; (8015754 <tcp_receive+0xb0c>)
 8015554:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015556:	4b7f      	ldr	r3, [pc, #508]	; (8015754 <tcp_receive+0xb0c>)
 8015558:	68db      	ldr	r3, [r3, #12]
 801555a:	899b      	ldrh	r3, [r3, #12]
 801555c:	b29b      	uxth	r3, r3
 801555e:	4618      	mov	r0, r3
 8015560:	f7fa fb2e 	bl	800fbc0 <lwip_htons>
 8015564:	4603      	mov	r3, r0
 8015566:	b2db      	uxtb	r3, r3
 8015568:	f003 0302 	and.w	r3, r3, #2
 801556c:	2b00      	cmp	r3, #0
 801556e:	d005      	beq.n	801557c <tcp_receive+0x934>
                inseg.len -= 1;
 8015570:	4b78      	ldr	r3, [pc, #480]	; (8015754 <tcp_receive+0xb0c>)
 8015572:	891b      	ldrh	r3, [r3, #8]
 8015574:	3b01      	subs	r3, #1
 8015576:	b29a      	uxth	r2, r3
 8015578:	4b76      	ldr	r3, [pc, #472]	; (8015754 <tcp_receive+0xb0c>)
 801557a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801557c:	4b75      	ldr	r3, [pc, #468]	; (8015754 <tcp_receive+0xb0c>)
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	4a74      	ldr	r2, [pc, #464]	; (8015754 <tcp_receive+0xb0c>)
 8015582:	8912      	ldrh	r2, [r2, #8]
 8015584:	4611      	mov	r1, r2
 8015586:	4618      	mov	r0, r3
 8015588:	f7fb fe3e 	bl	8011208 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801558c:	4b71      	ldr	r3, [pc, #452]	; (8015754 <tcp_receive+0xb0c>)
 801558e:	891c      	ldrh	r4, [r3, #8]
 8015590:	4b70      	ldr	r3, [pc, #448]	; (8015754 <tcp_receive+0xb0c>)
 8015592:	68db      	ldr	r3, [r3, #12]
 8015594:	899b      	ldrh	r3, [r3, #12]
 8015596:	b29b      	uxth	r3, r3
 8015598:	4618      	mov	r0, r3
 801559a:	f7fa fb11 	bl	800fbc0 <lwip_htons>
 801559e:	4603      	mov	r3, r0
 80155a0:	b2db      	uxtb	r3, r3
 80155a2:	f003 0303 	and.w	r3, r3, #3
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	d001      	beq.n	80155ae <tcp_receive+0x966>
 80155aa:	2301      	movs	r3, #1
 80155ac:	e000      	b.n	80155b0 <tcp_receive+0x968>
 80155ae:	2300      	movs	r3, #0
 80155b0:	4423      	add	r3, r4
 80155b2:	b29a      	uxth	r2, r3
 80155b4:	4b65      	ldr	r3, [pc, #404]	; (801574c <tcp_receive+0xb04>)
 80155b6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80155b8:	4b64      	ldr	r3, [pc, #400]	; (801574c <tcp_receive+0xb04>)
 80155ba:	881b      	ldrh	r3, [r3, #0]
 80155bc:	461a      	mov	r2, r3
 80155be:	4b64      	ldr	r3, [pc, #400]	; (8015750 <tcp_receive+0xb08>)
 80155c0:	681b      	ldr	r3, [r3, #0]
 80155c2:	441a      	add	r2, r3
 80155c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155c6:	68db      	ldr	r3, [r3, #12]
 80155c8:	685b      	ldr	r3, [r3, #4]
 80155ca:	429a      	cmp	r2, r3
 80155cc:	d006      	beq.n	80155dc <tcp_receive+0x994>
 80155ce:	4b62      	ldr	r3, [pc, #392]	; (8015758 <tcp_receive+0xb10>)
 80155d0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80155d4:	4961      	ldr	r1, [pc, #388]	; (801575c <tcp_receive+0xb14>)
 80155d6:	4862      	ldr	r0, [pc, #392]	; (8015760 <tcp_receive+0xb18>)
 80155d8:	f005 fbd0 	bl	801ad7c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80155e0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80155e2:	4b5a      	ldr	r3, [pc, #360]	; (801574c <tcp_receive+0xb04>)
 80155e4:	881b      	ldrh	r3, [r3, #0]
 80155e6:	461a      	mov	r2, r3
 80155e8:	4b59      	ldr	r3, [pc, #356]	; (8015750 <tcp_receive+0xb08>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	441a      	add	r2, r3
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80155f6:	4b55      	ldr	r3, [pc, #340]	; (801574c <tcp_receive+0xb04>)
 80155f8:	881b      	ldrh	r3, [r3, #0]
 80155fa:	429a      	cmp	r2, r3
 80155fc:	d206      	bcs.n	801560c <tcp_receive+0x9c4>
 80155fe:	4b56      	ldr	r3, [pc, #344]	; (8015758 <tcp_receive+0xb10>)
 8015600:	f240 6207 	movw	r2, #1543	; 0x607
 8015604:	4957      	ldr	r1, [pc, #348]	; (8015764 <tcp_receive+0xb1c>)
 8015606:	4856      	ldr	r0, [pc, #344]	; (8015760 <tcp_receive+0xb18>)
 8015608:	f005 fbb8 	bl	801ad7c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015610:	4b4e      	ldr	r3, [pc, #312]	; (801574c <tcp_receive+0xb04>)
 8015612:	881b      	ldrh	r3, [r3, #0]
 8015614:	1ad3      	subs	r3, r2, r3
 8015616:	b29a      	uxth	r2, r3
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801561c:	6878      	ldr	r0, [r7, #4]
 801561e:	f7fc fe9d 	bl	801235c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015622:	4b4c      	ldr	r3, [pc, #304]	; (8015754 <tcp_receive+0xb0c>)
 8015624:	685b      	ldr	r3, [r3, #4]
 8015626:	891b      	ldrh	r3, [r3, #8]
 8015628:	2b00      	cmp	r3, #0
 801562a:	d006      	beq.n	801563a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801562c:	4b49      	ldr	r3, [pc, #292]	; (8015754 <tcp_receive+0xb0c>)
 801562e:	685b      	ldr	r3, [r3, #4]
 8015630:	4a4d      	ldr	r2, [pc, #308]	; (8015768 <tcp_receive+0xb20>)
 8015632:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015634:	4b47      	ldr	r3, [pc, #284]	; (8015754 <tcp_receive+0xb0c>)
 8015636:	2200      	movs	r2, #0
 8015638:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801563a:	4b46      	ldr	r3, [pc, #280]	; (8015754 <tcp_receive+0xb0c>)
 801563c:	68db      	ldr	r3, [r3, #12]
 801563e:	899b      	ldrh	r3, [r3, #12]
 8015640:	b29b      	uxth	r3, r3
 8015642:	4618      	mov	r0, r3
 8015644:	f7fa fabc 	bl	800fbc0 <lwip_htons>
 8015648:	4603      	mov	r3, r0
 801564a:	b2db      	uxtb	r3, r3
 801564c:	f003 0301 	and.w	r3, r3, #1
 8015650:	2b00      	cmp	r3, #0
 8015652:	f000 80b8 	beq.w	80157c6 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015656:	4b45      	ldr	r3, [pc, #276]	; (801576c <tcp_receive+0xb24>)
 8015658:	781b      	ldrb	r3, [r3, #0]
 801565a:	f043 0320 	orr.w	r3, r3, #32
 801565e:	b2da      	uxtb	r2, r3
 8015660:	4b42      	ldr	r3, [pc, #264]	; (801576c <tcp_receive+0xb24>)
 8015662:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015664:	e0af      	b.n	80157c6 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801566a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015670:	68db      	ldr	r3, [r3, #12]
 8015672:	685b      	ldr	r3, [r3, #4]
 8015674:	4a36      	ldr	r2, [pc, #216]	; (8015750 <tcp_receive+0xb08>)
 8015676:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015678:	68bb      	ldr	r3, [r7, #8]
 801567a:	891b      	ldrh	r3, [r3, #8]
 801567c:	461c      	mov	r4, r3
 801567e:	68bb      	ldr	r3, [r7, #8]
 8015680:	68db      	ldr	r3, [r3, #12]
 8015682:	899b      	ldrh	r3, [r3, #12]
 8015684:	b29b      	uxth	r3, r3
 8015686:	4618      	mov	r0, r3
 8015688:	f7fa fa9a 	bl	800fbc0 <lwip_htons>
 801568c:	4603      	mov	r3, r0
 801568e:	b2db      	uxtb	r3, r3
 8015690:	f003 0303 	and.w	r3, r3, #3
 8015694:	2b00      	cmp	r3, #0
 8015696:	d001      	beq.n	801569c <tcp_receive+0xa54>
 8015698:	2301      	movs	r3, #1
 801569a:	e000      	b.n	801569e <tcp_receive+0xa56>
 801569c:	2300      	movs	r3, #0
 801569e:	191a      	adds	r2, r3, r4
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156a4:	441a      	add	r2, r3
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156ae:	461c      	mov	r4, r3
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	891b      	ldrh	r3, [r3, #8]
 80156b4:	461d      	mov	r5, r3
 80156b6:	68bb      	ldr	r3, [r7, #8]
 80156b8:	68db      	ldr	r3, [r3, #12]
 80156ba:	899b      	ldrh	r3, [r3, #12]
 80156bc:	b29b      	uxth	r3, r3
 80156be:	4618      	mov	r0, r3
 80156c0:	f7fa fa7e 	bl	800fbc0 <lwip_htons>
 80156c4:	4603      	mov	r3, r0
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	f003 0303 	and.w	r3, r3, #3
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d001      	beq.n	80156d4 <tcp_receive+0xa8c>
 80156d0:	2301      	movs	r3, #1
 80156d2:	e000      	b.n	80156d6 <tcp_receive+0xa8e>
 80156d4:	2300      	movs	r3, #0
 80156d6:	442b      	add	r3, r5
 80156d8:	429c      	cmp	r4, r3
 80156da:	d206      	bcs.n	80156ea <tcp_receive+0xaa2>
 80156dc:	4b1e      	ldr	r3, [pc, #120]	; (8015758 <tcp_receive+0xb10>)
 80156de:	f240 622b 	movw	r2, #1579	; 0x62b
 80156e2:	4923      	ldr	r1, [pc, #140]	; (8015770 <tcp_receive+0xb28>)
 80156e4:	481e      	ldr	r0, [pc, #120]	; (8015760 <tcp_receive+0xb18>)
 80156e6:	f005 fb49 	bl	801ad7c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	891b      	ldrh	r3, [r3, #8]
 80156ee:	461c      	mov	r4, r3
 80156f0:	68bb      	ldr	r3, [r7, #8]
 80156f2:	68db      	ldr	r3, [r3, #12]
 80156f4:	899b      	ldrh	r3, [r3, #12]
 80156f6:	b29b      	uxth	r3, r3
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7fa fa61 	bl	800fbc0 <lwip_htons>
 80156fe:	4603      	mov	r3, r0
 8015700:	b2db      	uxtb	r3, r3
 8015702:	f003 0303 	and.w	r3, r3, #3
 8015706:	2b00      	cmp	r3, #0
 8015708:	d001      	beq.n	801570e <tcp_receive+0xac6>
 801570a:	2301      	movs	r3, #1
 801570c:	e000      	b.n	8015710 <tcp_receive+0xac8>
 801570e:	2300      	movs	r3, #0
 8015710:	1919      	adds	r1, r3, r4
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015716:	b28b      	uxth	r3, r1
 8015718:	1ad3      	subs	r3, r2, r3
 801571a:	b29a      	uxth	r2, r3
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015720:	6878      	ldr	r0, [r7, #4]
 8015722:	f7fc fe1b 	bl	801235c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	685b      	ldr	r3, [r3, #4]
 801572a:	891b      	ldrh	r3, [r3, #8]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d028      	beq.n	8015782 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015730:	4b0d      	ldr	r3, [pc, #52]	; (8015768 <tcp_receive+0xb20>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d01d      	beq.n	8015774 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015738:	4b0b      	ldr	r3, [pc, #44]	; (8015768 <tcp_receive+0xb20>)
 801573a:	681a      	ldr	r2, [r3, #0]
 801573c:	68bb      	ldr	r3, [r7, #8]
 801573e:	685b      	ldr	r3, [r3, #4]
 8015740:	4619      	mov	r1, r3
 8015742:	4610      	mov	r0, r2
 8015744:	f7fb ffb4 	bl	80116b0 <pbuf_cat>
 8015748:	e018      	b.n	801577c <tcp_receive+0xb34>
 801574a:	bf00      	nop
 801574c:	24004b26 	.word	0x24004b26
 8015750:	24004b1c 	.word	0x24004b1c
 8015754:	24004afc 	.word	0x24004afc
 8015758:	0801d14c 	.word	0x0801d14c
 801575c:	0801d52c 	.word	0x0801d52c
 8015760:	0801d198 	.word	0x0801d198
 8015764:	0801d568 	.word	0x0801d568
 8015768:	24004b2c 	.word	0x24004b2c
 801576c:	24004b29 	.word	0x24004b29
 8015770:	0801d588 	.word	0x0801d588
            } else {
              recv_data = cseg->p;
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	4a70      	ldr	r2, [pc, #448]	; (801593c <tcp_receive+0xcf4>)
 801577a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	2200      	movs	r2, #0
 8015780:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015782:	68bb      	ldr	r3, [r7, #8]
 8015784:	68db      	ldr	r3, [r3, #12]
 8015786:	899b      	ldrh	r3, [r3, #12]
 8015788:	b29b      	uxth	r3, r3
 801578a:	4618      	mov	r0, r3
 801578c:	f7fa fa18 	bl	800fbc0 <lwip_htons>
 8015790:	4603      	mov	r3, r0
 8015792:	b2db      	uxtb	r3, r3
 8015794:	f003 0301 	and.w	r3, r3, #1
 8015798:	2b00      	cmp	r3, #0
 801579a:	d00d      	beq.n	80157b8 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801579c:	4b68      	ldr	r3, [pc, #416]	; (8015940 <tcp_receive+0xcf8>)
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	f043 0320 	orr.w	r3, r3, #32
 80157a4:	b2da      	uxtb	r2, r3
 80157a6:	4b66      	ldr	r3, [pc, #408]	; (8015940 <tcp_receive+0xcf8>)
 80157a8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	7d1b      	ldrb	r3, [r3, #20]
 80157ae:	2b04      	cmp	r3, #4
 80157b0:	d102      	bne.n	80157b8 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	2207      	movs	r2, #7
 80157b6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80157b8:	68bb      	ldr	r3, [r7, #8]
 80157ba:	681a      	ldr	r2, [r3, #0]
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80157c0:	68b8      	ldr	r0, [r7, #8]
 80157c2:	f7fd faf0 	bl	8012da6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d008      	beq.n	80157e0 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80157d2:	68db      	ldr	r3, [r3, #12]
 80157d4:	685a      	ldr	r2, [r3, #4]
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80157da:	429a      	cmp	r2, r3
 80157dc:	f43f af43 	beq.w	8015666 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	8b5b      	ldrh	r3, [r3, #26]
 80157e4:	f003 0301 	and.w	r3, r3, #1
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d00e      	beq.n	801580a <tcp_receive+0xbc2>
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	8b5b      	ldrh	r3, [r3, #26]
 80157f0:	f023 0301 	bic.w	r3, r3, #1
 80157f4:	b29a      	uxth	r2, r3
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	835a      	strh	r2, [r3, #26]
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	8b5b      	ldrh	r3, [r3, #26]
 80157fe:	f043 0302 	orr.w	r3, r3, #2
 8015802:	b29a      	uxth	r2, r3
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015808:	e188      	b.n	8015b1c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	8b5b      	ldrh	r3, [r3, #26]
 801580e:	f043 0301 	orr.w	r3, r3, #1
 8015812:	b29a      	uxth	r2, r3
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015818:	e180      	b.n	8015b1c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801581e:	2b00      	cmp	r3, #0
 8015820:	d106      	bne.n	8015830 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015822:	4848      	ldr	r0, [pc, #288]	; (8015944 <tcp_receive+0xcfc>)
 8015824:	f7fd faf6 	bl	8012e14 <tcp_seg_copy>
 8015828:	4602      	mov	r2, r0
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	675a      	str	r2, [r3, #116]	; 0x74
 801582e:	e16d      	b.n	8015b0c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015830:	2300      	movs	r3, #0
 8015832:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015838:	63bb      	str	r3, [r7, #56]	; 0x38
 801583a:	e157      	b.n	8015aec <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801583c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801583e:	68db      	ldr	r3, [r3, #12]
 8015840:	685a      	ldr	r2, [r3, #4]
 8015842:	4b41      	ldr	r3, [pc, #260]	; (8015948 <tcp_receive+0xd00>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	429a      	cmp	r2, r3
 8015848:	d11d      	bne.n	8015886 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801584a:	4b3e      	ldr	r3, [pc, #248]	; (8015944 <tcp_receive+0xcfc>)
 801584c:	891a      	ldrh	r2, [r3, #8]
 801584e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015850:	891b      	ldrh	r3, [r3, #8]
 8015852:	429a      	cmp	r2, r3
 8015854:	f240 814f 	bls.w	8015af6 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015858:	483a      	ldr	r0, [pc, #232]	; (8015944 <tcp_receive+0xcfc>)
 801585a:	f7fd fadb 	bl	8012e14 <tcp_seg_copy>
 801585e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015860:	697b      	ldr	r3, [r7, #20]
 8015862:	2b00      	cmp	r3, #0
 8015864:	f000 8149 	beq.w	8015afa <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8015868:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801586a:	2b00      	cmp	r3, #0
 801586c:	d003      	beq.n	8015876 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801586e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015870:	697a      	ldr	r2, [r7, #20]
 8015872:	601a      	str	r2, [r3, #0]
 8015874:	e002      	b.n	801587c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	697a      	ldr	r2, [r7, #20]
 801587a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801587c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801587e:	6978      	ldr	r0, [r7, #20]
 8015880:	f7ff f8de 	bl	8014a40 <tcp_oos_insert_segment>
                }
                break;
 8015884:	e139      	b.n	8015afa <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015886:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015888:	2b00      	cmp	r3, #0
 801588a:	d117      	bne.n	80158bc <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801588c:	4b2e      	ldr	r3, [pc, #184]	; (8015948 <tcp_receive+0xd00>)
 801588e:	681a      	ldr	r2, [r3, #0]
 8015890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015892:	68db      	ldr	r3, [r3, #12]
 8015894:	685b      	ldr	r3, [r3, #4]
 8015896:	1ad3      	subs	r3, r2, r3
 8015898:	2b00      	cmp	r3, #0
 801589a:	da57      	bge.n	801594c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801589c:	4829      	ldr	r0, [pc, #164]	; (8015944 <tcp_receive+0xcfc>)
 801589e:	f7fd fab9 	bl	8012e14 <tcp_seg_copy>
 80158a2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80158a4:	69bb      	ldr	r3, [r7, #24]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	f000 8129 	beq.w	8015afe <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	69ba      	ldr	r2, [r7, #24]
 80158b0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80158b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158b4:	69b8      	ldr	r0, [r7, #24]
 80158b6:	f7ff f8c3 	bl	8014a40 <tcp_oos_insert_segment>
                  }
                  break;
 80158ba:	e120      	b.n	8015afe <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80158bc:	4b22      	ldr	r3, [pc, #136]	; (8015948 <tcp_receive+0xd00>)
 80158be:	681a      	ldr	r2, [r3, #0]
 80158c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158c2:	68db      	ldr	r3, [r3, #12]
 80158c4:	685b      	ldr	r3, [r3, #4]
 80158c6:	1ad3      	subs	r3, r2, r3
 80158c8:	3b01      	subs	r3, #1
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	db3e      	blt.n	801594c <tcp_receive+0xd04>
 80158ce:	4b1e      	ldr	r3, [pc, #120]	; (8015948 <tcp_receive+0xd00>)
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158d4:	68db      	ldr	r3, [r3, #12]
 80158d6:	685b      	ldr	r3, [r3, #4]
 80158d8:	1ad3      	subs	r3, r2, r3
 80158da:	3301      	adds	r3, #1
 80158dc:	2b00      	cmp	r3, #0
 80158de:	dc35      	bgt.n	801594c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80158e0:	4818      	ldr	r0, [pc, #96]	; (8015944 <tcp_receive+0xcfc>)
 80158e2:	f7fd fa97 	bl	8012e14 <tcp_seg_copy>
 80158e6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80158e8:	69fb      	ldr	r3, [r7, #28]
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	f000 8109 	beq.w	8015b02 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80158f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158f2:	68db      	ldr	r3, [r3, #12]
 80158f4:	685b      	ldr	r3, [r3, #4]
 80158f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80158f8:	8912      	ldrh	r2, [r2, #8]
 80158fa:	441a      	add	r2, r3
 80158fc:	4b12      	ldr	r3, [pc, #72]	; (8015948 <tcp_receive+0xd00>)
 80158fe:	681b      	ldr	r3, [r3, #0]
 8015900:	1ad3      	subs	r3, r2, r3
 8015902:	2b00      	cmp	r3, #0
 8015904:	dd12      	ble.n	801592c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015906:	4b10      	ldr	r3, [pc, #64]	; (8015948 <tcp_receive+0xd00>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	b29a      	uxth	r2, r3
 801590c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801590e:	68db      	ldr	r3, [r3, #12]
 8015910:	685b      	ldr	r3, [r3, #4]
 8015912:	b29b      	uxth	r3, r3
 8015914:	1ad3      	subs	r3, r2, r3
 8015916:	b29a      	uxth	r2, r3
 8015918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801591a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801591c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801591e:	685a      	ldr	r2, [r3, #4]
 8015920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015922:	891b      	ldrh	r3, [r3, #8]
 8015924:	4619      	mov	r1, r3
 8015926:	4610      	mov	r0, r2
 8015928:	f7fb fc6e 	bl	8011208 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801592c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801592e:	69fa      	ldr	r2, [r7, #28]
 8015930:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015932:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015934:	69f8      	ldr	r0, [r7, #28]
 8015936:	f7ff f883 	bl	8014a40 <tcp_oos_insert_segment>
                  }
                  break;
 801593a:	e0e2      	b.n	8015b02 <tcp_receive+0xeba>
 801593c:	24004b2c 	.word	0x24004b2c
 8015940:	24004b29 	.word	0x24004b29
 8015944:	24004afc 	.word	0x24004afc
 8015948:	24004b1c 	.word	0x24004b1c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801594c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801594e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015952:	681b      	ldr	r3, [r3, #0]
 8015954:	2b00      	cmp	r3, #0
 8015956:	f040 80c6 	bne.w	8015ae6 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801595a:	4b80      	ldr	r3, [pc, #512]	; (8015b5c <tcp_receive+0xf14>)
 801595c:	681a      	ldr	r2, [r3, #0]
 801595e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015960:	68db      	ldr	r3, [r3, #12]
 8015962:	685b      	ldr	r3, [r3, #4]
 8015964:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015966:	2b00      	cmp	r3, #0
 8015968:	f340 80bd 	ble.w	8015ae6 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801596c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801596e:	68db      	ldr	r3, [r3, #12]
 8015970:	899b      	ldrh	r3, [r3, #12]
 8015972:	b29b      	uxth	r3, r3
 8015974:	4618      	mov	r0, r3
 8015976:	f7fa f923 	bl	800fbc0 <lwip_htons>
 801597a:	4603      	mov	r3, r0
 801597c:	b2db      	uxtb	r3, r3
 801597e:	f003 0301 	and.w	r3, r3, #1
 8015982:	2b00      	cmp	r3, #0
 8015984:	f040 80bf 	bne.w	8015b06 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015988:	4875      	ldr	r0, [pc, #468]	; (8015b60 <tcp_receive+0xf18>)
 801598a:	f7fd fa43 	bl	8012e14 <tcp_seg_copy>
 801598e:	4602      	mov	r2, r0
 8015990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015992:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	2b00      	cmp	r3, #0
 801599a:	f000 80b6 	beq.w	8015b0a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a0:	68db      	ldr	r3, [r3, #12]
 80159a2:	685b      	ldr	r3, [r3, #4]
 80159a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159a6:	8912      	ldrh	r2, [r2, #8]
 80159a8:	441a      	add	r2, r3
 80159aa:	4b6c      	ldr	r3, [pc, #432]	; (8015b5c <tcp_receive+0xf14>)
 80159ac:	681b      	ldr	r3, [r3, #0]
 80159ae:	1ad3      	subs	r3, r2, r3
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	dd12      	ble.n	80159da <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80159b4:	4b69      	ldr	r3, [pc, #420]	; (8015b5c <tcp_receive+0xf14>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	b29a      	uxth	r2, r3
 80159ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159bc:	68db      	ldr	r3, [r3, #12]
 80159be:	685b      	ldr	r3, [r3, #4]
 80159c0:	b29b      	uxth	r3, r3
 80159c2:	1ad3      	subs	r3, r2, r3
 80159c4:	b29a      	uxth	r2, r3
 80159c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159c8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80159ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159cc:	685a      	ldr	r2, [r3, #4]
 80159ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d0:	891b      	ldrh	r3, [r3, #8]
 80159d2:	4619      	mov	r1, r3
 80159d4:	4610      	mov	r0, r2
 80159d6:	f7fb fc17 	bl	8011208 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80159da:	4b62      	ldr	r3, [pc, #392]	; (8015b64 <tcp_receive+0xf1c>)
 80159dc:	881b      	ldrh	r3, [r3, #0]
 80159de:	461a      	mov	r2, r3
 80159e0:	4b5e      	ldr	r3, [pc, #376]	; (8015b5c <tcp_receive+0xf14>)
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	441a      	add	r2, r3
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80159ea:	6879      	ldr	r1, [r7, #4]
 80159ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80159ee:	440b      	add	r3, r1
 80159f0:	1ad3      	subs	r3, r2, r3
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	f340 8089 	ble.w	8015b0a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80159f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	68db      	ldr	r3, [r3, #12]
 80159fe:	899b      	ldrh	r3, [r3, #12]
 8015a00:	b29b      	uxth	r3, r3
 8015a02:	4618      	mov	r0, r3
 8015a04:	f7fa f8dc 	bl	800fbc0 <lwip_htons>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	b2db      	uxtb	r3, r3
 8015a0c:	f003 0301 	and.w	r3, r3, #1
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d022      	beq.n	8015a5a <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	68db      	ldr	r3, [r3, #12]
 8015a1a:	899b      	ldrh	r3, [r3, #12]
 8015a1c:	b29b      	uxth	r3, r3
 8015a1e:	b21b      	sxth	r3, r3
 8015a20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015a24:	b21c      	sxth	r4, r3
 8015a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a28:	681b      	ldr	r3, [r3, #0]
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	899b      	ldrh	r3, [r3, #12]
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	4618      	mov	r0, r3
 8015a32:	f7fa f8c5 	bl	800fbc0 <lwip_htons>
 8015a36:	4603      	mov	r3, r0
 8015a38:	b2db      	uxtb	r3, r3
 8015a3a:	b29b      	uxth	r3, r3
 8015a3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015a40:	b29b      	uxth	r3, r3
 8015a42:	4618      	mov	r0, r3
 8015a44:	f7fa f8bc 	bl	800fbc0 <lwip_htons>
 8015a48:	4603      	mov	r3, r0
 8015a4a:	b21b      	sxth	r3, r3
 8015a4c:	4323      	orrs	r3, r4
 8015a4e:	b21a      	sxth	r2, r3
 8015a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	68db      	ldr	r3, [r3, #12]
 8015a56:	b292      	uxth	r2, r2
 8015a58:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a5e:	b29a      	uxth	r2, r3
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a64:	4413      	add	r3, r2
 8015a66:	b299      	uxth	r1, r3
 8015a68:	4b3c      	ldr	r3, [pc, #240]	; (8015b5c <tcp_receive+0xf14>)
 8015a6a:	681b      	ldr	r3, [r3, #0]
 8015a6c:	b29a      	uxth	r2, r3
 8015a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	1a8a      	subs	r2, r1, r2
 8015a74:	b292      	uxth	r2, r2
 8015a76:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	685a      	ldr	r2, [r3, #4]
 8015a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	891b      	ldrh	r3, [r3, #8]
 8015a84:	4619      	mov	r1, r3
 8015a86:	4610      	mov	r0, r2
 8015a88:	f7fb fbbe 	bl	8011208 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	891c      	ldrh	r4, [r3, #8]
 8015a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	68db      	ldr	r3, [r3, #12]
 8015a98:	899b      	ldrh	r3, [r3, #12]
 8015a9a:	b29b      	uxth	r3, r3
 8015a9c:	4618      	mov	r0, r3
 8015a9e:	f7fa f88f 	bl	800fbc0 <lwip_htons>
 8015aa2:	4603      	mov	r3, r0
 8015aa4:	b2db      	uxtb	r3, r3
 8015aa6:	f003 0303 	and.w	r3, r3, #3
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d001      	beq.n	8015ab2 <tcp_receive+0xe6a>
 8015aae:	2301      	movs	r3, #1
 8015ab0:	e000      	b.n	8015ab4 <tcp_receive+0xe6c>
 8015ab2:	2300      	movs	r3, #0
 8015ab4:	4423      	add	r3, r4
 8015ab6:	b29a      	uxth	r2, r3
 8015ab8:	4b2a      	ldr	r3, [pc, #168]	; (8015b64 <tcp_receive+0xf1c>)
 8015aba:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015abc:	4b29      	ldr	r3, [pc, #164]	; (8015b64 <tcp_receive+0xf1c>)
 8015abe:	881b      	ldrh	r3, [r3, #0]
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	4b26      	ldr	r3, [pc, #152]	; (8015b5c <tcp_receive+0xf14>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	441a      	add	r2, r3
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015acc:	6879      	ldr	r1, [r7, #4]
 8015ace:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015ad0:	440b      	add	r3, r1
 8015ad2:	429a      	cmp	r2, r3
 8015ad4:	d019      	beq.n	8015b0a <tcp_receive+0xec2>
 8015ad6:	4b24      	ldr	r3, [pc, #144]	; (8015b68 <tcp_receive+0xf20>)
 8015ad8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015adc:	4923      	ldr	r1, [pc, #140]	; (8015b6c <tcp_receive+0xf24>)
 8015ade:	4824      	ldr	r0, [pc, #144]	; (8015b70 <tcp_receive+0xf28>)
 8015ae0:	f005 f94c 	bl	801ad7c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015ae4:	e011      	b.n	8015b0a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8015aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	f47f aea4 	bne.w	801583c <tcp_receive+0xbf4>
 8015af4:	e00a      	b.n	8015b0c <tcp_receive+0xec4>
                break;
 8015af6:	bf00      	nop
 8015af8:	e008      	b.n	8015b0c <tcp_receive+0xec4>
                break;
 8015afa:	bf00      	nop
 8015afc:	e006      	b.n	8015b0c <tcp_receive+0xec4>
                  break;
 8015afe:	bf00      	nop
 8015b00:	e004      	b.n	8015b0c <tcp_receive+0xec4>
                  break;
 8015b02:	bf00      	nop
 8015b04:	e002      	b.n	8015b0c <tcp_receive+0xec4>
                  break;
 8015b06:	bf00      	nop
 8015b08:	e000      	b.n	8015b0c <tcp_receive+0xec4>
                break;
 8015b0a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f001 fe8b 	bl	8017828 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015b12:	e003      	b.n	8015b1c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f001 fe87 	bl	8017828 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b1a:	e01a      	b.n	8015b52 <tcp_receive+0xf0a>
 8015b1c:	e019      	b.n	8015b52 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015b1e:	4b0f      	ldr	r3, [pc, #60]	; (8015b5c <tcp_receive+0xf14>)
 8015b20:	681a      	ldr	r2, [r3, #0]
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b26:	1ad3      	subs	r3, r2, r3
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	db0a      	blt.n	8015b42 <tcp_receive+0xefa>
 8015b2c:	4b0b      	ldr	r3, [pc, #44]	; (8015b5c <tcp_receive+0xf14>)
 8015b2e:	681a      	ldr	r2, [r3, #0]
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b34:	6879      	ldr	r1, [r7, #4]
 8015b36:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b38:	440b      	add	r3, r1
 8015b3a:	1ad3      	subs	r3, r2, r3
 8015b3c:	3301      	adds	r3, #1
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	dd07      	ble.n	8015b52 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	8b5b      	ldrh	r3, [r3, #26]
 8015b46:	f043 0302 	orr.w	r3, r3, #2
 8015b4a:	b29a      	uxth	r2, r3
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015b50:	e7ff      	b.n	8015b52 <tcp_receive+0xf0a>
 8015b52:	bf00      	nop
 8015b54:	3750      	adds	r7, #80	; 0x50
 8015b56:	46bd      	mov	sp, r7
 8015b58:	bdb0      	pop	{r4, r5, r7, pc}
 8015b5a:	bf00      	nop
 8015b5c:	24004b1c 	.word	0x24004b1c
 8015b60:	24004afc 	.word	0x24004afc
 8015b64:	24004b26 	.word	0x24004b26
 8015b68:	0801d14c 	.word	0x0801d14c
 8015b6c:	0801d4f4 	.word	0x0801d4f4
 8015b70:	0801d198 	.word	0x0801d198

08015b74 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015b74:	b480      	push	{r7}
 8015b76:	b083      	sub	sp, #12
 8015b78:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015b7a:	4b15      	ldr	r3, [pc, #84]	; (8015bd0 <tcp_get_next_optbyte+0x5c>)
 8015b7c:	881b      	ldrh	r3, [r3, #0]
 8015b7e:	1c5a      	adds	r2, r3, #1
 8015b80:	b291      	uxth	r1, r2
 8015b82:	4a13      	ldr	r2, [pc, #76]	; (8015bd0 <tcp_get_next_optbyte+0x5c>)
 8015b84:	8011      	strh	r1, [r2, #0]
 8015b86:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015b88:	4b12      	ldr	r3, [pc, #72]	; (8015bd4 <tcp_get_next_optbyte+0x60>)
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d004      	beq.n	8015b9a <tcp_get_next_optbyte+0x26>
 8015b90:	4b11      	ldr	r3, [pc, #68]	; (8015bd8 <tcp_get_next_optbyte+0x64>)
 8015b92:	881b      	ldrh	r3, [r3, #0]
 8015b94:	88fa      	ldrh	r2, [r7, #6]
 8015b96:	429a      	cmp	r2, r3
 8015b98:	d208      	bcs.n	8015bac <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015b9a:	4b10      	ldr	r3, [pc, #64]	; (8015bdc <tcp_get_next_optbyte+0x68>)
 8015b9c:	681b      	ldr	r3, [r3, #0]
 8015b9e:	3314      	adds	r3, #20
 8015ba0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015ba2:	88fb      	ldrh	r3, [r7, #6]
 8015ba4:	683a      	ldr	r2, [r7, #0]
 8015ba6:	4413      	add	r3, r2
 8015ba8:	781b      	ldrb	r3, [r3, #0]
 8015baa:	e00b      	b.n	8015bc4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015bac:	88fb      	ldrh	r3, [r7, #6]
 8015bae:	b2da      	uxtb	r2, r3
 8015bb0:	4b09      	ldr	r3, [pc, #36]	; (8015bd8 <tcp_get_next_optbyte+0x64>)
 8015bb2:	881b      	ldrh	r3, [r3, #0]
 8015bb4:	b2db      	uxtb	r3, r3
 8015bb6:	1ad3      	subs	r3, r2, r3
 8015bb8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015bba:	4b06      	ldr	r3, [pc, #24]	; (8015bd4 <tcp_get_next_optbyte+0x60>)
 8015bbc:	681a      	ldr	r2, [r3, #0]
 8015bbe:	797b      	ldrb	r3, [r7, #5]
 8015bc0:	4413      	add	r3, r2
 8015bc2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	370c      	adds	r7, #12
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bce:	4770      	bx	lr
 8015bd0:	24004b18 	.word	0x24004b18
 8015bd4:	24004b14 	.word	0x24004b14
 8015bd8:	24004b12 	.word	0x24004b12
 8015bdc:	24004b0c 	.word	0x24004b0c

08015be0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b084      	sub	sp, #16
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	2b00      	cmp	r3, #0
 8015bec:	d106      	bne.n	8015bfc <tcp_parseopt+0x1c>
 8015bee:	4b32      	ldr	r3, [pc, #200]	; (8015cb8 <tcp_parseopt+0xd8>)
 8015bf0:	f240 727d 	movw	r2, #1917	; 0x77d
 8015bf4:	4931      	ldr	r1, [pc, #196]	; (8015cbc <tcp_parseopt+0xdc>)
 8015bf6:	4832      	ldr	r0, [pc, #200]	; (8015cc0 <tcp_parseopt+0xe0>)
 8015bf8:	f005 f8c0 	bl	801ad7c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015bfc:	4b31      	ldr	r3, [pc, #196]	; (8015cc4 <tcp_parseopt+0xe4>)
 8015bfe:	881b      	ldrh	r3, [r3, #0]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d055      	beq.n	8015cb0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c04:	4b30      	ldr	r3, [pc, #192]	; (8015cc8 <tcp_parseopt+0xe8>)
 8015c06:	2200      	movs	r2, #0
 8015c08:	801a      	strh	r2, [r3, #0]
 8015c0a:	e045      	b.n	8015c98 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8015c0c:	f7ff ffb2 	bl	8015b74 <tcp_get_next_optbyte>
 8015c10:	4603      	mov	r3, r0
 8015c12:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015c14:	7bfb      	ldrb	r3, [r7, #15]
 8015c16:	2b02      	cmp	r3, #2
 8015c18:	d006      	beq.n	8015c28 <tcp_parseopt+0x48>
 8015c1a:	2b02      	cmp	r3, #2
 8015c1c:	dc2b      	bgt.n	8015c76 <tcp_parseopt+0x96>
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d041      	beq.n	8015ca6 <tcp_parseopt+0xc6>
 8015c22:	2b01      	cmp	r3, #1
 8015c24:	d127      	bne.n	8015c76 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015c26:	e037      	b.n	8015c98 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015c28:	f7ff ffa4 	bl	8015b74 <tcp_get_next_optbyte>
 8015c2c:	4603      	mov	r3, r0
 8015c2e:	2b04      	cmp	r3, #4
 8015c30:	d13b      	bne.n	8015caa <tcp_parseopt+0xca>
 8015c32:	4b25      	ldr	r3, [pc, #148]	; (8015cc8 <tcp_parseopt+0xe8>)
 8015c34:	881b      	ldrh	r3, [r3, #0]
 8015c36:	3301      	adds	r3, #1
 8015c38:	4a22      	ldr	r2, [pc, #136]	; (8015cc4 <tcp_parseopt+0xe4>)
 8015c3a:	8812      	ldrh	r2, [r2, #0]
 8015c3c:	4293      	cmp	r3, r2
 8015c3e:	da34      	bge.n	8015caa <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015c40:	f7ff ff98 	bl	8015b74 <tcp_get_next_optbyte>
 8015c44:	4603      	mov	r3, r0
 8015c46:	b29b      	uxth	r3, r3
 8015c48:	021b      	lsls	r3, r3, #8
 8015c4a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015c4c:	f7ff ff92 	bl	8015b74 <tcp_get_next_optbyte>
 8015c50:	4603      	mov	r3, r0
 8015c52:	b29a      	uxth	r2, r3
 8015c54:	89bb      	ldrh	r3, [r7, #12]
 8015c56:	4313      	orrs	r3, r2
 8015c58:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015c5a:	89bb      	ldrh	r3, [r7, #12]
 8015c5c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015c60:	d804      	bhi.n	8015c6c <tcp_parseopt+0x8c>
 8015c62:	89bb      	ldrh	r3, [r7, #12]
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d001      	beq.n	8015c6c <tcp_parseopt+0x8c>
 8015c68:	89ba      	ldrh	r2, [r7, #12]
 8015c6a:	e001      	b.n	8015c70 <tcp_parseopt+0x90>
 8015c6c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015c74:	e010      	b.n	8015c98 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015c76:	f7ff ff7d 	bl	8015b74 <tcp_get_next_optbyte>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015c7e:	7afb      	ldrb	r3, [r7, #11]
 8015c80:	2b01      	cmp	r3, #1
 8015c82:	d914      	bls.n	8015cae <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015c84:	7afb      	ldrb	r3, [r7, #11]
 8015c86:	b29a      	uxth	r2, r3
 8015c88:	4b0f      	ldr	r3, [pc, #60]	; (8015cc8 <tcp_parseopt+0xe8>)
 8015c8a:	881b      	ldrh	r3, [r3, #0]
 8015c8c:	4413      	add	r3, r2
 8015c8e:	b29b      	uxth	r3, r3
 8015c90:	3b02      	subs	r3, #2
 8015c92:	b29a      	uxth	r2, r3
 8015c94:	4b0c      	ldr	r3, [pc, #48]	; (8015cc8 <tcp_parseopt+0xe8>)
 8015c96:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c98:	4b0b      	ldr	r3, [pc, #44]	; (8015cc8 <tcp_parseopt+0xe8>)
 8015c9a:	881a      	ldrh	r2, [r3, #0]
 8015c9c:	4b09      	ldr	r3, [pc, #36]	; (8015cc4 <tcp_parseopt+0xe4>)
 8015c9e:	881b      	ldrh	r3, [r3, #0]
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d3b3      	bcc.n	8015c0c <tcp_parseopt+0x2c>
 8015ca4:	e004      	b.n	8015cb0 <tcp_parseopt+0xd0>
          return;
 8015ca6:	bf00      	nop
 8015ca8:	e002      	b.n	8015cb0 <tcp_parseopt+0xd0>
            return;
 8015caa:	bf00      	nop
 8015cac:	e000      	b.n	8015cb0 <tcp_parseopt+0xd0>
            return;
 8015cae:	bf00      	nop
      }
    }
  }
}
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	0801d14c 	.word	0x0801d14c
 8015cbc:	0801d5b0 	.word	0x0801d5b0
 8015cc0:	0801d198 	.word	0x0801d198
 8015cc4:	24004b10 	.word	0x24004b10
 8015cc8:	24004b18 	.word	0x24004b18

08015ccc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015ccc:	b480      	push	{r7}
 8015cce:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015cd0:	4b05      	ldr	r3, [pc, #20]	; (8015ce8 <tcp_trigger_input_pcb_close+0x1c>)
 8015cd2:	781b      	ldrb	r3, [r3, #0]
 8015cd4:	f043 0310 	orr.w	r3, r3, #16
 8015cd8:	b2da      	uxtb	r2, r3
 8015cda:	4b03      	ldr	r3, [pc, #12]	; (8015ce8 <tcp_trigger_input_pcb_close+0x1c>)
 8015cdc:	701a      	strb	r2, [r3, #0]
}
 8015cde:	bf00      	nop
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce6:	4770      	bx	lr
 8015ce8:	24004b29 	.word	0x24004b29

08015cec <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b084      	sub	sp, #16
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	60f8      	str	r0, [r7, #12]
 8015cf4:	60b9      	str	r1, [r7, #8]
 8015cf6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d00a      	beq.n	8015d14 <tcp_route+0x28>
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	7a1b      	ldrb	r3, [r3, #8]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d006      	beq.n	8015d14 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	7a1b      	ldrb	r3, [r3, #8]
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	f7fb f874 	bl	8010df8 <netif_get_by_index>
 8015d10:	4603      	mov	r3, r0
 8015d12:	e003      	b.n	8015d1c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	f003 fb2b 	bl	8019370 <ip4_route>
 8015d1a:	4603      	mov	r3, r0
  }
}
 8015d1c:	4618      	mov	r0, r3
 8015d1e:	3710      	adds	r7, #16
 8015d20:	46bd      	mov	sp, r7
 8015d22:	bd80      	pop	{r7, pc}

08015d24 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015d24:	b590      	push	{r4, r7, lr}
 8015d26:	b087      	sub	sp, #28
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	60f8      	str	r0, [r7, #12]
 8015d2c:	60b9      	str	r1, [r7, #8]
 8015d2e:	603b      	str	r3, [r7, #0]
 8015d30:	4613      	mov	r3, r2
 8015d32:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015d34:	68fb      	ldr	r3, [r7, #12]
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d105      	bne.n	8015d46 <tcp_create_segment+0x22>
 8015d3a:	4b44      	ldr	r3, [pc, #272]	; (8015e4c <tcp_create_segment+0x128>)
 8015d3c:	22a3      	movs	r2, #163	; 0xa3
 8015d3e:	4944      	ldr	r1, [pc, #272]	; (8015e50 <tcp_create_segment+0x12c>)
 8015d40:	4844      	ldr	r0, [pc, #272]	; (8015e54 <tcp_create_segment+0x130>)
 8015d42:	f005 f81b 	bl	801ad7c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015d46:	68bb      	ldr	r3, [r7, #8]
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d105      	bne.n	8015d58 <tcp_create_segment+0x34>
 8015d4c:	4b3f      	ldr	r3, [pc, #252]	; (8015e4c <tcp_create_segment+0x128>)
 8015d4e:	22a4      	movs	r2, #164	; 0xa4
 8015d50:	4941      	ldr	r1, [pc, #260]	; (8015e58 <tcp_create_segment+0x134>)
 8015d52:	4840      	ldr	r0, [pc, #256]	; (8015e54 <tcp_create_segment+0x130>)
 8015d54:	f005 f812 	bl	801ad7c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d58:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d5c:	009b      	lsls	r3, r3, #2
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	f003 0304 	and.w	r3, r3, #4
 8015d64:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015d66:	2003      	movs	r0, #3
 8015d68:	f7fa fcba 	bl	80106e0 <memp_malloc>
 8015d6c:	6138      	str	r0, [r7, #16]
 8015d6e:	693b      	ldr	r3, [r7, #16]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d104      	bne.n	8015d7e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015d74:	68b8      	ldr	r0, [r7, #8]
 8015d76:	f7fb fbcd 	bl	8011514 <pbuf_free>
    return NULL;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	e061      	b.n	8015e42 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015d84:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015d86:	693b      	ldr	r3, [r7, #16]
 8015d88:	2200      	movs	r2, #0
 8015d8a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015d8c:	693b      	ldr	r3, [r7, #16]
 8015d8e:	68ba      	ldr	r2, [r7, #8]
 8015d90:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015d92:	68bb      	ldr	r3, [r7, #8]
 8015d94:	891a      	ldrh	r2, [r3, #8]
 8015d96:	7dfb      	ldrb	r3, [r7, #23]
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d205      	bcs.n	8015daa <tcp_create_segment+0x86>
 8015d9e:	4b2b      	ldr	r3, [pc, #172]	; (8015e4c <tcp_create_segment+0x128>)
 8015da0:	22b0      	movs	r2, #176	; 0xb0
 8015da2:	492e      	ldr	r1, [pc, #184]	; (8015e5c <tcp_create_segment+0x138>)
 8015da4:	482b      	ldr	r0, [pc, #172]	; (8015e54 <tcp_create_segment+0x130>)
 8015da6:	f004 ffe9 	bl	801ad7c <iprintf>
  seg->len = p->tot_len - optlen;
 8015daa:	68bb      	ldr	r3, [r7, #8]
 8015dac:	891a      	ldrh	r2, [r3, #8]
 8015dae:	7dfb      	ldrb	r3, [r7, #23]
 8015db0:	b29b      	uxth	r3, r3
 8015db2:	1ad3      	subs	r3, r2, r3
 8015db4:	b29a      	uxth	r2, r3
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015dba:	2114      	movs	r1, #20
 8015dbc:	68b8      	ldr	r0, [r7, #8]
 8015dbe:	f7fb fb13 	bl	80113e8 <pbuf_add_header>
 8015dc2:	4603      	mov	r3, r0
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d004      	beq.n	8015dd2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015dc8:	6938      	ldr	r0, [r7, #16]
 8015dca:	f7fc ffec 	bl	8012da6 <tcp_seg_free>
    return NULL;
 8015dce:	2300      	movs	r3, #0
 8015dd0:	e037      	b.n	8015e42 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015dd2:	693b      	ldr	r3, [r7, #16]
 8015dd4:	685b      	ldr	r3, [r3, #4]
 8015dd6:	685a      	ldr	r2, [r3, #4]
 8015dd8:	693b      	ldr	r3, [r7, #16]
 8015dda:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015ddc:	68fb      	ldr	r3, [r7, #12]
 8015dde:	8ada      	ldrh	r2, [r3, #22]
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	68dc      	ldr	r4, [r3, #12]
 8015de4:	4610      	mov	r0, r2
 8015de6:	f7f9 feeb 	bl	800fbc0 <lwip_htons>
 8015dea:	4603      	mov	r3, r0
 8015dec:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	8b1a      	ldrh	r2, [r3, #24]
 8015df2:	693b      	ldr	r3, [r7, #16]
 8015df4:	68dc      	ldr	r4, [r3, #12]
 8015df6:	4610      	mov	r0, r2
 8015df8:	f7f9 fee2 	bl	800fbc0 <lwip_htons>
 8015dfc:	4603      	mov	r3, r0
 8015dfe:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015e00:	693b      	ldr	r3, [r7, #16]
 8015e02:	68dc      	ldr	r4, [r3, #12]
 8015e04:	6838      	ldr	r0, [r7, #0]
 8015e06:	f7f9 fef0 	bl	800fbea <lwip_htonl>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015e0e:	7dfb      	ldrb	r3, [r7, #23]
 8015e10:	089b      	lsrs	r3, r3, #2
 8015e12:	b2db      	uxtb	r3, r3
 8015e14:	b29b      	uxth	r3, r3
 8015e16:	3305      	adds	r3, #5
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	031b      	lsls	r3, r3, #12
 8015e1c:	b29a      	uxth	r2, r3
 8015e1e:	79fb      	ldrb	r3, [r7, #7]
 8015e20:	b29b      	uxth	r3, r3
 8015e22:	4313      	orrs	r3, r2
 8015e24:	b29a      	uxth	r2, r3
 8015e26:	693b      	ldr	r3, [r7, #16]
 8015e28:	68dc      	ldr	r4, [r3, #12]
 8015e2a:	4610      	mov	r0, r2
 8015e2c:	f7f9 fec8 	bl	800fbc0 <lwip_htons>
 8015e30:	4603      	mov	r3, r0
 8015e32:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015e34:	693b      	ldr	r3, [r7, #16]
 8015e36:	68db      	ldr	r3, [r3, #12]
 8015e38:	2200      	movs	r2, #0
 8015e3a:	749a      	strb	r2, [r3, #18]
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015e40:	693b      	ldr	r3, [r7, #16]
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	371c      	adds	r7, #28
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd90      	pop	{r4, r7, pc}
 8015e4a:	bf00      	nop
 8015e4c:	0801d5cc 	.word	0x0801d5cc
 8015e50:	0801d600 	.word	0x0801d600
 8015e54:	0801d620 	.word	0x0801d620
 8015e58:	0801d648 	.word	0x0801d648
 8015e5c:	0801d66c 	.word	0x0801d66c

08015e60 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015e60:	b580      	push	{r7, lr}
 8015e62:	b086      	sub	sp, #24
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	607b      	str	r3, [r7, #4]
 8015e68:	4603      	mov	r3, r0
 8015e6a:	73fb      	strb	r3, [r7, #15]
 8015e6c:	460b      	mov	r3, r1
 8015e6e:	81bb      	strh	r3, [r7, #12]
 8015e70:	4613      	mov	r3, r2
 8015e72:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015e74:	89bb      	ldrh	r3, [r7, #12]
 8015e76:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	2b00      	cmp	r3, #0
 8015e7c:	d105      	bne.n	8015e8a <tcp_pbuf_prealloc+0x2a>
 8015e7e:	4b30      	ldr	r3, [pc, #192]	; (8015f40 <tcp_pbuf_prealloc+0xe0>)
 8015e80:	22e8      	movs	r2, #232	; 0xe8
 8015e82:	4930      	ldr	r1, [pc, #192]	; (8015f44 <tcp_pbuf_prealloc+0xe4>)
 8015e84:	4830      	ldr	r0, [pc, #192]	; (8015f48 <tcp_pbuf_prealloc+0xe8>)
 8015e86:	f004 ff79 	bl	801ad7c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015e8a:	6a3b      	ldr	r3, [r7, #32]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d105      	bne.n	8015e9c <tcp_pbuf_prealloc+0x3c>
 8015e90:	4b2b      	ldr	r3, [pc, #172]	; (8015f40 <tcp_pbuf_prealloc+0xe0>)
 8015e92:	22e9      	movs	r2, #233	; 0xe9
 8015e94:	492d      	ldr	r1, [pc, #180]	; (8015f4c <tcp_pbuf_prealloc+0xec>)
 8015e96:	482c      	ldr	r0, [pc, #176]	; (8015f48 <tcp_pbuf_prealloc+0xe8>)
 8015e98:	f004 ff70 	bl	801ad7c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015e9c:	89ba      	ldrh	r2, [r7, #12]
 8015e9e:	897b      	ldrh	r3, [r7, #10]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d221      	bcs.n	8015ee8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015ea4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015ea8:	f003 0302 	and.w	r3, r3, #2
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d111      	bne.n	8015ed4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015eb0:	6a3b      	ldr	r3, [r7, #32]
 8015eb2:	8b5b      	ldrh	r3, [r3, #26]
 8015eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d115      	bne.n	8015ee8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015ebc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d007      	beq.n	8015ed4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015ec4:	6a3b      	ldr	r3, [r7, #32]
 8015ec6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d103      	bne.n	8015ed4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015ecc:	6a3b      	ldr	r3, [r7, #32]
 8015ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d009      	beq.n	8015ee8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015ed4:	89bb      	ldrh	r3, [r7, #12]
 8015ed6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015eda:	f023 0203 	bic.w	r2, r3, #3
 8015ede:	897b      	ldrh	r3, [r7, #10]
 8015ee0:	4293      	cmp	r3, r2
 8015ee2:	bf28      	it	cs
 8015ee4:	4613      	movcs	r3, r2
 8015ee6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015ee8:	8af9      	ldrh	r1, [r7, #22]
 8015eea:	7bfb      	ldrb	r3, [r7, #15]
 8015eec:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	f7fb f82b 	bl	8010f4c <pbuf_alloc>
 8015ef6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015ef8:	693b      	ldr	r3, [r7, #16]
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d101      	bne.n	8015f02 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015efe:	2300      	movs	r3, #0
 8015f00:	e019      	b.n	8015f36 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015f02:	693b      	ldr	r3, [r7, #16]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d006      	beq.n	8015f18 <tcp_pbuf_prealloc+0xb8>
 8015f0a:	4b0d      	ldr	r3, [pc, #52]	; (8015f40 <tcp_pbuf_prealloc+0xe0>)
 8015f0c:	f240 120b 	movw	r2, #267	; 0x10b
 8015f10:	490f      	ldr	r1, [pc, #60]	; (8015f50 <tcp_pbuf_prealloc+0xf0>)
 8015f12:	480d      	ldr	r0, [pc, #52]	; (8015f48 <tcp_pbuf_prealloc+0xe8>)
 8015f14:	f004 ff32 	bl	801ad7c <iprintf>
  *oversize = p->len - length;
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	895a      	ldrh	r2, [r3, #10]
 8015f1c:	89bb      	ldrh	r3, [r7, #12]
 8015f1e:	1ad3      	subs	r3, r2, r3
 8015f20:	b29a      	uxth	r2, r3
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015f26:	693b      	ldr	r3, [r7, #16]
 8015f28:	89ba      	ldrh	r2, [r7, #12]
 8015f2a:	811a      	strh	r2, [r3, #8]
 8015f2c:	693b      	ldr	r3, [r7, #16]
 8015f2e:	891a      	ldrh	r2, [r3, #8]
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	815a      	strh	r2, [r3, #10]
  return p;
 8015f34:	693b      	ldr	r3, [r7, #16]
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	3718      	adds	r7, #24
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	bd80      	pop	{r7, pc}
 8015f3e:	bf00      	nop
 8015f40:	0801d5cc 	.word	0x0801d5cc
 8015f44:	0801d684 	.word	0x0801d684
 8015f48:	0801d620 	.word	0x0801d620
 8015f4c:	0801d6a8 	.word	0x0801d6a8
 8015f50:	0801d6c8 	.word	0x0801d6c8

08015f54 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015f54:	b580      	push	{r7, lr}
 8015f56:	b082      	sub	sp, #8
 8015f58:	af00      	add	r7, sp, #0
 8015f5a:	6078      	str	r0, [r7, #4]
 8015f5c:	460b      	mov	r3, r1
 8015f5e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d106      	bne.n	8015f74 <tcp_write_checks+0x20>
 8015f66:	4b33      	ldr	r3, [pc, #204]	; (8016034 <tcp_write_checks+0xe0>)
 8015f68:	f240 1233 	movw	r2, #307	; 0x133
 8015f6c:	4932      	ldr	r1, [pc, #200]	; (8016038 <tcp_write_checks+0xe4>)
 8015f6e:	4833      	ldr	r0, [pc, #204]	; (801603c <tcp_write_checks+0xe8>)
 8015f70:	f004 ff04 	bl	801ad7c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015f74:	687b      	ldr	r3, [r7, #4]
 8015f76:	7d1b      	ldrb	r3, [r3, #20]
 8015f78:	2b04      	cmp	r3, #4
 8015f7a:	d00e      	beq.n	8015f9a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015f80:	2b07      	cmp	r3, #7
 8015f82:	d00a      	beq.n	8015f9a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015f88:	2b02      	cmp	r3, #2
 8015f8a:	d006      	beq.n	8015f9a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015f90:	2b03      	cmp	r3, #3
 8015f92:	d002      	beq.n	8015f9a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015f94:	f06f 030a 	mvn.w	r3, #10
 8015f98:	e048      	b.n	801602c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015f9a:	887b      	ldrh	r3, [r7, #2]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d101      	bne.n	8015fa4 <tcp_write_checks+0x50>
    return ERR_OK;
 8015fa0:	2300      	movs	r3, #0
 8015fa2:	e043      	b.n	801602c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015faa:	887a      	ldrh	r2, [r7, #2]
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d909      	bls.n	8015fc4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	8b5b      	ldrh	r3, [r3, #26]
 8015fb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fb8:	b29a      	uxth	r2, r3
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8015fc2:	e033      	b.n	801602c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fca:	2b08      	cmp	r3, #8
 8015fcc:	d909      	bls.n	8015fe2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	8b5b      	ldrh	r3, [r3, #26]
 8015fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fd6:	b29a      	uxth	r2, r3
 8015fd8:	687b      	ldr	r3, [r7, #4]
 8015fda:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8015fe0:	e024      	b.n	801602c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d00f      	beq.n	801600c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d11a      	bne.n	801602a <tcp_write_checks+0xd6>
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d116      	bne.n	801602a <tcp_write_checks+0xd6>
 8015ffc:	4b0d      	ldr	r3, [pc, #52]	; (8016034 <tcp_write_checks+0xe0>)
 8015ffe:	f240 1255 	movw	r2, #341	; 0x155
 8016002:	490f      	ldr	r1, [pc, #60]	; (8016040 <tcp_write_checks+0xec>)
 8016004:	480d      	ldr	r0, [pc, #52]	; (801603c <tcp_write_checks+0xe8>)
 8016006:	f004 feb9 	bl	801ad7c <iprintf>
 801600a:	e00e      	b.n	801602a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016010:	2b00      	cmp	r3, #0
 8016012:	d103      	bne.n	801601c <tcp_write_checks+0xc8>
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016018:	2b00      	cmp	r3, #0
 801601a:	d006      	beq.n	801602a <tcp_write_checks+0xd6>
 801601c:	4b05      	ldr	r3, [pc, #20]	; (8016034 <tcp_write_checks+0xe0>)
 801601e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016022:	4908      	ldr	r1, [pc, #32]	; (8016044 <tcp_write_checks+0xf0>)
 8016024:	4805      	ldr	r0, [pc, #20]	; (801603c <tcp_write_checks+0xe8>)
 8016026:	f004 fea9 	bl	801ad7c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801602a:	2300      	movs	r3, #0
}
 801602c:	4618      	mov	r0, r3
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	0801d5cc 	.word	0x0801d5cc
 8016038:	0801d6dc 	.word	0x0801d6dc
 801603c:	0801d620 	.word	0x0801d620
 8016040:	0801d6fc 	.word	0x0801d6fc
 8016044:	0801d738 	.word	0x0801d738

08016048 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016048:	b590      	push	{r4, r7, lr}
 801604a:	b09b      	sub	sp, #108	; 0x6c
 801604c:	af04      	add	r7, sp, #16
 801604e:	60f8      	str	r0, [r7, #12]
 8016050:	60b9      	str	r1, [r7, #8]
 8016052:	4611      	mov	r1, r2
 8016054:	461a      	mov	r2, r3
 8016056:	460b      	mov	r3, r1
 8016058:	80fb      	strh	r3, [r7, #6]
 801605a:	4613      	mov	r3, r2
 801605c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801605e:	2300      	movs	r3, #0
 8016060:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8016062:	2300      	movs	r3, #0
 8016064:	653b      	str	r3, [r7, #80]	; 0x50
 8016066:	2300      	movs	r3, #0
 8016068:	64fb      	str	r3, [r7, #76]	; 0x4c
 801606a:	2300      	movs	r3, #0
 801606c:	64bb      	str	r3, [r7, #72]	; 0x48
 801606e:	2300      	movs	r3, #0
 8016070:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8016072:	2300      	movs	r3, #0
 8016074:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8016078:	2300      	movs	r3, #0
 801607a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801607e:	2300      	movs	r3, #0
 8016080:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8016082:	2300      	movs	r3, #0
 8016084:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8016086:	2300      	movs	r3, #0
 8016088:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d109      	bne.n	80160a4 <tcp_write+0x5c>
 8016090:	4ba4      	ldr	r3, [pc, #656]	; (8016324 <tcp_write+0x2dc>)
 8016092:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8016096:	49a4      	ldr	r1, [pc, #656]	; (8016328 <tcp_write+0x2e0>)
 8016098:	48a4      	ldr	r0, [pc, #656]	; (801632c <tcp_write+0x2e4>)
 801609a:	f004 fe6f 	bl	801ad7c <iprintf>
 801609e:	f06f 030f 	mvn.w	r3, #15
 80160a2:	e32a      	b.n	80166fa <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80160aa:	085b      	lsrs	r3, r3, #1
 80160ac:	b29a      	uxth	r2, r3
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160b2:	4293      	cmp	r3, r2
 80160b4:	bf28      	it	cs
 80160b6:	4613      	movcs	r3, r2
 80160b8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80160ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160bc:	2b00      	cmp	r3, #0
 80160be:	d102      	bne.n	80160c6 <tcp_write+0x7e>
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160c4:	e000      	b.n	80160c8 <tcp_write+0x80>
 80160c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160c8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d109      	bne.n	80160e4 <tcp_write+0x9c>
 80160d0:	4b94      	ldr	r3, [pc, #592]	; (8016324 <tcp_write+0x2dc>)
 80160d2:	f240 12ad 	movw	r2, #429	; 0x1ad
 80160d6:	4996      	ldr	r1, [pc, #600]	; (8016330 <tcp_write+0x2e8>)
 80160d8:	4894      	ldr	r0, [pc, #592]	; (801632c <tcp_write+0x2e4>)
 80160da:	f004 fe4f 	bl	801ad7c <iprintf>
 80160de:	f06f 030f 	mvn.w	r3, #15
 80160e2:	e30a      	b.n	80166fa <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 80160e4:	88fb      	ldrh	r3, [r7, #6]
 80160e6:	4619      	mov	r1, r3
 80160e8:	68f8      	ldr	r0, [r7, #12]
 80160ea:	f7ff ff33 	bl	8015f54 <tcp_write_checks>
 80160ee:	4603      	mov	r3, r0
 80160f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80160f4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d002      	beq.n	8016102 <tcp_write+0xba>
    return err;
 80160fc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016100:	e2fb      	b.n	80166fa <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016108:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801610c:	2300      	movs	r3, #0
 801610e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016116:	2b00      	cmp	r3, #0
 8016118:	f000 80f6 	beq.w	8016308 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016120:	653b      	str	r3, [r7, #80]	; 0x50
 8016122:	e002      	b.n	801612a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016124:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801612a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	2b00      	cmp	r3, #0
 8016130:	d1f8      	bne.n	8016124 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016134:	7a9b      	ldrb	r3, [r3, #10]
 8016136:	009b      	lsls	r3, r3, #2
 8016138:	b29b      	uxth	r3, r3
 801613a:	f003 0304 	and.w	r3, r3, #4
 801613e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016140:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016144:	891b      	ldrh	r3, [r3, #8]
 8016146:	4619      	mov	r1, r3
 8016148:	8c3b      	ldrh	r3, [r7, #32]
 801614a:	440b      	add	r3, r1
 801614c:	429a      	cmp	r2, r3
 801614e:	da06      	bge.n	801615e <tcp_write+0x116>
 8016150:	4b74      	ldr	r3, [pc, #464]	; (8016324 <tcp_write+0x2dc>)
 8016152:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016156:	4977      	ldr	r1, [pc, #476]	; (8016334 <tcp_write+0x2ec>)
 8016158:	4874      	ldr	r0, [pc, #464]	; (801632c <tcp_write+0x2e4>)
 801615a:	f004 fe0f 	bl	801ad7c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801615e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016160:	891a      	ldrh	r2, [r3, #8]
 8016162:	8c3b      	ldrh	r3, [r7, #32]
 8016164:	4413      	add	r3, r2
 8016166:	b29b      	uxth	r3, r3
 8016168:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801616a:	1ad3      	subs	r3, r2, r3
 801616c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801616e:	68fb      	ldr	r3, [r7, #12]
 8016170:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016174:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016176:	8a7b      	ldrh	r3, [r7, #18]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d026      	beq.n	80161ca <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801617c:	8a7b      	ldrh	r3, [r7, #18]
 801617e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016180:	429a      	cmp	r2, r3
 8016182:	d206      	bcs.n	8016192 <tcp_write+0x14a>
 8016184:	4b67      	ldr	r3, [pc, #412]	; (8016324 <tcp_write+0x2dc>)
 8016186:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801618a:	496b      	ldr	r1, [pc, #428]	; (8016338 <tcp_write+0x2f0>)
 801618c:	4867      	ldr	r0, [pc, #412]	; (801632c <tcp_write+0x2e4>)
 801618e:	f004 fdf5 	bl	801ad7c <iprintf>
      seg = last_unsent;
 8016192:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016194:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016196:	8a7b      	ldrh	r3, [r7, #18]
 8016198:	88fa      	ldrh	r2, [r7, #6]
 801619a:	4293      	cmp	r3, r2
 801619c:	bf28      	it	cs
 801619e:	4613      	movcs	r3, r2
 80161a0:	b29b      	uxth	r3, r3
 80161a2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161a4:	4293      	cmp	r3, r2
 80161a6:	bf28      	it	cs
 80161a8:	4613      	movcs	r3, r2
 80161aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80161ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161b0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161b2:	4413      	add	r3, r2
 80161b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80161b8:	8a7a      	ldrh	r2, [r7, #18]
 80161ba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161bc:	1ad3      	subs	r3, r2, r3
 80161be:	b29b      	uxth	r3, r3
 80161c0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80161c2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161c6:	1ad3      	subs	r3, r2, r3
 80161c8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 80161ca:	8a7b      	ldrh	r3, [r7, #18]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d00b      	beq.n	80161e8 <tcp_write+0x1a0>
 80161d0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161d4:	88fb      	ldrh	r3, [r7, #6]
 80161d6:	429a      	cmp	r2, r3
 80161d8:	d006      	beq.n	80161e8 <tcp_write+0x1a0>
 80161da:	4b52      	ldr	r3, [pc, #328]	; (8016324 <tcp_write+0x2dc>)
 80161dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80161e0:	4956      	ldr	r1, [pc, #344]	; (801633c <tcp_write+0x2f4>)
 80161e2:	4852      	ldr	r0, [pc, #328]	; (801632c <tcp_write+0x2e4>)
 80161e4:	f004 fdca 	bl	801ad7c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 80161e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161ec:	88fb      	ldrh	r3, [r7, #6]
 80161ee:	429a      	cmp	r2, r3
 80161f0:	f080 8167 	bcs.w	80164c2 <tcp_write+0x47a>
 80161f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	f000 8163 	beq.w	80164c2 <tcp_write+0x47a>
 80161fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161fe:	891b      	ldrh	r3, [r3, #8]
 8016200:	2b00      	cmp	r3, #0
 8016202:	f000 815e 	beq.w	80164c2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016206:	88fa      	ldrh	r2, [r7, #6]
 8016208:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801620c:	1ad2      	subs	r2, r2, r3
 801620e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016210:	4293      	cmp	r3, r2
 8016212:	bfa8      	it	ge
 8016214:	4613      	movge	r3, r2
 8016216:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801621a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801621c:	797b      	ldrb	r3, [r7, #5]
 801621e:	f003 0301 	and.w	r3, r3, #1
 8016222:	2b00      	cmp	r3, #0
 8016224:	d027      	beq.n	8016276 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016226:	f107 0012 	add.w	r0, r7, #18
 801622a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801622c:	8bf9      	ldrh	r1, [r7, #30]
 801622e:	2301      	movs	r3, #1
 8016230:	9302      	str	r3, [sp, #8]
 8016232:	797b      	ldrb	r3, [r7, #5]
 8016234:	9301      	str	r3, [sp, #4]
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	9300      	str	r3, [sp, #0]
 801623a:	4603      	mov	r3, r0
 801623c:	2000      	movs	r0, #0
 801623e:	f7ff fe0f 	bl	8015e60 <tcp_pbuf_prealloc>
 8016242:	6578      	str	r0, [r7, #84]	; 0x54
 8016244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016246:	2b00      	cmp	r3, #0
 8016248:	f000 8225 	beq.w	8016696 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801624c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801624e:	6858      	ldr	r0, [r3, #4]
 8016250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016254:	68ba      	ldr	r2, [r7, #8]
 8016256:	4413      	add	r3, r2
 8016258:	8bfa      	ldrh	r2, [r7, #30]
 801625a:	4619      	mov	r1, r3
 801625c:	f004 fd1d 	bl	801ac9a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016260:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016262:	f7fb f9e5 	bl	8011630 <pbuf_clen>
 8016266:	4603      	mov	r3, r0
 8016268:	461a      	mov	r2, r3
 801626a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801626e:	4413      	add	r3, r2
 8016270:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016274:	e041      	b.n	80162fa <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016278:	685b      	ldr	r3, [r3, #4]
 801627a:	637b      	str	r3, [r7, #52]	; 0x34
 801627c:	e002      	b.n	8016284 <tcp_write+0x23c>
 801627e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016280:	681b      	ldr	r3, [r3, #0]
 8016282:	637b      	str	r3, [r7, #52]	; 0x34
 8016284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016286:	681b      	ldr	r3, [r3, #0]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d1f8      	bne.n	801627e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801628e:	7b1b      	ldrb	r3, [r3, #12]
 8016290:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016294:	2b00      	cmp	r3, #0
 8016296:	d115      	bne.n	80162c4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016298:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801629e:	8952      	ldrh	r2, [r2, #10]
 80162a0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80162a2:	68ba      	ldr	r2, [r7, #8]
 80162a4:	429a      	cmp	r2, r3
 80162a6:	d10d      	bne.n	80162c4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80162a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d006      	beq.n	80162be <tcp_write+0x276>
 80162b0:	4b1c      	ldr	r3, [pc, #112]	; (8016324 <tcp_write+0x2dc>)
 80162b2:	f240 2231 	movw	r2, #561	; 0x231
 80162b6:	4922      	ldr	r1, [pc, #136]	; (8016340 <tcp_write+0x2f8>)
 80162b8:	481c      	ldr	r0, [pc, #112]	; (801632c <tcp_write+0x2e4>)
 80162ba:	f004 fd5f 	bl	801ad7c <iprintf>
          extendlen = seglen;
 80162be:	8bfb      	ldrh	r3, [r7, #30]
 80162c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80162c2:	e01a      	b.n	80162fa <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80162c4:	8bfb      	ldrh	r3, [r7, #30]
 80162c6:	2201      	movs	r2, #1
 80162c8:	4619      	mov	r1, r3
 80162ca:	2000      	movs	r0, #0
 80162cc:	f7fa fe3e 	bl	8010f4c <pbuf_alloc>
 80162d0:	6578      	str	r0, [r7, #84]	; 0x54
 80162d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	f000 81e0 	beq.w	801669a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 80162da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162de:	68ba      	ldr	r2, [r7, #8]
 80162e0:	441a      	add	r2, r3
 80162e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80162e4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 80162e6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80162e8:	f7fb f9a2 	bl	8011630 <pbuf_clen>
 80162ec:	4603      	mov	r3, r0
 80162ee:	461a      	mov	r2, r3
 80162f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162f4:	4413      	add	r3, r2
 80162f6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80162fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80162fe:	8bfb      	ldrh	r3, [r7, #30]
 8016300:	4413      	add	r3, r2
 8016302:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016306:	e0dc      	b.n	80164c2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016308:	68fb      	ldr	r3, [r7, #12]
 801630a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801630e:	2b00      	cmp	r3, #0
 8016310:	f000 80d7 	beq.w	80164c2 <tcp_write+0x47a>
 8016314:	4b03      	ldr	r3, [pc, #12]	; (8016324 <tcp_write+0x2dc>)
 8016316:	f240 224a 	movw	r2, #586	; 0x24a
 801631a:	490a      	ldr	r1, [pc, #40]	; (8016344 <tcp_write+0x2fc>)
 801631c:	4803      	ldr	r0, [pc, #12]	; (801632c <tcp_write+0x2e4>)
 801631e:	f004 fd2d 	bl	801ad7c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016322:	e0ce      	b.n	80164c2 <tcp_write+0x47a>
 8016324:	0801d5cc 	.word	0x0801d5cc
 8016328:	0801d76c 	.word	0x0801d76c
 801632c:	0801d620 	.word	0x0801d620
 8016330:	0801d784 	.word	0x0801d784
 8016334:	0801d7b8 	.word	0x0801d7b8
 8016338:	0801d7d0 	.word	0x0801d7d0
 801633c:	0801d7f0 	.word	0x0801d7f0
 8016340:	0801d810 	.word	0x0801d810
 8016344:	0801d83c 	.word	0x0801d83c
    struct pbuf *p;
    u16_t left = len - pos;
 8016348:	88fa      	ldrh	r2, [r7, #6]
 801634a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801634e:	1ad3      	subs	r3, r2, r3
 8016350:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016352:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016356:	b29b      	uxth	r3, r3
 8016358:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801635a:	1ad3      	subs	r3, r2, r3
 801635c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801635e:	8b7a      	ldrh	r2, [r7, #26]
 8016360:	8bbb      	ldrh	r3, [r7, #28]
 8016362:	4293      	cmp	r3, r2
 8016364:	bf28      	it	cs
 8016366:	4613      	movcs	r3, r2
 8016368:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801636a:	797b      	ldrb	r3, [r7, #5]
 801636c:	f003 0301 	and.w	r3, r3, #1
 8016370:	2b00      	cmp	r3, #0
 8016372:	d036      	beq.n	80163e2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016374:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016378:	b29a      	uxth	r2, r3
 801637a:	8b3b      	ldrh	r3, [r7, #24]
 801637c:	4413      	add	r3, r2
 801637e:	b299      	uxth	r1, r3
 8016380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016382:	2b00      	cmp	r3, #0
 8016384:	bf0c      	ite	eq
 8016386:	2301      	moveq	r3, #1
 8016388:	2300      	movne	r3, #0
 801638a:	b2db      	uxtb	r3, r3
 801638c:	f107 0012 	add.w	r0, r7, #18
 8016390:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016392:	9302      	str	r3, [sp, #8]
 8016394:	797b      	ldrb	r3, [r7, #5]
 8016396:	9301      	str	r3, [sp, #4]
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	9300      	str	r3, [sp, #0]
 801639c:	4603      	mov	r3, r0
 801639e:	2036      	movs	r0, #54	; 0x36
 80163a0:	f7ff fd5e 	bl	8015e60 <tcp_pbuf_prealloc>
 80163a4:	6338      	str	r0, [r7, #48]	; 0x30
 80163a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	f000 8178 	beq.w	801669e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80163ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b0:	895b      	ldrh	r3, [r3, #10]
 80163b2:	8b3a      	ldrh	r2, [r7, #24]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d906      	bls.n	80163c6 <tcp_write+0x37e>
 80163b8:	4b8c      	ldr	r3, [pc, #560]	; (80165ec <tcp_write+0x5a4>)
 80163ba:	f240 2266 	movw	r2, #614	; 0x266
 80163be:	498c      	ldr	r1, [pc, #560]	; (80165f0 <tcp_write+0x5a8>)
 80163c0:	488c      	ldr	r0, [pc, #560]	; (80165f4 <tcp_write+0x5ac>)
 80163c2:	f004 fcdb 	bl	801ad7c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80163c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c8:	685a      	ldr	r2, [r3, #4]
 80163ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80163ce:	18d0      	adds	r0, r2, r3
 80163d0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80163d4:	68ba      	ldr	r2, [r7, #8]
 80163d6:	4413      	add	r3, r2
 80163d8:	8b3a      	ldrh	r2, [r7, #24]
 80163da:	4619      	mov	r1, r3
 80163dc:	f004 fc5d 	bl	801ac9a <memcpy>
 80163e0:	e02f      	b.n	8016442 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 80163e2:	8a7b      	ldrh	r3, [r7, #18]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d006      	beq.n	80163f6 <tcp_write+0x3ae>
 80163e8:	4b80      	ldr	r3, [pc, #512]	; (80165ec <tcp_write+0x5a4>)
 80163ea:	f240 2271 	movw	r2, #625	; 0x271
 80163ee:	4982      	ldr	r1, [pc, #520]	; (80165f8 <tcp_write+0x5b0>)
 80163f0:	4880      	ldr	r0, [pc, #512]	; (80165f4 <tcp_write+0x5ac>)
 80163f2:	f004 fcc3 	bl	801ad7c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80163f6:	8b3b      	ldrh	r3, [r7, #24]
 80163f8:	2201      	movs	r2, #1
 80163fa:	4619      	mov	r1, r3
 80163fc:	2036      	movs	r0, #54	; 0x36
 80163fe:	f7fa fda5 	bl	8010f4c <pbuf_alloc>
 8016402:	6178      	str	r0, [r7, #20]
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	2b00      	cmp	r3, #0
 8016408:	f000 814b 	beq.w	80166a2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801640c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016410:	68ba      	ldr	r2, [r7, #8]
 8016412:	441a      	add	r2, r3
 8016414:	697b      	ldr	r3, [r7, #20]
 8016416:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016418:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801641c:	b29b      	uxth	r3, r3
 801641e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016422:	4619      	mov	r1, r3
 8016424:	2036      	movs	r0, #54	; 0x36
 8016426:	f7fa fd91 	bl	8010f4c <pbuf_alloc>
 801642a:	6338      	str	r0, [r7, #48]	; 0x30
 801642c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642e:	2b00      	cmp	r3, #0
 8016430:	d103      	bne.n	801643a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016432:	6978      	ldr	r0, [r7, #20]
 8016434:	f7fb f86e 	bl	8011514 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016438:	e136      	b.n	80166a8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801643a:	6979      	ldr	r1, [r7, #20]
 801643c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801643e:	f7fb f937 	bl	80116b0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016444:	f7fb f8f4 	bl	8011630 <pbuf_clen>
 8016448:	4603      	mov	r3, r0
 801644a:	461a      	mov	r2, r3
 801644c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016450:	4413      	add	r3, r2
 8016452:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016456:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801645a:	2b09      	cmp	r3, #9
 801645c:	d903      	bls.n	8016466 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801645e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016460:	f7fb f858 	bl	8011514 <pbuf_free>
      goto memerr;
 8016464:	e120      	b.n	80166a8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016466:	68fb      	ldr	r3, [r7, #12]
 8016468:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801646a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801646e:	441a      	add	r2, r3
 8016470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016474:	9300      	str	r3, [sp, #0]
 8016476:	4613      	mov	r3, r2
 8016478:	2200      	movs	r2, #0
 801647a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801647c:	68f8      	ldr	r0, [r7, #12]
 801647e:	f7ff fc51 	bl	8015d24 <tcp_create_segment>
 8016482:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016486:	2b00      	cmp	r3, #0
 8016488:	f000 810d 	beq.w	80166a6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801648c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801648e:	2b00      	cmp	r3, #0
 8016490:	d102      	bne.n	8016498 <tcp_write+0x450>
      queue = seg;
 8016492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016494:	647b      	str	r3, [r7, #68]	; 0x44
 8016496:	e00c      	b.n	80164b2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801649a:	2b00      	cmp	r3, #0
 801649c:	d106      	bne.n	80164ac <tcp_write+0x464>
 801649e:	4b53      	ldr	r3, [pc, #332]	; (80165ec <tcp_write+0x5a4>)
 80164a0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80164a4:	4955      	ldr	r1, [pc, #340]	; (80165fc <tcp_write+0x5b4>)
 80164a6:	4853      	ldr	r0, [pc, #332]	; (80165f4 <tcp_write+0x5ac>)
 80164a8:	f004 fc68 	bl	801ad7c <iprintf>
      prev_seg->next = seg;
 80164ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80164b0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80164b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164b4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80164b6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164ba:	8b3b      	ldrh	r3, [r7, #24]
 80164bc:	4413      	add	r3, r2
 80164be:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80164c2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164c6:	88fb      	ldrh	r3, [r7, #6]
 80164c8:	429a      	cmp	r2, r3
 80164ca:	f4ff af3d 	bcc.w	8016348 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 80164ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d02c      	beq.n	801652e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 80164d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164d6:	685b      	ldr	r3, [r3, #4]
 80164d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80164da:	e01e      	b.n	801651a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 80164dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164de:	891a      	ldrh	r2, [r3, #8]
 80164e0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80164e2:	4413      	add	r3, r2
 80164e4:	b29a      	uxth	r2, r3
 80164e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164e8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80164ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d110      	bne.n	8016514 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80164f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80164f8:	8952      	ldrh	r2, [r2, #10]
 80164fa:	4413      	add	r3, r2
 80164fc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80164fe:	68b9      	ldr	r1, [r7, #8]
 8016500:	4618      	mov	r0, r3
 8016502:	f004 fbca 	bl	801ac9a <memcpy>
        p->len += oversize_used;
 8016506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016508:	895a      	ldrh	r2, [r3, #10]
 801650a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801650c:	4413      	add	r3, r2
 801650e:	b29a      	uxth	r2, r3
 8016510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016512:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	62fb      	str	r3, [r7, #44]	; 0x2c
 801651a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801651c:	2b00      	cmp	r3, #0
 801651e:	d1dd      	bne.n	80164dc <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016522:	891a      	ldrh	r2, [r3, #8]
 8016524:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016526:	4413      	add	r3, r2
 8016528:	b29a      	uxth	r2, r3
 801652a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801652c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801652e:	8a7a      	ldrh	r2, [r7, #18]
 8016530:	68fb      	ldr	r3, [r7, #12]
 8016532:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016538:	2b00      	cmp	r3, #0
 801653a:	d018      	beq.n	801656e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801653c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801653e:	2b00      	cmp	r3, #0
 8016540:	d106      	bne.n	8016550 <tcp_write+0x508>
 8016542:	4b2a      	ldr	r3, [pc, #168]	; (80165ec <tcp_write+0x5a4>)
 8016544:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016548:	492d      	ldr	r1, [pc, #180]	; (8016600 <tcp_write+0x5b8>)
 801654a:	482a      	ldr	r0, [pc, #168]	; (80165f4 <tcp_write+0x5ac>)
 801654c:	f004 fc16 	bl	801ad7c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016550:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016552:	685b      	ldr	r3, [r3, #4]
 8016554:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016556:	4618      	mov	r0, r3
 8016558:	f7fb f8aa 	bl	80116b0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801655c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801655e:	891a      	ldrh	r2, [r3, #8]
 8016560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016562:	891b      	ldrh	r3, [r3, #8]
 8016564:	4413      	add	r3, r2
 8016566:	b29a      	uxth	r2, r3
 8016568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801656a:	811a      	strh	r2, [r3, #8]
 801656c:	e037      	b.n	80165de <tcp_write+0x596>
  } else if (extendlen > 0) {
 801656e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016570:	2b00      	cmp	r3, #0
 8016572:	d034      	beq.n	80165de <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016576:	2b00      	cmp	r3, #0
 8016578:	d003      	beq.n	8016582 <tcp_write+0x53a>
 801657a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d106      	bne.n	8016590 <tcp_write+0x548>
 8016582:	4b1a      	ldr	r3, [pc, #104]	; (80165ec <tcp_write+0x5a4>)
 8016584:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016588:	491e      	ldr	r1, [pc, #120]	; (8016604 <tcp_write+0x5bc>)
 801658a:	481a      	ldr	r0, [pc, #104]	; (80165f4 <tcp_write+0x5ac>)
 801658c:	f004 fbf6 	bl	801ad7c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016592:	685b      	ldr	r3, [r3, #4]
 8016594:	62bb      	str	r3, [r7, #40]	; 0x28
 8016596:	e009      	b.n	80165ac <tcp_write+0x564>
      p->tot_len += extendlen;
 8016598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801659a:	891a      	ldrh	r2, [r3, #8]
 801659c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801659e:	4413      	add	r3, r2
 80165a0:	b29a      	uxth	r2, r3
 80165a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80165a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80165ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ae:	681b      	ldr	r3, [r3, #0]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d1f1      	bne.n	8016598 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80165b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165b6:	891a      	ldrh	r2, [r3, #8]
 80165b8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165ba:	4413      	add	r3, r2
 80165bc:	b29a      	uxth	r2, r3
 80165be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80165c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c4:	895a      	ldrh	r2, [r3, #10]
 80165c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165c8:	4413      	add	r3, r2
 80165ca:	b29a      	uxth	r2, r3
 80165cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ce:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80165d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165d2:	891a      	ldrh	r2, [r3, #8]
 80165d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165d6:	4413      	add	r3, r2
 80165d8:	b29a      	uxth	r2, r3
 80165da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165dc:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80165de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165e0:	2b00      	cmp	r3, #0
 80165e2:	d111      	bne.n	8016608 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80165e4:	68fb      	ldr	r3, [r7, #12]
 80165e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80165e8:	66da      	str	r2, [r3, #108]	; 0x6c
 80165ea:	e010      	b.n	801660e <tcp_write+0x5c6>
 80165ec:	0801d5cc 	.word	0x0801d5cc
 80165f0:	0801d86c 	.word	0x0801d86c
 80165f4:	0801d620 	.word	0x0801d620
 80165f8:	0801d8ac 	.word	0x0801d8ac
 80165fc:	0801d8bc 	.word	0x0801d8bc
 8016600:	0801d8d0 	.word	0x0801d8d0
 8016604:	0801d908 	.word	0x0801d908
  } else {
    last_unsent->next = queue;
 8016608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801660a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801660c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016612:	88fb      	ldrh	r3, [r7, #6]
 8016614:	441a      	add	r2, r3
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801661a:	68fb      	ldr	r3, [r7, #12]
 801661c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016620:	88fb      	ldrh	r3, [r7, #6]
 8016622:	1ad3      	subs	r3, r2, r3
 8016624:	b29a      	uxth	r2, r3
 8016626:	68fb      	ldr	r3, [r7, #12]
 8016628:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016632:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801663c:	2b00      	cmp	r3, #0
 801663e:	d00e      	beq.n	801665e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016644:	2b00      	cmp	r3, #0
 8016646:	d10a      	bne.n	801665e <tcp_write+0x616>
 8016648:	68fb      	ldr	r3, [r7, #12]
 801664a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801664c:	2b00      	cmp	r3, #0
 801664e:	d106      	bne.n	801665e <tcp_write+0x616>
 8016650:	4b2c      	ldr	r3, [pc, #176]	; (8016704 <tcp_write+0x6bc>)
 8016652:	f240 3212 	movw	r2, #786	; 0x312
 8016656:	492c      	ldr	r1, [pc, #176]	; (8016708 <tcp_write+0x6c0>)
 8016658:	482c      	ldr	r0, [pc, #176]	; (801670c <tcp_write+0x6c4>)
 801665a:	f004 fb8f 	bl	801ad7c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801665e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016660:	2b00      	cmp	r3, #0
 8016662:	d016      	beq.n	8016692 <tcp_write+0x64a>
 8016664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016666:	68db      	ldr	r3, [r3, #12]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d012      	beq.n	8016692 <tcp_write+0x64a>
 801666c:	797b      	ldrb	r3, [r7, #5]
 801666e:	f003 0302 	and.w	r3, r3, #2
 8016672:	2b00      	cmp	r3, #0
 8016674:	d10d      	bne.n	8016692 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016678:	68db      	ldr	r3, [r3, #12]
 801667a:	899b      	ldrh	r3, [r3, #12]
 801667c:	b29c      	uxth	r4, r3
 801667e:	2008      	movs	r0, #8
 8016680:	f7f9 fa9e 	bl	800fbc0 <lwip_htons>
 8016684:	4603      	mov	r3, r0
 8016686:	461a      	mov	r2, r3
 8016688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801668a:	68db      	ldr	r3, [r3, #12]
 801668c:	4322      	orrs	r2, r4
 801668e:	b292      	uxth	r2, r2
 8016690:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016692:	2300      	movs	r3, #0
 8016694:	e031      	b.n	80166fa <tcp_write+0x6b2>
          goto memerr;
 8016696:	bf00      	nop
 8016698:	e006      	b.n	80166a8 <tcp_write+0x660>
            goto memerr;
 801669a:	bf00      	nop
 801669c:	e004      	b.n	80166a8 <tcp_write+0x660>
        goto memerr;
 801669e:	bf00      	nop
 80166a0:	e002      	b.n	80166a8 <tcp_write+0x660>
        goto memerr;
 80166a2:	bf00      	nop
 80166a4:	e000      	b.n	80166a8 <tcp_write+0x660>
      goto memerr;
 80166a6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80166a8:	68fb      	ldr	r3, [r7, #12]
 80166aa:	8b5b      	ldrh	r3, [r3, #26]
 80166ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166b0:	b29a      	uxth	r2, r3
 80166b2:	68fb      	ldr	r3, [r7, #12]
 80166b4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80166b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166b8:	2b00      	cmp	r3, #0
 80166ba:	d002      	beq.n	80166c2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80166bc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80166be:	f7fa ff29 	bl	8011514 <pbuf_free>
  }
  if (queue != NULL) {
 80166c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d002      	beq.n	80166ce <tcp_write+0x686>
    tcp_segs_free(queue);
 80166c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80166ca:	f7fc fb57 	bl	8012d7c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80166ce:	68fb      	ldr	r3, [r7, #12]
 80166d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166d4:	2b00      	cmp	r3, #0
 80166d6:	d00e      	beq.n	80166f6 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80166d8:	68fb      	ldr	r3, [r7, #12]
 80166da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d10a      	bne.n	80166f6 <tcp_write+0x6ae>
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d106      	bne.n	80166f6 <tcp_write+0x6ae>
 80166e8:	4b06      	ldr	r3, [pc, #24]	; (8016704 <tcp_write+0x6bc>)
 80166ea:	f240 3227 	movw	r2, #807	; 0x327
 80166ee:	4906      	ldr	r1, [pc, #24]	; (8016708 <tcp_write+0x6c0>)
 80166f0:	4806      	ldr	r0, [pc, #24]	; (801670c <tcp_write+0x6c4>)
 80166f2:	f004 fb43 	bl	801ad7c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80166f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80166fa:	4618      	mov	r0, r3
 80166fc:	375c      	adds	r7, #92	; 0x5c
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd90      	pop	{r4, r7, pc}
 8016702:	bf00      	nop
 8016704:	0801d5cc 	.word	0x0801d5cc
 8016708:	0801d940 	.word	0x0801d940
 801670c:	0801d620 	.word	0x0801d620

08016710 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016710:	b590      	push	{r4, r7, lr}
 8016712:	b08b      	sub	sp, #44	; 0x2c
 8016714:	af02      	add	r7, sp, #8
 8016716:	6078      	str	r0, [r7, #4]
 8016718:	460b      	mov	r3, r1
 801671a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801671c:	2300      	movs	r3, #0
 801671e:	61fb      	str	r3, [r7, #28]
 8016720:	2300      	movs	r3, #0
 8016722:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016724:	2300      	movs	r3, #0
 8016726:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d106      	bne.n	801673c <tcp_split_unsent_seg+0x2c>
 801672e:	4b95      	ldr	r3, [pc, #596]	; (8016984 <tcp_split_unsent_seg+0x274>)
 8016730:	f240 324b 	movw	r2, #843	; 0x34b
 8016734:	4994      	ldr	r1, [pc, #592]	; (8016988 <tcp_split_unsent_seg+0x278>)
 8016736:	4895      	ldr	r0, [pc, #596]	; (801698c <tcp_split_unsent_seg+0x27c>)
 8016738:	f004 fb20 	bl	801ad7c <iprintf>

  useg = pcb->unsent;
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016740:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016742:	697b      	ldr	r3, [r7, #20]
 8016744:	2b00      	cmp	r3, #0
 8016746:	d102      	bne.n	801674e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016748:	f04f 33ff 	mov.w	r3, #4294967295
 801674c:	e116      	b.n	801697c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801674e:	887b      	ldrh	r3, [r7, #2]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d109      	bne.n	8016768 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016754:	4b8b      	ldr	r3, [pc, #556]	; (8016984 <tcp_split_unsent_seg+0x274>)
 8016756:	f240 3253 	movw	r2, #851	; 0x353
 801675a:	498d      	ldr	r1, [pc, #564]	; (8016990 <tcp_split_unsent_seg+0x280>)
 801675c:	488b      	ldr	r0, [pc, #556]	; (801698c <tcp_split_unsent_seg+0x27c>)
 801675e:	f004 fb0d 	bl	801ad7c <iprintf>
    return ERR_VAL;
 8016762:	f06f 0305 	mvn.w	r3, #5
 8016766:	e109      	b.n	801697c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	891b      	ldrh	r3, [r3, #8]
 801676c:	887a      	ldrh	r2, [r7, #2]
 801676e:	429a      	cmp	r2, r3
 8016770:	d301      	bcc.n	8016776 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016772:	2300      	movs	r3, #0
 8016774:	e102      	b.n	801697c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801677a:	887a      	ldrh	r2, [r7, #2]
 801677c:	429a      	cmp	r2, r3
 801677e:	d906      	bls.n	801678e <tcp_split_unsent_seg+0x7e>
 8016780:	4b80      	ldr	r3, [pc, #512]	; (8016984 <tcp_split_unsent_seg+0x274>)
 8016782:	f240 325b 	movw	r2, #859	; 0x35b
 8016786:	4983      	ldr	r1, [pc, #524]	; (8016994 <tcp_split_unsent_seg+0x284>)
 8016788:	4880      	ldr	r0, [pc, #512]	; (801698c <tcp_split_unsent_seg+0x27c>)
 801678a:	f004 faf7 	bl	801ad7c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801678e:	697b      	ldr	r3, [r7, #20]
 8016790:	891b      	ldrh	r3, [r3, #8]
 8016792:	2b00      	cmp	r3, #0
 8016794:	d106      	bne.n	80167a4 <tcp_split_unsent_seg+0x94>
 8016796:	4b7b      	ldr	r3, [pc, #492]	; (8016984 <tcp_split_unsent_seg+0x274>)
 8016798:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801679c:	497e      	ldr	r1, [pc, #504]	; (8016998 <tcp_split_unsent_seg+0x288>)
 801679e:	487b      	ldr	r0, [pc, #492]	; (801698c <tcp_split_unsent_seg+0x27c>)
 80167a0:	f004 faec 	bl	801ad7c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80167a4:	697b      	ldr	r3, [r7, #20]
 80167a6:	7a9b      	ldrb	r3, [r3, #10]
 80167a8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80167aa:	7bfb      	ldrb	r3, [r7, #15]
 80167ac:	009b      	lsls	r3, r3, #2
 80167ae:	b2db      	uxtb	r3, r3
 80167b0:	f003 0304 	and.w	r3, r3, #4
 80167b4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80167b6:	697b      	ldr	r3, [r7, #20]
 80167b8:	891a      	ldrh	r2, [r3, #8]
 80167ba:	887b      	ldrh	r3, [r7, #2]
 80167bc:	1ad3      	subs	r3, r2, r3
 80167be:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80167c0:	7bbb      	ldrb	r3, [r7, #14]
 80167c2:	b29a      	uxth	r2, r3
 80167c4:	89bb      	ldrh	r3, [r7, #12]
 80167c6:	4413      	add	r3, r2
 80167c8:	b29b      	uxth	r3, r3
 80167ca:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167ce:	4619      	mov	r1, r3
 80167d0:	2036      	movs	r0, #54	; 0x36
 80167d2:	f7fa fbbb 	bl	8010f4c <pbuf_alloc>
 80167d6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80167d8:	693b      	ldr	r3, [r7, #16]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	f000 80b7 	beq.w	801694e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80167e0:	697b      	ldr	r3, [r7, #20]
 80167e2:	685b      	ldr	r3, [r3, #4]
 80167e4:	891a      	ldrh	r2, [r3, #8]
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	891b      	ldrh	r3, [r3, #8]
 80167ea:	1ad3      	subs	r3, r2, r3
 80167ec:	b29a      	uxth	r2, r3
 80167ee:	887b      	ldrh	r3, [r7, #2]
 80167f0:	4413      	add	r3, r2
 80167f2:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	6858      	ldr	r0, [r3, #4]
 80167f8:	693b      	ldr	r3, [r7, #16]
 80167fa:	685a      	ldr	r2, [r3, #4]
 80167fc:	7bbb      	ldrb	r3, [r7, #14]
 80167fe:	18d1      	adds	r1, r2, r3
 8016800:	897b      	ldrh	r3, [r7, #10]
 8016802:	89ba      	ldrh	r2, [r7, #12]
 8016804:	f7fb f88c 	bl	8011920 <pbuf_copy_partial>
 8016808:	4603      	mov	r3, r0
 801680a:	461a      	mov	r2, r3
 801680c:	89bb      	ldrh	r3, [r7, #12]
 801680e:	4293      	cmp	r3, r2
 8016810:	f040 809f 	bne.w	8016952 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	68db      	ldr	r3, [r3, #12]
 8016818:	899b      	ldrh	r3, [r3, #12]
 801681a:	b29b      	uxth	r3, r3
 801681c:	4618      	mov	r0, r3
 801681e:	f7f9 f9cf 	bl	800fbc0 <lwip_htons>
 8016822:	4603      	mov	r3, r0
 8016824:	b2db      	uxtb	r3, r3
 8016826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801682a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801682c:	2300      	movs	r3, #0
 801682e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016830:	7efb      	ldrb	r3, [r7, #27]
 8016832:	f003 0308 	and.w	r3, r3, #8
 8016836:	2b00      	cmp	r3, #0
 8016838:	d007      	beq.n	801684a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801683a:	7efb      	ldrb	r3, [r7, #27]
 801683c:	f023 0308 	bic.w	r3, r3, #8
 8016840:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016842:	7ebb      	ldrb	r3, [r7, #26]
 8016844:	f043 0308 	orr.w	r3, r3, #8
 8016848:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801684a:	7efb      	ldrb	r3, [r7, #27]
 801684c:	f003 0301 	and.w	r3, r3, #1
 8016850:	2b00      	cmp	r3, #0
 8016852:	d007      	beq.n	8016864 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016854:	7efb      	ldrb	r3, [r7, #27]
 8016856:	f023 0301 	bic.w	r3, r3, #1
 801685a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801685c:	7ebb      	ldrb	r3, [r7, #26]
 801685e:	f043 0301 	orr.w	r3, r3, #1
 8016862:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016864:	697b      	ldr	r3, [r7, #20]
 8016866:	68db      	ldr	r3, [r3, #12]
 8016868:	685b      	ldr	r3, [r3, #4]
 801686a:	4618      	mov	r0, r3
 801686c:	f7f9 f9bd 	bl	800fbea <lwip_htonl>
 8016870:	4602      	mov	r2, r0
 8016872:	887b      	ldrh	r3, [r7, #2]
 8016874:	18d1      	adds	r1, r2, r3
 8016876:	7eba      	ldrb	r2, [r7, #26]
 8016878:	7bfb      	ldrb	r3, [r7, #15]
 801687a:	9300      	str	r3, [sp, #0]
 801687c:	460b      	mov	r3, r1
 801687e:	6939      	ldr	r1, [r7, #16]
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f7ff fa4f 	bl	8015d24 <tcp_create_segment>
 8016886:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016888:	69fb      	ldr	r3, [r7, #28]
 801688a:	2b00      	cmp	r3, #0
 801688c:	d063      	beq.n	8016956 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801688e:	697b      	ldr	r3, [r7, #20]
 8016890:	685b      	ldr	r3, [r3, #4]
 8016892:	4618      	mov	r0, r3
 8016894:	f7fa fecc 	bl	8011630 <pbuf_clen>
 8016898:	4603      	mov	r3, r0
 801689a:	461a      	mov	r2, r3
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168a2:	1a9b      	subs	r3, r3, r2
 80168a4:	b29a      	uxth	r2, r3
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80168ac:	697b      	ldr	r3, [r7, #20]
 80168ae:	6858      	ldr	r0, [r3, #4]
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	685b      	ldr	r3, [r3, #4]
 80168b4:	891a      	ldrh	r2, [r3, #8]
 80168b6:	89bb      	ldrh	r3, [r7, #12]
 80168b8:	1ad3      	subs	r3, r2, r3
 80168ba:	b29b      	uxth	r3, r3
 80168bc:	4619      	mov	r1, r3
 80168be:	f7fa fca3 	bl	8011208 <pbuf_realloc>
  useg->len -= remainder;
 80168c2:	697b      	ldr	r3, [r7, #20]
 80168c4:	891a      	ldrh	r2, [r3, #8]
 80168c6:	89bb      	ldrh	r3, [r7, #12]
 80168c8:	1ad3      	subs	r3, r2, r3
 80168ca:	b29a      	uxth	r2, r3
 80168cc:	697b      	ldr	r3, [r7, #20]
 80168ce:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80168d0:	697b      	ldr	r3, [r7, #20]
 80168d2:	68db      	ldr	r3, [r3, #12]
 80168d4:	899b      	ldrh	r3, [r3, #12]
 80168d6:	b29c      	uxth	r4, r3
 80168d8:	7efb      	ldrb	r3, [r7, #27]
 80168da:	b29b      	uxth	r3, r3
 80168dc:	4618      	mov	r0, r3
 80168de:	f7f9 f96f 	bl	800fbc0 <lwip_htons>
 80168e2:	4603      	mov	r3, r0
 80168e4:	461a      	mov	r2, r3
 80168e6:	697b      	ldr	r3, [r7, #20]
 80168e8:	68db      	ldr	r3, [r3, #12]
 80168ea:	4322      	orrs	r2, r4
 80168ec:	b292      	uxth	r2, r2
 80168ee:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80168f0:	697b      	ldr	r3, [r7, #20]
 80168f2:	685b      	ldr	r3, [r3, #4]
 80168f4:	4618      	mov	r0, r3
 80168f6:	f7fa fe9b 	bl	8011630 <pbuf_clen>
 80168fa:	4603      	mov	r3, r0
 80168fc:	461a      	mov	r2, r3
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016904:	4413      	add	r3, r2
 8016906:	b29a      	uxth	r2, r3
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801690e:	69fb      	ldr	r3, [r7, #28]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	4618      	mov	r0, r3
 8016914:	f7fa fe8c 	bl	8011630 <pbuf_clen>
 8016918:	4603      	mov	r3, r0
 801691a:	461a      	mov	r2, r3
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016922:	4413      	add	r3, r2
 8016924:	b29a      	uxth	r2, r3
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801692c:	697b      	ldr	r3, [r7, #20]
 801692e:	681a      	ldr	r2, [r3, #0]
 8016930:	69fb      	ldr	r3, [r7, #28]
 8016932:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016934:	697b      	ldr	r3, [r7, #20]
 8016936:	69fa      	ldr	r2, [r7, #28]
 8016938:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801693a:	69fb      	ldr	r3, [r7, #28]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d103      	bne.n	801694a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2200      	movs	r2, #0
 8016946:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801694a:	2300      	movs	r3, #0
 801694c:	e016      	b.n	801697c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801694e:	bf00      	nop
 8016950:	e002      	b.n	8016958 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016952:	bf00      	nop
 8016954:	e000      	b.n	8016958 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016956:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d006      	beq.n	801696c <tcp_split_unsent_seg+0x25c>
 801695e:	4b09      	ldr	r3, [pc, #36]	; (8016984 <tcp_split_unsent_seg+0x274>)
 8016960:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8016964:	490d      	ldr	r1, [pc, #52]	; (801699c <tcp_split_unsent_seg+0x28c>)
 8016966:	4809      	ldr	r0, [pc, #36]	; (801698c <tcp_split_unsent_seg+0x27c>)
 8016968:	f004 fa08 	bl	801ad7c <iprintf>
  if (p != NULL) {
 801696c:	693b      	ldr	r3, [r7, #16]
 801696e:	2b00      	cmp	r3, #0
 8016970:	d002      	beq.n	8016978 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016972:	6938      	ldr	r0, [r7, #16]
 8016974:	f7fa fdce 	bl	8011514 <pbuf_free>
  }

  return ERR_MEM;
 8016978:	f04f 33ff 	mov.w	r3, #4294967295
}
 801697c:	4618      	mov	r0, r3
 801697e:	3724      	adds	r7, #36	; 0x24
 8016980:	46bd      	mov	sp, r7
 8016982:	bd90      	pop	{r4, r7, pc}
 8016984:	0801d5cc 	.word	0x0801d5cc
 8016988:	0801d960 	.word	0x0801d960
 801698c:	0801d620 	.word	0x0801d620
 8016990:	0801d984 	.word	0x0801d984
 8016994:	0801d9a8 	.word	0x0801d9a8
 8016998:	0801d9b8 	.word	0x0801d9b8
 801699c:	0801d9c8 	.word	0x0801d9c8

080169a0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80169a0:	b590      	push	{r4, r7, lr}
 80169a2:	b085      	sub	sp, #20
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d106      	bne.n	80169bc <tcp_send_fin+0x1c>
 80169ae:	4b21      	ldr	r3, [pc, #132]	; (8016a34 <tcp_send_fin+0x94>)
 80169b0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80169b4:	4920      	ldr	r1, [pc, #128]	; (8016a38 <tcp_send_fin+0x98>)
 80169b6:	4821      	ldr	r0, [pc, #132]	; (8016a3c <tcp_send_fin+0x9c>)
 80169b8:	f004 f9e0 	bl	801ad7c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	d02e      	beq.n	8016a22 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c8:	60fb      	str	r3, [r7, #12]
 80169ca:	e002      	b.n	80169d2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d1f8      	bne.n	80169cc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	68db      	ldr	r3, [r3, #12]
 80169de:	899b      	ldrh	r3, [r3, #12]
 80169e0:	b29b      	uxth	r3, r3
 80169e2:	4618      	mov	r0, r3
 80169e4:	f7f9 f8ec 	bl	800fbc0 <lwip_htons>
 80169e8:	4603      	mov	r3, r0
 80169ea:	b2db      	uxtb	r3, r3
 80169ec:	f003 0307 	and.w	r3, r3, #7
 80169f0:	2b00      	cmp	r3, #0
 80169f2:	d116      	bne.n	8016a22 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	68db      	ldr	r3, [r3, #12]
 80169f8:	899b      	ldrh	r3, [r3, #12]
 80169fa:	b29c      	uxth	r4, r3
 80169fc:	2001      	movs	r0, #1
 80169fe:	f7f9 f8df 	bl	800fbc0 <lwip_htons>
 8016a02:	4603      	mov	r3, r0
 8016a04:	461a      	mov	r2, r3
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	68db      	ldr	r3, [r3, #12]
 8016a0a:	4322      	orrs	r2, r4
 8016a0c:	b292      	uxth	r2, r2
 8016a0e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	8b5b      	ldrh	r3, [r3, #26]
 8016a14:	f043 0320 	orr.w	r3, r3, #32
 8016a18:	b29a      	uxth	r2, r3
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	e004      	b.n	8016a2c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016a22:	2101      	movs	r1, #1
 8016a24:	6878      	ldr	r0, [r7, #4]
 8016a26:	f000 f80b 	bl	8016a40 <tcp_enqueue_flags>
 8016a2a:	4603      	mov	r3, r0
}
 8016a2c:	4618      	mov	r0, r3
 8016a2e:	3714      	adds	r7, #20
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd90      	pop	{r4, r7, pc}
 8016a34:	0801d5cc 	.word	0x0801d5cc
 8016a38:	0801d9d4 	.word	0x0801d9d4
 8016a3c:	0801d620 	.word	0x0801d620

08016a40 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016a40:	b580      	push	{r7, lr}
 8016a42:	b08a      	sub	sp, #40	; 0x28
 8016a44:	af02      	add	r7, sp, #8
 8016a46:	6078      	str	r0, [r7, #4]
 8016a48:	460b      	mov	r3, r1
 8016a4a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016a4c:	2300      	movs	r3, #0
 8016a4e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016a50:	2300      	movs	r3, #0
 8016a52:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016a54:	78fb      	ldrb	r3, [r7, #3]
 8016a56:	f003 0303 	and.w	r3, r3, #3
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d106      	bne.n	8016a6c <tcp_enqueue_flags+0x2c>
 8016a5e:	4b67      	ldr	r3, [pc, #412]	; (8016bfc <tcp_enqueue_flags+0x1bc>)
 8016a60:	f240 4211 	movw	r2, #1041	; 0x411
 8016a64:	4966      	ldr	r1, [pc, #408]	; (8016c00 <tcp_enqueue_flags+0x1c0>)
 8016a66:	4867      	ldr	r0, [pc, #412]	; (8016c04 <tcp_enqueue_flags+0x1c4>)
 8016a68:	f004 f988 	bl	801ad7c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016a6c:	687b      	ldr	r3, [r7, #4]
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d106      	bne.n	8016a80 <tcp_enqueue_flags+0x40>
 8016a72:	4b62      	ldr	r3, [pc, #392]	; (8016bfc <tcp_enqueue_flags+0x1bc>)
 8016a74:	f240 4213 	movw	r2, #1043	; 0x413
 8016a78:	4963      	ldr	r1, [pc, #396]	; (8016c08 <tcp_enqueue_flags+0x1c8>)
 8016a7a:	4862      	ldr	r0, [pc, #392]	; (8016c04 <tcp_enqueue_flags+0x1c4>)
 8016a7c:	f004 f97e 	bl	801ad7c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016a80:	78fb      	ldrb	r3, [r7, #3]
 8016a82:	f003 0302 	and.w	r3, r3, #2
 8016a86:	2b00      	cmp	r3, #0
 8016a88:	d001      	beq.n	8016a8e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016a8e:	7ffb      	ldrb	r3, [r7, #31]
 8016a90:	009b      	lsls	r3, r3, #2
 8016a92:	b2db      	uxtb	r3, r3
 8016a94:	f003 0304 	and.w	r3, r3, #4
 8016a98:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016a9a:	7dfb      	ldrb	r3, [r7, #23]
 8016a9c:	b29b      	uxth	r3, r3
 8016a9e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016aa2:	4619      	mov	r1, r3
 8016aa4:	2036      	movs	r0, #54	; 0x36
 8016aa6:	f7fa fa51 	bl	8010f4c <pbuf_alloc>
 8016aaa:	6138      	str	r0, [r7, #16]
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	2b00      	cmp	r3, #0
 8016ab0:	d109      	bne.n	8016ac6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	8b5b      	ldrh	r3, [r3, #26]
 8016ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016aba:	b29a      	uxth	r2, r3
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ac4:	e095      	b.n	8016bf2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016ac6:	693b      	ldr	r3, [r7, #16]
 8016ac8:	895a      	ldrh	r2, [r3, #10]
 8016aca:	7dfb      	ldrb	r3, [r7, #23]
 8016acc:	b29b      	uxth	r3, r3
 8016ace:	429a      	cmp	r2, r3
 8016ad0:	d206      	bcs.n	8016ae0 <tcp_enqueue_flags+0xa0>
 8016ad2:	4b4a      	ldr	r3, [pc, #296]	; (8016bfc <tcp_enqueue_flags+0x1bc>)
 8016ad4:	f240 4239 	movw	r2, #1081	; 0x439
 8016ad8:	494c      	ldr	r1, [pc, #304]	; (8016c0c <tcp_enqueue_flags+0x1cc>)
 8016ada:	484a      	ldr	r0, [pc, #296]	; (8016c04 <tcp_enqueue_flags+0x1c4>)
 8016adc:	f004 f94e 	bl	801ad7c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016ae4:	78fa      	ldrb	r2, [r7, #3]
 8016ae6:	7ffb      	ldrb	r3, [r7, #31]
 8016ae8:	9300      	str	r3, [sp, #0]
 8016aea:	460b      	mov	r3, r1
 8016aec:	6939      	ldr	r1, [r7, #16]
 8016aee:	6878      	ldr	r0, [r7, #4]
 8016af0:	f7ff f918 	bl	8015d24 <tcp_create_segment>
 8016af4:	60f8      	str	r0, [r7, #12]
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d109      	bne.n	8016b10 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	8b5b      	ldrh	r3, [r3, #26]
 8016b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b04:	b29a      	uxth	r2, r3
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8016b0e:	e070      	b.n	8016bf2 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	68db      	ldr	r3, [r3, #12]
 8016b14:	f003 0303 	and.w	r3, r3, #3
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	d006      	beq.n	8016b2a <tcp_enqueue_flags+0xea>
 8016b1c:	4b37      	ldr	r3, [pc, #220]	; (8016bfc <tcp_enqueue_flags+0x1bc>)
 8016b1e:	f240 4242 	movw	r2, #1090	; 0x442
 8016b22:	493b      	ldr	r1, [pc, #236]	; (8016c10 <tcp_enqueue_flags+0x1d0>)
 8016b24:	4837      	ldr	r0, [pc, #220]	; (8016c04 <tcp_enqueue_flags+0x1c4>)
 8016b26:	f004 f929 	bl	801ad7c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016b2a:	68fb      	ldr	r3, [r7, #12]
 8016b2c:	891b      	ldrh	r3, [r3, #8]
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d006      	beq.n	8016b40 <tcp_enqueue_flags+0x100>
 8016b32:	4b32      	ldr	r3, [pc, #200]	; (8016bfc <tcp_enqueue_flags+0x1bc>)
 8016b34:	f240 4243 	movw	r2, #1091	; 0x443
 8016b38:	4936      	ldr	r1, [pc, #216]	; (8016c14 <tcp_enqueue_flags+0x1d4>)
 8016b3a:	4832      	ldr	r0, [pc, #200]	; (8016c04 <tcp_enqueue_flags+0x1c4>)
 8016b3c:	f004 f91e 	bl	801ad7c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d103      	bne.n	8016b50 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	68fa      	ldr	r2, [r7, #12]
 8016b4c:	66da      	str	r2, [r3, #108]	; 0x6c
 8016b4e:	e00d      	b.n	8016b6c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b54:	61bb      	str	r3, [r7, #24]
 8016b56:	e002      	b.n	8016b5e <tcp_enqueue_flags+0x11e>
 8016b58:	69bb      	ldr	r3, [r7, #24]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	61bb      	str	r3, [r7, #24]
 8016b5e:	69bb      	ldr	r3, [r7, #24]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d1f8      	bne.n	8016b58 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016b66:	69bb      	ldr	r3, [r7, #24]
 8016b68:	68fa      	ldr	r2, [r7, #12]
 8016b6a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2200      	movs	r2, #0
 8016b70:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016b74:	78fb      	ldrb	r3, [r7, #3]
 8016b76:	f003 0302 	and.w	r3, r3, #2
 8016b7a:	2b00      	cmp	r3, #0
 8016b7c:	d104      	bne.n	8016b88 <tcp_enqueue_flags+0x148>
 8016b7e:	78fb      	ldrb	r3, [r7, #3]
 8016b80:	f003 0301 	and.w	r3, r3, #1
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	d004      	beq.n	8016b92 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016b8c:	1c5a      	adds	r2, r3, #1
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016b92:	78fb      	ldrb	r3, [r7, #3]
 8016b94:	f003 0301 	and.w	r3, r3, #1
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d006      	beq.n	8016baa <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	8b5b      	ldrh	r3, [r3, #26]
 8016ba0:	f043 0320 	orr.w	r3, r3, #32
 8016ba4:	b29a      	uxth	r2, r3
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016baa:	68fb      	ldr	r3, [r7, #12]
 8016bac:	685b      	ldr	r3, [r3, #4]
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f7fa fd3e 	bl	8011630 <pbuf_clen>
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	461a      	mov	r2, r3
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bbe:	4413      	add	r3, r2
 8016bc0:	b29a      	uxth	r2, r3
 8016bc2:	687b      	ldr	r3, [r7, #4]
 8016bc4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d00e      	beq.n	8016bf0 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d10a      	bne.n	8016bf0 <tcp_enqueue_flags+0x1b0>
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d106      	bne.n	8016bf0 <tcp_enqueue_flags+0x1b0>
 8016be2:	4b06      	ldr	r3, [pc, #24]	; (8016bfc <tcp_enqueue_flags+0x1bc>)
 8016be4:	f240 4265 	movw	r2, #1125	; 0x465
 8016be8:	490b      	ldr	r1, [pc, #44]	; (8016c18 <tcp_enqueue_flags+0x1d8>)
 8016bea:	4806      	ldr	r0, [pc, #24]	; (8016c04 <tcp_enqueue_flags+0x1c4>)
 8016bec:	f004 f8c6 	bl	801ad7c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016bf0:	2300      	movs	r3, #0
}
 8016bf2:	4618      	mov	r0, r3
 8016bf4:	3720      	adds	r7, #32
 8016bf6:	46bd      	mov	sp, r7
 8016bf8:	bd80      	pop	{r7, pc}
 8016bfa:	bf00      	nop
 8016bfc:	0801d5cc 	.word	0x0801d5cc
 8016c00:	0801d9f0 	.word	0x0801d9f0
 8016c04:	0801d620 	.word	0x0801d620
 8016c08:	0801da48 	.word	0x0801da48
 8016c0c:	0801da68 	.word	0x0801da68
 8016c10:	0801daa4 	.word	0x0801daa4
 8016c14:	0801dabc 	.word	0x0801dabc
 8016c18:	0801dae8 	.word	0x0801dae8

08016c1c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016c1c:	b5b0      	push	{r4, r5, r7, lr}
 8016c1e:	b08a      	sub	sp, #40	; 0x28
 8016c20:	af00      	add	r7, sp, #0
 8016c22:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d106      	bne.n	8016c38 <tcp_output+0x1c>
 8016c2a:	4b9e      	ldr	r3, [pc, #632]	; (8016ea4 <tcp_output+0x288>)
 8016c2c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016c30:	499d      	ldr	r1, [pc, #628]	; (8016ea8 <tcp_output+0x28c>)
 8016c32:	489e      	ldr	r0, [pc, #632]	; (8016eac <tcp_output+0x290>)
 8016c34:	f004 f8a2 	bl	801ad7c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	7d1b      	ldrb	r3, [r3, #20]
 8016c3c:	2b01      	cmp	r3, #1
 8016c3e:	d106      	bne.n	8016c4e <tcp_output+0x32>
 8016c40:	4b98      	ldr	r3, [pc, #608]	; (8016ea4 <tcp_output+0x288>)
 8016c42:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016c46:	499a      	ldr	r1, [pc, #616]	; (8016eb0 <tcp_output+0x294>)
 8016c48:	4898      	ldr	r0, [pc, #608]	; (8016eac <tcp_output+0x290>)
 8016c4a:	f004 f897 	bl	801ad7c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016c4e:	4b99      	ldr	r3, [pc, #612]	; (8016eb4 <tcp_output+0x298>)
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	687a      	ldr	r2, [r7, #4]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d101      	bne.n	8016c5c <tcp_output+0x40>
    return ERR_OK;
 8016c58:	2300      	movs	r3, #0
 8016c5a:	e1ce      	b.n	8016ffa <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016c68:	4293      	cmp	r3, r2
 8016c6a:	bf28      	it	cs
 8016c6c:	4613      	movcs	r3, r2
 8016c6e:	b29b      	uxth	r3, r3
 8016c70:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c76:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d10b      	bne.n	8016c96 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	8b5b      	ldrh	r3, [r3, #26]
 8016c82:	f003 0302 	and.w	r3, r3, #2
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	f000 81aa 	beq.w	8016fe0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016c8c:	6878      	ldr	r0, [r7, #4]
 8016c8e:	f000 fdcb 	bl	8017828 <tcp_send_empty_ack>
 8016c92:	4603      	mov	r3, r0
 8016c94:	e1b1      	b.n	8016ffa <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016c96:	6879      	ldr	r1, [r7, #4]
 8016c98:	687b      	ldr	r3, [r7, #4]
 8016c9a:	3304      	adds	r3, #4
 8016c9c:	461a      	mov	r2, r3
 8016c9e:	6878      	ldr	r0, [r7, #4]
 8016ca0:	f7ff f824 	bl	8015cec <tcp_route>
 8016ca4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016ca6:	697b      	ldr	r3, [r7, #20]
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d102      	bne.n	8016cb2 <tcp_output+0x96>
    return ERR_RTE;
 8016cac:	f06f 0303 	mvn.w	r3, #3
 8016cb0:	e1a3      	b.n	8016ffa <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	2b00      	cmp	r3, #0
 8016cb6:	d003      	beq.n	8016cc0 <tcp_output+0xa4>
 8016cb8:	687b      	ldr	r3, [r7, #4]
 8016cba:	681b      	ldr	r3, [r3, #0]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d111      	bne.n	8016ce4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016cc0:	697b      	ldr	r3, [r7, #20]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d002      	beq.n	8016ccc <tcp_output+0xb0>
 8016cc6:	697b      	ldr	r3, [r7, #20]
 8016cc8:	3304      	adds	r3, #4
 8016cca:	e000      	b.n	8016cce <tcp_output+0xb2>
 8016ccc:	2300      	movs	r3, #0
 8016cce:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016cd0:	693b      	ldr	r3, [r7, #16]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d102      	bne.n	8016cdc <tcp_output+0xc0>
      return ERR_RTE;
 8016cd6:	f06f 0303 	mvn.w	r3, #3
 8016cda:	e18e      	b.n	8016ffa <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016cdc:	693b      	ldr	r3, [r7, #16]
 8016cde:	681a      	ldr	r2, [r3, #0]
 8016ce0:	687b      	ldr	r3, [r7, #4]
 8016ce2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce6:	68db      	ldr	r3, [r3, #12]
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7f8 ff7d 	bl	800fbea <lwip_htonl>
 8016cf0:	4602      	mov	r2, r0
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cf6:	1ad3      	subs	r3, r2, r3
 8016cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cfa:	8912      	ldrh	r2, [r2, #8]
 8016cfc:	4413      	add	r3, r2
 8016cfe:	69ba      	ldr	r2, [r7, #24]
 8016d00:	429a      	cmp	r2, r3
 8016d02:	d227      	bcs.n	8016d54 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d0a:	461a      	mov	r2, r3
 8016d0c:	69bb      	ldr	r3, [r7, #24]
 8016d0e:	4293      	cmp	r3, r2
 8016d10:	d114      	bne.n	8016d3c <tcp_output+0x120>
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d110      	bne.n	8016d3c <tcp_output+0x120>
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d10b      	bne.n	8016d3c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	2200      	movs	r2, #0
 8016d28:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	2201      	movs	r2, #1
 8016d30:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	2200      	movs	r2, #0
 8016d38:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	8b5b      	ldrh	r3, [r3, #26]
 8016d40:	f003 0302 	and.w	r3, r3, #2
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	f000 814d 	beq.w	8016fe4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016d4a:	6878      	ldr	r0, [r7, #4]
 8016d4c:	f000 fd6c 	bl	8017828 <tcp_send_empty_ack>
 8016d50:	4603      	mov	r3, r0
 8016d52:	e152      	b.n	8016ffa <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2200      	movs	r2, #0
 8016d58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d60:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016d62:	6a3b      	ldr	r3, [r7, #32]
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	f000 811c 	beq.w	8016fa2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016d6a:	e002      	b.n	8016d72 <tcp_output+0x156>
 8016d6c:	6a3b      	ldr	r3, [r7, #32]
 8016d6e:	681b      	ldr	r3, [r3, #0]
 8016d70:	623b      	str	r3, [r7, #32]
 8016d72:	6a3b      	ldr	r3, [r7, #32]
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d1f8      	bne.n	8016d6c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016d7a:	e112      	b.n	8016fa2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d7e:	68db      	ldr	r3, [r3, #12]
 8016d80:	899b      	ldrh	r3, [r3, #12]
 8016d82:	b29b      	uxth	r3, r3
 8016d84:	4618      	mov	r0, r3
 8016d86:	f7f8 ff1b 	bl	800fbc0 <lwip_htons>
 8016d8a:	4603      	mov	r3, r0
 8016d8c:	b2db      	uxtb	r3, r3
 8016d8e:	f003 0304 	and.w	r3, r3, #4
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d006      	beq.n	8016da4 <tcp_output+0x188>
 8016d96:	4b43      	ldr	r3, [pc, #268]	; (8016ea4 <tcp_output+0x288>)
 8016d98:	f240 5236 	movw	r2, #1334	; 0x536
 8016d9c:	4946      	ldr	r1, [pc, #280]	; (8016eb8 <tcp_output+0x29c>)
 8016d9e:	4843      	ldr	r0, [pc, #268]	; (8016eac <tcp_output+0x290>)
 8016da0:	f003 ffec 	bl	801ad7c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d01f      	beq.n	8016dec <tcp_output+0x1d0>
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	8b5b      	ldrh	r3, [r3, #26]
 8016db0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	d119      	bne.n	8016dec <tcp_output+0x1d0>
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d00b      	beq.n	8016dd8 <tcp_output+0x1bc>
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d110      	bne.n	8016dec <tcp_output+0x1d0>
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dce:	891a      	ldrh	r2, [r3, #8]
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	d209      	bcs.n	8016dec <tcp_output+0x1d0>
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d004      	beq.n	8016dec <tcp_output+0x1d0>
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016de8:	2b08      	cmp	r3, #8
 8016dea:	d901      	bls.n	8016df0 <tcp_output+0x1d4>
 8016dec:	2301      	movs	r3, #1
 8016dee:	e000      	b.n	8016df2 <tcp_output+0x1d6>
 8016df0:	2300      	movs	r3, #0
 8016df2:	2b00      	cmp	r3, #0
 8016df4:	d106      	bne.n	8016e04 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	8b5b      	ldrh	r3, [r3, #26]
 8016dfa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	f000 80e4 	beq.w	8016fcc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016e04:	687b      	ldr	r3, [r7, #4]
 8016e06:	7d1b      	ldrb	r3, [r3, #20]
 8016e08:	2b02      	cmp	r3, #2
 8016e0a:	d00d      	beq.n	8016e28 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e0e:	68db      	ldr	r3, [r3, #12]
 8016e10:	899b      	ldrh	r3, [r3, #12]
 8016e12:	b29c      	uxth	r4, r3
 8016e14:	2010      	movs	r0, #16
 8016e16:	f7f8 fed3 	bl	800fbc0 <lwip_htons>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e20:	68db      	ldr	r3, [r3, #12]
 8016e22:	4322      	orrs	r2, r4
 8016e24:	b292      	uxth	r2, r2
 8016e26:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016e28:	697a      	ldr	r2, [r7, #20]
 8016e2a:	6879      	ldr	r1, [r7, #4]
 8016e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e2e:	f000 f909 	bl	8017044 <tcp_output_segment>
 8016e32:	4603      	mov	r3, r0
 8016e34:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d009      	beq.n	8016e52 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	8b5b      	ldrh	r3, [r3, #26]
 8016e42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e46:	b29a      	uxth	r2, r3
 8016e48:	687b      	ldr	r3, [r7, #4]
 8016e4a:	835a      	strh	r2, [r3, #26]
      return err;
 8016e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e50:	e0d3      	b.n	8016ffa <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e54:	681a      	ldr	r2, [r3, #0]
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	7d1b      	ldrb	r3, [r3, #20]
 8016e5e:	2b02      	cmp	r3, #2
 8016e60:	d006      	beq.n	8016e70 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	8b5b      	ldrh	r3, [r3, #26]
 8016e66:	f023 0303 	bic.w	r3, r3, #3
 8016e6a:	b29a      	uxth	r2, r3
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e72:	68db      	ldr	r3, [r3, #12]
 8016e74:	685b      	ldr	r3, [r3, #4]
 8016e76:	4618      	mov	r0, r3
 8016e78:	f7f8 feb7 	bl	800fbea <lwip_htonl>
 8016e7c:	4604      	mov	r4, r0
 8016e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e80:	891b      	ldrh	r3, [r3, #8]
 8016e82:	461d      	mov	r5, r3
 8016e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e86:	68db      	ldr	r3, [r3, #12]
 8016e88:	899b      	ldrh	r3, [r3, #12]
 8016e8a:	b29b      	uxth	r3, r3
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7f8 fe97 	bl	800fbc0 <lwip_htons>
 8016e92:	4603      	mov	r3, r0
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	f003 0303 	and.w	r3, r3, #3
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d00e      	beq.n	8016ebc <tcp_output+0x2a0>
 8016e9e:	2301      	movs	r3, #1
 8016ea0:	e00d      	b.n	8016ebe <tcp_output+0x2a2>
 8016ea2:	bf00      	nop
 8016ea4:	0801d5cc 	.word	0x0801d5cc
 8016ea8:	0801db10 	.word	0x0801db10
 8016eac:	0801d620 	.word	0x0801d620
 8016eb0:	0801db28 	.word	0x0801db28
 8016eb4:	24008284 	.word	0x24008284
 8016eb8:	0801db50 	.word	0x0801db50
 8016ebc:	2300      	movs	r3, #0
 8016ebe:	442b      	add	r3, r5
 8016ec0:	4423      	add	r3, r4
 8016ec2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016ec8:	68bb      	ldr	r3, [r7, #8]
 8016eca:	1ad3      	subs	r3, r2, r3
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	da02      	bge.n	8016ed6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	68ba      	ldr	r2, [r7, #8]
 8016ed4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed8:	891b      	ldrh	r3, [r3, #8]
 8016eda:	461c      	mov	r4, r3
 8016edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ede:	68db      	ldr	r3, [r3, #12]
 8016ee0:	899b      	ldrh	r3, [r3, #12]
 8016ee2:	b29b      	uxth	r3, r3
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	f7f8 fe6b 	bl	800fbc0 <lwip_htons>
 8016eea:	4603      	mov	r3, r0
 8016eec:	b2db      	uxtb	r3, r3
 8016eee:	f003 0303 	and.w	r3, r3, #3
 8016ef2:	2b00      	cmp	r3, #0
 8016ef4:	d001      	beq.n	8016efa <tcp_output+0x2de>
 8016ef6:	2301      	movs	r3, #1
 8016ef8:	e000      	b.n	8016efc <tcp_output+0x2e0>
 8016efa:	2300      	movs	r3, #0
 8016efc:	4423      	add	r3, r4
 8016efe:	2b00      	cmp	r3, #0
 8016f00:	d049      	beq.n	8016f96 <tcp_output+0x37a>
      seg->next = NULL;
 8016f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f04:	2200      	movs	r2, #0
 8016f06:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d105      	bne.n	8016f1c <tcp_output+0x300>
        pcb->unacked = seg;
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f14:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f18:	623b      	str	r3, [r7, #32]
 8016f1a:	e03f      	b.n	8016f9c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1e:	68db      	ldr	r3, [r3, #12]
 8016f20:	685b      	ldr	r3, [r3, #4]
 8016f22:	4618      	mov	r0, r3
 8016f24:	f7f8 fe61 	bl	800fbea <lwip_htonl>
 8016f28:	4604      	mov	r4, r0
 8016f2a:	6a3b      	ldr	r3, [r7, #32]
 8016f2c:	68db      	ldr	r3, [r3, #12]
 8016f2e:	685b      	ldr	r3, [r3, #4]
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7f8 fe5a 	bl	800fbea <lwip_htonl>
 8016f36:	4603      	mov	r3, r0
 8016f38:	1ae3      	subs	r3, r4, r3
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	da24      	bge.n	8016f88 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	3370      	adds	r3, #112	; 0x70
 8016f42:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f44:	e002      	b.n	8016f4c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016f46:	69fb      	ldr	r3, [r7, #28]
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f4c:	69fb      	ldr	r3, [r7, #28]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d011      	beq.n	8016f78 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f54:	69fb      	ldr	r3, [r7, #28]
 8016f56:	681b      	ldr	r3, [r3, #0]
 8016f58:	68db      	ldr	r3, [r3, #12]
 8016f5a:	685b      	ldr	r3, [r3, #4]
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7f8 fe44 	bl	800fbea <lwip_htonl>
 8016f62:	4604      	mov	r4, r0
 8016f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f66:	68db      	ldr	r3, [r3, #12]
 8016f68:	685b      	ldr	r3, [r3, #4]
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	f7f8 fe3d 	bl	800fbea <lwip_htonl>
 8016f70:	4603      	mov	r3, r0
 8016f72:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016f74:	2b00      	cmp	r3, #0
 8016f76:	dbe6      	blt.n	8016f46 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016f78:	69fb      	ldr	r3, [r7, #28]
 8016f7a:	681a      	ldr	r2, [r3, #0]
 8016f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f7e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016f80:	69fb      	ldr	r3, [r7, #28]
 8016f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f84:	601a      	str	r2, [r3, #0]
 8016f86:	e009      	b.n	8016f9c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016f88:	6a3b      	ldr	r3, [r7, #32]
 8016f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f8c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016f8e:	6a3b      	ldr	r3, [r7, #32]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	623b      	str	r3, [r7, #32]
 8016f94:	e002      	b.n	8016f9c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016f96:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f98:	f7fb ff05 	bl	8012da6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fa0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d012      	beq.n	8016fce <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016faa:	68db      	ldr	r3, [r3, #12]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	4618      	mov	r0, r3
 8016fb0:	f7f8 fe1b 	bl	800fbea <lwip_htonl>
 8016fb4:	4602      	mov	r2, r0
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fba:	1ad3      	subs	r3, r2, r3
 8016fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fbe:	8912      	ldrh	r2, [r2, #8]
 8016fc0:	4413      	add	r3, r2
  while (seg != NULL &&
 8016fc2:	69ba      	ldr	r2, [r7, #24]
 8016fc4:	429a      	cmp	r2, r3
 8016fc6:	f4bf aed9 	bcs.w	8016d7c <tcp_output+0x160>
 8016fca:	e000      	b.n	8016fce <tcp_output+0x3b2>
      break;
 8016fcc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d108      	bne.n	8016fe8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	2200      	movs	r2, #0
 8016fda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8016fde:	e004      	b.n	8016fea <tcp_output+0x3ce>
    goto output_done;
 8016fe0:	bf00      	nop
 8016fe2:	e002      	b.n	8016fea <tcp_output+0x3ce>
    goto output_done;
 8016fe4:	bf00      	nop
 8016fe6:	e000      	b.n	8016fea <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016fe8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	8b5b      	ldrh	r3, [r3, #26]
 8016fee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016ff2:	b29a      	uxth	r2, r3
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016ff8:	2300      	movs	r3, #0
}
 8016ffa:	4618      	mov	r0, r3
 8016ffc:	3728      	adds	r7, #40	; 0x28
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bdb0      	pop	{r4, r5, r7, pc}
 8017002:	bf00      	nop

08017004 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017004:	b580      	push	{r7, lr}
 8017006:	b082      	sub	sp, #8
 8017008:	af00      	add	r7, sp, #0
 801700a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801700c:	687b      	ldr	r3, [r7, #4]
 801700e:	2b00      	cmp	r3, #0
 8017010:	d106      	bne.n	8017020 <tcp_output_segment_busy+0x1c>
 8017012:	4b09      	ldr	r3, [pc, #36]	; (8017038 <tcp_output_segment_busy+0x34>)
 8017014:	f240 529a 	movw	r2, #1434	; 0x59a
 8017018:	4908      	ldr	r1, [pc, #32]	; (801703c <tcp_output_segment_busy+0x38>)
 801701a:	4809      	ldr	r0, [pc, #36]	; (8017040 <tcp_output_segment_busy+0x3c>)
 801701c:	f003 feae 	bl	801ad7c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	685b      	ldr	r3, [r3, #4]
 8017024:	7b9b      	ldrb	r3, [r3, #14]
 8017026:	2b01      	cmp	r3, #1
 8017028:	d001      	beq.n	801702e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801702a:	2301      	movs	r3, #1
 801702c:	e000      	b.n	8017030 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801702e:	2300      	movs	r3, #0
}
 8017030:	4618      	mov	r0, r3
 8017032:	3708      	adds	r7, #8
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}
 8017038:	0801d5cc 	.word	0x0801d5cc
 801703c:	0801db68 	.word	0x0801db68
 8017040:	0801d620 	.word	0x0801d620

08017044 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017044:	b5b0      	push	{r4, r5, r7, lr}
 8017046:	b08c      	sub	sp, #48	; 0x30
 8017048:	af04      	add	r7, sp, #16
 801704a:	60f8      	str	r0, [r7, #12]
 801704c:	60b9      	str	r1, [r7, #8]
 801704e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d106      	bne.n	8017064 <tcp_output_segment+0x20>
 8017056:	4b63      	ldr	r3, [pc, #396]	; (80171e4 <tcp_output_segment+0x1a0>)
 8017058:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801705c:	4962      	ldr	r1, [pc, #392]	; (80171e8 <tcp_output_segment+0x1a4>)
 801705e:	4863      	ldr	r0, [pc, #396]	; (80171ec <tcp_output_segment+0x1a8>)
 8017060:	f003 fe8c 	bl	801ad7c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017064:	68bb      	ldr	r3, [r7, #8]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d106      	bne.n	8017078 <tcp_output_segment+0x34>
 801706a:	4b5e      	ldr	r3, [pc, #376]	; (80171e4 <tcp_output_segment+0x1a0>)
 801706c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8017070:	495f      	ldr	r1, [pc, #380]	; (80171f0 <tcp_output_segment+0x1ac>)
 8017072:	485e      	ldr	r0, [pc, #376]	; (80171ec <tcp_output_segment+0x1a8>)
 8017074:	f003 fe82 	bl	801ad7c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d106      	bne.n	801708c <tcp_output_segment+0x48>
 801707e:	4b59      	ldr	r3, [pc, #356]	; (80171e4 <tcp_output_segment+0x1a0>)
 8017080:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8017084:	495b      	ldr	r1, [pc, #364]	; (80171f4 <tcp_output_segment+0x1b0>)
 8017086:	4859      	ldr	r0, [pc, #356]	; (80171ec <tcp_output_segment+0x1a8>)
 8017088:	f003 fe78 	bl	801ad7c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801708c:	68f8      	ldr	r0, [r7, #12]
 801708e:	f7ff ffb9 	bl	8017004 <tcp_output_segment_busy>
 8017092:	4603      	mov	r3, r0
 8017094:	2b00      	cmp	r3, #0
 8017096:	d001      	beq.n	801709c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8017098:	2300      	movs	r3, #0
 801709a:	e09f      	b.n	80171dc <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	68dc      	ldr	r4, [r3, #12]
 80170a4:	4610      	mov	r0, r2
 80170a6:	f7f8 fda0 	bl	800fbea <lwip_htonl>
 80170aa:	4603      	mov	r3, r0
 80170ac:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80170ae:	68bb      	ldr	r3, [r7, #8]
 80170b0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	68dc      	ldr	r4, [r3, #12]
 80170b6:	4610      	mov	r0, r2
 80170b8:	f7f8 fd82 	bl	800fbc0 <lwip_htons>
 80170bc:	4603      	mov	r3, r0
 80170be:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80170c0:	68bb      	ldr	r3, [r7, #8]
 80170c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170c4:	68ba      	ldr	r2, [r7, #8]
 80170c6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80170c8:	441a      	add	r2, r3
 80170ca:	68bb      	ldr	r3, [r7, #8]
 80170cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	68db      	ldr	r3, [r3, #12]
 80170d2:	3314      	adds	r3, #20
 80170d4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80170d6:	68fb      	ldr	r3, [r7, #12]
 80170d8:	7a9b      	ldrb	r3, [r3, #10]
 80170da:	f003 0301 	and.w	r3, r3, #1
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d015      	beq.n	801710e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	3304      	adds	r3, #4
 80170e6:	461a      	mov	r2, r3
 80170e8:	6879      	ldr	r1, [r7, #4]
 80170ea:	f44f 7006 	mov.w	r0, #536	; 0x218
 80170ee:	f7fc fa37 	bl	8013560 <tcp_eff_send_mss_netif>
 80170f2:	4603      	mov	r3, r0
 80170f4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80170f6:	8b7b      	ldrh	r3, [r7, #26]
 80170f8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80170fc:	4618      	mov	r0, r3
 80170fe:	f7f8 fd74 	bl	800fbea <lwip_htonl>
 8017102:	4602      	mov	r2, r0
 8017104:	69fb      	ldr	r3, [r7, #28]
 8017106:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017108:	69fb      	ldr	r3, [r7, #28]
 801710a:	3304      	adds	r3, #4
 801710c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801710e:	68bb      	ldr	r3, [r7, #8]
 8017110:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017114:	2b00      	cmp	r3, #0
 8017116:	da02      	bge.n	801711e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017118:	68bb      	ldr	r3, [r7, #8]
 801711a:	2200      	movs	r2, #0
 801711c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801711e:	68bb      	ldr	r3, [r7, #8]
 8017120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017122:	2b00      	cmp	r3, #0
 8017124:	d10c      	bne.n	8017140 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017126:	4b34      	ldr	r3, [pc, #208]	; (80171f8 <tcp_output_segment+0x1b4>)
 8017128:	681a      	ldr	r2, [r3, #0]
 801712a:	68bb      	ldr	r3, [r7, #8]
 801712c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	68db      	ldr	r3, [r3, #12]
 8017132:	685b      	ldr	r3, [r3, #4]
 8017134:	4618      	mov	r0, r3
 8017136:	f7f8 fd58 	bl	800fbea <lwip_htonl>
 801713a:	4602      	mov	r2, r0
 801713c:	68bb      	ldr	r3, [r7, #8]
 801713e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017140:	68fb      	ldr	r3, [r7, #12]
 8017142:	68da      	ldr	r2, [r3, #12]
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	685b      	ldr	r3, [r3, #4]
 8017148:	685b      	ldr	r3, [r3, #4]
 801714a:	1ad3      	subs	r3, r2, r3
 801714c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	8959      	ldrh	r1, [r3, #10]
 8017154:	68fb      	ldr	r3, [r7, #12]
 8017156:	685b      	ldr	r3, [r3, #4]
 8017158:	8b3a      	ldrh	r2, [r7, #24]
 801715a:	1a8a      	subs	r2, r1, r2
 801715c:	b292      	uxth	r2, r2
 801715e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	685b      	ldr	r3, [r3, #4]
 8017164:	8919      	ldrh	r1, [r3, #8]
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	685b      	ldr	r3, [r3, #4]
 801716a:	8b3a      	ldrh	r2, [r7, #24]
 801716c:	1a8a      	subs	r2, r1, r2
 801716e:	b292      	uxth	r2, r2
 8017170:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	685b      	ldr	r3, [r3, #4]
 8017176:	68fa      	ldr	r2, [r7, #12]
 8017178:	68d2      	ldr	r2, [r2, #12]
 801717a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	68db      	ldr	r3, [r3, #12]
 8017180:	2200      	movs	r2, #0
 8017182:	741a      	strb	r2, [r3, #16]
 8017184:	2200      	movs	r2, #0
 8017186:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	68db      	ldr	r3, [r3, #12]
 801718c:	f103 0214 	add.w	r2, r3, #20
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	7a9b      	ldrb	r3, [r3, #10]
 8017194:	009b      	lsls	r3, r3, #2
 8017196:	f003 0304 	and.w	r3, r3, #4
 801719a:	4413      	add	r3, r2
 801719c:	69fa      	ldr	r2, [r7, #28]
 801719e:	429a      	cmp	r2, r3
 80171a0:	d006      	beq.n	80171b0 <tcp_output_segment+0x16c>
 80171a2:	4b10      	ldr	r3, [pc, #64]	; (80171e4 <tcp_output_segment+0x1a0>)
 80171a4:	f240 621c 	movw	r2, #1564	; 0x61c
 80171a8:	4914      	ldr	r1, [pc, #80]	; (80171fc <tcp_output_segment+0x1b8>)
 80171aa:	4810      	ldr	r0, [pc, #64]	; (80171ec <tcp_output_segment+0x1a8>)
 80171ac:	f003 fde6 	bl	801ad7c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	6858      	ldr	r0, [r3, #4]
 80171b4:	68b9      	ldr	r1, [r7, #8]
 80171b6:	68bb      	ldr	r3, [r7, #8]
 80171b8:	1d1c      	adds	r4, r3, #4
 80171ba:	68bb      	ldr	r3, [r7, #8]
 80171bc:	7add      	ldrb	r5, [r3, #11]
 80171be:	68bb      	ldr	r3, [r7, #8]
 80171c0:	7a9b      	ldrb	r3, [r3, #10]
 80171c2:	687a      	ldr	r2, [r7, #4]
 80171c4:	9202      	str	r2, [sp, #8]
 80171c6:	2206      	movs	r2, #6
 80171c8:	9201      	str	r2, [sp, #4]
 80171ca:	9300      	str	r3, [sp, #0]
 80171cc:	462b      	mov	r3, r5
 80171ce:	4622      	mov	r2, r4
 80171d0:	f002 fa8c 	bl	80196ec <ip4_output_if>
 80171d4:	4603      	mov	r3, r0
 80171d6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80171d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80171dc:	4618      	mov	r0, r3
 80171de:	3720      	adds	r7, #32
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bdb0      	pop	{r4, r5, r7, pc}
 80171e4:	0801d5cc 	.word	0x0801d5cc
 80171e8:	0801db90 	.word	0x0801db90
 80171ec:	0801d620 	.word	0x0801d620
 80171f0:	0801dbb0 	.word	0x0801dbb0
 80171f4:	0801dbd0 	.word	0x0801dbd0
 80171f8:	24008274 	.word	0x24008274
 80171fc:	0801dbf4 	.word	0x0801dbf4

08017200 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017200:	b5b0      	push	{r4, r5, r7, lr}
 8017202:	b084      	sub	sp, #16
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	2b00      	cmp	r3, #0
 801720c:	d106      	bne.n	801721c <tcp_rexmit_rto_prepare+0x1c>
 801720e:	4b31      	ldr	r3, [pc, #196]	; (80172d4 <tcp_rexmit_rto_prepare+0xd4>)
 8017210:	f240 6263 	movw	r2, #1635	; 0x663
 8017214:	4930      	ldr	r1, [pc, #192]	; (80172d8 <tcp_rexmit_rto_prepare+0xd8>)
 8017216:	4831      	ldr	r0, [pc, #196]	; (80172dc <tcp_rexmit_rto_prepare+0xdc>)
 8017218:	f003 fdb0 	bl	801ad7c <iprintf>

  if (pcb->unacked == NULL) {
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017220:	2b00      	cmp	r3, #0
 8017222:	d102      	bne.n	801722a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017224:	f06f 0305 	mvn.w	r3, #5
 8017228:	e050      	b.n	80172cc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801722e:	60fb      	str	r3, [r7, #12]
 8017230:	e00b      	b.n	801724a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017232:	68f8      	ldr	r0, [r7, #12]
 8017234:	f7ff fee6 	bl	8017004 <tcp_output_segment_busy>
 8017238:	4603      	mov	r3, r0
 801723a:	2b00      	cmp	r3, #0
 801723c:	d002      	beq.n	8017244 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801723e:	f06f 0305 	mvn.w	r3, #5
 8017242:	e043      	b.n	80172cc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017244:	68fb      	ldr	r3, [r7, #12]
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	60fb      	str	r3, [r7, #12]
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	681b      	ldr	r3, [r3, #0]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d1ef      	bne.n	8017232 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017252:	68f8      	ldr	r0, [r7, #12]
 8017254:	f7ff fed6 	bl	8017004 <tcp_output_segment_busy>
 8017258:	4603      	mov	r3, r0
 801725a:	2b00      	cmp	r3, #0
 801725c:	d002      	beq.n	8017264 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801725e:	f06f 0305 	mvn.w	r3, #5
 8017262:	e033      	b.n	80172cc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2200      	movs	r2, #0
 8017278:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801727a:	687b      	ldr	r3, [r7, #4]
 801727c:	8b5b      	ldrh	r3, [r3, #26]
 801727e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017282:	b29a      	uxth	r2, r3
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017288:	68fb      	ldr	r3, [r7, #12]
 801728a:	68db      	ldr	r3, [r3, #12]
 801728c:	685b      	ldr	r3, [r3, #4]
 801728e:	4618      	mov	r0, r3
 8017290:	f7f8 fcab 	bl	800fbea <lwip_htonl>
 8017294:	4604      	mov	r4, r0
 8017296:	68fb      	ldr	r3, [r7, #12]
 8017298:	891b      	ldrh	r3, [r3, #8]
 801729a:	461d      	mov	r5, r3
 801729c:	68fb      	ldr	r3, [r7, #12]
 801729e:	68db      	ldr	r3, [r3, #12]
 80172a0:	899b      	ldrh	r3, [r3, #12]
 80172a2:	b29b      	uxth	r3, r3
 80172a4:	4618      	mov	r0, r3
 80172a6:	f7f8 fc8b 	bl	800fbc0 <lwip_htons>
 80172aa:	4603      	mov	r3, r0
 80172ac:	b2db      	uxtb	r3, r3
 80172ae:	f003 0303 	and.w	r3, r3, #3
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d001      	beq.n	80172ba <tcp_rexmit_rto_prepare+0xba>
 80172b6:	2301      	movs	r3, #1
 80172b8:	e000      	b.n	80172bc <tcp_rexmit_rto_prepare+0xbc>
 80172ba:	2300      	movs	r3, #0
 80172bc:	442b      	add	r3, r5
 80172be:	18e2      	adds	r2, r4, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	2200      	movs	r2, #0
 80172c8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80172ca:	2300      	movs	r3, #0
}
 80172cc:	4618      	mov	r0, r3
 80172ce:	3710      	adds	r7, #16
 80172d0:	46bd      	mov	sp, r7
 80172d2:	bdb0      	pop	{r4, r5, r7, pc}
 80172d4:	0801d5cc 	.word	0x0801d5cc
 80172d8:	0801dc08 	.word	0x0801dc08
 80172dc:	0801d620 	.word	0x0801d620

080172e0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80172e0:	b580      	push	{r7, lr}
 80172e2:	b082      	sub	sp, #8
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	d106      	bne.n	80172fc <tcp_rexmit_rto_commit+0x1c>
 80172ee:	4b0d      	ldr	r3, [pc, #52]	; (8017324 <tcp_rexmit_rto_commit+0x44>)
 80172f0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80172f4:	490c      	ldr	r1, [pc, #48]	; (8017328 <tcp_rexmit_rto_commit+0x48>)
 80172f6:	480d      	ldr	r0, [pc, #52]	; (801732c <tcp_rexmit_rto_commit+0x4c>)
 80172f8:	f003 fd40 	bl	801ad7c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017302:	2bff      	cmp	r3, #255	; 0xff
 8017304:	d007      	beq.n	8017316 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801730c:	3301      	adds	r3, #1
 801730e:	b2da      	uxtb	r2, r3
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f7ff fc80 	bl	8016c1c <tcp_output>
}
 801731c:	bf00      	nop
 801731e:	3708      	adds	r7, #8
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	0801d5cc 	.word	0x0801d5cc
 8017328:	0801dc2c 	.word	0x0801dc2c
 801732c:	0801d620 	.word	0x0801d620

08017330 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017330:	b580      	push	{r7, lr}
 8017332:	b082      	sub	sp, #8
 8017334:	af00      	add	r7, sp, #0
 8017336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	2b00      	cmp	r3, #0
 801733c:	d106      	bne.n	801734c <tcp_rexmit_rto+0x1c>
 801733e:	4b0a      	ldr	r3, [pc, #40]	; (8017368 <tcp_rexmit_rto+0x38>)
 8017340:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017344:	4909      	ldr	r1, [pc, #36]	; (801736c <tcp_rexmit_rto+0x3c>)
 8017346:	480a      	ldr	r0, [pc, #40]	; (8017370 <tcp_rexmit_rto+0x40>)
 8017348:	f003 fd18 	bl	801ad7c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801734c:	6878      	ldr	r0, [r7, #4]
 801734e:	f7ff ff57 	bl	8017200 <tcp_rexmit_rto_prepare>
 8017352:	4603      	mov	r3, r0
 8017354:	2b00      	cmp	r3, #0
 8017356:	d102      	bne.n	801735e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017358:	6878      	ldr	r0, [r7, #4]
 801735a:	f7ff ffc1 	bl	80172e0 <tcp_rexmit_rto_commit>
  }
}
 801735e:	bf00      	nop
 8017360:	3708      	adds	r7, #8
 8017362:	46bd      	mov	sp, r7
 8017364:	bd80      	pop	{r7, pc}
 8017366:	bf00      	nop
 8017368:	0801d5cc 	.word	0x0801d5cc
 801736c:	0801dc50 	.word	0x0801dc50
 8017370:	0801d620 	.word	0x0801d620

08017374 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017374:	b590      	push	{r4, r7, lr}
 8017376:	b085      	sub	sp, #20
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d106      	bne.n	8017390 <tcp_rexmit+0x1c>
 8017382:	4b2f      	ldr	r3, [pc, #188]	; (8017440 <tcp_rexmit+0xcc>)
 8017384:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017388:	492e      	ldr	r1, [pc, #184]	; (8017444 <tcp_rexmit+0xd0>)
 801738a:	482f      	ldr	r0, [pc, #188]	; (8017448 <tcp_rexmit+0xd4>)
 801738c:	f003 fcf6 	bl	801ad7c <iprintf>

  if (pcb->unacked == NULL) {
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017394:	2b00      	cmp	r3, #0
 8017396:	d102      	bne.n	801739e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017398:	f06f 0305 	mvn.w	r3, #5
 801739c:	e04c      	b.n	8017438 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173a2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80173a4:	68b8      	ldr	r0, [r7, #8]
 80173a6:	f7ff fe2d 	bl	8017004 <tcp_output_segment_busy>
 80173aa:	4603      	mov	r3, r0
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d002      	beq.n	80173b6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80173b0:	f06f 0305 	mvn.w	r3, #5
 80173b4:	e040      	b.n	8017438 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80173b6:	68bb      	ldr	r3, [r7, #8]
 80173b8:	681a      	ldr	r2, [r3, #0]
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	336c      	adds	r3, #108	; 0x6c
 80173c2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173c4:	e002      	b.n	80173cc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d011      	beq.n	80173f8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80173d4:	68fb      	ldr	r3, [r7, #12]
 80173d6:	681b      	ldr	r3, [r3, #0]
 80173d8:	68db      	ldr	r3, [r3, #12]
 80173da:	685b      	ldr	r3, [r3, #4]
 80173dc:	4618      	mov	r0, r3
 80173de:	f7f8 fc04 	bl	800fbea <lwip_htonl>
 80173e2:	4604      	mov	r4, r0
 80173e4:	68bb      	ldr	r3, [r7, #8]
 80173e6:	68db      	ldr	r3, [r3, #12]
 80173e8:	685b      	ldr	r3, [r3, #4]
 80173ea:	4618      	mov	r0, r3
 80173ec:	f7f8 fbfd 	bl	800fbea <lwip_htonl>
 80173f0:	4603      	mov	r3, r0
 80173f2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	dbe6      	blt.n	80173c6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80173f8:	68fb      	ldr	r3, [r7, #12]
 80173fa:	681a      	ldr	r2, [r3, #0]
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017400:	68fb      	ldr	r3, [r7, #12]
 8017402:	68ba      	ldr	r2, [r7, #8]
 8017404:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017406:	68bb      	ldr	r3, [r7, #8]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	2b00      	cmp	r3, #0
 801740c:	d103      	bne.n	8017416 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	2200      	movs	r2, #0
 8017412:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801741c:	2bff      	cmp	r3, #255	; 0xff
 801741e:	d007      	beq.n	8017430 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017426:	3301      	adds	r3, #1
 8017428:	b2da      	uxtb	r2, r3
 801742a:	687b      	ldr	r3, [r7, #4]
 801742c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	2200      	movs	r2, #0
 8017434:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017436:	2300      	movs	r3, #0
}
 8017438:	4618      	mov	r0, r3
 801743a:	3714      	adds	r7, #20
 801743c:	46bd      	mov	sp, r7
 801743e:	bd90      	pop	{r4, r7, pc}
 8017440:	0801d5cc 	.word	0x0801d5cc
 8017444:	0801dc6c 	.word	0x0801dc6c
 8017448:	0801d620 	.word	0x0801d620

0801744c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b082      	sub	sp, #8
 8017450:	af00      	add	r7, sp, #0
 8017452:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017454:	687b      	ldr	r3, [r7, #4]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d106      	bne.n	8017468 <tcp_rexmit_fast+0x1c>
 801745a:	4b2a      	ldr	r3, [pc, #168]	; (8017504 <tcp_rexmit_fast+0xb8>)
 801745c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017460:	4929      	ldr	r1, [pc, #164]	; (8017508 <tcp_rexmit_fast+0xbc>)
 8017462:	482a      	ldr	r0, [pc, #168]	; (801750c <tcp_rexmit_fast+0xc0>)
 8017464:	f003 fc8a 	bl	801ad7c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017468:	687b      	ldr	r3, [r7, #4]
 801746a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801746c:	2b00      	cmp	r3, #0
 801746e:	d045      	beq.n	80174fc <tcp_rexmit_fast+0xb0>
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	8b5b      	ldrh	r3, [r3, #26]
 8017474:	f003 0304 	and.w	r3, r3, #4
 8017478:	2b00      	cmp	r3, #0
 801747a:	d13f      	bne.n	80174fc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801747c:	6878      	ldr	r0, [r7, #4]
 801747e:	f7ff ff79 	bl	8017374 <tcp_rexmit>
 8017482:	4603      	mov	r3, r0
 8017484:	2b00      	cmp	r3, #0
 8017486:	d139      	bne.n	80174fc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801748e:	687b      	ldr	r3, [r7, #4]
 8017490:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017494:	4293      	cmp	r3, r2
 8017496:	bf28      	it	cs
 8017498:	4613      	movcs	r3, r2
 801749a:	b29b      	uxth	r3, r3
 801749c:	2b00      	cmp	r3, #0
 801749e:	da00      	bge.n	80174a2 <tcp_rexmit_fast+0x56>
 80174a0:	3301      	adds	r3, #1
 80174a2:	105b      	asrs	r3, r3, #1
 80174a4:	b29a      	uxth	r2, r3
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80174b2:	461a      	mov	r2, r3
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174b8:	005b      	lsls	r3, r3, #1
 80174ba:	429a      	cmp	r2, r3
 80174bc:	d206      	bcs.n	80174cc <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174c2:	005b      	lsls	r3, r3, #1
 80174c4:	b29a      	uxth	r2, r3
 80174c6:	687b      	ldr	r3, [r7, #4]
 80174c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174d6:	4619      	mov	r1, r3
 80174d8:	0049      	lsls	r1, r1, #1
 80174da:	440b      	add	r3, r1
 80174dc:	b29b      	uxth	r3, r3
 80174de:	4413      	add	r3, r2
 80174e0:	b29a      	uxth	r2, r3
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	8b5b      	ldrh	r3, [r3, #26]
 80174ec:	f043 0304 	orr.w	r3, r3, #4
 80174f0:	b29a      	uxth	r2, r3
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	2200      	movs	r2, #0
 80174fa:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80174fc:	bf00      	nop
 80174fe:	3708      	adds	r7, #8
 8017500:	46bd      	mov	sp, r7
 8017502:	bd80      	pop	{r7, pc}
 8017504:	0801d5cc 	.word	0x0801d5cc
 8017508:	0801dc84 	.word	0x0801dc84
 801750c:	0801d620 	.word	0x0801d620

08017510 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017510:	b580      	push	{r7, lr}
 8017512:	b086      	sub	sp, #24
 8017514:	af00      	add	r7, sp, #0
 8017516:	60f8      	str	r0, [r7, #12]
 8017518:	607b      	str	r3, [r7, #4]
 801751a:	460b      	mov	r3, r1
 801751c:	817b      	strh	r3, [r7, #10]
 801751e:	4613      	mov	r3, r2
 8017520:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017522:	897a      	ldrh	r2, [r7, #10]
 8017524:	893b      	ldrh	r3, [r7, #8]
 8017526:	4413      	add	r3, r2
 8017528:	b29b      	uxth	r3, r3
 801752a:	3314      	adds	r3, #20
 801752c:	b29b      	uxth	r3, r3
 801752e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017532:	4619      	mov	r1, r3
 8017534:	2022      	movs	r0, #34	; 0x22
 8017536:	f7f9 fd09 	bl	8010f4c <pbuf_alloc>
 801753a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801753c:	697b      	ldr	r3, [r7, #20]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d04d      	beq.n	80175de <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017542:	897b      	ldrh	r3, [r7, #10]
 8017544:	3313      	adds	r3, #19
 8017546:	697a      	ldr	r2, [r7, #20]
 8017548:	8952      	ldrh	r2, [r2, #10]
 801754a:	4293      	cmp	r3, r2
 801754c:	db06      	blt.n	801755c <tcp_output_alloc_header_common+0x4c>
 801754e:	4b26      	ldr	r3, [pc, #152]	; (80175e8 <tcp_output_alloc_header_common+0xd8>)
 8017550:	f240 7223 	movw	r2, #1827	; 0x723
 8017554:	4925      	ldr	r1, [pc, #148]	; (80175ec <tcp_output_alloc_header_common+0xdc>)
 8017556:	4826      	ldr	r0, [pc, #152]	; (80175f0 <tcp_output_alloc_header_common+0xe0>)
 8017558:	f003 fc10 	bl	801ad7c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801755c:	697b      	ldr	r3, [r7, #20]
 801755e:	685b      	ldr	r3, [r3, #4]
 8017560:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017562:	8c3b      	ldrh	r3, [r7, #32]
 8017564:	4618      	mov	r0, r3
 8017566:	f7f8 fb2b 	bl	800fbc0 <lwip_htons>
 801756a:	4603      	mov	r3, r0
 801756c:	461a      	mov	r2, r3
 801756e:	693b      	ldr	r3, [r7, #16]
 8017570:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017574:	4618      	mov	r0, r3
 8017576:	f7f8 fb23 	bl	800fbc0 <lwip_htons>
 801757a:	4603      	mov	r3, r0
 801757c:	461a      	mov	r2, r3
 801757e:	693b      	ldr	r3, [r7, #16]
 8017580:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017582:	693b      	ldr	r3, [r7, #16]
 8017584:	687a      	ldr	r2, [r7, #4]
 8017586:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017588:	68f8      	ldr	r0, [r7, #12]
 801758a:	f7f8 fb2e 	bl	800fbea <lwip_htonl>
 801758e:	4602      	mov	r2, r0
 8017590:	693b      	ldr	r3, [r7, #16]
 8017592:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017594:	897b      	ldrh	r3, [r7, #10]
 8017596:	089b      	lsrs	r3, r3, #2
 8017598:	b29b      	uxth	r3, r3
 801759a:	3305      	adds	r3, #5
 801759c:	b29b      	uxth	r3, r3
 801759e:	031b      	lsls	r3, r3, #12
 80175a0:	b29a      	uxth	r2, r3
 80175a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80175a6:	b29b      	uxth	r3, r3
 80175a8:	4313      	orrs	r3, r2
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7f8 fb07 	bl	800fbc0 <lwip_htons>
 80175b2:	4603      	mov	r3, r0
 80175b4:	461a      	mov	r2, r3
 80175b6:	693b      	ldr	r3, [r7, #16]
 80175b8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80175ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80175bc:	4618      	mov	r0, r3
 80175be:	f7f8 faff 	bl	800fbc0 <lwip_htons>
 80175c2:	4603      	mov	r3, r0
 80175c4:	461a      	mov	r2, r3
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80175ca:	693b      	ldr	r3, [r7, #16]
 80175cc:	2200      	movs	r2, #0
 80175ce:	741a      	strb	r2, [r3, #16]
 80175d0:	2200      	movs	r2, #0
 80175d2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80175d4:	693b      	ldr	r3, [r7, #16]
 80175d6:	2200      	movs	r2, #0
 80175d8:	749a      	strb	r2, [r3, #18]
 80175da:	2200      	movs	r2, #0
 80175dc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80175de:	697b      	ldr	r3, [r7, #20]
}
 80175e0:	4618      	mov	r0, r3
 80175e2:	3718      	adds	r7, #24
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	0801d5cc 	.word	0x0801d5cc
 80175ec:	0801dca4 	.word	0x0801dca4
 80175f0:	0801d620 	.word	0x0801d620

080175f4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80175f4:	b5b0      	push	{r4, r5, r7, lr}
 80175f6:	b08a      	sub	sp, #40	; 0x28
 80175f8:	af04      	add	r7, sp, #16
 80175fa:	60f8      	str	r0, [r7, #12]
 80175fc:	607b      	str	r3, [r7, #4]
 80175fe:	460b      	mov	r3, r1
 8017600:	817b      	strh	r3, [r7, #10]
 8017602:	4613      	mov	r3, r2
 8017604:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d106      	bne.n	801761a <tcp_output_alloc_header+0x26>
 801760c:	4b15      	ldr	r3, [pc, #84]	; (8017664 <tcp_output_alloc_header+0x70>)
 801760e:	f240 7242 	movw	r2, #1858	; 0x742
 8017612:	4915      	ldr	r1, [pc, #84]	; (8017668 <tcp_output_alloc_header+0x74>)
 8017614:	4815      	ldr	r0, [pc, #84]	; (801766c <tcp_output_alloc_header+0x78>)
 8017616:	f003 fbb1 	bl	801ad7c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801761a:	68fb      	ldr	r3, [r7, #12]
 801761c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801761e:	68fb      	ldr	r3, [r7, #12]
 8017620:	8adb      	ldrh	r3, [r3, #22]
 8017622:	68fa      	ldr	r2, [r7, #12]
 8017624:	8b12      	ldrh	r2, [r2, #24]
 8017626:	68f9      	ldr	r1, [r7, #12]
 8017628:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801762a:	893d      	ldrh	r5, [r7, #8]
 801762c:	897c      	ldrh	r4, [r7, #10]
 801762e:	9103      	str	r1, [sp, #12]
 8017630:	2110      	movs	r1, #16
 8017632:	9102      	str	r1, [sp, #8]
 8017634:	9201      	str	r2, [sp, #4]
 8017636:	9300      	str	r3, [sp, #0]
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	462a      	mov	r2, r5
 801763c:	4621      	mov	r1, r4
 801763e:	f7ff ff67 	bl	8017510 <tcp_output_alloc_header_common>
 8017642:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017644:	697b      	ldr	r3, [r7, #20]
 8017646:	2b00      	cmp	r3, #0
 8017648:	d006      	beq.n	8017658 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801764a:	68fb      	ldr	r3, [r7, #12]
 801764c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801764e:	68fa      	ldr	r2, [r7, #12]
 8017650:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017652:	441a      	add	r2, r3
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017658:	697b      	ldr	r3, [r7, #20]
}
 801765a:	4618      	mov	r0, r3
 801765c:	3718      	adds	r7, #24
 801765e:	46bd      	mov	sp, r7
 8017660:	bdb0      	pop	{r4, r5, r7, pc}
 8017662:	bf00      	nop
 8017664:	0801d5cc 	.word	0x0801d5cc
 8017668:	0801dcd4 	.word	0x0801dcd4
 801766c:	0801d620 	.word	0x0801d620

08017670 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b088      	sub	sp, #32
 8017674:	af00      	add	r7, sp, #0
 8017676:	60f8      	str	r0, [r7, #12]
 8017678:	60b9      	str	r1, [r7, #8]
 801767a:	4611      	mov	r1, r2
 801767c:	461a      	mov	r2, r3
 801767e:	460b      	mov	r3, r1
 8017680:	71fb      	strb	r3, [r7, #7]
 8017682:	4613      	mov	r3, r2
 8017684:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017686:	2300      	movs	r3, #0
 8017688:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801768a:	68bb      	ldr	r3, [r7, #8]
 801768c:	2b00      	cmp	r3, #0
 801768e:	d106      	bne.n	801769e <tcp_output_fill_options+0x2e>
 8017690:	4b13      	ldr	r3, [pc, #76]	; (80176e0 <tcp_output_fill_options+0x70>)
 8017692:	f240 7256 	movw	r2, #1878	; 0x756
 8017696:	4913      	ldr	r1, [pc, #76]	; (80176e4 <tcp_output_fill_options+0x74>)
 8017698:	4813      	ldr	r0, [pc, #76]	; (80176e8 <tcp_output_fill_options+0x78>)
 801769a:	f003 fb6f 	bl	801ad7c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801769e:	68bb      	ldr	r3, [r7, #8]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80176a4:	69bb      	ldr	r3, [r7, #24]
 80176a6:	3314      	adds	r3, #20
 80176a8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80176aa:	69bb      	ldr	r3, [r7, #24]
 80176ac:	f103 0214 	add.w	r2, r3, #20
 80176b0:	8bfb      	ldrh	r3, [r7, #30]
 80176b2:	009b      	lsls	r3, r3, #2
 80176b4:	4619      	mov	r1, r3
 80176b6:	79fb      	ldrb	r3, [r7, #7]
 80176b8:	009b      	lsls	r3, r3, #2
 80176ba:	f003 0304 	and.w	r3, r3, #4
 80176be:	440b      	add	r3, r1
 80176c0:	4413      	add	r3, r2
 80176c2:	697a      	ldr	r2, [r7, #20]
 80176c4:	429a      	cmp	r2, r3
 80176c6:	d006      	beq.n	80176d6 <tcp_output_fill_options+0x66>
 80176c8:	4b05      	ldr	r3, [pc, #20]	; (80176e0 <tcp_output_fill_options+0x70>)
 80176ca:	f240 7275 	movw	r2, #1909	; 0x775
 80176ce:	4907      	ldr	r1, [pc, #28]	; (80176ec <tcp_output_fill_options+0x7c>)
 80176d0:	4805      	ldr	r0, [pc, #20]	; (80176e8 <tcp_output_fill_options+0x78>)
 80176d2:	f003 fb53 	bl	801ad7c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80176d6:	bf00      	nop
 80176d8:	3720      	adds	r7, #32
 80176da:	46bd      	mov	sp, r7
 80176dc:	bd80      	pop	{r7, pc}
 80176de:	bf00      	nop
 80176e0:	0801d5cc 	.word	0x0801d5cc
 80176e4:	0801dcfc 	.word	0x0801dcfc
 80176e8:	0801d620 	.word	0x0801d620
 80176ec:	0801dbf4 	.word	0x0801dbf4

080176f0 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b08a      	sub	sp, #40	; 0x28
 80176f4:	af04      	add	r7, sp, #16
 80176f6:	60f8      	str	r0, [r7, #12]
 80176f8:	60b9      	str	r1, [r7, #8]
 80176fa:	607a      	str	r2, [r7, #4]
 80176fc:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	2b00      	cmp	r3, #0
 8017702:	d106      	bne.n	8017712 <tcp_output_control_segment+0x22>
 8017704:	4b1c      	ldr	r3, [pc, #112]	; (8017778 <tcp_output_control_segment+0x88>)
 8017706:	f240 7287 	movw	r2, #1927	; 0x787
 801770a:	491c      	ldr	r1, [pc, #112]	; (801777c <tcp_output_control_segment+0x8c>)
 801770c:	481c      	ldr	r0, [pc, #112]	; (8017780 <tcp_output_control_segment+0x90>)
 801770e:	f003 fb35 	bl	801ad7c <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017712:	683a      	ldr	r2, [r7, #0]
 8017714:	6879      	ldr	r1, [r7, #4]
 8017716:	68f8      	ldr	r0, [r7, #12]
 8017718:	f7fe fae8 	bl	8015cec <tcp_route>
 801771c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801771e:	693b      	ldr	r3, [r7, #16]
 8017720:	2b00      	cmp	r3, #0
 8017722:	d102      	bne.n	801772a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017724:	23fc      	movs	r3, #252	; 0xfc
 8017726:	75fb      	strb	r3, [r7, #23]
 8017728:	e01c      	b.n	8017764 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	2b00      	cmp	r3, #0
 801772e:	d006      	beq.n	801773e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	7adb      	ldrb	r3, [r3, #11]
 8017734:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017736:	68fb      	ldr	r3, [r7, #12]
 8017738:	7a9b      	ldrb	r3, [r3, #10]
 801773a:	757b      	strb	r3, [r7, #21]
 801773c:	e003      	b.n	8017746 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801773e:	23ff      	movs	r3, #255	; 0xff
 8017740:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017742:	2300      	movs	r3, #0
 8017744:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017746:	7dba      	ldrb	r2, [r7, #22]
 8017748:	693b      	ldr	r3, [r7, #16]
 801774a:	9302      	str	r3, [sp, #8]
 801774c:	2306      	movs	r3, #6
 801774e:	9301      	str	r3, [sp, #4]
 8017750:	7d7b      	ldrb	r3, [r7, #21]
 8017752:	9300      	str	r3, [sp, #0]
 8017754:	4613      	mov	r3, r2
 8017756:	683a      	ldr	r2, [r7, #0]
 8017758:	6879      	ldr	r1, [r7, #4]
 801775a:	68b8      	ldr	r0, [r7, #8]
 801775c:	f001 ffc6 	bl	80196ec <ip4_output_if>
 8017760:	4603      	mov	r3, r0
 8017762:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017764:	68b8      	ldr	r0, [r7, #8]
 8017766:	f7f9 fed5 	bl	8011514 <pbuf_free>
  return err;
 801776a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801776e:	4618      	mov	r0, r3
 8017770:	3718      	adds	r7, #24
 8017772:	46bd      	mov	sp, r7
 8017774:	bd80      	pop	{r7, pc}
 8017776:	bf00      	nop
 8017778:	0801d5cc 	.word	0x0801d5cc
 801777c:	0801dd24 	.word	0x0801dd24
 8017780:	0801d620 	.word	0x0801d620

08017784 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017784:	b590      	push	{r4, r7, lr}
 8017786:	b08b      	sub	sp, #44	; 0x2c
 8017788:	af04      	add	r7, sp, #16
 801778a:	60f8      	str	r0, [r7, #12]
 801778c:	60b9      	str	r1, [r7, #8]
 801778e:	607a      	str	r2, [r7, #4]
 8017790:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017792:	683b      	ldr	r3, [r7, #0]
 8017794:	2b00      	cmp	r3, #0
 8017796:	d106      	bne.n	80177a6 <tcp_rst+0x22>
 8017798:	4b1f      	ldr	r3, [pc, #124]	; (8017818 <tcp_rst+0x94>)
 801779a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801779e:	491f      	ldr	r1, [pc, #124]	; (801781c <tcp_rst+0x98>)
 80177a0:	481f      	ldr	r0, [pc, #124]	; (8017820 <tcp_rst+0x9c>)
 80177a2:	f003 faeb 	bl	801ad7c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80177a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d106      	bne.n	80177ba <tcp_rst+0x36>
 80177ac:	4b1a      	ldr	r3, [pc, #104]	; (8017818 <tcp_rst+0x94>)
 80177ae:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80177b2:	491c      	ldr	r1, [pc, #112]	; (8017824 <tcp_rst+0xa0>)
 80177b4:	481a      	ldr	r0, [pc, #104]	; (8017820 <tcp_rst+0x9c>)
 80177b6:	f003 fae1 	bl	801ad7c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80177ba:	2300      	movs	r3, #0
 80177bc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80177be:	f246 0308 	movw	r3, #24584	; 0x6008
 80177c2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80177c4:	7dfb      	ldrb	r3, [r7, #23]
 80177c6:	b29c      	uxth	r4, r3
 80177c8:	68b8      	ldr	r0, [r7, #8]
 80177ca:	f7f8 fa0e 	bl	800fbea <lwip_htonl>
 80177ce:	4602      	mov	r2, r0
 80177d0:	8abb      	ldrh	r3, [r7, #20]
 80177d2:	9303      	str	r3, [sp, #12]
 80177d4:	2314      	movs	r3, #20
 80177d6:	9302      	str	r3, [sp, #8]
 80177d8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80177da:	9301      	str	r3, [sp, #4]
 80177dc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80177de:	9300      	str	r3, [sp, #0]
 80177e0:	4613      	mov	r3, r2
 80177e2:	2200      	movs	r2, #0
 80177e4:	4621      	mov	r1, r4
 80177e6:	6878      	ldr	r0, [r7, #4]
 80177e8:	f7ff fe92 	bl	8017510 <tcp_output_alloc_header_common>
 80177ec:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80177ee:	693b      	ldr	r3, [r7, #16]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d00c      	beq.n	801780e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80177f4:	7dfb      	ldrb	r3, [r7, #23]
 80177f6:	2200      	movs	r2, #0
 80177f8:	6939      	ldr	r1, [r7, #16]
 80177fa:	68f8      	ldr	r0, [r7, #12]
 80177fc:	f7ff ff38 	bl	8017670 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017802:	683a      	ldr	r2, [r7, #0]
 8017804:	6939      	ldr	r1, [r7, #16]
 8017806:	68f8      	ldr	r0, [r7, #12]
 8017808:	f7ff ff72 	bl	80176f0 <tcp_output_control_segment>
 801780c:	e000      	b.n	8017810 <tcp_rst+0x8c>
    return;
 801780e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017810:	371c      	adds	r7, #28
 8017812:	46bd      	mov	sp, r7
 8017814:	bd90      	pop	{r4, r7, pc}
 8017816:	bf00      	nop
 8017818:	0801d5cc 	.word	0x0801d5cc
 801781c:	0801dd50 	.word	0x0801dd50
 8017820:	0801d620 	.word	0x0801d620
 8017824:	0801dd6c 	.word	0x0801dd6c

08017828 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017828:	b590      	push	{r4, r7, lr}
 801782a:	b087      	sub	sp, #28
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017830:	2300      	movs	r3, #0
 8017832:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017834:	2300      	movs	r3, #0
 8017836:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017838:	687b      	ldr	r3, [r7, #4]
 801783a:	2b00      	cmp	r3, #0
 801783c:	d106      	bne.n	801784c <tcp_send_empty_ack+0x24>
 801783e:	4b28      	ldr	r3, [pc, #160]	; (80178e0 <tcp_send_empty_ack+0xb8>)
 8017840:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8017844:	4927      	ldr	r1, [pc, #156]	; (80178e4 <tcp_send_empty_ack+0xbc>)
 8017846:	4828      	ldr	r0, [pc, #160]	; (80178e8 <tcp_send_empty_ack+0xc0>)
 8017848:	f003 fa98 	bl	801ad7c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801784c:	7dfb      	ldrb	r3, [r7, #23]
 801784e:	009b      	lsls	r3, r3, #2
 8017850:	b2db      	uxtb	r3, r3
 8017852:	f003 0304 	and.w	r3, r3, #4
 8017856:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017858:	7d7b      	ldrb	r3, [r7, #21]
 801785a:	b29c      	uxth	r4, r3
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017860:	4618      	mov	r0, r3
 8017862:	f7f8 f9c2 	bl	800fbea <lwip_htonl>
 8017866:	4603      	mov	r3, r0
 8017868:	2200      	movs	r2, #0
 801786a:	4621      	mov	r1, r4
 801786c:	6878      	ldr	r0, [r7, #4]
 801786e:	f7ff fec1 	bl	80175f4 <tcp_output_alloc_header>
 8017872:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017874:	693b      	ldr	r3, [r7, #16]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d109      	bne.n	801788e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	8b5b      	ldrh	r3, [r3, #26]
 801787e:	f043 0303 	orr.w	r3, r3, #3
 8017882:	b29a      	uxth	r2, r3
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017888:	f06f 0301 	mvn.w	r3, #1
 801788c:	e023      	b.n	80178d6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801788e:	7dbb      	ldrb	r3, [r7, #22]
 8017890:	7dfa      	ldrb	r2, [r7, #23]
 8017892:	6939      	ldr	r1, [r7, #16]
 8017894:	6878      	ldr	r0, [r7, #4]
 8017896:	f7ff feeb 	bl	8017670 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801789a:	687a      	ldr	r2, [r7, #4]
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	3304      	adds	r3, #4
 80178a0:	6939      	ldr	r1, [r7, #16]
 80178a2:	6878      	ldr	r0, [r7, #4]
 80178a4:	f7ff ff24 	bl	80176f0 <tcp_output_control_segment>
 80178a8:	4603      	mov	r3, r0
 80178aa:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80178ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d007      	beq.n	80178c4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	8b5b      	ldrh	r3, [r3, #26]
 80178b8:	f043 0303 	orr.w	r3, r3, #3
 80178bc:	b29a      	uxth	r2, r3
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	835a      	strh	r2, [r3, #26]
 80178c2:	e006      	b.n	80178d2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	8b5b      	ldrh	r3, [r3, #26]
 80178c8:	f023 0303 	bic.w	r3, r3, #3
 80178cc:	b29a      	uxth	r2, r3
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80178d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178d6:	4618      	mov	r0, r3
 80178d8:	371c      	adds	r7, #28
 80178da:	46bd      	mov	sp, r7
 80178dc:	bd90      	pop	{r4, r7, pc}
 80178de:	bf00      	nop
 80178e0:	0801d5cc 	.word	0x0801d5cc
 80178e4:	0801dd88 	.word	0x0801dd88
 80178e8:	0801d620 	.word	0x0801d620

080178ec <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80178ec:	b590      	push	{r4, r7, lr}
 80178ee:	b087      	sub	sp, #28
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178f4:	2300      	movs	r3, #0
 80178f6:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d106      	bne.n	801790c <tcp_keepalive+0x20>
 80178fe:	4b18      	ldr	r3, [pc, #96]	; (8017960 <tcp_keepalive+0x74>)
 8017900:	f640 0224 	movw	r2, #2084	; 0x824
 8017904:	4917      	ldr	r1, [pc, #92]	; (8017964 <tcp_keepalive+0x78>)
 8017906:	4818      	ldr	r0, [pc, #96]	; (8017968 <tcp_keepalive+0x7c>)
 8017908:	f003 fa38 	bl	801ad7c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801790c:	7dfb      	ldrb	r3, [r7, #23]
 801790e:	b29c      	uxth	r4, r3
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017914:	3b01      	subs	r3, #1
 8017916:	4618      	mov	r0, r3
 8017918:	f7f8 f967 	bl	800fbea <lwip_htonl>
 801791c:	4603      	mov	r3, r0
 801791e:	2200      	movs	r2, #0
 8017920:	4621      	mov	r1, r4
 8017922:	6878      	ldr	r0, [r7, #4]
 8017924:	f7ff fe66 	bl	80175f4 <tcp_output_alloc_header>
 8017928:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801792a:	693b      	ldr	r3, [r7, #16]
 801792c:	2b00      	cmp	r3, #0
 801792e:	d102      	bne.n	8017936 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017930:	f04f 33ff 	mov.w	r3, #4294967295
 8017934:	e010      	b.n	8017958 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017936:	7dfb      	ldrb	r3, [r7, #23]
 8017938:	2200      	movs	r2, #0
 801793a:	6939      	ldr	r1, [r7, #16]
 801793c:	6878      	ldr	r0, [r7, #4]
 801793e:	f7ff fe97 	bl	8017670 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017942:	687a      	ldr	r2, [r7, #4]
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	3304      	adds	r3, #4
 8017948:	6939      	ldr	r1, [r7, #16]
 801794a:	6878      	ldr	r0, [r7, #4]
 801794c:	f7ff fed0 	bl	80176f0 <tcp_output_control_segment>
 8017950:	4603      	mov	r3, r0
 8017952:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017954:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017958:	4618      	mov	r0, r3
 801795a:	371c      	adds	r7, #28
 801795c:	46bd      	mov	sp, r7
 801795e:	bd90      	pop	{r4, r7, pc}
 8017960:	0801d5cc 	.word	0x0801d5cc
 8017964:	0801dda8 	.word	0x0801dda8
 8017968:	0801d620 	.word	0x0801d620

0801796c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801796c:	b590      	push	{r4, r7, lr}
 801796e:	b08b      	sub	sp, #44	; 0x2c
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017974:	2300      	movs	r3, #0
 8017976:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d106      	bne.n	801798e <tcp_zero_window_probe+0x22>
 8017980:	4b4c      	ldr	r3, [pc, #304]	; (8017ab4 <tcp_zero_window_probe+0x148>)
 8017982:	f640 024f 	movw	r2, #2127	; 0x84f
 8017986:	494c      	ldr	r1, [pc, #304]	; (8017ab8 <tcp_zero_window_probe+0x14c>)
 8017988:	484c      	ldr	r0, [pc, #304]	; (8017abc <tcp_zero_window_probe+0x150>)
 801798a:	f003 f9f7 	bl	801ad7c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017992:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017994:	6a3b      	ldr	r3, [r7, #32]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d101      	bne.n	801799e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801799a:	2300      	movs	r3, #0
 801799c:	e086      	b.n	8017aac <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80179a4:	2bff      	cmp	r3, #255	; 0xff
 80179a6:	d007      	beq.n	80179b8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80179ae:	3301      	adds	r3, #1
 80179b0:	b2da      	uxtb	r2, r3
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80179b8:	6a3b      	ldr	r3, [r7, #32]
 80179ba:	68db      	ldr	r3, [r3, #12]
 80179bc:	899b      	ldrh	r3, [r3, #12]
 80179be:	b29b      	uxth	r3, r3
 80179c0:	4618      	mov	r0, r3
 80179c2:	f7f8 f8fd 	bl	800fbc0 <lwip_htons>
 80179c6:	4603      	mov	r3, r0
 80179c8:	b2db      	uxtb	r3, r3
 80179ca:	f003 0301 	and.w	r3, r3, #1
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d005      	beq.n	80179de <tcp_zero_window_probe+0x72>
 80179d2:	6a3b      	ldr	r3, [r7, #32]
 80179d4:	891b      	ldrh	r3, [r3, #8]
 80179d6:	2b00      	cmp	r3, #0
 80179d8:	d101      	bne.n	80179de <tcp_zero_window_probe+0x72>
 80179da:	2301      	movs	r3, #1
 80179dc:	e000      	b.n	80179e0 <tcp_zero_window_probe+0x74>
 80179de:	2300      	movs	r3, #0
 80179e0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80179e2:	7ffb      	ldrb	r3, [r7, #31]
 80179e4:	2b00      	cmp	r3, #0
 80179e6:	bf0c      	ite	eq
 80179e8:	2301      	moveq	r3, #1
 80179ea:	2300      	movne	r3, #0
 80179ec:	b2db      	uxtb	r3, r3
 80179ee:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80179f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80179f4:	b299      	uxth	r1, r3
 80179f6:	6a3b      	ldr	r3, [r7, #32]
 80179f8:	68db      	ldr	r3, [r3, #12]
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	8bba      	ldrh	r2, [r7, #28]
 80179fe:	6878      	ldr	r0, [r7, #4]
 8017a00:	f7ff fdf8 	bl	80175f4 <tcp_output_alloc_header>
 8017a04:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017a06:	69bb      	ldr	r3, [r7, #24]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d102      	bne.n	8017a12 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8017a10:	e04c      	b.n	8017aac <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017a12:	69bb      	ldr	r3, [r7, #24]
 8017a14:	685b      	ldr	r3, [r3, #4]
 8017a16:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017a18:	7ffb      	ldrb	r3, [r7, #31]
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d011      	beq.n	8017a42 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017a1e:	697b      	ldr	r3, [r7, #20]
 8017a20:	899b      	ldrh	r3, [r3, #12]
 8017a22:	b29b      	uxth	r3, r3
 8017a24:	b21b      	sxth	r3, r3
 8017a26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017a2a:	b21c      	sxth	r4, r3
 8017a2c:	2011      	movs	r0, #17
 8017a2e:	f7f8 f8c7 	bl	800fbc0 <lwip_htons>
 8017a32:	4603      	mov	r3, r0
 8017a34:	b21b      	sxth	r3, r3
 8017a36:	4323      	orrs	r3, r4
 8017a38:	b21b      	sxth	r3, r3
 8017a3a:	b29a      	uxth	r2, r3
 8017a3c:	697b      	ldr	r3, [r7, #20]
 8017a3e:	819a      	strh	r2, [r3, #12]
 8017a40:	e010      	b.n	8017a64 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017a42:	69bb      	ldr	r3, [r7, #24]
 8017a44:	685b      	ldr	r3, [r3, #4]
 8017a46:	3314      	adds	r3, #20
 8017a48:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017a4a:	6a3b      	ldr	r3, [r7, #32]
 8017a4c:	6858      	ldr	r0, [r3, #4]
 8017a4e:	6a3b      	ldr	r3, [r7, #32]
 8017a50:	685b      	ldr	r3, [r3, #4]
 8017a52:	891a      	ldrh	r2, [r3, #8]
 8017a54:	6a3b      	ldr	r3, [r7, #32]
 8017a56:	891b      	ldrh	r3, [r3, #8]
 8017a58:	1ad3      	subs	r3, r2, r3
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	2201      	movs	r2, #1
 8017a5e:	6939      	ldr	r1, [r7, #16]
 8017a60:	f7f9 ff5e 	bl	8011920 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017a64:	6a3b      	ldr	r3, [r7, #32]
 8017a66:	68db      	ldr	r3, [r3, #12]
 8017a68:	685b      	ldr	r3, [r3, #4]
 8017a6a:	4618      	mov	r0, r3
 8017a6c:	f7f8 f8bd 	bl	800fbea <lwip_htonl>
 8017a70:	4603      	mov	r3, r0
 8017a72:	3301      	adds	r3, #1
 8017a74:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	1ad3      	subs	r3, r2, r3
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	da02      	bge.n	8017a88 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	68fa      	ldr	r2, [r7, #12]
 8017a86:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017a88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	69b9      	ldr	r1, [r7, #24]
 8017a90:	6878      	ldr	r0, [r7, #4]
 8017a92:	f7ff fded 	bl	8017670 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017a96:	687a      	ldr	r2, [r7, #4]
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	3304      	adds	r3, #4
 8017a9c:	69b9      	ldr	r1, [r7, #24]
 8017a9e:	6878      	ldr	r0, [r7, #4]
 8017aa0:	f7ff fe26 	bl	80176f0 <tcp_output_control_segment>
 8017aa4:	4603      	mov	r3, r0
 8017aa6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017aa8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017aac:	4618      	mov	r0, r3
 8017aae:	372c      	adds	r7, #44	; 0x2c
 8017ab0:	46bd      	mov	sp, r7
 8017ab2:	bd90      	pop	{r4, r7, pc}
 8017ab4:	0801d5cc 	.word	0x0801d5cc
 8017ab8:	0801ddc4 	.word	0x0801ddc4
 8017abc:	0801d620 	.word	0x0801d620

08017ac0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b082      	sub	sp, #8
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017ac8:	f7fa f818 	bl	8011afc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017acc:	4b0a      	ldr	r3, [pc, #40]	; (8017af8 <tcpip_tcp_timer+0x38>)
 8017ace:	681b      	ldr	r3, [r3, #0]
 8017ad0:	2b00      	cmp	r3, #0
 8017ad2:	d103      	bne.n	8017adc <tcpip_tcp_timer+0x1c>
 8017ad4:	4b09      	ldr	r3, [pc, #36]	; (8017afc <tcpip_tcp_timer+0x3c>)
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	2b00      	cmp	r3, #0
 8017ada:	d005      	beq.n	8017ae8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017adc:	2200      	movs	r2, #0
 8017ade:	4908      	ldr	r1, [pc, #32]	; (8017b00 <tcpip_tcp_timer+0x40>)
 8017ae0:	20fa      	movs	r0, #250	; 0xfa
 8017ae2:	f000 f8f3 	bl	8017ccc <sys_timeout>
 8017ae6:	e003      	b.n	8017af0 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017ae8:	4b06      	ldr	r3, [pc, #24]	; (8017b04 <tcpip_tcp_timer+0x44>)
 8017aea:	2200      	movs	r2, #0
 8017aec:	601a      	str	r2, [r3, #0]
  }
}
 8017aee:	bf00      	nop
 8017af0:	bf00      	nop
 8017af2:	3708      	adds	r7, #8
 8017af4:	46bd      	mov	sp, r7
 8017af6:	bd80      	pop	{r7, pc}
 8017af8:	24008270 	.word	0x24008270
 8017afc:	24008280 	.word	0x24008280
 8017b00:	08017ac1 	.word	0x08017ac1
 8017b04:	24004b38 	.word	0x24004b38

08017b08 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017b0c:	4b0a      	ldr	r3, [pc, #40]	; (8017b38 <tcp_timer_needed+0x30>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d10f      	bne.n	8017b34 <tcp_timer_needed+0x2c>
 8017b14:	4b09      	ldr	r3, [pc, #36]	; (8017b3c <tcp_timer_needed+0x34>)
 8017b16:	681b      	ldr	r3, [r3, #0]
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d103      	bne.n	8017b24 <tcp_timer_needed+0x1c>
 8017b1c:	4b08      	ldr	r3, [pc, #32]	; (8017b40 <tcp_timer_needed+0x38>)
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d007      	beq.n	8017b34 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017b24:	4b04      	ldr	r3, [pc, #16]	; (8017b38 <tcp_timer_needed+0x30>)
 8017b26:	2201      	movs	r2, #1
 8017b28:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	4905      	ldr	r1, [pc, #20]	; (8017b44 <tcp_timer_needed+0x3c>)
 8017b2e:	20fa      	movs	r0, #250	; 0xfa
 8017b30:	f000 f8cc 	bl	8017ccc <sys_timeout>
  }
}
 8017b34:	bf00      	nop
 8017b36:	bd80      	pop	{r7, pc}
 8017b38:	24004b38 	.word	0x24004b38
 8017b3c:	24008270 	.word	0x24008270
 8017b40:	24008280 	.word	0x24008280
 8017b44:	08017ac1 	.word	0x08017ac1

08017b48 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017b48:	b580      	push	{r7, lr}
 8017b4a:	b086      	sub	sp, #24
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	60f8      	str	r0, [r7, #12]
 8017b50:	60b9      	str	r1, [r7, #8]
 8017b52:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017b54:	200a      	movs	r0, #10
 8017b56:	f7f8 fdc3 	bl	80106e0 <memp_malloc>
 8017b5a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017b5c:	693b      	ldr	r3, [r7, #16]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	d109      	bne.n	8017b76 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	2b00      	cmp	r3, #0
 8017b66:	d151      	bne.n	8017c0c <sys_timeout_abs+0xc4>
 8017b68:	4b2a      	ldr	r3, [pc, #168]	; (8017c14 <sys_timeout_abs+0xcc>)
 8017b6a:	22be      	movs	r2, #190	; 0xbe
 8017b6c:	492a      	ldr	r1, [pc, #168]	; (8017c18 <sys_timeout_abs+0xd0>)
 8017b6e:	482b      	ldr	r0, [pc, #172]	; (8017c1c <sys_timeout_abs+0xd4>)
 8017b70:	f003 f904 	bl	801ad7c <iprintf>
    return;
 8017b74:	e04a      	b.n	8017c0c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	2200      	movs	r2, #0
 8017b7a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017b7c:	693b      	ldr	r3, [r7, #16]
 8017b7e:	68ba      	ldr	r2, [r7, #8]
 8017b80:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017b82:	693b      	ldr	r3, [r7, #16]
 8017b84:	687a      	ldr	r2, [r7, #4]
 8017b86:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017b88:	693b      	ldr	r3, [r7, #16]
 8017b8a:	68fa      	ldr	r2, [r7, #12]
 8017b8c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017b8e:	4b24      	ldr	r3, [pc, #144]	; (8017c20 <sys_timeout_abs+0xd8>)
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d103      	bne.n	8017b9e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017b96:	4a22      	ldr	r2, [pc, #136]	; (8017c20 <sys_timeout_abs+0xd8>)
 8017b98:	693b      	ldr	r3, [r7, #16]
 8017b9a:	6013      	str	r3, [r2, #0]
    return;
 8017b9c:	e037      	b.n	8017c0e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017b9e:	693b      	ldr	r3, [r7, #16]
 8017ba0:	685a      	ldr	r2, [r3, #4]
 8017ba2:	4b1f      	ldr	r3, [pc, #124]	; (8017c20 <sys_timeout_abs+0xd8>)
 8017ba4:	681b      	ldr	r3, [r3, #0]
 8017ba6:	685b      	ldr	r3, [r3, #4]
 8017ba8:	1ad3      	subs	r3, r2, r3
 8017baa:	0fdb      	lsrs	r3, r3, #31
 8017bac:	f003 0301 	and.w	r3, r3, #1
 8017bb0:	b2db      	uxtb	r3, r3
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	d007      	beq.n	8017bc6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017bb6:	4b1a      	ldr	r3, [pc, #104]	; (8017c20 <sys_timeout_abs+0xd8>)
 8017bb8:	681a      	ldr	r2, [r3, #0]
 8017bba:	693b      	ldr	r3, [r7, #16]
 8017bbc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017bbe:	4a18      	ldr	r2, [pc, #96]	; (8017c20 <sys_timeout_abs+0xd8>)
 8017bc0:	693b      	ldr	r3, [r7, #16]
 8017bc2:	6013      	str	r3, [r2, #0]
 8017bc4:	e023      	b.n	8017c0e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017bc6:	4b16      	ldr	r3, [pc, #88]	; (8017c20 <sys_timeout_abs+0xd8>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	617b      	str	r3, [r7, #20]
 8017bcc:	e01a      	b.n	8017c04 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d00b      	beq.n	8017bee <sys_timeout_abs+0xa6>
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	685a      	ldr	r2, [r3, #4]
 8017bda:	697b      	ldr	r3, [r7, #20]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	685b      	ldr	r3, [r3, #4]
 8017be0:	1ad3      	subs	r3, r2, r3
 8017be2:	0fdb      	lsrs	r3, r3, #31
 8017be4:	f003 0301 	and.w	r3, r3, #1
 8017be8:	b2db      	uxtb	r3, r3
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d007      	beq.n	8017bfe <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017bee:	697b      	ldr	r3, [r7, #20]
 8017bf0:	681a      	ldr	r2, [r3, #0]
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	693a      	ldr	r2, [r7, #16]
 8017bfa:	601a      	str	r2, [r3, #0]
        break;
 8017bfc:	e007      	b.n	8017c0e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017bfe:	697b      	ldr	r3, [r7, #20]
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	617b      	str	r3, [r7, #20]
 8017c04:	697b      	ldr	r3, [r7, #20]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d1e1      	bne.n	8017bce <sys_timeout_abs+0x86>
 8017c0a:	e000      	b.n	8017c0e <sys_timeout_abs+0xc6>
    return;
 8017c0c:	bf00      	nop
      }
    }
  }
}
 8017c0e:	3718      	adds	r7, #24
 8017c10:	46bd      	mov	sp, r7
 8017c12:	bd80      	pop	{r7, pc}
 8017c14:	0801dde8 	.word	0x0801dde8
 8017c18:	0801de1c 	.word	0x0801de1c
 8017c1c:	0801de5c 	.word	0x0801de5c
 8017c20:	24004b30 	.word	0x24004b30

08017c24 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017c24:	b580      	push	{r7, lr}
 8017c26:	b086      	sub	sp, #24
 8017c28:	af00      	add	r7, sp, #0
 8017c2a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017c30:	697b      	ldr	r3, [r7, #20]
 8017c32:	685b      	ldr	r3, [r3, #4]
 8017c34:	4798      	blx	r3

  now = sys_now();
 8017c36:	f7f3 fddd 	bl	800b7f4 <sys_now>
 8017c3a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	681a      	ldr	r2, [r3, #0]
 8017c40:	4b0f      	ldr	r3, [pc, #60]	; (8017c80 <lwip_cyclic_timer+0x5c>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	4413      	add	r3, r2
 8017c46:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017c48:	68fa      	ldr	r2, [r7, #12]
 8017c4a:	693b      	ldr	r3, [r7, #16]
 8017c4c:	1ad3      	subs	r3, r2, r3
 8017c4e:	0fdb      	lsrs	r3, r3, #31
 8017c50:	f003 0301 	and.w	r3, r3, #1
 8017c54:	b2db      	uxtb	r3, r3
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d009      	beq.n	8017c6e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017c5a:	697b      	ldr	r3, [r7, #20]
 8017c5c:	681a      	ldr	r2, [r3, #0]
 8017c5e:	693b      	ldr	r3, [r7, #16]
 8017c60:	4413      	add	r3, r2
 8017c62:	687a      	ldr	r2, [r7, #4]
 8017c64:	4907      	ldr	r1, [pc, #28]	; (8017c84 <lwip_cyclic_timer+0x60>)
 8017c66:	4618      	mov	r0, r3
 8017c68:	f7ff ff6e 	bl	8017b48 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017c6c:	e004      	b.n	8017c78 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017c6e:	687a      	ldr	r2, [r7, #4]
 8017c70:	4904      	ldr	r1, [pc, #16]	; (8017c84 <lwip_cyclic_timer+0x60>)
 8017c72:	68f8      	ldr	r0, [r7, #12]
 8017c74:	f7ff ff68 	bl	8017b48 <sys_timeout_abs>
}
 8017c78:	bf00      	nop
 8017c7a:	3718      	adds	r7, #24
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}
 8017c80:	24004b34 	.word	0x24004b34
 8017c84:	08017c25 	.word	0x08017c25

08017c88 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017c88:	b580      	push	{r7, lr}
 8017c8a:	b082      	sub	sp, #8
 8017c8c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017c8e:	2301      	movs	r3, #1
 8017c90:	607b      	str	r3, [r7, #4]
 8017c92:	e00e      	b.n	8017cb2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017c94:	4a0b      	ldr	r2, [pc, #44]	; (8017cc4 <sys_timeouts_init+0x3c>)
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017c9c:	687b      	ldr	r3, [r7, #4]
 8017c9e:	00db      	lsls	r3, r3, #3
 8017ca0:	4a08      	ldr	r2, [pc, #32]	; (8017cc4 <sys_timeouts_init+0x3c>)
 8017ca2:	4413      	add	r3, r2
 8017ca4:	461a      	mov	r2, r3
 8017ca6:	4908      	ldr	r1, [pc, #32]	; (8017cc8 <sys_timeouts_init+0x40>)
 8017ca8:	f000 f810 	bl	8017ccc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	3301      	adds	r3, #1
 8017cb0:	607b      	str	r3, [r7, #4]
 8017cb2:	687b      	ldr	r3, [r7, #4]
 8017cb4:	2b02      	cmp	r3, #2
 8017cb6:	d9ed      	bls.n	8017c94 <sys_timeouts_init+0xc>
  }
}
 8017cb8:	bf00      	nop
 8017cba:	bf00      	nop
 8017cbc:	3708      	adds	r7, #8
 8017cbe:	46bd      	mov	sp, r7
 8017cc0:	bd80      	pop	{r7, pc}
 8017cc2:	bf00      	nop
 8017cc4:	0801f320 	.word	0x0801f320
 8017cc8:	08017c25 	.word	0x08017c25

08017ccc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017ccc:	b580      	push	{r7, lr}
 8017cce:	b086      	sub	sp, #24
 8017cd0:	af00      	add	r7, sp, #0
 8017cd2:	60f8      	str	r0, [r7, #12]
 8017cd4:	60b9      	str	r1, [r7, #8]
 8017cd6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017cd8:	68fb      	ldr	r3, [r7, #12]
 8017cda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017cde:	d306      	bcc.n	8017cee <sys_timeout+0x22>
 8017ce0:	4b0a      	ldr	r3, [pc, #40]	; (8017d0c <sys_timeout+0x40>)
 8017ce2:	f240 1229 	movw	r2, #297	; 0x129
 8017ce6:	490a      	ldr	r1, [pc, #40]	; (8017d10 <sys_timeout+0x44>)
 8017ce8:	480a      	ldr	r0, [pc, #40]	; (8017d14 <sys_timeout+0x48>)
 8017cea:	f003 f847 	bl	801ad7c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017cee:	f7f3 fd81 	bl	800b7f4 <sys_now>
 8017cf2:	4602      	mov	r2, r0
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	4413      	add	r3, r2
 8017cf8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017cfa:	687a      	ldr	r2, [r7, #4]
 8017cfc:	68b9      	ldr	r1, [r7, #8]
 8017cfe:	6978      	ldr	r0, [r7, #20]
 8017d00:	f7ff ff22 	bl	8017b48 <sys_timeout_abs>
#endif
}
 8017d04:	bf00      	nop
 8017d06:	3718      	adds	r7, #24
 8017d08:	46bd      	mov	sp, r7
 8017d0a:	bd80      	pop	{r7, pc}
 8017d0c:	0801dde8 	.word	0x0801dde8
 8017d10:	0801de84 	.word	0x0801de84
 8017d14:	0801de5c 	.word	0x0801de5c

08017d18 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b084      	sub	sp, #16
 8017d1c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017d1e:	f7f3 fd69 	bl	800b7f4 <sys_now>
 8017d22:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017d24:	4b17      	ldr	r3, [pc, #92]	; (8017d84 <sys_check_timeouts+0x6c>)
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017d2a:	68bb      	ldr	r3, [r7, #8]
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d022      	beq.n	8017d76 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017d30:	68bb      	ldr	r3, [r7, #8]
 8017d32:	685b      	ldr	r3, [r3, #4]
 8017d34:	68fa      	ldr	r2, [r7, #12]
 8017d36:	1ad3      	subs	r3, r2, r3
 8017d38:	0fdb      	lsrs	r3, r3, #31
 8017d3a:	f003 0301 	and.w	r3, r3, #1
 8017d3e:	b2db      	uxtb	r3, r3
 8017d40:	2b00      	cmp	r3, #0
 8017d42:	d11a      	bne.n	8017d7a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	681b      	ldr	r3, [r3, #0]
 8017d48:	4a0e      	ldr	r2, [pc, #56]	; (8017d84 <sys_check_timeouts+0x6c>)
 8017d4a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017d4c:	68bb      	ldr	r3, [r7, #8]
 8017d4e:	689b      	ldr	r3, [r3, #8]
 8017d50:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017d52:	68bb      	ldr	r3, [r7, #8]
 8017d54:	68db      	ldr	r3, [r3, #12]
 8017d56:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017d58:	68bb      	ldr	r3, [r7, #8]
 8017d5a:	685b      	ldr	r3, [r3, #4]
 8017d5c:	4a0a      	ldr	r2, [pc, #40]	; (8017d88 <sys_check_timeouts+0x70>)
 8017d5e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017d60:	68b9      	ldr	r1, [r7, #8]
 8017d62:	200a      	movs	r0, #10
 8017d64:	f7f8 fd32 	bl	80107cc <memp_free>
    if (handler != NULL) {
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d0da      	beq.n	8017d24 <sys_check_timeouts+0xc>
      handler(arg);
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	6838      	ldr	r0, [r7, #0]
 8017d72:	4798      	blx	r3
  do {
 8017d74:	e7d6      	b.n	8017d24 <sys_check_timeouts+0xc>
      return;
 8017d76:	bf00      	nop
 8017d78:	e000      	b.n	8017d7c <sys_check_timeouts+0x64>
      return;
 8017d7a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017d7c:	3710      	adds	r7, #16
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}
 8017d82:	bf00      	nop
 8017d84:	24004b30 	.word	0x24004b30
 8017d88:	24004b34 	.word	0x24004b34

08017d8c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017d8c:	b580      	push	{r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017d92:	4b16      	ldr	r3, [pc, #88]	; (8017dec <sys_timeouts_sleeptime+0x60>)
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d102      	bne.n	8017da0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8017d9e:	e020      	b.n	8017de2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017da0:	f7f3 fd28 	bl	800b7f4 <sys_now>
 8017da4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017da6:	4b11      	ldr	r3, [pc, #68]	; (8017dec <sys_timeouts_sleeptime+0x60>)
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	685a      	ldr	r2, [r3, #4]
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	1ad3      	subs	r3, r2, r3
 8017db0:	0fdb      	lsrs	r3, r3, #31
 8017db2:	f003 0301 	and.w	r3, r3, #1
 8017db6:	b2db      	uxtb	r3, r3
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d001      	beq.n	8017dc0 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017dbc:	2300      	movs	r3, #0
 8017dbe:	e010      	b.n	8017de2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017dc0:	4b0a      	ldr	r3, [pc, #40]	; (8017dec <sys_timeouts_sleeptime+0x60>)
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	685a      	ldr	r2, [r3, #4]
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	1ad3      	subs	r3, r2, r3
 8017dca:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017dcc:	683b      	ldr	r3, [r7, #0]
 8017dce:	2b00      	cmp	r3, #0
 8017dd0:	da06      	bge.n	8017de0 <sys_timeouts_sleeptime+0x54>
 8017dd2:	4b07      	ldr	r3, [pc, #28]	; (8017df0 <sys_timeouts_sleeptime+0x64>)
 8017dd4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8017dd8:	4906      	ldr	r1, [pc, #24]	; (8017df4 <sys_timeouts_sleeptime+0x68>)
 8017dda:	4807      	ldr	r0, [pc, #28]	; (8017df8 <sys_timeouts_sleeptime+0x6c>)
 8017ddc:	f002 ffce 	bl	801ad7c <iprintf>
    return ret;
 8017de0:	683b      	ldr	r3, [r7, #0]
  }
}
 8017de2:	4618      	mov	r0, r3
 8017de4:	3708      	adds	r7, #8
 8017de6:	46bd      	mov	sp, r7
 8017de8:	bd80      	pop	{r7, pc}
 8017dea:	bf00      	nop
 8017dec:	24004b30 	.word	0x24004b30
 8017df0:	0801dde8 	.word	0x0801dde8
 8017df4:	0801debc 	.word	0x0801debc
 8017df8:	0801de5c 	.word	0x0801de5c

08017dfc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017dfc:	b580      	push	{r7, lr}
 8017dfe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017e00:	f002 ffd4 	bl	801adac <rand>
 8017e04:	4603      	mov	r3, r0
 8017e06:	b29b      	uxth	r3, r3
 8017e08:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017e0c:	b29b      	uxth	r3, r3
 8017e0e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017e12:	b29a      	uxth	r2, r3
 8017e14:	4b01      	ldr	r3, [pc, #4]	; (8017e1c <udp_init+0x20>)
 8017e16:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017e18:	bf00      	nop
 8017e1a:	bd80      	pop	{r7, pc}
 8017e1c:	24000038 	.word	0x24000038

08017e20 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017e20:	b580      	push	{r7, lr}
 8017e22:	b084      	sub	sp, #16
 8017e24:	af00      	add	r7, sp, #0
 8017e26:	60f8      	str	r0, [r7, #12]
 8017e28:	60b9      	str	r1, [r7, #8]
 8017e2a:	4613      	mov	r3, r2
 8017e2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d105      	bne.n	8017e40 <udp_input_local_match+0x20>
 8017e34:	4b27      	ldr	r3, [pc, #156]	; (8017ed4 <udp_input_local_match+0xb4>)
 8017e36:	2287      	movs	r2, #135	; 0x87
 8017e38:	4927      	ldr	r1, [pc, #156]	; (8017ed8 <udp_input_local_match+0xb8>)
 8017e3a:	4828      	ldr	r0, [pc, #160]	; (8017edc <udp_input_local_match+0xbc>)
 8017e3c:	f002 ff9e 	bl	801ad7c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017e40:	68bb      	ldr	r3, [r7, #8]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d105      	bne.n	8017e52 <udp_input_local_match+0x32>
 8017e46:	4b23      	ldr	r3, [pc, #140]	; (8017ed4 <udp_input_local_match+0xb4>)
 8017e48:	2288      	movs	r2, #136	; 0x88
 8017e4a:	4925      	ldr	r1, [pc, #148]	; (8017ee0 <udp_input_local_match+0xc0>)
 8017e4c:	4823      	ldr	r0, [pc, #140]	; (8017edc <udp_input_local_match+0xbc>)
 8017e4e:	f002 ff95 	bl	801ad7c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	7a1b      	ldrb	r3, [r3, #8]
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d00b      	beq.n	8017e72 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e5a:	68fb      	ldr	r3, [r7, #12]
 8017e5c:	7a1a      	ldrb	r2, [r3, #8]
 8017e5e:	4b21      	ldr	r3, [pc, #132]	; (8017ee4 <udp_input_local_match+0xc4>)
 8017e60:	685b      	ldr	r3, [r3, #4]
 8017e62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e66:	3301      	adds	r3, #1
 8017e68:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e6a:	429a      	cmp	r2, r3
 8017e6c:	d001      	beq.n	8017e72 <udp_input_local_match+0x52>
    return 0;
 8017e6e:	2300      	movs	r3, #0
 8017e70:	e02b      	b.n	8017eca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017e72:	79fb      	ldrb	r3, [r7, #7]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d018      	beq.n	8017eaa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e78:	68fb      	ldr	r3, [r7, #12]
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d013      	beq.n	8017ea6 <udp_input_local_match+0x86>
 8017e7e:	68fb      	ldr	r3, [r7, #12]
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	2b00      	cmp	r3, #0
 8017e84:	d00f      	beq.n	8017ea6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e86:	4b17      	ldr	r3, [pc, #92]	; (8017ee4 <udp_input_local_match+0xc4>)
 8017e88:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e8e:	d00a      	beq.n	8017ea6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	681a      	ldr	r2, [r3, #0]
 8017e94:	4b13      	ldr	r3, [pc, #76]	; (8017ee4 <udp_input_local_match+0xc4>)
 8017e96:	695b      	ldr	r3, [r3, #20]
 8017e98:	405a      	eors	r2, r3
 8017e9a:	68bb      	ldr	r3, [r7, #8]
 8017e9c:	3308      	adds	r3, #8
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d110      	bne.n	8017ec8 <udp_input_local_match+0xa8>
          return 1;
 8017ea6:	2301      	movs	r3, #1
 8017ea8:	e00f      	b.n	8017eca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017eaa:	68fb      	ldr	r3, [r7, #12]
 8017eac:	2b00      	cmp	r3, #0
 8017eae:	d009      	beq.n	8017ec4 <udp_input_local_match+0xa4>
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d005      	beq.n	8017ec4 <udp_input_local_match+0xa4>
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	681a      	ldr	r2, [r3, #0]
 8017ebc:	4b09      	ldr	r3, [pc, #36]	; (8017ee4 <udp_input_local_match+0xc4>)
 8017ebe:	695b      	ldr	r3, [r3, #20]
 8017ec0:	429a      	cmp	r2, r3
 8017ec2:	d101      	bne.n	8017ec8 <udp_input_local_match+0xa8>
        return 1;
 8017ec4:	2301      	movs	r3, #1
 8017ec6:	e000      	b.n	8017eca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017ec8:	2300      	movs	r3, #0
}
 8017eca:	4618      	mov	r0, r3
 8017ecc:	3710      	adds	r7, #16
 8017ece:	46bd      	mov	sp, r7
 8017ed0:	bd80      	pop	{r7, pc}
 8017ed2:	bf00      	nop
 8017ed4:	0801ded0 	.word	0x0801ded0
 8017ed8:	0801df00 	.word	0x0801df00
 8017edc:	0801df24 	.word	0x0801df24
 8017ee0:	0801df4c 	.word	0x0801df4c
 8017ee4:	240051b0 	.word	0x240051b0

08017ee8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017ee8:	b590      	push	{r4, r7, lr}
 8017eea:	b08d      	sub	sp, #52	; 0x34
 8017eec:	af02      	add	r7, sp, #8
 8017eee:	6078      	str	r0, [r7, #4]
 8017ef0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017ef2:	2300      	movs	r3, #0
 8017ef4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	d105      	bne.n	8017f08 <udp_input+0x20>
 8017efc:	4b7c      	ldr	r3, [pc, #496]	; (80180f0 <udp_input+0x208>)
 8017efe:	22cf      	movs	r2, #207	; 0xcf
 8017f00:	497c      	ldr	r1, [pc, #496]	; (80180f4 <udp_input+0x20c>)
 8017f02:	487d      	ldr	r0, [pc, #500]	; (80180f8 <udp_input+0x210>)
 8017f04:	f002 ff3a 	bl	801ad7c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017f08:	683b      	ldr	r3, [r7, #0]
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d105      	bne.n	8017f1a <udp_input+0x32>
 8017f0e:	4b78      	ldr	r3, [pc, #480]	; (80180f0 <udp_input+0x208>)
 8017f10:	22d0      	movs	r2, #208	; 0xd0
 8017f12:	497a      	ldr	r1, [pc, #488]	; (80180fc <udp_input+0x214>)
 8017f14:	4878      	ldr	r0, [pc, #480]	; (80180f8 <udp_input+0x210>)
 8017f16:	f002 ff31 	bl	801ad7c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	895b      	ldrh	r3, [r3, #10]
 8017f1e:	2b07      	cmp	r3, #7
 8017f20:	d803      	bhi.n	8017f2a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017f22:	6878      	ldr	r0, [r7, #4]
 8017f24:	f7f9 faf6 	bl	8011514 <pbuf_free>
    goto end;
 8017f28:	e0de      	b.n	80180e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	685b      	ldr	r3, [r3, #4]
 8017f2e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017f30:	4b73      	ldr	r3, [pc, #460]	; (8018100 <udp_input+0x218>)
 8017f32:	695b      	ldr	r3, [r3, #20]
 8017f34:	4a72      	ldr	r2, [pc, #456]	; (8018100 <udp_input+0x218>)
 8017f36:	6812      	ldr	r2, [r2, #0]
 8017f38:	4611      	mov	r1, r2
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f001 fcae 	bl	801989c <ip4_addr_isbroadcast_u32>
 8017f40:	4603      	mov	r3, r0
 8017f42:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017f44:	697b      	ldr	r3, [r7, #20]
 8017f46:	881b      	ldrh	r3, [r3, #0]
 8017f48:	b29b      	uxth	r3, r3
 8017f4a:	4618      	mov	r0, r3
 8017f4c:	f7f7 fe38 	bl	800fbc0 <lwip_htons>
 8017f50:	4603      	mov	r3, r0
 8017f52:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017f54:	697b      	ldr	r3, [r7, #20]
 8017f56:	885b      	ldrh	r3, [r3, #2]
 8017f58:	b29b      	uxth	r3, r3
 8017f5a:	4618      	mov	r0, r3
 8017f5c:	f7f7 fe30 	bl	800fbc0 <lwip_htons>
 8017f60:	4603      	mov	r3, r0
 8017f62:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017f64:	2300      	movs	r3, #0
 8017f66:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017f68:	2300      	movs	r3, #0
 8017f6a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017f6c:	2300      	movs	r3, #0
 8017f6e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f70:	4b64      	ldr	r3, [pc, #400]	; (8018104 <udp_input+0x21c>)
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	627b      	str	r3, [r7, #36]	; 0x24
 8017f76:	e054      	b.n	8018022 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f7a:	8a5b      	ldrh	r3, [r3, #18]
 8017f7c:	89fa      	ldrh	r2, [r7, #14]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d14a      	bne.n	8018018 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f82:	7cfb      	ldrb	r3, [r7, #19]
 8017f84:	461a      	mov	r2, r3
 8017f86:	6839      	ldr	r1, [r7, #0]
 8017f88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f8a:	f7ff ff49 	bl	8017e20 <udp_input_local_match>
 8017f8e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d041      	beq.n	8018018 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f96:	7c1b      	ldrb	r3, [r3, #16]
 8017f98:	f003 0304 	and.w	r3, r3, #4
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d11d      	bne.n	8017fdc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017fa0:	69fb      	ldr	r3, [r7, #28]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d102      	bne.n	8017fac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa8:	61fb      	str	r3, [r7, #28]
 8017faa:	e017      	b.n	8017fdc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017fac:	7cfb      	ldrb	r3, [r7, #19]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d014      	beq.n	8017fdc <udp_input+0xf4>
 8017fb2:	4b53      	ldr	r3, [pc, #332]	; (8018100 <udp_input+0x218>)
 8017fb4:	695b      	ldr	r3, [r3, #20]
 8017fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017fba:	d10f      	bne.n	8017fdc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017fbc:	69fb      	ldr	r3, [r7, #28]
 8017fbe:	681a      	ldr	r2, [r3, #0]
 8017fc0:	683b      	ldr	r3, [r7, #0]
 8017fc2:	3304      	adds	r3, #4
 8017fc4:	681b      	ldr	r3, [r3, #0]
 8017fc6:	429a      	cmp	r2, r3
 8017fc8:	d008      	beq.n	8017fdc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fcc:	681a      	ldr	r2, [r3, #0]
 8017fce:	683b      	ldr	r3, [r7, #0]
 8017fd0:	3304      	adds	r3, #4
 8017fd2:	681b      	ldr	r3, [r3, #0]
 8017fd4:	429a      	cmp	r2, r3
 8017fd6:	d101      	bne.n	8017fdc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fda:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fde:	8a9b      	ldrh	r3, [r3, #20]
 8017fe0:	8a3a      	ldrh	r2, [r7, #16]
 8017fe2:	429a      	cmp	r2, r3
 8017fe4:	d118      	bne.n	8018018 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017fea:	2b00      	cmp	r3, #0
 8017fec:	d005      	beq.n	8017ffa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff0:	685a      	ldr	r2, [r3, #4]
 8017ff2:	4b43      	ldr	r3, [pc, #268]	; (8018100 <udp_input+0x218>)
 8017ff4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017ff6:	429a      	cmp	r2, r3
 8017ff8:	d10e      	bne.n	8018018 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017ffa:	6a3b      	ldr	r3, [r7, #32]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d014      	beq.n	801802a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018002:	68da      	ldr	r2, [r3, #12]
 8018004:	6a3b      	ldr	r3, [r7, #32]
 8018006:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018008:	4b3e      	ldr	r3, [pc, #248]	; (8018104 <udp_input+0x21c>)
 801800a:	681a      	ldr	r2, [r3, #0]
 801800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801800e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018010:	4a3c      	ldr	r2, [pc, #240]	; (8018104 <udp_input+0x21c>)
 8018012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018014:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018016:	e008      	b.n	801802a <udp_input+0x142>
      }
    }

    prev = pcb;
 8018018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801801e:	68db      	ldr	r3, [r3, #12]
 8018020:	627b      	str	r3, [r7, #36]	; 0x24
 8018022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018024:	2b00      	cmp	r3, #0
 8018026:	d1a7      	bne.n	8017f78 <udp_input+0x90>
 8018028:	e000      	b.n	801802c <udp_input+0x144>
        break;
 801802a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801802e:	2b00      	cmp	r3, #0
 8018030:	d101      	bne.n	8018036 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018032:	69fb      	ldr	r3, [r7, #28]
 8018034:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018038:	2b00      	cmp	r3, #0
 801803a:	d002      	beq.n	8018042 <udp_input+0x15a>
    for_us = 1;
 801803c:	2301      	movs	r3, #1
 801803e:	76fb      	strb	r3, [r7, #27]
 8018040:	e00a      	b.n	8018058 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8018042:	683b      	ldr	r3, [r7, #0]
 8018044:	3304      	adds	r3, #4
 8018046:	681a      	ldr	r2, [r3, #0]
 8018048:	4b2d      	ldr	r3, [pc, #180]	; (8018100 <udp_input+0x218>)
 801804a:	695b      	ldr	r3, [r3, #20]
 801804c:	429a      	cmp	r2, r3
 801804e:	bf0c      	ite	eq
 8018050:	2301      	moveq	r3, #1
 8018052:	2300      	movne	r3, #0
 8018054:	b2db      	uxtb	r3, r3
 8018056:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018058:	7efb      	ldrb	r3, [r7, #27]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d041      	beq.n	80180e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801805e:	2108      	movs	r1, #8
 8018060:	6878      	ldr	r0, [r7, #4]
 8018062:	f7f9 f9d1 	bl	8011408 <pbuf_remove_header>
 8018066:	4603      	mov	r3, r0
 8018068:	2b00      	cmp	r3, #0
 801806a:	d00a      	beq.n	8018082 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801806c:	4b20      	ldr	r3, [pc, #128]	; (80180f0 <udp_input+0x208>)
 801806e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8018072:	4925      	ldr	r1, [pc, #148]	; (8018108 <udp_input+0x220>)
 8018074:	4820      	ldr	r0, [pc, #128]	; (80180f8 <udp_input+0x210>)
 8018076:	f002 fe81 	bl	801ad7c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801807a:	6878      	ldr	r0, [r7, #4]
 801807c:	f7f9 fa4a 	bl	8011514 <pbuf_free>
      goto end;
 8018080:	e032      	b.n	80180e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018084:	2b00      	cmp	r3, #0
 8018086:	d012      	beq.n	80180ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801808a:	699b      	ldr	r3, [r3, #24]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d00a      	beq.n	80180a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018092:	699c      	ldr	r4, [r3, #24]
 8018094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018096:	69d8      	ldr	r0, [r3, #28]
 8018098:	8a3b      	ldrh	r3, [r7, #16]
 801809a:	9300      	str	r3, [sp, #0]
 801809c:	4b1b      	ldr	r3, [pc, #108]	; (801810c <udp_input+0x224>)
 801809e:	687a      	ldr	r2, [r7, #4]
 80180a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80180a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80180a4:	e021      	b.n	80180ea <udp_input+0x202>
        pbuf_free(p);
 80180a6:	6878      	ldr	r0, [r7, #4]
 80180a8:	f7f9 fa34 	bl	8011514 <pbuf_free>
        goto end;
 80180ac:	e01c      	b.n	80180e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80180ae:	7cfb      	ldrb	r3, [r7, #19]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d112      	bne.n	80180da <udp_input+0x1f2>
 80180b4:	4b12      	ldr	r3, [pc, #72]	; (8018100 <udp_input+0x218>)
 80180b6:	695b      	ldr	r3, [r3, #20]
 80180b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80180bc:	2be0      	cmp	r3, #224	; 0xe0
 80180be:	d00c      	beq.n	80180da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80180c0:	4b0f      	ldr	r3, [pc, #60]	; (8018100 <udp_input+0x218>)
 80180c2:	899b      	ldrh	r3, [r3, #12]
 80180c4:	3308      	adds	r3, #8
 80180c6:	b29b      	uxth	r3, r3
 80180c8:	b21b      	sxth	r3, r3
 80180ca:	4619      	mov	r1, r3
 80180cc:	6878      	ldr	r0, [r7, #4]
 80180ce:	f7f9 fa0e 	bl	80114ee <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80180d2:	2103      	movs	r1, #3
 80180d4:	6878      	ldr	r0, [r7, #4]
 80180d6:	f001 f8b7 	bl	8019248 <icmp_dest_unreach>
      pbuf_free(p);
 80180da:	6878      	ldr	r0, [r7, #4]
 80180dc:	f7f9 fa1a 	bl	8011514 <pbuf_free>
  return;
 80180e0:	e003      	b.n	80180ea <udp_input+0x202>
    pbuf_free(p);
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	f7f9 fa16 	bl	8011514 <pbuf_free>
  return;
 80180e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80180ea:	372c      	adds	r7, #44	; 0x2c
 80180ec:	46bd      	mov	sp, r7
 80180ee:	bd90      	pop	{r4, r7, pc}
 80180f0:	0801ded0 	.word	0x0801ded0
 80180f4:	0801df74 	.word	0x0801df74
 80180f8:	0801df24 	.word	0x0801df24
 80180fc:	0801df8c 	.word	0x0801df8c
 8018100:	240051b0 	.word	0x240051b0
 8018104:	24008288 	.word	0x24008288
 8018108:	0801dfa8 	.word	0x0801dfa8
 801810c:	240051c0 	.word	0x240051c0

08018110 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018110:	b480      	push	{r7}
 8018112:	b085      	sub	sp, #20
 8018114:	af00      	add	r7, sp, #0
 8018116:	6078      	str	r0, [r7, #4]
 8018118:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d01e      	beq.n	801815e <udp_netif_ip_addr_changed+0x4e>
 8018120:	687b      	ldr	r3, [r7, #4]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	2b00      	cmp	r3, #0
 8018126:	d01a      	beq.n	801815e <udp_netif_ip_addr_changed+0x4e>
 8018128:	683b      	ldr	r3, [r7, #0]
 801812a:	2b00      	cmp	r3, #0
 801812c:	d017      	beq.n	801815e <udp_netif_ip_addr_changed+0x4e>
 801812e:	683b      	ldr	r3, [r7, #0]
 8018130:	681b      	ldr	r3, [r3, #0]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d013      	beq.n	801815e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018136:	4b0d      	ldr	r3, [pc, #52]	; (801816c <udp_netif_ip_addr_changed+0x5c>)
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	60fb      	str	r3, [r7, #12]
 801813c:	e00c      	b.n	8018158 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	681a      	ldr	r2, [r3, #0]
 8018142:	687b      	ldr	r3, [r7, #4]
 8018144:	681b      	ldr	r3, [r3, #0]
 8018146:	429a      	cmp	r2, r3
 8018148:	d103      	bne.n	8018152 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801814a:	683b      	ldr	r3, [r7, #0]
 801814c:	681a      	ldr	r2, [r3, #0]
 801814e:	68fb      	ldr	r3, [r7, #12]
 8018150:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	68db      	ldr	r3, [r3, #12]
 8018156:	60fb      	str	r3, [r7, #12]
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d1ef      	bne.n	801813e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801815e:	bf00      	nop
 8018160:	3714      	adds	r7, #20
 8018162:	46bd      	mov	sp, r7
 8018164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018168:	4770      	bx	lr
 801816a:	bf00      	nop
 801816c:	24008288 	.word	0x24008288

08018170 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b082      	sub	sp, #8
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018178:	4915      	ldr	r1, [pc, #84]	; (80181d0 <etharp_free_entry+0x60>)
 801817a:	687a      	ldr	r2, [r7, #4]
 801817c:	4613      	mov	r3, r2
 801817e:	005b      	lsls	r3, r3, #1
 8018180:	4413      	add	r3, r2
 8018182:	00db      	lsls	r3, r3, #3
 8018184:	440b      	add	r3, r1
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d013      	beq.n	80181b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801818c:	4910      	ldr	r1, [pc, #64]	; (80181d0 <etharp_free_entry+0x60>)
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	4613      	mov	r3, r2
 8018192:	005b      	lsls	r3, r3, #1
 8018194:	4413      	add	r3, r2
 8018196:	00db      	lsls	r3, r3, #3
 8018198:	440b      	add	r3, r1
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	4618      	mov	r0, r3
 801819e:	f7f9 f9b9 	bl	8011514 <pbuf_free>
    arp_table[i].q = NULL;
 80181a2:	490b      	ldr	r1, [pc, #44]	; (80181d0 <etharp_free_entry+0x60>)
 80181a4:	687a      	ldr	r2, [r7, #4]
 80181a6:	4613      	mov	r3, r2
 80181a8:	005b      	lsls	r3, r3, #1
 80181aa:	4413      	add	r3, r2
 80181ac:	00db      	lsls	r3, r3, #3
 80181ae:	440b      	add	r3, r1
 80181b0:	2200      	movs	r2, #0
 80181b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80181b4:	4906      	ldr	r1, [pc, #24]	; (80181d0 <etharp_free_entry+0x60>)
 80181b6:	687a      	ldr	r2, [r7, #4]
 80181b8:	4613      	mov	r3, r2
 80181ba:	005b      	lsls	r3, r3, #1
 80181bc:	4413      	add	r3, r2
 80181be:	00db      	lsls	r3, r3, #3
 80181c0:	440b      	add	r3, r1
 80181c2:	3314      	adds	r3, #20
 80181c4:	2200      	movs	r2, #0
 80181c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80181c8:	bf00      	nop
 80181ca:	3708      	adds	r7, #8
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}
 80181d0:	24004b3c 	.word	0x24004b3c

080181d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80181d4:	b580      	push	{r7, lr}
 80181d6:	b082      	sub	sp, #8
 80181d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181da:	2300      	movs	r3, #0
 80181dc:	607b      	str	r3, [r7, #4]
 80181de:	e096      	b.n	801830e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80181e0:	494f      	ldr	r1, [pc, #316]	; (8018320 <etharp_tmr+0x14c>)
 80181e2:	687a      	ldr	r2, [r7, #4]
 80181e4:	4613      	mov	r3, r2
 80181e6:	005b      	lsls	r3, r3, #1
 80181e8:	4413      	add	r3, r2
 80181ea:	00db      	lsls	r3, r3, #3
 80181ec:	440b      	add	r3, r1
 80181ee:	3314      	adds	r3, #20
 80181f0:	781b      	ldrb	r3, [r3, #0]
 80181f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80181f4:	78fb      	ldrb	r3, [r7, #3]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	f000 8086 	beq.w	8018308 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80181fc:	4948      	ldr	r1, [pc, #288]	; (8018320 <etharp_tmr+0x14c>)
 80181fe:	687a      	ldr	r2, [r7, #4]
 8018200:	4613      	mov	r3, r2
 8018202:	005b      	lsls	r3, r3, #1
 8018204:	4413      	add	r3, r2
 8018206:	00db      	lsls	r3, r3, #3
 8018208:	440b      	add	r3, r1
 801820a:	3312      	adds	r3, #18
 801820c:	881b      	ldrh	r3, [r3, #0]
 801820e:	3301      	adds	r3, #1
 8018210:	b298      	uxth	r0, r3
 8018212:	4943      	ldr	r1, [pc, #268]	; (8018320 <etharp_tmr+0x14c>)
 8018214:	687a      	ldr	r2, [r7, #4]
 8018216:	4613      	mov	r3, r2
 8018218:	005b      	lsls	r3, r3, #1
 801821a:	4413      	add	r3, r2
 801821c:	00db      	lsls	r3, r3, #3
 801821e:	440b      	add	r3, r1
 8018220:	3312      	adds	r3, #18
 8018222:	4602      	mov	r2, r0
 8018224:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018226:	493e      	ldr	r1, [pc, #248]	; (8018320 <etharp_tmr+0x14c>)
 8018228:	687a      	ldr	r2, [r7, #4]
 801822a:	4613      	mov	r3, r2
 801822c:	005b      	lsls	r3, r3, #1
 801822e:	4413      	add	r3, r2
 8018230:	00db      	lsls	r3, r3, #3
 8018232:	440b      	add	r3, r1
 8018234:	3312      	adds	r3, #18
 8018236:	881b      	ldrh	r3, [r3, #0]
 8018238:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801823c:	d215      	bcs.n	801826a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801823e:	4938      	ldr	r1, [pc, #224]	; (8018320 <etharp_tmr+0x14c>)
 8018240:	687a      	ldr	r2, [r7, #4]
 8018242:	4613      	mov	r3, r2
 8018244:	005b      	lsls	r3, r3, #1
 8018246:	4413      	add	r3, r2
 8018248:	00db      	lsls	r3, r3, #3
 801824a:	440b      	add	r3, r1
 801824c:	3314      	adds	r3, #20
 801824e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018250:	2b01      	cmp	r3, #1
 8018252:	d10e      	bne.n	8018272 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018254:	4932      	ldr	r1, [pc, #200]	; (8018320 <etharp_tmr+0x14c>)
 8018256:	687a      	ldr	r2, [r7, #4]
 8018258:	4613      	mov	r3, r2
 801825a:	005b      	lsls	r3, r3, #1
 801825c:	4413      	add	r3, r2
 801825e:	00db      	lsls	r3, r3, #3
 8018260:	440b      	add	r3, r1
 8018262:	3312      	adds	r3, #18
 8018264:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018266:	2b04      	cmp	r3, #4
 8018268:	d903      	bls.n	8018272 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801826a:	6878      	ldr	r0, [r7, #4]
 801826c:	f7ff ff80 	bl	8018170 <etharp_free_entry>
 8018270:	e04a      	b.n	8018308 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018272:	492b      	ldr	r1, [pc, #172]	; (8018320 <etharp_tmr+0x14c>)
 8018274:	687a      	ldr	r2, [r7, #4]
 8018276:	4613      	mov	r3, r2
 8018278:	005b      	lsls	r3, r3, #1
 801827a:	4413      	add	r3, r2
 801827c:	00db      	lsls	r3, r3, #3
 801827e:	440b      	add	r3, r1
 8018280:	3314      	adds	r3, #20
 8018282:	781b      	ldrb	r3, [r3, #0]
 8018284:	2b03      	cmp	r3, #3
 8018286:	d10a      	bne.n	801829e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018288:	4925      	ldr	r1, [pc, #148]	; (8018320 <etharp_tmr+0x14c>)
 801828a:	687a      	ldr	r2, [r7, #4]
 801828c:	4613      	mov	r3, r2
 801828e:	005b      	lsls	r3, r3, #1
 8018290:	4413      	add	r3, r2
 8018292:	00db      	lsls	r3, r3, #3
 8018294:	440b      	add	r3, r1
 8018296:	3314      	adds	r3, #20
 8018298:	2204      	movs	r2, #4
 801829a:	701a      	strb	r2, [r3, #0]
 801829c:	e034      	b.n	8018308 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801829e:	4920      	ldr	r1, [pc, #128]	; (8018320 <etharp_tmr+0x14c>)
 80182a0:	687a      	ldr	r2, [r7, #4]
 80182a2:	4613      	mov	r3, r2
 80182a4:	005b      	lsls	r3, r3, #1
 80182a6:	4413      	add	r3, r2
 80182a8:	00db      	lsls	r3, r3, #3
 80182aa:	440b      	add	r3, r1
 80182ac:	3314      	adds	r3, #20
 80182ae:	781b      	ldrb	r3, [r3, #0]
 80182b0:	2b04      	cmp	r3, #4
 80182b2:	d10a      	bne.n	80182ca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80182b4:	491a      	ldr	r1, [pc, #104]	; (8018320 <etharp_tmr+0x14c>)
 80182b6:	687a      	ldr	r2, [r7, #4]
 80182b8:	4613      	mov	r3, r2
 80182ba:	005b      	lsls	r3, r3, #1
 80182bc:	4413      	add	r3, r2
 80182be:	00db      	lsls	r3, r3, #3
 80182c0:	440b      	add	r3, r1
 80182c2:	3314      	adds	r3, #20
 80182c4:	2202      	movs	r2, #2
 80182c6:	701a      	strb	r2, [r3, #0]
 80182c8:	e01e      	b.n	8018308 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80182ca:	4915      	ldr	r1, [pc, #84]	; (8018320 <etharp_tmr+0x14c>)
 80182cc:	687a      	ldr	r2, [r7, #4]
 80182ce:	4613      	mov	r3, r2
 80182d0:	005b      	lsls	r3, r3, #1
 80182d2:	4413      	add	r3, r2
 80182d4:	00db      	lsls	r3, r3, #3
 80182d6:	440b      	add	r3, r1
 80182d8:	3314      	adds	r3, #20
 80182da:	781b      	ldrb	r3, [r3, #0]
 80182dc:	2b01      	cmp	r3, #1
 80182de:	d113      	bne.n	8018308 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80182e0:	490f      	ldr	r1, [pc, #60]	; (8018320 <etharp_tmr+0x14c>)
 80182e2:	687a      	ldr	r2, [r7, #4]
 80182e4:	4613      	mov	r3, r2
 80182e6:	005b      	lsls	r3, r3, #1
 80182e8:	4413      	add	r3, r2
 80182ea:	00db      	lsls	r3, r3, #3
 80182ec:	440b      	add	r3, r1
 80182ee:	3308      	adds	r3, #8
 80182f0:	6818      	ldr	r0, [r3, #0]
 80182f2:	687a      	ldr	r2, [r7, #4]
 80182f4:	4613      	mov	r3, r2
 80182f6:	005b      	lsls	r3, r3, #1
 80182f8:	4413      	add	r3, r2
 80182fa:	00db      	lsls	r3, r3, #3
 80182fc:	4a08      	ldr	r2, [pc, #32]	; (8018320 <etharp_tmr+0x14c>)
 80182fe:	4413      	add	r3, r2
 8018300:	3304      	adds	r3, #4
 8018302:	4619      	mov	r1, r3
 8018304:	f000 fe6e 	bl	8018fe4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	3301      	adds	r3, #1
 801830c:	607b      	str	r3, [r7, #4]
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	2b09      	cmp	r3, #9
 8018312:	f77f af65 	ble.w	80181e0 <etharp_tmr+0xc>
      }
    }
  }
}
 8018316:	bf00      	nop
 8018318:	bf00      	nop
 801831a:	3708      	adds	r7, #8
 801831c:	46bd      	mov	sp, r7
 801831e:	bd80      	pop	{r7, pc}
 8018320:	24004b3c 	.word	0x24004b3c

08018324 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018324:	b580      	push	{r7, lr}
 8018326:	b08a      	sub	sp, #40	; 0x28
 8018328:	af00      	add	r7, sp, #0
 801832a:	60f8      	str	r0, [r7, #12]
 801832c:	460b      	mov	r3, r1
 801832e:	607a      	str	r2, [r7, #4]
 8018330:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018332:	230a      	movs	r3, #10
 8018334:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018336:	230a      	movs	r3, #10
 8018338:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801833a:	230a      	movs	r3, #10
 801833c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801833e:	2300      	movs	r3, #0
 8018340:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018342:	230a      	movs	r3, #10
 8018344:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018346:	2300      	movs	r3, #0
 8018348:	83bb      	strh	r3, [r7, #28]
 801834a:	2300      	movs	r3, #0
 801834c:	837b      	strh	r3, [r7, #26]
 801834e:	2300      	movs	r3, #0
 8018350:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018352:	2300      	movs	r3, #0
 8018354:	843b      	strh	r3, [r7, #32]
 8018356:	e0ae      	b.n	80184b6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018358:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801835c:	49a6      	ldr	r1, [pc, #664]	; (80185f8 <etharp_find_entry+0x2d4>)
 801835e:	4613      	mov	r3, r2
 8018360:	005b      	lsls	r3, r3, #1
 8018362:	4413      	add	r3, r2
 8018364:	00db      	lsls	r3, r3, #3
 8018366:	440b      	add	r3, r1
 8018368:	3314      	adds	r3, #20
 801836a:	781b      	ldrb	r3, [r3, #0]
 801836c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801836e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018372:	2b0a      	cmp	r3, #10
 8018374:	d105      	bne.n	8018382 <etharp_find_entry+0x5e>
 8018376:	7dfb      	ldrb	r3, [r7, #23]
 8018378:	2b00      	cmp	r3, #0
 801837a:	d102      	bne.n	8018382 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801837c:	8c3b      	ldrh	r3, [r7, #32]
 801837e:	847b      	strh	r3, [r7, #34]	; 0x22
 8018380:	e095      	b.n	80184ae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018382:	7dfb      	ldrb	r3, [r7, #23]
 8018384:	2b00      	cmp	r3, #0
 8018386:	f000 8092 	beq.w	80184ae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801838a:	7dfb      	ldrb	r3, [r7, #23]
 801838c:	2b01      	cmp	r3, #1
 801838e:	d009      	beq.n	80183a4 <etharp_find_entry+0x80>
 8018390:	7dfb      	ldrb	r3, [r7, #23]
 8018392:	2b01      	cmp	r3, #1
 8018394:	d806      	bhi.n	80183a4 <etharp_find_entry+0x80>
 8018396:	4b99      	ldr	r3, [pc, #612]	; (80185fc <etharp_find_entry+0x2d8>)
 8018398:	f240 1223 	movw	r2, #291	; 0x123
 801839c:	4998      	ldr	r1, [pc, #608]	; (8018600 <etharp_find_entry+0x2dc>)
 801839e:	4899      	ldr	r0, [pc, #612]	; (8018604 <etharp_find_entry+0x2e0>)
 80183a0:	f002 fcec 	bl	801ad7c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d020      	beq.n	80183ec <etharp_find_entry+0xc8>
 80183aa:	68fb      	ldr	r3, [r7, #12]
 80183ac:	6819      	ldr	r1, [r3, #0]
 80183ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183b2:	4891      	ldr	r0, [pc, #580]	; (80185f8 <etharp_find_entry+0x2d4>)
 80183b4:	4613      	mov	r3, r2
 80183b6:	005b      	lsls	r3, r3, #1
 80183b8:	4413      	add	r3, r2
 80183ba:	00db      	lsls	r3, r3, #3
 80183bc:	4403      	add	r3, r0
 80183be:	3304      	adds	r3, #4
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	4299      	cmp	r1, r3
 80183c4:	d112      	bne.n	80183ec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d00c      	beq.n	80183e6 <etharp_find_entry+0xc2>
 80183cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183d0:	4989      	ldr	r1, [pc, #548]	; (80185f8 <etharp_find_entry+0x2d4>)
 80183d2:	4613      	mov	r3, r2
 80183d4:	005b      	lsls	r3, r3, #1
 80183d6:	4413      	add	r3, r2
 80183d8:	00db      	lsls	r3, r3, #3
 80183da:	440b      	add	r3, r1
 80183dc:	3308      	adds	r3, #8
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	687a      	ldr	r2, [r7, #4]
 80183e2:	429a      	cmp	r2, r3
 80183e4:	d102      	bne.n	80183ec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80183e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183ea:	e100      	b.n	80185ee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80183ec:	7dfb      	ldrb	r3, [r7, #23]
 80183ee:	2b01      	cmp	r3, #1
 80183f0:	d140      	bne.n	8018474 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80183f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183f6:	4980      	ldr	r1, [pc, #512]	; (80185f8 <etharp_find_entry+0x2d4>)
 80183f8:	4613      	mov	r3, r2
 80183fa:	005b      	lsls	r3, r3, #1
 80183fc:	4413      	add	r3, r2
 80183fe:	00db      	lsls	r3, r3, #3
 8018400:	440b      	add	r3, r1
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d01a      	beq.n	801843e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018408:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801840c:	497a      	ldr	r1, [pc, #488]	; (80185f8 <etharp_find_entry+0x2d4>)
 801840e:	4613      	mov	r3, r2
 8018410:	005b      	lsls	r3, r3, #1
 8018412:	4413      	add	r3, r2
 8018414:	00db      	lsls	r3, r3, #3
 8018416:	440b      	add	r3, r1
 8018418:	3312      	adds	r3, #18
 801841a:	881b      	ldrh	r3, [r3, #0]
 801841c:	8bba      	ldrh	r2, [r7, #28]
 801841e:	429a      	cmp	r2, r3
 8018420:	d845      	bhi.n	80184ae <etharp_find_entry+0x18a>
            old_queue = i;
 8018422:	8c3b      	ldrh	r3, [r7, #32]
 8018424:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018426:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801842a:	4973      	ldr	r1, [pc, #460]	; (80185f8 <etharp_find_entry+0x2d4>)
 801842c:	4613      	mov	r3, r2
 801842e:	005b      	lsls	r3, r3, #1
 8018430:	4413      	add	r3, r2
 8018432:	00db      	lsls	r3, r3, #3
 8018434:	440b      	add	r3, r1
 8018436:	3312      	adds	r3, #18
 8018438:	881b      	ldrh	r3, [r3, #0]
 801843a:	83bb      	strh	r3, [r7, #28]
 801843c:	e037      	b.n	80184ae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801843e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018442:	496d      	ldr	r1, [pc, #436]	; (80185f8 <etharp_find_entry+0x2d4>)
 8018444:	4613      	mov	r3, r2
 8018446:	005b      	lsls	r3, r3, #1
 8018448:	4413      	add	r3, r2
 801844a:	00db      	lsls	r3, r3, #3
 801844c:	440b      	add	r3, r1
 801844e:	3312      	adds	r3, #18
 8018450:	881b      	ldrh	r3, [r3, #0]
 8018452:	8b7a      	ldrh	r2, [r7, #26]
 8018454:	429a      	cmp	r2, r3
 8018456:	d82a      	bhi.n	80184ae <etharp_find_entry+0x18a>
            old_pending = i;
 8018458:	8c3b      	ldrh	r3, [r7, #32]
 801845a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801845c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018460:	4965      	ldr	r1, [pc, #404]	; (80185f8 <etharp_find_entry+0x2d4>)
 8018462:	4613      	mov	r3, r2
 8018464:	005b      	lsls	r3, r3, #1
 8018466:	4413      	add	r3, r2
 8018468:	00db      	lsls	r3, r3, #3
 801846a:	440b      	add	r3, r1
 801846c:	3312      	adds	r3, #18
 801846e:	881b      	ldrh	r3, [r3, #0]
 8018470:	837b      	strh	r3, [r7, #26]
 8018472:	e01c      	b.n	80184ae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018474:	7dfb      	ldrb	r3, [r7, #23]
 8018476:	2b01      	cmp	r3, #1
 8018478:	d919      	bls.n	80184ae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801847a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801847e:	495e      	ldr	r1, [pc, #376]	; (80185f8 <etharp_find_entry+0x2d4>)
 8018480:	4613      	mov	r3, r2
 8018482:	005b      	lsls	r3, r3, #1
 8018484:	4413      	add	r3, r2
 8018486:	00db      	lsls	r3, r3, #3
 8018488:	440b      	add	r3, r1
 801848a:	3312      	adds	r3, #18
 801848c:	881b      	ldrh	r3, [r3, #0]
 801848e:	8b3a      	ldrh	r2, [r7, #24]
 8018490:	429a      	cmp	r2, r3
 8018492:	d80c      	bhi.n	80184ae <etharp_find_entry+0x18a>
            old_stable = i;
 8018494:	8c3b      	ldrh	r3, [r7, #32]
 8018496:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018498:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801849c:	4956      	ldr	r1, [pc, #344]	; (80185f8 <etharp_find_entry+0x2d4>)
 801849e:	4613      	mov	r3, r2
 80184a0:	005b      	lsls	r3, r3, #1
 80184a2:	4413      	add	r3, r2
 80184a4:	00db      	lsls	r3, r3, #3
 80184a6:	440b      	add	r3, r1
 80184a8:	3312      	adds	r3, #18
 80184aa:	881b      	ldrh	r3, [r3, #0]
 80184ac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80184ae:	8c3b      	ldrh	r3, [r7, #32]
 80184b0:	3301      	adds	r3, #1
 80184b2:	b29b      	uxth	r3, r3
 80184b4:	843b      	strh	r3, [r7, #32]
 80184b6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80184ba:	2b09      	cmp	r3, #9
 80184bc:	f77f af4c 	ble.w	8018358 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80184c0:	7afb      	ldrb	r3, [r7, #11]
 80184c2:	f003 0302 	and.w	r3, r3, #2
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d108      	bne.n	80184dc <etharp_find_entry+0x1b8>
 80184ca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80184ce:	2b0a      	cmp	r3, #10
 80184d0:	d107      	bne.n	80184e2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80184d2:	7afb      	ldrb	r3, [r7, #11]
 80184d4:	f003 0301 	and.w	r3, r3, #1
 80184d8:	2b00      	cmp	r3, #0
 80184da:	d102      	bne.n	80184e2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80184dc:	f04f 33ff 	mov.w	r3, #4294967295
 80184e0:	e085      	b.n	80185ee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80184e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80184e6:	2b09      	cmp	r3, #9
 80184e8:	dc02      	bgt.n	80184f0 <etharp_find_entry+0x1cc>
    i = empty;
 80184ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184ec:	843b      	strh	r3, [r7, #32]
 80184ee:	e039      	b.n	8018564 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80184f0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80184f4:	2b09      	cmp	r3, #9
 80184f6:	dc14      	bgt.n	8018522 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80184f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184fa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80184fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018500:	493d      	ldr	r1, [pc, #244]	; (80185f8 <etharp_find_entry+0x2d4>)
 8018502:	4613      	mov	r3, r2
 8018504:	005b      	lsls	r3, r3, #1
 8018506:	4413      	add	r3, r2
 8018508:	00db      	lsls	r3, r3, #3
 801850a:	440b      	add	r3, r1
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d018      	beq.n	8018544 <etharp_find_entry+0x220>
 8018512:	4b3a      	ldr	r3, [pc, #232]	; (80185fc <etharp_find_entry+0x2d8>)
 8018514:	f240 126d 	movw	r2, #365	; 0x16d
 8018518:	493b      	ldr	r1, [pc, #236]	; (8018608 <etharp_find_entry+0x2e4>)
 801851a:	483a      	ldr	r0, [pc, #232]	; (8018604 <etharp_find_entry+0x2e0>)
 801851c:	f002 fc2e 	bl	801ad7c <iprintf>
 8018520:	e010      	b.n	8018544 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018522:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018526:	2b09      	cmp	r3, #9
 8018528:	dc02      	bgt.n	8018530 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801852a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801852c:	843b      	strh	r3, [r7, #32]
 801852e:	e009      	b.n	8018544 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018530:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018534:	2b09      	cmp	r3, #9
 8018536:	dc02      	bgt.n	801853e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018538:	8bfb      	ldrh	r3, [r7, #30]
 801853a:	843b      	strh	r3, [r7, #32]
 801853c:	e002      	b.n	8018544 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801853e:	f04f 33ff 	mov.w	r3, #4294967295
 8018542:	e054      	b.n	80185ee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018544:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018548:	2b09      	cmp	r3, #9
 801854a:	dd06      	ble.n	801855a <etharp_find_entry+0x236>
 801854c:	4b2b      	ldr	r3, [pc, #172]	; (80185fc <etharp_find_entry+0x2d8>)
 801854e:	f240 127f 	movw	r2, #383	; 0x17f
 8018552:	492e      	ldr	r1, [pc, #184]	; (801860c <etharp_find_entry+0x2e8>)
 8018554:	482b      	ldr	r0, [pc, #172]	; (8018604 <etharp_find_entry+0x2e0>)
 8018556:	f002 fc11 	bl	801ad7c <iprintf>
    etharp_free_entry(i);
 801855a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801855e:	4618      	mov	r0, r3
 8018560:	f7ff fe06 	bl	8018170 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018564:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018568:	2b09      	cmp	r3, #9
 801856a:	dd06      	ble.n	801857a <etharp_find_entry+0x256>
 801856c:	4b23      	ldr	r3, [pc, #140]	; (80185fc <etharp_find_entry+0x2d8>)
 801856e:	f240 1283 	movw	r2, #387	; 0x183
 8018572:	4926      	ldr	r1, [pc, #152]	; (801860c <etharp_find_entry+0x2e8>)
 8018574:	4823      	ldr	r0, [pc, #140]	; (8018604 <etharp_find_entry+0x2e0>)
 8018576:	f002 fc01 	bl	801ad7c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801857a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801857e:	491e      	ldr	r1, [pc, #120]	; (80185f8 <etharp_find_entry+0x2d4>)
 8018580:	4613      	mov	r3, r2
 8018582:	005b      	lsls	r3, r3, #1
 8018584:	4413      	add	r3, r2
 8018586:	00db      	lsls	r3, r3, #3
 8018588:	440b      	add	r3, r1
 801858a:	3314      	adds	r3, #20
 801858c:	781b      	ldrb	r3, [r3, #0]
 801858e:	2b00      	cmp	r3, #0
 8018590:	d006      	beq.n	80185a0 <etharp_find_entry+0x27c>
 8018592:	4b1a      	ldr	r3, [pc, #104]	; (80185fc <etharp_find_entry+0x2d8>)
 8018594:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018598:	491d      	ldr	r1, [pc, #116]	; (8018610 <etharp_find_entry+0x2ec>)
 801859a:	481a      	ldr	r0, [pc, #104]	; (8018604 <etharp_find_entry+0x2e0>)
 801859c:	f002 fbee 	bl	801ad7c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d00b      	beq.n	80185be <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80185a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185aa:	68fb      	ldr	r3, [r7, #12]
 80185ac:	6819      	ldr	r1, [r3, #0]
 80185ae:	4812      	ldr	r0, [pc, #72]	; (80185f8 <etharp_find_entry+0x2d4>)
 80185b0:	4613      	mov	r3, r2
 80185b2:	005b      	lsls	r3, r3, #1
 80185b4:	4413      	add	r3, r2
 80185b6:	00db      	lsls	r3, r3, #3
 80185b8:	4403      	add	r3, r0
 80185ba:	3304      	adds	r3, #4
 80185bc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80185be:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185c2:	490d      	ldr	r1, [pc, #52]	; (80185f8 <etharp_find_entry+0x2d4>)
 80185c4:	4613      	mov	r3, r2
 80185c6:	005b      	lsls	r3, r3, #1
 80185c8:	4413      	add	r3, r2
 80185ca:	00db      	lsls	r3, r3, #3
 80185cc:	440b      	add	r3, r1
 80185ce:	3312      	adds	r3, #18
 80185d0:	2200      	movs	r2, #0
 80185d2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80185d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185d8:	4907      	ldr	r1, [pc, #28]	; (80185f8 <etharp_find_entry+0x2d4>)
 80185da:	4613      	mov	r3, r2
 80185dc:	005b      	lsls	r3, r3, #1
 80185de:	4413      	add	r3, r2
 80185e0:	00db      	lsls	r3, r3, #3
 80185e2:	440b      	add	r3, r1
 80185e4:	3308      	adds	r3, #8
 80185e6:	687a      	ldr	r2, [r7, #4]
 80185e8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80185ea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80185ee:	4618      	mov	r0, r3
 80185f0:	3728      	adds	r7, #40	; 0x28
 80185f2:	46bd      	mov	sp, r7
 80185f4:	bd80      	pop	{r7, pc}
 80185f6:	bf00      	nop
 80185f8:	24004b3c 	.word	0x24004b3c
 80185fc:	0801e234 	.word	0x0801e234
 8018600:	0801e26c 	.word	0x0801e26c
 8018604:	0801e2ac 	.word	0x0801e2ac
 8018608:	0801e2d4 	.word	0x0801e2d4
 801860c:	0801e2ec 	.word	0x0801e2ec
 8018610:	0801e300 	.word	0x0801e300

08018614 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b088      	sub	sp, #32
 8018618:	af02      	add	r7, sp, #8
 801861a:	60f8      	str	r0, [r7, #12]
 801861c:	60b9      	str	r1, [r7, #8]
 801861e:	607a      	str	r2, [r7, #4]
 8018620:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018628:	2b06      	cmp	r3, #6
 801862a:	d006      	beq.n	801863a <etharp_update_arp_entry+0x26>
 801862c:	4b48      	ldr	r3, [pc, #288]	; (8018750 <etharp_update_arp_entry+0x13c>)
 801862e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018632:	4948      	ldr	r1, [pc, #288]	; (8018754 <etharp_update_arp_entry+0x140>)
 8018634:	4848      	ldr	r0, [pc, #288]	; (8018758 <etharp_update_arp_entry+0x144>)
 8018636:	f002 fba1 	bl	801ad7c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801863a:	68bb      	ldr	r3, [r7, #8]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d012      	beq.n	8018666 <etharp_update_arp_entry+0x52>
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	681b      	ldr	r3, [r3, #0]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d00e      	beq.n	8018666 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018648:	68bb      	ldr	r3, [r7, #8]
 801864a:	681b      	ldr	r3, [r3, #0]
 801864c:	68f9      	ldr	r1, [r7, #12]
 801864e:	4618      	mov	r0, r3
 8018650:	f001 f924 	bl	801989c <ip4_addr_isbroadcast_u32>
 8018654:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018656:	2b00      	cmp	r3, #0
 8018658:	d105      	bne.n	8018666 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801865a:	68bb      	ldr	r3, [r7, #8]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018662:	2be0      	cmp	r3, #224	; 0xe0
 8018664:	d102      	bne.n	801866c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018666:	f06f 030f 	mvn.w	r3, #15
 801866a:	e06c      	b.n	8018746 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801866c:	78fb      	ldrb	r3, [r7, #3]
 801866e:	68fa      	ldr	r2, [r7, #12]
 8018670:	4619      	mov	r1, r3
 8018672:	68b8      	ldr	r0, [r7, #8]
 8018674:	f7ff fe56 	bl	8018324 <etharp_find_entry>
 8018678:	4603      	mov	r3, r0
 801867a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801867c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018680:	2b00      	cmp	r3, #0
 8018682:	da02      	bge.n	801868a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018684:	8afb      	ldrh	r3, [r7, #22]
 8018686:	b25b      	sxtb	r3, r3
 8018688:	e05d      	b.n	8018746 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801868a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801868e:	4933      	ldr	r1, [pc, #204]	; (801875c <etharp_update_arp_entry+0x148>)
 8018690:	4613      	mov	r3, r2
 8018692:	005b      	lsls	r3, r3, #1
 8018694:	4413      	add	r3, r2
 8018696:	00db      	lsls	r3, r3, #3
 8018698:	440b      	add	r3, r1
 801869a:	3314      	adds	r3, #20
 801869c:	2202      	movs	r2, #2
 801869e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80186a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186a4:	492d      	ldr	r1, [pc, #180]	; (801875c <etharp_update_arp_entry+0x148>)
 80186a6:	4613      	mov	r3, r2
 80186a8:	005b      	lsls	r3, r3, #1
 80186aa:	4413      	add	r3, r2
 80186ac:	00db      	lsls	r3, r3, #3
 80186ae:	440b      	add	r3, r1
 80186b0:	3308      	adds	r3, #8
 80186b2:	68fa      	ldr	r2, [r7, #12]
 80186b4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80186b6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186ba:	4613      	mov	r3, r2
 80186bc:	005b      	lsls	r3, r3, #1
 80186be:	4413      	add	r3, r2
 80186c0:	00db      	lsls	r3, r3, #3
 80186c2:	3308      	adds	r3, #8
 80186c4:	4a25      	ldr	r2, [pc, #148]	; (801875c <etharp_update_arp_entry+0x148>)
 80186c6:	4413      	add	r3, r2
 80186c8:	3304      	adds	r3, #4
 80186ca:	2206      	movs	r2, #6
 80186cc:	6879      	ldr	r1, [r7, #4]
 80186ce:	4618      	mov	r0, r3
 80186d0:	f002 fae3 	bl	801ac9a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80186d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186d8:	4920      	ldr	r1, [pc, #128]	; (801875c <etharp_update_arp_entry+0x148>)
 80186da:	4613      	mov	r3, r2
 80186dc:	005b      	lsls	r3, r3, #1
 80186de:	4413      	add	r3, r2
 80186e0:	00db      	lsls	r3, r3, #3
 80186e2:	440b      	add	r3, r1
 80186e4:	3312      	adds	r3, #18
 80186e6:	2200      	movs	r2, #0
 80186e8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80186ea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186ee:	491b      	ldr	r1, [pc, #108]	; (801875c <etharp_update_arp_entry+0x148>)
 80186f0:	4613      	mov	r3, r2
 80186f2:	005b      	lsls	r3, r3, #1
 80186f4:	4413      	add	r3, r2
 80186f6:	00db      	lsls	r3, r3, #3
 80186f8:	440b      	add	r3, r1
 80186fa:	681b      	ldr	r3, [r3, #0]
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d021      	beq.n	8018744 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8018700:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018704:	4915      	ldr	r1, [pc, #84]	; (801875c <etharp_update_arp_entry+0x148>)
 8018706:	4613      	mov	r3, r2
 8018708:	005b      	lsls	r3, r3, #1
 801870a:	4413      	add	r3, r2
 801870c:	00db      	lsls	r3, r3, #3
 801870e:	440b      	add	r3, r1
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8018714:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018718:	4910      	ldr	r1, [pc, #64]	; (801875c <etharp_update_arp_entry+0x148>)
 801871a:	4613      	mov	r3, r2
 801871c:	005b      	lsls	r3, r3, #1
 801871e:	4413      	add	r3, r2
 8018720:	00db      	lsls	r3, r3, #3
 8018722:	440b      	add	r3, r1
 8018724:	2200      	movs	r2, #0
 8018726:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801872e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018732:	9300      	str	r3, [sp, #0]
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	6939      	ldr	r1, [r7, #16]
 8018738:	68f8      	ldr	r0, [r7, #12]
 801873a:	f002 f849 	bl	801a7d0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801873e:	6938      	ldr	r0, [r7, #16]
 8018740:	f7f8 fee8 	bl	8011514 <pbuf_free>
  }
  return ERR_OK;
 8018744:	2300      	movs	r3, #0
}
 8018746:	4618      	mov	r0, r3
 8018748:	3718      	adds	r7, #24
 801874a:	46bd      	mov	sp, r7
 801874c:	bd80      	pop	{r7, pc}
 801874e:	bf00      	nop
 8018750:	0801e234 	.word	0x0801e234
 8018754:	0801e32c 	.word	0x0801e32c
 8018758:	0801e2ac 	.word	0x0801e2ac
 801875c:	24004b3c 	.word	0x24004b3c

08018760 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018760:	b580      	push	{r7, lr}
 8018762:	b084      	sub	sp, #16
 8018764:	af00      	add	r7, sp, #0
 8018766:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018768:	2300      	movs	r3, #0
 801876a:	60fb      	str	r3, [r7, #12]
 801876c:	e01e      	b.n	80187ac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801876e:	4913      	ldr	r1, [pc, #76]	; (80187bc <etharp_cleanup_netif+0x5c>)
 8018770:	68fa      	ldr	r2, [r7, #12]
 8018772:	4613      	mov	r3, r2
 8018774:	005b      	lsls	r3, r3, #1
 8018776:	4413      	add	r3, r2
 8018778:	00db      	lsls	r3, r3, #3
 801877a:	440b      	add	r3, r1
 801877c:	3314      	adds	r3, #20
 801877e:	781b      	ldrb	r3, [r3, #0]
 8018780:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8018782:	7afb      	ldrb	r3, [r7, #11]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d00e      	beq.n	80187a6 <etharp_cleanup_netif+0x46>
 8018788:	490c      	ldr	r1, [pc, #48]	; (80187bc <etharp_cleanup_netif+0x5c>)
 801878a:	68fa      	ldr	r2, [r7, #12]
 801878c:	4613      	mov	r3, r2
 801878e:	005b      	lsls	r3, r3, #1
 8018790:	4413      	add	r3, r2
 8018792:	00db      	lsls	r3, r3, #3
 8018794:	440b      	add	r3, r1
 8018796:	3308      	adds	r3, #8
 8018798:	681b      	ldr	r3, [r3, #0]
 801879a:	687a      	ldr	r2, [r7, #4]
 801879c:	429a      	cmp	r2, r3
 801879e:	d102      	bne.n	80187a6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80187a0:	68f8      	ldr	r0, [r7, #12]
 80187a2:	f7ff fce5 	bl	8018170 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80187a6:	68fb      	ldr	r3, [r7, #12]
 80187a8:	3301      	adds	r3, #1
 80187aa:	60fb      	str	r3, [r7, #12]
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	2b09      	cmp	r3, #9
 80187b0:	dddd      	ble.n	801876e <etharp_cleanup_netif+0xe>
    }
  }
}
 80187b2:	bf00      	nop
 80187b4:	bf00      	nop
 80187b6:	3710      	adds	r7, #16
 80187b8:	46bd      	mov	sp, r7
 80187ba:	bd80      	pop	{r7, pc}
 80187bc:	24004b3c 	.word	0x24004b3c

080187c0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80187c0:	b5b0      	push	{r4, r5, r7, lr}
 80187c2:	b08a      	sub	sp, #40	; 0x28
 80187c4:	af04      	add	r7, sp, #16
 80187c6:	6078      	str	r0, [r7, #4]
 80187c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80187ca:	683b      	ldr	r3, [r7, #0]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d107      	bne.n	80187e0 <etharp_input+0x20>
 80187d0:	4b3d      	ldr	r3, [pc, #244]	; (80188c8 <etharp_input+0x108>)
 80187d2:	f240 228a 	movw	r2, #650	; 0x28a
 80187d6:	493d      	ldr	r1, [pc, #244]	; (80188cc <etharp_input+0x10c>)
 80187d8:	483d      	ldr	r0, [pc, #244]	; (80188d0 <etharp_input+0x110>)
 80187da:	f002 facf 	bl	801ad7c <iprintf>
 80187de:	e06f      	b.n	80188c0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	685b      	ldr	r3, [r3, #4]
 80187e4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80187e6:	693b      	ldr	r3, [r7, #16]
 80187e8:	881b      	ldrh	r3, [r3, #0]
 80187ea:	b29b      	uxth	r3, r3
 80187ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80187f0:	d10c      	bne.n	801880c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80187f2:	693b      	ldr	r3, [r7, #16]
 80187f4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80187f6:	2b06      	cmp	r3, #6
 80187f8:	d108      	bne.n	801880c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80187fa:	693b      	ldr	r3, [r7, #16]
 80187fc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80187fe:	2b04      	cmp	r3, #4
 8018800:	d104      	bne.n	801880c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018802:	693b      	ldr	r3, [r7, #16]
 8018804:	885b      	ldrh	r3, [r3, #2]
 8018806:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018808:	2b08      	cmp	r3, #8
 801880a:	d003      	beq.n	8018814 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801880c:	6878      	ldr	r0, [r7, #4]
 801880e:	f7f8 fe81 	bl	8011514 <pbuf_free>
    return;
 8018812:	e055      	b.n	80188c0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018814:	693b      	ldr	r3, [r7, #16]
 8018816:	330e      	adds	r3, #14
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801881c:	693b      	ldr	r3, [r7, #16]
 801881e:	3318      	adds	r3, #24
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018824:	683b      	ldr	r3, [r7, #0]
 8018826:	3304      	adds	r3, #4
 8018828:	681b      	ldr	r3, [r3, #0]
 801882a:	2b00      	cmp	r3, #0
 801882c:	d102      	bne.n	8018834 <etharp_input+0x74>
    for_us = 0;
 801882e:	2300      	movs	r3, #0
 8018830:	75fb      	strb	r3, [r7, #23]
 8018832:	e009      	b.n	8018848 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018834:	68ba      	ldr	r2, [r7, #8]
 8018836:	683b      	ldr	r3, [r7, #0]
 8018838:	3304      	adds	r3, #4
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	429a      	cmp	r2, r3
 801883e:	bf0c      	ite	eq
 8018840:	2301      	moveq	r3, #1
 8018842:	2300      	movne	r3, #0
 8018844:	b2db      	uxtb	r3, r3
 8018846:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	f103 0208 	add.w	r2, r3, #8
 801884e:	7dfb      	ldrb	r3, [r7, #23]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d001      	beq.n	8018858 <etharp_input+0x98>
 8018854:	2301      	movs	r3, #1
 8018856:	e000      	b.n	801885a <etharp_input+0x9a>
 8018858:	2302      	movs	r3, #2
 801885a:	f107 010c 	add.w	r1, r7, #12
 801885e:	6838      	ldr	r0, [r7, #0]
 8018860:	f7ff fed8 	bl	8018614 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018864:	693b      	ldr	r3, [r7, #16]
 8018866:	88db      	ldrh	r3, [r3, #6]
 8018868:	b29b      	uxth	r3, r3
 801886a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801886e:	d003      	beq.n	8018878 <etharp_input+0xb8>
 8018870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018874:	d01e      	beq.n	80188b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018876:	e020      	b.n	80188ba <etharp_input+0xfa>
      if (for_us) {
 8018878:	7dfb      	ldrb	r3, [r7, #23]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d01c      	beq.n	80188b8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018884:	693b      	ldr	r3, [r7, #16]
 8018886:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801888a:	683b      	ldr	r3, [r7, #0]
 801888c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018890:	683b      	ldr	r3, [r7, #0]
 8018892:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018894:	693a      	ldr	r2, [r7, #16]
 8018896:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018898:	2102      	movs	r1, #2
 801889a:	9103      	str	r1, [sp, #12]
 801889c:	f107 010c 	add.w	r1, r7, #12
 80188a0:	9102      	str	r1, [sp, #8]
 80188a2:	9201      	str	r2, [sp, #4]
 80188a4:	9300      	str	r3, [sp, #0]
 80188a6:	462b      	mov	r3, r5
 80188a8:	4622      	mov	r2, r4
 80188aa:	4601      	mov	r1, r0
 80188ac:	6838      	ldr	r0, [r7, #0]
 80188ae:	f000 faeb 	bl	8018e88 <etharp_raw>
      break;
 80188b2:	e001      	b.n	80188b8 <etharp_input+0xf8>
      break;
 80188b4:	bf00      	nop
 80188b6:	e000      	b.n	80188ba <etharp_input+0xfa>
      break;
 80188b8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80188ba:	6878      	ldr	r0, [r7, #4]
 80188bc:	f7f8 fe2a 	bl	8011514 <pbuf_free>
}
 80188c0:	3718      	adds	r7, #24
 80188c2:	46bd      	mov	sp, r7
 80188c4:	bdb0      	pop	{r4, r5, r7, pc}
 80188c6:	bf00      	nop
 80188c8:	0801e234 	.word	0x0801e234
 80188cc:	0801e384 	.word	0x0801e384
 80188d0:	0801e2ac 	.word	0x0801e2ac

080188d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80188d4:	b580      	push	{r7, lr}
 80188d6:	b086      	sub	sp, #24
 80188d8:	af02      	add	r7, sp, #8
 80188da:	60f8      	str	r0, [r7, #12]
 80188dc:	60b9      	str	r1, [r7, #8]
 80188de:	4613      	mov	r3, r2
 80188e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80188e2:	79fa      	ldrb	r2, [r7, #7]
 80188e4:	4944      	ldr	r1, [pc, #272]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 80188e6:	4613      	mov	r3, r2
 80188e8:	005b      	lsls	r3, r3, #1
 80188ea:	4413      	add	r3, r2
 80188ec:	00db      	lsls	r3, r3, #3
 80188ee:	440b      	add	r3, r1
 80188f0:	3314      	adds	r3, #20
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	2b01      	cmp	r3, #1
 80188f6:	d806      	bhi.n	8018906 <etharp_output_to_arp_index+0x32>
 80188f8:	4b40      	ldr	r3, [pc, #256]	; (80189fc <etharp_output_to_arp_index+0x128>)
 80188fa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80188fe:	4940      	ldr	r1, [pc, #256]	; (8018a00 <etharp_output_to_arp_index+0x12c>)
 8018900:	4840      	ldr	r0, [pc, #256]	; (8018a04 <etharp_output_to_arp_index+0x130>)
 8018902:	f002 fa3b 	bl	801ad7c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018906:	79fa      	ldrb	r2, [r7, #7]
 8018908:	493b      	ldr	r1, [pc, #236]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 801890a:	4613      	mov	r3, r2
 801890c:	005b      	lsls	r3, r3, #1
 801890e:	4413      	add	r3, r2
 8018910:	00db      	lsls	r3, r3, #3
 8018912:	440b      	add	r3, r1
 8018914:	3314      	adds	r3, #20
 8018916:	781b      	ldrb	r3, [r3, #0]
 8018918:	2b02      	cmp	r3, #2
 801891a:	d153      	bne.n	80189c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801891c:	79fa      	ldrb	r2, [r7, #7]
 801891e:	4936      	ldr	r1, [pc, #216]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 8018920:	4613      	mov	r3, r2
 8018922:	005b      	lsls	r3, r3, #1
 8018924:	4413      	add	r3, r2
 8018926:	00db      	lsls	r3, r3, #3
 8018928:	440b      	add	r3, r1
 801892a:	3312      	adds	r3, #18
 801892c:	881b      	ldrh	r3, [r3, #0]
 801892e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018932:	d919      	bls.n	8018968 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018934:	79fa      	ldrb	r2, [r7, #7]
 8018936:	4613      	mov	r3, r2
 8018938:	005b      	lsls	r3, r3, #1
 801893a:	4413      	add	r3, r2
 801893c:	00db      	lsls	r3, r3, #3
 801893e:	4a2e      	ldr	r2, [pc, #184]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 8018940:	4413      	add	r3, r2
 8018942:	3304      	adds	r3, #4
 8018944:	4619      	mov	r1, r3
 8018946:	68f8      	ldr	r0, [r7, #12]
 8018948:	f000 fb4c 	bl	8018fe4 <etharp_request>
 801894c:	4603      	mov	r3, r0
 801894e:	2b00      	cmp	r3, #0
 8018950:	d138      	bne.n	80189c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018952:	79fa      	ldrb	r2, [r7, #7]
 8018954:	4928      	ldr	r1, [pc, #160]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 8018956:	4613      	mov	r3, r2
 8018958:	005b      	lsls	r3, r3, #1
 801895a:	4413      	add	r3, r2
 801895c:	00db      	lsls	r3, r3, #3
 801895e:	440b      	add	r3, r1
 8018960:	3314      	adds	r3, #20
 8018962:	2203      	movs	r2, #3
 8018964:	701a      	strb	r2, [r3, #0]
 8018966:	e02d      	b.n	80189c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018968:	79fa      	ldrb	r2, [r7, #7]
 801896a:	4923      	ldr	r1, [pc, #140]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 801896c:	4613      	mov	r3, r2
 801896e:	005b      	lsls	r3, r3, #1
 8018970:	4413      	add	r3, r2
 8018972:	00db      	lsls	r3, r3, #3
 8018974:	440b      	add	r3, r1
 8018976:	3312      	adds	r3, #18
 8018978:	881b      	ldrh	r3, [r3, #0]
 801897a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801897e:	d321      	bcc.n	80189c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018980:	79fa      	ldrb	r2, [r7, #7]
 8018982:	4613      	mov	r3, r2
 8018984:	005b      	lsls	r3, r3, #1
 8018986:	4413      	add	r3, r2
 8018988:	00db      	lsls	r3, r3, #3
 801898a:	4a1b      	ldr	r2, [pc, #108]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 801898c:	4413      	add	r3, r2
 801898e:	1d19      	adds	r1, r3, #4
 8018990:	79fa      	ldrb	r2, [r7, #7]
 8018992:	4613      	mov	r3, r2
 8018994:	005b      	lsls	r3, r3, #1
 8018996:	4413      	add	r3, r2
 8018998:	00db      	lsls	r3, r3, #3
 801899a:	3308      	adds	r3, #8
 801899c:	4a16      	ldr	r2, [pc, #88]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 801899e:	4413      	add	r3, r2
 80189a0:	3304      	adds	r3, #4
 80189a2:	461a      	mov	r2, r3
 80189a4:	68f8      	ldr	r0, [r7, #12]
 80189a6:	f000 fafb 	bl	8018fa0 <etharp_request_dst>
 80189aa:	4603      	mov	r3, r0
 80189ac:	2b00      	cmp	r3, #0
 80189ae:	d109      	bne.n	80189c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80189b0:	79fa      	ldrb	r2, [r7, #7]
 80189b2:	4911      	ldr	r1, [pc, #68]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 80189b4:	4613      	mov	r3, r2
 80189b6:	005b      	lsls	r3, r3, #1
 80189b8:	4413      	add	r3, r2
 80189ba:	00db      	lsls	r3, r3, #3
 80189bc:	440b      	add	r3, r1
 80189be:	3314      	adds	r3, #20
 80189c0:	2203      	movs	r2, #3
 80189c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80189ca:	79fa      	ldrb	r2, [r7, #7]
 80189cc:	4613      	mov	r3, r2
 80189ce:	005b      	lsls	r3, r3, #1
 80189d0:	4413      	add	r3, r2
 80189d2:	00db      	lsls	r3, r3, #3
 80189d4:	3308      	adds	r3, #8
 80189d6:	4a08      	ldr	r2, [pc, #32]	; (80189f8 <etharp_output_to_arp_index+0x124>)
 80189d8:	4413      	add	r3, r2
 80189da:	3304      	adds	r3, #4
 80189dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80189e0:	9200      	str	r2, [sp, #0]
 80189e2:	460a      	mov	r2, r1
 80189e4:	68b9      	ldr	r1, [r7, #8]
 80189e6:	68f8      	ldr	r0, [r7, #12]
 80189e8:	f001 fef2 	bl	801a7d0 <ethernet_output>
 80189ec:	4603      	mov	r3, r0
}
 80189ee:	4618      	mov	r0, r3
 80189f0:	3710      	adds	r7, #16
 80189f2:	46bd      	mov	sp, r7
 80189f4:	bd80      	pop	{r7, pc}
 80189f6:	bf00      	nop
 80189f8:	24004b3c 	.word	0x24004b3c
 80189fc:	0801e234 	.word	0x0801e234
 8018a00:	0801e3a4 	.word	0x0801e3a4
 8018a04:	0801e2ac 	.word	0x0801e2ac

08018a08 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b08a      	sub	sp, #40	; 0x28
 8018a0c:	af02      	add	r7, sp, #8
 8018a0e:	60f8      	str	r0, [r7, #12]
 8018a10:	60b9      	str	r1, [r7, #8]
 8018a12:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018a18:	68fb      	ldr	r3, [r7, #12]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d106      	bne.n	8018a2c <etharp_output+0x24>
 8018a1e:	4b73      	ldr	r3, [pc, #460]	; (8018bec <etharp_output+0x1e4>)
 8018a20:	f240 321e 	movw	r2, #798	; 0x31e
 8018a24:	4972      	ldr	r1, [pc, #456]	; (8018bf0 <etharp_output+0x1e8>)
 8018a26:	4873      	ldr	r0, [pc, #460]	; (8018bf4 <etharp_output+0x1ec>)
 8018a28:	f002 f9a8 	bl	801ad7c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d106      	bne.n	8018a40 <etharp_output+0x38>
 8018a32:	4b6e      	ldr	r3, [pc, #440]	; (8018bec <etharp_output+0x1e4>)
 8018a34:	f240 321f 	movw	r2, #799	; 0x31f
 8018a38:	496f      	ldr	r1, [pc, #444]	; (8018bf8 <etharp_output+0x1f0>)
 8018a3a:	486e      	ldr	r0, [pc, #440]	; (8018bf4 <etharp_output+0x1ec>)
 8018a3c:	f002 f99e 	bl	801ad7c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018a40:	687b      	ldr	r3, [r7, #4]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d106      	bne.n	8018a54 <etharp_output+0x4c>
 8018a46:	4b69      	ldr	r3, [pc, #420]	; (8018bec <etharp_output+0x1e4>)
 8018a48:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018a4c:	496b      	ldr	r1, [pc, #428]	; (8018bfc <etharp_output+0x1f4>)
 8018a4e:	4869      	ldr	r0, [pc, #420]	; (8018bf4 <etharp_output+0x1ec>)
 8018a50:	f002 f994 	bl	801ad7c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	681b      	ldr	r3, [r3, #0]
 8018a58:	68f9      	ldr	r1, [r7, #12]
 8018a5a:	4618      	mov	r0, r3
 8018a5c:	f000 ff1e 	bl	801989c <ip4_addr_isbroadcast_u32>
 8018a60:	4603      	mov	r3, r0
 8018a62:	2b00      	cmp	r3, #0
 8018a64:	d002      	beq.n	8018a6c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018a66:	4b66      	ldr	r3, [pc, #408]	; (8018c00 <etharp_output+0x1f8>)
 8018a68:	61fb      	str	r3, [r7, #28]
 8018a6a:	e0af      	b.n	8018bcc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018a6c:	687b      	ldr	r3, [r7, #4]
 8018a6e:	681b      	ldr	r3, [r3, #0]
 8018a70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018a74:	2be0      	cmp	r3, #224	; 0xe0
 8018a76:	d118      	bne.n	8018aaa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018a78:	2301      	movs	r3, #1
 8018a7a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018a80:	235e      	movs	r3, #94	; 0x5e
 8018a82:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018a84:	687b      	ldr	r3, [r7, #4]
 8018a86:	3301      	adds	r3, #1
 8018a88:	781b      	ldrb	r3, [r3, #0]
 8018a8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018a8e:	b2db      	uxtb	r3, r3
 8018a90:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	3302      	adds	r3, #2
 8018a96:	781b      	ldrb	r3, [r3, #0]
 8018a98:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	3303      	adds	r3, #3
 8018a9e:	781b      	ldrb	r3, [r3, #0]
 8018aa0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018aa2:	f107 0310 	add.w	r3, r7, #16
 8018aa6:	61fb      	str	r3, [r7, #28]
 8018aa8:	e090      	b.n	8018bcc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681a      	ldr	r2, [r3, #0]
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	3304      	adds	r3, #4
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	405a      	eors	r2, r3
 8018ab6:	68fb      	ldr	r3, [r7, #12]
 8018ab8:	3308      	adds	r3, #8
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	4013      	ands	r3, r2
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d012      	beq.n	8018ae8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018ac2:	687b      	ldr	r3, [r7, #4]
 8018ac4:	681b      	ldr	r3, [r3, #0]
 8018ac6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018ac8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018acc:	4293      	cmp	r3, r2
 8018ace:	d00b      	beq.n	8018ae8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018ad0:	68fb      	ldr	r3, [r7, #12]
 8018ad2:	330c      	adds	r3, #12
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d003      	beq.n	8018ae2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018ada:	68fb      	ldr	r3, [r7, #12]
 8018adc:	330c      	adds	r3, #12
 8018ade:	61bb      	str	r3, [r7, #24]
 8018ae0:	e002      	b.n	8018ae8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018ae2:	f06f 0303 	mvn.w	r3, #3
 8018ae6:	e07d      	b.n	8018be4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018ae8:	4b46      	ldr	r3, [pc, #280]	; (8018c04 <etharp_output+0x1fc>)
 8018aea:	781b      	ldrb	r3, [r3, #0]
 8018aec:	4619      	mov	r1, r3
 8018aee:	4a46      	ldr	r2, [pc, #280]	; (8018c08 <etharp_output+0x200>)
 8018af0:	460b      	mov	r3, r1
 8018af2:	005b      	lsls	r3, r3, #1
 8018af4:	440b      	add	r3, r1
 8018af6:	00db      	lsls	r3, r3, #3
 8018af8:	4413      	add	r3, r2
 8018afa:	3314      	adds	r3, #20
 8018afc:	781b      	ldrb	r3, [r3, #0]
 8018afe:	2b01      	cmp	r3, #1
 8018b00:	d925      	bls.n	8018b4e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018b02:	4b40      	ldr	r3, [pc, #256]	; (8018c04 <etharp_output+0x1fc>)
 8018b04:	781b      	ldrb	r3, [r3, #0]
 8018b06:	4619      	mov	r1, r3
 8018b08:	4a3f      	ldr	r2, [pc, #252]	; (8018c08 <etharp_output+0x200>)
 8018b0a:	460b      	mov	r3, r1
 8018b0c:	005b      	lsls	r3, r3, #1
 8018b0e:	440b      	add	r3, r1
 8018b10:	00db      	lsls	r3, r3, #3
 8018b12:	4413      	add	r3, r2
 8018b14:	3308      	adds	r3, #8
 8018b16:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018b18:	68fa      	ldr	r2, [r7, #12]
 8018b1a:	429a      	cmp	r2, r3
 8018b1c:	d117      	bne.n	8018b4e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	681a      	ldr	r2, [r3, #0]
 8018b22:	4b38      	ldr	r3, [pc, #224]	; (8018c04 <etharp_output+0x1fc>)
 8018b24:	781b      	ldrb	r3, [r3, #0]
 8018b26:	4618      	mov	r0, r3
 8018b28:	4937      	ldr	r1, [pc, #220]	; (8018c08 <etharp_output+0x200>)
 8018b2a:	4603      	mov	r3, r0
 8018b2c:	005b      	lsls	r3, r3, #1
 8018b2e:	4403      	add	r3, r0
 8018b30:	00db      	lsls	r3, r3, #3
 8018b32:	440b      	add	r3, r1
 8018b34:	3304      	adds	r3, #4
 8018b36:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018b38:	429a      	cmp	r2, r3
 8018b3a:	d108      	bne.n	8018b4e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018b3c:	4b31      	ldr	r3, [pc, #196]	; (8018c04 <etharp_output+0x1fc>)
 8018b3e:	781b      	ldrb	r3, [r3, #0]
 8018b40:	461a      	mov	r2, r3
 8018b42:	68b9      	ldr	r1, [r7, #8]
 8018b44:	68f8      	ldr	r0, [r7, #12]
 8018b46:	f7ff fec5 	bl	80188d4 <etharp_output_to_arp_index>
 8018b4a:	4603      	mov	r3, r0
 8018b4c:	e04a      	b.n	8018be4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b4e:	2300      	movs	r3, #0
 8018b50:	75fb      	strb	r3, [r7, #23]
 8018b52:	e031      	b.n	8018bb8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b54:	7dfa      	ldrb	r2, [r7, #23]
 8018b56:	492c      	ldr	r1, [pc, #176]	; (8018c08 <etharp_output+0x200>)
 8018b58:	4613      	mov	r3, r2
 8018b5a:	005b      	lsls	r3, r3, #1
 8018b5c:	4413      	add	r3, r2
 8018b5e:	00db      	lsls	r3, r3, #3
 8018b60:	440b      	add	r3, r1
 8018b62:	3314      	adds	r3, #20
 8018b64:	781b      	ldrb	r3, [r3, #0]
 8018b66:	2b01      	cmp	r3, #1
 8018b68:	d923      	bls.n	8018bb2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018b6a:	7dfa      	ldrb	r2, [r7, #23]
 8018b6c:	4926      	ldr	r1, [pc, #152]	; (8018c08 <etharp_output+0x200>)
 8018b6e:	4613      	mov	r3, r2
 8018b70:	005b      	lsls	r3, r3, #1
 8018b72:	4413      	add	r3, r2
 8018b74:	00db      	lsls	r3, r3, #3
 8018b76:	440b      	add	r3, r1
 8018b78:	3308      	adds	r3, #8
 8018b7a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b7c:	68fa      	ldr	r2, [r7, #12]
 8018b7e:	429a      	cmp	r2, r3
 8018b80:	d117      	bne.n	8018bb2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018b82:	69bb      	ldr	r3, [r7, #24]
 8018b84:	6819      	ldr	r1, [r3, #0]
 8018b86:	7dfa      	ldrb	r2, [r7, #23]
 8018b88:	481f      	ldr	r0, [pc, #124]	; (8018c08 <etharp_output+0x200>)
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	005b      	lsls	r3, r3, #1
 8018b8e:	4413      	add	r3, r2
 8018b90:	00db      	lsls	r3, r3, #3
 8018b92:	4403      	add	r3, r0
 8018b94:	3304      	adds	r3, #4
 8018b96:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018b98:	4299      	cmp	r1, r3
 8018b9a:	d10a      	bne.n	8018bb2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018b9c:	4a19      	ldr	r2, [pc, #100]	; (8018c04 <etharp_output+0x1fc>)
 8018b9e:	7dfb      	ldrb	r3, [r7, #23]
 8018ba0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018ba2:	7dfb      	ldrb	r3, [r7, #23]
 8018ba4:	461a      	mov	r2, r3
 8018ba6:	68b9      	ldr	r1, [r7, #8]
 8018ba8:	68f8      	ldr	r0, [r7, #12]
 8018baa:	f7ff fe93 	bl	80188d4 <etharp_output_to_arp_index>
 8018bae:	4603      	mov	r3, r0
 8018bb0:	e018      	b.n	8018be4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018bb2:	7dfb      	ldrb	r3, [r7, #23]
 8018bb4:	3301      	adds	r3, #1
 8018bb6:	75fb      	strb	r3, [r7, #23]
 8018bb8:	7dfb      	ldrb	r3, [r7, #23]
 8018bba:	2b09      	cmp	r3, #9
 8018bbc:	d9ca      	bls.n	8018b54 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018bbe:	68ba      	ldr	r2, [r7, #8]
 8018bc0:	69b9      	ldr	r1, [r7, #24]
 8018bc2:	68f8      	ldr	r0, [r7, #12]
 8018bc4:	f000 f822 	bl	8018c0c <etharp_query>
 8018bc8:	4603      	mov	r3, r0
 8018bca:	e00b      	b.n	8018be4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018bcc:	68fb      	ldr	r3, [r7, #12]
 8018bce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018bd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018bd6:	9300      	str	r3, [sp, #0]
 8018bd8:	69fb      	ldr	r3, [r7, #28]
 8018bda:	68b9      	ldr	r1, [r7, #8]
 8018bdc:	68f8      	ldr	r0, [r7, #12]
 8018bde:	f001 fdf7 	bl	801a7d0 <ethernet_output>
 8018be2:	4603      	mov	r3, r0
}
 8018be4:	4618      	mov	r0, r3
 8018be6:	3720      	adds	r7, #32
 8018be8:	46bd      	mov	sp, r7
 8018bea:	bd80      	pop	{r7, pc}
 8018bec:	0801e234 	.word	0x0801e234
 8018bf0:	0801e384 	.word	0x0801e384
 8018bf4:	0801e2ac 	.word	0x0801e2ac
 8018bf8:	0801e3d4 	.word	0x0801e3d4
 8018bfc:	0801e374 	.word	0x0801e374
 8018c00:	0801f33c 	.word	0x0801f33c
 8018c04:	24004c2c 	.word	0x24004c2c
 8018c08:	24004b3c 	.word	0x24004b3c

08018c0c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018c0c:	b580      	push	{r7, lr}
 8018c0e:	b08c      	sub	sp, #48	; 0x30
 8018c10:	af02      	add	r7, sp, #8
 8018c12:	60f8      	str	r0, [r7, #12]
 8018c14:	60b9      	str	r1, [r7, #8]
 8018c16:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	3326      	adds	r3, #38	; 0x26
 8018c1c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018c1e:	23ff      	movs	r3, #255	; 0xff
 8018c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018c24:	2300      	movs	r3, #0
 8018c26:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c28:	68bb      	ldr	r3, [r7, #8]
 8018c2a:	681b      	ldr	r3, [r3, #0]
 8018c2c:	68f9      	ldr	r1, [r7, #12]
 8018c2e:	4618      	mov	r0, r3
 8018c30:	f000 fe34 	bl	801989c <ip4_addr_isbroadcast_u32>
 8018c34:	4603      	mov	r3, r0
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	d10c      	bne.n	8018c54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c42:	2be0      	cmp	r3, #224	; 0xe0
 8018c44:	d006      	beq.n	8018c54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018c46:	68bb      	ldr	r3, [r7, #8]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d003      	beq.n	8018c54 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d102      	bne.n	8018c5a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018c54:	f06f 030f 	mvn.w	r3, #15
 8018c58:	e101      	b.n	8018e5e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018c5a:	68fa      	ldr	r2, [r7, #12]
 8018c5c:	2101      	movs	r1, #1
 8018c5e:	68b8      	ldr	r0, [r7, #8]
 8018c60:	f7ff fb60 	bl	8018324 <etharp_find_entry>
 8018c64:	4603      	mov	r3, r0
 8018c66:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018c68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018c6c:	2b00      	cmp	r3, #0
 8018c6e:	da02      	bge.n	8018c76 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018c70:	8a7b      	ldrh	r3, [r7, #18]
 8018c72:	b25b      	sxtb	r3, r3
 8018c74:	e0f3      	b.n	8018e5e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018c76:	8a7b      	ldrh	r3, [r7, #18]
 8018c78:	2b7e      	cmp	r3, #126	; 0x7e
 8018c7a:	d906      	bls.n	8018c8a <etharp_query+0x7e>
 8018c7c:	4b7a      	ldr	r3, [pc, #488]	; (8018e68 <etharp_query+0x25c>)
 8018c7e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018c82:	497a      	ldr	r1, [pc, #488]	; (8018e6c <etharp_query+0x260>)
 8018c84:	487a      	ldr	r0, [pc, #488]	; (8018e70 <etharp_query+0x264>)
 8018c86:	f002 f879 	bl	801ad7c <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018c8a:	8a7b      	ldrh	r3, [r7, #18]
 8018c8c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018c8e:	7c7a      	ldrb	r2, [r7, #17]
 8018c90:	4978      	ldr	r1, [pc, #480]	; (8018e74 <etharp_query+0x268>)
 8018c92:	4613      	mov	r3, r2
 8018c94:	005b      	lsls	r3, r3, #1
 8018c96:	4413      	add	r3, r2
 8018c98:	00db      	lsls	r3, r3, #3
 8018c9a:	440b      	add	r3, r1
 8018c9c:	3314      	adds	r3, #20
 8018c9e:	781b      	ldrb	r3, [r3, #0]
 8018ca0:	2b00      	cmp	r3, #0
 8018ca2:	d115      	bne.n	8018cd0 <etharp_query+0xc4>
    is_new_entry = 1;
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018ca8:	7c7a      	ldrb	r2, [r7, #17]
 8018caa:	4972      	ldr	r1, [pc, #456]	; (8018e74 <etharp_query+0x268>)
 8018cac:	4613      	mov	r3, r2
 8018cae:	005b      	lsls	r3, r3, #1
 8018cb0:	4413      	add	r3, r2
 8018cb2:	00db      	lsls	r3, r3, #3
 8018cb4:	440b      	add	r3, r1
 8018cb6:	3314      	adds	r3, #20
 8018cb8:	2201      	movs	r2, #1
 8018cba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018cbc:	7c7a      	ldrb	r2, [r7, #17]
 8018cbe:	496d      	ldr	r1, [pc, #436]	; (8018e74 <etharp_query+0x268>)
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	005b      	lsls	r3, r3, #1
 8018cc4:	4413      	add	r3, r2
 8018cc6:	00db      	lsls	r3, r3, #3
 8018cc8:	440b      	add	r3, r1
 8018cca:	3308      	adds	r3, #8
 8018ccc:	68fa      	ldr	r2, [r7, #12]
 8018cce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018cd0:	7c7a      	ldrb	r2, [r7, #17]
 8018cd2:	4968      	ldr	r1, [pc, #416]	; (8018e74 <etharp_query+0x268>)
 8018cd4:	4613      	mov	r3, r2
 8018cd6:	005b      	lsls	r3, r3, #1
 8018cd8:	4413      	add	r3, r2
 8018cda:	00db      	lsls	r3, r3, #3
 8018cdc:	440b      	add	r3, r1
 8018cde:	3314      	adds	r3, #20
 8018ce0:	781b      	ldrb	r3, [r3, #0]
 8018ce2:	2b01      	cmp	r3, #1
 8018ce4:	d011      	beq.n	8018d0a <etharp_query+0xfe>
 8018ce6:	7c7a      	ldrb	r2, [r7, #17]
 8018ce8:	4962      	ldr	r1, [pc, #392]	; (8018e74 <etharp_query+0x268>)
 8018cea:	4613      	mov	r3, r2
 8018cec:	005b      	lsls	r3, r3, #1
 8018cee:	4413      	add	r3, r2
 8018cf0:	00db      	lsls	r3, r3, #3
 8018cf2:	440b      	add	r3, r1
 8018cf4:	3314      	adds	r3, #20
 8018cf6:	781b      	ldrb	r3, [r3, #0]
 8018cf8:	2b01      	cmp	r3, #1
 8018cfa:	d806      	bhi.n	8018d0a <etharp_query+0xfe>
 8018cfc:	4b5a      	ldr	r3, [pc, #360]	; (8018e68 <etharp_query+0x25c>)
 8018cfe:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018d02:	495d      	ldr	r1, [pc, #372]	; (8018e78 <etharp_query+0x26c>)
 8018d04:	485a      	ldr	r0, [pc, #360]	; (8018e70 <etharp_query+0x264>)
 8018d06:	f002 f839 	bl	801ad7c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018d0a:	6a3b      	ldr	r3, [r7, #32]
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	d102      	bne.n	8018d16 <etharp_query+0x10a>
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	2b00      	cmp	r3, #0
 8018d14:	d10c      	bne.n	8018d30 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018d16:	68b9      	ldr	r1, [r7, #8]
 8018d18:	68f8      	ldr	r0, [r7, #12]
 8018d1a:	f000 f963 	bl	8018fe4 <etharp_request>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2b00      	cmp	r3, #0
 8018d28:	d102      	bne.n	8018d30 <etharp_query+0x124>
      return result;
 8018d2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018d2e:	e096      	b.n	8018e5e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d106      	bne.n	8018d44 <etharp_query+0x138>
 8018d36:	4b4c      	ldr	r3, [pc, #304]	; (8018e68 <etharp_query+0x25c>)
 8018d38:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018d3c:	494f      	ldr	r1, [pc, #316]	; (8018e7c <etharp_query+0x270>)
 8018d3e:	484c      	ldr	r0, [pc, #304]	; (8018e70 <etharp_query+0x264>)
 8018d40:	f002 f81c 	bl	801ad7c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018d44:	7c7a      	ldrb	r2, [r7, #17]
 8018d46:	494b      	ldr	r1, [pc, #300]	; (8018e74 <etharp_query+0x268>)
 8018d48:	4613      	mov	r3, r2
 8018d4a:	005b      	lsls	r3, r3, #1
 8018d4c:	4413      	add	r3, r2
 8018d4e:	00db      	lsls	r3, r3, #3
 8018d50:	440b      	add	r3, r1
 8018d52:	3314      	adds	r3, #20
 8018d54:	781b      	ldrb	r3, [r3, #0]
 8018d56:	2b01      	cmp	r3, #1
 8018d58:	d917      	bls.n	8018d8a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018d5a:	4a49      	ldr	r2, [pc, #292]	; (8018e80 <etharp_query+0x274>)
 8018d5c:	7c7b      	ldrb	r3, [r7, #17]
 8018d5e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018d60:	7c7a      	ldrb	r2, [r7, #17]
 8018d62:	4613      	mov	r3, r2
 8018d64:	005b      	lsls	r3, r3, #1
 8018d66:	4413      	add	r3, r2
 8018d68:	00db      	lsls	r3, r3, #3
 8018d6a:	3308      	adds	r3, #8
 8018d6c:	4a41      	ldr	r2, [pc, #260]	; (8018e74 <etharp_query+0x268>)
 8018d6e:	4413      	add	r3, r2
 8018d70:	3304      	adds	r3, #4
 8018d72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018d76:	9200      	str	r2, [sp, #0]
 8018d78:	697a      	ldr	r2, [r7, #20]
 8018d7a:	6879      	ldr	r1, [r7, #4]
 8018d7c:	68f8      	ldr	r0, [r7, #12]
 8018d7e:	f001 fd27 	bl	801a7d0 <ethernet_output>
 8018d82:	4603      	mov	r3, r0
 8018d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d88:	e067      	b.n	8018e5a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018d8a:	7c7a      	ldrb	r2, [r7, #17]
 8018d8c:	4939      	ldr	r1, [pc, #228]	; (8018e74 <etharp_query+0x268>)
 8018d8e:	4613      	mov	r3, r2
 8018d90:	005b      	lsls	r3, r3, #1
 8018d92:	4413      	add	r3, r2
 8018d94:	00db      	lsls	r3, r3, #3
 8018d96:	440b      	add	r3, r1
 8018d98:	3314      	adds	r3, #20
 8018d9a:	781b      	ldrb	r3, [r3, #0]
 8018d9c:	2b01      	cmp	r3, #1
 8018d9e:	d15c      	bne.n	8018e5a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018da0:	2300      	movs	r3, #0
 8018da2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018da8:	e01c      	b.n	8018de4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018daa:	69fb      	ldr	r3, [r7, #28]
 8018dac:	895a      	ldrh	r2, [r3, #10]
 8018dae:	69fb      	ldr	r3, [r7, #28]
 8018db0:	891b      	ldrh	r3, [r3, #8]
 8018db2:	429a      	cmp	r2, r3
 8018db4:	d10a      	bne.n	8018dcc <etharp_query+0x1c0>
 8018db6:	69fb      	ldr	r3, [r7, #28]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d006      	beq.n	8018dcc <etharp_query+0x1c0>
 8018dbe:	4b2a      	ldr	r3, [pc, #168]	; (8018e68 <etharp_query+0x25c>)
 8018dc0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018dc4:	492f      	ldr	r1, [pc, #188]	; (8018e84 <etharp_query+0x278>)
 8018dc6:	482a      	ldr	r0, [pc, #168]	; (8018e70 <etharp_query+0x264>)
 8018dc8:	f001 ffd8 	bl	801ad7c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018dcc:	69fb      	ldr	r3, [r7, #28]
 8018dce:	7b1b      	ldrb	r3, [r3, #12]
 8018dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	d002      	beq.n	8018dde <etharp_query+0x1d2>
        copy_needed = 1;
 8018dd8:	2301      	movs	r3, #1
 8018dda:	61bb      	str	r3, [r7, #24]
        break;
 8018ddc:	e005      	b.n	8018dea <etharp_query+0x1de>
      }
      p = p->next;
 8018dde:	69fb      	ldr	r3, [r7, #28]
 8018de0:	681b      	ldr	r3, [r3, #0]
 8018de2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018de4:	69fb      	ldr	r3, [r7, #28]
 8018de6:	2b00      	cmp	r3, #0
 8018de8:	d1df      	bne.n	8018daa <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018dea:	69bb      	ldr	r3, [r7, #24]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d007      	beq.n	8018e00 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018df0:	687a      	ldr	r2, [r7, #4]
 8018df2:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018df6:	200e      	movs	r0, #14
 8018df8:	f7f8 fe04 	bl	8011a04 <pbuf_clone>
 8018dfc:	61f8      	str	r0, [r7, #28]
 8018dfe:	e004      	b.n	8018e0a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018e04:	69f8      	ldr	r0, [r7, #28]
 8018e06:	f7f8 fc2b 	bl	8011660 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018e0a:	69fb      	ldr	r3, [r7, #28]
 8018e0c:	2b00      	cmp	r3, #0
 8018e0e:	d021      	beq.n	8018e54 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018e10:	7c7a      	ldrb	r2, [r7, #17]
 8018e12:	4918      	ldr	r1, [pc, #96]	; (8018e74 <etharp_query+0x268>)
 8018e14:	4613      	mov	r3, r2
 8018e16:	005b      	lsls	r3, r3, #1
 8018e18:	4413      	add	r3, r2
 8018e1a:	00db      	lsls	r3, r3, #3
 8018e1c:	440b      	add	r3, r1
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	2b00      	cmp	r3, #0
 8018e22:	d00a      	beq.n	8018e3a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018e24:	7c7a      	ldrb	r2, [r7, #17]
 8018e26:	4913      	ldr	r1, [pc, #76]	; (8018e74 <etharp_query+0x268>)
 8018e28:	4613      	mov	r3, r2
 8018e2a:	005b      	lsls	r3, r3, #1
 8018e2c:	4413      	add	r3, r2
 8018e2e:	00db      	lsls	r3, r3, #3
 8018e30:	440b      	add	r3, r1
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	4618      	mov	r0, r3
 8018e36:	f7f8 fb6d 	bl	8011514 <pbuf_free>
      }
      arp_table[i].q = p;
 8018e3a:	7c7a      	ldrb	r2, [r7, #17]
 8018e3c:	490d      	ldr	r1, [pc, #52]	; (8018e74 <etharp_query+0x268>)
 8018e3e:	4613      	mov	r3, r2
 8018e40:	005b      	lsls	r3, r3, #1
 8018e42:	4413      	add	r3, r2
 8018e44:	00db      	lsls	r3, r3, #3
 8018e46:	440b      	add	r3, r1
 8018e48:	69fa      	ldr	r2, [r7, #28]
 8018e4a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018e4c:	2300      	movs	r3, #0
 8018e4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e52:	e002      	b.n	8018e5a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018e54:	23ff      	movs	r3, #255	; 0xff
 8018e56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018e5a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018e5e:	4618      	mov	r0, r3
 8018e60:	3728      	adds	r7, #40	; 0x28
 8018e62:	46bd      	mov	sp, r7
 8018e64:	bd80      	pop	{r7, pc}
 8018e66:	bf00      	nop
 8018e68:	0801e234 	.word	0x0801e234
 8018e6c:	0801e3e0 	.word	0x0801e3e0
 8018e70:	0801e2ac 	.word	0x0801e2ac
 8018e74:	24004b3c 	.word	0x24004b3c
 8018e78:	0801e3f0 	.word	0x0801e3f0
 8018e7c:	0801e3d4 	.word	0x0801e3d4
 8018e80:	24004c2c 	.word	0x24004c2c
 8018e84:	0801e418 	.word	0x0801e418

08018e88 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b08a      	sub	sp, #40	; 0x28
 8018e8c:	af02      	add	r7, sp, #8
 8018e8e:	60f8      	str	r0, [r7, #12]
 8018e90:	60b9      	str	r1, [r7, #8]
 8018e92:	607a      	str	r2, [r7, #4]
 8018e94:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018e96:	2300      	movs	r3, #0
 8018e98:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d106      	bne.n	8018eae <etharp_raw+0x26>
 8018ea0:	4b3a      	ldr	r3, [pc, #232]	; (8018f8c <etharp_raw+0x104>)
 8018ea2:	f240 4257 	movw	r2, #1111	; 0x457
 8018ea6:	493a      	ldr	r1, [pc, #232]	; (8018f90 <etharp_raw+0x108>)
 8018ea8:	483a      	ldr	r0, [pc, #232]	; (8018f94 <etharp_raw+0x10c>)
 8018eaa:	f001 ff67 	bl	801ad7c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018eae:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018eb2:	211c      	movs	r1, #28
 8018eb4:	200e      	movs	r0, #14
 8018eb6:	f7f8 f849 	bl	8010f4c <pbuf_alloc>
 8018eba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018ebc:	69bb      	ldr	r3, [r7, #24]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d102      	bne.n	8018ec8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018ec2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ec6:	e05d      	b.n	8018f84 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018ec8:	69bb      	ldr	r3, [r7, #24]
 8018eca:	895b      	ldrh	r3, [r3, #10]
 8018ecc:	2b1b      	cmp	r3, #27
 8018ece:	d806      	bhi.n	8018ede <etharp_raw+0x56>
 8018ed0:	4b2e      	ldr	r3, [pc, #184]	; (8018f8c <etharp_raw+0x104>)
 8018ed2:	f240 4262 	movw	r2, #1122	; 0x462
 8018ed6:	4930      	ldr	r1, [pc, #192]	; (8018f98 <etharp_raw+0x110>)
 8018ed8:	482e      	ldr	r0, [pc, #184]	; (8018f94 <etharp_raw+0x10c>)
 8018eda:	f001 ff4f 	bl	801ad7c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018ede:	69bb      	ldr	r3, [r7, #24]
 8018ee0:	685b      	ldr	r3, [r3, #4]
 8018ee2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018ee4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018ee6:	4618      	mov	r0, r3
 8018ee8:	f7f6 fe6a 	bl	800fbc0 <lwip_htons>
 8018eec:	4603      	mov	r3, r0
 8018eee:	461a      	mov	r2, r3
 8018ef0:	697b      	ldr	r3, [r7, #20]
 8018ef2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018ef4:	68fb      	ldr	r3, [r7, #12]
 8018ef6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018efa:	2b06      	cmp	r3, #6
 8018efc:	d006      	beq.n	8018f0c <etharp_raw+0x84>
 8018efe:	4b23      	ldr	r3, [pc, #140]	; (8018f8c <etharp_raw+0x104>)
 8018f00:	f240 4269 	movw	r2, #1129	; 0x469
 8018f04:	4925      	ldr	r1, [pc, #148]	; (8018f9c <etharp_raw+0x114>)
 8018f06:	4823      	ldr	r0, [pc, #140]	; (8018f94 <etharp_raw+0x10c>)
 8018f08:	f001 ff38 	bl	801ad7c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018f0c:	697b      	ldr	r3, [r7, #20]
 8018f0e:	3308      	adds	r3, #8
 8018f10:	2206      	movs	r2, #6
 8018f12:	6839      	ldr	r1, [r7, #0]
 8018f14:	4618      	mov	r0, r3
 8018f16:	f001 fec0 	bl	801ac9a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018f1a:	697b      	ldr	r3, [r7, #20]
 8018f1c:	3312      	adds	r3, #18
 8018f1e:	2206      	movs	r2, #6
 8018f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018f22:	4618      	mov	r0, r3
 8018f24:	f001 feb9 	bl	801ac9a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018f28:	697b      	ldr	r3, [r7, #20]
 8018f2a:	330e      	adds	r3, #14
 8018f2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f2e:	6812      	ldr	r2, [r2, #0]
 8018f30:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018f32:	697b      	ldr	r3, [r7, #20]
 8018f34:	3318      	adds	r3, #24
 8018f36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f38:	6812      	ldr	r2, [r2, #0]
 8018f3a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018f3c:	697b      	ldr	r3, [r7, #20]
 8018f3e:	2200      	movs	r2, #0
 8018f40:	701a      	strb	r2, [r3, #0]
 8018f42:	2200      	movs	r2, #0
 8018f44:	f042 0201 	orr.w	r2, r2, #1
 8018f48:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018f4a:	697b      	ldr	r3, [r7, #20]
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	f042 0208 	orr.w	r2, r2, #8
 8018f52:	709a      	strb	r2, [r3, #2]
 8018f54:	2200      	movs	r2, #0
 8018f56:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018f58:	697b      	ldr	r3, [r7, #20]
 8018f5a:	2206      	movs	r2, #6
 8018f5c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018f5e:	697b      	ldr	r3, [r7, #20]
 8018f60:	2204      	movs	r2, #4
 8018f62:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018f64:	f640 0306 	movw	r3, #2054	; 0x806
 8018f68:	9300      	str	r3, [sp, #0]
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	68ba      	ldr	r2, [r7, #8]
 8018f6e:	69b9      	ldr	r1, [r7, #24]
 8018f70:	68f8      	ldr	r0, [r7, #12]
 8018f72:	f001 fc2d 	bl	801a7d0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018f76:	69b8      	ldr	r0, [r7, #24]
 8018f78:	f7f8 facc 	bl	8011514 <pbuf_free>
  p = NULL;
 8018f7c:	2300      	movs	r3, #0
 8018f7e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018f80:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018f84:	4618      	mov	r0, r3
 8018f86:	3720      	adds	r7, #32
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}
 8018f8c:	0801e234 	.word	0x0801e234
 8018f90:	0801e384 	.word	0x0801e384
 8018f94:	0801e2ac 	.word	0x0801e2ac
 8018f98:	0801e434 	.word	0x0801e434
 8018f9c:	0801e468 	.word	0x0801e468

08018fa0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018fa0:	b580      	push	{r7, lr}
 8018fa2:	b088      	sub	sp, #32
 8018fa4:	af04      	add	r7, sp, #16
 8018fa6:	60f8      	str	r0, [r7, #12]
 8018fa8:	60b9      	str	r1, [r7, #8]
 8018faa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018fb8:	68fb      	ldr	r3, [r7, #12]
 8018fba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018fbc:	2201      	movs	r2, #1
 8018fbe:	9203      	str	r2, [sp, #12]
 8018fc0:	68ba      	ldr	r2, [r7, #8]
 8018fc2:	9202      	str	r2, [sp, #8]
 8018fc4:	4a06      	ldr	r2, [pc, #24]	; (8018fe0 <etharp_request_dst+0x40>)
 8018fc6:	9201      	str	r2, [sp, #4]
 8018fc8:	9300      	str	r3, [sp, #0]
 8018fca:	4603      	mov	r3, r0
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	68f8      	ldr	r0, [r7, #12]
 8018fd0:	f7ff ff5a 	bl	8018e88 <etharp_raw>
 8018fd4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018fd6:	4618      	mov	r0, r3
 8018fd8:	3710      	adds	r7, #16
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}
 8018fde:	bf00      	nop
 8018fe0:	0801f344 	.word	0x0801f344

08018fe4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b082      	sub	sp, #8
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
 8018fec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018fee:	4a05      	ldr	r2, [pc, #20]	; (8019004 <etharp_request+0x20>)
 8018ff0:	6839      	ldr	r1, [r7, #0]
 8018ff2:	6878      	ldr	r0, [r7, #4]
 8018ff4:	f7ff ffd4 	bl	8018fa0 <etharp_request_dst>
 8018ff8:	4603      	mov	r3, r0
}
 8018ffa:	4618      	mov	r0, r3
 8018ffc:	3708      	adds	r7, #8
 8018ffe:	46bd      	mov	sp, r7
 8019000:	bd80      	pop	{r7, pc}
 8019002:	bf00      	nop
 8019004:	0801f33c 	.word	0x0801f33c

08019008 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019008:	b580      	push	{r7, lr}
 801900a:	b08e      	sub	sp, #56	; 0x38
 801900c:	af04      	add	r7, sp, #16
 801900e:	6078      	str	r0, [r7, #4]
 8019010:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019012:	4b87      	ldr	r3, [pc, #540]	; (8019230 <icmp_input+0x228>)
 8019014:	689b      	ldr	r3, [r3, #8]
 8019016:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801901a:	781b      	ldrb	r3, [r3, #0]
 801901c:	f003 030f 	and.w	r3, r3, #15
 8019020:	b2db      	uxtb	r3, r3
 8019022:	009b      	lsls	r3, r3, #2
 8019024:	b2db      	uxtb	r3, r3
 8019026:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019028:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801902a:	2b13      	cmp	r3, #19
 801902c:	f240 80e8 	bls.w	8019200 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	895b      	ldrh	r3, [r3, #10]
 8019034:	2b03      	cmp	r3, #3
 8019036:	f240 80e5 	bls.w	8019204 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801903a:	687b      	ldr	r3, [r7, #4]
 801903c:	685b      	ldr	r3, [r3, #4]
 801903e:	781b      	ldrb	r3, [r3, #0]
 8019040:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8019044:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019048:	2b00      	cmp	r3, #0
 801904a:	f000 80d2 	beq.w	80191f2 <icmp_input+0x1ea>
 801904e:	2b08      	cmp	r3, #8
 8019050:	f040 80d2 	bne.w	80191f8 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8019054:	4b77      	ldr	r3, [pc, #476]	; (8019234 <icmp_input+0x22c>)
 8019056:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019058:	4b75      	ldr	r3, [pc, #468]	; (8019230 <icmp_input+0x228>)
 801905a:	695b      	ldr	r3, [r3, #20]
 801905c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019060:	2be0      	cmp	r3, #224	; 0xe0
 8019062:	f000 80d6 	beq.w	8019212 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8019066:	4b72      	ldr	r3, [pc, #456]	; (8019230 <icmp_input+0x228>)
 8019068:	695b      	ldr	r3, [r3, #20]
 801906a:	4a71      	ldr	r2, [pc, #452]	; (8019230 <icmp_input+0x228>)
 801906c:	6812      	ldr	r2, [r2, #0]
 801906e:	4611      	mov	r1, r2
 8019070:	4618      	mov	r0, r3
 8019072:	f000 fc13 	bl	801989c <ip4_addr_isbroadcast_u32>
 8019076:	4603      	mov	r3, r0
 8019078:	2b00      	cmp	r3, #0
 801907a:	f040 80cc 	bne.w	8019216 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	891b      	ldrh	r3, [r3, #8]
 8019082:	2b07      	cmp	r3, #7
 8019084:	f240 80c0 	bls.w	8019208 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8019088:	6878      	ldr	r0, [r7, #4]
 801908a:	f7f6 fe36 	bl	800fcfa <inet_chksum_pbuf>
 801908e:	4603      	mov	r3, r0
 8019090:	2b00      	cmp	r3, #0
 8019092:	d003      	beq.n	801909c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8019094:	6878      	ldr	r0, [r7, #4]
 8019096:	f7f8 fa3d 	bl	8011514 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801909a:	e0c5      	b.n	8019228 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801909c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801909e:	330e      	adds	r3, #14
 80190a0:	4619      	mov	r1, r3
 80190a2:	6878      	ldr	r0, [r7, #4]
 80190a4:	f7f8 f9a0 	bl	80113e8 <pbuf_add_header>
 80190a8:	4603      	mov	r3, r0
 80190aa:	2b00      	cmp	r3, #0
 80190ac:	d04b      	beq.n	8019146 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80190ae:	687b      	ldr	r3, [r7, #4]
 80190b0:	891a      	ldrh	r2, [r3, #8]
 80190b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190b4:	4413      	add	r3, r2
 80190b6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	891b      	ldrh	r3, [r3, #8]
 80190bc:	8b7a      	ldrh	r2, [r7, #26]
 80190be:	429a      	cmp	r2, r3
 80190c0:	f0c0 80ab 	bcc.w	801921a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80190c4:	8b7b      	ldrh	r3, [r7, #26]
 80190c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190ca:	4619      	mov	r1, r3
 80190cc:	200e      	movs	r0, #14
 80190ce:	f7f7 ff3d 	bl	8010f4c <pbuf_alloc>
 80190d2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80190d4:	697b      	ldr	r3, [r7, #20]
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	f000 80a1 	beq.w	801921e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80190dc:	697b      	ldr	r3, [r7, #20]
 80190de:	895b      	ldrh	r3, [r3, #10]
 80190e0:	461a      	mov	r2, r3
 80190e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190e4:	3308      	adds	r3, #8
 80190e6:	429a      	cmp	r2, r3
 80190e8:	d203      	bcs.n	80190f2 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80190ea:	6978      	ldr	r0, [r7, #20]
 80190ec:	f7f8 fa12 	bl	8011514 <pbuf_free>
          goto icmperr;
 80190f0:	e096      	b.n	8019220 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	685b      	ldr	r3, [r3, #4]
 80190f6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80190f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80190fa:	4618      	mov	r0, r3
 80190fc:	f001 fdcd 	bl	801ac9a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019100:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019102:	4619      	mov	r1, r3
 8019104:	6978      	ldr	r0, [r7, #20]
 8019106:	f7f8 f97f 	bl	8011408 <pbuf_remove_header>
 801910a:	4603      	mov	r3, r0
 801910c:	2b00      	cmp	r3, #0
 801910e:	d009      	beq.n	8019124 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019110:	4b49      	ldr	r3, [pc, #292]	; (8019238 <icmp_input+0x230>)
 8019112:	22b6      	movs	r2, #182	; 0xb6
 8019114:	4949      	ldr	r1, [pc, #292]	; (801923c <icmp_input+0x234>)
 8019116:	484a      	ldr	r0, [pc, #296]	; (8019240 <icmp_input+0x238>)
 8019118:	f001 fe30 	bl	801ad7c <iprintf>
          pbuf_free(r);
 801911c:	6978      	ldr	r0, [r7, #20]
 801911e:	f7f8 f9f9 	bl	8011514 <pbuf_free>
          goto icmperr;
 8019122:	e07d      	b.n	8019220 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019124:	6879      	ldr	r1, [r7, #4]
 8019126:	6978      	ldr	r0, [r7, #20]
 8019128:	f7f8 fb28 	bl	801177c <pbuf_copy>
 801912c:	4603      	mov	r3, r0
 801912e:	2b00      	cmp	r3, #0
 8019130:	d003      	beq.n	801913a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019132:	6978      	ldr	r0, [r7, #20]
 8019134:	f7f8 f9ee 	bl	8011514 <pbuf_free>
          goto icmperr;
 8019138:	e072      	b.n	8019220 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f7f8 f9ea 	bl	8011514 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019140:	697b      	ldr	r3, [r7, #20]
 8019142:	607b      	str	r3, [r7, #4]
 8019144:	e00f      	b.n	8019166 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019146:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019148:	330e      	adds	r3, #14
 801914a:	4619      	mov	r1, r3
 801914c:	6878      	ldr	r0, [r7, #4]
 801914e:	f7f8 f95b 	bl	8011408 <pbuf_remove_header>
 8019152:	4603      	mov	r3, r0
 8019154:	2b00      	cmp	r3, #0
 8019156:	d006      	beq.n	8019166 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019158:	4b37      	ldr	r3, [pc, #220]	; (8019238 <icmp_input+0x230>)
 801915a:	22c7      	movs	r2, #199	; 0xc7
 801915c:	4939      	ldr	r1, [pc, #228]	; (8019244 <icmp_input+0x23c>)
 801915e:	4838      	ldr	r0, [pc, #224]	; (8019240 <icmp_input+0x238>)
 8019160:	f001 fe0c 	bl	801ad7c <iprintf>
          goto icmperr;
 8019164:	e05c      	b.n	8019220 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801916c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801916e:	4619      	mov	r1, r3
 8019170:	6878      	ldr	r0, [r7, #4]
 8019172:	f7f8 f939 	bl	80113e8 <pbuf_add_header>
 8019176:	4603      	mov	r3, r0
 8019178:	2b00      	cmp	r3, #0
 801917a:	d13c      	bne.n	80191f6 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	685b      	ldr	r3, [r3, #4]
 8019180:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019182:	69fb      	ldr	r3, [r7, #28]
 8019184:	681a      	ldr	r2, [r3, #0]
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801918a:	4b29      	ldr	r3, [pc, #164]	; (8019230 <icmp_input+0x228>)
 801918c:	691a      	ldr	r2, [r3, #16]
 801918e:	68fb      	ldr	r3, [r7, #12]
 8019190:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019192:	693b      	ldr	r3, [r7, #16]
 8019194:	2200      	movs	r2, #0
 8019196:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	885b      	ldrh	r3, [r3, #2]
 801919c:	b29b      	uxth	r3, r3
 801919e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80191a2:	4293      	cmp	r3, r2
 80191a4:	d907      	bls.n	80191b6 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 80191a6:	693b      	ldr	r3, [r7, #16]
 80191a8:	885b      	ldrh	r3, [r3, #2]
 80191aa:	b29b      	uxth	r3, r3
 80191ac:	3309      	adds	r3, #9
 80191ae:	b29a      	uxth	r2, r3
 80191b0:	693b      	ldr	r3, [r7, #16]
 80191b2:	805a      	strh	r2, [r3, #2]
 80191b4:	e006      	b.n	80191c4 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 80191b6:	693b      	ldr	r3, [r7, #16]
 80191b8:	885b      	ldrh	r3, [r3, #2]
 80191ba:	b29b      	uxth	r3, r3
 80191bc:	3308      	adds	r3, #8
 80191be:	b29a      	uxth	r2, r3
 80191c0:	693b      	ldr	r3, [r7, #16]
 80191c2:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80191c4:	68fb      	ldr	r3, [r7, #12]
 80191c6:	22ff      	movs	r2, #255	; 0xff
 80191c8:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80191ca:	68fb      	ldr	r3, [r7, #12]
 80191cc:	2200      	movs	r2, #0
 80191ce:	729a      	strb	r2, [r3, #10]
 80191d0:	2200      	movs	r2, #0
 80191d2:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80191d4:	683b      	ldr	r3, [r7, #0]
 80191d6:	9302      	str	r3, [sp, #8]
 80191d8:	2301      	movs	r3, #1
 80191da:	9301      	str	r3, [sp, #4]
 80191dc:	2300      	movs	r3, #0
 80191de:	9300      	str	r3, [sp, #0]
 80191e0:	23ff      	movs	r3, #255	; 0xff
 80191e2:	2200      	movs	r2, #0
 80191e4:	69f9      	ldr	r1, [r7, #28]
 80191e6:	6878      	ldr	r0, [r7, #4]
 80191e8:	f000 fa80 	bl	80196ec <ip4_output_if>
 80191ec:	4603      	mov	r3, r0
 80191ee:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80191f0:	e001      	b.n	80191f6 <icmp_input+0x1ee>
      break;
 80191f2:	bf00      	nop
 80191f4:	e000      	b.n	80191f8 <icmp_input+0x1f0>
      break;
 80191f6:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80191f8:	6878      	ldr	r0, [r7, #4]
 80191fa:	f7f8 f98b 	bl	8011514 <pbuf_free>
  return;
 80191fe:	e013      	b.n	8019228 <icmp_input+0x220>
    goto lenerr;
 8019200:	bf00      	nop
 8019202:	e002      	b.n	801920a <icmp_input+0x202>
    goto lenerr;
 8019204:	bf00      	nop
 8019206:	e000      	b.n	801920a <icmp_input+0x202>
        goto lenerr;
 8019208:	bf00      	nop
lenerr:
  pbuf_free(p);
 801920a:	6878      	ldr	r0, [r7, #4]
 801920c:	f7f8 f982 	bl	8011514 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019210:	e00a      	b.n	8019228 <icmp_input+0x220>
        goto icmperr;
 8019212:	bf00      	nop
 8019214:	e004      	b.n	8019220 <icmp_input+0x218>
        goto icmperr;
 8019216:	bf00      	nop
 8019218:	e002      	b.n	8019220 <icmp_input+0x218>
          goto icmperr;
 801921a:	bf00      	nop
 801921c:	e000      	b.n	8019220 <icmp_input+0x218>
          goto icmperr;
 801921e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019220:	6878      	ldr	r0, [r7, #4]
 8019222:	f7f8 f977 	bl	8011514 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019226:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019228:	3728      	adds	r7, #40	; 0x28
 801922a:	46bd      	mov	sp, r7
 801922c:	bd80      	pop	{r7, pc}
 801922e:	bf00      	nop
 8019230:	240051b0 	.word	0x240051b0
 8019234:	240051c4 	.word	0x240051c4
 8019238:	0801e4ac 	.word	0x0801e4ac
 801923c:	0801e4e4 	.word	0x0801e4e4
 8019240:	0801e51c 	.word	0x0801e51c
 8019244:	0801e544 	.word	0x0801e544

08019248 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019248:	b580      	push	{r7, lr}
 801924a:	b082      	sub	sp, #8
 801924c:	af00      	add	r7, sp, #0
 801924e:	6078      	str	r0, [r7, #4]
 8019250:	460b      	mov	r3, r1
 8019252:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019254:	78fb      	ldrb	r3, [r7, #3]
 8019256:	461a      	mov	r2, r3
 8019258:	2103      	movs	r1, #3
 801925a:	6878      	ldr	r0, [r7, #4]
 801925c:	f000 f814 	bl	8019288 <icmp_send_response>
}
 8019260:	bf00      	nop
 8019262:	3708      	adds	r7, #8
 8019264:	46bd      	mov	sp, r7
 8019266:	bd80      	pop	{r7, pc}

08019268 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019268:	b580      	push	{r7, lr}
 801926a:	b082      	sub	sp, #8
 801926c:	af00      	add	r7, sp, #0
 801926e:	6078      	str	r0, [r7, #4]
 8019270:	460b      	mov	r3, r1
 8019272:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019274:	78fb      	ldrb	r3, [r7, #3]
 8019276:	461a      	mov	r2, r3
 8019278:	210b      	movs	r1, #11
 801927a:	6878      	ldr	r0, [r7, #4]
 801927c:	f000 f804 	bl	8019288 <icmp_send_response>
}
 8019280:	bf00      	nop
 8019282:	3708      	adds	r7, #8
 8019284:	46bd      	mov	sp, r7
 8019286:	bd80      	pop	{r7, pc}

08019288 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	b08c      	sub	sp, #48	; 0x30
 801928c:	af04      	add	r7, sp, #16
 801928e:	6078      	str	r0, [r7, #4]
 8019290:	460b      	mov	r3, r1
 8019292:	70fb      	strb	r3, [r7, #3]
 8019294:	4613      	mov	r3, r2
 8019296:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019298:	f44f 7220 	mov.w	r2, #640	; 0x280
 801929c:	2124      	movs	r1, #36	; 0x24
 801929e:	2022      	movs	r0, #34	; 0x22
 80192a0:	f7f7 fe54 	bl	8010f4c <pbuf_alloc>
 80192a4:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80192a6:	69fb      	ldr	r3, [r7, #28]
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d056      	beq.n	801935a <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80192ac:	69fb      	ldr	r3, [r7, #28]
 80192ae:	895b      	ldrh	r3, [r3, #10]
 80192b0:	2b23      	cmp	r3, #35	; 0x23
 80192b2:	d806      	bhi.n	80192c2 <icmp_send_response+0x3a>
 80192b4:	4b2b      	ldr	r3, [pc, #172]	; (8019364 <icmp_send_response+0xdc>)
 80192b6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80192ba:	492b      	ldr	r1, [pc, #172]	; (8019368 <icmp_send_response+0xe0>)
 80192bc:	482b      	ldr	r0, [pc, #172]	; (801936c <icmp_send_response+0xe4>)
 80192be:	f001 fd5d 	bl	801ad7c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80192c2:	687b      	ldr	r3, [r7, #4]
 80192c4:	685b      	ldr	r3, [r3, #4]
 80192c6:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80192c8:	69fb      	ldr	r3, [r7, #28]
 80192ca:	685b      	ldr	r3, [r3, #4]
 80192cc:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80192ce:	697b      	ldr	r3, [r7, #20]
 80192d0:	78fa      	ldrb	r2, [r7, #3]
 80192d2:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80192d4:	697b      	ldr	r3, [r7, #20]
 80192d6:	78ba      	ldrb	r2, [r7, #2]
 80192d8:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80192da:	697b      	ldr	r3, [r7, #20]
 80192dc:	2200      	movs	r2, #0
 80192de:	711a      	strb	r2, [r3, #4]
 80192e0:	2200      	movs	r2, #0
 80192e2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80192e4:	697b      	ldr	r3, [r7, #20]
 80192e6:	2200      	movs	r2, #0
 80192e8:	719a      	strb	r2, [r3, #6]
 80192ea:	2200      	movs	r2, #0
 80192ec:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80192ee:	69fb      	ldr	r3, [r7, #28]
 80192f0:	685b      	ldr	r3, [r3, #4]
 80192f2:	f103 0008 	add.w	r0, r3, #8
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	685b      	ldr	r3, [r3, #4]
 80192fa:	221c      	movs	r2, #28
 80192fc:	4619      	mov	r1, r3
 80192fe:	f001 fccc 	bl	801ac9a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019302:	69bb      	ldr	r3, [r7, #24]
 8019304:	68db      	ldr	r3, [r3, #12]
 8019306:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019308:	f107 030c 	add.w	r3, r7, #12
 801930c:	4618      	mov	r0, r3
 801930e:	f000 f82f 	bl	8019370 <ip4_route>
 8019312:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019314:	693b      	ldr	r3, [r7, #16]
 8019316:	2b00      	cmp	r3, #0
 8019318:	d01b      	beq.n	8019352 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	2200      	movs	r2, #0
 801931e:	709a      	strb	r2, [r3, #2]
 8019320:	2200      	movs	r2, #0
 8019322:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019324:	69fb      	ldr	r3, [r7, #28]
 8019326:	895b      	ldrh	r3, [r3, #10]
 8019328:	4619      	mov	r1, r3
 801932a:	6978      	ldr	r0, [r7, #20]
 801932c:	f7f6 fcd3 	bl	800fcd6 <inet_chksum>
 8019330:	4603      	mov	r3, r0
 8019332:	461a      	mov	r2, r3
 8019334:	697b      	ldr	r3, [r7, #20]
 8019336:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019338:	f107 020c 	add.w	r2, r7, #12
 801933c:	693b      	ldr	r3, [r7, #16]
 801933e:	9302      	str	r3, [sp, #8]
 8019340:	2301      	movs	r3, #1
 8019342:	9301      	str	r3, [sp, #4]
 8019344:	2300      	movs	r3, #0
 8019346:	9300      	str	r3, [sp, #0]
 8019348:	23ff      	movs	r3, #255	; 0xff
 801934a:	2100      	movs	r1, #0
 801934c:	69f8      	ldr	r0, [r7, #28]
 801934e:	f000 f9cd 	bl	80196ec <ip4_output_if>
  }
  pbuf_free(q);
 8019352:	69f8      	ldr	r0, [r7, #28]
 8019354:	f7f8 f8de 	bl	8011514 <pbuf_free>
 8019358:	e000      	b.n	801935c <icmp_send_response+0xd4>
    return;
 801935a:	bf00      	nop
}
 801935c:	3720      	adds	r7, #32
 801935e:	46bd      	mov	sp, r7
 8019360:	bd80      	pop	{r7, pc}
 8019362:	bf00      	nop
 8019364:	0801e4ac 	.word	0x0801e4ac
 8019368:	0801e578 	.word	0x0801e578
 801936c:	0801e51c 	.word	0x0801e51c

08019370 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019370:	b480      	push	{r7}
 8019372:	b085      	sub	sp, #20
 8019374:	af00      	add	r7, sp, #0
 8019376:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019378:	4b33      	ldr	r3, [pc, #204]	; (8019448 <ip4_route+0xd8>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	60fb      	str	r3, [r7, #12]
 801937e:	e036      	b.n	80193ee <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019386:	f003 0301 	and.w	r3, r3, #1
 801938a:	b2db      	uxtb	r3, r3
 801938c:	2b00      	cmp	r3, #0
 801938e:	d02b      	beq.n	80193e8 <ip4_route+0x78>
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019396:	089b      	lsrs	r3, r3, #2
 8019398:	f003 0301 	and.w	r3, r3, #1
 801939c:	b2db      	uxtb	r3, r3
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d022      	beq.n	80193e8 <ip4_route+0x78>
 80193a2:	68fb      	ldr	r3, [r7, #12]
 80193a4:	3304      	adds	r3, #4
 80193a6:	681b      	ldr	r3, [r3, #0]
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d01d      	beq.n	80193e8 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	681a      	ldr	r2, [r3, #0]
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	3304      	adds	r3, #4
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	405a      	eors	r2, r3
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	3308      	adds	r3, #8
 80193bc:	681b      	ldr	r3, [r3, #0]
 80193be:	4013      	ands	r3, r2
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d101      	bne.n	80193c8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80193c4:	68fb      	ldr	r3, [r7, #12]
 80193c6:	e038      	b.n	801943a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193ce:	f003 0302 	and.w	r3, r3, #2
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d108      	bne.n	80193e8 <ip4_route+0x78>
 80193d6:	687b      	ldr	r3, [r7, #4]
 80193d8:	681a      	ldr	r2, [r3, #0]
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	330c      	adds	r3, #12
 80193de:	681b      	ldr	r3, [r3, #0]
 80193e0:	429a      	cmp	r2, r3
 80193e2:	d101      	bne.n	80193e8 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	e028      	b.n	801943a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80193e8:	68fb      	ldr	r3, [r7, #12]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	60fb      	str	r3, [r7, #12]
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d1c5      	bne.n	8019380 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80193f4:	4b15      	ldr	r3, [pc, #84]	; (801944c <ip4_route+0xdc>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d01a      	beq.n	8019432 <ip4_route+0xc2>
 80193fc:	4b13      	ldr	r3, [pc, #76]	; (801944c <ip4_route+0xdc>)
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019404:	f003 0301 	and.w	r3, r3, #1
 8019408:	2b00      	cmp	r3, #0
 801940a:	d012      	beq.n	8019432 <ip4_route+0xc2>
 801940c:	4b0f      	ldr	r3, [pc, #60]	; (801944c <ip4_route+0xdc>)
 801940e:	681b      	ldr	r3, [r3, #0]
 8019410:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019414:	f003 0304 	and.w	r3, r3, #4
 8019418:	2b00      	cmp	r3, #0
 801941a:	d00a      	beq.n	8019432 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801941c:	4b0b      	ldr	r3, [pc, #44]	; (801944c <ip4_route+0xdc>)
 801941e:	681b      	ldr	r3, [r3, #0]
 8019420:	3304      	adds	r3, #4
 8019422:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019424:	2b00      	cmp	r3, #0
 8019426:	d004      	beq.n	8019432 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019428:	687b      	ldr	r3, [r7, #4]
 801942a:	681b      	ldr	r3, [r3, #0]
 801942c:	b2db      	uxtb	r3, r3
 801942e:	2b7f      	cmp	r3, #127	; 0x7f
 8019430:	d101      	bne.n	8019436 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019432:	2300      	movs	r3, #0
 8019434:	e001      	b.n	801943a <ip4_route+0xca>
  }

  return netif_default;
 8019436:	4b05      	ldr	r3, [pc, #20]	; (801944c <ip4_route+0xdc>)
 8019438:	681b      	ldr	r3, [r3, #0]
}
 801943a:	4618      	mov	r0, r3
 801943c:	3714      	adds	r7, #20
 801943e:	46bd      	mov	sp, r7
 8019440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019444:	4770      	bx	lr
 8019446:	bf00      	nop
 8019448:	24008260 	.word	0x24008260
 801944c:	24008264 	.word	0x24008264

08019450 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b082      	sub	sp, #8
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801945e:	f003 0301 	and.w	r3, r3, #1
 8019462:	b2db      	uxtb	r3, r3
 8019464:	2b00      	cmp	r3, #0
 8019466:	d016      	beq.n	8019496 <ip4_input_accept+0x46>
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	3304      	adds	r3, #4
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d011      	beq.n	8019496 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019472:	4b0b      	ldr	r3, [pc, #44]	; (80194a0 <ip4_input_accept+0x50>)
 8019474:	695a      	ldr	r2, [r3, #20]
 8019476:	687b      	ldr	r3, [r7, #4]
 8019478:	3304      	adds	r3, #4
 801947a:	681b      	ldr	r3, [r3, #0]
 801947c:	429a      	cmp	r2, r3
 801947e:	d008      	beq.n	8019492 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019480:	4b07      	ldr	r3, [pc, #28]	; (80194a0 <ip4_input_accept+0x50>)
 8019482:	695b      	ldr	r3, [r3, #20]
 8019484:	6879      	ldr	r1, [r7, #4]
 8019486:	4618      	mov	r0, r3
 8019488:	f000 fa08 	bl	801989c <ip4_addr_isbroadcast_u32>
 801948c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801948e:	2b00      	cmp	r3, #0
 8019490:	d001      	beq.n	8019496 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019492:	2301      	movs	r3, #1
 8019494:	e000      	b.n	8019498 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019496:	2300      	movs	r3, #0
}
 8019498:	4618      	mov	r0, r3
 801949a:	3708      	adds	r7, #8
 801949c:	46bd      	mov	sp, r7
 801949e:	bd80      	pop	{r7, pc}
 80194a0:	240051b0 	.word	0x240051b0

080194a4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80194a4:	b580      	push	{r7, lr}
 80194a6:	b086      	sub	sp, #24
 80194a8:	af00      	add	r7, sp, #0
 80194aa:	6078      	str	r0, [r7, #4]
 80194ac:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	685b      	ldr	r3, [r3, #4]
 80194b2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80194b4:	697b      	ldr	r3, [r7, #20]
 80194b6:	781b      	ldrb	r3, [r3, #0]
 80194b8:	091b      	lsrs	r3, r3, #4
 80194ba:	b2db      	uxtb	r3, r3
 80194bc:	2b04      	cmp	r3, #4
 80194be:	d004      	beq.n	80194ca <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80194c0:	6878      	ldr	r0, [r7, #4]
 80194c2:	f7f8 f827 	bl	8011514 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80194c6:	2300      	movs	r3, #0
 80194c8:	e107      	b.n	80196da <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80194ca:	697b      	ldr	r3, [r7, #20]
 80194cc:	781b      	ldrb	r3, [r3, #0]
 80194ce:	f003 030f 	and.w	r3, r3, #15
 80194d2:	b2db      	uxtb	r3, r3
 80194d4:	009b      	lsls	r3, r3, #2
 80194d6:	b2db      	uxtb	r3, r3
 80194d8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80194da:	697b      	ldr	r3, [r7, #20]
 80194dc:	885b      	ldrh	r3, [r3, #2]
 80194de:	b29b      	uxth	r3, r3
 80194e0:	4618      	mov	r0, r3
 80194e2:	f7f6 fb6d 	bl	800fbc0 <lwip_htons>
 80194e6:	4603      	mov	r3, r0
 80194e8:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	891b      	ldrh	r3, [r3, #8]
 80194ee:	89ba      	ldrh	r2, [r7, #12]
 80194f0:	429a      	cmp	r2, r3
 80194f2:	d204      	bcs.n	80194fe <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80194f4:	89bb      	ldrh	r3, [r7, #12]
 80194f6:	4619      	mov	r1, r3
 80194f8:	6878      	ldr	r0, [r7, #4]
 80194fa:	f7f7 fe85 	bl	8011208 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	895b      	ldrh	r3, [r3, #10]
 8019502:	89fa      	ldrh	r2, [r7, #14]
 8019504:	429a      	cmp	r2, r3
 8019506:	d807      	bhi.n	8019518 <ip4_input+0x74>
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	891b      	ldrh	r3, [r3, #8]
 801950c:	89ba      	ldrh	r2, [r7, #12]
 801950e:	429a      	cmp	r2, r3
 8019510:	d802      	bhi.n	8019518 <ip4_input+0x74>
 8019512:	89fb      	ldrh	r3, [r7, #14]
 8019514:	2b13      	cmp	r3, #19
 8019516:	d804      	bhi.n	8019522 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019518:	6878      	ldr	r0, [r7, #4]
 801951a:	f7f7 fffb 	bl	8011514 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801951e:	2300      	movs	r3, #0
 8019520:	e0db      	b.n	80196da <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019522:	697b      	ldr	r3, [r7, #20]
 8019524:	691b      	ldr	r3, [r3, #16]
 8019526:	4a6f      	ldr	r2, [pc, #444]	; (80196e4 <ip4_input+0x240>)
 8019528:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801952a:	697b      	ldr	r3, [r7, #20]
 801952c:	68db      	ldr	r3, [r3, #12]
 801952e:	4a6d      	ldr	r2, [pc, #436]	; (80196e4 <ip4_input+0x240>)
 8019530:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019532:	4b6c      	ldr	r3, [pc, #432]	; (80196e4 <ip4_input+0x240>)
 8019534:	695b      	ldr	r3, [r3, #20]
 8019536:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801953a:	2be0      	cmp	r3, #224	; 0xe0
 801953c:	d112      	bne.n	8019564 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801953e:	683b      	ldr	r3, [r7, #0]
 8019540:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019544:	f003 0301 	and.w	r3, r3, #1
 8019548:	b2db      	uxtb	r3, r3
 801954a:	2b00      	cmp	r3, #0
 801954c:	d007      	beq.n	801955e <ip4_input+0xba>
 801954e:	683b      	ldr	r3, [r7, #0]
 8019550:	3304      	adds	r3, #4
 8019552:	681b      	ldr	r3, [r3, #0]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d002      	beq.n	801955e <ip4_input+0xba>
      netif = inp;
 8019558:	683b      	ldr	r3, [r7, #0]
 801955a:	613b      	str	r3, [r7, #16]
 801955c:	e02a      	b.n	80195b4 <ip4_input+0x110>
    } else {
      netif = NULL;
 801955e:	2300      	movs	r3, #0
 8019560:	613b      	str	r3, [r7, #16]
 8019562:	e027      	b.n	80195b4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019564:	6838      	ldr	r0, [r7, #0]
 8019566:	f7ff ff73 	bl	8019450 <ip4_input_accept>
 801956a:	4603      	mov	r3, r0
 801956c:	2b00      	cmp	r3, #0
 801956e:	d002      	beq.n	8019576 <ip4_input+0xd2>
      netif = inp;
 8019570:	683b      	ldr	r3, [r7, #0]
 8019572:	613b      	str	r3, [r7, #16]
 8019574:	e01e      	b.n	80195b4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019576:	2300      	movs	r3, #0
 8019578:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801957a:	4b5a      	ldr	r3, [pc, #360]	; (80196e4 <ip4_input+0x240>)
 801957c:	695b      	ldr	r3, [r3, #20]
 801957e:	b2db      	uxtb	r3, r3
 8019580:	2b7f      	cmp	r3, #127	; 0x7f
 8019582:	d017      	beq.n	80195b4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019584:	4b58      	ldr	r3, [pc, #352]	; (80196e8 <ip4_input+0x244>)
 8019586:	681b      	ldr	r3, [r3, #0]
 8019588:	613b      	str	r3, [r7, #16]
 801958a:	e00e      	b.n	80195aa <ip4_input+0x106>
          if (netif == inp) {
 801958c:	693a      	ldr	r2, [r7, #16]
 801958e:	683b      	ldr	r3, [r7, #0]
 8019590:	429a      	cmp	r2, r3
 8019592:	d006      	beq.n	80195a2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019594:	6938      	ldr	r0, [r7, #16]
 8019596:	f7ff ff5b 	bl	8019450 <ip4_input_accept>
 801959a:	4603      	mov	r3, r0
 801959c:	2b00      	cmp	r3, #0
 801959e:	d108      	bne.n	80195b2 <ip4_input+0x10e>
 80195a0:	e000      	b.n	80195a4 <ip4_input+0x100>
            continue;
 80195a2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80195a4:	693b      	ldr	r3, [r7, #16]
 80195a6:	681b      	ldr	r3, [r3, #0]
 80195a8:	613b      	str	r3, [r7, #16]
 80195aa:	693b      	ldr	r3, [r7, #16]
 80195ac:	2b00      	cmp	r3, #0
 80195ae:	d1ed      	bne.n	801958c <ip4_input+0xe8>
 80195b0:	e000      	b.n	80195b4 <ip4_input+0x110>
            break;
 80195b2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80195b4:	4b4b      	ldr	r3, [pc, #300]	; (80196e4 <ip4_input+0x240>)
 80195b6:	691b      	ldr	r3, [r3, #16]
 80195b8:	6839      	ldr	r1, [r7, #0]
 80195ba:	4618      	mov	r0, r3
 80195bc:	f000 f96e 	bl	801989c <ip4_addr_isbroadcast_u32>
 80195c0:	4603      	mov	r3, r0
 80195c2:	2b00      	cmp	r3, #0
 80195c4:	d105      	bne.n	80195d2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80195c6:	4b47      	ldr	r3, [pc, #284]	; (80196e4 <ip4_input+0x240>)
 80195c8:	691b      	ldr	r3, [r3, #16]
 80195ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80195ce:	2be0      	cmp	r3, #224	; 0xe0
 80195d0:	d104      	bne.n	80195dc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80195d2:	6878      	ldr	r0, [r7, #4]
 80195d4:	f7f7 ff9e 	bl	8011514 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80195d8:	2300      	movs	r3, #0
 80195da:	e07e      	b.n	80196da <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80195dc:	693b      	ldr	r3, [r7, #16]
 80195de:	2b00      	cmp	r3, #0
 80195e0:	d104      	bne.n	80195ec <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80195e2:	6878      	ldr	r0, [r7, #4]
 80195e4:	f7f7 ff96 	bl	8011514 <pbuf_free>
    return ERR_OK;
 80195e8:	2300      	movs	r3, #0
 80195ea:	e076      	b.n	80196da <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80195ec:	697b      	ldr	r3, [r7, #20]
 80195ee:	88db      	ldrh	r3, [r3, #6]
 80195f0:	b29b      	uxth	r3, r3
 80195f2:	461a      	mov	r2, r3
 80195f4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80195f8:	4013      	ands	r3, r2
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d00b      	beq.n	8019616 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80195fe:	6878      	ldr	r0, [r7, #4]
 8019600:	f000 fd24 	bl	801a04c <ip4_reass>
 8019604:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d101      	bne.n	8019610 <ip4_input+0x16c>
      return ERR_OK;
 801960c:	2300      	movs	r3, #0
 801960e:	e064      	b.n	80196da <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	685b      	ldr	r3, [r3, #4]
 8019614:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019616:	4a33      	ldr	r2, [pc, #204]	; (80196e4 <ip4_input+0x240>)
 8019618:	693b      	ldr	r3, [r7, #16]
 801961a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801961c:	4a31      	ldr	r2, [pc, #196]	; (80196e4 <ip4_input+0x240>)
 801961e:	683b      	ldr	r3, [r7, #0]
 8019620:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019622:	4a30      	ldr	r2, [pc, #192]	; (80196e4 <ip4_input+0x240>)
 8019624:	697b      	ldr	r3, [r7, #20]
 8019626:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019628:	697b      	ldr	r3, [r7, #20]
 801962a:	781b      	ldrb	r3, [r3, #0]
 801962c:	f003 030f 	and.w	r3, r3, #15
 8019630:	b2db      	uxtb	r3, r3
 8019632:	009b      	lsls	r3, r3, #2
 8019634:	b2db      	uxtb	r3, r3
 8019636:	b29a      	uxth	r2, r3
 8019638:	4b2a      	ldr	r3, [pc, #168]	; (80196e4 <ip4_input+0x240>)
 801963a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801963c:	89fb      	ldrh	r3, [r7, #14]
 801963e:	4619      	mov	r1, r3
 8019640:	6878      	ldr	r0, [r7, #4]
 8019642:	f7f7 fee1 	bl	8011408 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019646:	697b      	ldr	r3, [r7, #20]
 8019648:	7a5b      	ldrb	r3, [r3, #9]
 801964a:	2b11      	cmp	r3, #17
 801964c:	d006      	beq.n	801965c <ip4_input+0x1b8>
 801964e:	2b11      	cmp	r3, #17
 8019650:	dc13      	bgt.n	801967a <ip4_input+0x1d6>
 8019652:	2b01      	cmp	r3, #1
 8019654:	d00c      	beq.n	8019670 <ip4_input+0x1cc>
 8019656:	2b06      	cmp	r3, #6
 8019658:	d005      	beq.n	8019666 <ip4_input+0x1c2>
 801965a:	e00e      	b.n	801967a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801965c:	6839      	ldr	r1, [r7, #0]
 801965e:	6878      	ldr	r0, [r7, #4]
 8019660:	f7fe fc42 	bl	8017ee8 <udp_input>
        break;
 8019664:	e026      	b.n	80196b4 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019666:	6839      	ldr	r1, [r7, #0]
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7fa f837 	bl	80136dc <tcp_input>
        break;
 801966e:	e021      	b.n	80196b4 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019670:	6839      	ldr	r1, [r7, #0]
 8019672:	6878      	ldr	r0, [r7, #4]
 8019674:	f7ff fcc8 	bl	8019008 <icmp_input>
        break;
 8019678:	e01c      	b.n	80196b4 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801967a:	4b1a      	ldr	r3, [pc, #104]	; (80196e4 <ip4_input+0x240>)
 801967c:	695b      	ldr	r3, [r3, #20]
 801967e:	6939      	ldr	r1, [r7, #16]
 8019680:	4618      	mov	r0, r3
 8019682:	f000 f90b 	bl	801989c <ip4_addr_isbroadcast_u32>
 8019686:	4603      	mov	r3, r0
 8019688:	2b00      	cmp	r3, #0
 801968a:	d10f      	bne.n	80196ac <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801968c:	4b15      	ldr	r3, [pc, #84]	; (80196e4 <ip4_input+0x240>)
 801968e:	695b      	ldr	r3, [r3, #20]
 8019690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019694:	2be0      	cmp	r3, #224	; 0xe0
 8019696:	d009      	beq.n	80196ac <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019698:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801969c:	4619      	mov	r1, r3
 801969e:	6878      	ldr	r0, [r7, #4]
 80196a0:	f7f7 ff25 	bl	80114ee <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80196a4:	2102      	movs	r1, #2
 80196a6:	6878      	ldr	r0, [r7, #4]
 80196a8:	f7ff fdce 	bl	8019248 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80196ac:	6878      	ldr	r0, [r7, #4]
 80196ae:	f7f7 ff31 	bl	8011514 <pbuf_free>
        break;
 80196b2:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80196b4:	4b0b      	ldr	r3, [pc, #44]	; (80196e4 <ip4_input+0x240>)
 80196b6:	2200      	movs	r2, #0
 80196b8:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80196ba:	4b0a      	ldr	r3, [pc, #40]	; (80196e4 <ip4_input+0x240>)
 80196bc:	2200      	movs	r2, #0
 80196be:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80196c0:	4b08      	ldr	r3, [pc, #32]	; (80196e4 <ip4_input+0x240>)
 80196c2:	2200      	movs	r2, #0
 80196c4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80196c6:	4b07      	ldr	r3, [pc, #28]	; (80196e4 <ip4_input+0x240>)
 80196c8:	2200      	movs	r2, #0
 80196ca:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80196cc:	4b05      	ldr	r3, [pc, #20]	; (80196e4 <ip4_input+0x240>)
 80196ce:	2200      	movs	r2, #0
 80196d0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80196d2:	4b04      	ldr	r3, [pc, #16]	; (80196e4 <ip4_input+0x240>)
 80196d4:	2200      	movs	r2, #0
 80196d6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80196d8:	2300      	movs	r3, #0
}
 80196da:	4618      	mov	r0, r3
 80196dc:	3718      	adds	r7, #24
 80196de:	46bd      	mov	sp, r7
 80196e0:	bd80      	pop	{r7, pc}
 80196e2:	bf00      	nop
 80196e4:	240051b0 	.word	0x240051b0
 80196e8:	24008260 	.word	0x24008260

080196ec <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80196ec:	b580      	push	{r7, lr}
 80196ee:	b08a      	sub	sp, #40	; 0x28
 80196f0:	af04      	add	r7, sp, #16
 80196f2:	60f8      	str	r0, [r7, #12]
 80196f4:	60b9      	str	r1, [r7, #8]
 80196f6:	607a      	str	r2, [r7, #4]
 80196f8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80196fa:	68bb      	ldr	r3, [r7, #8]
 80196fc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80196fe:	687b      	ldr	r3, [r7, #4]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d009      	beq.n	8019718 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8019704:	68bb      	ldr	r3, [r7, #8]
 8019706:	2b00      	cmp	r3, #0
 8019708:	d003      	beq.n	8019712 <ip4_output_if+0x26>
 801970a:	68bb      	ldr	r3, [r7, #8]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	2b00      	cmp	r3, #0
 8019710:	d102      	bne.n	8019718 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8019712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019714:	3304      	adds	r3, #4
 8019716:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8019718:	78fa      	ldrb	r2, [r7, #3]
 801971a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801971c:	9302      	str	r3, [sp, #8]
 801971e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019722:	9301      	str	r3, [sp, #4]
 8019724:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019728:	9300      	str	r3, [sp, #0]
 801972a:	4613      	mov	r3, r2
 801972c:	687a      	ldr	r2, [r7, #4]
 801972e:	6979      	ldr	r1, [r7, #20]
 8019730:	68f8      	ldr	r0, [r7, #12]
 8019732:	f000 f805 	bl	8019740 <ip4_output_if_src>
 8019736:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019738:	4618      	mov	r0, r3
 801973a:	3718      	adds	r7, #24
 801973c:	46bd      	mov	sp, r7
 801973e:	bd80      	pop	{r7, pc}

08019740 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019740:	b580      	push	{r7, lr}
 8019742:	b088      	sub	sp, #32
 8019744:	af00      	add	r7, sp, #0
 8019746:	60f8      	str	r0, [r7, #12]
 8019748:	60b9      	str	r1, [r7, #8]
 801974a:	607a      	str	r2, [r7, #4]
 801974c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801974e:	68fb      	ldr	r3, [r7, #12]
 8019750:	7b9b      	ldrb	r3, [r3, #14]
 8019752:	2b01      	cmp	r3, #1
 8019754:	d006      	beq.n	8019764 <ip4_output_if_src+0x24>
 8019756:	4b4b      	ldr	r3, [pc, #300]	; (8019884 <ip4_output_if_src+0x144>)
 8019758:	f44f 7255 	mov.w	r2, #852	; 0x354
 801975c:	494a      	ldr	r1, [pc, #296]	; (8019888 <ip4_output_if_src+0x148>)
 801975e:	484b      	ldr	r0, [pc, #300]	; (801988c <ip4_output_if_src+0x14c>)
 8019760:	f001 fb0c 	bl	801ad7c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	2b00      	cmp	r3, #0
 8019768:	d060      	beq.n	801982c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801976a:	2314      	movs	r3, #20
 801976c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801976e:	2114      	movs	r1, #20
 8019770:	68f8      	ldr	r0, [r7, #12]
 8019772:	f7f7 fe39 	bl	80113e8 <pbuf_add_header>
 8019776:	4603      	mov	r3, r0
 8019778:	2b00      	cmp	r3, #0
 801977a:	d002      	beq.n	8019782 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801977c:	f06f 0301 	mvn.w	r3, #1
 8019780:	e07c      	b.n	801987c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8019782:	68fb      	ldr	r3, [r7, #12]
 8019784:	685b      	ldr	r3, [r3, #4]
 8019786:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019788:	68fb      	ldr	r3, [r7, #12]
 801978a:	895b      	ldrh	r3, [r3, #10]
 801978c:	2b13      	cmp	r3, #19
 801978e:	d806      	bhi.n	801979e <ip4_output_if_src+0x5e>
 8019790:	4b3c      	ldr	r3, [pc, #240]	; (8019884 <ip4_output_if_src+0x144>)
 8019792:	f44f 7262 	mov.w	r2, #904	; 0x388
 8019796:	493e      	ldr	r1, [pc, #248]	; (8019890 <ip4_output_if_src+0x150>)
 8019798:	483c      	ldr	r0, [pc, #240]	; (801988c <ip4_output_if_src+0x14c>)
 801979a:	f001 faef 	bl	801ad7c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801979e:	69fb      	ldr	r3, [r7, #28]
 80197a0:	78fa      	ldrb	r2, [r7, #3]
 80197a2:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80197a4:	69fb      	ldr	r3, [r7, #28]
 80197a6:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80197aa:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	681a      	ldr	r2, [r3, #0]
 80197b0:	69fb      	ldr	r3, [r7, #28]
 80197b2:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80197b4:	8b7b      	ldrh	r3, [r7, #26]
 80197b6:	089b      	lsrs	r3, r3, #2
 80197b8:	b29b      	uxth	r3, r3
 80197ba:	b2db      	uxtb	r3, r3
 80197bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80197c0:	b2da      	uxtb	r2, r3
 80197c2:	69fb      	ldr	r3, [r7, #28]
 80197c4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80197c6:	69fb      	ldr	r3, [r7, #28]
 80197c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80197cc:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80197ce:	68fb      	ldr	r3, [r7, #12]
 80197d0:	891b      	ldrh	r3, [r3, #8]
 80197d2:	4618      	mov	r0, r3
 80197d4:	f7f6 f9f4 	bl	800fbc0 <lwip_htons>
 80197d8:	4603      	mov	r3, r0
 80197da:	461a      	mov	r2, r3
 80197dc:	69fb      	ldr	r3, [r7, #28]
 80197de:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80197e0:	69fb      	ldr	r3, [r7, #28]
 80197e2:	2200      	movs	r2, #0
 80197e4:	719a      	strb	r2, [r3, #6]
 80197e6:	2200      	movs	r2, #0
 80197e8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80197ea:	4b2a      	ldr	r3, [pc, #168]	; (8019894 <ip4_output_if_src+0x154>)
 80197ec:	881b      	ldrh	r3, [r3, #0]
 80197ee:	4618      	mov	r0, r3
 80197f0:	f7f6 f9e6 	bl	800fbc0 <lwip_htons>
 80197f4:	4603      	mov	r3, r0
 80197f6:	461a      	mov	r2, r3
 80197f8:	69fb      	ldr	r3, [r7, #28]
 80197fa:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80197fc:	4b25      	ldr	r3, [pc, #148]	; (8019894 <ip4_output_if_src+0x154>)
 80197fe:	881b      	ldrh	r3, [r3, #0]
 8019800:	3301      	adds	r3, #1
 8019802:	b29a      	uxth	r2, r3
 8019804:	4b23      	ldr	r3, [pc, #140]	; (8019894 <ip4_output_if_src+0x154>)
 8019806:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8019808:	68bb      	ldr	r3, [r7, #8]
 801980a:	2b00      	cmp	r3, #0
 801980c:	d104      	bne.n	8019818 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801980e:	4b22      	ldr	r3, [pc, #136]	; (8019898 <ip4_output_if_src+0x158>)
 8019810:	681a      	ldr	r2, [r3, #0]
 8019812:	69fb      	ldr	r3, [r7, #28]
 8019814:	60da      	str	r2, [r3, #12]
 8019816:	e003      	b.n	8019820 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019818:	68bb      	ldr	r3, [r7, #8]
 801981a:	681a      	ldr	r2, [r3, #0]
 801981c:	69fb      	ldr	r3, [r7, #28]
 801981e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8019820:	69fb      	ldr	r3, [r7, #28]
 8019822:	2200      	movs	r2, #0
 8019824:	729a      	strb	r2, [r3, #10]
 8019826:	2200      	movs	r2, #0
 8019828:	72da      	strb	r2, [r3, #11]
 801982a:	e00f      	b.n	801984c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	895b      	ldrh	r3, [r3, #10]
 8019830:	2b13      	cmp	r3, #19
 8019832:	d802      	bhi.n	801983a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019834:	f06f 0301 	mvn.w	r3, #1
 8019838:	e020      	b.n	801987c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801983a:	68fb      	ldr	r3, [r7, #12]
 801983c:	685b      	ldr	r3, [r3, #4]
 801983e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019840:	69fb      	ldr	r3, [r7, #28]
 8019842:	691b      	ldr	r3, [r3, #16]
 8019844:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019846:	f107 0314 	add.w	r3, r7, #20
 801984a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801984c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801984e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019850:	2b00      	cmp	r3, #0
 8019852:	d00c      	beq.n	801986e <ip4_output_if_src+0x12e>
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	891a      	ldrh	r2, [r3, #8]
 8019858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801985a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801985c:	429a      	cmp	r2, r3
 801985e:	d906      	bls.n	801986e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019860:	687a      	ldr	r2, [r7, #4]
 8019862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019864:	68f8      	ldr	r0, [r7, #12]
 8019866:	f000 fddf 	bl	801a428 <ip4_frag>
 801986a:	4603      	mov	r3, r0
 801986c:	e006      	b.n	801987c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801986e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019870:	695b      	ldr	r3, [r3, #20]
 8019872:	687a      	ldr	r2, [r7, #4]
 8019874:	68f9      	ldr	r1, [r7, #12]
 8019876:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019878:	4798      	blx	r3
 801987a:	4603      	mov	r3, r0
}
 801987c:	4618      	mov	r0, r3
 801987e:	3720      	adds	r7, #32
 8019880:	46bd      	mov	sp, r7
 8019882:	bd80      	pop	{r7, pc}
 8019884:	0801e5a4 	.word	0x0801e5a4
 8019888:	0801e5d8 	.word	0x0801e5d8
 801988c:	0801e5e4 	.word	0x0801e5e4
 8019890:	0801e60c 	.word	0x0801e60c
 8019894:	24004c2e 	.word	0x24004c2e
 8019898:	0801f338 	.word	0x0801f338

0801989c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801989c:	b480      	push	{r7}
 801989e:	b085      	sub	sp, #20
 80198a0:	af00      	add	r7, sp, #0
 80198a2:	6078      	str	r0, [r7, #4]
 80198a4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198b0:	d002      	beq.n	80198b8 <ip4_addr_isbroadcast_u32+0x1c>
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	d101      	bne.n	80198bc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80198b8:	2301      	movs	r3, #1
 80198ba:	e02a      	b.n	8019912 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80198bc:	683b      	ldr	r3, [r7, #0]
 80198be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80198c2:	f003 0302 	and.w	r3, r3, #2
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d101      	bne.n	80198ce <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80198ca:	2300      	movs	r3, #0
 80198cc:	e021      	b.n	8019912 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80198ce:	683b      	ldr	r3, [r7, #0]
 80198d0:	3304      	adds	r3, #4
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	687a      	ldr	r2, [r7, #4]
 80198d6:	429a      	cmp	r2, r3
 80198d8:	d101      	bne.n	80198de <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80198da:	2300      	movs	r3, #0
 80198dc:	e019      	b.n	8019912 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80198de:	68fa      	ldr	r2, [r7, #12]
 80198e0:	683b      	ldr	r3, [r7, #0]
 80198e2:	3304      	adds	r3, #4
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	405a      	eors	r2, r3
 80198e8:	683b      	ldr	r3, [r7, #0]
 80198ea:	3308      	adds	r3, #8
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	4013      	ands	r3, r2
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	d10d      	bne.n	8019910 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80198f4:	683b      	ldr	r3, [r7, #0]
 80198f6:	3308      	adds	r3, #8
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	43da      	mvns	r2, r3
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8019900:	683b      	ldr	r3, [r7, #0]
 8019902:	3308      	adds	r3, #8
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8019908:	429a      	cmp	r2, r3
 801990a:	d101      	bne.n	8019910 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801990c:	2301      	movs	r3, #1
 801990e:	e000      	b.n	8019912 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8019910:	2300      	movs	r3, #0
  }
}
 8019912:	4618      	mov	r0, r3
 8019914:	3714      	adds	r7, #20
 8019916:	46bd      	mov	sp, r7
 8019918:	f85d 7b04 	ldr.w	r7, [sp], #4
 801991c:	4770      	bx	lr
	...

08019920 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8019920:	b580      	push	{r7, lr}
 8019922:	b082      	sub	sp, #8
 8019924:	af00      	add	r7, sp, #0
 8019926:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8019928:	2210      	movs	r2, #16
 801992a:	4904      	ldr	r1, [pc, #16]	; (801993c <ip4addr_ntoa+0x1c>)
 801992c:	6878      	ldr	r0, [r7, #4]
 801992e:	f000 f807 	bl	8019940 <ip4addr_ntoa_r>
 8019932:	4603      	mov	r3, r0
}
 8019934:	4618      	mov	r0, r3
 8019936:	3708      	adds	r7, #8
 8019938:	46bd      	mov	sp, r7
 801993a:	bd80      	pop	{r7, pc}
 801993c:	24004c30 	.word	0x24004c30

08019940 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019940:	b480      	push	{r7}
 8019942:	b08d      	sub	sp, #52	; 0x34
 8019944:	af00      	add	r7, sp, #0
 8019946:	60f8      	str	r0, [r7, #12]
 8019948:	60b9      	str	r1, [r7, #8]
 801994a:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801994c:	2300      	movs	r3, #0
 801994e:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019950:	68fb      	ldr	r3, [r7, #12]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	61bb      	str	r3, [r7, #24]

  rp = buf;
 8019956:	68bb      	ldr	r3, [r7, #8]
 8019958:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801995a:	f107 0318 	add.w	r3, r7, #24
 801995e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019960:	2300      	movs	r3, #0
 8019962:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019966:	e059      	b.n	8019a1c <ip4addr_ntoa_r+0xdc>
    i = 0;
 8019968:	2300      	movs	r3, #0
 801996a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801996e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019970:	781a      	ldrb	r2, [r3, #0]
 8019972:	4b33      	ldr	r3, [pc, #204]	; (8019a40 <ip4addr_ntoa_r+0x100>)
 8019974:	fba3 1302 	umull	r1, r3, r3, r2
 8019978:	08d9      	lsrs	r1, r3, #3
 801997a:	460b      	mov	r3, r1
 801997c:	009b      	lsls	r3, r3, #2
 801997e:	440b      	add	r3, r1
 8019980:	005b      	lsls	r3, r3, #1
 8019982:	1ad3      	subs	r3, r2, r3
 8019984:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8019986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019988:	781b      	ldrb	r3, [r3, #0]
 801998a:	4a2d      	ldr	r2, [pc, #180]	; (8019a40 <ip4addr_ntoa_r+0x100>)
 801998c:	fba2 2303 	umull	r2, r3, r2, r3
 8019990:	08db      	lsrs	r3, r3, #3
 8019992:	b2da      	uxtb	r2, r3
 8019994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019996:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8019998:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801999c:	1c5a      	adds	r2, r3, #1
 801999e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80199a2:	4619      	mov	r1, r3
 80199a4:	7ffb      	ldrb	r3, [r7, #31]
 80199a6:	3330      	adds	r3, #48	; 0x30
 80199a8:	b2da      	uxtb	r2, r3
 80199aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80199ae:	440b      	add	r3, r1
 80199b0:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80199b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199b6:	781b      	ldrb	r3, [r3, #0]
 80199b8:	2b00      	cmp	r3, #0
 80199ba:	d1d8      	bne.n	801996e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80199bc:	e012      	b.n	80199e4 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 80199be:	6a3b      	ldr	r3, [r7, #32]
 80199c0:	1c5a      	adds	r2, r3, #1
 80199c2:	623a      	str	r2, [r7, #32]
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	429a      	cmp	r2, r3
 80199c8:	dc01      	bgt.n	80199ce <ip4addr_ntoa_r+0x8e>
        return NULL;
 80199ca:	2300      	movs	r3, #0
 80199cc:	e031      	b.n	8019a32 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 80199ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80199d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199d4:	1c59      	adds	r1, r3, #1
 80199d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80199d8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80199dc:	440a      	add	r2, r1
 80199de:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80199e2:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80199e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80199e8:	1e5a      	subs	r2, r3, #1
 80199ea:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d1e5      	bne.n	80199be <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80199f2:	6a3b      	ldr	r3, [r7, #32]
 80199f4:	1c5a      	adds	r2, r3, #1
 80199f6:	623a      	str	r2, [r7, #32]
 80199f8:	687a      	ldr	r2, [r7, #4]
 80199fa:	429a      	cmp	r2, r3
 80199fc:	dc01      	bgt.n	8019a02 <ip4addr_ntoa_r+0xc2>
      return NULL;
 80199fe:	2300      	movs	r3, #0
 8019a00:	e017      	b.n	8019a32 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 8019a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a04:	1c5a      	adds	r2, r3, #1
 8019a06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019a08:	222e      	movs	r2, #46	; 0x2e
 8019a0a:	701a      	strb	r2, [r3, #0]
    ap++;
 8019a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a0e:	3301      	adds	r3, #1
 8019a10:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019a12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a16:	3301      	adds	r3, #1
 8019a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8019a1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019a20:	2b03      	cmp	r3, #3
 8019a22:	d9a1      	bls.n	8019968 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 8019a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a26:	3b01      	subs	r3, #1
 8019a28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a2c:	2200      	movs	r2, #0
 8019a2e:	701a      	strb	r2, [r3, #0]
  return buf;
 8019a30:	68bb      	ldr	r3, [r7, #8]
}
 8019a32:	4618      	mov	r0, r3
 8019a34:	3734      	adds	r7, #52	; 0x34
 8019a36:	46bd      	mov	sp, r7
 8019a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a3c:	4770      	bx	lr
 8019a3e:	bf00      	nop
 8019a40:	cccccccd 	.word	0xcccccccd

08019a44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b084      	sub	sp, #16
 8019a48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019a4a:	2300      	movs	r3, #0
 8019a4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019a4e:	4b12      	ldr	r3, [pc, #72]	; (8019a98 <ip_reass_tmr+0x54>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019a54:	e018      	b.n	8019a88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019a56:	68fb      	ldr	r3, [r7, #12]
 8019a58:	7fdb      	ldrb	r3, [r3, #31]
 8019a5a:	2b00      	cmp	r3, #0
 8019a5c:	d00b      	beq.n	8019a76 <ip_reass_tmr+0x32>
      r->timer--;
 8019a5e:	68fb      	ldr	r3, [r7, #12]
 8019a60:	7fdb      	ldrb	r3, [r3, #31]
 8019a62:	3b01      	subs	r3, #1
 8019a64:	b2da      	uxtb	r2, r3
 8019a66:	68fb      	ldr	r3, [r7, #12]
 8019a68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019a6a:	68fb      	ldr	r3, [r7, #12]
 8019a6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	60fb      	str	r3, [r7, #12]
 8019a74:	e008      	b.n	8019a88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019a76:	68fb      	ldr	r3, [r7, #12]
 8019a78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	681b      	ldr	r3, [r3, #0]
 8019a7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019a80:	68b9      	ldr	r1, [r7, #8]
 8019a82:	6878      	ldr	r0, [r7, #4]
 8019a84:	f000 f80a 	bl	8019a9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d1e3      	bne.n	8019a56 <ip_reass_tmr+0x12>
    }
  }
}
 8019a8e:	bf00      	nop
 8019a90:	bf00      	nop
 8019a92:	3710      	adds	r7, #16
 8019a94:	46bd      	mov	sp, r7
 8019a96:	bd80      	pop	{r7, pc}
 8019a98:	24004c40 	.word	0x24004c40

08019a9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019a9c:	b580      	push	{r7, lr}
 8019a9e:	b088      	sub	sp, #32
 8019aa0:	af00      	add	r7, sp, #0
 8019aa2:	6078      	str	r0, [r7, #4]
 8019aa4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019aa6:	2300      	movs	r3, #0
 8019aa8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019aaa:	683a      	ldr	r2, [r7, #0]
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	429a      	cmp	r2, r3
 8019ab0:	d105      	bne.n	8019abe <ip_reass_free_complete_datagram+0x22>
 8019ab2:	4b45      	ldr	r3, [pc, #276]	; (8019bc8 <ip_reass_free_complete_datagram+0x12c>)
 8019ab4:	22ab      	movs	r2, #171	; 0xab
 8019ab6:	4945      	ldr	r1, [pc, #276]	; (8019bcc <ip_reass_free_complete_datagram+0x130>)
 8019ab8:	4845      	ldr	r0, [pc, #276]	; (8019bd0 <ip_reass_free_complete_datagram+0x134>)
 8019aba:	f001 f95f 	bl	801ad7c <iprintf>
  if (prev != NULL) {
 8019abe:	683b      	ldr	r3, [r7, #0]
 8019ac0:	2b00      	cmp	r3, #0
 8019ac2:	d00a      	beq.n	8019ada <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019ac4:	683b      	ldr	r3, [r7, #0]
 8019ac6:	681b      	ldr	r3, [r3, #0]
 8019ac8:	687a      	ldr	r2, [r7, #4]
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d005      	beq.n	8019ada <ip_reass_free_complete_datagram+0x3e>
 8019ace:	4b3e      	ldr	r3, [pc, #248]	; (8019bc8 <ip_reass_free_complete_datagram+0x12c>)
 8019ad0:	22ad      	movs	r2, #173	; 0xad
 8019ad2:	4940      	ldr	r1, [pc, #256]	; (8019bd4 <ip_reass_free_complete_datagram+0x138>)
 8019ad4:	483e      	ldr	r0, [pc, #248]	; (8019bd0 <ip_reass_free_complete_datagram+0x134>)
 8019ad6:	f001 f951 	bl	801ad7c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	685b      	ldr	r3, [r3, #4]
 8019ade:	685b      	ldr	r3, [r3, #4]
 8019ae0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019ae2:	697b      	ldr	r3, [r7, #20]
 8019ae4:	889b      	ldrh	r3, [r3, #4]
 8019ae6:	b29b      	uxth	r3, r3
 8019ae8:	2b00      	cmp	r3, #0
 8019aea:	d12a      	bne.n	8019b42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	685b      	ldr	r3, [r3, #4]
 8019af0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019af2:	697b      	ldr	r3, [r7, #20]
 8019af4:	681a      	ldr	r2, [r3, #0]
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019afa:	69bb      	ldr	r3, [r7, #24]
 8019afc:	6858      	ldr	r0, [r3, #4]
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	3308      	adds	r3, #8
 8019b02:	2214      	movs	r2, #20
 8019b04:	4619      	mov	r1, r3
 8019b06:	f001 f8c8 	bl	801ac9a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019b0a:	2101      	movs	r1, #1
 8019b0c:	69b8      	ldr	r0, [r7, #24]
 8019b0e:	f7ff fbab 	bl	8019268 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019b12:	69b8      	ldr	r0, [r7, #24]
 8019b14:	f7f7 fd8c 	bl	8011630 <pbuf_clen>
 8019b18:	4603      	mov	r3, r0
 8019b1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019b1c:	8bfa      	ldrh	r2, [r7, #30]
 8019b1e:	8a7b      	ldrh	r3, [r7, #18]
 8019b20:	4413      	add	r3, r2
 8019b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019b26:	db05      	blt.n	8019b34 <ip_reass_free_complete_datagram+0x98>
 8019b28:	4b27      	ldr	r3, [pc, #156]	; (8019bc8 <ip_reass_free_complete_datagram+0x12c>)
 8019b2a:	22bc      	movs	r2, #188	; 0xbc
 8019b2c:	492a      	ldr	r1, [pc, #168]	; (8019bd8 <ip_reass_free_complete_datagram+0x13c>)
 8019b2e:	4828      	ldr	r0, [pc, #160]	; (8019bd0 <ip_reass_free_complete_datagram+0x134>)
 8019b30:	f001 f924 	bl	801ad7c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b34:	8bfa      	ldrh	r2, [r7, #30]
 8019b36:	8a7b      	ldrh	r3, [r7, #18]
 8019b38:	4413      	add	r3, r2
 8019b3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019b3c:	69b8      	ldr	r0, [r7, #24]
 8019b3e:	f7f7 fce9 	bl	8011514 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	685b      	ldr	r3, [r3, #4]
 8019b46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019b48:	e01f      	b.n	8019b8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019b4a:	69bb      	ldr	r3, [r7, #24]
 8019b4c:	685b      	ldr	r3, [r3, #4]
 8019b4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019b50:	69bb      	ldr	r3, [r7, #24]
 8019b52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019b54:	697b      	ldr	r3, [r7, #20]
 8019b56:	681b      	ldr	r3, [r3, #0]
 8019b58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019b5a:	68f8      	ldr	r0, [r7, #12]
 8019b5c:	f7f7 fd68 	bl	8011630 <pbuf_clen>
 8019b60:	4603      	mov	r3, r0
 8019b62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019b64:	8bfa      	ldrh	r2, [r7, #30]
 8019b66:	8a7b      	ldrh	r3, [r7, #18]
 8019b68:	4413      	add	r3, r2
 8019b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019b6e:	db05      	blt.n	8019b7c <ip_reass_free_complete_datagram+0xe0>
 8019b70:	4b15      	ldr	r3, [pc, #84]	; (8019bc8 <ip_reass_free_complete_datagram+0x12c>)
 8019b72:	22cc      	movs	r2, #204	; 0xcc
 8019b74:	4918      	ldr	r1, [pc, #96]	; (8019bd8 <ip_reass_free_complete_datagram+0x13c>)
 8019b76:	4816      	ldr	r0, [pc, #88]	; (8019bd0 <ip_reass_free_complete_datagram+0x134>)
 8019b78:	f001 f900 	bl	801ad7c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b7c:	8bfa      	ldrh	r2, [r7, #30]
 8019b7e:	8a7b      	ldrh	r3, [r7, #18]
 8019b80:	4413      	add	r3, r2
 8019b82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019b84:	68f8      	ldr	r0, [r7, #12]
 8019b86:	f7f7 fcc5 	bl	8011514 <pbuf_free>
  while (p != NULL) {
 8019b8a:	69bb      	ldr	r3, [r7, #24]
 8019b8c:	2b00      	cmp	r3, #0
 8019b8e:	d1dc      	bne.n	8019b4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019b90:	6839      	ldr	r1, [r7, #0]
 8019b92:	6878      	ldr	r0, [r7, #4]
 8019b94:	f000 f8c2 	bl	8019d1c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019b98:	4b10      	ldr	r3, [pc, #64]	; (8019bdc <ip_reass_free_complete_datagram+0x140>)
 8019b9a:	881b      	ldrh	r3, [r3, #0]
 8019b9c:	8bfa      	ldrh	r2, [r7, #30]
 8019b9e:	429a      	cmp	r2, r3
 8019ba0:	d905      	bls.n	8019bae <ip_reass_free_complete_datagram+0x112>
 8019ba2:	4b09      	ldr	r3, [pc, #36]	; (8019bc8 <ip_reass_free_complete_datagram+0x12c>)
 8019ba4:	22d2      	movs	r2, #210	; 0xd2
 8019ba6:	490e      	ldr	r1, [pc, #56]	; (8019be0 <ip_reass_free_complete_datagram+0x144>)
 8019ba8:	4809      	ldr	r0, [pc, #36]	; (8019bd0 <ip_reass_free_complete_datagram+0x134>)
 8019baa:	f001 f8e7 	bl	801ad7c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019bae:	4b0b      	ldr	r3, [pc, #44]	; (8019bdc <ip_reass_free_complete_datagram+0x140>)
 8019bb0:	881a      	ldrh	r2, [r3, #0]
 8019bb2:	8bfb      	ldrh	r3, [r7, #30]
 8019bb4:	1ad3      	subs	r3, r2, r3
 8019bb6:	b29a      	uxth	r2, r3
 8019bb8:	4b08      	ldr	r3, [pc, #32]	; (8019bdc <ip_reass_free_complete_datagram+0x140>)
 8019bba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019bbc:	8bfb      	ldrh	r3, [r7, #30]
}
 8019bbe:	4618      	mov	r0, r3
 8019bc0:	3720      	adds	r7, #32
 8019bc2:	46bd      	mov	sp, r7
 8019bc4:	bd80      	pop	{r7, pc}
 8019bc6:	bf00      	nop
 8019bc8:	0801e63c 	.word	0x0801e63c
 8019bcc:	0801e678 	.word	0x0801e678
 8019bd0:	0801e684 	.word	0x0801e684
 8019bd4:	0801e6ac 	.word	0x0801e6ac
 8019bd8:	0801e6c0 	.word	0x0801e6c0
 8019bdc:	24004c44 	.word	0x24004c44
 8019be0:	0801e6e0 	.word	0x0801e6e0

08019be4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019be4:	b580      	push	{r7, lr}
 8019be6:	b08a      	sub	sp, #40	; 0x28
 8019be8:	af00      	add	r7, sp, #0
 8019bea:	6078      	str	r0, [r7, #4]
 8019bec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019bee:	2300      	movs	r3, #0
 8019bf0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019bf2:	2300      	movs	r3, #0
 8019bf4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019bf6:	2300      	movs	r3, #0
 8019bf8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019bfa:	2300      	movs	r3, #0
 8019bfc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019bfe:	2300      	movs	r3, #0
 8019c00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019c02:	4b28      	ldr	r3, [pc, #160]	; (8019ca4 <ip_reass_remove_oldest_datagram+0xc0>)
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c08:	e030      	b.n	8019c6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0c:	695a      	ldr	r2, [r3, #20]
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	68db      	ldr	r3, [r3, #12]
 8019c12:	429a      	cmp	r2, r3
 8019c14:	d10c      	bne.n	8019c30 <ip_reass_remove_oldest_datagram+0x4c>
 8019c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c18:	699a      	ldr	r2, [r3, #24]
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	691b      	ldr	r3, [r3, #16]
 8019c1e:	429a      	cmp	r2, r3
 8019c20:	d106      	bne.n	8019c30 <ip_reass_remove_oldest_datagram+0x4c>
 8019c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c24:	899a      	ldrh	r2, [r3, #12]
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	889b      	ldrh	r3, [r3, #4]
 8019c2a:	b29b      	uxth	r3, r3
 8019c2c:	429a      	cmp	r2, r3
 8019c2e:	d014      	beq.n	8019c5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019c30:	693b      	ldr	r3, [r7, #16]
 8019c32:	3301      	adds	r3, #1
 8019c34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019c36:	6a3b      	ldr	r3, [r7, #32]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d104      	bne.n	8019c46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c40:	69fb      	ldr	r3, [r7, #28]
 8019c42:	61bb      	str	r3, [r7, #24]
 8019c44:	e009      	b.n	8019c5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c48:	7fda      	ldrb	r2, [r3, #31]
 8019c4a:	6a3b      	ldr	r3, [r7, #32]
 8019c4c:	7fdb      	ldrb	r3, [r3, #31]
 8019c4e:	429a      	cmp	r2, r3
 8019c50:	d803      	bhi.n	8019c5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c56:	69fb      	ldr	r3, [r7, #28]
 8019c58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d001      	beq.n	8019c66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c6e:	2b00      	cmp	r3, #0
 8019c70:	d1cb      	bne.n	8019c0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019c72:	6a3b      	ldr	r3, [r7, #32]
 8019c74:	2b00      	cmp	r3, #0
 8019c76:	d008      	beq.n	8019c8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019c78:	69b9      	ldr	r1, [r7, #24]
 8019c7a:	6a38      	ldr	r0, [r7, #32]
 8019c7c:	f7ff ff0e 	bl	8019a9c <ip_reass_free_complete_datagram>
 8019c80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019c82:	697a      	ldr	r2, [r7, #20]
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	4413      	add	r3, r2
 8019c88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019c8a:	697a      	ldr	r2, [r7, #20]
 8019c8c:	683b      	ldr	r3, [r7, #0]
 8019c8e:	429a      	cmp	r2, r3
 8019c90:	da02      	bge.n	8019c98 <ip_reass_remove_oldest_datagram+0xb4>
 8019c92:	693b      	ldr	r3, [r7, #16]
 8019c94:	2b01      	cmp	r3, #1
 8019c96:	dcac      	bgt.n	8019bf2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019c98:	697b      	ldr	r3, [r7, #20]
}
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	3728      	adds	r7, #40	; 0x28
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bd80      	pop	{r7, pc}
 8019ca2:	bf00      	nop
 8019ca4:	24004c40 	.word	0x24004c40

08019ca8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b084      	sub	sp, #16
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	6078      	str	r0, [r7, #4]
 8019cb0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019cb2:	2004      	movs	r0, #4
 8019cb4:	f7f6 fd14 	bl	80106e0 <memp_malloc>
 8019cb8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019cba:	68fb      	ldr	r3, [r7, #12]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d110      	bne.n	8019ce2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019cc0:	6839      	ldr	r1, [r7, #0]
 8019cc2:	6878      	ldr	r0, [r7, #4]
 8019cc4:	f7ff ff8e 	bl	8019be4 <ip_reass_remove_oldest_datagram>
 8019cc8:	4602      	mov	r2, r0
 8019cca:	683b      	ldr	r3, [r7, #0]
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	dc03      	bgt.n	8019cd8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019cd0:	2004      	movs	r0, #4
 8019cd2:	f7f6 fd05 	bl	80106e0 <memp_malloc>
 8019cd6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019cd8:	68fb      	ldr	r3, [r7, #12]
 8019cda:	2b00      	cmp	r3, #0
 8019cdc:	d101      	bne.n	8019ce2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019cde:	2300      	movs	r3, #0
 8019ce0:	e016      	b.n	8019d10 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019ce2:	2220      	movs	r2, #32
 8019ce4:	2100      	movs	r1, #0
 8019ce6:	68f8      	ldr	r0, [r7, #12]
 8019ce8:	f000 ffe5 	bl	801acb6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019cec:	68fb      	ldr	r3, [r7, #12]
 8019cee:	220f      	movs	r2, #15
 8019cf0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019cf2:	4b09      	ldr	r3, [pc, #36]	; (8019d18 <ip_reass_enqueue_new_datagram+0x70>)
 8019cf4:	681a      	ldr	r2, [r3, #0]
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019cfa:	4a07      	ldr	r2, [pc, #28]	; (8019d18 <ip_reass_enqueue_new_datagram+0x70>)
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019d00:	68fb      	ldr	r3, [r7, #12]
 8019d02:	3308      	adds	r3, #8
 8019d04:	2214      	movs	r2, #20
 8019d06:	6879      	ldr	r1, [r7, #4]
 8019d08:	4618      	mov	r0, r3
 8019d0a:	f000 ffc6 	bl	801ac9a <memcpy>
  return ipr;
 8019d0e:	68fb      	ldr	r3, [r7, #12]
}
 8019d10:	4618      	mov	r0, r3
 8019d12:	3710      	adds	r7, #16
 8019d14:	46bd      	mov	sp, r7
 8019d16:	bd80      	pop	{r7, pc}
 8019d18:	24004c40 	.word	0x24004c40

08019d1c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019d1c:	b580      	push	{r7, lr}
 8019d1e:	b082      	sub	sp, #8
 8019d20:	af00      	add	r7, sp, #0
 8019d22:	6078      	str	r0, [r7, #4]
 8019d24:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019d26:	4b10      	ldr	r3, [pc, #64]	; (8019d68 <ip_reass_dequeue_datagram+0x4c>)
 8019d28:	681b      	ldr	r3, [r3, #0]
 8019d2a:	687a      	ldr	r2, [r7, #4]
 8019d2c:	429a      	cmp	r2, r3
 8019d2e:	d104      	bne.n	8019d3a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	4a0c      	ldr	r2, [pc, #48]	; (8019d68 <ip_reass_dequeue_datagram+0x4c>)
 8019d36:	6013      	str	r3, [r2, #0]
 8019d38:	e00d      	b.n	8019d56 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019d3a:	683b      	ldr	r3, [r7, #0]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d106      	bne.n	8019d4e <ip_reass_dequeue_datagram+0x32>
 8019d40:	4b0a      	ldr	r3, [pc, #40]	; (8019d6c <ip_reass_dequeue_datagram+0x50>)
 8019d42:	f240 1245 	movw	r2, #325	; 0x145
 8019d46:	490a      	ldr	r1, [pc, #40]	; (8019d70 <ip_reass_dequeue_datagram+0x54>)
 8019d48:	480a      	ldr	r0, [pc, #40]	; (8019d74 <ip_reass_dequeue_datagram+0x58>)
 8019d4a:	f001 f817 	bl	801ad7c <iprintf>
    prev->next = ipr->next;
 8019d4e:	687b      	ldr	r3, [r7, #4]
 8019d50:	681a      	ldr	r2, [r3, #0]
 8019d52:	683b      	ldr	r3, [r7, #0]
 8019d54:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019d56:	6879      	ldr	r1, [r7, #4]
 8019d58:	2004      	movs	r0, #4
 8019d5a:	f7f6 fd37 	bl	80107cc <memp_free>
}
 8019d5e:	bf00      	nop
 8019d60:	3708      	adds	r7, #8
 8019d62:	46bd      	mov	sp, r7
 8019d64:	bd80      	pop	{r7, pc}
 8019d66:	bf00      	nop
 8019d68:	24004c40 	.word	0x24004c40
 8019d6c:	0801e63c 	.word	0x0801e63c
 8019d70:	0801e704 	.word	0x0801e704
 8019d74:	0801e684 	.word	0x0801e684

08019d78 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019d78:	b580      	push	{r7, lr}
 8019d7a:	b08c      	sub	sp, #48	; 0x30
 8019d7c:	af00      	add	r7, sp, #0
 8019d7e:	60f8      	str	r0, [r7, #12]
 8019d80:	60b9      	str	r1, [r7, #8]
 8019d82:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019d84:	2300      	movs	r3, #0
 8019d86:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019d88:	2301      	movs	r3, #1
 8019d8a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019d8c:	68bb      	ldr	r3, [r7, #8]
 8019d8e:	685b      	ldr	r3, [r3, #4]
 8019d90:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d92:	69fb      	ldr	r3, [r7, #28]
 8019d94:	885b      	ldrh	r3, [r3, #2]
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	4618      	mov	r0, r3
 8019d9a:	f7f5 ff11 	bl	800fbc0 <lwip_htons>
 8019d9e:	4603      	mov	r3, r0
 8019da0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019da2:	69fb      	ldr	r3, [r7, #28]
 8019da4:	781b      	ldrb	r3, [r3, #0]
 8019da6:	f003 030f 	and.w	r3, r3, #15
 8019daa:	b2db      	uxtb	r3, r3
 8019dac:	009b      	lsls	r3, r3, #2
 8019dae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019db0:	7e7b      	ldrb	r3, [r7, #25]
 8019db2:	b29b      	uxth	r3, r3
 8019db4:	8b7a      	ldrh	r2, [r7, #26]
 8019db6:	429a      	cmp	r2, r3
 8019db8:	d202      	bcs.n	8019dc0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dba:	f04f 33ff 	mov.w	r3, #4294967295
 8019dbe:	e135      	b.n	801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019dc0:	7e7b      	ldrb	r3, [r7, #25]
 8019dc2:	b29b      	uxth	r3, r3
 8019dc4:	8b7a      	ldrh	r2, [r7, #26]
 8019dc6:	1ad3      	subs	r3, r2, r3
 8019dc8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019dca:	69fb      	ldr	r3, [r7, #28]
 8019dcc:	88db      	ldrh	r3, [r3, #6]
 8019dce:	b29b      	uxth	r3, r3
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f7f5 fef5 	bl	800fbc0 <lwip_htons>
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ddc:	b29b      	uxth	r3, r3
 8019dde:	00db      	lsls	r3, r3, #3
 8019de0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019de2:	68bb      	ldr	r3, [r7, #8]
 8019de4:	685b      	ldr	r3, [r3, #4]
 8019de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dea:	2200      	movs	r2, #0
 8019dec:	701a      	strb	r2, [r3, #0]
 8019dee:	2200      	movs	r2, #0
 8019df0:	705a      	strb	r2, [r3, #1]
 8019df2:	2200      	movs	r2, #0
 8019df4:	709a      	strb	r2, [r3, #2]
 8019df6:	2200      	movs	r2, #0
 8019df8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dfc:	8afa      	ldrh	r2, [r7, #22]
 8019dfe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019e00:	8afa      	ldrh	r2, [r7, #22]
 8019e02:	8b7b      	ldrh	r3, [r7, #26]
 8019e04:	4413      	add	r3, r2
 8019e06:	b29a      	uxth	r2, r3
 8019e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e0e:	88db      	ldrh	r3, [r3, #6]
 8019e10:	b29b      	uxth	r3, r3
 8019e12:	8afa      	ldrh	r2, [r7, #22]
 8019e14:	429a      	cmp	r2, r3
 8019e16:	d902      	bls.n	8019e1e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e18:	f04f 33ff 	mov.w	r3, #4294967295
 8019e1c:	e106      	b.n	801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	685b      	ldr	r3, [r3, #4]
 8019e22:	627b      	str	r3, [r7, #36]	; 0x24
 8019e24:	e068      	b.n	8019ef8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e28:	685b      	ldr	r3, [r3, #4]
 8019e2a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e2e:	889b      	ldrh	r3, [r3, #4]
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	693b      	ldr	r3, [r7, #16]
 8019e34:	889b      	ldrh	r3, [r3, #4]
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d235      	bcs.n	8019ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e40:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e44:	2b00      	cmp	r3, #0
 8019e46:	d020      	beq.n	8019e8a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e4a:	889b      	ldrh	r3, [r3, #4]
 8019e4c:	b29a      	uxth	r2, r3
 8019e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e50:	88db      	ldrh	r3, [r3, #6]
 8019e52:	b29b      	uxth	r3, r3
 8019e54:	429a      	cmp	r2, r3
 8019e56:	d307      	bcc.n	8019e68 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e5a:	88db      	ldrh	r3, [r3, #6]
 8019e5c:	b29a      	uxth	r2, r3
 8019e5e:	693b      	ldr	r3, [r7, #16]
 8019e60:	889b      	ldrh	r3, [r3, #4]
 8019e62:	b29b      	uxth	r3, r3
 8019e64:	429a      	cmp	r2, r3
 8019e66:	d902      	bls.n	8019e6e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e68:	f04f 33ff 	mov.w	r3, #4294967295
 8019e6c:	e0de      	b.n	801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e70:	68ba      	ldr	r2, [r7, #8]
 8019e72:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e76:	88db      	ldrh	r3, [r3, #6]
 8019e78:	b29a      	uxth	r2, r3
 8019e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7c:	889b      	ldrh	r3, [r3, #4]
 8019e7e:	b29b      	uxth	r3, r3
 8019e80:	429a      	cmp	r2, r3
 8019e82:	d03d      	beq.n	8019f00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e84:	2300      	movs	r3, #0
 8019e86:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019e88:	e03a      	b.n	8019f00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e8c:	88db      	ldrh	r3, [r3, #6]
 8019e8e:	b29a      	uxth	r2, r3
 8019e90:	693b      	ldr	r3, [r7, #16]
 8019e92:	889b      	ldrh	r3, [r3, #4]
 8019e94:	b29b      	uxth	r3, r3
 8019e96:	429a      	cmp	r2, r3
 8019e98:	d902      	bls.n	8019ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8019e9e:	e0c5      	b.n	801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	68ba      	ldr	r2, [r7, #8]
 8019ea4:	605a      	str	r2, [r3, #4]
      break;
 8019ea6:	e02b      	b.n	8019f00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eaa:	889b      	ldrh	r3, [r3, #4]
 8019eac:	b29a      	uxth	r2, r3
 8019eae:	693b      	ldr	r3, [r7, #16]
 8019eb0:	889b      	ldrh	r3, [r3, #4]
 8019eb2:	b29b      	uxth	r3, r3
 8019eb4:	429a      	cmp	r2, r3
 8019eb6:	d102      	bne.n	8019ebe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8019ebc:	e0b6      	b.n	801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ec0:	889b      	ldrh	r3, [r3, #4]
 8019ec2:	b29a      	uxth	r2, r3
 8019ec4:	693b      	ldr	r3, [r7, #16]
 8019ec6:	88db      	ldrh	r3, [r3, #6]
 8019ec8:	b29b      	uxth	r3, r3
 8019eca:	429a      	cmp	r2, r3
 8019ecc:	d202      	bcs.n	8019ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019ece:	f04f 33ff 	mov.w	r3, #4294967295
 8019ed2:	e0ab      	b.n	801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d009      	beq.n	8019eee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019edc:	88db      	ldrh	r3, [r3, #6]
 8019ede:	b29a      	uxth	r2, r3
 8019ee0:	693b      	ldr	r3, [r7, #16]
 8019ee2:	889b      	ldrh	r3, [r3, #4]
 8019ee4:	b29b      	uxth	r3, r3
 8019ee6:	429a      	cmp	r2, r3
 8019ee8:	d001      	beq.n	8019eee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019eea:	2300      	movs	r3, #0
 8019eec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019eee:	693b      	ldr	r3, [r7, #16]
 8019ef0:	681b      	ldr	r3, [r3, #0]
 8019ef2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019ef4:	693b      	ldr	r3, [r7, #16]
 8019ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d193      	bne.n	8019e26 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019efe:	e000      	b.n	8019f02 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019f00:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d12d      	bne.n	8019f64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f0a:	2b00      	cmp	r3, #0
 8019f0c:	d01c      	beq.n	8019f48 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f10:	88db      	ldrh	r3, [r3, #6]
 8019f12:	b29a      	uxth	r2, r3
 8019f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f16:	889b      	ldrh	r3, [r3, #4]
 8019f18:	b29b      	uxth	r3, r3
 8019f1a:	429a      	cmp	r2, r3
 8019f1c:	d906      	bls.n	8019f2c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019f1e:	4b45      	ldr	r3, [pc, #276]	; (801a034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f20:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019f24:	4944      	ldr	r1, [pc, #272]	; (801a038 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019f26:	4845      	ldr	r0, [pc, #276]	; (801a03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f28:	f000 ff28 	bl	801ad7c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f2e:	68ba      	ldr	r2, [r7, #8]
 8019f30:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f34:	88db      	ldrh	r3, [r3, #6]
 8019f36:	b29a      	uxth	r2, r3
 8019f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f3a:	889b      	ldrh	r3, [r3, #4]
 8019f3c:	b29b      	uxth	r3, r3
 8019f3e:	429a      	cmp	r2, r3
 8019f40:	d010      	beq.n	8019f64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019f42:	2300      	movs	r3, #0
 8019f44:	623b      	str	r3, [r7, #32]
 8019f46:	e00d      	b.n	8019f64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019f48:	68fb      	ldr	r3, [r7, #12]
 8019f4a:	685b      	ldr	r3, [r3, #4]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d006      	beq.n	8019f5e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019f50:	4b38      	ldr	r3, [pc, #224]	; (801a034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f52:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019f56:	493a      	ldr	r1, [pc, #232]	; (801a040 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019f58:	4838      	ldr	r0, [pc, #224]	; (801a03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f5a:	f000 ff0f 	bl	801ad7c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019f5e:	68fb      	ldr	r3, [r7, #12]
 8019f60:	68ba      	ldr	r2, [r7, #8]
 8019f62:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	d105      	bne.n	8019f76 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	7f9b      	ldrb	r3, [r3, #30]
 8019f6e:	f003 0301 	and.w	r3, r3, #1
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d059      	beq.n	801a02a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019f76:	6a3b      	ldr	r3, [r7, #32]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d04f      	beq.n	801a01c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	685b      	ldr	r3, [r3, #4]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d006      	beq.n	8019f92 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	685b      	ldr	r3, [r3, #4]
 8019f88:	685b      	ldr	r3, [r3, #4]
 8019f8a:	889b      	ldrh	r3, [r3, #4]
 8019f8c:	b29b      	uxth	r3, r3
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d002      	beq.n	8019f98 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019f92:	2300      	movs	r3, #0
 8019f94:	623b      	str	r3, [r7, #32]
 8019f96:	e041      	b.n	801a01c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019fa2:	e012      	b.n	8019fca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa6:	685b      	ldr	r3, [r3, #4]
 8019fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019fac:	88db      	ldrh	r3, [r3, #6]
 8019fae:	b29a      	uxth	r2, r3
 8019fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fb2:	889b      	ldrh	r3, [r3, #4]
 8019fb4:	b29b      	uxth	r3, r3
 8019fb6:	429a      	cmp	r2, r3
 8019fb8:	d002      	beq.n	8019fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019fba:	2300      	movs	r3, #0
 8019fbc:	623b      	str	r3, [r7, #32]
            break;
 8019fbe:	e007      	b.n	8019fd0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fc2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	d1e9      	bne.n	8019fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019fd0:	6a3b      	ldr	r3, [r7, #32]
 8019fd2:	2b00      	cmp	r3, #0
 8019fd4:	d022      	beq.n	801a01c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019fd6:	68fb      	ldr	r3, [r7, #12]
 8019fd8:	685b      	ldr	r3, [r3, #4]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d106      	bne.n	8019fec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019fde:	4b15      	ldr	r3, [pc, #84]	; (801a034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fe0:	f240 12df 	movw	r2, #479	; 0x1df
 8019fe4:	4917      	ldr	r1, [pc, #92]	; (801a044 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019fe6:	4815      	ldr	r0, [pc, #84]	; (801a03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fe8:	f000 fec8 	bl	801ad7c <iprintf>
          LWIP_ASSERT("sanity check",
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	685b      	ldr	r3, [r3, #4]
 8019ff0:	685b      	ldr	r3, [r3, #4]
 8019ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019ff4:	429a      	cmp	r2, r3
 8019ff6:	d106      	bne.n	801a006 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019ff8:	4b0e      	ldr	r3, [pc, #56]	; (801a034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ffa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019ffe:	4911      	ldr	r1, [pc, #68]	; (801a044 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a000:	480e      	ldr	r0, [pc, #56]	; (801a03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a002:	f000 febb 	bl	801ad7c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a008:	681b      	ldr	r3, [r3, #0]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d006      	beq.n	801a01c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a00e:	4b09      	ldr	r3, [pc, #36]	; (801a034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a010:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a014:	490c      	ldr	r1, [pc, #48]	; (801a048 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a016:	4809      	ldr	r0, [pc, #36]	; (801a03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a018:	f000 feb0 	bl	801ad7c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a01c:	6a3b      	ldr	r3, [r7, #32]
 801a01e:	2b00      	cmp	r3, #0
 801a020:	bf14      	ite	ne
 801a022:	2301      	movne	r3, #1
 801a024:	2300      	moveq	r3, #0
 801a026:	b2db      	uxtb	r3, r3
 801a028:	e000      	b.n	801a02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a02a:	2300      	movs	r3, #0
}
 801a02c:	4618      	mov	r0, r3
 801a02e:	3730      	adds	r7, #48	; 0x30
 801a030:	46bd      	mov	sp, r7
 801a032:	bd80      	pop	{r7, pc}
 801a034:	0801e63c 	.word	0x0801e63c
 801a038:	0801e720 	.word	0x0801e720
 801a03c:	0801e684 	.word	0x0801e684
 801a040:	0801e740 	.word	0x0801e740
 801a044:	0801e778 	.word	0x0801e778
 801a048:	0801e788 	.word	0x0801e788

0801a04c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b08e      	sub	sp, #56	; 0x38
 801a050:	af00      	add	r7, sp, #0
 801a052:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	685b      	ldr	r3, [r3, #4]
 801a058:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a05c:	781b      	ldrb	r3, [r3, #0]
 801a05e:	f003 030f 	and.w	r3, r3, #15
 801a062:	b2db      	uxtb	r3, r3
 801a064:	009b      	lsls	r3, r3, #2
 801a066:	b2db      	uxtb	r3, r3
 801a068:	2b14      	cmp	r3, #20
 801a06a:	f040 8167 	bne.w	801a33c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a070:	88db      	ldrh	r3, [r3, #6]
 801a072:	b29b      	uxth	r3, r3
 801a074:	4618      	mov	r0, r3
 801a076:	f7f5 fda3 	bl	800fbc0 <lwip_htons>
 801a07a:	4603      	mov	r3, r0
 801a07c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a080:	b29b      	uxth	r3, r3
 801a082:	00db      	lsls	r3, r3, #3
 801a084:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a088:	885b      	ldrh	r3, [r3, #2]
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	4618      	mov	r0, r3
 801a08e:	f7f5 fd97 	bl	800fbc0 <lwip_htons>
 801a092:	4603      	mov	r3, r0
 801a094:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a098:	781b      	ldrb	r3, [r3, #0]
 801a09a:	f003 030f 	and.w	r3, r3, #15
 801a09e:	b2db      	uxtb	r3, r3
 801a0a0:	009b      	lsls	r3, r3, #2
 801a0a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a0a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a0aa:	b29b      	uxth	r3, r3
 801a0ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a0ae:	429a      	cmp	r2, r3
 801a0b0:	f0c0 8146 	bcc.w	801a340 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a0b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a0b8:	b29b      	uxth	r3, r3
 801a0ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a0bc:	1ad3      	subs	r3, r2, r3
 801a0be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a0c0:	6878      	ldr	r0, [r7, #4]
 801a0c2:	f7f7 fab5 	bl	8011630 <pbuf_clen>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a0ca:	4b9f      	ldr	r3, [pc, #636]	; (801a348 <ip4_reass+0x2fc>)
 801a0cc:	881b      	ldrh	r3, [r3, #0]
 801a0ce:	461a      	mov	r2, r3
 801a0d0:	8c3b      	ldrh	r3, [r7, #32]
 801a0d2:	4413      	add	r3, r2
 801a0d4:	2b0a      	cmp	r3, #10
 801a0d6:	dd10      	ble.n	801a0fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0d8:	8c3b      	ldrh	r3, [r7, #32]
 801a0da:	4619      	mov	r1, r3
 801a0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0de:	f7ff fd81 	bl	8019be4 <ip_reass_remove_oldest_datagram>
 801a0e2:	4603      	mov	r3, r0
 801a0e4:	2b00      	cmp	r3, #0
 801a0e6:	f000 812d 	beq.w	801a344 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a0ea:	4b97      	ldr	r3, [pc, #604]	; (801a348 <ip4_reass+0x2fc>)
 801a0ec:	881b      	ldrh	r3, [r3, #0]
 801a0ee:	461a      	mov	r2, r3
 801a0f0:	8c3b      	ldrh	r3, [r7, #32]
 801a0f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0f4:	2b0a      	cmp	r3, #10
 801a0f6:	f300 8125 	bgt.w	801a344 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0fa:	4b94      	ldr	r3, [pc, #592]	; (801a34c <ip4_reass+0x300>)
 801a0fc:	681b      	ldr	r3, [r3, #0]
 801a0fe:	633b      	str	r3, [r7, #48]	; 0x30
 801a100:	e015      	b.n	801a12e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a104:	695a      	ldr	r2, [r3, #20]
 801a106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a108:	68db      	ldr	r3, [r3, #12]
 801a10a:	429a      	cmp	r2, r3
 801a10c:	d10c      	bne.n	801a128 <ip4_reass+0xdc>
 801a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a110:	699a      	ldr	r2, [r3, #24]
 801a112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a114:	691b      	ldr	r3, [r3, #16]
 801a116:	429a      	cmp	r2, r3
 801a118:	d106      	bne.n	801a128 <ip4_reass+0xdc>
 801a11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a11c:	899a      	ldrh	r2, [r3, #12]
 801a11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a120:	889b      	ldrh	r3, [r3, #4]
 801a122:	b29b      	uxth	r3, r3
 801a124:	429a      	cmp	r2, r3
 801a126:	d006      	beq.n	801a136 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	633b      	str	r3, [r7, #48]	; 0x30
 801a12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a130:	2b00      	cmp	r3, #0
 801a132:	d1e6      	bne.n	801a102 <ip4_reass+0xb6>
 801a134:	e000      	b.n	801a138 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a136:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a13a:	2b00      	cmp	r3, #0
 801a13c:	d109      	bne.n	801a152 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a13e:	8c3b      	ldrh	r3, [r7, #32]
 801a140:	4619      	mov	r1, r3
 801a142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a144:	f7ff fdb0 	bl	8019ca8 <ip_reass_enqueue_new_datagram>
 801a148:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d11c      	bne.n	801a18a <ip4_reass+0x13e>
      goto nullreturn;
 801a150:	e109      	b.n	801a366 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a154:	88db      	ldrh	r3, [r3, #6]
 801a156:	b29b      	uxth	r3, r3
 801a158:	4618      	mov	r0, r3
 801a15a:	f7f5 fd31 	bl	800fbc0 <lwip_htons>
 801a15e:	4603      	mov	r3, r0
 801a160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a164:	2b00      	cmp	r3, #0
 801a166:	d110      	bne.n	801a18a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a16a:	89db      	ldrh	r3, [r3, #14]
 801a16c:	4618      	mov	r0, r3
 801a16e:	f7f5 fd27 	bl	800fbc0 <lwip_htons>
 801a172:	4603      	mov	r3, r0
 801a174:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a178:	2b00      	cmp	r3, #0
 801a17a:	d006      	beq.n	801a18a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a17e:	3308      	adds	r3, #8
 801a180:	2214      	movs	r2, #20
 801a182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a184:	4618      	mov	r0, r3
 801a186:	f000 fd88 	bl	801ac9a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a18c:	88db      	ldrh	r3, [r3, #6]
 801a18e:	b29b      	uxth	r3, r3
 801a190:	f003 0320 	and.w	r3, r3, #32
 801a194:	2b00      	cmp	r3, #0
 801a196:	bf0c      	ite	eq
 801a198:	2301      	moveq	r3, #1
 801a19a:	2300      	movne	r3, #0
 801a19c:	b2db      	uxtb	r3, r3
 801a19e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a1a0:	69fb      	ldr	r3, [r7, #28]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d00e      	beq.n	801a1c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a1a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a1a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1aa:	4413      	add	r3, r2
 801a1ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a1ae:	8b7a      	ldrh	r2, [r7, #26]
 801a1b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a1b2:	429a      	cmp	r2, r3
 801a1b4:	f0c0 80a0 	bcc.w	801a2f8 <ip4_reass+0x2ac>
 801a1b8:	8b7b      	ldrh	r3, [r7, #26]
 801a1ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a1be:	4293      	cmp	r3, r2
 801a1c0:	f200 809a 	bhi.w	801a2f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a1c4:	69fa      	ldr	r2, [r7, #28]
 801a1c6:	6879      	ldr	r1, [r7, #4]
 801a1c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a1ca:	f7ff fdd5 	bl	8019d78 <ip_reass_chain_frag_into_datagram_and_validate>
 801a1ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a1d0:	697b      	ldr	r3, [r7, #20]
 801a1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1d6:	f000 8091 	beq.w	801a2fc <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a1da:	4b5b      	ldr	r3, [pc, #364]	; (801a348 <ip4_reass+0x2fc>)
 801a1dc:	881a      	ldrh	r2, [r3, #0]
 801a1de:	8c3b      	ldrh	r3, [r7, #32]
 801a1e0:	4413      	add	r3, r2
 801a1e2:	b29a      	uxth	r2, r3
 801a1e4:	4b58      	ldr	r3, [pc, #352]	; (801a348 <ip4_reass+0x2fc>)
 801a1e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a1e8:	69fb      	ldr	r3, [r7, #28]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d00d      	beq.n	801a20a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a1ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a1f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1f2:	4413      	add	r3, r2
 801a1f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f8:	8a7a      	ldrh	r2, [r7, #18]
 801a1fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1fe:	7f9b      	ldrb	r3, [r3, #30]
 801a200:	f043 0301 	orr.w	r3, r3, #1
 801a204:	b2da      	uxtb	r2, r3
 801a206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a208:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a20a:	697b      	ldr	r3, [r7, #20]
 801a20c:	2b01      	cmp	r3, #1
 801a20e:	d171      	bne.n	801a2f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a212:	8b9b      	ldrh	r3, [r3, #28]
 801a214:	3314      	adds	r3, #20
 801a216:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a21a:	685b      	ldr	r3, [r3, #4]
 801a21c:	685b      	ldr	r3, [r3, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a224:	685b      	ldr	r3, [r3, #4]
 801a226:	685b      	ldr	r3, [r3, #4]
 801a228:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a22c:	3308      	adds	r3, #8
 801a22e:	2214      	movs	r2, #20
 801a230:	4619      	mov	r1, r3
 801a232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a234:	f000 fd31 	bl	801ac9a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a238:	8a3b      	ldrh	r3, [r7, #16]
 801a23a:	4618      	mov	r0, r3
 801a23c:	f7f5 fcc0 	bl	800fbc0 <lwip_htons>
 801a240:	4603      	mov	r3, r0
 801a242:	461a      	mov	r2, r3
 801a244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a246:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a24a:	2200      	movs	r2, #0
 801a24c:	719a      	strb	r2, [r3, #6]
 801a24e:	2200      	movs	r2, #0
 801a250:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a254:	2200      	movs	r2, #0
 801a256:	729a      	strb	r2, [r3, #10]
 801a258:	2200      	movs	r2, #0
 801a25a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a25e:	685b      	ldr	r3, [r3, #4]
 801a260:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a262:	e00d      	b.n	801a280 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a266:	685b      	ldr	r3, [r3, #4]
 801a268:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a26a:	2114      	movs	r1, #20
 801a26c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a26e:	f7f7 f8cb 	bl	8011408 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a272:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a274:	6878      	ldr	r0, [r7, #4]
 801a276:	f7f7 fa1b 	bl	80116b0 <pbuf_cat>
      r = iprh->next_pbuf;
 801a27a:	68fb      	ldr	r3, [r7, #12]
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a282:	2b00      	cmp	r3, #0
 801a284:	d1ee      	bne.n	801a264 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a286:	4b31      	ldr	r3, [pc, #196]	; (801a34c <ip4_reass+0x300>)
 801a288:	681b      	ldr	r3, [r3, #0]
 801a28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a28c:	429a      	cmp	r2, r3
 801a28e:	d102      	bne.n	801a296 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a290:	2300      	movs	r3, #0
 801a292:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a294:	e010      	b.n	801a2b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a296:	4b2d      	ldr	r3, [pc, #180]	; (801a34c <ip4_reass+0x300>)
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a29c:	e007      	b.n	801a2ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a2a4:	429a      	cmp	r2, r3
 801a2a6:	d006      	beq.n	801a2b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d1f4      	bne.n	801a29e <ip4_reass+0x252>
 801a2b4:	e000      	b.n	801a2b8 <ip4_reass+0x26c>
          break;
 801a2b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a2b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a2ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a2bc:	f7ff fd2e 	bl	8019d1c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a2c0:	6878      	ldr	r0, [r7, #4]
 801a2c2:	f7f7 f9b5 	bl	8011630 <pbuf_clen>
 801a2c6:	4603      	mov	r3, r0
 801a2c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a2ca:	4b1f      	ldr	r3, [pc, #124]	; (801a348 <ip4_reass+0x2fc>)
 801a2cc:	881b      	ldrh	r3, [r3, #0]
 801a2ce:	8c3a      	ldrh	r2, [r7, #32]
 801a2d0:	429a      	cmp	r2, r3
 801a2d2:	d906      	bls.n	801a2e2 <ip4_reass+0x296>
 801a2d4:	4b1e      	ldr	r3, [pc, #120]	; (801a350 <ip4_reass+0x304>)
 801a2d6:	f240 229b 	movw	r2, #667	; 0x29b
 801a2da:	491e      	ldr	r1, [pc, #120]	; (801a354 <ip4_reass+0x308>)
 801a2dc:	481e      	ldr	r0, [pc, #120]	; (801a358 <ip4_reass+0x30c>)
 801a2de:	f000 fd4d 	bl	801ad7c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a2e2:	4b19      	ldr	r3, [pc, #100]	; (801a348 <ip4_reass+0x2fc>)
 801a2e4:	881a      	ldrh	r2, [r3, #0]
 801a2e6:	8c3b      	ldrh	r3, [r7, #32]
 801a2e8:	1ad3      	subs	r3, r2, r3
 801a2ea:	b29a      	uxth	r2, r3
 801a2ec:	4b16      	ldr	r3, [pc, #88]	; (801a348 <ip4_reass+0x2fc>)
 801a2ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	e03c      	b.n	801a36e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a2f4:	2300      	movs	r3, #0
 801a2f6:	e03a      	b.n	801a36e <ip4_reass+0x322>
      goto nullreturn_ipr;
 801a2f8:	bf00      	nop
 801a2fa:	e000      	b.n	801a2fe <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801a2fc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a300:	2b00      	cmp	r3, #0
 801a302:	d106      	bne.n	801a312 <ip4_reass+0x2c6>
 801a304:	4b12      	ldr	r3, [pc, #72]	; (801a350 <ip4_reass+0x304>)
 801a306:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a30a:	4914      	ldr	r1, [pc, #80]	; (801a35c <ip4_reass+0x310>)
 801a30c:	4812      	ldr	r0, [pc, #72]	; (801a358 <ip4_reass+0x30c>)
 801a30e:	f000 fd35 	bl	801ad7c <iprintf>
  if (ipr->p == NULL) {
 801a312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a314:	685b      	ldr	r3, [r3, #4]
 801a316:	2b00      	cmp	r3, #0
 801a318:	d124      	bne.n	801a364 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a31a:	4b0c      	ldr	r3, [pc, #48]	; (801a34c <ip4_reass+0x300>)
 801a31c:	681b      	ldr	r3, [r3, #0]
 801a31e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a320:	429a      	cmp	r2, r3
 801a322:	d006      	beq.n	801a332 <ip4_reass+0x2e6>
 801a324:	4b0a      	ldr	r3, [pc, #40]	; (801a350 <ip4_reass+0x304>)
 801a326:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a32a:	490d      	ldr	r1, [pc, #52]	; (801a360 <ip4_reass+0x314>)
 801a32c:	480a      	ldr	r0, [pc, #40]	; (801a358 <ip4_reass+0x30c>)
 801a32e:	f000 fd25 	bl	801ad7c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a332:	2100      	movs	r1, #0
 801a334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a336:	f7ff fcf1 	bl	8019d1c <ip_reass_dequeue_datagram>
 801a33a:	e014      	b.n	801a366 <ip4_reass+0x31a>
    goto nullreturn;
 801a33c:	bf00      	nop
 801a33e:	e012      	b.n	801a366 <ip4_reass+0x31a>
    goto nullreturn;
 801a340:	bf00      	nop
 801a342:	e010      	b.n	801a366 <ip4_reass+0x31a>
      goto nullreturn;
 801a344:	bf00      	nop
 801a346:	e00e      	b.n	801a366 <ip4_reass+0x31a>
 801a348:	24004c44 	.word	0x24004c44
 801a34c:	24004c40 	.word	0x24004c40
 801a350:	0801e63c 	.word	0x0801e63c
 801a354:	0801e7ac 	.word	0x0801e7ac
 801a358:	0801e684 	.word	0x0801e684
 801a35c:	0801e7c8 	.word	0x0801e7c8
 801a360:	0801e7d4 	.word	0x0801e7d4
  }

nullreturn:
 801a364:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a366:	6878      	ldr	r0, [r7, #4]
 801a368:	f7f7 f8d4 	bl	8011514 <pbuf_free>
  return NULL;
 801a36c:	2300      	movs	r3, #0
}
 801a36e:	4618      	mov	r0, r3
 801a370:	3738      	adds	r7, #56	; 0x38
 801a372:	46bd      	mov	sp, r7
 801a374:	bd80      	pop	{r7, pc}
 801a376:	bf00      	nop

0801a378 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a378:	b580      	push	{r7, lr}
 801a37a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a37c:	2005      	movs	r0, #5
 801a37e:	f7f6 f9af 	bl	80106e0 <memp_malloc>
 801a382:	4603      	mov	r3, r0
}
 801a384:	4618      	mov	r0, r3
 801a386:	bd80      	pop	{r7, pc}

0801a388 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a388:	b580      	push	{r7, lr}
 801a38a:	b082      	sub	sp, #8
 801a38c:	af00      	add	r7, sp, #0
 801a38e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d106      	bne.n	801a3a4 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a396:	4b07      	ldr	r3, [pc, #28]	; (801a3b4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a398:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a39c:	4906      	ldr	r1, [pc, #24]	; (801a3b8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a39e:	4807      	ldr	r0, [pc, #28]	; (801a3bc <ip_frag_free_pbuf_custom_ref+0x34>)
 801a3a0:	f000 fcec 	bl	801ad7c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a3a4:	6879      	ldr	r1, [r7, #4]
 801a3a6:	2005      	movs	r0, #5
 801a3a8:	f7f6 fa10 	bl	80107cc <memp_free>
}
 801a3ac:	bf00      	nop
 801a3ae:	3708      	adds	r7, #8
 801a3b0:	46bd      	mov	sp, r7
 801a3b2:	bd80      	pop	{r7, pc}
 801a3b4:	0801e63c 	.word	0x0801e63c
 801a3b8:	0801e7f4 	.word	0x0801e7f4
 801a3bc:	0801e684 	.word	0x0801e684

0801a3c0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a3c0:	b580      	push	{r7, lr}
 801a3c2:	b084      	sub	sp, #16
 801a3c4:	af00      	add	r7, sp, #0
 801a3c6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d106      	bne.n	801a3e0 <ipfrag_free_pbuf_custom+0x20>
 801a3d2:	4b11      	ldr	r3, [pc, #68]	; (801a418 <ipfrag_free_pbuf_custom+0x58>)
 801a3d4:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a3d8:	4910      	ldr	r1, [pc, #64]	; (801a41c <ipfrag_free_pbuf_custom+0x5c>)
 801a3da:	4811      	ldr	r0, [pc, #68]	; (801a420 <ipfrag_free_pbuf_custom+0x60>)
 801a3dc:	f000 fcce 	bl	801ad7c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a3e0:	68fa      	ldr	r2, [r7, #12]
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	429a      	cmp	r2, r3
 801a3e6:	d006      	beq.n	801a3f6 <ipfrag_free_pbuf_custom+0x36>
 801a3e8:	4b0b      	ldr	r3, [pc, #44]	; (801a418 <ipfrag_free_pbuf_custom+0x58>)
 801a3ea:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a3ee:	490d      	ldr	r1, [pc, #52]	; (801a424 <ipfrag_free_pbuf_custom+0x64>)
 801a3f0:	480b      	ldr	r0, [pc, #44]	; (801a420 <ipfrag_free_pbuf_custom+0x60>)
 801a3f2:	f000 fcc3 	bl	801ad7c <iprintf>
  if (pcr->original != NULL) {
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	695b      	ldr	r3, [r3, #20]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d004      	beq.n	801a408 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a3fe:	68fb      	ldr	r3, [r7, #12]
 801a400:	695b      	ldr	r3, [r3, #20]
 801a402:	4618      	mov	r0, r3
 801a404:	f7f7 f886 	bl	8011514 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a408:	68f8      	ldr	r0, [r7, #12]
 801a40a:	f7ff ffbd 	bl	801a388 <ip_frag_free_pbuf_custom_ref>
}
 801a40e:	bf00      	nop
 801a410:	3710      	adds	r7, #16
 801a412:	46bd      	mov	sp, r7
 801a414:	bd80      	pop	{r7, pc}
 801a416:	bf00      	nop
 801a418:	0801e63c 	.word	0x0801e63c
 801a41c:	0801e800 	.word	0x0801e800
 801a420:	0801e684 	.word	0x0801e684
 801a424:	0801e80c 	.word	0x0801e80c

0801a428 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a428:	b580      	push	{r7, lr}
 801a42a:	b094      	sub	sp, #80	; 0x50
 801a42c:	af02      	add	r7, sp, #8
 801a42e:	60f8      	str	r0, [r7, #12]
 801a430:	60b9      	str	r1, [r7, #8]
 801a432:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a434:	2300      	movs	r3, #0
 801a436:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a43a:	68bb      	ldr	r3, [r7, #8]
 801a43c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a43e:	3b14      	subs	r3, #20
 801a440:	2b00      	cmp	r3, #0
 801a442:	da00      	bge.n	801a446 <ip4_frag+0x1e>
 801a444:	3307      	adds	r3, #7
 801a446:	10db      	asrs	r3, r3, #3
 801a448:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a44a:	2314      	movs	r3, #20
 801a44c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a44e:	68fb      	ldr	r3, [r7, #12]
 801a450:	685b      	ldr	r3, [r3, #4]
 801a452:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a456:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a45a:	781b      	ldrb	r3, [r3, #0]
 801a45c:	f003 030f 	and.w	r3, r3, #15
 801a460:	b2db      	uxtb	r3, r3
 801a462:	009b      	lsls	r3, r3, #2
 801a464:	b2db      	uxtb	r3, r3
 801a466:	2b14      	cmp	r3, #20
 801a468:	d002      	beq.n	801a470 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a46a:	f06f 0305 	mvn.w	r3, #5
 801a46e:	e110      	b.n	801a692 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	895b      	ldrh	r3, [r3, #10]
 801a474:	2b13      	cmp	r3, #19
 801a476:	d809      	bhi.n	801a48c <ip4_frag+0x64>
 801a478:	4b88      	ldr	r3, [pc, #544]	; (801a69c <ip4_frag+0x274>)
 801a47a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a47e:	4988      	ldr	r1, [pc, #544]	; (801a6a0 <ip4_frag+0x278>)
 801a480:	4888      	ldr	r0, [pc, #544]	; (801a6a4 <ip4_frag+0x27c>)
 801a482:	f000 fc7b 	bl	801ad7c <iprintf>
 801a486:	f06f 0305 	mvn.w	r3, #5
 801a48a:	e102      	b.n	801a692 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a48e:	88db      	ldrh	r3, [r3, #6]
 801a490:	b29b      	uxth	r3, r3
 801a492:	4618      	mov	r0, r3
 801a494:	f7f5 fb94 	bl	800fbc0 <lwip_htons>
 801a498:	4603      	mov	r3, r0
 801a49a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a49c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a49e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a4a2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a4a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a4a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a4ac:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	891b      	ldrh	r3, [r3, #8]
 801a4b2:	3b14      	subs	r3, #20
 801a4b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a4b8:	e0e1      	b.n	801a67e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a4ba:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a4bc:	00db      	lsls	r3, r3, #3
 801a4be:	b29b      	uxth	r3, r3
 801a4c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a4c4:	4293      	cmp	r3, r2
 801a4c6:	bf28      	it	cs
 801a4c8:	4613      	movcs	r3, r2
 801a4ca:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a4cc:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a4d0:	2114      	movs	r1, #20
 801a4d2:	200e      	movs	r0, #14
 801a4d4:	f7f6 fd3a 	bl	8010f4c <pbuf_alloc>
 801a4d8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	f000 80d5 	beq.w	801a68c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e4:	895b      	ldrh	r3, [r3, #10]
 801a4e6:	2b13      	cmp	r3, #19
 801a4e8:	d806      	bhi.n	801a4f8 <ip4_frag+0xd0>
 801a4ea:	4b6c      	ldr	r3, [pc, #432]	; (801a69c <ip4_frag+0x274>)
 801a4ec:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a4f0:	496d      	ldr	r1, [pc, #436]	; (801a6a8 <ip4_frag+0x280>)
 801a4f2:	486c      	ldr	r0, [pc, #432]	; (801a6a4 <ip4_frag+0x27c>)
 801a4f4:	f000 fc42 	bl	801ad7c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a4f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4fa:	685b      	ldr	r3, [r3, #4]
 801a4fc:	2214      	movs	r2, #20
 801a4fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a500:	4618      	mov	r0, r3
 801a502:	f000 fbca 	bl	801ac9a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a508:	685b      	ldr	r3, [r3, #4]
 801a50a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a50c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a50e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a512:	e064      	b.n	801a5de <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	895a      	ldrh	r2, [r3, #10]
 801a518:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a51a:	1ad3      	subs	r3, r2, r3
 801a51c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a51e:	68fb      	ldr	r3, [r7, #12]
 801a520:	895b      	ldrh	r3, [r3, #10]
 801a522:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a524:	429a      	cmp	r2, r3
 801a526:	d906      	bls.n	801a536 <ip4_frag+0x10e>
 801a528:	4b5c      	ldr	r3, [pc, #368]	; (801a69c <ip4_frag+0x274>)
 801a52a:	f240 322d 	movw	r2, #813	; 0x32d
 801a52e:	495f      	ldr	r1, [pc, #380]	; (801a6ac <ip4_frag+0x284>)
 801a530:	485c      	ldr	r0, [pc, #368]	; (801a6a4 <ip4_frag+0x27c>)
 801a532:	f000 fc23 	bl	801ad7c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a536:	8bfa      	ldrh	r2, [r7, #30]
 801a538:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a53c:	4293      	cmp	r3, r2
 801a53e:	bf28      	it	cs
 801a540:	4613      	movcs	r3, r2
 801a542:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a546:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d105      	bne.n	801a55a <ip4_frag+0x132>
        poff = 0;
 801a54e:	2300      	movs	r3, #0
 801a550:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	60fb      	str	r3, [r7, #12]
        continue;
 801a558:	e041      	b.n	801a5de <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a55a:	f7ff ff0d 	bl	801a378 <ip_frag_alloc_pbuf_custom_ref>
 801a55e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a560:	69bb      	ldr	r3, [r7, #24]
 801a562:	2b00      	cmp	r3, #0
 801a564:	d103      	bne.n	801a56e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a566:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a568:	f7f6 ffd4 	bl	8011514 <pbuf_free>
        goto memerr;
 801a56c:	e08f      	b.n	801a68e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a56e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a570:	68fb      	ldr	r3, [r7, #12]
 801a572:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a574:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a576:	4413      	add	r3, r2
 801a578:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a57c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a580:	9201      	str	r2, [sp, #4]
 801a582:	9300      	str	r3, [sp, #0]
 801a584:	4603      	mov	r3, r0
 801a586:	2241      	movs	r2, #65	; 0x41
 801a588:	2000      	movs	r0, #0
 801a58a:	f7f6 fe09 	bl	80111a0 <pbuf_alloced_custom>
 801a58e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a590:	697b      	ldr	r3, [r7, #20]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d106      	bne.n	801a5a4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a596:	69b8      	ldr	r0, [r7, #24]
 801a598:	f7ff fef6 	bl	801a388 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a59c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a59e:	f7f6 ffb9 	bl	8011514 <pbuf_free>
        goto memerr;
 801a5a2:	e074      	b.n	801a68e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a5a4:	68f8      	ldr	r0, [r7, #12]
 801a5a6:	f7f7 f85b 	bl	8011660 <pbuf_ref>
      pcr->original = p;
 801a5aa:	69bb      	ldr	r3, [r7, #24]
 801a5ac:	68fa      	ldr	r2, [r7, #12]
 801a5ae:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a5b0:	69bb      	ldr	r3, [r7, #24]
 801a5b2:	4a3f      	ldr	r2, [pc, #252]	; (801a6b0 <ip4_frag+0x288>)
 801a5b4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a5b6:	6979      	ldr	r1, [r7, #20]
 801a5b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a5ba:	f7f7 f879 	bl	80116b0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a5be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a5c2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5c6:	1ad3      	subs	r3, r2, r3
 801a5c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a5cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	d004      	beq.n	801a5de <ip4_frag+0x1b6>
        poff = 0;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	681b      	ldr	r3, [r3, #0]
 801a5dc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a5de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5e2:	2b00      	cmp	r3, #0
 801a5e4:	d196      	bne.n	801a514 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a5e6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a5e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5ec:	4413      	add	r3, r2
 801a5ee:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a5f0:	68bb      	ldr	r3, [r7, #8]
 801a5f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a5f4:	f1a3 0213 	sub.w	r2, r3, #19
 801a5f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a5fc:	429a      	cmp	r2, r3
 801a5fe:	bfcc      	ite	gt
 801a600:	2301      	movgt	r3, #1
 801a602:	2300      	movle	r3, #0
 801a604:	b2db      	uxtb	r3, r3
 801a606:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a608:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a60c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a610:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a612:	6a3b      	ldr	r3, [r7, #32]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d002      	beq.n	801a61e <ip4_frag+0x1f6>
 801a618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a61a:	2b00      	cmp	r3, #0
 801a61c:	d003      	beq.n	801a626 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a61e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a620:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a624:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a626:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a628:	4618      	mov	r0, r3
 801a62a:	f7f5 fac9 	bl	800fbc0 <lwip_htons>
 801a62e:	4603      	mov	r3, r0
 801a630:	461a      	mov	r2, r3
 801a632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a634:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a638:	3314      	adds	r3, #20
 801a63a:	b29b      	uxth	r3, r3
 801a63c:	4618      	mov	r0, r3
 801a63e:	f7f5 fabf 	bl	800fbc0 <lwip_htons>
 801a642:	4603      	mov	r3, r0
 801a644:	461a      	mov	r2, r3
 801a646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a648:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a64c:	2200      	movs	r2, #0
 801a64e:	729a      	strb	r2, [r3, #10]
 801a650:	2200      	movs	r2, #0
 801a652:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a654:	68bb      	ldr	r3, [r7, #8]
 801a656:	695b      	ldr	r3, [r3, #20]
 801a658:	687a      	ldr	r2, [r7, #4]
 801a65a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a65c:	68b8      	ldr	r0, [r7, #8]
 801a65e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a660:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a662:	f7f6 ff57 	bl	8011514 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a666:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a66a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a66c:	1ad3      	subs	r3, r2, r3
 801a66e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a672:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a676:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a678:	4413      	add	r3, r2
 801a67a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a67e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a682:	2b00      	cmp	r3, #0
 801a684:	f47f af19 	bne.w	801a4ba <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a688:	2300      	movs	r3, #0
 801a68a:	e002      	b.n	801a692 <ip4_frag+0x26a>
      goto memerr;
 801a68c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a68e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a692:	4618      	mov	r0, r3
 801a694:	3748      	adds	r7, #72	; 0x48
 801a696:	46bd      	mov	sp, r7
 801a698:	bd80      	pop	{r7, pc}
 801a69a:	bf00      	nop
 801a69c:	0801e63c 	.word	0x0801e63c
 801a6a0:	0801e818 	.word	0x0801e818
 801a6a4:	0801e684 	.word	0x0801e684
 801a6a8:	0801e834 	.word	0x0801e834
 801a6ac:	0801e854 	.word	0x0801e854
 801a6b0:	0801a3c1 	.word	0x0801a3c1

0801a6b4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a6b4:	b580      	push	{r7, lr}
 801a6b6:	b086      	sub	sp, #24
 801a6b8:	af00      	add	r7, sp, #0
 801a6ba:	6078      	str	r0, [r7, #4]
 801a6bc:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a6be:	230e      	movs	r3, #14
 801a6c0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	895b      	ldrh	r3, [r3, #10]
 801a6c6:	2b0e      	cmp	r3, #14
 801a6c8:	d96e      	bls.n	801a7a8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	7bdb      	ldrb	r3, [r3, #15]
 801a6ce:	2b00      	cmp	r3, #0
 801a6d0:	d106      	bne.n	801a6e0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a6d2:	683b      	ldr	r3, [r7, #0]
 801a6d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a6d8:	3301      	adds	r3, #1
 801a6da:	b2da      	uxtb	r2, r3
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	685b      	ldr	r3, [r3, #4]
 801a6e4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	7b1a      	ldrb	r2, [r3, #12]
 801a6ea:	7b5b      	ldrb	r3, [r3, #13]
 801a6ec:	021b      	lsls	r3, r3, #8
 801a6ee:	4313      	orrs	r3, r2
 801a6f0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a6f2:	693b      	ldr	r3, [r7, #16]
 801a6f4:	781b      	ldrb	r3, [r3, #0]
 801a6f6:	f003 0301 	and.w	r3, r3, #1
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	d023      	beq.n	801a746 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a6fe:	693b      	ldr	r3, [r7, #16]
 801a700:	781b      	ldrb	r3, [r3, #0]
 801a702:	2b01      	cmp	r3, #1
 801a704:	d10f      	bne.n	801a726 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a706:	693b      	ldr	r3, [r7, #16]
 801a708:	785b      	ldrb	r3, [r3, #1]
 801a70a:	2b00      	cmp	r3, #0
 801a70c:	d11b      	bne.n	801a746 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a70e:	693b      	ldr	r3, [r7, #16]
 801a710:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a712:	2b5e      	cmp	r3, #94	; 0x5e
 801a714:	d117      	bne.n	801a746 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	7b5b      	ldrb	r3, [r3, #13]
 801a71a:	f043 0310 	orr.w	r3, r3, #16
 801a71e:	b2da      	uxtb	r2, r3
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	735a      	strb	r2, [r3, #13]
 801a724:	e00f      	b.n	801a746 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a726:	693b      	ldr	r3, [r7, #16]
 801a728:	2206      	movs	r2, #6
 801a72a:	4928      	ldr	r1, [pc, #160]	; (801a7cc <ethernet_input+0x118>)
 801a72c:	4618      	mov	r0, r3
 801a72e:	f000 faa6 	bl	801ac7e <memcmp>
 801a732:	4603      	mov	r3, r0
 801a734:	2b00      	cmp	r3, #0
 801a736:	d106      	bne.n	801a746 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	7b5b      	ldrb	r3, [r3, #13]
 801a73c:	f043 0308 	orr.w	r3, r3, #8
 801a740:	b2da      	uxtb	r2, r3
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a746:	89fb      	ldrh	r3, [r7, #14]
 801a748:	2b08      	cmp	r3, #8
 801a74a:	d003      	beq.n	801a754 <ethernet_input+0xa0>
 801a74c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a750:	d014      	beq.n	801a77c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a752:	e032      	b.n	801a7ba <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a754:	683b      	ldr	r3, [r7, #0]
 801a756:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a75a:	f003 0308 	and.w	r3, r3, #8
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d024      	beq.n	801a7ac <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a762:	8afb      	ldrh	r3, [r7, #22]
 801a764:	4619      	mov	r1, r3
 801a766:	6878      	ldr	r0, [r7, #4]
 801a768:	f7f6 fe4e 	bl	8011408 <pbuf_remove_header>
 801a76c:	4603      	mov	r3, r0
 801a76e:	2b00      	cmp	r3, #0
 801a770:	d11e      	bne.n	801a7b0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a772:	6839      	ldr	r1, [r7, #0]
 801a774:	6878      	ldr	r0, [r7, #4]
 801a776:	f7fe fe95 	bl	80194a4 <ip4_input>
      break;
 801a77a:	e013      	b.n	801a7a4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a77c:	683b      	ldr	r3, [r7, #0]
 801a77e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a782:	f003 0308 	and.w	r3, r3, #8
 801a786:	2b00      	cmp	r3, #0
 801a788:	d014      	beq.n	801a7b4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a78a:	8afb      	ldrh	r3, [r7, #22]
 801a78c:	4619      	mov	r1, r3
 801a78e:	6878      	ldr	r0, [r7, #4]
 801a790:	f7f6 fe3a 	bl	8011408 <pbuf_remove_header>
 801a794:	4603      	mov	r3, r0
 801a796:	2b00      	cmp	r3, #0
 801a798:	d10e      	bne.n	801a7b8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a79a:	6839      	ldr	r1, [r7, #0]
 801a79c:	6878      	ldr	r0, [r7, #4]
 801a79e:	f7fe f80f 	bl	80187c0 <etharp_input>
      break;
 801a7a2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	e00c      	b.n	801a7c2 <ethernet_input+0x10e>
    goto free_and_return;
 801a7a8:	bf00      	nop
 801a7aa:	e006      	b.n	801a7ba <ethernet_input+0x106>
        goto free_and_return;
 801a7ac:	bf00      	nop
 801a7ae:	e004      	b.n	801a7ba <ethernet_input+0x106>
        goto free_and_return;
 801a7b0:	bf00      	nop
 801a7b2:	e002      	b.n	801a7ba <ethernet_input+0x106>
        goto free_and_return;
 801a7b4:	bf00      	nop
 801a7b6:	e000      	b.n	801a7ba <ethernet_input+0x106>
        goto free_and_return;
 801a7b8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a7ba:	6878      	ldr	r0, [r7, #4]
 801a7bc:	f7f6 feaa 	bl	8011514 <pbuf_free>
  return ERR_OK;
 801a7c0:	2300      	movs	r3, #0
}
 801a7c2:	4618      	mov	r0, r3
 801a7c4:	3718      	adds	r7, #24
 801a7c6:	46bd      	mov	sp, r7
 801a7c8:	bd80      	pop	{r7, pc}
 801a7ca:	bf00      	nop
 801a7cc:	0801f33c 	.word	0x0801f33c

0801a7d0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a7d0:	b580      	push	{r7, lr}
 801a7d2:	b086      	sub	sp, #24
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	60f8      	str	r0, [r7, #12]
 801a7d8:	60b9      	str	r1, [r7, #8]
 801a7da:	607a      	str	r2, [r7, #4]
 801a7dc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a7de:	8c3b      	ldrh	r3, [r7, #32]
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	f7f5 f9ed 	bl	800fbc0 <lwip_htons>
 801a7e6:	4603      	mov	r3, r0
 801a7e8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a7ea:	210e      	movs	r1, #14
 801a7ec:	68b8      	ldr	r0, [r7, #8]
 801a7ee:	f7f6 fdfb 	bl	80113e8 <pbuf_add_header>
 801a7f2:	4603      	mov	r3, r0
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	d125      	bne.n	801a844 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a7f8:	68bb      	ldr	r3, [r7, #8]
 801a7fa:	685b      	ldr	r3, [r3, #4]
 801a7fc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a7fe:	693b      	ldr	r3, [r7, #16]
 801a800:	8afa      	ldrh	r2, [r7, #22]
 801a802:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a804:	693b      	ldr	r3, [r7, #16]
 801a806:	2206      	movs	r2, #6
 801a808:	6839      	ldr	r1, [r7, #0]
 801a80a:	4618      	mov	r0, r3
 801a80c:	f000 fa45 	bl	801ac9a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a810:	693b      	ldr	r3, [r7, #16]
 801a812:	3306      	adds	r3, #6
 801a814:	2206      	movs	r2, #6
 801a816:	6879      	ldr	r1, [r7, #4]
 801a818:	4618      	mov	r0, r3
 801a81a:	f000 fa3e 	bl	801ac9a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a81e:	68fb      	ldr	r3, [r7, #12]
 801a820:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a824:	2b06      	cmp	r3, #6
 801a826:	d006      	beq.n	801a836 <ethernet_output+0x66>
 801a828:	4b0a      	ldr	r3, [pc, #40]	; (801a854 <ethernet_output+0x84>)
 801a82a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a82e:	490a      	ldr	r1, [pc, #40]	; (801a858 <ethernet_output+0x88>)
 801a830:	480a      	ldr	r0, [pc, #40]	; (801a85c <ethernet_output+0x8c>)
 801a832:	f000 faa3 	bl	801ad7c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	699b      	ldr	r3, [r3, #24]
 801a83a:	68b9      	ldr	r1, [r7, #8]
 801a83c:	68f8      	ldr	r0, [r7, #12]
 801a83e:	4798      	blx	r3
 801a840:	4603      	mov	r3, r0
 801a842:	e002      	b.n	801a84a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a844:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a846:	f06f 0301 	mvn.w	r3, #1
}
 801a84a:	4618      	mov	r0, r3
 801a84c:	3718      	adds	r7, #24
 801a84e:	46bd      	mov	sp, r7
 801a850:	bd80      	pop	{r7, pc}
 801a852:	bf00      	nop
 801a854:	0801e864 	.word	0x0801e864
 801a858:	0801e89c 	.word	0x0801e89c
 801a85c:	0801e8d0 	.word	0x0801e8d0

0801a860 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b082      	sub	sp, #8
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
 801a868:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801a86a:	683b      	ldr	r3, [r7, #0]
 801a86c:	2200      	movs	r2, #0
 801a86e:	2104      	movs	r1, #4
 801a870:	4618      	mov	r0, r3
 801a872:	f7f1 fc19 	bl	800c0a8 <osMessageQueueNew>
 801a876:	4602      	mov	r2, r0
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801a87c:	687b      	ldr	r3, [r7, #4]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	2b00      	cmp	r3, #0
 801a882:	d102      	bne.n	801a88a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801a884:	f04f 33ff 	mov.w	r3, #4294967295
 801a888:	e000      	b.n	801a88c <sys_mbox_new+0x2c>

  return ERR_OK;
 801a88a:	2300      	movs	r3, #0
}
 801a88c:	4618      	mov	r0, r3
 801a88e:	3708      	adds	r7, #8
 801a890:	46bd      	mov	sp, r7
 801a892:	bd80      	pop	{r7, pc}

0801a894 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801a894:	b580      	push	{r7, lr}
 801a896:	b084      	sub	sp, #16
 801a898:	af00      	add	r7, sp, #0
 801a89a:	6078      	str	r0, [r7, #4]
 801a89c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	6818      	ldr	r0, [r3, #0]
 801a8a2:	4639      	mov	r1, r7
 801a8a4:	2300      	movs	r3, #0
 801a8a6:	2200      	movs	r2, #0
 801a8a8:	f7f1 fc72 	bl	800c190 <osMessageQueuePut>
 801a8ac:	4603      	mov	r3, r0
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	d102      	bne.n	801a8b8 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	73fb      	strb	r3, [r7, #15]
 801a8b6:	e001      	b.n	801a8bc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801a8b8:	23ff      	movs	r3, #255	; 0xff
 801a8ba:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801a8bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	3710      	adds	r7, #16
 801a8c4:	46bd      	mov	sp, r7
 801a8c6:	bd80      	pop	{r7, pc}

0801a8c8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801a8c8:	b580      	push	{r7, lr}
 801a8ca:	b086      	sub	sp, #24
 801a8cc:	af00      	add	r7, sp, #0
 801a8ce:	60f8      	str	r0, [r7, #12]
 801a8d0:	60b9      	str	r1, [r7, #8]
 801a8d2:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801a8d4:	f7f1 f8f8 	bl	800bac8 <osKernelGetTickCount>
 801a8d8:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d013      	beq.n	801a908 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	6818      	ldr	r0, [r3, #0]
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	68b9      	ldr	r1, [r7, #8]
 801a8ea:	f7f1 fcb1 	bl	800c250 <osMessageQueueGet>
 801a8ee:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801a8f0:	693b      	ldr	r3, [r7, #16]
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d105      	bne.n	801a902 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801a8f6:	f7f1 f8e7 	bl	800bac8 <osKernelGetTickCount>
 801a8fa:	4602      	mov	r2, r0
 801a8fc:	697b      	ldr	r3, [r7, #20]
 801a8fe:	1ad3      	subs	r3, r2, r3
 801a900:	e00f      	b.n	801a922 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a902:	f04f 33ff 	mov.w	r3, #4294967295
 801a906:	e00c      	b.n	801a922 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	6818      	ldr	r0, [r3, #0]
 801a90c:	f04f 33ff 	mov.w	r3, #4294967295
 801a910:	2200      	movs	r2, #0
 801a912:	68b9      	ldr	r1, [r7, #8]
 801a914:	f7f1 fc9c 	bl	800c250 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801a918:	f7f1 f8d6 	bl	800bac8 <osKernelGetTickCount>
 801a91c:	4602      	mov	r2, r0
 801a91e:	697b      	ldr	r3, [r7, #20]
 801a920:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801a922:	4618      	mov	r0, r3
 801a924:	3718      	adds	r7, #24
 801a926:	46bd      	mov	sp, r7
 801a928:	bd80      	pop	{r7, pc}

0801a92a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a92a:	b480      	push	{r7}
 801a92c:	b083      	sub	sp, #12
 801a92e:	af00      	add	r7, sp, #0
 801a930:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d101      	bne.n	801a93e <sys_mbox_valid+0x14>
    return 0;
 801a93a:	2300      	movs	r3, #0
 801a93c:	e000      	b.n	801a940 <sys_mbox_valid+0x16>
  else
    return 1;
 801a93e:	2301      	movs	r3, #1
}
 801a940:	4618      	mov	r0, r3
 801a942:	370c      	adds	r7, #12
 801a944:	46bd      	mov	sp, r7
 801a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a94a:	4770      	bx	lr

0801a94c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801a950:	2000      	movs	r0, #0
 801a952:	f7f1 f97b 	bl	800bc4c <osMutexNew>
 801a956:	4603      	mov	r3, r0
 801a958:	4a01      	ldr	r2, [pc, #4]	; (801a960 <sys_init+0x14>)
 801a95a:	6013      	str	r3, [r2, #0]
#endif
}
 801a95c:	bf00      	nop
 801a95e:	bd80      	pop	{r7, pc}
 801a960:	24008290 	.word	0x24008290

0801a964 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a964:	b580      	push	{r7, lr}
 801a966:	b082      	sub	sp, #8
 801a968:	af00      	add	r7, sp, #0
 801a96a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801a96c:	2000      	movs	r0, #0
 801a96e:	f7f1 f96d 	bl	800bc4c <osMutexNew>
 801a972:	4602      	mov	r2, r0
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	681b      	ldr	r3, [r3, #0]
 801a97c:	2b00      	cmp	r3, #0
 801a97e:	d102      	bne.n	801a986 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a980:	f04f 33ff 	mov.w	r3, #4294967295
 801a984:	e000      	b.n	801a988 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a986:	2300      	movs	r3, #0
}
 801a988:	4618      	mov	r0, r3
 801a98a:	3708      	adds	r7, #8
 801a98c:	46bd      	mov	sp, r7
 801a98e:	bd80      	pop	{r7, pc}

0801a990 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a990:	b580      	push	{r7, lr}
 801a992:	b082      	sub	sp, #8
 801a994:	af00      	add	r7, sp, #0
 801a996:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801a998:	687b      	ldr	r3, [r7, #4]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	f04f 31ff 	mov.w	r1, #4294967295
 801a9a0:	4618      	mov	r0, r3
 801a9a2:	f7f1 f9d9 	bl	800bd58 <osMutexAcquire>
#endif
}
 801a9a6:	bf00      	nop
 801a9a8:	3708      	adds	r7, #8
 801a9aa:	46bd      	mov	sp, r7
 801a9ac:	bd80      	pop	{r7, pc}

0801a9ae <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a9ae:	b580      	push	{r7, lr}
 801a9b0:	b082      	sub	sp, #8
 801a9b2:	af00      	add	r7, sp, #0
 801a9b4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a9b6:	687b      	ldr	r3, [r7, #4]
 801a9b8:	681b      	ldr	r3, [r3, #0]
 801a9ba:	4618      	mov	r0, r3
 801a9bc:	f7f1 fa17 	bl	800bdee <osMutexRelease>
}
 801a9c0:	bf00      	nop
 801a9c2:	3708      	adds	r7, #8
 801a9c4:	46bd      	mov	sp, r7
 801a9c6:	bd80      	pop	{r7, pc}

0801a9c8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a9c8:	b580      	push	{r7, lr}
 801a9ca:	b08e      	sub	sp, #56	; 0x38
 801a9cc:	af00      	add	r7, sp, #0
 801a9ce:	60f8      	str	r0, [r7, #12]
 801a9d0:	60b9      	str	r1, [r7, #8]
 801a9d2:	607a      	str	r2, [r7, #4]
 801a9d4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801a9d6:	f107 0314 	add.w	r3, r7, #20
 801a9da:	2224      	movs	r2, #36	; 0x24
 801a9dc:	2100      	movs	r1, #0
 801a9de:	4618      	mov	r0, r3
 801a9e0:	f000 f969 	bl	801acb6 <memset>
 801a9e4:	68fb      	ldr	r3, [r7, #12]
 801a9e6:	617b      	str	r3, [r7, #20]
 801a9e8:	683b      	ldr	r3, [r7, #0]
 801a9ea:	62bb      	str	r3, [r7, #40]	; 0x28
 801a9ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a9ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801a9f0:	f107 0314 	add.w	r3, r7, #20
 801a9f4:	461a      	mov	r2, r3
 801a9f6:	6879      	ldr	r1, [r7, #4]
 801a9f8:	68b8      	ldr	r0, [r7, #8]
 801a9fa:	f7f1 f87a 	bl	800baf2 <osThreadNew>
 801a9fe:	4603      	mov	r3, r0
#endif
}
 801aa00:	4618      	mov	r0, r3
 801aa02:	3738      	adds	r7, #56	; 0x38
 801aa04:	46bd      	mov	sp, r7
 801aa06:	bd80      	pop	{r7, pc}

0801aa08 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801aa08:	b580      	push	{r7, lr}
 801aa0a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801aa0c:	4b04      	ldr	r3, [pc, #16]	; (801aa20 <sys_arch_protect+0x18>)
 801aa0e:	681b      	ldr	r3, [r3, #0]
 801aa10:	f04f 31ff 	mov.w	r1, #4294967295
 801aa14:	4618      	mov	r0, r3
 801aa16:	f7f1 f99f 	bl	800bd58 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801aa1a:	2301      	movs	r3, #1
}
 801aa1c:	4618      	mov	r0, r3
 801aa1e:	bd80      	pop	{r7, pc}
 801aa20:	24008290 	.word	0x24008290

0801aa24 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801aa24:	b580      	push	{r7, lr}
 801aa26:	b082      	sub	sp, #8
 801aa28:	af00      	add	r7, sp, #0
 801aa2a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801aa2c:	4b04      	ldr	r3, [pc, #16]	; (801aa40 <sys_arch_unprotect+0x1c>)
 801aa2e:	681b      	ldr	r3, [r3, #0]
 801aa30:	4618      	mov	r0, r3
 801aa32:	f7f1 f9dc 	bl	800bdee <osMutexRelease>
}
 801aa36:	bf00      	nop
 801aa38:	3708      	adds	r7, #8
 801aa3a:	46bd      	mov	sp, r7
 801aa3c:	bd80      	pop	{r7, pc}
 801aa3e:	bf00      	nop
 801aa40:	24008290 	.word	0x24008290

0801aa44 <std>:
 801aa44:	2300      	movs	r3, #0
 801aa46:	b510      	push	{r4, lr}
 801aa48:	4604      	mov	r4, r0
 801aa4a:	e9c0 3300 	strd	r3, r3, [r0]
 801aa4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801aa52:	6083      	str	r3, [r0, #8]
 801aa54:	8181      	strh	r1, [r0, #12]
 801aa56:	6643      	str	r3, [r0, #100]	; 0x64
 801aa58:	81c2      	strh	r2, [r0, #14]
 801aa5a:	6183      	str	r3, [r0, #24]
 801aa5c:	4619      	mov	r1, r3
 801aa5e:	2208      	movs	r2, #8
 801aa60:	305c      	adds	r0, #92	; 0x5c
 801aa62:	f000 f928 	bl	801acb6 <memset>
 801aa66:	4b05      	ldr	r3, [pc, #20]	; (801aa7c <std+0x38>)
 801aa68:	6263      	str	r3, [r4, #36]	; 0x24
 801aa6a:	4b05      	ldr	r3, [pc, #20]	; (801aa80 <std+0x3c>)
 801aa6c:	62a3      	str	r3, [r4, #40]	; 0x28
 801aa6e:	4b05      	ldr	r3, [pc, #20]	; (801aa84 <std+0x40>)
 801aa70:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aa72:	4b05      	ldr	r3, [pc, #20]	; (801aa88 <std+0x44>)
 801aa74:	6224      	str	r4, [r4, #32]
 801aa76:	6323      	str	r3, [r4, #48]	; 0x30
 801aa78:	bd10      	pop	{r4, pc}
 801aa7a:	bf00      	nop
 801aa7c:	0801af21 	.word	0x0801af21
 801aa80:	0801af43 	.word	0x0801af43
 801aa84:	0801af7b 	.word	0x0801af7b
 801aa88:	0801af9f 	.word	0x0801af9f

0801aa8c <_cleanup_r>:
 801aa8c:	4901      	ldr	r1, [pc, #4]	; (801aa94 <_cleanup_r+0x8>)
 801aa8e:	f000 b8af 	b.w	801abf0 <_fwalk_reent>
 801aa92:	bf00      	nop
 801aa94:	0801b169 	.word	0x0801b169

0801aa98 <__sfmoreglue>:
 801aa98:	b570      	push	{r4, r5, r6, lr}
 801aa9a:	1e4a      	subs	r2, r1, #1
 801aa9c:	2568      	movs	r5, #104	; 0x68
 801aa9e:	4355      	muls	r5, r2
 801aaa0:	460e      	mov	r6, r1
 801aaa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aaa6:	f000 f90f 	bl	801acc8 <_malloc_r>
 801aaaa:	4604      	mov	r4, r0
 801aaac:	b140      	cbz	r0, 801aac0 <__sfmoreglue+0x28>
 801aaae:	2100      	movs	r1, #0
 801aab0:	e9c0 1600 	strd	r1, r6, [r0]
 801aab4:	300c      	adds	r0, #12
 801aab6:	60a0      	str	r0, [r4, #8]
 801aab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aabc:	f000 f8fb 	bl	801acb6 <memset>
 801aac0:	4620      	mov	r0, r4
 801aac2:	bd70      	pop	{r4, r5, r6, pc}

0801aac4 <__sfp_lock_acquire>:
 801aac4:	4801      	ldr	r0, [pc, #4]	; (801aacc <__sfp_lock_acquire+0x8>)
 801aac6:	f000 b8d8 	b.w	801ac7a <__retarget_lock_acquire_recursive>
 801aaca:	bf00      	nop
 801aacc:	2400829c 	.word	0x2400829c

0801aad0 <__sfp_lock_release>:
 801aad0:	4801      	ldr	r0, [pc, #4]	; (801aad8 <__sfp_lock_release+0x8>)
 801aad2:	f000 b8d3 	b.w	801ac7c <__retarget_lock_release_recursive>
 801aad6:	bf00      	nop
 801aad8:	2400829c 	.word	0x2400829c

0801aadc <__sinit_lock_acquire>:
 801aadc:	4801      	ldr	r0, [pc, #4]	; (801aae4 <__sinit_lock_acquire+0x8>)
 801aade:	f000 b8cc 	b.w	801ac7a <__retarget_lock_acquire_recursive>
 801aae2:	bf00      	nop
 801aae4:	24008297 	.word	0x24008297

0801aae8 <__sinit_lock_release>:
 801aae8:	4801      	ldr	r0, [pc, #4]	; (801aaf0 <__sinit_lock_release+0x8>)
 801aaea:	f000 b8c7 	b.w	801ac7c <__retarget_lock_release_recursive>
 801aaee:	bf00      	nop
 801aaf0:	24008297 	.word	0x24008297

0801aaf4 <__sinit>:
 801aaf4:	b510      	push	{r4, lr}
 801aaf6:	4604      	mov	r4, r0
 801aaf8:	f7ff fff0 	bl	801aadc <__sinit_lock_acquire>
 801aafc:	69a3      	ldr	r3, [r4, #24]
 801aafe:	b11b      	cbz	r3, 801ab08 <__sinit+0x14>
 801ab00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ab04:	f7ff bff0 	b.w	801aae8 <__sinit_lock_release>
 801ab08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ab0c:	6523      	str	r3, [r4, #80]	; 0x50
 801ab0e:	4b13      	ldr	r3, [pc, #76]	; (801ab5c <__sinit+0x68>)
 801ab10:	4a13      	ldr	r2, [pc, #76]	; (801ab60 <__sinit+0x6c>)
 801ab12:	681b      	ldr	r3, [r3, #0]
 801ab14:	62a2      	str	r2, [r4, #40]	; 0x28
 801ab16:	42a3      	cmp	r3, r4
 801ab18:	bf04      	itt	eq
 801ab1a:	2301      	moveq	r3, #1
 801ab1c:	61a3      	streq	r3, [r4, #24]
 801ab1e:	4620      	mov	r0, r4
 801ab20:	f000 f820 	bl	801ab64 <__sfp>
 801ab24:	6060      	str	r0, [r4, #4]
 801ab26:	4620      	mov	r0, r4
 801ab28:	f000 f81c 	bl	801ab64 <__sfp>
 801ab2c:	60a0      	str	r0, [r4, #8]
 801ab2e:	4620      	mov	r0, r4
 801ab30:	f000 f818 	bl	801ab64 <__sfp>
 801ab34:	2200      	movs	r2, #0
 801ab36:	60e0      	str	r0, [r4, #12]
 801ab38:	2104      	movs	r1, #4
 801ab3a:	6860      	ldr	r0, [r4, #4]
 801ab3c:	f7ff ff82 	bl	801aa44 <std>
 801ab40:	68a0      	ldr	r0, [r4, #8]
 801ab42:	2201      	movs	r2, #1
 801ab44:	2109      	movs	r1, #9
 801ab46:	f7ff ff7d 	bl	801aa44 <std>
 801ab4a:	68e0      	ldr	r0, [r4, #12]
 801ab4c:	2202      	movs	r2, #2
 801ab4e:	2112      	movs	r1, #18
 801ab50:	f7ff ff78 	bl	801aa44 <std>
 801ab54:	2301      	movs	r3, #1
 801ab56:	61a3      	str	r3, [r4, #24]
 801ab58:	e7d2      	b.n	801ab00 <__sinit+0xc>
 801ab5a:	bf00      	nop
 801ab5c:	0801f3ac 	.word	0x0801f3ac
 801ab60:	0801aa8d 	.word	0x0801aa8d

0801ab64 <__sfp>:
 801ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ab66:	4607      	mov	r7, r0
 801ab68:	f7ff ffac 	bl	801aac4 <__sfp_lock_acquire>
 801ab6c:	4b1e      	ldr	r3, [pc, #120]	; (801abe8 <__sfp+0x84>)
 801ab6e:	681e      	ldr	r6, [r3, #0]
 801ab70:	69b3      	ldr	r3, [r6, #24]
 801ab72:	b913      	cbnz	r3, 801ab7a <__sfp+0x16>
 801ab74:	4630      	mov	r0, r6
 801ab76:	f7ff ffbd 	bl	801aaf4 <__sinit>
 801ab7a:	3648      	adds	r6, #72	; 0x48
 801ab7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801ab80:	3b01      	subs	r3, #1
 801ab82:	d503      	bpl.n	801ab8c <__sfp+0x28>
 801ab84:	6833      	ldr	r3, [r6, #0]
 801ab86:	b30b      	cbz	r3, 801abcc <__sfp+0x68>
 801ab88:	6836      	ldr	r6, [r6, #0]
 801ab8a:	e7f7      	b.n	801ab7c <__sfp+0x18>
 801ab8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801ab90:	b9d5      	cbnz	r5, 801abc8 <__sfp+0x64>
 801ab92:	4b16      	ldr	r3, [pc, #88]	; (801abec <__sfp+0x88>)
 801ab94:	60e3      	str	r3, [r4, #12]
 801ab96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ab9a:	6665      	str	r5, [r4, #100]	; 0x64
 801ab9c:	f000 f86c 	bl	801ac78 <__retarget_lock_init_recursive>
 801aba0:	f7ff ff96 	bl	801aad0 <__sfp_lock_release>
 801aba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801aba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801abac:	6025      	str	r5, [r4, #0]
 801abae:	61a5      	str	r5, [r4, #24]
 801abb0:	2208      	movs	r2, #8
 801abb2:	4629      	mov	r1, r5
 801abb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801abb8:	f000 f87d 	bl	801acb6 <memset>
 801abbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801abc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801abc4:	4620      	mov	r0, r4
 801abc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801abc8:	3468      	adds	r4, #104	; 0x68
 801abca:	e7d9      	b.n	801ab80 <__sfp+0x1c>
 801abcc:	2104      	movs	r1, #4
 801abce:	4638      	mov	r0, r7
 801abd0:	f7ff ff62 	bl	801aa98 <__sfmoreglue>
 801abd4:	4604      	mov	r4, r0
 801abd6:	6030      	str	r0, [r6, #0]
 801abd8:	2800      	cmp	r0, #0
 801abda:	d1d5      	bne.n	801ab88 <__sfp+0x24>
 801abdc:	f7ff ff78 	bl	801aad0 <__sfp_lock_release>
 801abe0:	230c      	movs	r3, #12
 801abe2:	603b      	str	r3, [r7, #0]
 801abe4:	e7ee      	b.n	801abc4 <__sfp+0x60>
 801abe6:	bf00      	nop
 801abe8:	0801f3ac 	.word	0x0801f3ac
 801abec:	ffff0001 	.word	0xffff0001

0801abf0 <_fwalk_reent>:
 801abf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801abf4:	4606      	mov	r6, r0
 801abf6:	4688      	mov	r8, r1
 801abf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801abfc:	2700      	movs	r7, #0
 801abfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801ac02:	f1b9 0901 	subs.w	r9, r9, #1
 801ac06:	d505      	bpl.n	801ac14 <_fwalk_reent+0x24>
 801ac08:	6824      	ldr	r4, [r4, #0]
 801ac0a:	2c00      	cmp	r4, #0
 801ac0c:	d1f7      	bne.n	801abfe <_fwalk_reent+0xe>
 801ac0e:	4638      	mov	r0, r7
 801ac10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ac14:	89ab      	ldrh	r3, [r5, #12]
 801ac16:	2b01      	cmp	r3, #1
 801ac18:	d907      	bls.n	801ac2a <_fwalk_reent+0x3a>
 801ac1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ac1e:	3301      	adds	r3, #1
 801ac20:	d003      	beq.n	801ac2a <_fwalk_reent+0x3a>
 801ac22:	4629      	mov	r1, r5
 801ac24:	4630      	mov	r0, r6
 801ac26:	47c0      	blx	r8
 801ac28:	4307      	orrs	r7, r0
 801ac2a:	3568      	adds	r5, #104	; 0x68
 801ac2c:	e7e9      	b.n	801ac02 <_fwalk_reent+0x12>
	...

0801ac30 <__libc_init_array>:
 801ac30:	b570      	push	{r4, r5, r6, lr}
 801ac32:	4d0d      	ldr	r5, [pc, #52]	; (801ac68 <__libc_init_array+0x38>)
 801ac34:	4c0d      	ldr	r4, [pc, #52]	; (801ac6c <__libc_init_array+0x3c>)
 801ac36:	1b64      	subs	r4, r4, r5
 801ac38:	10a4      	asrs	r4, r4, #2
 801ac3a:	2600      	movs	r6, #0
 801ac3c:	42a6      	cmp	r6, r4
 801ac3e:	d109      	bne.n	801ac54 <__libc_init_array+0x24>
 801ac40:	4d0b      	ldr	r5, [pc, #44]	; (801ac70 <__libc_init_array+0x40>)
 801ac42:	4c0c      	ldr	r4, [pc, #48]	; (801ac74 <__libc_init_array+0x44>)
 801ac44:	f000 ffe6 	bl	801bc14 <_init>
 801ac48:	1b64      	subs	r4, r4, r5
 801ac4a:	10a4      	asrs	r4, r4, #2
 801ac4c:	2600      	movs	r6, #0
 801ac4e:	42a6      	cmp	r6, r4
 801ac50:	d105      	bne.n	801ac5e <__libc_init_array+0x2e>
 801ac52:	bd70      	pop	{r4, r5, r6, pc}
 801ac54:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac58:	4798      	blx	r3
 801ac5a:	3601      	adds	r6, #1
 801ac5c:	e7ee      	b.n	801ac3c <__libc_init_array+0xc>
 801ac5e:	f855 3b04 	ldr.w	r3, [r5], #4
 801ac62:	4798      	blx	r3
 801ac64:	3601      	adds	r6, #1
 801ac66:	e7f2      	b.n	801ac4e <__libc_init_array+0x1e>
 801ac68:	0801f4a0 	.word	0x0801f4a0
 801ac6c:	0801f4a0 	.word	0x0801f4a0
 801ac70:	0801f4a0 	.word	0x0801f4a0
 801ac74:	0801f4a4 	.word	0x0801f4a4

0801ac78 <__retarget_lock_init_recursive>:
 801ac78:	4770      	bx	lr

0801ac7a <__retarget_lock_acquire_recursive>:
 801ac7a:	4770      	bx	lr

0801ac7c <__retarget_lock_release_recursive>:
 801ac7c:	4770      	bx	lr

0801ac7e <memcmp>:
 801ac7e:	b530      	push	{r4, r5, lr}
 801ac80:	3901      	subs	r1, #1
 801ac82:	2400      	movs	r4, #0
 801ac84:	42a2      	cmp	r2, r4
 801ac86:	d101      	bne.n	801ac8c <memcmp+0xe>
 801ac88:	2000      	movs	r0, #0
 801ac8a:	e005      	b.n	801ac98 <memcmp+0x1a>
 801ac8c:	5d03      	ldrb	r3, [r0, r4]
 801ac8e:	3401      	adds	r4, #1
 801ac90:	5d0d      	ldrb	r5, [r1, r4]
 801ac92:	42ab      	cmp	r3, r5
 801ac94:	d0f6      	beq.n	801ac84 <memcmp+0x6>
 801ac96:	1b58      	subs	r0, r3, r5
 801ac98:	bd30      	pop	{r4, r5, pc}

0801ac9a <memcpy>:
 801ac9a:	440a      	add	r2, r1
 801ac9c:	4291      	cmp	r1, r2
 801ac9e:	f100 33ff 	add.w	r3, r0, #4294967295
 801aca2:	d100      	bne.n	801aca6 <memcpy+0xc>
 801aca4:	4770      	bx	lr
 801aca6:	b510      	push	{r4, lr}
 801aca8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801acac:	f803 4f01 	strb.w	r4, [r3, #1]!
 801acb0:	4291      	cmp	r1, r2
 801acb2:	d1f9      	bne.n	801aca8 <memcpy+0xe>
 801acb4:	bd10      	pop	{r4, pc}

0801acb6 <memset>:
 801acb6:	4402      	add	r2, r0
 801acb8:	4603      	mov	r3, r0
 801acba:	4293      	cmp	r3, r2
 801acbc:	d100      	bne.n	801acc0 <memset+0xa>
 801acbe:	4770      	bx	lr
 801acc0:	f803 1b01 	strb.w	r1, [r3], #1
 801acc4:	e7f9      	b.n	801acba <memset+0x4>
	...

0801acc8 <_malloc_r>:
 801acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801acca:	1ccd      	adds	r5, r1, #3
 801accc:	f025 0503 	bic.w	r5, r5, #3
 801acd0:	3508      	adds	r5, #8
 801acd2:	2d0c      	cmp	r5, #12
 801acd4:	bf38      	it	cc
 801acd6:	250c      	movcc	r5, #12
 801acd8:	2d00      	cmp	r5, #0
 801acda:	4606      	mov	r6, r0
 801acdc:	db01      	blt.n	801ace2 <_malloc_r+0x1a>
 801acde:	42a9      	cmp	r1, r5
 801ace0:	d903      	bls.n	801acea <_malloc_r+0x22>
 801ace2:	230c      	movs	r3, #12
 801ace4:	6033      	str	r3, [r6, #0]
 801ace6:	2000      	movs	r0, #0
 801ace8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801acea:	f000 faa5 	bl	801b238 <__malloc_lock>
 801acee:	4921      	ldr	r1, [pc, #132]	; (801ad74 <_malloc_r+0xac>)
 801acf0:	680a      	ldr	r2, [r1, #0]
 801acf2:	4614      	mov	r4, r2
 801acf4:	b99c      	cbnz	r4, 801ad1e <_malloc_r+0x56>
 801acf6:	4f20      	ldr	r7, [pc, #128]	; (801ad78 <_malloc_r+0xb0>)
 801acf8:	683b      	ldr	r3, [r7, #0]
 801acfa:	b923      	cbnz	r3, 801ad06 <_malloc_r+0x3e>
 801acfc:	4621      	mov	r1, r4
 801acfe:	4630      	mov	r0, r6
 801ad00:	f000 f8fe 	bl	801af00 <_sbrk_r>
 801ad04:	6038      	str	r0, [r7, #0]
 801ad06:	4629      	mov	r1, r5
 801ad08:	4630      	mov	r0, r6
 801ad0a:	f000 f8f9 	bl	801af00 <_sbrk_r>
 801ad0e:	1c43      	adds	r3, r0, #1
 801ad10:	d123      	bne.n	801ad5a <_malloc_r+0x92>
 801ad12:	230c      	movs	r3, #12
 801ad14:	6033      	str	r3, [r6, #0]
 801ad16:	4630      	mov	r0, r6
 801ad18:	f000 fa94 	bl	801b244 <__malloc_unlock>
 801ad1c:	e7e3      	b.n	801ace6 <_malloc_r+0x1e>
 801ad1e:	6823      	ldr	r3, [r4, #0]
 801ad20:	1b5b      	subs	r3, r3, r5
 801ad22:	d417      	bmi.n	801ad54 <_malloc_r+0x8c>
 801ad24:	2b0b      	cmp	r3, #11
 801ad26:	d903      	bls.n	801ad30 <_malloc_r+0x68>
 801ad28:	6023      	str	r3, [r4, #0]
 801ad2a:	441c      	add	r4, r3
 801ad2c:	6025      	str	r5, [r4, #0]
 801ad2e:	e004      	b.n	801ad3a <_malloc_r+0x72>
 801ad30:	6863      	ldr	r3, [r4, #4]
 801ad32:	42a2      	cmp	r2, r4
 801ad34:	bf0c      	ite	eq
 801ad36:	600b      	streq	r3, [r1, #0]
 801ad38:	6053      	strne	r3, [r2, #4]
 801ad3a:	4630      	mov	r0, r6
 801ad3c:	f000 fa82 	bl	801b244 <__malloc_unlock>
 801ad40:	f104 000b 	add.w	r0, r4, #11
 801ad44:	1d23      	adds	r3, r4, #4
 801ad46:	f020 0007 	bic.w	r0, r0, #7
 801ad4a:	1ac2      	subs	r2, r0, r3
 801ad4c:	d0cc      	beq.n	801ace8 <_malloc_r+0x20>
 801ad4e:	1a1b      	subs	r3, r3, r0
 801ad50:	50a3      	str	r3, [r4, r2]
 801ad52:	e7c9      	b.n	801ace8 <_malloc_r+0x20>
 801ad54:	4622      	mov	r2, r4
 801ad56:	6864      	ldr	r4, [r4, #4]
 801ad58:	e7cc      	b.n	801acf4 <_malloc_r+0x2c>
 801ad5a:	1cc4      	adds	r4, r0, #3
 801ad5c:	f024 0403 	bic.w	r4, r4, #3
 801ad60:	42a0      	cmp	r0, r4
 801ad62:	d0e3      	beq.n	801ad2c <_malloc_r+0x64>
 801ad64:	1a21      	subs	r1, r4, r0
 801ad66:	4630      	mov	r0, r6
 801ad68:	f000 f8ca 	bl	801af00 <_sbrk_r>
 801ad6c:	3001      	adds	r0, #1
 801ad6e:	d1dd      	bne.n	801ad2c <_malloc_r+0x64>
 801ad70:	e7cf      	b.n	801ad12 <_malloc_r+0x4a>
 801ad72:	bf00      	nop
 801ad74:	24004c48 	.word	0x24004c48
 801ad78:	24004c4c 	.word	0x24004c4c

0801ad7c <iprintf>:
 801ad7c:	b40f      	push	{r0, r1, r2, r3}
 801ad7e:	4b0a      	ldr	r3, [pc, #40]	; (801ada8 <iprintf+0x2c>)
 801ad80:	b513      	push	{r0, r1, r4, lr}
 801ad82:	681c      	ldr	r4, [r3, #0]
 801ad84:	b124      	cbz	r4, 801ad90 <iprintf+0x14>
 801ad86:	69a3      	ldr	r3, [r4, #24]
 801ad88:	b913      	cbnz	r3, 801ad90 <iprintf+0x14>
 801ad8a:	4620      	mov	r0, r4
 801ad8c:	f7ff feb2 	bl	801aaf4 <__sinit>
 801ad90:	ab05      	add	r3, sp, #20
 801ad92:	9a04      	ldr	r2, [sp, #16]
 801ad94:	68a1      	ldr	r1, [r4, #8]
 801ad96:	9301      	str	r3, [sp, #4]
 801ad98:	4620      	mov	r0, r4
 801ad9a:	f000 fad3 	bl	801b344 <_vfiprintf_r>
 801ad9e:	b002      	add	sp, #8
 801ada0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ada4:	b004      	add	sp, #16
 801ada6:	4770      	bx	lr
 801ada8:	2400003c 	.word	0x2400003c

0801adac <rand>:
 801adac:	4b17      	ldr	r3, [pc, #92]	; (801ae0c <rand+0x60>)
 801adae:	b510      	push	{r4, lr}
 801adb0:	681c      	ldr	r4, [r3, #0]
 801adb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801adb4:	b9b3      	cbnz	r3, 801ade4 <rand+0x38>
 801adb6:	2018      	movs	r0, #24
 801adb8:	f000 fa36 	bl	801b228 <malloc>
 801adbc:	63a0      	str	r0, [r4, #56]	; 0x38
 801adbe:	b928      	cbnz	r0, 801adcc <rand+0x20>
 801adc0:	4602      	mov	r2, r0
 801adc2:	4b13      	ldr	r3, [pc, #76]	; (801ae10 <rand+0x64>)
 801adc4:	4813      	ldr	r0, [pc, #76]	; (801ae14 <rand+0x68>)
 801adc6:	214e      	movs	r1, #78	; 0x4e
 801adc8:	f000 f91a 	bl	801b000 <__assert_func>
 801adcc:	4a12      	ldr	r2, [pc, #72]	; (801ae18 <rand+0x6c>)
 801adce:	4b13      	ldr	r3, [pc, #76]	; (801ae1c <rand+0x70>)
 801add0:	e9c0 2300 	strd	r2, r3, [r0]
 801add4:	4b12      	ldr	r3, [pc, #72]	; (801ae20 <rand+0x74>)
 801add6:	6083      	str	r3, [r0, #8]
 801add8:	230b      	movs	r3, #11
 801adda:	8183      	strh	r3, [r0, #12]
 801addc:	2201      	movs	r2, #1
 801adde:	2300      	movs	r3, #0
 801ade0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801ade4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ade6:	480f      	ldr	r0, [pc, #60]	; (801ae24 <rand+0x78>)
 801ade8:	690a      	ldr	r2, [r1, #16]
 801adea:	694b      	ldr	r3, [r1, #20]
 801adec:	4c0e      	ldr	r4, [pc, #56]	; (801ae28 <rand+0x7c>)
 801adee:	4350      	muls	r0, r2
 801adf0:	fb04 0003 	mla	r0, r4, r3, r0
 801adf4:	fba2 3404 	umull	r3, r4, r2, r4
 801adf8:	1c5a      	adds	r2, r3, #1
 801adfa:	4404      	add	r4, r0
 801adfc:	f144 0000 	adc.w	r0, r4, #0
 801ae00:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801ae04:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801ae08:	bd10      	pop	{r4, pc}
 801ae0a:	bf00      	nop
 801ae0c:	2400003c 	.word	0x2400003c
 801ae10:	0801f3b0 	.word	0x0801f3b0
 801ae14:	0801f3c7 	.word	0x0801f3c7
 801ae18:	abcd330e 	.word	0xabcd330e
 801ae1c:	e66d1234 	.word	0xe66d1234
 801ae20:	0005deec 	.word	0x0005deec
 801ae24:	5851f42d 	.word	0x5851f42d
 801ae28:	4c957f2d 	.word	0x4c957f2d

0801ae2c <cleanup_glue>:
 801ae2c:	b538      	push	{r3, r4, r5, lr}
 801ae2e:	460c      	mov	r4, r1
 801ae30:	6809      	ldr	r1, [r1, #0]
 801ae32:	4605      	mov	r5, r0
 801ae34:	b109      	cbz	r1, 801ae3a <cleanup_glue+0xe>
 801ae36:	f7ff fff9 	bl	801ae2c <cleanup_glue>
 801ae3a:	4621      	mov	r1, r4
 801ae3c:	4628      	mov	r0, r5
 801ae3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ae42:	f000 ba05 	b.w	801b250 <_free_r>
	...

0801ae48 <_reclaim_reent>:
 801ae48:	4b2c      	ldr	r3, [pc, #176]	; (801aefc <_reclaim_reent+0xb4>)
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	4283      	cmp	r3, r0
 801ae4e:	b570      	push	{r4, r5, r6, lr}
 801ae50:	4604      	mov	r4, r0
 801ae52:	d051      	beq.n	801aef8 <_reclaim_reent+0xb0>
 801ae54:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801ae56:	b143      	cbz	r3, 801ae6a <_reclaim_reent+0x22>
 801ae58:	68db      	ldr	r3, [r3, #12]
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d14a      	bne.n	801aef4 <_reclaim_reent+0xac>
 801ae5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ae60:	6819      	ldr	r1, [r3, #0]
 801ae62:	b111      	cbz	r1, 801ae6a <_reclaim_reent+0x22>
 801ae64:	4620      	mov	r0, r4
 801ae66:	f000 f9f3 	bl	801b250 <_free_r>
 801ae6a:	6961      	ldr	r1, [r4, #20]
 801ae6c:	b111      	cbz	r1, 801ae74 <_reclaim_reent+0x2c>
 801ae6e:	4620      	mov	r0, r4
 801ae70:	f000 f9ee 	bl	801b250 <_free_r>
 801ae74:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801ae76:	b111      	cbz	r1, 801ae7e <_reclaim_reent+0x36>
 801ae78:	4620      	mov	r0, r4
 801ae7a:	f000 f9e9 	bl	801b250 <_free_r>
 801ae7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801ae80:	b111      	cbz	r1, 801ae88 <_reclaim_reent+0x40>
 801ae82:	4620      	mov	r0, r4
 801ae84:	f000 f9e4 	bl	801b250 <_free_r>
 801ae88:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801ae8a:	b111      	cbz	r1, 801ae92 <_reclaim_reent+0x4a>
 801ae8c:	4620      	mov	r0, r4
 801ae8e:	f000 f9df 	bl	801b250 <_free_r>
 801ae92:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801ae94:	b111      	cbz	r1, 801ae9c <_reclaim_reent+0x54>
 801ae96:	4620      	mov	r0, r4
 801ae98:	f000 f9da 	bl	801b250 <_free_r>
 801ae9c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801ae9e:	b111      	cbz	r1, 801aea6 <_reclaim_reent+0x5e>
 801aea0:	4620      	mov	r0, r4
 801aea2:	f000 f9d5 	bl	801b250 <_free_r>
 801aea6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801aea8:	b111      	cbz	r1, 801aeb0 <_reclaim_reent+0x68>
 801aeaa:	4620      	mov	r0, r4
 801aeac:	f000 f9d0 	bl	801b250 <_free_r>
 801aeb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aeb2:	b111      	cbz	r1, 801aeba <_reclaim_reent+0x72>
 801aeb4:	4620      	mov	r0, r4
 801aeb6:	f000 f9cb 	bl	801b250 <_free_r>
 801aeba:	69a3      	ldr	r3, [r4, #24]
 801aebc:	b1e3      	cbz	r3, 801aef8 <_reclaim_reent+0xb0>
 801aebe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801aec0:	4620      	mov	r0, r4
 801aec2:	4798      	blx	r3
 801aec4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801aec6:	b1b9      	cbz	r1, 801aef8 <_reclaim_reent+0xb0>
 801aec8:	4620      	mov	r0, r4
 801aeca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aece:	f7ff bfad 	b.w	801ae2c <cleanup_glue>
 801aed2:	5949      	ldr	r1, [r1, r5]
 801aed4:	b941      	cbnz	r1, 801aee8 <_reclaim_reent+0xa0>
 801aed6:	3504      	adds	r5, #4
 801aed8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801aeda:	2d80      	cmp	r5, #128	; 0x80
 801aedc:	68d9      	ldr	r1, [r3, #12]
 801aede:	d1f8      	bne.n	801aed2 <_reclaim_reent+0x8a>
 801aee0:	4620      	mov	r0, r4
 801aee2:	f000 f9b5 	bl	801b250 <_free_r>
 801aee6:	e7ba      	b.n	801ae5e <_reclaim_reent+0x16>
 801aee8:	680e      	ldr	r6, [r1, #0]
 801aeea:	4620      	mov	r0, r4
 801aeec:	f000 f9b0 	bl	801b250 <_free_r>
 801aef0:	4631      	mov	r1, r6
 801aef2:	e7ef      	b.n	801aed4 <_reclaim_reent+0x8c>
 801aef4:	2500      	movs	r5, #0
 801aef6:	e7ef      	b.n	801aed8 <_reclaim_reent+0x90>
 801aef8:	bd70      	pop	{r4, r5, r6, pc}
 801aefa:	bf00      	nop
 801aefc:	2400003c 	.word	0x2400003c

0801af00 <_sbrk_r>:
 801af00:	b538      	push	{r3, r4, r5, lr}
 801af02:	4d06      	ldr	r5, [pc, #24]	; (801af1c <_sbrk_r+0x1c>)
 801af04:	2300      	movs	r3, #0
 801af06:	4604      	mov	r4, r0
 801af08:	4608      	mov	r0, r1
 801af0a:	602b      	str	r3, [r5, #0]
 801af0c:	f7e6 ff5c 	bl	8001dc8 <_sbrk>
 801af10:	1c43      	adds	r3, r0, #1
 801af12:	d102      	bne.n	801af1a <_sbrk_r+0x1a>
 801af14:	682b      	ldr	r3, [r5, #0]
 801af16:	b103      	cbz	r3, 801af1a <_sbrk_r+0x1a>
 801af18:	6023      	str	r3, [r4, #0]
 801af1a:	bd38      	pop	{r3, r4, r5, pc}
 801af1c:	2400828c 	.word	0x2400828c

0801af20 <__sread>:
 801af20:	b510      	push	{r4, lr}
 801af22:	460c      	mov	r4, r1
 801af24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af28:	f000 fcd0 	bl	801b8cc <_read_r>
 801af2c:	2800      	cmp	r0, #0
 801af2e:	bfab      	itete	ge
 801af30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801af32:	89a3      	ldrhlt	r3, [r4, #12]
 801af34:	181b      	addge	r3, r3, r0
 801af36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801af3a:	bfac      	ite	ge
 801af3c:	6563      	strge	r3, [r4, #84]	; 0x54
 801af3e:	81a3      	strhlt	r3, [r4, #12]
 801af40:	bd10      	pop	{r4, pc}

0801af42 <__swrite>:
 801af42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af46:	461f      	mov	r7, r3
 801af48:	898b      	ldrh	r3, [r1, #12]
 801af4a:	05db      	lsls	r3, r3, #23
 801af4c:	4605      	mov	r5, r0
 801af4e:	460c      	mov	r4, r1
 801af50:	4616      	mov	r6, r2
 801af52:	d505      	bpl.n	801af60 <__swrite+0x1e>
 801af54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af58:	2302      	movs	r3, #2
 801af5a:	2200      	movs	r2, #0
 801af5c:	f000 f952 	bl	801b204 <_lseek_r>
 801af60:	89a3      	ldrh	r3, [r4, #12]
 801af62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801af66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801af6a:	81a3      	strh	r3, [r4, #12]
 801af6c:	4632      	mov	r2, r6
 801af6e:	463b      	mov	r3, r7
 801af70:	4628      	mov	r0, r5
 801af72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801af76:	f000 b831 	b.w	801afdc <_write_r>

0801af7a <__sseek>:
 801af7a:	b510      	push	{r4, lr}
 801af7c:	460c      	mov	r4, r1
 801af7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801af82:	f000 f93f 	bl	801b204 <_lseek_r>
 801af86:	1c43      	adds	r3, r0, #1
 801af88:	89a3      	ldrh	r3, [r4, #12]
 801af8a:	bf15      	itete	ne
 801af8c:	6560      	strne	r0, [r4, #84]	; 0x54
 801af8e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801af92:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801af96:	81a3      	strheq	r3, [r4, #12]
 801af98:	bf18      	it	ne
 801af9a:	81a3      	strhne	r3, [r4, #12]
 801af9c:	bd10      	pop	{r4, pc}

0801af9e <__sclose>:
 801af9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801afa2:	f000 b84b 	b.w	801b03c <_close_r>

0801afa6 <strcpy>:
 801afa6:	4603      	mov	r3, r0
 801afa8:	f811 2b01 	ldrb.w	r2, [r1], #1
 801afac:	f803 2b01 	strb.w	r2, [r3], #1
 801afb0:	2a00      	cmp	r2, #0
 801afb2:	d1f9      	bne.n	801afa8 <strcpy+0x2>
 801afb4:	4770      	bx	lr

0801afb6 <strncpy>:
 801afb6:	b510      	push	{r4, lr}
 801afb8:	3901      	subs	r1, #1
 801afba:	4603      	mov	r3, r0
 801afbc:	b132      	cbz	r2, 801afcc <strncpy+0x16>
 801afbe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801afc2:	f803 4b01 	strb.w	r4, [r3], #1
 801afc6:	3a01      	subs	r2, #1
 801afc8:	2c00      	cmp	r4, #0
 801afca:	d1f7      	bne.n	801afbc <strncpy+0x6>
 801afcc:	441a      	add	r2, r3
 801afce:	2100      	movs	r1, #0
 801afd0:	4293      	cmp	r3, r2
 801afd2:	d100      	bne.n	801afd6 <strncpy+0x20>
 801afd4:	bd10      	pop	{r4, pc}
 801afd6:	f803 1b01 	strb.w	r1, [r3], #1
 801afda:	e7f9      	b.n	801afd0 <strncpy+0x1a>

0801afdc <_write_r>:
 801afdc:	b538      	push	{r3, r4, r5, lr}
 801afde:	4d07      	ldr	r5, [pc, #28]	; (801affc <_write_r+0x20>)
 801afe0:	4604      	mov	r4, r0
 801afe2:	4608      	mov	r0, r1
 801afe4:	4611      	mov	r1, r2
 801afe6:	2200      	movs	r2, #0
 801afe8:	602a      	str	r2, [r5, #0]
 801afea:	461a      	mov	r2, r3
 801afec:	f7e6 fe9b 	bl	8001d26 <_write>
 801aff0:	1c43      	adds	r3, r0, #1
 801aff2:	d102      	bne.n	801affa <_write_r+0x1e>
 801aff4:	682b      	ldr	r3, [r5, #0]
 801aff6:	b103      	cbz	r3, 801affa <_write_r+0x1e>
 801aff8:	6023      	str	r3, [r4, #0]
 801affa:	bd38      	pop	{r3, r4, r5, pc}
 801affc:	2400828c 	.word	0x2400828c

0801b000 <__assert_func>:
 801b000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b002:	4614      	mov	r4, r2
 801b004:	461a      	mov	r2, r3
 801b006:	4b09      	ldr	r3, [pc, #36]	; (801b02c <__assert_func+0x2c>)
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	4605      	mov	r5, r0
 801b00c:	68d8      	ldr	r0, [r3, #12]
 801b00e:	b14c      	cbz	r4, 801b024 <__assert_func+0x24>
 801b010:	4b07      	ldr	r3, [pc, #28]	; (801b030 <__assert_func+0x30>)
 801b012:	9100      	str	r1, [sp, #0]
 801b014:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b018:	4906      	ldr	r1, [pc, #24]	; (801b034 <__assert_func+0x34>)
 801b01a:	462b      	mov	r3, r5
 801b01c:	f000 f8e0 	bl	801b1e0 <fiprintf>
 801b020:	f000 fd26 	bl	801ba70 <abort>
 801b024:	4b04      	ldr	r3, [pc, #16]	; (801b038 <__assert_func+0x38>)
 801b026:	461c      	mov	r4, r3
 801b028:	e7f3      	b.n	801b012 <__assert_func+0x12>
 801b02a:	bf00      	nop
 801b02c:	2400003c 	.word	0x2400003c
 801b030:	0801f426 	.word	0x0801f426
 801b034:	0801f433 	.word	0x0801f433
 801b038:	0801f461 	.word	0x0801f461

0801b03c <_close_r>:
 801b03c:	b538      	push	{r3, r4, r5, lr}
 801b03e:	4d06      	ldr	r5, [pc, #24]	; (801b058 <_close_r+0x1c>)
 801b040:	2300      	movs	r3, #0
 801b042:	4604      	mov	r4, r0
 801b044:	4608      	mov	r0, r1
 801b046:	602b      	str	r3, [r5, #0]
 801b048:	f7e6 fe89 	bl	8001d5e <_close>
 801b04c:	1c43      	adds	r3, r0, #1
 801b04e:	d102      	bne.n	801b056 <_close_r+0x1a>
 801b050:	682b      	ldr	r3, [r5, #0]
 801b052:	b103      	cbz	r3, 801b056 <_close_r+0x1a>
 801b054:	6023      	str	r3, [r4, #0]
 801b056:	bd38      	pop	{r3, r4, r5, pc}
 801b058:	2400828c 	.word	0x2400828c

0801b05c <__sflush_r>:
 801b05c:	898a      	ldrh	r2, [r1, #12]
 801b05e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b062:	4605      	mov	r5, r0
 801b064:	0710      	lsls	r0, r2, #28
 801b066:	460c      	mov	r4, r1
 801b068:	d458      	bmi.n	801b11c <__sflush_r+0xc0>
 801b06a:	684b      	ldr	r3, [r1, #4]
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	dc05      	bgt.n	801b07c <__sflush_r+0x20>
 801b070:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b072:	2b00      	cmp	r3, #0
 801b074:	dc02      	bgt.n	801b07c <__sflush_r+0x20>
 801b076:	2000      	movs	r0, #0
 801b078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b07c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b07e:	2e00      	cmp	r6, #0
 801b080:	d0f9      	beq.n	801b076 <__sflush_r+0x1a>
 801b082:	2300      	movs	r3, #0
 801b084:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b088:	682f      	ldr	r7, [r5, #0]
 801b08a:	602b      	str	r3, [r5, #0]
 801b08c:	d032      	beq.n	801b0f4 <__sflush_r+0x98>
 801b08e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b090:	89a3      	ldrh	r3, [r4, #12]
 801b092:	075a      	lsls	r2, r3, #29
 801b094:	d505      	bpl.n	801b0a2 <__sflush_r+0x46>
 801b096:	6863      	ldr	r3, [r4, #4]
 801b098:	1ac0      	subs	r0, r0, r3
 801b09a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b09c:	b10b      	cbz	r3, 801b0a2 <__sflush_r+0x46>
 801b09e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b0a0:	1ac0      	subs	r0, r0, r3
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	4602      	mov	r2, r0
 801b0a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b0a8:	6a21      	ldr	r1, [r4, #32]
 801b0aa:	4628      	mov	r0, r5
 801b0ac:	47b0      	blx	r6
 801b0ae:	1c43      	adds	r3, r0, #1
 801b0b0:	89a3      	ldrh	r3, [r4, #12]
 801b0b2:	d106      	bne.n	801b0c2 <__sflush_r+0x66>
 801b0b4:	6829      	ldr	r1, [r5, #0]
 801b0b6:	291d      	cmp	r1, #29
 801b0b8:	d82c      	bhi.n	801b114 <__sflush_r+0xb8>
 801b0ba:	4a2a      	ldr	r2, [pc, #168]	; (801b164 <__sflush_r+0x108>)
 801b0bc:	40ca      	lsrs	r2, r1
 801b0be:	07d6      	lsls	r6, r2, #31
 801b0c0:	d528      	bpl.n	801b114 <__sflush_r+0xb8>
 801b0c2:	2200      	movs	r2, #0
 801b0c4:	6062      	str	r2, [r4, #4]
 801b0c6:	04d9      	lsls	r1, r3, #19
 801b0c8:	6922      	ldr	r2, [r4, #16]
 801b0ca:	6022      	str	r2, [r4, #0]
 801b0cc:	d504      	bpl.n	801b0d8 <__sflush_r+0x7c>
 801b0ce:	1c42      	adds	r2, r0, #1
 801b0d0:	d101      	bne.n	801b0d6 <__sflush_r+0x7a>
 801b0d2:	682b      	ldr	r3, [r5, #0]
 801b0d4:	b903      	cbnz	r3, 801b0d8 <__sflush_r+0x7c>
 801b0d6:	6560      	str	r0, [r4, #84]	; 0x54
 801b0d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b0da:	602f      	str	r7, [r5, #0]
 801b0dc:	2900      	cmp	r1, #0
 801b0de:	d0ca      	beq.n	801b076 <__sflush_r+0x1a>
 801b0e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b0e4:	4299      	cmp	r1, r3
 801b0e6:	d002      	beq.n	801b0ee <__sflush_r+0x92>
 801b0e8:	4628      	mov	r0, r5
 801b0ea:	f000 f8b1 	bl	801b250 <_free_r>
 801b0ee:	2000      	movs	r0, #0
 801b0f0:	6360      	str	r0, [r4, #52]	; 0x34
 801b0f2:	e7c1      	b.n	801b078 <__sflush_r+0x1c>
 801b0f4:	6a21      	ldr	r1, [r4, #32]
 801b0f6:	2301      	movs	r3, #1
 801b0f8:	4628      	mov	r0, r5
 801b0fa:	47b0      	blx	r6
 801b0fc:	1c41      	adds	r1, r0, #1
 801b0fe:	d1c7      	bne.n	801b090 <__sflush_r+0x34>
 801b100:	682b      	ldr	r3, [r5, #0]
 801b102:	2b00      	cmp	r3, #0
 801b104:	d0c4      	beq.n	801b090 <__sflush_r+0x34>
 801b106:	2b1d      	cmp	r3, #29
 801b108:	d001      	beq.n	801b10e <__sflush_r+0xb2>
 801b10a:	2b16      	cmp	r3, #22
 801b10c:	d101      	bne.n	801b112 <__sflush_r+0xb6>
 801b10e:	602f      	str	r7, [r5, #0]
 801b110:	e7b1      	b.n	801b076 <__sflush_r+0x1a>
 801b112:	89a3      	ldrh	r3, [r4, #12]
 801b114:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b118:	81a3      	strh	r3, [r4, #12]
 801b11a:	e7ad      	b.n	801b078 <__sflush_r+0x1c>
 801b11c:	690f      	ldr	r7, [r1, #16]
 801b11e:	2f00      	cmp	r7, #0
 801b120:	d0a9      	beq.n	801b076 <__sflush_r+0x1a>
 801b122:	0793      	lsls	r3, r2, #30
 801b124:	680e      	ldr	r6, [r1, #0]
 801b126:	bf08      	it	eq
 801b128:	694b      	ldreq	r3, [r1, #20]
 801b12a:	600f      	str	r7, [r1, #0]
 801b12c:	bf18      	it	ne
 801b12e:	2300      	movne	r3, #0
 801b130:	eba6 0807 	sub.w	r8, r6, r7
 801b134:	608b      	str	r3, [r1, #8]
 801b136:	f1b8 0f00 	cmp.w	r8, #0
 801b13a:	dd9c      	ble.n	801b076 <__sflush_r+0x1a>
 801b13c:	6a21      	ldr	r1, [r4, #32]
 801b13e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801b140:	4643      	mov	r3, r8
 801b142:	463a      	mov	r2, r7
 801b144:	4628      	mov	r0, r5
 801b146:	47b0      	blx	r6
 801b148:	2800      	cmp	r0, #0
 801b14a:	dc06      	bgt.n	801b15a <__sflush_r+0xfe>
 801b14c:	89a3      	ldrh	r3, [r4, #12]
 801b14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b152:	81a3      	strh	r3, [r4, #12]
 801b154:	f04f 30ff 	mov.w	r0, #4294967295
 801b158:	e78e      	b.n	801b078 <__sflush_r+0x1c>
 801b15a:	4407      	add	r7, r0
 801b15c:	eba8 0800 	sub.w	r8, r8, r0
 801b160:	e7e9      	b.n	801b136 <__sflush_r+0xda>
 801b162:	bf00      	nop
 801b164:	20400001 	.word	0x20400001

0801b168 <_fflush_r>:
 801b168:	b538      	push	{r3, r4, r5, lr}
 801b16a:	690b      	ldr	r3, [r1, #16]
 801b16c:	4605      	mov	r5, r0
 801b16e:	460c      	mov	r4, r1
 801b170:	b913      	cbnz	r3, 801b178 <_fflush_r+0x10>
 801b172:	2500      	movs	r5, #0
 801b174:	4628      	mov	r0, r5
 801b176:	bd38      	pop	{r3, r4, r5, pc}
 801b178:	b118      	cbz	r0, 801b182 <_fflush_r+0x1a>
 801b17a:	6983      	ldr	r3, [r0, #24]
 801b17c:	b90b      	cbnz	r3, 801b182 <_fflush_r+0x1a>
 801b17e:	f7ff fcb9 	bl	801aaf4 <__sinit>
 801b182:	4b14      	ldr	r3, [pc, #80]	; (801b1d4 <_fflush_r+0x6c>)
 801b184:	429c      	cmp	r4, r3
 801b186:	d11b      	bne.n	801b1c0 <_fflush_r+0x58>
 801b188:	686c      	ldr	r4, [r5, #4]
 801b18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d0ef      	beq.n	801b172 <_fflush_r+0xa>
 801b192:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801b194:	07d0      	lsls	r0, r2, #31
 801b196:	d404      	bmi.n	801b1a2 <_fflush_r+0x3a>
 801b198:	0599      	lsls	r1, r3, #22
 801b19a:	d402      	bmi.n	801b1a2 <_fflush_r+0x3a>
 801b19c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b19e:	f7ff fd6c 	bl	801ac7a <__retarget_lock_acquire_recursive>
 801b1a2:	4628      	mov	r0, r5
 801b1a4:	4621      	mov	r1, r4
 801b1a6:	f7ff ff59 	bl	801b05c <__sflush_r>
 801b1aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b1ac:	07da      	lsls	r2, r3, #31
 801b1ae:	4605      	mov	r5, r0
 801b1b0:	d4e0      	bmi.n	801b174 <_fflush_r+0xc>
 801b1b2:	89a3      	ldrh	r3, [r4, #12]
 801b1b4:	059b      	lsls	r3, r3, #22
 801b1b6:	d4dd      	bmi.n	801b174 <_fflush_r+0xc>
 801b1b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b1ba:	f7ff fd5f 	bl	801ac7c <__retarget_lock_release_recursive>
 801b1be:	e7d9      	b.n	801b174 <_fflush_r+0xc>
 801b1c0:	4b05      	ldr	r3, [pc, #20]	; (801b1d8 <_fflush_r+0x70>)
 801b1c2:	429c      	cmp	r4, r3
 801b1c4:	d101      	bne.n	801b1ca <_fflush_r+0x62>
 801b1c6:	68ac      	ldr	r4, [r5, #8]
 801b1c8:	e7df      	b.n	801b18a <_fflush_r+0x22>
 801b1ca:	4b04      	ldr	r3, [pc, #16]	; (801b1dc <_fflush_r+0x74>)
 801b1cc:	429c      	cmp	r4, r3
 801b1ce:	bf08      	it	eq
 801b1d0:	68ec      	ldreq	r4, [r5, #12]
 801b1d2:	e7da      	b.n	801b18a <_fflush_r+0x22>
 801b1d4:	0801f36c 	.word	0x0801f36c
 801b1d8:	0801f38c 	.word	0x0801f38c
 801b1dc:	0801f34c 	.word	0x0801f34c

0801b1e0 <fiprintf>:
 801b1e0:	b40e      	push	{r1, r2, r3}
 801b1e2:	b503      	push	{r0, r1, lr}
 801b1e4:	4601      	mov	r1, r0
 801b1e6:	ab03      	add	r3, sp, #12
 801b1e8:	4805      	ldr	r0, [pc, #20]	; (801b200 <fiprintf+0x20>)
 801b1ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801b1ee:	6800      	ldr	r0, [r0, #0]
 801b1f0:	9301      	str	r3, [sp, #4]
 801b1f2:	f000 f8a7 	bl	801b344 <_vfiprintf_r>
 801b1f6:	b002      	add	sp, #8
 801b1f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801b1fc:	b003      	add	sp, #12
 801b1fe:	4770      	bx	lr
 801b200:	2400003c 	.word	0x2400003c

0801b204 <_lseek_r>:
 801b204:	b538      	push	{r3, r4, r5, lr}
 801b206:	4d07      	ldr	r5, [pc, #28]	; (801b224 <_lseek_r+0x20>)
 801b208:	4604      	mov	r4, r0
 801b20a:	4608      	mov	r0, r1
 801b20c:	4611      	mov	r1, r2
 801b20e:	2200      	movs	r2, #0
 801b210:	602a      	str	r2, [r5, #0]
 801b212:	461a      	mov	r2, r3
 801b214:	f7e6 fdca 	bl	8001dac <_lseek>
 801b218:	1c43      	adds	r3, r0, #1
 801b21a:	d102      	bne.n	801b222 <_lseek_r+0x1e>
 801b21c:	682b      	ldr	r3, [r5, #0]
 801b21e:	b103      	cbz	r3, 801b222 <_lseek_r+0x1e>
 801b220:	6023      	str	r3, [r4, #0]
 801b222:	bd38      	pop	{r3, r4, r5, pc}
 801b224:	2400828c 	.word	0x2400828c

0801b228 <malloc>:
 801b228:	4b02      	ldr	r3, [pc, #8]	; (801b234 <malloc+0xc>)
 801b22a:	4601      	mov	r1, r0
 801b22c:	6818      	ldr	r0, [r3, #0]
 801b22e:	f7ff bd4b 	b.w	801acc8 <_malloc_r>
 801b232:	bf00      	nop
 801b234:	2400003c 	.word	0x2400003c

0801b238 <__malloc_lock>:
 801b238:	4801      	ldr	r0, [pc, #4]	; (801b240 <__malloc_lock+0x8>)
 801b23a:	f7ff bd1e 	b.w	801ac7a <__retarget_lock_acquire_recursive>
 801b23e:	bf00      	nop
 801b240:	24008298 	.word	0x24008298

0801b244 <__malloc_unlock>:
 801b244:	4801      	ldr	r0, [pc, #4]	; (801b24c <__malloc_unlock+0x8>)
 801b246:	f7ff bd19 	b.w	801ac7c <__retarget_lock_release_recursive>
 801b24a:	bf00      	nop
 801b24c:	24008298 	.word	0x24008298

0801b250 <_free_r>:
 801b250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b252:	2900      	cmp	r1, #0
 801b254:	d048      	beq.n	801b2e8 <_free_r+0x98>
 801b256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b25a:	9001      	str	r0, [sp, #4]
 801b25c:	2b00      	cmp	r3, #0
 801b25e:	f1a1 0404 	sub.w	r4, r1, #4
 801b262:	bfb8      	it	lt
 801b264:	18e4      	addlt	r4, r4, r3
 801b266:	f7ff ffe7 	bl	801b238 <__malloc_lock>
 801b26a:	4a20      	ldr	r2, [pc, #128]	; (801b2ec <_free_r+0x9c>)
 801b26c:	9801      	ldr	r0, [sp, #4]
 801b26e:	6813      	ldr	r3, [r2, #0]
 801b270:	4615      	mov	r5, r2
 801b272:	b933      	cbnz	r3, 801b282 <_free_r+0x32>
 801b274:	6063      	str	r3, [r4, #4]
 801b276:	6014      	str	r4, [r2, #0]
 801b278:	b003      	add	sp, #12
 801b27a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b27e:	f7ff bfe1 	b.w	801b244 <__malloc_unlock>
 801b282:	42a3      	cmp	r3, r4
 801b284:	d90b      	bls.n	801b29e <_free_r+0x4e>
 801b286:	6821      	ldr	r1, [r4, #0]
 801b288:	1862      	adds	r2, r4, r1
 801b28a:	4293      	cmp	r3, r2
 801b28c:	bf04      	itt	eq
 801b28e:	681a      	ldreq	r2, [r3, #0]
 801b290:	685b      	ldreq	r3, [r3, #4]
 801b292:	6063      	str	r3, [r4, #4]
 801b294:	bf04      	itt	eq
 801b296:	1852      	addeq	r2, r2, r1
 801b298:	6022      	streq	r2, [r4, #0]
 801b29a:	602c      	str	r4, [r5, #0]
 801b29c:	e7ec      	b.n	801b278 <_free_r+0x28>
 801b29e:	461a      	mov	r2, r3
 801b2a0:	685b      	ldr	r3, [r3, #4]
 801b2a2:	b10b      	cbz	r3, 801b2a8 <_free_r+0x58>
 801b2a4:	42a3      	cmp	r3, r4
 801b2a6:	d9fa      	bls.n	801b29e <_free_r+0x4e>
 801b2a8:	6811      	ldr	r1, [r2, #0]
 801b2aa:	1855      	adds	r5, r2, r1
 801b2ac:	42a5      	cmp	r5, r4
 801b2ae:	d10b      	bne.n	801b2c8 <_free_r+0x78>
 801b2b0:	6824      	ldr	r4, [r4, #0]
 801b2b2:	4421      	add	r1, r4
 801b2b4:	1854      	adds	r4, r2, r1
 801b2b6:	42a3      	cmp	r3, r4
 801b2b8:	6011      	str	r1, [r2, #0]
 801b2ba:	d1dd      	bne.n	801b278 <_free_r+0x28>
 801b2bc:	681c      	ldr	r4, [r3, #0]
 801b2be:	685b      	ldr	r3, [r3, #4]
 801b2c0:	6053      	str	r3, [r2, #4]
 801b2c2:	4421      	add	r1, r4
 801b2c4:	6011      	str	r1, [r2, #0]
 801b2c6:	e7d7      	b.n	801b278 <_free_r+0x28>
 801b2c8:	d902      	bls.n	801b2d0 <_free_r+0x80>
 801b2ca:	230c      	movs	r3, #12
 801b2cc:	6003      	str	r3, [r0, #0]
 801b2ce:	e7d3      	b.n	801b278 <_free_r+0x28>
 801b2d0:	6825      	ldr	r5, [r4, #0]
 801b2d2:	1961      	adds	r1, r4, r5
 801b2d4:	428b      	cmp	r3, r1
 801b2d6:	bf04      	itt	eq
 801b2d8:	6819      	ldreq	r1, [r3, #0]
 801b2da:	685b      	ldreq	r3, [r3, #4]
 801b2dc:	6063      	str	r3, [r4, #4]
 801b2de:	bf04      	itt	eq
 801b2e0:	1949      	addeq	r1, r1, r5
 801b2e2:	6021      	streq	r1, [r4, #0]
 801b2e4:	6054      	str	r4, [r2, #4]
 801b2e6:	e7c7      	b.n	801b278 <_free_r+0x28>
 801b2e8:	b003      	add	sp, #12
 801b2ea:	bd30      	pop	{r4, r5, pc}
 801b2ec:	24004c48 	.word	0x24004c48

0801b2f0 <__sfputc_r>:
 801b2f0:	6893      	ldr	r3, [r2, #8]
 801b2f2:	3b01      	subs	r3, #1
 801b2f4:	2b00      	cmp	r3, #0
 801b2f6:	b410      	push	{r4}
 801b2f8:	6093      	str	r3, [r2, #8]
 801b2fa:	da08      	bge.n	801b30e <__sfputc_r+0x1e>
 801b2fc:	6994      	ldr	r4, [r2, #24]
 801b2fe:	42a3      	cmp	r3, r4
 801b300:	db01      	blt.n	801b306 <__sfputc_r+0x16>
 801b302:	290a      	cmp	r1, #10
 801b304:	d103      	bne.n	801b30e <__sfputc_r+0x1e>
 801b306:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b30a:	f000 baf1 	b.w	801b8f0 <__swbuf_r>
 801b30e:	6813      	ldr	r3, [r2, #0]
 801b310:	1c58      	adds	r0, r3, #1
 801b312:	6010      	str	r0, [r2, #0]
 801b314:	7019      	strb	r1, [r3, #0]
 801b316:	4608      	mov	r0, r1
 801b318:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b31c:	4770      	bx	lr

0801b31e <__sfputs_r>:
 801b31e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b320:	4606      	mov	r6, r0
 801b322:	460f      	mov	r7, r1
 801b324:	4614      	mov	r4, r2
 801b326:	18d5      	adds	r5, r2, r3
 801b328:	42ac      	cmp	r4, r5
 801b32a:	d101      	bne.n	801b330 <__sfputs_r+0x12>
 801b32c:	2000      	movs	r0, #0
 801b32e:	e007      	b.n	801b340 <__sfputs_r+0x22>
 801b330:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b334:	463a      	mov	r2, r7
 801b336:	4630      	mov	r0, r6
 801b338:	f7ff ffda 	bl	801b2f0 <__sfputc_r>
 801b33c:	1c43      	adds	r3, r0, #1
 801b33e:	d1f3      	bne.n	801b328 <__sfputs_r+0xa>
 801b340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b344 <_vfiprintf_r>:
 801b344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b348:	460d      	mov	r5, r1
 801b34a:	b09d      	sub	sp, #116	; 0x74
 801b34c:	4614      	mov	r4, r2
 801b34e:	4698      	mov	r8, r3
 801b350:	4606      	mov	r6, r0
 801b352:	b118      	cbz	r0, 801b35c <_vfiprintf_r+0x18>
 801b354:	6983      	ldr	r3, [r0, #24]
 801b356:	b90b      	cbnz	r3, 801b35c <_vfiprintf_r+0x18>
 801b358:	f7ff fbcc 	bl	801aaf4 <__sinit>
 801b35c:	4b89      	ldr	r3, [pc, #548]	; (801b584 <_vfiprintf_r+0x240>)
 801b35e:	429d      	cmp	r5, r3
 801b360:	d11b      	bne.n	801b39a <_vfiprintf_r+0x56>
 801b362:	6875      	ldr	r5, [r6, #4]
 801b364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b366:	07d9      	lsls	r1, r3, #31
 801b368:	d405      	bmi.n	801b376 <_vfiprintf_r+0x32>
 801b36a:	89ab      	ldrh	r3, [r5, #12]
 801b36c:	059a      	lsls	r2, r3, #22
 801b36e:	d402      	bmi.n	801b376 <_vfiprintf_r+0x32>
 801b370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b372:	f7ff fc82 	bl	801ac7a <__retarget_lock_acquire_recursive>
 801b376:	89ab      	ldrh	r3, [r5, #12]
 801b378:	071b      	lsls	r3, r3, #28
 801b37a:	d501      	bpl.n	801b380 <_vfiprintf_r+0x3c>
 801b37c:	692b      	ldr	r3, [r5, #16]
 801b37e:	b9eb      	cbnz	r3, 801b3bc <_vfiprintf_r+0x78>
 801b380:	4629      	mov	r1, r5
 801b382:	4630      	mov	r0, r6
 801b384:	f000 fb06 	bl	801b994 <__swsetup_r>
 801b388:	b1c0      	cbz	r0, 801b3bc <_vfiprintf_r+0x78>
 801b38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b38c:	07dc      	lsls	r4, r3, #31
 801b38e:	d50e      	bpl.n	801b3ae <_vfiprintf_r+0x6a>
 801b390:	f04f 30ff 	mov.w	r0, #4294967295
 801b394:	b01d      	add	sp, #116	; 0x74
 801b396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b39a:	4b7b      	ldr	r3, [pc, #492]	; (801b588 <_vfiprintf_r+0x244>)
 801b39c:	429d      	cmp	r5, r3
 801b39e:	d101      	bne.n	801b3a4 <_vfiprintf_r+0x60>
 801b3a0:	68b5      	ldr	r5, [r6, #8]
 801b3a2:	e7df      	b.n	801b364 <_vfiprintf_r+0x20>
 801b3a4:	4b79      	ldr	r3, [pc, #484]	; (801b58c <_vfiprintf_r+0x248>)
 801b3a6:	429d      	cmp	r5, r3
 801b3a8:	bf08      	it	eq
 801b3aa:	68f5      	ldreq	r5, [r6, #12]
 801b3ac:	e7da      	b.n	801b364 <_vfiprintf_r+0x20>
 801b3ae:	89ab      	ldrh	r3, [r5, #12]
 801b3b0:	0598      	lsls	r0, r3, #22
 801b3b2:	d4ed      	bmi.n	801b390 <_vfiprintf_r+0x4c>
 801b3b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b3b6:	f7ff fc61 	bl	801ac7c <__retarget_lock_release_recursive>
 801b3ba:	e7e9      	b.n	801b390 <_vfiprintf_r+0x4c>
 801b3bc:	2300      	movs	r3, #0
 801b3be:	9309      	str	r3, [sp, #36]	; 0x24
 801b3c0:	2320      	movs	r3, #32
 801b3c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 801b3ca:	2330      	movs	r3, #48	; 0x30
 801b3cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b590 <_vfiprintf_r+0x24c>
 801b3d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b3d4:	f04f 0901 	mov.w	r9, #1
 801b3d8:	4623      	mov	r3, r4
 801b3da:	469a      	mov	sl, r3
 801b3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b3e0:	b10a      	cbz	r2, 801b3e6 <_vfiprintf_r+0xa2>
 801b3e2:	2a25      	cmp	r2, #37	; 0x25
 801b3e4:	d1f9      	bne.n	801b3da <_vfiprintf_r+0x96>
 801b3e6:	ebba 0b04 	subs.w	fp, sl, r4
 801b3ea:	d00b      	beq.n	801b404 <_vfiprintf_r+0xc0>
 801b3ec:	465b      	mov	r3, fp
 801b3ee:	4622      	mov	r2, r4
 801b3f0:	4629      	mov	r1, r5
 801b3f2:	4630      	mov	r0, r6
 801b3f4:	f7ff ff93 	bl	801b31e <__sfputs_r>
 801b3f8:	3001      	adds	r0, #1
 801b3fa:	f000 80aa 	beq.w	801b552 <_vfiprintf_r+0x20e>
 801b3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b400:	445a      	add	r2, fp
 801b402:	9209      	str	r2, [sp, #36]	; 0x24
 801b404:	f89a 3000 	ldrb.w	r3, [sl]
 801b408:	2b00      	cmp	r3, #0
 801b40a:	f000 80a2 	beq.w	801b552 <_vfiprintf_r+0x20e>
 801b40e:	2300      	movs	r3, #0
 801b410:	f04f 32ff 	mov.w	r2, #4294967295
 801b414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b418:	f10a 0a01 	add.w	sl, sl, #1
 801b41c:	9304      	str	r3, [sp, #16]
 801b41e:	9307      	str	r3, [sp, #28]
 801b420:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b424:	931a      	str	r3, [sp, #104]	; 0x68
 801b426:	4654      	mov	r4, sl
 801b428:	2205      	movs	r2, #5
 801b42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b42e:	4858      	ldr	r0, [pc, #352]	; (801b590 <_vfiprintf_r+0x24c>)
 801b430:	f7e4 ff86 	bl	8000340 <memchr>
 801b434:	9a04      	ldr	r2, [sp, #16]
 801b436:	b9d8      	cbnz	r0, 801b470 <_vfiprintf_r+0x12c>
 801b438:	06d1      	lsls	r1, r2, #27
 801b43a:	bf44      	itt	mi
 801b43c:	2320      	movmi	r3, #32
 801b43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b442:	0713      	lsls	r3, r2, #28
 801b444:	bf44      	itt	mi
 801b446:	232b      	movmi	r3, #43	; 0x2b
 801b448:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b44c:	f89a 3000 	ldrb.w	r3, [sl]
 801b450:	2b2a      	cmp	r3, #42	; 0x2a
 801b452:	d015      	beq.n	801b480 <_vfiprintf_r+0x13c>
 801b454:	9a07      	ldr	r2, [sp, #28]
 801b456:	4654      	mov	r4, sl
 801b458:	2000      	movs	r0, #0
 801b45a:	f04f 0c0a 	mov.w	ip, #10
 801b45e:	4621      	mov	r1, r4
 801b460:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b464:	3b30      	subs	r3, #48	; 0x30
 801b466:	2b09      	cmp	r3, #9
 801b468:	d94e      	bls.n	801b508 <_vfiprintf_r+0x1c4>
 801b46a:	b1b0      	cbz	r0, 801b49a <_vfiprintf_r+0x156>
 801b46c:	9207      	str	r2, [sp, #28]
 801b46e:	e014      	b.n	801b49a <_vfiprintf_r+0x156>
 801b470:	eba0 0308 	sub.w	r3, r0, r8
 801b474:	fa09 f303 	lsl.w	r3, r9, r3
 801b478:	4313      	orrs	r3, r2
 801b47a:	9304      	str	r3, [sp, #16]
 801b47c:	46a2      	mov	sl, r4
 801b47e:	e7d2      	b.n	801b426 <_vfiprintf_r+0xe2>
 801b480:	9b03      	ldr	r3, [sp, #12]
 801b482:	1d19      	adds	r1, r3, #4
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	9103      	str	r1, [sp, #12]
 801b488:	2b00      	cmp	r3, #0
 801b48a:	bfbb      	ittet	lt
 801b48c:	425b      	neglt	r3, r3
 801b48e:	f042 0202 	orrlt.w	r2, r2, #2
 801b492:	9307      	strge	r3, [sp, #28]
 801b494:	9307      	strlt	r3, [sp, #28]
 801b496:	bfb8      	it	lt
 801b498:	9204      	strlt	r2, [sp, #16]
 801b49a:	7823      	ldrb	r3, [r4, #0]
 801b49c:	2b2e      	cmp	r3, #46	; 0x2e
 801b49e:	d10c      	bne.n	801b4ba <_vfiprintf_r+0x176>
 801b4a0:	7863      	ldrb	r3, [r4, #1]
 801b4a2:	2b2a      	cmp	r3, #42	; 0x2a
 801b4a4:	d135      	bne.n	801b512 <_vfiprintf_r+0x1ce>
 801b4a6:	9b03      	ldr	r3, [sp, #12]
 801b4a8:	1d1a      	adds	r2, r3, #4
 801b4aa:	681b      	ldr	r3, [r3, #0]
 801b4ac:	9203      	str	r2, [sp, #12]
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	bfb8      	it	lt
 801b4b2:	f04f 33ff 	movlt.w	r3, #4294967295
 801b4b6:	3402      	adds	r4, #2
 801b4b8:	9305      	str	r3, [sp, #20]
 801b4ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b5a0 <_vfiprintf_r+0x25c>
 801b4be:	7821      	ldrb	r1, [r4, #0]
 801b4c0:	2203      	movs	r2, #3
 801b4c2:	4650      	mov	r0, sl
 801b4c4:	f7e4 ff3c 	bl	8000340 <memchr>
 801b4c8:	b140      	cbz	r0, 801b4dc <_vfiprintf_r+0x198>
 801b4ca:	2340      	movs	r3, #64	; 0x40
 801b4cc:	eba0 000a 	sub.w	r0, r0, sl
 801b4d0:	fa03 f000 	lsl.w	r0, r3, r0
 801b4d4:	9b04      	ldr	r3, [sp, #16]
 801b4d6:	4303      	orrs	r3, r0
 801b4d8:	3401      	adds	r4, #1
 801b4da:	9304      	str	r3, [sp, #16]
 801b4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4e0:	482c      	ldr	r0, [pc, #176]	; (801b594 <_vfiprintf_r+0x250>)
 801b4e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b4e6:	2206      	movs	r2, #6
 801b4e8:	f7e4 ff2a 	bl	8000340 <memchr>
 801b4ec:	2800      	cmp	r0, #0
 801b4ee:	d03f      	beq.n	801b570 <_vfiprintf_r+0x22c>
 801b4f0:	4b29      	ldr	r3, [pc, #164]	; (801b598 <_vfiprintf_r+0x254>)
 801b4f2:	bb1b      	cbnz	r3, 801b53c <_vfiprintf_r+0x1f8>
 801b4f4:	9b03      	ldr	r3, [sp, #12]
 801b4f6:	3307      	adds	r3, #7
 801b4f8:	f023 0307 	bic.w	r3, r3, #7
 801b4fc:	3308      	adds	r3, #8
 801b4fe:	9303      	str	r3, [sp, #12]
 801b500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b502:	443b      	add	r3, r7
 801b504:	9309      	str	r3, [sp, #36]	; 0x24
 801b506:	e767      	b.n	801b3d8 <_vfiprintf_r+0x94>
 801b508:	fb0c 3202 	mla	r2, ip, r2, r3
 801b50c:	460c      	mov	r4, r1
 801b50e:	2001      	movs	r0, #1
 801b510:	e7a5      	b.n	801b45e <_vfiprintf_r+0x11a>
 801b512:	2300      	movs	r3, #0
 801b514:	3401      	adds	r4, #1
 801b516:	9305      	str	r3, [sp, #20]
 801b518:	4619      	mov	r1, r3
 801b51a:	f04f 0c0a 	mov.w	ip, #10
 801b51e:	4620      	mov	r0, r4
 801b520:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b524:	3a30      	subs	r2, #48	; 0x30
 801b526:	2a09      	cmp	r2, #9
 801b528:	d903      	bls.n	801b532 <_vfiprintf_r+0x1ee>
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d0c5      	beq.n	801b4ba <_vfiprintf_r+0x176>
 801b52e:	9105      	str	r1, [sp, #20]
 801b530:	e7c3      	b.n	801b4ba <_vfiprintf_r+0x176>
 801b532:	fb0c 2101 	mla	r1, ip, r1, r2
 801b536:	4604      	mov	r4, r0
 801b538:	2301      	movs	r3, #1
 801b53a:	e7f0      	b.n	801b51e <_vfiprintf_r+0x1da>
 801b53c:	ab03      	add	r3, sp, #12
 801b53e:	9300      	str	r3, [sp, #0]
 801b540:	462a      	mov	r2, r5
 801b542:	4b16      	ldr	r3, [pc, #88]	; (801b59c <_vfiprintf_r+0x258>)
 801b544:	a904      	add	r1, sp, #16
 801b546:	4630      	mov	r0, r6
 801b548:	f3af 8000 	nop.w
 801b54c:	4607      	mov	r7, r0
 801b54e:	1c78      	adds	r0, r7, #1
 801b550:	d1d6      	bne.n	801b500 <_vfiprintf_r+0x1bc>
 801b552:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b554:	07d9      	lsls	r1, r3, #31
 801b556:	d405      	bmi.n	801b564 <_vfiprintf_r+0x220>
 801b558:	89ab      	ldrh	r3, [r5, #12]
 801b55a:	059a      	lsls	r2, r3, #22
 801b55c:	d402      	bmi.n	801b564 <_vfiprintf_r+0x220>
 801b55e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b560:	f7ff fb8c 	bl	801ac7c <__retarget_lock_release_recursive>
 801b564:	89ab      	ldrh	r3, [r5, #12]
 801b566:	065b      	lsls	r3, r3, #25
 801b568:	f53f af12 	bmi.w	801b390 <_vfiprintf_r+0x4c>
 801b56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b56e:	e711      	b.n	801b394 <_vfiprintf_r+0x50>
 801b570:	ab03      	add	r3, sp, #12
 801b572:	9300      	str	r3, [sp, #0]
 801b574:	462a      	mov	r2, r5
 801b576:	4b09      	ldr	r3, [pc, #36]	; (801b59c <_vfiprintf_r+0x258>)
 801b578:	a904      	add	r1, sp, #16
 801b57a:	4630      	mov	r0, r6
 801b57c:	f000 f880 	bl	801b680 <_printf_i>
 801b580:	e7e4      	b.n	801b54c <_vfiprintf_r+0x208>
 801b582:	bf00      	nop
 801b584:	0801f36c 	.word	0x0801f36c
 801b588:	0801f38c 	.word	0x0801f38c
 801b58c:	0801f34c 	.word	0x0801f34c
 801b590:	0801f462 	.word	0x0801f462
 801b594:	0801f46c 	.word	0x0801f46c
 801b598:	00000000 	.word	0x00000000
 801b59c:	0801b31f 	.word	0x0801b31f
 801b5a0:	0801f468 	.word	0x0801f468

0801b5a4 <_printf_common>:
 801b5a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b5a8:	4616      	mov	r6, r2
 801b5aa:	4699      	mov	r9, r3
 801b5ac:	688a      	ldr	r2, [r1, #8]
 801b5ae:	690b      	ldr	r3, [r1, #16]
 801b5b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b5b4:	4293      	cmp	r3, r2
 801b5b6:	bfb8      	it	lt
 801b5b8:	4613      	movlt	r3, r2
 801b5ba:	6033      	str	r3, [r6, #0]
 801b5bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b5c0:	4607      	mov	r7, r0
 801b5c2:	460c      	mov	r4, r1
 801b5c4:	b10a      	cbz	r2, 801b5ca <_printf_common+0x26>
 801b5c6:	3301      	adds	r3, #1
 801b5c8:	6033      	str	r3, [r6, #0]
 801b5ca:	6823      	ldr	r3, [r4, #0]
 801b5cc:	0699      	lsls	r1, r3, #26
 801b5ce:	bf42      	ittt	mi
 801b5d0:	6833      	ldrmi	r3, [r6, #0]
 801b5d2:	3302      	addmi	r3, #2
 801b5d4:	6033      	strmi	r3, [r6, #0]
 801b5d6:	6825      	ldr	r5, [r4, #0]
 801b5d8:	f015 0506 	ands.w	r5, r5, #6
 801b5dc:	d106      	bne.n	801b5ec <_printf_common+0x48>
 801b5de:	f104 0a19 	add.w	sl, r4, #25
 801b5e2:	68e3      	ldr	r3, [r4, #12]
 801b5e4:	6832      	ldr	r2, [r6, #0]
 801b5e6:	1a9b      	subs	r3, r3, r2
 801b5e8:	42ab      	cmp	r3, r5
 801b5ea:	dc26      	bgt.n	801b63a <_printf_common+0x96>
 801b5ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b5f0:	1e13      	subs	r3, r2, #0
 801b5f2:	6822      	ldr	r2, [r4, #0]
 801b5f4:	bf18      	it	ne
 801b5f6:	2301      	movne	r3, #1
 801b5f8:	0692      	lsls	r2, r2, #26
 801b5fa:	d42b      	bmi.n	801b654 <_printf_common+0xb0>
 801b5fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b600:	4649      	mov	r1, r9
 801b602:	4638      	mov	r0, r7
 801b604:	47c0      	blx	r8
 801b606:	3001      	adds	r0, #1
 801b608:	d01e      	beq.n	801b648 <_printf_common+0xa4>
 801b60a:	6823      	ldr	r3, [r4, #0]
 801b60c:	68e5      	ldr	r5, [r4, #12]
 801b60e:	6832      	ldr	r2, [r6, #0]
 801b610:	f003 0306 	and.w	r3, r3, #6
 801b614:	2b04      	cmp	r3, #4
 801b616:	bf08      	it	eq
 801b618:	1aad      	subeq	r5, r5, r2
 801b61a:	68a3      	ldr	r3, [r4, #8]
 801b61c:	6922      	ldr	r2, [r4, #16]
 801b61e:	bf0c      	ite	eq
 801b620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b624:	2500      	movne	r5, #0
 801b626:	4293      	cmp	r3, r2
 801b628:	bfc4      	itt	gt
 801b62a:	1a9b      	subgt	r3, r3, r2
 801b62c:	18ed      	addgt	r5, r5, r3
 801b62e:	2600      	movs	r6, #0
 801b630:	341a      	adds	r4, #26
 801b632:	42b5      	cmp	r5, r6
 801b634:	d11a      	bne.n	801b66c <_printf_common+0xc8>
 801b636:	2000      	movs	r0, #0
 801b638:	e008      	b.n	801b64c <_printf_common+0xa8>
 801b63a:	2301      	movs	r3, #1
 801b63c:	4652      	mov	r2, sl
 801b63e:	4649      	mov	r1, r9
 801b640:	4638      	mov	r0, r7
 801b642:	47c0      	blx	r8
 801b644:	3001      	adds	r0, #1
 801b646:	d103      	bne.n	801b650 <_printf_common+0xac>
 801b648:	f04f 30ff 	mov.w	r0, #4294967295
 801b64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b650:	3501      	adds	r5, #1
 801b652:	e7c6      	b.n	801b5e2 <_printf_common+0x3e>
 801b654:	18e1      	adds	r1, r4, r3
 801b656:	1c5a      	adds	r2, r3, #1
 801b658:	2030      	movs	r0, #48	; 0x30
 801b65a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b65e:	4422      	add	r2, r4
 801b660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b668:	3302      	adds	r3, #2
 801b66a:	e7c7      	b.n	801b5fc <_printf_common+0x58>
 801b66c:	2301      	movs	r3, #1
 801b66e:	4622      	mov	r2, r4
 801b670:	4649      	mov	r1, r9
 801b672:	4638      	mov	r0, r7
 801b674:	47c0      	blx	r8
 801b676:	3001      	adds	r0, #1
 801b678:	d0e6      	beq.n	801b648 <_printf_common+0xa4>
 801b67a:	3601      	adds	r6, #1
 801b67c:	e7d9      	b.n	801b632 <_printf_common+0x8e>
	...

0801b680 <_printf_i>:
 801b680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b684:	460c      	mov	r4, r1
 801b686:	4691      	mov	r9, r2
 801b688:	7e27      	ldrb	r7, [r4, #24]
 801b68a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b68c:	2f78      	cmp	r7, #120	; 0x78
 801b68e:	4680      	mov	r8, r0
 801b690:	469a      	mov	sl, r3
 801b692:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b696:	d807      	bhi.n	801b6a8 <_printf_i+0x28>
 801b698:	2f62      	cmp	r7, #98	; 0x62
 801b69a:	d80a      	bhi.n	801b6b2 <_printf_i+0x32>
 801b69c:	2f00      	cmp	r7, #0
 801b69e:	f000 80d8 	beq.w	801b852 <_printf_i+0x1d2>
 801b6a2:	2f58      	cmp	r7, #88	; 0x58
 801b6a4:	f000 80a3 	beq.w	801b7ee <_printf_i+0x16e>
 801b6a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b6ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b6b0:	e03a      	b.n	801b728 <_printf_i+0xa8>
 801b6b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b6b6:	2b15      	cmp	r3, #21
 801b6b8:	d8f6      	bhi.n	801b6a8 <_printf_i+0x28>
 801b6ba:	a001      	add	r0, pc, #4	; (adr r0, 801b6c0 <_printf_i+0x40>)
 801b6bc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b6c0:	0801b719 	.word	0x0801b719
 801b6c4:	0801b72d 	.word	0x0801b72d
 801b6c8:	0801b6a9 	.word	0x0801b6a9
 801b6cc:	0801b6a9 	.word	0x0801b6a9
 801b6d0:	0801b6a9 	.word	0x0801b6a9
 801b6d4:	0801b6a9 	.word	0x0801b6a9
 801b6d8:	0801b72d 	.word	0x0801b72d
 801b6dc:	0801b6a9 	.word	0x0801b6a9
 801b6e0:	0801b6a9 	.word	0x0801b6a9
 801b6e4:	0801b6a9 	.word	0x0801b6a9
 801b6e8:	0801b6a9 	.word	0x0801b6a9
 801b6ec:	0801b839 	.word	0x0801b839
 801b6f0:	0801b75d 	.word	0x0801b75d
 801b6f4:	0801b81b 	.word	0x0801b81b
 801b6f8:	0801b6a9 	.word	0x0801b6a9
 801b6fc:	0801b6a9 	.word	0x0801b6a9
 801b700:	0801b85b 	.word	0x0801b85b
 801b704:	0801b6a9 	.word	0x0801b6a9
 801b708:	0801b75d 	.word	0x0801b75d
 801b70c:	0801b6a9 	.word	0x0801b6a9
 801b710:	0801b6a9 	.word	0x0801b6a9
 801b714:	0801b823 	.word	0x0801b823
 801b718:	680b      	ldr	r3, [r1, #0]
 801b71a:	1d1a      	adds	r2, r3, #4
 801b71c:	681b      	ldr	r3, [r3, #0]
 801b71e:	600a      	str	r2, [r1, #0]
 801b720:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b728:	2301      	movs	r3, #1
 801b72a:	e0a3      	b.n	801b874 <_printf_i+0x1f4>
 801b72c:	6825      	ldr	r5, [r4, #0]
 801b72e:	6808      	ldr	r0, [r1, #0]
 801b730:	062e      	lsls	r6, r5, #24
 801b732:	f100 0304 	add.w	r3, r0, #4
 801b736:	d50a      	bpl.n	801b74e <_printf_i+0xce>
 801b738:	6805      	ldr	r5, [r0, #0]
 801b73a:	600b      	str	r3, [r1, #0]
 801b73c:	2d00      	cmp	r5, #0
 801b73e:	da03      	bge.n	801b748 <_printf_i+0xc8>
 801b740:	232d      	movs	r3, #45	; 0x2d
 801b742:	426d      	negs	r5, r5
 801b744:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b748:	485e      	ldr	r0, [pc, #376]	; (801b8c4 <_printf_i+0x244>)
 801b74a:	230a      	movs	r3, #10
 801b74c:	e019      	b.n	801b782 <_printf_i+0x102>
 801b74e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b752:	6805      	ldr	r5, [r0, #0]
 801b754:	600b      	str	r3, [r1, #0]
 801b756:	bf18      	it	ne
 801b758:	b22d      	sxthne	r5, r5
 801b75a:	e7ef      	b.n	801b73c <_printf_i+0xbc>
 801b75c:	680b      	ldr	r3, [r1, #0]
 801b75e:	6825      	ldr	r5, [r4, #0]
 801b760:	1d18      	adds	r0, r3, #4
 801b762:	6008      	str	r0, [r1, #0]
 801b764:	0628      	lsls	r0, r5, #24
 801b766:	d501      	bpl.n	801b76c <_printf_i+0xec>
 801b768:	681d      	ldr	r5, [r3, #0]
 801b76a:	e002      	b.n	801b772 <_printf_i+0xf2>
 801b76c:	0669      	lsls	r1, r5, #25
 801b76e:	d5fb      	bpl.n	801b768 <_printf_i+0xe8>
 801b770:	881d      	ldrh	r5, [r3, #0]
 801b772:	4854      	ldr	r0, [pc, #336]	; (801b8c4 <_printf_i+0x244>)
 801b774:	2f6f      	cmp	r7, #111	; 0x6f
 801b776:	bf0c      	ite	eq
 801b778:	2308      	moveq	r3, #8
 801b77a:	230a      	movne	r3, #10
 801b77c:	2100      	movs	r1, #0
 801b77e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b782:	6866      	ldr	r6, [r4, #4]
 801b784:	60a6      	str	r6, [r4, #8]
 801b786:	2e00      	cmp	r6, #0
 801b788:	bfa2      	ittt	ge
 801b78a:	6821      	ldrge	r1, [r4, #0]
 801b78c:	f021 0104 	bicge.w	r1, r1, #4
 801b790:	6021      	strge	r1, [r4, #0]
 801b792:	b90d      	cbnz	r5, 801b798 <_printf_i+0x118>
 801b794:	2e00      	cmp	r6, #0
 801b796:	d04d      	beq.n	801b834 <_printf_i+0x1b4>
 801b798:	4616      	mov	r6, r2
 801b79a:	fbb5 f1f3 	udiv	r1, r5, r3
 801b79e:	fb03 5711 	mls	r7, r3, r1, r5
 801b7a2:	5dc7      	ldrb	r7, [r0, r7]
 801b7a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b7a8:	462f      	mov	r7, r5
 801b7aa:	42bb      	cmp	r3, r7
 801b7ac:	460d      	mov	r5, r1
 801b7ae:	d9f4      	bls.n	801b79a <_printf_i+0x11a>
 801b7b0:	2b08      	cmp	r3, #8
 801b7b2:	d10b      	bne.n	801b7cc <_printf_i+0x14c>
 801b7b4:	6823      	ldr	r3, [r4, #0]
 801b7b6:	07df      	lsls	r7, r3, #31
 801b7b8:	d508      	bpl.n	801b7cc <_printf_i+0x14c>
 801b7ba:	6923      	ldr	r3, [r4, #16]
 801b7bc:	6861      	ldr	r1, [r4, #4]
 801b7be:	4299      	cmp	r1, r3
 801b7c0:	bfde      	ittt	le
 801b7c2:	2330      	movle	r3, #48	; 0x30
 801b7c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b7c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b7cc:	1b92      	subs	r2, r2, r6
 801b7ce:	6122      	str	r2, [r4, #16]
 801b7d0:	f8cd a000 	str.w	sl, [sp]
 801b7d4:	464b      	mov	r3, r9
 801b7d6:	aa03      	add	r2, sp, #12
 801b7d8:	4621      	mov	r1, r4
 801b7da:	4640      	mov	r0, r8
 801b7dc:	f7ff fee2 	bl	801b5a4 <_printf_common>
 801b7e0:	3001      	adds	r0, #1
 801b7e2:	d14c      	bne.n	801b87e <_printf_i+0x1fe>
 801b7e4:	f04f 30ff 	mov.w	r0, #4294967295
 801b7e8:	b004      	add	sp, #16
 801b7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b7ee:	4835      	ldr	r0, [pc, #212]	; (801b8c4 <_printf_i+0x244>)
 801b7f0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b7f4:	6823      	ldr	r3, [r4, #0]
 801b7f6:	680e      	ldr	r6, [r1, #0]
 801b7f8:	061f      	lsls	r7, r3, #24
 801b7fa:	f856 5b04 	ldr.w	r5, [r6], #4
 801b7fe:	600e      	str	r6, [r1, #0]
 801b800:	d514      	bpl.n	801b82c <_printf_i+0x1ac>
 801b802:	07d9      	lsls	r1, r3, #31
 801b804:	bf44      	itt	mi
 801b806:	f043 0320 	orrmi.w	r3, r3, #32
 801b80a:	6023      	strmi	r3, [r4, #0]
 801b80c:	b91d      	cbnz	r5, 801b816 <_printf_i+0x196>
 801b80e:	6823      	ldr	r3, [r4, #0]
 801b810:	f023 0320 	bic.w	r3, r3, #32
 801b814:	6023      	str	r3, [r4, #0]
 801b816:	2310      	movs	r3, #16
 801b818:	e7b0      	b.n	801b77c <_printf_i+0xfc>
 801b81a:	6823      	ldr	r3, [r4, #0]
 801b81c:	f043 0320 	orr.w	r3, r3, #32
 801b820:	6023      	str	r3, [r4, #0]
 801b822:	2378      	movs	r3, #120	; 0x78
 801b824:	4828      	ldr	r0, [pc, #160]	; (801b8c8 <_printf_i+0x248>)
 801b826:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b82a:	e7e3      	b.n	801b7f4 <_printf_i+0x174>
 801b82c:	065e      	lsls	r6, r3, #25
 801b82e:	bf48      	it	mi
 801b830:	b2ad      	uxthmi	r5, r5
 801b832:	e7e6      	b.n	801b802 <_printf_i+0x182>
 801b834:	4616      	mov	r6, r2
 801b836:	e7bb      	b.n	801b7b0 <_printf_i+0x130>
 801b838:	680b      	ldr	r3, [r1, #0]
 801b83a:	6826      	ldr	r6, [r4, #0]
 801b83c:	6960      	ldr	r0, [r4, #20]
 801b83e:	1d1d      	adds	r5, r3, #4
 801b840:	600d      	str	r5, [r1, #0]
 801b842:	0635      	lsls	r5, r6, #24
 801b844:	681b      	ldr	r3, [r3, #0]
 801b846:	d501      	bpl.n	801b84c <_printf_i+0x1cc>
 801b848:	6018      	str	r0, [r3, #0]
 801b84a:	e002      	b.n	801b852 <_printf_i+0x1d2>
 801b84c:	0671      	lsls	r1, r6, #25
 801b84e:	d5fb      	bpl.n	801b848 <_printf_i+0x1c8>
 801b850:	8018      	strh	r0, [r3, #0]
 801b852:	2300      	movs	r3, #0
 801b854:	6123      	str	r3, [r4, #16]
 801b856:	4616      	mov	r6, r2
 801b858:	e7ba      	b.n	801b7d0 <_printf_i+0x150>
 801b85a:	680b      	ldr	r3, [r1, #0]
 801b85c:	1d1a      	adds	r2, r3, #4
 801b85e:	600a      	str	r2, [r1, #0]
 801b860:	681e      	ldr	r6, [r3, #0]
 801b862:	6862      	ldr	r2, [r4, #4]
 801b864:	2100      	movs	r1, #0
 801b866:	4630      	mov	r0, r6
 801b868:	f7e4 fd6a 	bl	8000340 <memchr>
 801b86c:	b108      	cbz	r0, 801b872 <_printf_i+0x1f2>
 801b86e:	1b80      	subs	r0, r0, r6
 801b870:	6060      	str	r0, [r4, #4]
 801b872:	6863      	ldr	r3, [r4, #4]
 801b874:	6123      	str	r3, [r4, #16]
 801b876:	2300      	movs	r3, #0
 801b878:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b87c:	e7a8      	b.n	801b7d0 <_printf_i+0x150>
 801b87e:	6923      	ldr	r3, [r4, #16]
 801b880:	4632      	mov	r2, r6
 801b882:	4649      	mov	r1, r9
 801b884:	4640      	mov	r0, r8
 801b886:	47d0      	blx	sl
 801b888:	3001      	adds	r0, #1
 801b88a:	d0ab      	beq.n	801b7e4 <_printf_i+0x164>
 801b88c:	6823      	ldr	r3, [r4, #0]
 801b88e:	079b      	lsls	r3, r3, #30
 801b890:	d413      	bmi.n	801b8ba <_printf_i+0x23a>
 801b892:	68e0      	ldr	r0, [r4, #12]
 801b894:	9b03      	ldr	r3, [sp, #12]
 801b896:	4298      	cmp	r0, r3
 801b898:	bfb8      	it	lt
 801b89a:	4618      	movlt	r0, r3
 801b89c:	e7a4      	b.n	801b7e8 <_printf_i+0x168>
 801b89e:	2301      	movs	r3, #1
 801b8a0:	4632      	mov	r2, r6
 801b8a2:	4649      	mov	r1, r9
 801b8a4:	4640      	mov	r0, r8
 801b8a6:	47d0      	blx	sl
 801b8a8:	3001      	adds	r0, #1
 801b8aa:	d09b      	beq.n	801b7e4 <_printf_i+0x164>
 801b8ac:	3501      	adds	r5, #1
 801b8ae:	68e3      	ldr	r3, [r4, #12]
 801b8b0:	9903      	ldr	r1, [sp, #12]
 801b8b2:	1a5b      	subs	r3, r3, r1
 801b8b4:	42ab      	cmp	r3, r5
 801b8b6:	dcf2      	bgt.n	801b89e <_printf_i+0x21e>
 801b8b8:	e7eb      	b.n	801b892 <_printf_i+0x212>
 801b8ba:	2500      	movs	r5, #0
 801b8bc:	f104 0619 	add.w	r6, r4, #25
 801b8c0:	e7f5      	b.n	801b8ae <_printf_i+0x22e>
 801b8c2:	bf00      	nop
 801b8c4:	0801f473 	.word	0x0801f473
 801b8c8:	0801f484 	.word	0x0801f484

0801b8cc <_read_r>:
 801b8cc:	b538      	push	{r3, r4, r5, lr}
 801b8ce:	4d07      	ldr	r5, [pc, #28]	; (801b8ec <_read_r+0x20>)
 801b8d0:	4604      	mov	r4, r0
 801b8d2:	4608      	mov	r0, r1
 801b8d4:	4611      	mov	r1, r2
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	602a      	str	r2, [r5, #0]
 801b8da:	461a      	mov	r2, r3
 801b8dc:	f7e6 fa06 	bl	8001cec <_read>
 801b8e0:	1c43      	adds	r3, r0, #1
 801b8e2:	d102      	bne.n	801b8ea <_read_r+0x1e>
 801b8e4:	682b      	ldr	r3, [r5, #0]
 801b8e6:	b103      	cbz	r3, 801b8ea <_read_r+0x1e>
 801b8e8:	6023      	str	r3, [r4, #0]
 801b8ea:	bd38      	pop	{r3, r4, r5, pc}
 801b8ec:	2400828c 	.word	0x2400828c

0801b8f0 <__swbuf_r>:
 801b8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8f2:	460e      	mov	r6, r1
 801b8f4:	4614      	mov	r4, r2
 801b8f6:	4605      	mov	r5, r0
 801b8f8:	b118      	cbz	r0, 801b902 <__swbuf_r+0x12>
 801b8fa:	6983      	ldr	r3, [r0, #24]
 801b8fc:	b90b      	cbnz	r3, 801b902 <__swbuf_r+0x12>
 801b8fe:	f7ff f8f9 	bl	801aaf4 <__sinit>
 801b902:	4b21      	ldr	r3, [pc, #132]	; (801b988 <__swbuf_r+0x98>)
 801b904:	429c      	cmp	r4, r3
 801b906:	d12b      	bne.n	801b960 <__swbuf_r+0x70>
 801b908:	686c      	ldr	r4, [r5, #4]
 801b90a:	69a3      	ldr	r3, [r4, #24]
 801b90c:	60a3      	str	r3, [r4, #8]
 801b90e:	89a3      	ldrh	r3, [r4, #12]
 801b910:	071a      	lsls	r2, r3, #28
 801b912:	d52f      	bpl.n	801b974 <__swbuf_r+0x84>
 801b914:	6923      	ldr	r3, [r4, #16]
 801b916:	b36b      	cbz	r3, 801b974 <__swbuf_r+0x84>
 801b918:	6923      	ldr	r3, [r4, #16]
 801b91a:	6820      	ldr	r0, [r4, #0]
 801b91c:	1ac0      	subs	r0, r0, r3
 801b91e:	6963      	ldr	r3, [r4, #20]
 801b920:	b2f6      	uxtb	r6, r6
 801b922:	4283      	cmp	r3, r0
 801b924:	4637      	mov	r7, r6
 801b926:	dc04      	bgt.n	801b932 <__swbuf_r+0x42>
 801b928:	4621      	mov	r1, r4
 801b92a:	4628      	mov	r0, r5
 801b92c:	f7ff fc1c 	bl	801b168 <_fflush_r>
 801b930:	bb30      	cbnz	r0, 801b980 <__swbuf_r+0x90>
 801b932:	68a3      	ldr	r3, [r4, #8]
 801b934:	3b01      	subs	r3, #1
 801b936:	60a3      	str	r3, [r4, #8]
 801b938:	6823      	ldr	r3, [r4, #0]
 801b93a:	1c5a      	adds	r2, r3, #1
 801b93c:	6022      	str	r2, [r4, #0]
 801b93e:	701e      	strb	r6, [r3, #0]
 801b940:	6963      	ldr	r3, [r4, #20]
 801b942:	3001      	adds	r0, #1
 801b944:	4283      	cmp	r3, r0
 801b946:	d004      	beq.n	801b952 <__swbuf_r+0x62>
 801b948:	89a3      	ldrh	r3, [r4, #12]
 801b94a:	07db      	lsls	r3, r3, #31
 801b94c:	d506      	bpl.n	801b95c <__swbuf_r+0x6c>
 801b94e:	2e0a      	cmp	r6, #10
 801b950:	d104      	bne.n	801b95c <__swbuf_r+0x6c>
 801b952:	4621      	mov	r1, r4
 801b954:	4628      	mov	r0, r5
 801b956:	f7ff fc07 	bl	801b168 <_fflush_r>
 801b95a:	b988      	cbnz	r0, 801b980 <__swbuf_r+0x90>
 801b95c:	4638      	mov	r0, r7
 801b95e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b960:	4b0a      	ldr	r3, [pc, #40]	; (801b98c <__swbuf_r+0x9c>)
 801b962:	429c      	cmp	r4, r3
 801b964:	d101      	bne.n	801b96a <__swbuf_r+0x7a>
 801b966:	68ac      	ldr	r4, [r5, #8]
 801b968:	e7cf      	b.n	801b90a <__swbuf_r+0x1a>
 801b96a:	4b09      	ldr	r3, [pc, #36]	; (801b990 <__swbuf_r+0xa0>)
 801b96c:	429c      	cmp	r4, r3
 801b96e:	bf08      	it	eq
 801b970:	68ec      	ldreq	r4, [r5, #12]
 801b972:	e7ca      	b.n	801b90a <__swbuf_r+0x1a>
 801b974:	4621      	mov	r1, r4
 801b976:	4628      	mov	r0, r5
 801b978:	f000 f80c 	bl	801b994 <__swsetup_r>
 801b97c:	2800      	cmp	r0, #0
 801b97e:	d0cb      	beq.n	801b918 <__swbuf_r+0x28>
 801b980:	f04f 37ff 	mov.w	r7, #4294967295
 801b984:	e7ea      	b.n	801b95c <__swbuf_r+0x6c>
 801b986:	bf00      	nop
 801b988:	0801f36c 	.word	0x0801f36c
 801b98c:	0801f38c 	.word	0x0801f38c
 801b990:	0801f34c 	.word	0x0801f34c

0801b994 <__swsetup_r>:
 801b994:	4b32      	ldr	r3, [pc, #200]	; (801ba60 <__swsetup_r+0xcc>)
 801b996:	b570      	push	{r4, r5, r6, lr}
 801b998:	681d      	ldr	r5, [r3, #0]
 801b99a:	4606      	mov	r6, r0
 801b99c:	460c      	mov	r4, r1
 801b99e:	b125      	cbz	r5, 801b9aa <__swsetup_r+0x16>
 801b9a0:	69ab      	ldr	r3, [r5, #24]
 801b9a2:	b913      	cbnz	r3, 801b9aa <__swsetup_r+0x16>
 801b9a4:	4628      	mov	r0, r5
 801b9a6:	f7ff f8a5 	bl	801aaf4 <__sinit>
 801b9aa:	4b2e      	ldr	r3, [pc, #184]	; (801ba64 <__swsetup_r+0xd0>)
 801b9ac:	429c      	cmp	r4, r3
 801b9ae:	d10f      	bne.n	801b9d0 <__swsetup_r+0x3c>
 801b9b0:	686c      	ldr	r4, [r5, #4]
 801b9b2:	89a3      	ldrh	r3, [r4, #12]
 801b9b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b9b8:	0719      	lsls	r1, r3, #28
 801b9ba:	d42c      	bmi.n	801ba16 <__swsetup_r+0x82>
 801b9bc:	06dd      	lsls	r5, r3, #27
 801b9be:	d411      	bmi.n	801b9e4 <__swsetup_r+0x50>
 801b9c0:	2309      	movs	r3, #9
 801b9c2:	6033      	str	r3, [r6, #0]
 801b9c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b9c8:	81a3      	strh	r3, [r4, #12]
 801b9ca:	f04f 30ff 	mov.w	r0, #4294967295
 801b9ce:	e03e      	b.n	801ba4e <__swsetup_r+0xba>
 801b9d0:	4b25      	ldr	r3, [pc, #148]	; (801ba68 <__swsetup_r+0xd4>)
 801b9d2:	429c      	cmp	r4, r3
 801b9d4:	d101      	bne.n	801b9da <__swsetup_r+0x46>
 801b9d6:	68ac      	ldr	r4, [r5, #8]
 801b9d8:	e7eb      	b.n	801b9b2 <__swsetup_r+0x1e>
 801b9da:	4b24      	ldr	r3, [pc, #144]	; (801ba6c <__swsetup_r+0xd8>)
 801b9dc:	429c      	cmp	r4, r3
 801b9de:	bf08      	it	eq
 801b9e0:	68ec      	ldreq	r4, [r5, #12]
 801b9e2:	e7e6      	b.n	801b9b2 <__swsetup_r+0x1e>
 801b9e4:	0758      	lsls	r0, r3, #29
 801b9e6:	d512      	bpl.n	801ba0e <__swsetup_r+0x7a>
 801b9e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b9ea:	b141      	cbz	r1, 801b9fe <__swsetup_r+0x6a>
 801b9ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b9f0:	4299      	cmp	r1, r3
 801b9f2:	d002      	beq.n	801b9fa <__swsetup_r+0x66>
 801b9f4:	4630      	mov	r0, r6
 801b9f6:	f7ff fc2b 	bl	801b250 <_free_r>
 801b9fa:	2300      	movs	r3, #0
 801b9fc:	6363      	str	r3, [r4, #52]	; 0x34
 801b9fe:	89a3      	ldrh	r3, [r4, #12]
 801ba00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ba04:	81a3      	strh	r3, [r4, #12]
 801ba06:	2300      	movs	r3, #0
 801ba08:	6063      	str	r3, [r4, #4]
 801ba0a:	6923      	ldr	r3, [r4, #16]
 801ba0c:	6023      	str	r3, [r4, #0]
 801ba0e:	89a3      	ldrh	r3, [r4, #12]
 801ba10:	f043 0308 	orr.w	r3, r3, #8
 801ba14:	81a3      	strh	r3, [r4, #12]
 801ba16:	6923      	ldr	r3, [r4, #16]
 801ba18:	b94b      	cbnz	r3, 801ba2e <__swsetup_r+0x9a>
 801ba1a:	89a3      	ldrh	r3, [r4, #12]
 801ba1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ba20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ba24:	d003      	beq.n	801ba2e <__swsetup_r+0x9a>
 801ba26:	4621      	mov	r1, r4
 801ba28:	4630      	mov	r0, r6
 801ba2a:	f000 f84d 	bl	801bac8 <__smakebuf_r>
 801ba2e:	89a0      	ldrh	r0, [r4, #12]
 801ba30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba34:	f010 0301 	ands.w	r3, r0, #1
 801ba38:	d00a      	beq.n	801ba50 <__swsetup_r+0xbc>
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	60a3      	str	r3, [r4, #8]
 801ba3e:	6963      	ldr	r3, [r4, #20]
 801ba40:	425b      	negs	r3, r3
 801ba42:	61a3      	str	r3, [r4, #24]
 801ba44:	6923      	ldr	r3, [r4, #16]
 801ba46:	b943      	cbnz	r3, 801ba5a <__swsetup_r+0xc6>
 801ba48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ba4c:	d1ba      	bne.n	801b9c4 <__swsetup_r+0x30>
 801ba4e:	bd70      	pop	{r4, r5, r6, pc}
 801ba50:	0781      	lsls	r1, r0, #30
 801ba52:	bf58      	it	pl
 801ba54:	6963      	ldrpl	r3, [r4, #20]
 801ba56:	60a3      	str	r3, [r4, #8]
 801ba58:	e7f4      	b.n	801ba44 <__swsetup_r+0xb0>
 801ba5a:	2000      	movs	r0, #0
 801ba5c:	e7f7      	b.n	801ba4e <__swsetup_r+0xba>
 801ba5e:	bf00      	nop
 801ba60:	2400003c 	.word	0x2400003c
 801ba64:	0801f36c 	.word	0x0801f36c
 801ba68:	0801f38c 	.word	0x0801f38c
 801ba6c:	0801f34c 	.word	0x0801f34c

0801ba70 <abort>:
 801ba70:	b508      	push	{r3, lr}
 801ba72:	2006      	movs	r0, #6
 801ba74:	f000 f890 	bl	801bb98 <raise>
 801ba78:	2001      	movs	r0, #1
 801ba7a:	f7e6 f92d 	bl	8001cd8 <_exit>

0801ba7e <__swhatbuf_r>:
 801ba7e:	b570      	push	{r4, r5, r6, lr}
 801ba80:	460e      	mov	r6, r1
 801ba82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ba86:	2900      	cmp	r1, #0
 801ba88:	b096      	sub	sp, #88	; 0x58
 801ba8a:	4614      	mov	r4, r2
 801ba8c:	461d      	mov	r5, r3
 801ba8e:	da07      	bge.n	801baa0 <__swhatbuf_r+0x22>
 801ba90:	2300      	movs	r3, #0
 801ba92:	602b      	str	r3, [r5, #0]
 801ba94:	89b3      	ldrh	r3, [r6, #12]
 801ba96:	061a      	lsls	r2, r3, #24
 801ba98:	d410      	bmi.n	801babc <__swhatbuf_r+0x3e>
 801ba9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ba9e:	e00e      	b.n	801babe <__swhatbuf_r+0x40>
 801baa0:	466a      	mov	r2, sp
 801baa2:	f000 f895 	bl	801bbd0 <_fstat_r>
 801baa6:	2800      	cmp	r0, #0
 801baa8:	dbf2      	blt.n	801ba90 <__swhatbuf_r+0x12>
 801baaa:	9a01      	ldr	r2, [sp, #4]
 801baac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bab0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bab4:	425a      	negs	r2, r3
 801bab6:	415a      	adcs	r2, r3
 801bab8:	602a      	str	r2, [r5, #0]
 801baba:	e7ee      	b.n	801ba9a <__swhatbuf_r+0x1c>
 801babc:	2340      	movs	r3, #64	; 0x40
 801babe:	2000      	movs	r0, #0
 801bac0:	6023      	str	r3, [r4, #0]
 801bac2:	b016      	add	sp, #88	; 0x58
 801bac4:	bd70      	pop	{r4, r5, r6, pc}
	...

0801bac8 <__smakebuf_r>:
 801bac8:	898b      	ldrh	r3, [r1, #12]
 801baca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bacc:	079d      	lsls	r5, r3, #30
 801bace:	4606      	mov	r6, r0
 801bad0:	460c      	mov	r4, r1
 801bad2:	d507      	bpl.n	801bae4 <__smakebuf_r+0x1c>
 801bad4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bad8:	6023      	str	r3, [r4, #0]
 801bada:	6123      	str	r3, [r4, #16]
 801badc:	2301      	movs	r3, #1
 801bade:	6163      	str	r3, [r4, #20]
 801bae0:	b002      	add	sp, #8
 801bae2:	bd70      	pop	{r4, r5, r6, pc}
 801bae4:	ab01      	add	r3, sp, #4
 801bae6:	466a      	mov	r2, sp
 801bae8:	f7ff ffc9 	bl	801ba7e <__swhatbuf_r>
 801baec:	9900      	ldr	r1, [sp, #0]
 801baee:	4605      	mov	r5, r0
 801baf0:	4630      	mov	r0, r6
 801baf2:	f7ff f8e9 	bl	801acc8 <_malloc_r>
 801baf6:	b948      	cbnz	r0, 801bb0c <__smakebuf_r+0x44>
 801baf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bafc:	059a      	lsls	r2, r3, #22
 801bafe:	d4ef      	bmi.n	801bae0 <__smakebuf_r+0x18>
 801bb00:	f023 0303 	bic.w	r3, r3, #3
 801bb04:	f043 0302 	orr.w	r3, r3, #2
 801bb08:	81a3      	strh	r3, [r4, #12]
 801bb0a:	e7e3      	b.n	801bad4 <__smakebuf_r+0xc>
 801bb0c:	4b0d      	ldr	r3, [pc, #52]	; (801bb44 <__smakebuf_r+0x7c>)
 801bb0e:	62b3      	str	r3, [r6, #40]	; 0x28
 801bb10:	89a3      	ldrh	r3, [r4, #12]
 801bb12:	6020      	str	r0, [r4, #0]
 801bb14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bb18:	81a3      	strh	r3, [r4, #12]
 801bb1a:	9b00      	ldr	r3, [sp, #0]
 801bb1c:	6163      	str	r3, [r4, #20]
 801bb1e:	9b01      	ldr	r3, [sp, #4]
 801bb20:	6120      	str	r0, [r4, #16]
 801bb22:	b15b      	cbz	r3, 801bb3c <__smakebuf_r+0x74>
 801bb24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb28:	4630      	mov	r0, r6
 801bb2a:	f000 f863 	bl	801bbf4 <_isatty_r>
 801bb2e:	b128      	cbz	r0, 801bb3c <__smakebuf_r+0x74>
 801bb30:	89a3      	ldrh	r3, [r4, #12]
 801bb32:	f023 0303 	bic.w	r3, r3, #3
 801bb36:	f043 0301 	orr.w	r3, r3, #1
 801bb3a:	81a3      	strh	r3, [r4, #12]
 801bb3c:	89a0      	ldrh	r0, [r4, #12]
 801bb3e:	4305      	orrs	r5, r0
 801bb40:	81a5      	strh	r5, [r4, #12]
 801bb42:	e7cd      	b.n	801bae0 <__smakebuf_r+0x18>
 801bb44:	0801aa8d 	.word	0x0801aa8d

0801bb48 <_raise_r>:
 801bb48:	291f      	cmp	r1, #31
 801bb4a:	b538      	push	{r3, r4, r5, lr}
 801bb4c:	4604      	mov	r4, r0
 801bb4e:	460d      	mov	r5, r1
 801bb50:	d904      	bls.n	801bb5c <_raise_r+0x14>
 801bb52:	2316      	movs	r3, #22
 801bb54:	6003      	str	r3, [r0, #0]
 801bb56:	f04f 30ff 	mov.w	r0, #4294967295
 801bb5a:	bd38      	pop	{r3, r4, r5, pc}
 801bb5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bb5e:	b112      	cbz	r2, 801bb66 <_raise_r+0x1e>
 801bb60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bb64:	b94b      	cbnz	r3, 801bb7a <_raise_r+0x32>
 801bb66:	4620      	mov	r0, r4
 801bb68:	f000 f830 	bl	801bbcc <_getpid_r>
 801bb6c:	462a      	mov	r2, r5
 801bb6e:	4601      	mov	r1, r0
 801bb70:	4620      	mov	r0, r4
 801bb72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb76:	f000 b817 	b.w	801bba8 <_kill_r>
 801bb7a:	2b01      	cmp	r3, #1
 801bb7c:	d00a      	beq.n	801bb94 <_raise_r+0x4c>
 801bb7e:	1c59      	adds	r1, r3, #1
 801bb80:	d103      	bne.n	801bb8a <_raise_r+0x42>
 801bb82:	2316      	movs	r3, #22
 801bb84:	6003      	str	r3, [r0, #0]
 801bb86:	2001      	movs	r0, #1
 801bb88:	e7e7      	b.n	801bb5a <_raise_r+0x12>
 801bb8a:	2400      	movs	r4, #0
 801bb8c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bb90:	4628      	mov	r0, r5
 801bb92:	4798      	blx	r3
 801bb94:	2000      	movs	r0, #0
 801bb96:	e7e0      	b.n	801bb5a <_raise_r+0x12>

0801bb98 <raise>:
 801bb98:	4b02      	ldr	r3, [pc, #8]	; (801bba4 <raise+0xc>)
 801bb9a:	4601      	mov	r1, r0
 801bb9c:	6818      	ldr	r0, [r3, #0]
 801bb9e:	f7ff bfd3 	b.w	801bb48 <_raise_r>
 801bba2:	bf00      	nop
 801bba4:	2400003c 	.word	0x2400003c

0801bba8 <_kill_r>:
 801bba8:	b538      	push	{r3, r4, r5, lr}
 801bbaa:	4d07      	ldr	r5, [pc, #28]	; (801bbc8 <_kill_r+0x20>)
 801bbac:	2300      	movs	r3, #0
 801bbae:	4604      	mov	r4, r0
 801bbb0:	4608      	mov	r0, r1
 801bbb2:	4611      	mov	r1, r2
 801bbb4:	602b      	str	r3, [r5, #0]
 801bbb6:	f7e6 f87d 	bl	8001cb4 <_kill>
 801bbba:	1c43      	adds	r3, r0, #1
 801bbbc:	d102      	bne.n	801bbc4 <_kill_r+0x1c>
 801bbbe:	682b      	ldr	r3, [r5, #0]
 801bbc0:	b103      	cbz	r3, 801bbc4 <_kill_r+0x1c>
 801bbc2:	6023      	str	r3, [r4, #0]
 801bbc4:	bd38      	pop	{r3, r4, r5, pc}
 801bbc6:	bf00      	nop
 801bbc8:	2400828c 	.word	0x2400828c

0801bbcc <_getpid_r>:
 801bbcc:	f7e6 b86a 	b.w	8001ca4 <_getpid>

0801bbd0 <_fstat_r>:
 801bbd0:	b538      	push	{r3, r4, r5, lr}
 801bbd2:	4d07      	ldr	r5, [pc, #28]	; (801bbf0 <_fstat_r+0x20>)
 801bbd4:	2300      	movs	r3, #0
 801bbd6:	4604      	mov	r4, r0
 801bbd8:	4608      	mov	r0, r1
 801bbda:	4611      	mov	r1, r2
 801bbdc:	602b      	str	r3, [r5, #0]
 801bbde:	f7e6 f8ca 	bl	8001d76 <_fstat>
 801bbe2:	1c43      	adds	r3, r0, #1
 801bbe4:	d102      	bne.n	801bbec <_fstat_r+0x1c>
 801bbe6:	682b      	ldr	r3, [r5, #0]
 801bbe8:	b103      	cbz	r3, 801bbec <_fstat_r+0x1c>
 801bbea:	6023      	str	r3, [r4, #0]
 801bbec:	bd38      	pop	{r3, r4, r5, pc}
 801bbee:	bf00      	nop
 801bbf0:	2400828c 	.word	0x2400828c

0801bbf4 <_isatty_r>:
 801bbf4:	b538      	push	{r3, r4, r5, lr}
 801bbf6:	4d06      	ldr	r5, [pc, #24]	; (801bc10 <_isatty_r+0x1c>)
 801bbf8:	2300      	movs	r3, #0
 801bbfa:	4604      	mov	r4, r0
 801bbfc:	4608      	mov	r0, r1
 801bbfe:	602b      	str	r3, [r5, #0]
 801bc00:	f7e6 f8c9 	bl	8001d96 <_isatty>
 801bc04:	1c43      	adds	r3, r0, #1
 801bc06:	d102      	bne.n	801bc0e <_isatty_r+0x1a>
 801bc08:	682b      	ldr	r3, [r5, #0]
 801bc0a:	b103      	cbz	r3, 801bc0e <_isatty_r+0x1a>
 801bc0c:	6023      	str	r3, [r4, #0]
 801bc0e:	bd38      	pop	{r3, r4, r5, pc}
 801bc10:	2400828c 	.word	0x2400828c

0801bc14 <_init>:
 801bc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc16:	bf00      	nop
 801bc18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc1a:	bc08      	pop	{r3}
 801bc1c:	469e      	mov	lr, r3
 801bc1e:	4770      	bx	lr

0801bc20 <_fini>:
 801bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc22:	bf00      	nop
 801bc24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bc26:	bc08      	pop	{r3}
 801bc28:	469e      	mov	lr, r3
 801bc2a:	4770      	bx	lr
