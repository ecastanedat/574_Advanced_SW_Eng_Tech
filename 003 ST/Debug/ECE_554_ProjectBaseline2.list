
ECE_554_ProjectBaseline2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c2ac  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003904  0801c57c  0801c57c  0002c57c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801fe80  0801fe80  0002fe80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801fe88  0801fe88  0002fe88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801fe8c  0801fe8c  0002fe8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0801fe90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000826c  240000a0  0801ff30  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400830c  0801ff30  0003830c  2**0
                  ALLOC
  9 .lwip_sec     000018d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   0007b7c1  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000bc4d  00000000  00000000  000ab88f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003018  00000000  00000000  000b74e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002d90  00000000  00000000  000ba4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0004a565  00000000  00000000  000bd288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004d991  00000000  00000000  001077ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00182bea  00000000  00000000  0015517e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002d7d68  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000d0e0  00000000  00000000  002d7dbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801c564 	.word	0x0801c564

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a4 	.word	0x240000a4
 800030c:	0801c564 	.word	0x0801c564

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr
	...

08000340 <memchr>:
 8000340:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000344:	2a10      	cmp	r2, #16
 8000346:	db2b      	blt.n	80003a0 <memchr+0x60>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	d008      	beq.n	8000360 <memchr+0x20>
 800034e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000352:	3a01      	subs	r2, #1
 8000354:	428b      	cmp	r3, r1
 8000356:	d02d      	beq.n	80003b4 <memchr+0x74>
 8000358:	f010 0f07 	tst.w	r0, #7
 800035c:	b342      	cbz	r2, 80003b0 <memchr+0x70>
 800035e:	d1f6      	bne.n	800034e <memchr+0xe>
 8000360:	b4f0      	push	{r4, r5, r6, r7}
 8000362:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000366:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800036a:	f022 0407 	bic.w	r4, r2, #7
 800036e:	f07f 0700 	mvns.w	r7, #0
 8000372:	2300      	movs	r3, #0
 8000374:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000378:	3c08      	subs	r4, #8
 800037a:	ea85 0501 	eor.w	r5, r5, r1
 800037e:	ea86 0601 	eor.w	r6, r6, r1
 8000382:	fa85 f547 	uadd8	r5, r5, r7
 8000386:	faa3 f587 	sel	r5, r3, r7
 800038a:	fa86 f647 	uadd8	r6, r6, r7
 800038e:	faa5 f687 	sel	r6, r5, r7
 8000392:	b98e      	cbnz	r6, 80003b8 <memchr+0x78>
 8000394:	d1ee      	bne.n	8000374 <memchr+0x34>
 8000396:	bcf0      	pop	{r4, r5, r6, r7}
 8000398:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800039c:	f002 0207 	and.w	r2, r2, #7
 80003a0:	b132      	cbz	r2, 80003b0 <memchr+0x70>
 80003a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003a6:	3a01      	subs	r2, #1
 80003a8:	ea83 0301 	eor.w	r3, r3, r1
 80003ac:	b113      	cbz	r3, 80003b4 <memchr+0x74>
 80003ae:	d1f8      	bne.n	80003a2 <memchr+0x62>
 80003b0:	2000      	movs	r0, #0
 80003b2:	4770      	bx	lr
 80003b4:	3801      	subs	r0, #1
 80003b6:	4770      	bx	lr
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	bf06      	itte	eq
 80003bc:	4635      	moveq	r5, r6
 80003be:	3803      	subeq	r0, #3
 80003c0:	3807      	subne	r0, #7
 80003c2:	f015 0f01 	tst.w	r5, #1
 80003c6:	d107      	bne.n	80003d8 <memchr+0x98>
 80003c8:	3001      	adds	r0, #1
 80003ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ce:	bf02      	ittt	eq
 80003d0:	3001      	addeq	r0, #1
 80003d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003d6:	3001      	addeq	r0, #1
 80003d8:	bcf0      	pop	{r4, r5, r6, r7}
 80003da:	3801      	subs	r0, #1
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b96e 	b.w	80006d4 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	4604      	mov	r4, r0
 8000418:	468c      	mov	ip, r1
 800041a:	2b00      	cmp	r3, #0
 800041c:	f040 8083 	bne.w	8000526 <__udivmoddi4+0x116>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d947      	bls.n	80004b6 <__udivmoddi4+0xa6>
 8000426:	fab2 f282 	clz	r2, r2
 800042a:	b142      	cbz	r2, 800043e <__udivmoddi4+0x2e>
 800042c:	f1c2 0020 	rsb	r0, r2, #32
 8000430:	fa24 f000 	lsr.w	r0, r4, r0
 8000434:	4091      	lsls	r1, r2
 8000436:	4097      	lsls	r7, r2
 8000438:	ea40 0c01 	orr.w	ip, r0, r1
 800043c:	4094      	lsls	r4, r2
 800043e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000442:	0c23      	lsrs	r3, r4, #16
 8000444:	fbbc f6f8 	udiv	r6, ip, r8
 8000448:	fa1f fe87 	uxth.w	lr, r7
 800044c:	fb08 c116 	mls	r1, r8, r6, ip
 8000450:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000454:	fb06 f10e 	mul.w	r1, r6, lr
 8000458:	4299      	cmp	r1, r3
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x60>
 800045c:	18fb      	adds	r3, r7, r3
 800045e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000462:	f080 8119 	bcs.w	8000698 <__udivmoddi4+0x288>
 8000466:	4299      	cmp	r1, r3
 8000468:	f240 8116 	bls.w	8000698 <__udivmoddi4+0x288>
 800046c:	3e02      	subs	r6, #2
 800046e:	443b      	add	r3, r7
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000480:	fb00 fe0e 	mul.w	lr, r0, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x8c>
 8000488:	193c      	adds	r4, r7, r4
 800048a:	f100 33ff 	add.w	r3, r0, #4294967295
 800048e:	f080 8105 	bcs.w	800069c <__udivmoddi4+0x28c>
 8000492:	45a6      	cmp	lr, r4
 8000494:	f240 8102 	bls.w	800069c <__udivmoddi4+0x28c>
 8000498:	3802      	subs	r0, #2
 800049a:	443c      	add	r4, r7
 800049c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004a0:	eba4 040e 	sub.w	r4, r4, lr
 80004a4:	2600      	movs	r6, #0
 80004a6:	b11d      	cbz	r5, 80004b0 <__udivmoddi4+0xa0>
 80004a8:	40d4      	lsrs	r4, r2
 80004aa:	2300      	movs	r3, #0
 80004ac:	e9c5 4300 	strd	r4, r3, [r5]
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	b902      	cbnz	r2, 80004ba <__udivmoddi4+0xaa>
 80004b8:	deff      	udf	#255	; 0xff
 80004ba:	fab2 f282 	clz	r2, r2
 80004be:	2a00      	cmp	r2, #0
 80004c0:	d150      	bne.n	8000564 <__udivmoddi4+0x154>
 80004c2:	1bcb      	subs	r3, r1, r7
 80004c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004c8:	fa1f f887 	uxth.w	r8, r7
 80004cc:	2601      	movs	r6, #1
 80004ce:	fbb3 fcfe 	udiv	ip, r3, lr
 80004d2:	0c21      	lsrs	r1, r4, #16
 80004d4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004d8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004dc:	fb08 f30c 	mul.w	r3, r8, ip
 80004e0:	428b      	cmp	r3, r1
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0xe4>
 80004e4:	1879      	adds	r1, r7, r1
 80004e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0xe2>
 80004ec:	428b      	cmp	r3, r1
 80004ee:	f200 80e9 	bhi.w	80006c4 <__udivmoddi4+0x2b4>
 80004f2:	4684      	mov	ip, r0
 80004f4:	1ac9      	subs	r1, r1, r3
 80004f6:	b2a3      	uxth	r3, r4
 80004f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fc:	fb0e 1110 	mls	r1, lr, r0, r1
 8000500:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000504:	fb08 f800 	mul.w	r8, r8, r0
 8000508:	45a0      	cmp	r8, r4
 800050a:	d907      	bls.n	800051c <__udivmoddi4+0x10c>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000512:	d202      	bcs.n	800051a <__udivmoddi4+0x10a>
 8000514:	45a0      	cmp	r8, r4
 8000516:	f200 80d9 	bhi.w	80006cc <__udivmoddi4+0x2bc>
 800051a:	4618      	mov	r0, r3
 800051c:	eba4 0408 	sub.w	r4, r4, r8
 8000520:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000524:	e7bf      	b.n	80004a6 <__udivmoddi4+0x96>
 8000526:	428b      	cmp	r3, r1
 8000528:	d909      	bls.n	800053e <__udivmoddi4+0x12e>
 800052a:	2d00      	cmp	r5, #0
 800052c:	f000 80b1 	beq.w	8000692 <__udivmoddi4+0x282>
 8000530:	2600      	movs	r6, #0
 8000532:	e9c5 0100 	strd	r0, r1, [r5]
 8000536:	4630      	mov	r0, r6
 8000538:	4631      	mov	r1, r6
 800053a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053e:	fab3 f683 	clz	r6, r3
 8000542:	2e00      	cmp	r6, #0
 8000544:	d14a      	bne.n	80005dc <__udivmoddi4+0x1cc>
 8000546:	428b      	cmp	r3, r1
 8000548:	d302      	bcc.n	8000550 <__udivmoddi4+0x140>
 800054a:	4282      	cmp	r2, r0
 800054c:	f200 80b8 	bhi.w	80006c0 <__udivmoddi4+0x2b0>
 8000550:	1a84      	subs	r4, r0, r2
 8000552:	eb61 0103 	sbc.w	r1, r1, r3
 8000556:	2001      	movs	r0, #1
 8000558:	468c      	mov	ip, r1
 800055a:	2d00      	cmp	r5, #0
 800055c:	d0a8      	beq.n	80004b0 <__udivmoddi4+0xa0>
 800055e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000562:	e7a5      	b.n	80004b0 <__udivmoddi4+0xa0>
 8000564:	f1c2 0320 	rsb	r3, r2, #32
 8000568:	fa20 f603 	lsr.w	r6, r0, r3
 800056c:	4097      	lsls	r7, r2
 800056e:	fa01 f002 	lsl.w	r0, r1, r2
 8000572:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000576:	40d9      	lsrs	r1, r3
 8000578:	4330      	orrs	r0, r6
 800057a:	0c03      	lsrs	r3, r0, #16
 800057c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000580:	fa1f f887 	uxth.w	r8, r7
 8000584:	fb0e 1116 	mls	r1, lr, r6, r1
 8000588:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800058c:	fb06 f108 	mul.w	r1, r6, r8
 8000590:	4299      	cmp	r1, r3
 8000592:	fa04 f402 	lsl.w	r4, r4, r2
 8000596:	d909      	bls.n	80005ac <__udivmoddi4+0x19c>
 8000598:	18fb      	adds	r3, r7, r3
 800059a:	f106 3cff 	add.w	ip, r6, #4294967295
 800059e:	f080 808d 	bcs.w	80006bc <__udivmoddi4+0x2ac>
 80005a2:	4299      	cmp	r1, r3
 80005a4:	f240 808a 	bls.w	80006bc <__udivmoddi4+0x2ac>
 80005a8:	3e02      	subs	r6, #2
 80005aa:	443b      	add	r3, r7
 80005ac:	1a5b      	subs	r3, r3, r1
 80005ae:	b281      	uxth	r1, r0
 80005b0:	fbb3 f0fe 	udiv	r0, r3, lr
 80005b4:	fb0e 3310 	mls	r3, lr, r0, r3
 80005b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005bc:	fb00 f308 	mul.w	r3, r0, r8
 80005c0:	428b      	cmp	r3, r1
 80005c2:	d907      	bls.n	80005d4 <__udivmoddi4+0x1c4>
 80005c4:	1879      	adds	r1, r7, r1
 80005c6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005ca:	d273      	bcs.n	80006b4 <__udivmoddi4+0x2a4>
 80005cc:	428b      	cmp	r3, r1
 80005ce:	d971      	bls.n	80006b4 <__udivmoddi4+0x2a4>
 80005d0:	3802      	subs	r0, #2
 80005d2:	4439      	add	r1, r7
 80005d4:	1acb      	subs	r3, r1, r3
 80005d6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005da:	e778      	b.n	80004ce <__udivmoddi4+0xbe>
 80005dc:	f1c6 0c20 	rsb	ip, r6, #32
 80005e0:	fa03 f406 	lsl.w	r4, r3, r6
 80005e4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005e8:	431c      	orrs	r4, r3
 80005ea:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ee:	fa01 f306 	lsl.w	r3, r1, r6
 80005f2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005f6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005fa:	431f      	orrs	r7, r3
 80005fc:	0c3b      	lsrs	r3, r7, #16
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fa1f f884 	uxth.w	r8, r4
 8000606:	fb0e 1119 	mls	r1, lr, r9, r1
 800060a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800060e:	fb09 fa08 	mul.w	sl, r9, r8
 8000612:	458a      	cmp	sl, r1
 8000614:	fa02 f206 	lsl.w	r2, r2, r6
 8000618:	fa00 f306 	lsl.w	r3, r0, r6
 800061c:	d908      	bls.n	8000630 <__udivmoddi4+0x220>
 800061e:	1861      	adds	r1, r4, r1
 8000620:	f109 30ff 	add.w	r0, r9, #4294967295
 8000624:	d248      	bcs.n	80006b8 <__udivmoddi4+0x2a8>
 8000626:	458a      	cmp	sl, r1
 8000628:	d946      	bls.n	80006b8 <__udivmoddi4+0x2a8>
 800062a:	f1a9 0902 	sub.w	r9, r9, #2
 800062e:	4421      	add	r1, r4
 8000630:	eba1 010a 	sub.w	r1, r1, sl
 8000634:	b2bf      	uxth	r7, r7
 8000636:	fbb1 f0fe 	udiv	r0, r1, lr
 800063a:	fb0e 1110 	mls	r1, lr, r0, r1
 800063e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000642:	fb00 f808 	mul.w	r8, r0, r8
 8000646:	45b8      	cmp	r8, r7
 8000648:	d907      	bls.n	800065a <__udivmoddi4+0x24a>
 800064a:	19e7      	adds	r7, r4, r7
 800064c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000650:	d22e      	bcs.n	80006b0 <__udivmoddi4+0x2a0>
 8000652:	45b8      	cmp	r8, r7
 8000654:	d92c      	bls.n	80006b0 <__udivmoddi4+0x2a0>
 8000656:	3802      	subs	r0, #2
 8000658:	4427      	add	r7, r4
 800065a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800065e:	eba7 0708 	sub.w	r7, r7, r8
 8000662:	fba0 8902 	umull	r8, r9, r0, r2
 8000666:	454f      	cmp	r7, r9
 8000668:	46c6      	mov	lr, r8
 800066a:	4649      	mov	r1, r9
 800066c:	d31a      	bcc.n	80006a4 <__udivmoddi4+0x294>
 800066e:	d017      	beq.n	80006a0 <__udivmoddi4+0x290>
 8000670:	b15d      	cbz	r5, 800068a <__udivmoddi4+0x27a>
 8000672:	ebb3 020e 	subs.w	r2, r3, lr
 8000676:	eb67 0701 	sbc.w	r7, r7, r1
 800067a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800067e:	40f2      	lsrs	r2, r6
 8000680:	ea4c 0202 	orr.w	r2, ip, r2
 8000684:	40f7      	lsrs	r7, r6
 8000686:	e9c5 2700 	strd	r2, r7, [r5]
 800068a:	2600      	movs	r6, #0
 800068c:	4631      	mov	r1, r6
 800068e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000692:	462e      	mov	r6, r5
 8000694:	4628      	mov	r0, r5
 8000696:	e70b      	b.n	80004b0 <__udivmoddi4+0xa0>
 8000698:	4606      	mov	r6, r0
 800069a:	e6e9      	b.n	8000470 <__udivmoddi4+0x60>
 800069c:	4618      	mov	r0, r3
 800069e:	e6fd      	b.n	800049c <__udivmoddi4+0x8c>
 80006a0:	4543      	cmp	r3, r8
 80006a2:	d2e5      	bcs.n	8000670 <__udivmoddi4+0x260>
 80006a4:	ebb8 0e02 	subs.w	lr, r8, r2
 80006a8:	eb69 0104 	sbc.w	r1, r9, r4
 80006ac:	3801      	subs	r0, #1
 80006ae:	e7df      	b.n	8000670 <__udivmoddi4+0x260>
 80006b0:	4608      	mov	r0, r1
 80006b2:	e7d2      	b.n	800065a <__udivmoddi4+0x24a>
 80006b4:	4660      	mov	r0, ip
 80006b6:	e78d      	b.n	80005d4 <__udivmoddi4+0x1c4>
 80006b8:	4681      	mov	r9, r0
 80006ba:	e7b9      	b.n	8000630 <__udivmoddi4+0x220>
 80006bc:	4666      	mov	r6, ip
 80006be:	e775      	b.n	80005ac <__udivmoddi4+0x19c>
 80006c0:	4630      	mov	r0, r6
 80006c2:	e74a      	b.n	800055a <__udivmoddi4+0x14a>
 80006c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006c8:	4439      	add	r1, r7
 80006ca:	e713      	b.n	80004f4 <__udivmoddi4+0xe4>
 80006cc:	3802      	subs	r0, #2
 80006ce:	443c      	add	r4, r7
 80006d0:	e724      	b.n	800051c <__udivmoddi4+0x10c>
 80006d2:	bf00      	nop

080006d4 <__aeabi_idiv0>:
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop

080006d8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b085      	sub	sp, #20
 80006dc:	af02      	add	r7, sp, #8
 80006de:	4604      	mov	r4, r0
 80006e0:	4608      	mov	r0, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	461a      	mov	r2, r3
 80006e6:	4623      	mov	r3, r4
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	4603      	mov	r3, r0
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	460b      	mov	r3, r1
 80006f0:	807b      	strh	r3, [r7, #2]
 80006f2:	4613      	mov	r3, r2
 80006f4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006f6:	88f8      	ldrh	r0, [r7, #6]
 80006f8:	88b9      	ldrh	r1, [r7, #4]
 80006fa:	887a      	ldrh	r2, [r7, #2]
 80006fc:	883c      	ldrh	r4, [r7, #0]
 80006fe:	8b3b      	ldrh	r3, [r7, #24]
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	4623      	mov	r3, r4
 8000704:	f000 fa88 	bl	8000c18 <ST7735_FillRectangle>
}
 8000708:	bf00      	nop
 800070a:	370c      	adds	r7, #12
 800070c:	46bd      	mov	sp, r7
 800070e:	bd90      	pop	{r4, r7, pc}

08000710 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af02      	add	r7, sp, #8
 8000716:	4603      	mov	r3, r0
 8000718:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800071a:	4b08      	ldr	r3, [pc, #32]	; (800073c <fillScreen+0x2c>)
 800071c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000720:	4b07      	ldr	r3, [pc, #28]	; (8000740 <fillScreen+0x30>)
 8000722:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	9300      	str	r3, [sp, #0]
 800072a:	460b      	mov	r3, r1
 800072c:	2100      	movs	r1, #0
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff ffd2 	bl	80006d8 <fillRect>
}
 8000734:	bf00      	nop
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	24004c5c 	.word	0x24004c5c
 8000740:	24004c60 	.word	0x24004c60

08000744 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	2101      	movs	r1, #1
 800074c:	4802      	ldr	r0, [pc, #8]	; (8000758 <ST7735_Select+0x14>)
 800074e:	f006 fb43 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	58020800 	.word	0x58020800

0800075c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2101      	movs	r1, #1
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <ST7735_Unselect+0x14>)
 8000766:	f006 fb37 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	58020800 	.word	0x58020800

08000774 <ST7735_Reset>:

void ST7735_Reset()
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2108      	movs	r1, #8
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <ST7735_Reset+0x24>)
 800077e:	f006 fb2b 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000782:	2005      	movs	r0, #5
 8000784:	f002 fe08 	bl	8003398 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2108      	movs	r1, #8
 800078c:	4802      	ldr	r0, [pc, #8]	; (8000798 <ST7735_Reset+0x24>)
 800078e:	f006 fb23 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 8000792:	bf00      	nop
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	58020800 	.word	0x58020800

0800079c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2108      	movs	r1, #8
 80007aa:	4807      	ldr	r0, [pc, #28]	; (80007c8 <ST7735_WriteCommand+0x2c>)
 80007ac:	f006 fb14 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007b0:	1df9      	adds	r1, r7, #7
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	2201      	movs	r2, #1
 80007b8:	4804      	ldr	r0, [pc, #16]	; (80007cc <ST7735_WriteCommand+0x30>)
 80007ba:	f008 ff31 	bl	8009620 <HAL_SPI_Transmit>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	58020000 	.word	0x58020000
 80007cc:	24004e0c 	.word	0x24004e0c

080007d0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007da:	2201      	movs	r2, #1
 80007dc:	2108      	movs	r1, #8
 80007de:	4807      	ldr	r0, [pc, #28]	; (80007fc <ST7735_WriteData+0x2c>)
 80007e0:	f006 fafa 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ec:	6879      	ldr	r1, [r7, #4]
 80007ee:	4804      	ldr	r0, [pc, #16]	; (8000800 <ST7735_WriteData+0x30>)
 80007f0:	f008 ff16 	bl	8009620 <HAL_SPI_Transmit>
}
 80007f4:	bf00      	nop
 80007f6:	3708      	adds	r7, #8
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	58020000 	.word	0x58020000
 8000800:	24004e0c 	.word	0x24004e0c

08000804 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	1c5a      	adds	r2, r3, #1
 8000810:	607a      	str	r2, [r7, #4]
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000816:	e034      	b.n	8000882 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	607a      	str	r2, [r7, #4]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8000822:	7afb      	ldrb	r3, [r7, #11]
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff ffb9 	bl	800079c <ST7735_WriteCommand>

        numArgs = *addr++;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	607a      	str	r2, [r7, #4]
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000834:	7abb      	ldrb	r3, [r7, #10]
 8000836:	b29b      	uxth	r3, r3
 8000838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083c:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800083e:	7abb      	ldrb	r3, [r7, #10]
 8000840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000844:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000846:	7abb      	ldrb	r3, [r7, #10]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d008      	beq.n	800085e <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 800084c:	7abb      	ldrb	r3, [r7, #10]
 800084e:	4619      	mov	r1, r3
 8000850:	6878      	ldr	r0, [r7, #4]
 8000852:	f7ff ffbd 	bl	80007d0 <ST7735_WriteData>
            addr += numArgs;
 8000856:	7abb      	ldrb	r3, [r7, #10]
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	4413      	add	r3, r2
 800085c:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800085e:	89bb      	ldrh	r3, [r7, #12]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d00e      	beq.n	8000882 <DisplayInit+0x7e>
            ms = *addr++;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	607a      	str	r2, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800086e:	89bb      	ldrh	r3, [r7, #12]
 8000870:	2bff      	cmp	r3, #255	; 0xff
 8000872:	d102      	bne.n	800087a <DisplayInit+0x76>
 8000874:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000878:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	4618      	mov	r0, r3
 800087e:	f002 fd8b 	bl	8003398 <HAL_Delay>
    while(numCommands--) {
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	1e5a      	subs	r2, r3, #1
 8000886:	73fa      	strb	r2, [r7, #15]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1c5      	bne.n	8000818 <DisplayInit+0x14>
        }
    }
}
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	3710      	adds	r7, #16
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	4604      	mov	r4, r0
 80008a0:	4608      	mov	r0, r1
 80008a2:	4611      	mov	r1, r2
 80008a4:	461a      	mov	r2, r3
 80008a6:	4623      	mov	r3, r4
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	4603      	mov	r3, r0
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	460b      	mov	r3, r1
 80008b0:	717b      	strb	r3, [r7, #5]
 80008b2:	4613      	mov	r3, r2
 80008b4:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008b6:	202a      	movs	r0, #42	; 0x2a
 80008b8:	f7ff ff70 	bl	800079c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008bc:	2300      	movs	r3, #0
 80008be:	733b      	strb	r3, [r7, #12]
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <ST7735_SetAddressWindow+0x88>)
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4413      	add	r3, r2
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	737b      	strb	r3, [r7, #13]
 80008cc:	2300      	movs	r3, #0
 80008ce:	73bb      	strb	r3, [r7, #14]
 80008d0:	4b13      	ldr	r3, [pc, #76]	; (8000920 <ST7735_SetAddressWindow+0x88>)
 80008d2:	781a      	ldrb	r2, [r3, #0]
 80008d4:	797b      	ldrb	r3, [r7, #5]
 80008d6:	4413      	add	r3, r2
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2104      	movs	r1, #4
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff ff74 	bl	80007d0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80008e8:	202b      	movs	r0, #43	; 0x2b
 80008ea:	f7ff ff57 	bl	800079c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <ST7735_SetAddressWindow+0x8c>)
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	4413      	add	r3, r2
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <ST7735_SetAddressWindow+0x8c>)
 80008fc:	781a      	ldrb	r2, [r3, #0]
 80008fe:	793b      	ldrb	r3, [r7, #4]
 8000900:	4413      	add	r3, r2
 8000902:	b2db      	uxtb	r3, r3
 8000904:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2104      	movs	r1, #4
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8000912:	202c      	movs	r0, #44	; 0x2c
 8000914:	f7ff ff42 	bl	800079c <ST7735_WriteCommand>
}
 8000918:	bf00      	nop
 800091a:	3714      	adds	r7, #20
 800091c:	46bd      	mov	sp, r7
 800091e:	bd90      	pop	{r4, r7, pc}
 8000920:	24004c54 	.word	0x24004c54
 8000924:	24004c58 	.word	0x24004c58

08000928 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8000932:	f7ff ff07 	bl	8000744 <ST7735_Select>
    ST7735_Reset();
 8000936:	f7ff ff1d 	bl	8000774 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <ST7735_Init+0x44>)
 800093c:	f7ff ff62 	bl	8000804 <DisplayInit>
    DisplayInit(init_cmds2);
 8000940:	480b      	ldr	r0, [pc, #44]	; (8000970 <ST7735_Init+0x48>)
 8000942:	f7ff ff5f 	bl	8000804 <DisplayInit>
    DisplayInit(init_cmds3);
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <ST7735_Init+0x4c>)
 8000948:	f7ff ff5c 	bl	8000804 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <ST7735_Init+0x50>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8000952:	4b0a      	ldr	r3, [pc, #40]	; (800097c <ST7735_Init+0x54>)
 8000954:	2200      	movs	r2, #0
 8000956:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f810 	bl	8000980 <ST7735_SetRotation>
    ST7735_Unselect();
 8000960:	f7ff fefc 	bl	800075c <ST7735_Unselect>

}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	0801f304 	.word	0x0801f304
 8000970:	0801f33c 	.word	0x0801f33c
 8000974:	0801f34c 	.word	0x0801f34c
 8000978:	24004c55 	.word	0x24004c55
 800097c:	24004c59 	.word	0x24004c59

08000980 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	4603      	mov	r3, r0
 8000988:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 800098e:	79fb      	ldrb	r3, [r7, #7]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <ST7735_SetRotation+0xe4>)
 8000998:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800099a:	4b32      	ldr	r3, [pc, #200]	; (8000a64 <ST7735_SetRotation+0xe4>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b03      	cmp	r3, #3
 80009a0:	d84e      	bhi.n	8000a40 <ST7735_SetRotation+0xc0>
 80009a2:	a201      	add	r2, pc, #4	; (adr r2, 80009a8 <ST7735_SetRotation+0x28>)
 80009a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a8:	080009b9 	.word	0x080009b9
 80009ac:	080009db 	.word	0x080009db
 80009b0:	080009fd 	.word	0x080009fd
 80009b4:	08000a1f 	.word	0x08000a1f
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009b8:	23c0      	movs	r3, #192	; 0xc0
 80009ba:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009bc:	4b2a      	ldr	r3, [pc, #168]	; (8000a68 <ST7735_SetRotation+0xe8>)
 80009be:	22a0      	movs	r2, #160	; 0xa0
 80009c0:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <ST7735_SetRotation+0xec>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009c8:	4b29      	ldr	r3, [pc, #164]	; (8000a70 <ST7735_SetRotation+0xf0>)
 80009ca:	781a      	ldrb	r2, [r3, #0]
 80009cc:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <ST7735_SetRotation+0xf4>)
 80009ce:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80009d0:	4b29      	ldr	r3, [pc, #164]	; (8000a78 <ST7735_SetRotation+0xf8>)
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	4b29      	ldr	r3, [pc, #164]	; (8000a7c <ST7735_SetRotation+0xfc>)
 80009d6:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009d8:	e032      	b.n	8000a40 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009da:	23a0      	movs	r3, #160	; 0xa0
 80009dc:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009de:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <ST7735_SetRotation+0xec>)
 80009e0:	22a0      	movs	r2, #160	; 0xa0
 80009e2:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80009e4:	4b20      	ldr	r3, [pc, #128]	; (8000a68 <ST7735_SetRotation+0xe8>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80009ea:	4b21      	ldr	r3, [pc, #132]	; (8000a70 <ST7735_SetRotation+0xf0>)
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	4b23      	ldr	r3, [pc, #140]	; (8000a7c <ST7735_SetRotation+0xfc>)
 80009f0:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <ST7735_SetRotation+0xf8>)
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	4b1f      	ldr	r3, [pc, #124]	; (8000a74 <ST7735_SetRotation+0xf4>)
 80009f8:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009fa:	e021      	b.n	8000a40 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80009fc:	2300      	movs	r3, #0
 80009fe:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <ST7735_SetRotation+0xe8>)
 8000a02:	22a0      	movs	r2, #160	; 0xa0
 8000a04:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <ST7735_SetRotation+0xec>)
 8000a08:	2280      	movs	r2, #128	; 0x80
 8000a0a:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a0c:	4b18      	ldr	r3, [pc, #96]	; (8000a70 <ST7735_SetRotation+0xf0>)
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <ST7735_SetRotation+0xf4>)
 8000a12:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a14:	4b18      	ldr	r3, [pc, #96]	; (8000a78 <ST7735_SetRotation+0xf8>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <ST7735_SetRotation+0xfc>)
 8000a1a:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a1c:	e010      	b.n	8000a40 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a1e:	2360      	movs	r3, #96	; 0x60
 8000a20:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <ST7735_SetRotation+0xec>)
 8000a24:	22a0      	movs	r2, #160	; 0xa0
 8000a26:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <ST7735_SetRotation+0xe8>)
 8000a2a:	2280      	movs	r2, #128	; 0x80
 8000a2c:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a2e:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <ST7735_SetRotation+0xf0>)
 8000a30:	781a      	ldrb	r2, [r3, #0]
 8000a32:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <ST7735_SetRotation+0xfc>)
 8000a34:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <ST7735_SetRotation+0xf8>)
 8000a38:	781a      	ldrb	r2, [r3, #0]
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <ST7735_SetRotation+0xf4>)
 8000a3c:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a3e:	bf00      	nop
  }
  ST7735_Select();
 8000a40:	f7ff fe80 	bl	8000744 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a44:	2036      	movs	r0, #54	; 0x36
 8000a46:	f7ff fea9 	bl	800079c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a4a:	f107 030f 	add.w	r3, r7, #15
 8000a4e:	2101      	movs	r1, #1
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff febd 	bl	80007d0 <ST7735_WriteData>
  ST7735_Unselect();
 8000a56:	f7ff fe81 	bl	800075c <ST7735_Unselect>
}
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	24004c5a 	.word	0x24004c5a
 8000a68:	24004c60 	.word	0x24004c60
 8000a6c:	24004c5c 	.word	0x24004c5c
 8000a70:	24004c55 	.word	0x24004c55
 8000a74:	24004c54 	.word	0x24004c54
 8000a78:	24004c59 	.word	0x24004c59
 8000a7c:	24004c58 	.word	0x24004c58

08000a80 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a80:	b082      	sub	sp, #8
 8000a82:	b590      	push	{r4, r7, lr}
 8000a84:	b089      	sub	sp, #36	; 0x24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	637b      	str	r3, [r7, #52]	; 0x34
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	80fb      	strh	r3, [r7, #6]
 8000a8e:	460b      	mov	r3, r1
 8000a90:	80bb      	strh	r3, [r7, #4]
 8000a92:	4613      	mov	r3, r2
 8000a94:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000a96:	88fb      	ldrh	r3, [r7, #6]
 8000a98:	b2d8      	uxtb	r0, r3
 8000a9a:	88bb      	ldrh	r3, [r7, #4]
 8000a9c:	b2d9      	uxtb	r1, r3
 8000a9e:	88fb      	ldrh	r3, [r7, #6]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000aa6:	4413      	add	r3, r2
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	3b01      	subs	r3, #1
 8000aac:	b2dc      	uxtb	r4, r3
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ab6:	4413      	add	r3, r2
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	3b01      	subs	r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	4622      	mov	r2, r4
 8000ac0:	f7ff feea 	bl	8000898 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	e043      	b.n	8000b52 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000acc:	78fb      	ldrb	r3, [r7, #3]
 8000ace:	3b20      	subs	r3, #32
 8000ad0:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000ad4:	fb01 f303 	mul.w	r3, r1, r3
 8000ad8:	4619      	mov	r1, r3
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	440b      	add	r3, r1
 8000ade:	005b      	lsls	r3, r3, #1
 8000ae0:	4413      	add	r3, r2
 8000ae2:	881b      	ldrh	r3, [r3, #0]
 8000ae4:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61bb      	str	r3, [r7, #24]
 8000aea:	e029      	b.n	8000b40 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000aec:	697a      	ldr	r2, [r7, #20]
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	fa02 f303 	lsl.w	r3, r2, r3
 8000af4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d00e      	beq.n	8000b1a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000afc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000afe:	0a1b      	lsrs	r3, r3, #8
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	743b      	strb	r3, [r7, #16]
 8000b06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b0c:	f107 0310 	add.w	r3, r7, #16
 8000b10:	2102      	movs	r1, #2
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe5c 	bl	80007d0 <ST7735_WriteData>
 8000b18:	e00f      	b.n	8000b3a <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	b2db      	uxtb	r3, r3
 8000b24:	733b      	strb	r3, [r7, #12]
 8000b26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b2e:	f107 030c 	add.w	r3, r7, #12
 8000b32:	2102      	movs	r1, #2
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff fe4b 	bl	80007d0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	61bb      	str	r3, [r7, #24]
 8000b40:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b44:	461a      	mov	r2, r3
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d3cf      	bcc.n	8000aec <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b4c:	69fb      	ldr	r3, [r7, #28]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	61fb      	str	r3, [r7, #28]
 8000b52:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b56:	461a      	mov	r2, r3
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d3b5      	bcc.n	8000aca <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b5e:	bf00      	nop
 8000b60:	bf00      	nop
 8000b62:	3724      	adds	r7, #36	; 0x24
 8000b64:	46bd      	mov	sp, r7
 8000b66:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b6a:	b002      	add	sp, #8
 8000b6c:	4770      	bx	lr
	...

08000b70 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b70:	b082      	sub	sp, #8
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af04      	add	r7, sp, #16
 8000b78:	603a      	str	r2, [r7, #0]
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	80fb      	strh	r3, [r7, #6]
 8000b80:	460b      	mov	r3, r1
 8000b82:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000b84:	f7ff fdde 	bl	8000744 <ST7735_Select>

    while(*str) {
 8000b88:	e033      	b.n	8000bf2 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	7d3a      	ldrb	r2, [r7, #20]
 8000b8e:	4413      	add	r3, r2
 8000b90:	4a1f      	ldr	r2, [pc, #124]	; (8000c10 <ST7735_WriteString+0xa0>)
 8000b92:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000b96:	4293      	cmp	r3, r2
 8000b98:	db16      	blt.n	8000bc8 <ST7735_WriteString+0x58>
            x = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000b9e:	7d7b      	ldrb	r3, [r7, #21]
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	88bb      	ldrh	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000ba8:	88bb      	ldrh	r3, [r7, #4]
 8000baa:	7d7a      	ldrb	r2, [r7, #21]
 8000bac:	4413      	add	r3, r2
 8000bae:	4a19      	ldr	r2, [pc, #100]	; (8000c14 <ST7735_WriteString+0xa4>)
 8000bb0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	da21      	bge.n	8000bfc <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b20      	cmp	r3, #32
 8000bbe:	d103      	bne.n	8000bc8 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	603b      	str	r3, [r7, #0]
                continue;
 8000bc6:	e014      	b.n	8000bf2 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	781a      	ldrb	r2, [r3, #0]
 8000bcc:	88b9      	ldrh	r1, [r7, #4]
 8000bce:	88f8      	ldrh	r0, [r7, #6]
 8000bd0:	8c3b      	ldrh	r3, [r7, #32]
 8000bd2:	9302      	str	r3, [sp, #8]
 8000bd4:	8bbb      	ldrh	r3, [r7, #28]
 8000bd6:	9301      	str	r3, [sp, #4]
 8000bd8:	69bb      	ldr	r3, [r7, #24]
 8000bda:	9300      	str	r3, [sp, #0]
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	f7ff ff4f 	bl	8000a80 <ST7735_WriteChar>
        x += font.width;
 8000be2:	7d3b      	ldrb	r3, [r7, #20]
 8000be4:	b29a      	uxth	r2, r3
 8000be6:	88fb      	ldrh	r3, [r7, #6]
 8000be8:	4413      	add	r3, r2
 8000bea:	80fb      	strh	r3, [r7, #6]
        str++;
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d1c7      	bne.n	8000b8a <ST7735_WriteString+0x1a>
 8000bfa:	e000      	b.n	8000bfe <ST7735_WriteString+0x8e>
                break;
 8000bfc:	bf00      	nop
    }

    ST7735_Unselect();
 8000bfe:	f7ff fdad 	bl	800075c <ST7735_Unselect>
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c0c:	b002      	add	sp, #8
 8000c0e:	4770      	bx	lr
 8000c10:	24004c5c 	.word	0x24004c5c
 8000c14:	24004c60 	.word	0x24004c60

08000c18 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c18:	b590      	push	{r4, r7, lr}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4608      	mov	r0, r1
 8000c22:	4611      	mov	r1, r2
 8000c24:	461a      	mov	r2, r3
 8000c26:	4623      	mov	r3, r4
 8000c28:	80fb      	strh	r3, [r7, #6]
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	80bb      	strh	r3, [r7, #4]
 8000c2e:	460b      	mov	r3, r1
 8000c30:	807b      	strh	r3, [r7, #2]
 8000c32:	4613      	mov	r3, r2
 8000c34:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	4a37      	ldr	r2, [pc, #220]	; (8000d18 <ST7735_FillRectangle+0x100>)
 8000c3a:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	da66      	bge.n	8000d10 <ST7735_FillRectangle+0xf8>
 8000c42:	88bb      	ldrh	r3, [r7, #4]
 8000c44:	4a35      	ldr	r2, [pc, #212]	; (8000d1c <ST7735_FillRectangle+0x104>)
 8000c46:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	da60      	bge.n	8000d10 <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c4e:	88fa      	ldrh	r2, [r7, #6]
 8000c50:	887b      	ldrh	r3, [r7, #2]
 8000c52:	4413      	add	r3, r2
 8000c54:	4a30      	ldr	r2, [pc, #192]	; (8000d18 <ST7735_FillRectangle+0x100>)
 8000c56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	dd06      	ble.n	8000c6c <ST7735_FillRectangle+0x54>
 8000c5e:	4b2e      	ldr	r3, [pc, #184]	; (8000d18 <ST7735_FillRectangle+0x100>)
 8000c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c64:	b29a      	uxth	r2, r3
 8000c66:	88fb      	ldrh	r3, [r7, #6]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c6c:	88ba      	ldrh	r2, [r7, #4]
 8000c6e:	883b      	ldrh	r3, [r7, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	4a2a      	ldr	r2, [pc, #168]	; (8000d1c <ST7735_FillRectangle+0x104>)
 8000c74:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	dd06      	ble.n	8000c8a <ST7735_FillRectangle+0x72>
 8000c7c:	4b27      	ldr	r3, [pc, #156]	; (8000d1c <ST7735_FillRectangle+0x104>)
 8000c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	88bb      	ldrh	r3, [r7, #4]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000c8a:	f7ff fd5b 	bl	8000744 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000c8e:	88fb      	ldrh	r3, [r7, #6]
 8000c90:	b2d8      	uxtb	r0, r3
 8000c92:	88bb      	ldrh	r3, [r7, #4]
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	887b      	ldrh	r3, [r7, #2]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	b2dc      	uxtb	r4, r3
 8000ca6:	88bb      	ldrh	r3, [r7, #4]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	883b      	ldrh	r3, [r7, #0]
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	4413      	add	r3, r2
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	b2db      	uxtb	r3, r3
 8000cb6:	4622      	mov	r2, r4
 8000cb8:	f7ff fdee 	bl	8000898 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cbc:	8c3b      	ldrh	r3, [r7, #32]
 8000cbe:	0a1b      	lsrs	r3, r3, #8
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	733b      	strb	r3, [r7, #12]
 8000cc6:	8c3b      	ldrh	r3, [r7, #32]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000ccc:	2201      	movs	r2, #1
 8000cce:	2108      	movs	r1, #8
 8000cd0:	4813      	ldr	r0, [pc, #76]	; (8000d20 <ST7735_FillRectangle+0x108>)
 8000cd2:	f006 f881 	bl	8006dd8 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000cd6:	883b      	ldrh	r3, [r7, #0]
 8000cd8:	80bb      	strh	r3, [r7, #4]
 8000cda:	e013      	b.n	8000d04 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000cdc:	887b      	ldrh	r3, [r7, #2]
 8000cde:	80fb      	strh	r3, [r7, #6]
 8000ce0:	e00a      	b.n	8000cf8 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000ce2:	f107 010c 	add.w	r1, r7, #12
 8000ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8000cea:	2202      	movs	r2, #2
 8000cec:	480d      	ldr	r0, [pc, #52]	; (8000d24 <ST7735_FillRectangle+0x10c>)
 8000cee:	f008 fc97 	bl	8009620 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	80fb      	strh	r3, [r7, #6]
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f1      	bne.n	8000ce2 <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000cfe:	88bb      	ldrh	r3, [r7, #4]
 8000d00:	3b01      	subs	r3, #1
 8000d02:	80bb      	strh	r3, [r7, #4]
 8000d04:	88bb      	ldrh	r3, [r7, #4]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d1e8      	bne.n	8000cdc <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000d0a:	f7ff fd27 	bl	800075c <ST7735_Unselect>
 8000d0e:	e000      	b.n	8000d12 <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000d10:	bf00      	nop
}
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd90      	pop	{r4, r7, pc}
 8000d18:	24004c5c 	.word	0x24004c5c
 8000d1c:	24004c60 	.word	0x24004c60
 8000d20:	58020000 	.word	0x58020000
 8000d24:	24004e0c 	.word	0x24004e0c

08000d28 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d2c:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <MX_CRC_Init+0x3c>)
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <MX_CRC_Init+0x40>)
 8000d30:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d32:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_CRC_Init+0x3c>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d38:	4b0a      	ldr	r3, [pc, #40]	; (8000d64 <MX_CRC_Init+0x3c>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_CRC_Init+0x3c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d44:	4b07      	ldr	r3, [pc, #28]	; (8000d64 <MX_CRC_Init+0x3c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_CRC_Init+0x3c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d50:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_CRC_Init+0x3c>)
 8000d52:	f002 fcb5 	bl	80036c0 <HAL_CRC_Init>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d5c:	f001 fa5c 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	24004c70 	.word	0x24004c70
 8000d68:	58024c00 	.word	0x58024c00

08000d6c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b085      	sub	sp, #20
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <HAL_CRC_MspInit+0x3c>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d10e      	bne.n	8000d9c <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d84:	4a09      	ldr	r2, [pc, #36]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d86:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d8e:	4b07      	ldr	r3, [pc, #28]	; (8000dac <HAL_CRC_MspInit+0x40>)
 8000d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d94:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	58024c00 	.word	0x58024c00
 8000dac:	58024400 	.word	0x58024400

08000db0 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000db4:	4b2e      	ldr	r3, [pc, #184]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000db6:	4a2f      	ldr	r2, [pc, #188]	; (8000e74 <MX_FDCAN1_Init+0xc4>)
 8000db8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dba:	4b2d      	ldr	r3, [pc, #180]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000dc0:	4b2b      	ldr	r3, [pc, #172]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000dc6:	4b2a      	ldr	r3, [pc, #168]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000dcc:	4b28      	ldr	r3, [pc, #160]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000dd2:	4b27      	ldr	r3, [pc, #156]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000dd8:	4b25      	ldr	r3, [pc, #148]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000dda:	2202      	movs	r2, #2
 8000ddc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000de0:	2208      	movs	r2, #8
 8000de2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000de4:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000de6:	221f      	movs	r2, #31
 8000de8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000dea:	4b21      	ldr	r3, [pc, #132]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000dec:	2208      	movs	r2, #8
 8000dee:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000df0:	4b1f      	ldr	r3, [pc, #124]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000df6:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000dfc:	4b1c      	ldr	r3, [pc, #112]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e08:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e0e:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000e1a:	4b15      	ldr	r3, [pc, #84]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e20:	4b13      	ldr	r3, [pc, #76]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e38:	4b0d      	ldr	r3, [pc, #52]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e44:	4b0a      	ldr	r3, [pc, #40]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e58:	2204      	movs	r2, #4
 8000e5a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e5c:	4804      	ldr	r0, [pc, #16]	; (8000e70 <MX_FDCAN1_Init+0xc0>)
 8000e5e:	f004 fbc5 	bl	80055ec <HAL_FDCAN_Init>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e68:	f001 f9d6 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	24004ca4 	.word	0x24004ca4
 8000e74:	4000a000 	.word	0x4000a000

08000e78 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b0b6      	sub	sp, #216	; 0xd8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	22b4      	movs	r2, #180	; 0xb4
 8000e96:	2100      	movs	r1, #0
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f01a fbbc 	bl	801b616 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a31      	ldr	r2, [pc, #196]	; (8000f68 <HAL_FDCAN_MspInit+0xf0>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d15a      	bne.n	8000f5e <HAL_FDCAN_MspInit+0xe6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ea8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000eb2:	2319      	movs	r3, #25
 8000eb4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ec2:	23c0      	movs	r3, #192	; 0xc0
 8000ec4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000ece:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000ed2:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f006 ff7f 	bl	8007ddc <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000ee4:	f001 f998 	bl	8002218 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <HAL_FDCAN_MspInit+0xf4>)
 8000eea:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <HAL_FDCAN_MspInit+0xf4>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	; (8000f6c <HAL_FDCAN_MspInit+0xf4>)
 8000efa:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_FDCAN_MspInit+0xf4>)
 8000f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f0c:	4a17      	ldr	r2, [pc, #92]	; (8000f6c <HAL_FDCAN_MspInit+0xf4>)
 8000f0e:	f043 0308 	orr.w	r3, r3, #8
 8000f12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f16:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <HAL_FDCAN_MspInit+0xf4>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f24:	2303      	movs	r3, #3
 8000f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f42:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f46:	4619      	mov	r1, r3
 8000f48:	4809      	ldr	r0, [pc, #36]	; (8000f70 <HAL_FDCAN_MspInit+0xf8>)
 8000f4a:	f005 fd9d 	bl	8006a88 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2105      	movs	r1, #5
 8000f52:	2013      	movs	r0, #19
 8000f54:	f002 fb10 	bl	8003578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f58:	2013      	movs	r0, #19
 8000f5a:	f002 fb27 	bl	80035ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	37d8      	adds	r7, #216	; 0xd8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	4000a000 	.word	0x4000a000
 8000f6c:	58024400 	.word	0x58024400
 8000f70:	58020c00 	.word	0x58020c00

08000f74 <FDCAN1_MSG_config>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void FDCAN1_MSG_config(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0x05;
 8000f7a:	4b30      	ldr	r3, [pc, #192]	; (800103c <FDCAN1_MSG_config+0xc8>)
 8000f7c:	2205      	movs	r2, #5
 8000f7e:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x22;
 8000f80:	4b2e      	ldr	r3, [pc, #184]	; (800103c <FDCAN1_MSG_config+0xc8>)
 8000f82:	2222      	movs	r2, #34	; 0x22
 8000f84:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFE;
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <FDCAN1_MSG_config+0xc8>)
 8000f88:	22fe      	movs	r2, #254	; 0xfe
 8000f8a:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x01;
 8000f8c:	4b2b      	ldr	r3, [pc, #172]	; (800103c <FDCAN1_MSG_config+0xc8>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0x01;
 8000f92:	4b2a      	ldr	r3, [pc, #168]	; (800103c <FDCAN1_MSG_config+0xc8>)
 8000f94:	2201      	movs	r2, #1
 8000f96:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 8000f98:	4b28      	ldr	r3, [pc, #160]	; (800103c <FDCAN1_MSG_config+0xc8>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0x00;
 8000f9e:	4b27      	ldr	r3, [pc, #156]	; (800103c <FDCAN1_MSG_config+0xc8>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8000fa4:	4b25      	ldr	r3, [pc, #148]	; (800103c <FDCAN1_MSG_config+0xc8>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	71da      	strb	r2, [r3, #7]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000faa:	2300      	movs	r3, #0
 8000fac:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x762;
 8000fba:	f240 7362 	movw	r3, #1890	; 0x762
 8000fbe:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000fc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fc4:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000fc6:	463b      	mov	r3, r7
 8000fc8:	4619      	mov	r1, r3
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <FDCAN1_MSG_config+0xcc>)
 8000fcc:	f004 fcf0 	bl	80059b0 <HAL_FDCAN_ConfigFilter>

	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	2102      	movs	r1, #2
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <FDCAN1_MSG_config+0xcc>)
 8000fdc:	f004 fd5e 	bl	8005a9c <HAL_FDCAN_ConfigGlobalFilter>

	/* Configure Rx FIFO 0 watermark to 2 */
	HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO0, 1);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	2101      	movs	r1, #1
 8000fe4:	4816      	ldr	r0, [pc, #88]	; (8001040 <FDCAN1_MSG_config+0xcc>)
 8000fe6:	f004 fd86 	bl	8005af6 <HAL_FDCAN_ConfigFifoWatermark>

	/* Activate Rx FIFO 0 watermark notification */
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2101      	movs	r1, #1
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <FDCAN1_MSG_config+0xcc>)
 8000ff0:	f004 ffc2 	bl	8005f78 <HAL_FDCAN_ActivateNotification>

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x726;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 8000ff6:	f240 7226 	movw	r2, #1830	; 0x726
 8000ffa:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001002:	4b10      	ldr	r3, [pc, #64]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 800100a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800100e:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001010:	4b0c      	ldr	r3, [pc, #48]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 800101e:	2200      	movs	r2, #0
 8001020:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 8001024:	2200      	movs	r2, #0
 8001026:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001028:	4b06      	ldr	r3, [pc, #24]	; (8001044 <FDCAN1_MSG_config+0xd0>)
 800102a:	2200      	movs	r2, #0
 800102c:	621a      	str	r2, [r3, #32]

	/* Start the FDCAN module */
	HAL_FDCAN_Start(&hfdcan1);
 800102e:	4804      	ldr	r0, [pc, #16]	; (8001040 <FDCAN1_MSG_config+0xcc>)
 8001030:	f004 fdad 	bl	8005b8e <HAL_FDCAN_Start>
}
 8001034:	bf00      	nop
 8001036:	3720      	adds	r7, #32
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	24004c94 	.word	0x24004c94
 8001040:	24004ca4 	.word	0x24004ca4
 8001044:	24004da0 	.word	0x24004da0

08001048 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

    /* Retrieve Rx messages from RX FIFO0 */
    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &CAN_MSG_Received.RxHeader, CAN_MSG_Received.Rx_Payload);
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_FDCAN_RxFifo0Callback+0x84>)
 8001054:	4a1e      	ldr	r2, [pc, #120]	; (80010d0 <HAL_FDCAN_RxFifo0Callback+0x88>)
 8001056:	2140      	movs	r1, #64	; 0x40
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f004 fe1f 	bl	8005c9c <HAL_FDCAN_GetRxMessage>


    if ((CAN_MSG_Received.RxHeader.Identifier == 0x762) && (CAN_MSG_Received.RxHeader.IdType == FDCAN_STANDARD_ID))
 800105e:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8001060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001062:	f240 7262 	movw	r2, #1890	; 0x762
 8001066:	4293      	cmp	r3, r2
 8001068:	d12b      	bne.n	80010c2 <HAL_FDCAN_RxFifo0Callback+0x7a>
 800106a:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 800106c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106e:	2b00      	cmp	r3, #0
 8001070:	d127      	bne.n	80010c2 <HAL_FDCAN_RxFifo0Callback+0x7a>
    {
    	for(uint8_t counter = 0; counter <= 7; counter++)
 8001072:	2300      	movs	r3, #0
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	e00a      	b.n	800108e <HAL_FDCAN_RxFifo0Callback+0x46>
    		myRxData[counter] = CAN_MSG_Received.Rx_Payload[counter];
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	4915      	ldr	r1, [pc, #84]	; (80010d4 <HAL_FDCAN_RxFifo0Callback+0x8c>)
 800107e:	440a      	add	r2, r1
 8001080:	f892 1054 	ldrb.w	r1, [r2, #84]	; 0x54
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8001086:	54d1      	strb	r1, [r2, r3]
    	for(uint8_t counter = 0; counter <= 7; counter++)
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	3301      	adds	r3, #1
 800108c:	73fb      	strb	r3, [r7, #15]
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	2b07      	cmp	r3, #7
 8001092:	d9f1      	bls.n	8001078 <HAL_FDCAN_RxFifo0Callback+0x30>

    	if(myRxData[4] == 0xFF)
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_FDCAN_RxFifo0Callback+0x90>)
 8001096:	791b      	ldrb	r3, [r3, #4]
 8001098:	2bff      	cmp	r3, #255	; 0xff
 800109a:	d109      	bne.n	80010b0 <HAL_FDCAN_RxFifo0Callback+0x68>
    		xTaskNotifyFromISR((TaskHandle_t)CANHandle, DUT_FAILURE, eSetValueWithOverwrite, NULL);
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_FDCAN_RxFifo0Callback+0x94>)
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	2300      	movs	r3, #0
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	2203      	movs	r2, #3
 80010a8:	2102      	movs	r1, #2
 80010aa:	f00d ffd7 	bl	800f05c <xTaskGenericNotifyFromISR>

    	else
    		xTaskNotifyFromISR((TaskHandle_t)CANHandle, CAN_MSG_FROM_DUT, eSetValueWithOverwrite, NULL);
    }

}
 80010ae:	e008      	b.n	80010c2 <HAL_FDCAN_RxFifo0Callback+0x7a>
    		xTaskNotifyFromISR((TaskHandle_t)CANHandle, CAN_MSG_FROM_DUT, eSetValueWithOverwrite, NULL);
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <HAL_FDCAN_RxFifo0Callback+0x94>)
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	2300      	movs	r3, #0
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2300      	movs	r3, #0
 80010ba:	2203      	movs	r2, #3
 80010bc:	2100      	movs	r1, #0
 80010be:	f00d ffcd 	bl	800f05c <xTaskGenericNotifyFromISR>
}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	24004d98 	.word	0x24004d98
 80010d0:	24004d68 	.word	0x24004d68
 80010d4:	24004d44 	.word	0x24004d44
 80010d8:	24004c9c 	.word	0x24004c9c
 80010dc:	24004c68 	.word	0x24004c68

080010e0 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0

}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80010ee:	b480      	push	{r7}
 80010f0:	af00      	add	r7, sp, #0
return 0;
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
	...

08001100 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Controller */
  ControllerHandle = osThreadNew(Controller_handler, NULL, &Controller_attributes);
 8001104:	4a18      	ldr	r2, [pc, #96]	; (8001168 <MX_FREERTOS_Init+0x68>)
 8001106:	2100      	movs	r1, #0
 8001108:	4818      	ldr	r0, [pc, #96]	; (800116c <MX_FREERTOS_Init+0x6c>)
 800110a:	f00b f8ba 	bl	800c282 <osThreadNew>
 800110e:	4603      	mov	r3, r0
 8001110:	4a17      	ldr	r2, [pc, #92]	; (8001170 <MX_FREERTOS_Init+0x70>)
 8001112:	6013      	str	r3, [r2, #0]

  /* creation of TestMode1 */
  TestMode1Handle = osThreadNew(TestMode1_handler, NULL, &TestMode1_attributes);
 8001114:	4a17      	ldr	r2, [pc, #92]	; (8001174 <MX_FREERTOS_Init+0x74>)
 8001116:	2100      	movs	r1, #0
 8001118:	4817      	ldr	r0, [pc, #92]	; (8001178 <MX_FREERTOS_Init+0x78>)
 800111a:	f00b f8b2 	bl	800c282 <osThreadNew>
 800111e:	4603      	mov	r3, r0
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <MX_FREERTOS_Init+0x7c>)
 8001122:	6013      	str	r3, [r2, #0]

  /* creation of TestMode2 */
  TestMode2Handle = osThreadNew(TestMode2_handler, NULL, &TestMode2_attributes);
 8001124:	4a16      	ldr	r2, [pc, #88]	; (8001180 <MX_FREERTOS_Init+0x80>)
 8001126:	2100      	movs	r1, #0
 8001128:	4816      	ldr	r0, [pc, #88]	; (8001184 <MX_FREERTOS_Init+0x84>)
 800112a:	f00b f8aa 	bl	800c282 <osThreadNew>
 800112e:	4603      	mov	r3, r0
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <MX_FREERTOS_Init+0x88>)
 8001132:	6013      	str	r3, [r2, #0]

  /* creation of TestMode3 */
  TestMode3Handle = osThreadNew(TestMode3_handler, NULL, &TestMode3_attributes);
 8001134:	4a15      	ldr	r2, [pc, #84]	; (800118c <MX_FREERTOS_Init+0x8c>)
 8001136:	2100      	movs	r1, #0
 8001138:	4815      	ldr	r0, [pc, #84]	; (8001190 <MX_FREERTOS_Init+0x90>)
 800113a:	f00b f8a2 	bl	800c282 <osThreadNew>
 800113e:	4603      	mov	r3, r0
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <MX_FREERTOS_Init+0x94>)
 8001142:	6013      	str	r3, [r2, #0]

  /* creation of CAN */
  CANHandle = osThreadNew(CAN_handler, NULL, &CAN_attributes);
 8001144:	4a14      	ldr	r2, [pc, #80]	; (8001198 <MX_FREERTOS_Init+0x98>)
 8001146:	2100      	movs	r1, #0
 8001148:	4814      	ldr	r0, [pc, #80]	; (800119c <MX_FREERTOS_Init+0x9c>)
 800114a:	f00b f89a 	bl	800c282 <osThreadNew>
 800114e:	4603      	mov	r3, r0
 8001150:	4a13      	ldr	r2, [pc, #76]	; (80011a0 <MX_FREERTOS_Init+0xa0>)
 8001152:	6013      	str	r3, [r2, #0]

  /* creation of TestMode4 */
  TestMode4Handle = osThreadNew(TestMode4_handler, NULL, &TestMode4_attributes);
 8001154:	4a13      	ldr	r2, [pc, #76]	; (80011a4 <MX_FREERTOS_Init+0xa4>)
 8001156:	2100      	movs	r1, #0
 8001158:	4813      	ldr	r0, [pc, #76]	; (80011a8 <MX_FREERTOS_Init+0xa8>)
 800115a:	f00b f892 	bl	800c282 <osThreadNew>
 800115e:	4603      	mov	r3, r0
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_FREERTOS_Init+0xac>)
 8001162:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001164:	bf00      	nop
 8001166:	bd80      	pop	{r7, pc}
 8001168:	0801fae4 	.word	0x0801fae4
 800116c:	080011b1 	.word	0x080011b1
 8001170:	24004c64 	.word	0x24004c64
 8001174:	0801fb08 	.word	0x0801fb08
 8001178:	08001585 	.word	0x08001585
 800117c:	24004e08 	.word	0x24004e08
 8001180:	0801fb2c 	.word	0x0801fb2c
 8001184:	0800172d 	.word	0x0800172d
 8001188:	24004e00 	.word	0x24004e00
 800118c:	0801fb50 	.word	0x0801fb50
 8001190:	08001895 	.word	0x08001895
 8001194:	24004dfc 	.word	0x24004dfc
 8001198:	0801fb74 	.word	0x0801fb74
 800119c:	080019fd 	.word	0x080019fd
 80011a0:	24004c68 	.word	0x24004c68
 80011a4:	0801fb98 	.word	0x0801fb98
 80011a8:	08001a9d 	.word	0x08001a9d
 80011ac:	24004df4 	.word	0x24004df4

080011b0 <Controller_handler>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Controller_handler */
void Controller_handler(void *argument)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	; 0x28
 80011b4:	af04      	add	r7, sp, #16
 80011b6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  /* USER CODE BEGIN Controller_handler */
  SM_STATES state = INIT;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]
  uint32_t test_mode;

  /* Infinite loop */
  for(;;)
  {
	  switch(state)
 80011bc:	7dfb      	ldrb	r3, [r7, #23]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d002      	beq.n	80011c8 <Controller_handler+0x18>
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d06f      	beq.n	80012a6 <Controller_handler+0xf6>
			        }

			        state = IDLE;
			        break;

		  default:  break;
 80011c6:	e1cb      	b.n	8001560 <Controller_handler+0x3b0>
			        MX_LWIP_Init();
 80011c8:	f00a f9f0 	bl	800b5ac <MX_LWIP_Init>
			        tcp_server_init();
 80011cc:	f001 fb0c 	bl	80027e8 <tcp_server_init>
			        ST7735_Init(3);
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff fba9 	bl	8000928 <ST7735_Init>
			        fillScreen(BLACK);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f7ff fa9a 	bl	8000710 <fillScreen>
			  		ST7735_WriteString(0, 0, "     HIL Test Tool", Font_7x10, WHITE,BLACK);
 80011dc:	4ba9      	ldr	r3, [pc, #676]	; (8001484 <Controller_handler+0x2d4>)
 80011de:	2200      	movs	r2, #0
 80011e0:	9202      	str	r2, [sp, #8]
 80011e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e6:	9201      	str	r2, [sp, #4]
 80011e8:	685a      	ldr	r2, [r3, #4]
 80011ea:	9200      	str	r2, [sp, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4aa6      	ldr	r2, [pc, #664]	; (8001488 <Controller_handler+0x2d8>)
 80011f0:	2100      	movs	r1, #0
 80011f2:	2000      	movs	r0, #0
 80011f4:	f7ff fcbc 	bl	8000b70 <ST7735_WriteString>
			  		ST7735_WriteString(0, 20, "                    ", Font_7x10, WHITE,BLACK);
 80011f8:	4ba2      	ldr	r3, [pc, #648]	; (8001484 <Controller_handler+0x2d4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	9202      	str	r2, [sp, #8]
 80011fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001202:	9201      	str	r2, [sp, #4]
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	9200      	str	r2, [sp, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4aa0      	ldr	r2, [pc, #640]	; (800148c <Controller_handler+0x2dc>)
 800120c:	2114      	movs	r1, #20
 800120e:	2000      	movs	r0, #0
 8001210:	f7ff fcae 	bl	8000b70 <ST7735_WriteString>
			  		ST7735_WriteString(0, 30, "Software Ver. 0.1", Font_7x10, WHITE,BLACK);
 8001214:	4b9b      	ldr	r3, [pc, #620]	; (8001484 <Controller_handler+0x2d4>)
 8001216:	2200      	movs	r2, #0
 8001218:	9202      	str	r2, [sp, #8]
 800121a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800121e:	9201      	str	r2, [sp, #4]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	9200      	str	r2, [sp, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a9a      	ldr	r2, [pc, #616]	; (8001490 <Controller_handler+0x2e0>)
 8001228:	211e      	movs	r1, #30
 800122a:	2000      	movs	r0, #0
 800122c:	f7ff fca0 	bl	8000b70 <ST7735_WriteString>
			  		ST7735_WriteString(0, 40, "Hardware Ver. 0.1", Font_7x10, WHITE,BLACK);
 8001230:	4b94      	ldr	r3, [pc, #592]	; (8001484 <Controller_handler+0x2d4>)
 8001232:	2200      	movs	r2, #0
 8001234:	9202      	str	r2, [sp, #8]
 8001236:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800123a:	9201      	str	r2, [sp, #4]
 800123c:	685a      	ldr	r2, [r3, #4]
 800123e:	9200      	str	r2, [sp, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a94      	ldr	r2, [pc, #592]	; (8001494 <Controller_handler+0x2e4>)
 8001244:	2128      	movs	r1, #40	; 0x28
 8001246:	2000      	movs	r0, #0
 8001248:	f7ff fc92 	bl	8000b70 <ST7735_WriteString>
			  		ST7735_WriteString(0, 50, "IPv4 address:", Font_7x10, WHITE,BLACK);
 800124c:	4b8d      	ldr	r3, [pc, #564]	; (8001484 <Controller_handler+0x2d4>)
 800124e:	2200      	movs	r2, #0
 8001250:	9202      	str	r2, [sp, #8]
 8001252:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001256:	9201      	str	r2, [sp, #4]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a8e      	ldr	r2, [pc, #568]	; (8001498 <Controller_handler+0x2e8>)
 8001260:	2132      	movs	r1, #50	; 0x32
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fc84 	bl	8000b70 <ST7735_WriteString>
			  		ST7735_WriteString(0, 60, "192.168.50.100", Font_7x10, WHITE,BLACK);
 8001268:	4b86      	ldr	r3, [pc, #536]	; (8001484 <Controller_handler+0x2d4>)
 800126a:	2200      	movs	r2, #0
 800126c:	9202      	str	r2, [sp, #8]
 800126e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001272:	9201      	str	r2, [sp, #4]
 8001274:	685a      	ldr	r2, [r3, #4]
 8001276:	9200      	str	r2, [sp, #0]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a88      	ldr	r2, [pc, #544]	; (800149c <Controller_handler+0x2ec>)
 800127c:	213c      	movs	r1, #60	; 0x3c
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fc76 	bl	8000b70 <ST7735_WriteString>
			  		ST7735_WriteString(0, 70, "Port: 10", Font_7x10, WHITE,BLACK);
 8001284:	4b7f      	ldr	r3, [pc, #508]	; (8001484 <Controller_handler+0x2d4>)
 8001286:	2200      	movs	r2, #0
 8001288:	9202      	str	r2, [sp, #8]
 800128a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800128e:	9201      	str	r2, [sp, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	9200      	str	r2, [sp, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a82      	ldr	r2, [pc, #520]	; (80014a0 <Controller_handler+0x2f0>)
 8001298:	2146      	movs	r1, #70	; 0x46
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff fc68 	bl	8000b70 <ST7735_WriteString>
			  		state = IDLE;
 80012a0:	2301      	movs	r3, #1
 80012a2:	75fb      	strb	r3, [r7, #23]
					break;
 80012a4:	e15c      	b.n	8001560 <Controller_handler+0x3b0>
			        status = xTaskNotifyWait(0, 0, &test_mode, pdMS_TO_TICKS(20));
 80012a6:	f107 020c 	add.w	r2, r7, #12
 80012aa:	2302      	movs	r3, #2
 80012ac:	2100      	movs	r1, #0
 80012ae:	2000      	movs	r0, #0
 80012b0:	f00d fdb6 	bl	800ee20 <xTaskNotifyWait>
 80012b4:	6138      	str	r0, [r7, #16]
			        if(status == pdPASS)
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	f040 814b 	bne.w	8001554 <Controller_handler+0x3a4>
			        	switch(test_mode)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	2b03      	cmp	r3, #3
 80012c4:	f200 8148 	bhi.w	8001558 <Controller_handler+0x3a8>
 80012c8:	a201      	add	r2, pc, #4	; (adr r2, 80012d0 <Controller_handler+0x120>)
 80012ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ce:	bf00      	nop
 80012d0:	080012e1 	.word	0x080012e1
 80012d4:	0800136d 	.word	0x0800136d
 80012d8:	080013f9 	.word	0x080013f9
 80012dc:	080014c9 	.word	0x080014c9
			        		case TEST_MODE_1: current_test_mode = TEST_MODE_1;
 80012e0:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <Controller_handler+0x2f4>)
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
			        					      fillScreen(BLACK);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f7ff fa12 	bl	8000710 <fillScreen>
			        					      ST7735_WriteString(0, 0, "     HIL Test Tool", Font_7x10, WHITE,BLACK);
 80012ec:	4b65      	ldr	r3, [pc, #404]	; (8001484 <Controller_handler+0x2d4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	9202      	str	r2, [sp, #8]
 80012f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012f6:	9201      	str	r2, [sp, #4]
 80012f8:	685a      	ldr	r2, [r3, #4]
 80012fa:	9200      	str	r2, [sp, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a62      	ldr	r2, [pc, #392]	; (8001488 <Controller_handler+0x2d8>)
 8001300:	2100      	movs	r1, #0
 8001302:	2000      	movs	r0, #0
 8001304:	f7ff fc34 	bl	8000b70 <ST7735_WriteString>
			        			              ST7735_WriteString(0, 20, "Test M1: Speed Engine", Font_7x10, WHITE,BLACK);
 8001308:	4b5e      	ldr	r3, [pc, #376]	; (8001484 <Controller_handler+0x2d4>)
 800130a:	2200      	movs	r2, #0
 800130c:	9202      	str	r2, [sp, #8]
 800130e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001312:	9201      	str	r2, [sp, #4]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a63      	ldr	r2, [pc, #396]	; (80014a8 <Controller_handler+0x2f8>)
 800131c:	2114      	movs	r1, #20
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fc26 	bl	8000b70 <ST7735_WriteString>
			        			              ST7735_WriteString(0, 30, "Status:", Font_7x10, WHITE,BLACK);
 8001324:	4b57      	ldr	r3, [pc, #348]	; (8001484 <Controller_handler+0x2d4>)
 8001326:	2200      	movs	r2, #0
 8001328:	9202      	str	r2, [sp, #8]
 800132a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	685a      	ldr	r2, [r3, #4]
 8001332:	9200      	str	r2, [sp, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	4a5d      	ldr	r2, [pc, #372]	; (80014ac <Controller_handler+0x2fc>)
 8001338:	211e      	movs	r1, #30
 800133a:	2000      	movs	r0, #0
 800133c:	f7ff fc18 	bl	8000b70 <ST7735_WriteString>
			        			              ST7735_WriteString(50, 30, "Testing..", Font_7x10, YELLOW,BLACK);
 8001340:	4b50      	ldr	r3, [pc, #320]	; (8001484 <Controller_handler+0x2d4>)
 8001342:	2200      	movs	r2, #0
 8001344:	9202      	str	r2, [sp, #8]
 8001346:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800134a:	9201      	str	r2, [sp, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	9200      	str	r2, [sp, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a57      	ldr	r2, [pc, #348]	; (80014b0 <Controller_handler+0x300>)
 8001354:	211e      	movs	r1, #30
 8001356:	2032      	movs	r0, #50	; 0x32
 8001358:	f7ff fc0a 	bl	8000b70 <ST7735_WriteString>
			        			              xTaskNotify((TaskHandle_t)TestMode1Handle, START, eSetValueWithOverwrite);
 800135c:	4b55      	ldr	r3, [pc, #340]	; (80014b4 <Controller_handler+0x304>)
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	2300      	movs	r3, #0
 8001362:	2203      	movs	r2, #3
 8001364:	2101      	movs	r1, #1
 8001366:	f00d fdbb 	bl	800eee0 <xTaskGenericNotify>
				        	                  break;
 800136a:	e0f6      	b.n	800155a <Controller_handler+0x3aa>
			        		case TEST_MODE_2: current_test_mode = TEST_MODE_2;
 800136c:	4b4d      	ldr	r3, [pc, #308]	; (80014a4 <Controller_handler+0x2f4>)
 800136e:	2202      	movs	r2, #2
 8001370:	701a      	strb	r2, [r3, #0]
			        						  fillScreen(BLACK);
 8001372:	2000      	movs	r0, #0
 8001374:	f7ff f9cc 	bl	8000710 <fillScreen>
											  ST7735_WriteString(0, 0, "     HIL Test Tool", Font_7x10, WHITE,BLACK);
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <Controller_handler+0x2d4>)
 800137a:	2200      	movs	r2, #0
 800137c:	9202      	str	r2, [sp, #8]
 800137e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001382:	9201      	str	r2, [sp, #4]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	9200      	str	r2, [sp, #0]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a3f      	ldr	r2, [pc, #252]	; (8001488 <Controller_handler+0x2d8>)
 800138c:	2100      	movs	r1, #0
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fbee 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(0, 20, "Test M2: Headlights", Font_7x10, WHITE,BLACK);
 8001394:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <Controller_handler+0x2d4>)
 8001396:	2200      	movs	r2, #0
 8001398:	9202      	str	r2, [sp, #8]
 800139a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800139e:	9201      	str	r2, [sp, #4]
 80013a0:	685a      	ldr	r2, [r3, #4]
 80013a2:	9200      	str	r2, [sp, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a44      	ldr	r2, [pc, #272]	; (80014b8 <Controller_handler+0x308>)
 80013a8:	2114      	movs	r1, #20
 80013aa:	2000      	movs	r0, #0
 80013ac:	f7ff fbe0 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(0, 30, "Status:", Font_7x10, WHITE,BLACK);
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <Controller_handler+0x2d4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	9202      	str	r2, [sp, #8]
 80013b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ba:	9201      	str	r2, [sp, #4]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	9200      	str	r2, [sp, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a3a      	ldr	r2, [pc, #232]	; (80014ac <Controller_handler+0x2fc>)
 80013c4:	211e      	movs	r1, #30
 80013c6:	2000      	movs	r0, #0
 80013c8:	f7ff fbd2 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(50, 30, "Testing..", Font_7x10, YELLOW,BLACK);
 80013cc:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <Controller_handler+0x2d4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	9202      	str	r2, [sp, #8]
 80013d2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80013d6:	9201      	str	r2, [sp, #4]
 80013d8:	685a      	ldr	r2, [r3, #4]
 80013da:	9200      	str	r2, [sp, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4a34      	ldr	r2, [pc, #208]	; (80014b0 <Controller_handler+0x300>)
 80013e0:	211e      	movs	r1, #30
 80013e2:	2032      	movs	r0, #50	; 0x32
 80013e4:	f7ff fbc4 	bl	8000b70 <ST7735_WriteString>
			        					      xTaskNotify((TaskHandle_t)TestMode2Handle, START, eSetValueWithOverwrite);
 80013e8:	4b34      	ldr	r3, [pc, #208]	; (80014bc <Controller_handler+0x30c>)
 80013ea:	6818      	ldr	r0, [r3, #0]
 80013ec:	2300      	movs	r3, #0
 80013ee:	2203      	movs	r2, #3
 80013f0:	2101      	movs	r1, #1
 80013f2:	f00d fd75 	bl	800eee0 <xTaskGenericNotify>
			        			              break;
 80013f6:	e0b0      	b.n	800155a <Controller_handler+0x3aa>
			        		case TEST_MODE_3: current_test_mode = TEST_MODE_3;
 80013f8:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <Controller_handler+0x2f4>)
 80013fa:	2203      	movs	r2, #3
 80013fc:	701a      	strb	r2, [r3, #0]
			        						  fillScreen(BLACK);
 80013fe:	2000      	movs	r0, #0
 8001400:	f7ff f986 	bl	8000710 <fillScreen>
											  ST7735_WriteString(0, 0, "     HIL Test Tool", Font_7x10, WHITE,BLACK);
 8001404:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <Controller_handler+0x2d4>)
 8001406:	2200      	movs	r2, #0
 8001408:	9202      	str	r2, [sp, #8]
 800140a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800140e:	9201      	str	r2, [sp, #4]
 8001410:	685a      	ldr	r2, [r3, #4]
 8001412:	9200      	str	r2, [sp, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a1c      	ldr	r2, [pc, #112]	; (8001488 <Controller_handler+0x2d8>)
 8001418:	2100      	movs	r1, #0
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff fba8 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(0, 20, "Test M3: Hazards", Font_7x10, WHITE,BLACK);
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <Controller_handler+0x2d4>)
 8001422:	2200      	movs	r2, #0
 8001424:	9202      	str	r2, [sp, #8]
 8001426:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142a:	9201      	str	r2, [sp, #4]
 800142c:	685a      	ldr	r2, [r3, #4]
 800142e:	9200      	str	r2, [sp, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4a23      	ldr	r2, [pc, #140]	; (80014c0 <Controller_handler+0x310>)
 8001434:	2114      	movs	r1, #20
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff fb9a 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(0, 30, "Status:", Font_7x10, WHITE,BLACK);
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <Controller_handler+0x2d4>)
 800143e:	2200      	movs	r2, #0
 8001440:	9202      	str	r2, [sp, #8]
 8001442:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001446:	9201      	str	r2, [sp, #4]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	9200      	str	r2, [sp, #0]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <Controller_handler+0x2fc>)
 8001450:	211e      	movs	r1, #30
 8001452:	2000      	movs	r0, #0
 8001454:	f7ff fb8c 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(50, 30, "Testing..", Font_7x10, YELLOW,BLACK);
 8001458:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <Controller_handler+0x2d4>)
 800145a:	2200      	movs	r2, #0
 800145c:	9202      	str	r2, [sp, #8]
 800145e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001462:	9201      	str	r2, [sp, #4]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	9200      	str	r2, [sp, #0]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a11      	ldr	r2, [pc, #68]	; (80014b0 <Controller_handler+0x300>)
 800146c:	211e      	movs	r1, #30
 800146e:	2032      	movs	r0, #50	; 0x32
 8001470:	f7ff fb7e 	bl	8000b70 <ST7735_WriteString>
			        					      xTaskNotify((TaskHandle_t)TestMode3Handle, START, eSetValueWithOverwrite);
 8001474:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <Controller_handler+0x314>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	2203      	movs	r2, #3
 800147c:	2101      	movs	r1, #1
 800147e:	f00d fd2f 	bl	800eee0 <xTaskGenericNotify>
			        			              break;
 8001482:	e06a      	b.n	800155a <Controller_handler+0x3aa>
 8001484:	24000000 	.word	0x24000000
 8001488:	0801c5bc 	.word	0x0801c5bc
 800148c:	0801c5d0 	.word	0x0801c5d0
 8001490:	0801c5e8 	.word	0x0801c5e8
 8001494:	0801c5fc 	.word	0x0801c5fc
 8001498:	0801c610 	.word	0x0801c610
 800149c:	0801c620 	.word	0x0801c620
 80014a0:	0801c630 	.word	0x0801c630
 80014a4:	240000bc 	.word	0x240000bc
 80014a8:	0801c63c 	.word	0x0801c63c
 80014ac:	0801c654 	.word	0x0801c654
 80014b0:	0801c65c 	.word	0x0801c65c
 80014b4:	24004e08 	.word	0x24004e08
 80014b8:	0801c668 	.word	0x0801c668
 80014bc:	24004e00 	.word	0x24004e00
 80014c0:	0801c67c 	.word	0x0801c67c
 80014c4:	24004dfc 	.word	0x24004dfc
			        		case TEST_MODE_4: current_test_mode = TEST_MODE_4;
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <Controller_handler+0x3b8>)
 80014ca:	2204      	movs	r2, #4
 80014cc:	701a      	strb	r2, [r3, #0]
			        						  fillScreen(BLACK);
 80014ce:	2000      	movs	r0, #0
 80014d0:	f7ff f91e 	bl	8000710 <fillScreen>
											  ST7735_WriteString(0, 0, "     HIL Test Tool", Font_7x10, WHITE,BLACK);
 80014d4:	4b25      	ldr	r3, [pc, #148]	; (800156c <Controller_handler+0x3bc>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	9202      	str	r2, [sp, #8]
 80014da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014de:	9201      	str	r2, [sp, #4]
 80014e0:	685a      	ldr	r2, [r3, #4]
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a22      	ldr	r2, [pc, #136]	; (8001570 <Controller_handler+0x3c0>)
 80014e8:	2100      	movs	r1, #0
 80014ea:	2000      	movs	r0, #0
 80014ec:	f7ff fb40 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(0, 20, "Test M4: Engine Status", Font_7x10, WHITE,BLACK);
 80014f0:	4b1e      	ldr	r3, [pc, #120]	; (800156c <Controller_handler+0x3bc>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	9202      	str	r2, [sp, #8]
 80014f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014fa:	9201      	str	r2, [sp, #4]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	9200      	str	r2, [sp, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1c      	ldr	r2, [pc, #112]	; (8001574 <Controller_handler+0x3c4>)
 8001504:	2114      	movs	r1, #20
 8001506:	2000      	movs	r0, #0
 8001508:	f7ff fb32 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(0, 30, "Status:", Font_7x10, WHITE,BLACK);
 800150c:	4b17      	ldr	r3, [pc, #92]	; (800156c <Controller_handler+0x3bc>)
 800150e:	2200      	movs	r2, #0
 8001510:	9202      	str	r2, [sp, #8]
 8001512:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001516:	9201      	str	r2, [sp, #4]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	9200      	str	r2, [sp, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a16      	ldr	r2, [pc, #88]	; (8001578 <Controller_handler+0x3c8>)
 8001520:	211e      	movs	r1, #30
 8001522:	2000      	movs	r0, #0
 8001524:	f7ff fb24 	bl	8000b70 <ST7735_WriteString>
											  ST7735_WriteString(50, 30, "Testing..", Font_7x10, YELLOW,BLACK);
 8001528:	4b10      	ldr	r3, [pc, #64]	; (800156c <Controller_handler+0x3bc>)
 800152a:	2200      	movs	r2, #0
 800152c:	9202      	str	r2, [sp, #8]
 800152e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001532:	9201      	str	r2, [sp, #4]
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	9200      	str	r2, [sp, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <Controller_handler+0x3cc>)
 800153c:	211e      	movs	r1, #30
 800153e:	2032      	movs	r0, #50	; 0x32
 8001540:	f7ff fb16 	bl	8000b70 <ST7735_WriteString>
			        					      xTaskNotify((TaskHandle_t)TestMode4Handle, START, eSetValueWithOverwrite);
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <Controller_handler+0x3d0>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	2203      	movs	r2, #3
 800154c:	2101      	movs	r1, #1
 800154e:	f00d fcc7 	bl	800eee0 <xTaskGenericNotify>
			        			              break;
 8001552:	e002      	b.n	800155a <Controller_handler+0x3aa>
			        }
 8001554:	bf00      	nop
 8001556:	e000      	b.n	800155a <Controller_handler+0x3aa>
			        		default:          break;
 8001558:	bf00      	nop
			        state = IDLE;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
			        break;
 800155e:	bf00      	nop
	  }

	  osDelay(1);
 8001560:	2001      	movs	r0, #1
 8001562:	f00a ff20 	bl	800c3a6 <osDelay>
	  switch(state)
 8001566:	e629      	b.n	80011bc <Controller_handler+0xc>
 8001568:	240000bc 	.word	0x240000bc
 800156c:	24000000 	.word	0x24000000
 8001570:	0801c5bc 	.word	0x0801c5bc
 8001574:	0801c690 	.word	0x0801c690
 8001578:	0801c654 	.word	0x0801c654
 800157c:	0801c65c 	.word	0x0801c65c
 8001580:	24004df4 	.word	0x24004df4

08001584 <TestMode1_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestMode1_handler */
void TestMode1_handler(void *argument)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08c      	sub	sp, #48	; 0x30
 8001588:	af04      	add	r7, sp, #16
 800158a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestMode1_handler */
  BaseType_t status;
  uint32_t parameter1, failure_flag;
  uint8_t expected_speed;
  TM_STATES TM1_state = TM_INIT;
 800158c:	2300      	movs	r3, #0
 800158e:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
  for(;;)
  {

	  switch(TM1_state)
 8001590:	7ffb      	ldrb	r3, [r7, #31]
 8001592:	2b02      	cmp	r3, #2
 8001594:	f000 809f 	beq.w	80016d6 <TestMode1_handler+0x152>
 8001598:	2b02      	cmp	r3, #2
 800159a:	f300 80af 	bgt.w	80016fc <TestMode1_handler+0x178>
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d002      	beq.n	80015a8 <TestMode1_handler+0x24>
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d02b      	beq.n	80015fe <TestMode1_handler+0x7a>
 80015a6:	e0a9      	b.n	80016fc <TestMode1_handler+0x178>
	  {
		  case TM_INIT:
			               status = xTaskNotifyWait(0, 0, &parameter1, pdMS_TO_TICKS(20));               // Notification comes from HAL_FDCAN_RxFifo0Callback within fdcan.c
 80015a8:	f107 0210 	add.w	r2, r7, #16
 80015ac:	2302      	movs	r3, #2
 80015ae:	2100      	movs	r1, #0
 80015b0:	2000      	movs	r0, #0
 80015b2:	f00d fc35 	bl	800ee20 <xTaskNotifyWait>
 80015b6:	61b8      	str	r0, [r7, #24]
		  	  	  	  	   if(status == pdPASS)
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	f040 809b 	bne.w	80016f6 <TestMode1_handler+0x172>
		  			       {
								resetMyCANTxData_TM1();                                                  // Resets the Tx CAN frame for a new test.
 80015c0:	f000 fb20 	bl	8001c04 <resetMyCANTxData_TM1>
								TM1_state = TM_MAIN;
 80015c4:	2301      	movs	r3, #1
 80015c6:	77fb      	strb	r3, [r7, #31]
								HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2101      	movs	r1, #1
 80015cc:	484d      	ldr	r0, [pc, #308]	; (8001704 <TestMode1_handler+0x180>)
 80015ce:	f005 fc03 	bl	8006dd8 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80015d2:	2200      	movs	r2, #0
 80015d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015d8:	484a      	ldr	r0, [pc, #296]	; (8001704 <TestMode1_handler+0x180>)
 80015da:	f005 fbfd 	bl	8006dd8 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2102      	movs	r1, #2
 80015e2:	4849      	ldr	r0, [pc, #292]	; (8001708 <TestMode1_handler+0x184>)
 80015e4:	f005 fbf8 	bl	8006dd8 <HAL_GPIO_WritePin>
								expected_speed = myTxData[6];
 80015e8:	4b48      	ldr	r3, [pc, #288]	; (800170c <TestMode1_handler+0x188>)
 80015ea:	799b      	ldrb	r3, [r3, #6]
 80015ec:	75fb      	strb	r3, [r7, #23]
								HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);            // Send initial CAN msg to DUT to indicate START of test.
 80015ee:	4a47      	ldr	r2, [pc, #284]	; (800170c <TestMode1_handler+0x188>)
 80015f0:	4947      	ldr	r1, [pc, #284]	; (8001710 <TestMode1_handler+0x18c>)
 80015f2:	4848      	ldr	r0, [pc, #288]	; (8001714 <TestMode1_handler+0x190>)
 80015f4:	f004 faf6 	bl	8005be4 <HAL_FDCAN_AddMessageToTxFifoQ>

		  			        	status = pdFALSE;														 //Reset status flag to be ready for a new test.
 80015f8:	2300      	movs	r3, #0
 80015fa:	61bb      	str	r3, [r7, #24]
		  			       }

		  	  	  	  	   break;
 80015fc:	e07b      	b.n	80016f6 <TestMode1_handler+0x172>

		  case TM_MAIN:    /*Test Case #1: SPEED ENGINE TEST*/
			               status = xTaskNotifyWait(0, 0, &failure_flag, pdMS_TO_TICKS(10));             // Wait for DUT to respond with CAN ID 0x762.
 80015fe:	f107 020c 	add.w	r2, r7, #12
 8001602:	2301      	movs	r3, #1
 8001604:	2100      	movs	r1, #0
 8001606:	2000      	movs	r0, #0
 8001608:	f00d fc0a 	bl	800ee20 <xTaskNotifyWait>
 800160c:	61b8      	str	r0, [r7, #24]
			               if(status == pdPASS)
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d172      	bne.n	80016fa <TestMode1_handler+0x176>
			               {
			            	   if(failure_flag != DUT_FAILURE)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d02b      	beq.n	8001672 <TestMode1_handler+0xee>
			            	   {
			            		   if(myTxData[6] < 0xFF)
 800161a:	4b3c      	ldr	r3, [pc, #240]	; (800170c <TestMode1_handler+0x188>)
 800161c:	799b      	ldrb	r3, [r3, #6]
 800161e:	2bff      	cmp	r3, #255	; 0xff
 8001620:	d012      	beq.n	8001648 <TestMode1_handler+0xc4>
			                       {
			            		       myTxData[6]++;                                                   // Increment LSB and send the msg back to the DUT.
 8001622:	4b3a      	ldr	r3, [pc, #232]	; (800170c <TestMode1_handler+0x188>)
 8001624:	799b      	ldrb	r3, [r3, #6]
 8001626:	3301      	adds	r3, #1
 8001628:	b2da      	uxtb	r2, r3
 800162a:	4b38      	ldr	r3, [pc, #224]	; (800170c <TestMode1_handler+0x188>)
 800162c:	719a      	strb	r2, [r3, #6]
			            		       HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800162e:	2102      	movs	r1, #2
 8001630:	4835      	ldr	r0, [pc, #212]	; (8001708 <TestMode1_handler+0x184>)
 8001632:	f005 fbea 	bl	8006e0a <HAL_GPIO_TogglePin>
			            		   	   expected_speed = myTxData[6];
 8001636:	4b35      	ldr	r3, [pc, #212]	; (800170c <TestMode1_handler+0x188>)
 8001638:	799b      	ldrb	r3, [r3, #6]
 800163a:	75fb      	strb	r3, [r7, #23]
			            		   	   HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 800163c:	4a33      	ldr	r2, [pc, #204]	; (800170c <TestMode1_handler+0x188>)
 800163e:	4934      	ldr	r1, [pc, #208]	; (8001710 <TestMode1_handler+0x18c>)
 8001640:	4834      	ldr	r0, [pc, #208]	; (8001714 <TestMode1_handler+0x190>)
 8001642:	f004 facf 	bl	8005be4 <HAL_FDCAN_AddMessageToTxFifoQ>
			               /* USER CODE END Test Case #2 */

			               /* USER CODE BEGIN Test Case #3 */

			               /* USER CODE END Test Case #3 */
			               break;
 8001646:	e058      	b.n	80016fa <TestMode1_handler+0x176>
			            			   HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001648:	2101      	movs	r1, #1
 800164a:	482e      	ldr	r0, [pc, #184]	; (8001704 <TestMode1_handler+0x180>)
 800164c:	f005 fbdd 	bl	8006e0a <HAL_GPIO_TogglePin>
			            			   ST7735_WriteString(50, 30, "PASS     ", Font_7x10, GREEN, BLACK);
 8001650:	4b31      	ldr	r3, [pc, #196]	; (8001718 <TestMode1_handler+0x194>)
 8001652:	2200      	movs	r2, #0
 8001654:	9202      	str	r2, [sp, #8]
 8001656:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800165a:	9201      	str	r2, [sp, #4]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a2e      	ldr	r2, [pc, #184]	; (800171c <TestMode1_handler+0x198>)
 8001664:	211e      	movs	r1, #30
 8001666:	2032      	movs	r0, #50	; 0x32
 8001668:	f7ff fa82 	bl	8000b70 <ST7735_WriteString>
			            		   	   TM1_state = TM_CLEANUP;                                          // Send Test Mode to CLEANUP.
 800166c:	2302      	movs	r3, #2
 800166e:	77fb      	strb	r3, [r7, #31]
			               break;
 8001670:	e043      	b.n	80016fa <TestMode1_handler+0x176>
			            		   HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001672:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001676:	4823      	ldr	r0, [pc, #140]	; (8001704 <TestMode1_handler+0x180>)
 8001678:	f005 fbc7 	bl	8006e0a <HAL_GPIO_TogglePin>
			            		   ST7735_WriteString(50, 30, "FAIL     ", Font_7x10, RED, BLACK);
 800167c:	4b26      	ldr	r3, [pc, #152]	; (8001718 <TestMode1_handler+0x194>)
 800167e:	2200      	movs	r2, #0
 8001680:	9202      	str	r2, [sp, #8]
 8001682:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001686:	9201      	str	r2, [sp, #4]
 8001688:	685a      	ldr	r2, [r3, #4]
 800168a:	9200      	str	r2, [sp, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a24      	ldr	r2, [pc, #144]	; (8001720 <TestMode1_handler+0x19c>)
 8001690:	211e      	movs	r1, #30
 8001692:	2032      	movs	r0, #50	; 0x32
 8001694:	f7ff fa6c 	bl	8000b70 <ST7735_WriteString>
			            		   ST7735_WriteString(0, 50, "Description:", Font_7x10, WHITE,BLACK);
 8001698:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <TestMode1_handler+0x194>)
 800169a:	2200      	movs	r2, #0
 800169c:	9202      	str	r2, [sp, #8]
 800169e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016a2:	9201      	str	r2, [sp, #4]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	9200      	str	r2, [sp, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a1e      	ldr	r2, [pc, #120]	; (8001724 <TestMode1_handler+0x1a0>)
 80016ac:	2132      	movs	r1, #50	; 0x32
 80016ae:	2000      	movs	r0, #0
 80016b0:	f7ff fa5e 	bl	8000b70 <ST7735_WriteString>
			            		   ST7735_WriteString(0, 60, "NRC Message Received", Font_7x10, YELLOW,BLACK);
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <TestMode1_handler+0x194>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	9202      	str	r2, [sp, #8]
 80016ba:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80016be:	9201      	str	r2, [sp, #4]
 80016c0:	685a      	ldr	r2, [r3, #4]
 80016c2:	9200      	str	r2, [sp, #0]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a18      	ldr	r2, [pc, #96]	; (8001728 <TestMode1_handler+0x1a4>)
 80016c8:	213c      	movs	r1, #60	; 0x3c
 80016ca:	2000      	movs	r0, #0
 80016cc:	f7ff fa50 	bl	8000b70 <ST7735_WriteString>
			            		   TM1_state = TM_CLEANUP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	77fb      	strb	r3, [r7, #31]
			               break;
 80016d4:	e011      	b.n	80016fa <TestMode1_handler+0x176>

		  case TM_CLEANUP:
			               myTxData[4] = 0;                                                                         // Send Speed Engine back to ZERO.
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <TestMode1_handler+0x188>)
 80016d8:	2200      	movs	r2, #0
 80016da:	711a      	strb	r2, [r3, #4]
			               HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80016dc:	2200      	movs	r2, #0
 80016de:	2102      	movs	r1, #2
 80016e0:	4809      	ldr	r0, [pc, #36]	; (8001708 <TestMode1_handler+0x184>)
 80016e2:	f005 fb79 	bl	8006dd8 <HAL_GPIO_WritePin>
			               HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 80016e6:	4a09      	ldr	r2, [pc, #36]	; (800170c <TestMode1_handler+0x188>)
 80016e8:	4909      	ldr	r1, [pc, #36]	; (8001710 <TestMode1_handler+0x18c>)
 80016ea:	480a      	ldr	r0, [pc, #40]	; (8001714 <TestMode1_handler+0x190>)
 80016ec:	f004 fa7a 	bl	8005be4 <HAL_FDCAN_AddMessageToTxFifoQ>
			               TM1_state = TM_INIT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
		  			       break;
 80016f4:	e002      	b.n	80016fc <TestMode1_handler+0x178>
		  	  	  	  	   break;
 80016f6:	bf00      	nop
 80016f8:	e000      	b.n	80016fc <TestMode1_handler+0x178>
			               break;
 80016fa:	bf00      	nop
	  }

      osDelay(10);
 80016fc:	200a      	movs	r0, #10
 80016fe:	f00a fe52 	bl	800c3a6 <osDelay>
	  switch(TM1_state)
 8001702:	e745      	b.n	8001590 <TestMode1_handler+0xc>
 8001704:	58020400 	.word	0x58020400
 8001708:	58021000 	.word	0x58021000
 800170c:	24004c94 	.word	0x24004c94
 8001710:	24004da0 	.word	0x24004da0
 8001714:	24004ca4 	.word	0x24004ca4
 8001718:	24000000 	.word	0x24000000
 800171c:	0801c6a8 	.word	0x0801c6a8
 8001720:	0801c6b4 	.word	0x0801c6b4
 8001724:	0801c6c0 	.word	0x0801c6c0
 8001728:	0801c6d0 	.word	0x0801c6d0

0800172c <TestMode2_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestMode2_handler */
void TestMode2_handler(void *argument)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af04      	add	r7, sp, #16
 8001732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestMode2_handler */

  uint32_t parameter1, failure_flag;
  uint8_t expected_result;
  BaseType_t status;
  TM_STATES TM2_state = TM_INIT;
 8001734:	2300      	movs	r3, #0
 8001736:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
  for(;;)
  {
	  switch(TM2_state)
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	2b02      	cmp	r3, #2
 800173c:	f000 8087 	beq.w	800184e <TestMode2_handler+0x122>
 8001740:	2b02      	cmp	r3, #2
 8001742:	f300 808f 	bgt.w	8001864 <TestMode2_handler+0x138>
 8001746:	2b00      	cmp	r3, #0
 8001748:	d002      	beq.n	8001750 <TestMode2_handler+0x24>
 800174a:	2b01      	cmp	r3, #1
 800174c:	d02a      	beq.n	80017a4 <TestMode2_handler+0x78>
 800174e:	e089      	b.n	8001864 <TestMode2_handler+0x138>
	  {
		  case TM_INIT:
						   status = xTaskNotifyWait(0, 0, &parameter1, pdMS_TO_TICKS(20));
 8001750:	f107 0210 	add.w	r2, r7, #16
 8001754:	2302      	movs	r3, #2
 8001756:	2100      	movs	r1, #0
 8001758:	2000      	movs	r0, #0
 800175a:	f00d fb61 	bl	800ee20 <xTaskNotifyWait>
 800175e:	61b8      	str	r0, [r7, #24]
						   if(status == pdPASS)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d17b      	bne.n	800185e <TestMode2_handler+0x132>
						   {
								resetMyCANTxData_TM2();                                                             // Resets the Tx CAN frame for a new test.
 8001766:	f000 fa6f 	bl	8001c48 <resetMyCANTxData_TM2>
								TM2_state = TM_MAIN;
 800176a:	2301      	movs	r3, #1
 800176c:	77fb      	strb	r3, [r7, #31]
								HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800176e:	2200      	movs	r2, #0
 8001770:	2101      	movs	r1, #1
 8001772:	483e      	ldr	r0, [pc, #248]	; (800186c <TestMode2_handler+0x140>)
 8001774:	f005 fb30 	bl	8006dd8 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800177e:	483b      	ldr	r0, [pc, #236]	; (800186c <TestMode2_handler+0x140>)
 8001780:	f005 fb2a 	bl	8006dd8 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2102      	movs	r1, #2
 8001788:	4839      	ldr	r0, [pc, #228]	; (8001870 <TestMode2_handler+0x144>)
 800178a:	f005 fb25 	bl	8006dd8 <HAL_GPIO_WritePin>
								expected_result = myTxData[6];
 800178e:	4b39      	ldr	r3, [pc, #228]	; (8001874 <TestMode2_handler+0x148>)
 8001790:	799b      	ldrb	r3, [r3, #6]
 8001792:	75fb      	strb	r3, [r7, #23]
								HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);                       // Send initial CAN msg to DUT to indicate START of test.
 8001794:	4a37      	ldr	r2, [pc, #220]	; (8001874 <TestMode2_handler+0x148>)
 8001796:	4938      	ldr	r1, [pc, #224]	; (8001878 <TestMode2_handler+0x14c>)
 8001798:	4838      	ldr	r0, [pc, #224]	; (800187c <TestMode2_handler+0x150>)
 800179a:	f004 fa23 	bl	8005be4 <HAL_FDCAN_AddMessageToTxFifoQ>

								status = pdFALSE;															        //Reset status flag to be ready for a new test.
 800179e:	2300      	movs	r3, #0
 80017a0:	61bb      	str	r3, [r7, #24]
						   }

						   break;
 80017a2:	e05c      	b.n	800185e <TestMode2_handler+0x132>

		  case TM_MAIN:    /*Test Case #1: HEADLIGHT TEST*/
			               status = xTaskNotifyWait(0, 0, &failure_flag, pdMS_TO_TICKS(10));                        // Wait for DUT to respond with CAN ID 0x762.
 80017a4:	f107 020c 	add.w	r2, r7, #12
 80017a8:	2301      	movs	r3, #1
 80017aa:	2100      	movs	r1, #0
 80017ac:	2000      	movs	r0, #0
 80017ae:	f00d fb37 	bl	800ee20 <xTaskNotifyWait>
 80017b2:	61b8      	str	r0, [r7, #24]
			               if(status == pdPASS)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b01      	cmp	r3, #1
 80017b8:	d153      	bne.n	8001862 <TestMode2_handler+0x136>
						   {
							   if(failure_flag != DUT_FAILURE)
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d014      	beq.n	80017ea <TestMode2_handler+0xbe>
							   {
								   HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80017c0:	2101      	movs	r1, #1
 80017c2:	482a      	ldr	r0, [pc, #168]	; (800186c <TestMode2_handler+0x140>)
 80017c4:	f005 fb21 	bl	8006e0a <HAL_GPIO_TogglePin>
								   ST7735_WriteString(50, 30, "PASS     ", Font_7x10, GREEN, BLACK);
 80017c8:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <TestMode2_handler+0x154>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	9202      	str	r2, [sp, #8]
 80017ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80017d2:	9201      	str	r2, [sp, #4]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	9200      	str	r2, [sp, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a2a      	ldr	r2, [pc, #168]	; (8001884 <TestMode2_handler+0x158>)
 80017dc:	211e      	movs	r1, #30
 80017de:	2032      	movs	r0, #50	; 0x32
 80017e0:	f7ff f9c6 	bl	8000b70 <ST7735_WriteString>
								   TM2_state = TM_CLEANUP;
 80017e4:	2302      	movs	r3, #2
 80017e6:	77fb      	strb	r3, [r7, #31]
			            		   ST7735_WriteString(0, 60, "NAK message Received", Font_7x10, YELLOW,BLACK);
								   TM2_state = TM_CLEANUP;
							   }
						   }

						   break;
 80017e8:	e03b      	b.n	8001862 <TestMode2_handler+0x136>
								   HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80017ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017ee:	481f      	ldr	r0, [pc, #124]	; (800186c <TestMode2_handler+0x140>)
 80017f0:	f005 fb0b 	bl	8006e0a <HAL_GPIO_TogglePin>
			            		   ST7735_WriteString(50, 30, "FAIL     ", Font_7x10, RED, BLACK);
 80017f4:	4b22      	ldr	r3, [pc, #136]	; (8001880 <TestMode2_handler+0x154>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	9202      	str	r2, [sp, #8]
 80017fa:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80017fe:	9201      	str	r2, [sp, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	9200      	str	r2, [sp, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a20      	ldr	r2, [pc, #128]	; (8001888 <TestMode2_handler+0x15c>)
 8001808:	211e      	movs	r1, #30
 800180a:	2032      	movs	r0, #50	; 0x32
 800180c:	f7ff f9b0 	bl	8000b70 <ST7735_WriteString>
			            		   ST7735_WriteString(0, 50, "Description:", Font_7x10, WHITE,BLACK);
 8001810:	4b1b      	ldr	r3, [pc, #108]	; (8001880 <TestMode2_handler+0x154>)
 8001812:	2200      	movs	r2, #0
 8001814:	9202      	str	r2, [sp, #8]
 8001816:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800181a:	9201      	str	r2, [sp, #4]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	9200      	str	r2, [sp, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a1a      	ldr	r2, [pc, #104]	; (800188c <TestMode2_handler+0x160>)
 8001824:	2132      	movs	r1, #50	; 0x32
 8001826:	2000      	movs	r0, #0
 8001828:	f7ff f9a2 	bl	8000b70 <ST7735_WriteString>
			            		   ST7735_WriteString(0, 60, "NAK message Received", Font_7x10, YELLOW,BLACK);
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <TestMode2_handler+0x154>)
 800182e:	2200      	movs	r2, #0
 8001830:	9202      	str	r2, [sp, #8]
 8001832:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001836:	9201      	str	r2, [sp, #4]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	9200      	str	r2, [sp, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a14      	ldr	r2, [pc, #80]	; (8001890 <TestMode2_handler+0x164>)
 8001840:	213c      	movs	r1, #60	; 0x3c
 8001842:	2000      	movs	r0, #0
 8001844:	f7ff f994 	bl	8000b70 <ST7735_WriteString>
								   TM2_state = TM_CLEANUP;
 8001848:	2302      	movs	r3, #2
 800184a:	77fb      	strb	r3, [r7, #31]
						   break;
 800184c:	e009      	b.n	8001862 <TestMode2_handler+0x136>

		  case TM_CLEANUP:
			               HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800184e:	2200      	movs	r2, #0
 8001850:	2102      	movs	r1, #2
 8001852:	4807      	ldr	r0, [pc, #28]	; (8001870 <TestMode2_handler+0x144>)
 8001854:	f005 fac0 	bl	8006dd8 <HAL_GPIO_WritePin>
			  			   TM2_state = TM_INIT;
 8001858:	2300      	movs	r3, #0
 800185a:	77fb      	strb	r3, [r7, #31]
						   break;
 800185c:	e002      	b.n	8001864 <TestMode2_handler+0x138>
						   break;
 800185e:	bf00      	nop
 8001860:	e000      	b.n	8001864 <TestMode2_handler+0x138>
						   break;
 8001862:	bf00      	nop
	  }

	  osDelay(1);
 8001864:	2001      	movs	r0, #1
 8001866:	f00a fd9e 	bl	800c3a6 <osDelay>
	  switch(TM2_state)
 800186a:	e765      	b.n	8001738 <TestMode2_handler+0xc>
 800186c:	58020400 	.word	0x58020400
 8001870:	58021000 	.word	0x58021000
 8001874:	24004c94 	.word	0x24004c94
 8001878:	24004da0 	.word	0x24004da0
 800187c:	24004ca4 	.word	0x24004ca4
 8001880:	24000000 	.word	0x24000000
 8001884:	0801c6a8 	.word	0x0801c6a8
 8001888:	0801c6b4 	.word	0x0801c6b4
 800188c:	0801c6c0 	.word	0x0801c6c0
 8001890:	0801c6e8 	.word	0x0801c6e8

08001894 <TestMode3_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestMode3_handler */
void TestMode3_handler(void *argument)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08c      	sub	sp, #48	; 0x30
 8001898:	af04      	add	r7, sp, #16
 800189a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestMode3_handler */

  uint32_t parameter1, failure_flag;
  uint8_t expected_result;
  BaseType_t status;
  TM_STATES TM3_state = TM_INIT;
 800189c:	2300      	movs	r3, #0
 800189e:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
  for(;;)
  {
	  switch(TM3_state)
 80018a0:	7ffb      	ldrb	r3, [r7, #31]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	f000 8087 	beq.w	80019b6 <TestMode3_handler+0x122>
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	f300 808f 	bgt.w	80019cc <TestMode3_handler+0x138>
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d002      	beq.n	80018b8 <TestMode3_handler+0x24>
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d02a      	beq.n	800190c <TestMode3_handler+0x78>
 80018b6:	e089      	b.n	80019cc <TestMode3_handler+0x138>
	  {
		  case TM_INIT:
			            status = xTaskNotifyWait(0, 0, &parameter1, pdMS_TO_TICKS(20));
 80018b8:	f107 0210 	add.w	r2, r7, #16
 80018bc:	2302      	movs	r3, #2
 80018be:	2100      	movs	r1, #0
 80018c0:	2000      	movs	r0, #0
 80018c2:	f00d faad 	bl	800ee20 <xTaskNotifyWait>
 80018c6:	61b8      	str	r0, [r7, #24]
					    if(status == pdPASS)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d17b      	bne.n	80019c6 <TestMode3_handler+0x132>
					    {
							resetMyCANTxData_TM3();                                                             // Resets the Tx CAN frame for a new test.
 80018ce:	f000 f9dd 	bl	8001c8c <resetMyCANTxData_TM3>
							TM3_state = TM_MAIN;
 80018d2:	2301      	movs	r3, #1
 80018d4:	77fb      	strb	r3, [r7, #31]
							HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80018d6:	2200      	movs	r2, #0
 80018d8:	2101      	movs	r1, #1
 80018da:	483e      	ldr	r0, [pc, #248]	; (80019d4 <TestMode3_handler+0x140>)
 80018dc:	f005 fa7c 	bl	8006dd8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80018e0:	2200      	movs	r2, #0
 80018e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80018e6:	483b      	ldr	r0, [pc, #236]	; (80019d4 <TestMode3_handler+0x140>)
 80018e8:	f005 fa76 	bl	8006dd8 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80018ec:	2200      	movs	r2, #0
 80018ee:	2102      	movs	r1, #2
 80018f0:	4839      	ldr	r0, [pc, #228]	; (80019d8 <TestMode3_handler+0x144>)
 80018f2:	f005 fa71 	bl	8006dd8 <HAL_GPIO_WritePin>
							expected_result = myTxData[6];
 80018f6:	4b39      	ldr	r3, [pc, #228]	; (80019dc <TestMode3_handler+0x148>)
 80018f8:	799b      	ldrb	r3, [r3, #6]
 80018fa:	75fb      	strb	r3, [r7, #23]
							HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);                       // Send initial CAN msg to DUT to indicate START of test.
 80018fc:	4a37      	ldr	r2, [pc, #220]	; (80019dc <TestMode3_handler+0x148>)
 80018fe:	4938      	ldr	r1, [pc, #224]	; (80019e0 <TestMode3_handler+0x14c>)
 8001900:	4838      	ldr	r0, [pc, #224]	; (80019e4 <TestMode3_handler+0x150>)
 8001902:	f004 f96f 	bl	8005be4 <HAL_FDCAN_AddMessageToTxFifoQ>

							status = pdFALSE;															        //Reset status flag to be ready for a new test.
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
					    }

			            break;
 800190a:	e05c      	b.n	80019c6 <TestMode3_handler+0x132>

		  case TM_MAIN:    /*Test Case #3: HAZARD LIGHTS TEST*/
						   status = xTaskNotifyWait(0, 0, &failure_flag, pdMS_TO_TICKS(10));                        // Wait for DUT to respond with CAN ID 0x762.
 800190c:	f107 020c 	add.w	r2, r7, #12
 8001910:	2301      	movs	r3, #1
 8001912:	2100      	movs	r1, #0
 8001914:	2000      	movs	r0, #0
 8001916:	f00d fa83 	bl	800ee20 <xTaskNotifyWait>
 800191a:	61b8      	str	r0, [r7, #24]
						   if(status == pdPASS)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d153      	bne.n	80019ca <TestMode3_handler+0x136>
						   {
							   if(failure_flag != DUT_FAILURE)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b02      	cmp	r3, #2
 8001926:	d014      	beq.n	8001952 <TestMode3_handler+0xbe>
							   {
								   HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001928:	2101      	movs	r1, #1
 800192a:	482a      	ldr	r0, [pc, #168]	; (80019d4 <TestMode3_handler+0x140>)
 800192c:	f005 fa6d 	bl	8006e0a <HAL_GPIO_TogglePin>
								   ST7735_WriteString(50, 30, "PASS     ", Font_7x10, GREEN, BLACK);
 8001930:	4b2d      	ldr	r3, [pc, #180]	; (80019e8 <TestMode3_handler+0x154>)
 8001932:	2200      	movs	r2, #0
 8001934:	9202      	str	r2, [sp, #8]
 8001936:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800193a:	9201      	str	r2, [sp, #4]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	9200      	str	r2, [sp, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2a      	ldr	r2, [pc, #168]	; (80019ec <TestMode3_handler+0x158>)
 8001944:	211e      	movs	r1, #30
 8001946:	2032      	movs	r0, #50	; 0x32
 8001948:	f7ff f912 	bl	8000b70 <ST7735_WriteString>
								   TM3_state = TM_CLEANUP;
 800194c:	2302      	movs	r3, #2
 800194e:	77fb      	strb	r3, [r7, #31]
			            		   ST7735_WriteString(0, 60, "NAK message Received", Font_7x10, YELLOW,BLACK);
								   TM3_state = TM_CLEANUP;
							   }
						   }

			               break;
 8001950:	e03b      	b.n	80019ca <TestMode3_handler+0x136>
								   HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001952:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001956:	481f      	ldr	r0, [pc, #124]	; (80019d4 <TestMode3_handler+0x140>)
 8001958:	f005 fa57 	bl	8006e0a <HAL_GPIO_TogglePin>
			            		   ST7735_WriteString(50, 30, "FAIL     ", Font_7x10, RED, BLACK);
 800195c:	4b22      	ldr	r3, [pc, #136]	; (80019e8 <TestMode3_handler+0x154>)
 800195e:	2200      	movs	r2, #0
 8001960:	9202      	str	r2, [sp, #8]
 8001962:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001966:	9201      	str	r2, [sp, #4]
 8001968:	685a      	ldr	r2, [r3, #4]
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <TestMode3_handler+0x15c>)
 8001970:	211e      	movs	r1, #30
 8001972:	2032      	movs	r0, #50	; 0x32
 8001974:	f7ff f8fc 	bl	8000b70 <ST7735_WriteString>
			            		   ST7735_WriteString(0, 50, "Description:", Font_7x10, WHITE,BLACK);
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <TestMode3_handler+0x154>)
 800197a:	2200      	movs	r2, #0
 800197c:	9202      	str	r2, [sp, #8]
 800197e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001982:	9201      	str	r2, [sp, #4]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <TestMode3_handler+0x160>)
 800198c:	2132      	movs	r1, #50	; 0x32
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff f8ee 	bl	8000b70 <ST7735_WriteString>
			            		   ST7735_WriteString(0, 60, "NAK message Received", Font_7x10, YELLOW,BLACK);
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <TestMode3_handler+0x154>)
 8001996:	2200      	movs	r2, #0
 8001998:	9202      	str	r2, [sp, #8]
 800199a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800199e:	9201      	str	r2, [sp, #4]
 80019a0:	685a      	ldr	r2, [r3, #4]
 80019a2:	9200      	str	r2, [sp, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <TestMode3_handler+0x164>)
 80019a8:	213c      	movs	r1, #60	; 0x3c
 80019aa:	2000      	movs	r0, #0
 80019ac:	f7ff f8e0 	bl	8000b70 <ST7735_WriteString>
								   TM3_state = TM_CLEANUP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	77fb      	strb	r3, [r7, #31]
			               break;
 80019b4:	e009      	b.n	80019ca <TestMode3_handler+0x136>

		  case TM_CLEANUP:
			               HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2102      	movs	r1, #2
 80019ba:	4807      	ldr	r0, [pc, #28]	; (80019d8 <TestMode3_handler+0x144>)
 80019bc:	f005 fa0c 	bl	8006dd8 <HAL_GPIO_WritePin>
			               TM3_state = TM_INIT;
 80019c0:	2300      	movs	r3, #0
 80019c2:	77fb      	strb	r3, [r7, #31]
			               break;
 80019c4:	e002      	b.n	80019cc <TestMode3_handler+0x138>
			            break;
 80019c6:	bf00      	nop
 80019c8:	e000      	b.n	80019cc <TestMode3_handler+0x138>
			               break;
 80019ca:	bf00      	nop
	  }

    osDelay(1);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f00a fcea 	bl	800c3a6 <osDelay>
	  switch(TM3_state)
 80019d2:	e765      	b.n	80018a0 <TestMode3_handler+0xc>
 80019d4:	58020400 	.word	0x58020400
 80019d8:	58021000 	.word	0x58021000
 80019dc:	24004c94 	.word	0x24004c94
 80019e0:	24004da0 	.word	0x24004da0
 80019e4:	24004ca4 	.word	0x24004ca4
 80019e8:	24000000 	.word	0x24000000
 80019ec:	0801c6a8 	.word	0x0801c6a8
 80019f0:	0801c6b4 	.word	0x0801c6b4
 80019f4:	0801c6c0 	.word	0x0801c6c0
 80019f8:	0801c6e8 	.word	0x0801c6e8

080019fc <CAN_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_CAN_handler */
void CAN_handler(void *argument)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b084      	sub	sp, #16
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t failure_flag;

  /* Infinite loop */
  for(;;)
  {
	  status = xTaskNotifyWait(0, 0, &failure_flag, pdMS_TO_TICKS(10));   // Notification comes from HAL_FDCAN_RxFifo0Callback within fdcan.c
 8001a04:	f107 0208 	add.w	r2, r7, #8
 8001a08:	2301      	movs	r3, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f00d fa07 	bl	800ee20 <xTaskNotifyWait>
 8001a12:	60f8      	str	r0, [r7, #12]

	  if(status == pdPASS)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d130      	bne.n	8001a7c <CAN_handler+0x80>
	  {
		  switch(current_test_mode)
 8001a1a:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <CAN_handler+0x8c>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d82c      	bhi.n	8001a7e <CAN_handler+0x82>
 8001a24:	a201      	add	r2, pc, #4	; (adr r2, 8001a2c <CAN_handler+0x30>)
 8001a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a2a:	bf00      	nop
 8001a2c:	08001a3d 	.word	0x08001a3d
 8001a30:	08001a4d 	.word	0x08001a4d
 8001a34:	08001a5d 	.word	0x08001a5d
 8001a38:	08001a6d 	.word	0x08001a6d
		  {
		  	  case TEST_MODE_1:   xTaskNotify((TaskHandle_t)TestMode1Handle, failure_flag, eSetValueWithOverwrite);  break;
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <CAN_handler+0x90>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	2300      	movs	r3, #0
 8001a44:	2203      	movs	r2, #3
 8001a46:	f00d fa4b 	bl	800eee0 <xTaskGenericNotify>
 8001a4a:	e018      	b.n	8001a7e <CAN_handler+0x82>
		  	  case TEST_MODE_2:   xTaskNotify((TaskHandle_t)TestMode2Handle, failure_flag, eSetValueWithOverwrite);  break;
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <CAN_handler+0x94>)
 8001a4e:	6818      	ldr	r0, [r3, #0]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	2300      	movs	r3, #0
 8001a54:	2203      	movs	r2, #3
 8001a56:	f00d fa43 	bl	800eee0 <xTaskGenericNotify>
 8001a5a:	e010      	b.n	8001a7e <CAN_handler+0x82>
		  	  case TEST_MODE_3:   xTaskNotify((TaskHandle_t)TestMode3Handle, failure_flag, eSetValueWithOverwrite);  break;
 8001a5c:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <CAN_handler+0x98>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	68b9      	ldr	r1, [r7, #8]
 8001a62:	2300      	movs	r3, #0
 8001a64:	2203      	movs	r2, #3
 8001a66:	f00d fa3b 	bl	800eee0 <xTaskGenericNotify>
 8001a6a:	e008      	b.n	8001a7e <CAN_handler+0x82>
		  	  case TEST_MODE_4:   xTaskNotify((TaskHandle_t)TestMode4Handle, failure_flag, eSetValueWithOverwrite);  break;
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <CAN_handler+0x9c>)
 8001a6e:	6818      	ldr	r0, [r3, #0]
 8001a70:	68b9      	ldr	r1, [r7, #8]
 8001a72:	2300      	movs	r3, #0
 8001a74:	2203      	movs	r2, #3
 8001a76:	f00d fa33 	bl	800eee0 <xTaskGenericNotify>
 8001a7a:	e000      	b.n	8001a7e <CAN_handler+0x82>
		  }
	  }
 8001a7c:	bf00      	nop

      osDelay(1);
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f00a fc91 	bl	800c3a6 <osDelay>
	  status = xTaskNotifyWait(0, 0, &failure_flag, pdMS_TO_TICKS(10));   // Notification comes from HAL_FDCAN_RxFifo0Callback within fdcan.c
 8001a84:	e7be      	b.n	8001a04 <CAN_handler+0x8>
 8001a86:	bf00      	nop
 8001a88:	240000bc 	.word	0x240000bc
 8001a8c:	24004e08 	.word	0x24004e08
 8001a90:	24004e00 	.word	0x24004e00
 8001a94:	24004dfc 	.word	0x24004dfc
 8001a98:	24004df4 	.word	0x24004df4

08001a9c <TestMode4_handler>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TestMode4_handler */
void TestMode4_handler(void *argument)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08c      	sub	sp, #48	; 0x30
 8001aa0:	af04      	add	r7, sp, #16
 8001aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TestMode4_handler */
  uint32_t parameter1, failure_flag;
  uint8_t expected_result;
  BaseType_t status;
  TM_STATES TM4_state = TM_INIT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	77fb      	strb	r3, [r7, #31]

  /* Infinite loop */
  for(;;)
  {
	  switch(TM4_state)
 8001aa8:	7ffb      	ldrb	r3, [r7, #31]
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	f000 8087 	beq.w	8001bbe <TestMode4_handler+0x122>
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	f300 808f 	bgt.w	8001bd4 <TestMode4_handler+0x138>
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <TestMode4_handler+0x24>
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d02a      	beq.n	8001b14 <TestMode4_handler+0x78>
 8001abe:	e089      	b.n	8001bd4 <TestMode4_handler+0x138>
	  {
		  case TM_INIT:     status = xTaskNotifyWait(0, 0, &parameter1, pdMS_TO_TICKS(20));
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f00d f9a9 	bl	800ee20 <xTaskNotifyWait>
 8001ace:	61b8      	str	r0, [r7, #24]
							if(status == pdPASS)
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d17b      	bne.n	8001bce <TestMode4_handler+0x132>
							{
								resetMyCANTxData_TM4();                                                             // Resets the Tx CAN frame for a new test.
 8001ad6:	f000 f8fb 	bl	8001cd0 <resetMyCANTxData_TM4>
								TM4_state = TM_MAIN;
 8001ada:	2301      	movs	r3, #1
 8001adc:	77fb      	strb	r3, [r7, #31]
								HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2101      	movs	r1, #1
 8001ae2:	483e      	ldr	r0, [pc, #248]	; (8001bdc <TestMode4_handler+0x140>)
 8001ae4:	f005 f978 	bl	8006dd8 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001aee:	483b      	ldr	r0, [pc, #236]	; (8001bdc <TestMode4_handler+0x140>)
 8001af0:	f005 f972 	bl	8006dd8 <HAL_GPIO_WritePin>
								HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001af4:	2200      	movs	r2, #0
 8001af6:	2102      	movs	r1, #2
 8001af8:	4839      	ldr	r0, [pc, #228]	; (8001be0 <TestMode4_handler+0x144>)
 8001afa:	f005 f96d 	bl	8006dd8 <HAL_GPIO_WritePin>
								expected_result = myTxData[6];
 8001afe:	4b39      	ldr	r3, [pc, #228]	; (8001be4 <TestMode4_handler+0x148>)
 8001b00:	799b      	ldrb	r3, [r3, #6]
 8001b02:	75fb      	strb	r3, [r7, #23]
								HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);                       // Send initial CAN msg to DUT to indicate START of test.
 8001b04:	4a37      	ldr	r2, [pc, #220]	; (8001be4 <TestMode4_handler+0x148>)
 8001b06:	4938      	ldr	r1, [pc, #224]	; (8001be8 <TestMode4_handler+0x14c>)
 8001b08:	4838      	ldr	r0, [pc, #224]	; (8001bec <TestMode4_handler+0x150>)
 8001b0a:	f004 f86b 	bl	8005be4 <HAL_FDCAN_AddMessageToTxFifoQ>

								status = pdFALSE;															        //Reset status flag to be ready for a new test.
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61bb      	str	r3, [r7, #24]
							}

					   	    break;
 8001b12:	e05c      	b.n	8001bce <TestMode4_handler+0x132>

		  case TM_MAIN:    /*Test Case #4: ENGINE STATUS TEST*/
						   status = xTaskNotifyWait(0, 0, &failure_flag, pdMS_TO_TICKS(10));                        // Wait for DUT to respond with CAN ID 0x762.
 8001b14:	f107 020c 	add.w	r2, r7, #12
 8001b18:	2301      	movs	r3, #1
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f00d f97f 	bl	800ee20 <xTaskNotifyWait>
 8001b22:	61b8      	str	r0, [r7, #24]
						   if(status == pdPASS)
 8001b24:	69bb      	ldr	r3, [r7, #24]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d153      	bne.n	8001bd2 <TestMode4_handler+0x136>
						   {
							   if(failure_flag != DUT_FAILURE)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d014      	beq.n	8001b5a <TestMode4_handler+0xbe>
							   {
								   HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 8001b30:	2101      	movs	r1, #1
 8001b32:	482a      	ldr	r0, [pc, #168]	; (8001bdc <TestMode4_handler+0x140>)
 8001b34:	f005 f969 	bl	8006e0a <HAL_GPIO_TogglePin>
								   ST7735_WriteString(50, 30, "PASS     ", Font_7x10, GREEN, BLACK);
 8001b38:	4b2d      	ldr	r3, [pc, #180]	; (8001bf0 <TestMode4_handler+0x154>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	9202      	str	r2, [sp, #8]
 8001b3e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001b42:	9201      	str	r2, [sp, #4]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	9200      	str	r2, [sp, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a2a      	ldr	r2, [pc, #168]	; (8001bf4 <TestMode4_handler+0x158>)
 8001b4c:	211e      	movs	r1, #30
 8001b4e:	2032      	movs	r0, #50	; 0x32
 8001b50:	f7ff f80e 	bl	8000b70 <ST7735_WriteString>
								   TM4_state = TM_CLEANUP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	77fb      	strb	r3, [r7, #31]
			            		   ST7735_WriteString(0, 60, "NAK message Received", Font_7x10, YELLOW,BLACK);
								   TM4_state = TM_CLEANUP;
							   }
						   }

					   	   break;
 8001b58:	e03b      	b.n	8001bd2 <TestMode4_handler+0x136>
								   HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b5e:	481f      	ldr	r0, [pc, #124]	; (8001bdc <TestMode4_handler+0x140>)
 8001b60:	f005 f953 	bl	8006e0a <HAL_GPIO_TogglePin>
			            		   ST7735_WriteString(50, 30, "FAIL     ", Font_7x10, RED, BLACK);
 8001b64:	4b22      	ldr	r3, [pc, #136]	; (8001bf0 <TestMode4_handler+0x154>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	9202      	str	r2, [sp, #8]
 8001b6a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001b6e:	9201      	str	r2, [sp, #4]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	9200      	str	r2, [sp, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <TestMode4_handler+0x15c>)
 8001b78:	211e      	movs	r1, #30
 8001b7a:	2032      	movs	r0, #50	; 0x32
 8001b7c:	f7fe fff8 	bl	8000b70 <ST7735_WriteString>
			            		   ST7735_WriteString(0, 50, "Description:", Font_7x10, WHITE,BLACK);
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <TestMode4_handler+0x154>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	9202      	str	r2, [sp, #8]
 8001b86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b8a:	9201      	str	r2, [sp, #4]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	9200      	str	r2, [sp, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a1a      	ldr	r2, [pc, #104]	; (8001bfc <TestMode4_handler+0x160>)
 8001b94:	2132      	movs	r1, #50	; 0x32
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7fe ffea 	bl	8000b70 <ST7735_WriteString>
			            		   ST7735_WriteString(0, 60, "NAK message Received", Font_7x10, YELLOW,BLACK);
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <TestMode4_handler+0x154>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	9202      	str	r2, [sp, #8]
 8001ba2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001ba6:	9201      	str	r2, [sp, #4]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	9200      	str	r2, [sp, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a14      	ldr	r2, [pc, #80]	; (8001c00 <TestMode4_handler+0x164>)
 8001bb0:	213c      	movs	r1, #60	; 0x3c
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f7fe ffdc 	bl	8000b70 <ST7735_WriteString>
								   TM4_state = TM_CLEANUP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	77fb      	strb	r3, [r7, #31]
					   	   break;
 8001bbc:	e009      	b.n	8001bd2 <TestMode4_handler+0x136>

		  case TM_CLEANUP: HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2102      	movs	r1, #2
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <TestMode4_handler+0x144>)
 8001bc4:	f005 f908 	bl	8006dd8 <HAL_GPIO_WritePin>
          	  	  	  	   TM4_state = TM_INIT;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	77fb      	strb	r3, [r7, #31]
						   break;
 8001bcc:	e002      	b.n	8001bd4 <TestMode4_handler+0x138>
					   	    break;
 8001bce:	bf00      	nop
 8001bd0:	e000      	b.n	8001bd4 <TestMode4_handler+0x138>
					   	   break;
 8001bd2:	bf00      	nop
	  }

    osDelay(1);
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	f00a fbe6 	bl	800c3a6 <osDelay>
	  switch(TM4_state)
 8001bda:	e765      	b.n	8001aa8 <TestMode4_handler+0xc>
 8001bdc:	58020400 	.word	0x58020400
 8001be0:	58021000 	.word	0x58021000
 8001be4:	24004c94 	.word	0x24004c94
 8001be8:	24004da0 	.word	0x24004da0
 8001bec:	24004ca4 	.word	0x24004ca4
 8001bf0:	24000000 	.word	0x24000000
 8001bf4:	0801c6a8 	.word	0x0801c6a8
 8001bf8:	0801c6b4 	.word	0x0801c6b4
 8001bfc:	0801c6c0 	.word	0x0801c6c0
 8001c00:	0801c6e8 	.word	0x0801c6e8

08001c04 <resetMyCANTxData_TM1>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void resetMyCANTxData_TM1(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
	myTxData[0] = 0x05;
 8001c08:	4b0e      	ldr	r3, [pc, #56]	; (8001c44 <resetMyCANTxData_TM1+0x40>)
 8001c0a:	2205      	movs	r2, #5
 8001c0c:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x22;
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <resetMyCANTxData_TM1+0x40>)
 8001c10:	2222      	movs	r2, #34	; 0x22
 8001c12:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFE;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <resetMyCANTxData_TM1+0x40>)
 8001c16:	22fe      	movs	r2, #254	; 0xfe
 8001c18:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x01;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <resetMyCANTxData_TM1+0x40>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0x01;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <resetMyCANTxData_TM1+0x40>)
 8001c22:	2201      	movs	r2, #1
 8001c24:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <resetMyCANTxData_TM1+0x40>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0x00;
 8001c2c:	4b05      	ldr	r3, [pc, #20]	; (8001c44 <resetMyCANTxData_TM1+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8001c32:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <resetMyCANTxData_TM1+0x40>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	71da      	strb	r2, [r3, #7]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	24004c94 	.word	0x24004c94

08001c48 <resetMyCANTxData_TM2>:

void resetMyCANTxData_TM2(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
	myTxData[0] = 0x05;
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <resetMyCANTxData_TM2+0x40>)
 8001c4e:	2205      	movs	r2, #5
 8001c50:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x22;
 8001c52:	4b0d      	ldr	r3, [pc, #52]	; (8001c88 <resetMyCANTxData_TM2+0x40>)
 8001c54:	2222      	movs	r2, #34	; 0x22
 8001c56:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFE;
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <resetMyCANTxData_TM2+0x40>)
 8001c5a:	22fe      	movs	r2, #254	; 0xfe
 8001c5c:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x02;
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	; (8001c88 <resetMyCANTxData_TM2+0x40>)
 8001c60:	2202      	movs	r2, #2
 8001c62:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0x01;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <resetMyCANTxData_TM2+0x40>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <resetMyCANTxData_TM2+0x40>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0x00;
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <resetMyCANTxData_TM2+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <resetMyCANTxData_TM2+0x40>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	71da      	strb	r2, [r3, #7]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	24004c94 	.word	0x24004c94

08001c8c <resetMyCANTxData_TM3>:

void resetMyCANTxData_TM3(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
	myTxData[0] = 0x05;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <resetMyCANTxData_TM3+0x40>)
 8001c92:	2205      	movs	r2, #5
 8001c94:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x22;
 8001c96:	4b0d      	ldr	r3, [pc, #52]	; (8001ccc <resetMyCANTxData_TM3+0x40>)
 8001c98:	2222      	movs	r2, #34	; 0x22
 8001c9a:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFE;
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <resetMyCANTxData_TM3+0x40>)
 8001c9e:	22fe      	movs	r2, #254	; 0xfe
 8001ca0:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x03;
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <resetMyCANTxData_TM3+0x40>)
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0x01;
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <resetMyCANTxData_TM3+0x40>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <resetMyCANTxData_TM3+0x40>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0x00;
 8001cb4:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <resetMyCANTxData_TM3+0x40>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8001cba:	4b04      	ldr	r3, [pc, #16]	; (8001ccc <resetMyCANTxData_TM3+0x40>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	71da      	strb	r2, [r3, #7]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	24004c94 	.word	0x24004c94

08001cd0 <resetMyCANTxData_TM4>:

void resetMyCANTxData_TM4(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
	myTxData[0] = 0x05;
 8001cd4:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <resetMyCANTxData_TM4+0x40>)
 8001cd6:	2205      	movs	r2, #5
 8001cd8:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x22;
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <resetMyCANTxData_TM4+0x40>)
 8001cdc:	2222      	movs	r2, #34	; 0x22
 8001cde:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFE;
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <resetMyCANTxData_TM4+0x40>)
 8001ce2:	22fe      	movs	r2, #254	; 0xfe
 8001ce4:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x04;
 8001ce6:	4b0a      	ldr	r3, [pc, #40]	; (8001d10 <resetMyCANTxData_TM4+0x40>)
 8001ce8:	2204      	movs	r2, #4
 8001cea:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0x01;   // Enable = 0x01, Disable = 0x00
 8001cec:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <resetMyCANTxData_TM4+0x40>)
 8001cee:	2201      	movs	r2, #1
 8001cf0:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x01;
 8001cf2:	4b07      	ldr	r3, [pc, #28]	; (8001d10 <resetMyCANTxData_TM4+0x40>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0x00;
 8001cf8:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <resetMyCANTxData_TM4+0x40>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <resetMyCANTxData_TM4+0x40>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	71da      	strb	r2, [r3, #7]
}
 8001d04:	bf00      	nop
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	24004c94 	.word	0x24004c94

08001d14 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
 8001d28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d2a:	4b89      	ldr	r3, [pc, #548]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d30:	4a87      	ldr	r2, [pc, #540]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d3a:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	61bb      	str	r3, [r7, #24]
 8001d46:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d48:	4b81      	ldr	r3, [pc, #516]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d4e:	4a80      	ldr	r2, [pc, #512]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d58:	4b7d      	ldr	r3, [pc, #500]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d66:	4b7a      	ldr	r3, [pc, #488]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d6c:	4a78      	ldr	r2, [pc, #480]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d84:	4b72      	ldr	r3, [pc, #456]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8a:	4a71      	ldr	r2, [pc, #452]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da2:	4b6b      	ldr	r3, [pc, #428]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da8:	4a69      	ldr	r2, [pc, #420]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001daa:	f043 0308 	orr.w	r3, r3, #8
 8001dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db2:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	60bb      	str	r3, [r7, #8]
 8001dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001dc0:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc6:	4a62      	ldr	r2, [pc, #392]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd0:	4b5f      	ldr	r3, [pc, #380]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dde:	4b5c      	ldr	r3, [pc, #368]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de4:	4a5a      	ldr	r2, [pc, #360]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001de6:	f043 0310 	orr.w	r3, r3, #16
 8001dea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dee:	4b58      	ldr	r3, [pc, #352]	; (8001f50 <MX_GPIO_Init+0x23c>)
 8001df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	603b      	str	r3, [r7, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3|SEN_TRG_Pin, GPIO_PIN_RESET);
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f240 2109 	movw	r1, #521	; 0x209
 8001e02:	4854      	ldr	r0, [pc, #336]	; (8001f54 <MX_GPIO_Init+0x240>)
 8001e04:	f004 ffe8 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2108      	movs	r1, #8
 8001e0c:	4852      	ldr	r0, [pc, #328]	; (8001f58 <MX_GPIO_Init+0x244>)
 8001e0e:	f004 ffe3 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8001e12:	2200      	movs	r2, #0
 8001e14:	f244 0101 	movw	r1, #16385	; 0x4001
 8001e18:	4850      	ldr	r0, [pc, #320]	; (8001f5c <MX_GPIO_Init+0x248>)
 8001e1a:	f004 ffdd 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e24:	484e      	ldr	r0, [pc, #312]	; (8001f60 <MX_GPIO_Init+0x24c>)
 8001e26:	f004 ffd7 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2102      	movs	r1, #2
 8001e2e:	484d      	ldr	r0, [pc, #308]	; (8001f64 <MX_GPIO_Init+0x250>)
 8001e30:	f004 ffd2 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC3 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|SEN_TRG_Pin;
 8001e34:	f240 2309 	movw	r3, #521	; 0x209
 8001e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e46:	f107 031c 	add.w	r3, r7, #28
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	4841      	ldr	r0, [pc, #260]	; (8001f54 <MX_GPIO_Init+0x240>)
 8001e4e:	f004 fe1b 	bl	8006a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e52:	2308      	movs	r3, #8
 8001e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e56:	2301      	movs	r3, #1
 8001e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e62:	f107 031c 	add.w	r3, r7, #28
 8001e66:	4619      	mov	r1, r3
 8001e68:	483b      	ldr	r0, [pc, #236]	; (8001f58 <MX_GPIO_Init+0x244>)
 8001e6a:	f004 fe0d 	bl	8006a88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001e6e:	f244 0301 	movw	r3, #16385	; 0x4001
 8001e72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e74:	2301      	movs	r3, #1
 8001e76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e80:	f107 031c 	add.w	r3, r7, #28
 8001e84:	4619      	mov	r1, r3
 8001e86:	4835      	ldr	r0, [pc, #212]	; (8001f5c <MX_GPIO_Init+0x248>)
 8001e88:	f004 fdfe 	bl	8006a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8001e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e92:	2301      	movs	r3, #1
 8001e94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e96:	2300      	movs	r3, #0
 8001e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001e9e:	f107 031c 	add.w	r3, r7, #28
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	482e      	ldr	r0, [pc, #184]	; (8001f60 <MX_GPIO_Init+0x24c>)
 8001ea6:	f004 fdef 	bl	8006a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 031c 	add.w	r3, r7, #28
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	482a      	ldr	r0, [pc, #168]	; (8001f68 <MX_GPIO_Init+0x254>)
 8001ec0:	f004 fde2 	bl	8006a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8001ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ec8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ed2:	f107 031c 	add.w	r3, r7, #28
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	481f      	ldr	r0, [pc, #124]	; (8001f58 <MX_GPIO_Init+0x244>)
 8001eda:	f004 fdd5 	bl	8006a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 031c 	add.w	r3, r7, #28
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4817      	ldr	r0, [pc, #92]	; (8001f58 <MX_GPIO_Init+0x244>)
 8001efc:	f004 fdc4 	bl	8006a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f06:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001f0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001f10:	f107 031c 	add.w	r3, r7, #28
 8001f14:	4619      	mov	r1, r3
 8001f16:	480f      	ldr	r0, [pc, #60]	; (8001f54 <MX_GPIO_Init+0x240>)
 8001f18:	f004 fdb6 	bl	8006a88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	4619      	mov	r1, r3
 8001f32:	480c      	ldr	r0, [pc, #48]	; (8001f64 <MX_GPIO_Init+0x250>)
 8001f34:	f004 fda8 	bl	8006a88 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2105      	movs	r1, #5
 8001f3c:	2028      	movs	r0, #40	; 0x28
 8001f3e:	f001 fb1b 	bl	8003578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f42:	2028      	movs	r0, #40	; 0x28
 8001f44:	f001 fb32 	bl	80035ac <HAL_NVIC_EnableIRQ>

}
 8001f48:	bf00      	nop
 8001f4a:	3730      	adds	r7, #48	; 0x30
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	58024400 	.word	0x58024400
 8001f54:	58020800 	.word	0x58020800
 8001f58:	58020000 	.word	0x58020000
 8001f5c:	58020400 	.word	0x58020400
 8001f60:	58020c00 	.word	0x58020c00
 8001f64:	58021000 	.word	0x58021000
 8001f68:	58021800 	.word	0x58021800

08001f6c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin) /* Interrupt only for BTN1_Pin (1st button from left to right in the breadboard) */
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f7c:	d103      	bne.n	8001f86 <HAL_GPIO_EXTI_Callback+0x1a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f7e:	2101      	movs	r1, #1
 8001f80:	4803      	ldr	r0, [pc, #12]	; (8001f90 <HAL_GPIO_EXTI_Callback+0x24>)
 8001f82:	f004 ff42 	bl	8006e0a <HAL_GPIO_TogglePin>

	}

}
 8001f86:	bf00      	nop
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	58020400 	.word	0x58020400

08001f94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8001f9a:	f000 f8fd 	bl	8002198 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001f9e:	4b3f      	ldr	r3, [pc, #252]	; (800209c <main+0x108>)
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d11b      	bne.n	8001fe2 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001faa:	f3bf 8f4f 	dsb	sy
}
 8001fae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fb0:	f3bf 8f6f 	isb	sy
}
 8001fb4:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001fb6:	4b39      	ldr	r3, [pc, #228]	; (800209c <main+0x108>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001fbe:	f3bf 8f4f 	dsb	sy
}
 8001fc2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fc4:	f3bf 8f6f 	isb	sy
}
 8001fc8:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <main+0x108>)
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	4a33      	ldr	r2, [pc, #204]	; (800209c <main+0x108>)
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001fd6:	f3bf 8f4f 	dsb	sy
}
 8001fda:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001fdc:	f3bf 8f6f 	isb	sy
}
 8001fe0:	e000      	b.n	8001fe4 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001fe2:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001fe4:	4b2d      	ldr	r3, [pc, #180]	; (800209c <main+0x108>)
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d138      	bne.n	8002062 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <main+0x108>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001ff8:	f3bf 8f4f 	dsb	sy
}
 8001ffc:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001ffe:	4b27      	ldr	r3, [pc, #156]	; (800209c <main+0x108>)
 8002000:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002004:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	0b5b      	lsrs	r3, r3, #13
 800200a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800200e:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	08db      	lsrs	r3, r3, #3
 8002014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002018:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8002022:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002024:	687a      	ldr	r2, [r7, #4]
 8002026:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002028:	491c      	ldr	r1, [pc, #112]	; (800209c <main+0x108>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	1e5a      	subs	r2, r3, #1
 8002034:	607a      	str	r2, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ef      	bne.n	800201a <main+0x86>
    } while(sets-- != 0U);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	1e5a      	subs	r2, r3, #1
 800203e:	60ba      	str	r2, [r7, #8]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1e5      	bne.n	8002010 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002044:	f3bf 8f4f 	dsb	sy
}
 8002048:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <main+0x108>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	4a13      	ldr	r2, [pc, #76]	; (800209c <main+0x108>)
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002056:	f3bf 8f4f 	dsb	sy
}
 800205a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800205c:	f3bf 8f6f 	isb	sy
}
 8002060:	e000      	b.n	8002064 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002062:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002064:	f001 f93c 	bl	80032e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002068:	f000 f81a 	bl	80020a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800206c:	f7ff fe52 	bl	8001d14 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8002070:	f000 fef2 	bl	8002e58 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8002074:	f000 ffa2 	bl	8002fbc <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 8002078:	f7fe fe9a 	bl	8000db0 <MX_FDCAN1_Init>
  MX_TIM6_Init();
 800207c:	f000 fe92 	bl	8002da4 <MX_TIM6_Init>
  MX_SPI1_Init();
 8002080:	f000 f8d0 	bl	8002224 <MX_SPI1_Init>
  MX_CRC_Init();
 8002084:	f7fe fe50 	bl	8000d28 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 8002088:	f7fe ff74 	bl	8000f74 <FDCAN1_MSG_config>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800208c:	f00a f89a 	bl	800c1c4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8002090:	f7ff f836 	bl	8001100 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8002094:	f00a f8ba 	bl	800c20c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002098:	e7fe      	b.n	8002098 <main+0x104>
 800209a:	bf00      	nop
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b09c      	sub	sp, #112	; 0x70
 80020a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020aa:	224c      	movs	r2, #76	; 0x4c
 80020ac:	2100      	movs	r1, #0
 80020ae:	4618      	mov	r0, r3
 80020b0:	f019 fab1 	bl	801b616 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020b4:	1d3b      	adds	r3, r7, #4
 80020b6:	2220      	movs	r2, #32
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f019 faab 	bl	801b616 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80020c0:	2002      	movs	r0, #2
 80020c2:	f004 fed7 	bl	8006e74 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80020c6:	2300      	movs	r3, #0
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	4b31      	ldr	r3, [pc, #196]	; (8002190 <SystemClock_Config+0xf0>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020d2:	4a2f      	ldr	r2, [pc, #188]	; (8002190 <SystemClock_Config+0xf0>)
 80020d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020d8:	6193      	str	r3, [r2, #24]
 80020da:	4b2d      	ldr	r3, [pc, #180]	; (8002190 <SystemClock_Config+0xf0>)
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020e2:	603b      	str	r3, [r7, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80020e6:	bf00      	nop
 80020e8:	4b29      	ldr	r3, [pc, #164]	; (8002190 <SystemClock_Config+0xf0>)
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f4:	d1f8      	bne.n	80020e8 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80020f6:	4b27      	ldr	r3, [pc, #156]	; (8002194 <SystemClock_Config+0xf4>)
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	f023 0303 	bic.w	r3, r3, #3
 80020fe:	4a25      	ldr	r2, [pc, #148]	; (8002194 <SystemClock_Config+0xf4>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8002106:	2321      	movs	r3, #33	; 0x21
 8002108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800210a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002110:	2301      	movs	r3, #1
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002114:	2302      	movs	r3, #2
 8002116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002118:	2302      	movs	r3, #2
 800211a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800211c:	2301      	movs	r3, #1
 800211e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8002120:	2318      	movs	r3, #24
 8002122:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8002124:	2301      	movs	r3, #1
 8002126:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002128:	2302      	movs	r3, #2
 800212a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800212c:	2302      	movs	r3, #2
 800212e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002130:	230c      	movs	r3, #12
 8002132:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002134:	2300      	movs	r3, #0
 8002136:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002138:	2300      	movs	r3, #0
 800213a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800213c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002140:	4618      	mov	r0, r3
 8002142:	f004 fed1 	bl	8006ee8 <HAL_RCC_OscConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800214c:	f000 f864 	bl	8002218 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002150:	233f      	movs	r3, #63	; 0x3f
 8002152:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002154:	2303      	movs	r3, #3
 8002156:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002158:	2300      	movs	r3, #0
 800215a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800215c:	2308      	movs	r3, #8
 800215e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002160:	2340      	movs	r3, #64	; 0x40
 8002162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002164:	2340      	movs	r3, #64	; 0x40
 8002166:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800216c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800216e:	2340      	movs	r3, #64	; 0x40
 8002170:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	2101      	movs	r1, #1
 8002176:	4618      	mov	r0, r3
 8002178:	f005 fa62 	bl	8007640 <HAL_RCC_ClockConfig>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8002182:	f000 f849 	bl	8002218 <Error_Handler>
  }
}
 8002186:	bf00      	nop
 8002188:	3770      	adds	r7, #112	; 0x70
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	58024800 	.word	0x58024800
 8002194:	58024400 	.word	0x58024400

08002198 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800219e:	463b      	mov	r3, r7
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80021aa:	f001 fa0d 	bl	80035c8 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80021ae:	2301      	movs	r3, #1
 80021b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80021b2:	2300      	movs	r3, #0
 80021b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 80021b6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80021ba:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 80021bc:	230e      	movs	r3, #14
 80021be:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80021c8:	2303      	movs	r3, #3
 80021ca:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80021cc:	2301      	movs	r3, #1
 80021ce:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80021dc:	463b      	mov	r3, r7
 80021de:	4618      	mov	r0, r3
 80021e0:	f001 fa2a 	bl	8003638 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80021e4:	2004      	movs	r0, #4
 80021e6:	f001 fa07 	bl	80035f8 <HAL_MPU_Enable>

}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a04      	ldr	r2, [pc, #16]	; (8002214 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d101      	bne.n	800220a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002206:	f001 f8a7 	bl	8003358 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40010000 	.word	0x40010000

08002218 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800221c:	b672      	cpsid	i
}
 800221e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002220:	e7fe      	b.n	8002220 <Error_Handler+0x8>
	...

08002224 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <MX_SPI1_Init+0xa4>)
 800222a:	4a28      	ldr	r2, [pc, #160]	; (80022cc <MX_SPI1_Init+0xa8>)
 800222c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002230:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002238:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800223c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800223e:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002240:	2207      	movs	r2, #7
 8002242:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002244:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002246:	2200      	movs	r2, #0
 8002248:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800224a:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <MX_SPI1_Init+0xa4>)
 800224c:	2200      	movs	r2, #0
 800224e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002252:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002256:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002258:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <MX_SPI1_Init+0xa4>)
 800225a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800225e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002262:	2200      	movs	r2, #0
 8002264:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002266:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002268:	2200      	movs	r2, #0
 800226a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800226c:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <MX_SPI1_Init+0xa4>)
 800226e:	2200      	movs	r2, #0
 8002270:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002274:	2200      	movs	r2, #0
 8002276:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <MX_SPI1_Init+0xa4>)
 800227a:	2200      	movs	r2, #0
 800227c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002280:	2200      	movs	r2, #0
 8002282:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002286:	2200      	movs	r2, #0
 8002288:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_SPI1_Init+0xa4>)
 800228c:	2200      	movs	r2, #0
 800228e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002290:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002292:	2200      	movs	r2, #0
 8002294:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <MX_SPI1_Init+0xa4>)
 8002298:	2200      	movs	r2, #0
 800229a:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800229c:	4b0a      	ldr	r3, [pc, #40]	; (80022c8 <MX_SPI1_Init+0xa4>)
 800229e:	2200      	movs	r2, #0
 80022a0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_SPI1_Init+0xa4>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80022a8:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <MX_SPI1_Init+0xa4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_SPI1_Init+0xa4>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80022b4:	4804      	ldr	r0, [pc, #16]	; (80022c8 <MX_SPI1_Init+0xa4>)
 80022b6:	f007 f8ad 	bl	8009414 <HAL_SPI_Init>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80022c0:	f7ff ffaa 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80022c4:	bf00      	nop
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	24004e0c 	.word	0x24004e0c
 80022cc:	40013000 	.word	0x40013000

080022d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0b8      	sub	sp, #224	; 0xe0
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f107 0318 	add.w	r3, r7, #24
 80022ec:	22b4      	movs	r2, #180	; 0xb4
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f019 f990 	bl	801b616 <memset>
  if(spiHandle->Instance==SPI1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a36      	ldr	r2, [pc, #216]	; (80023d4 <HAL_SPI_MspInit+0x104>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d165      	bne.n	80023cc <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8002300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002304:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002306:	2300      	movs	r3, #0
 8002308:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	4618      	mov	r0, r3
 8002310:	f005 fd64 	bl	8007ddc <HAL_RCCEx_PeriphCLKConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800231a:	f7ff ff7d 	bl	8002218 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800231e:	4b2e      	ldr	r3, [pc, #184]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 8002320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002324:	4a2c      	ldr	r2, [pc, #176]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 8002326:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800232a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800232e:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 8002330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 800233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002342:	4a25      	ldr	r2, [pc, #148]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 8002344:	f043 0301 	orr.w	r3, r3, #1
 8002348:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800234c:	4b22      	ldr	r3, [pc, #136]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 800234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 800235c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002360:	4a1d      	ldr	r2, [pc, #116]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800236a:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <HAL_SPI_MspInit+0x108>)
 800236c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002370:	f003 0308 	and.w	r3, r3, #8
 8002374:	60fb      	str	r3, [r7, #12]
 8002376:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002378:	2320      	movs	r3, #32
 800237a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002390:	2305      	movs	r3, #5
 8002392:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002396:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800239a:	4619      	mov	r1, r3
 800239c:	480f      	ldr	r0, [pc, #60]	; (80023dc <HAL_SPI_MspInit+0x10c>)
 800239e:	f004 fb73 	bl	8006a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023ba:	2305      	movs	r3, #5
 80023bc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80023c4:	4619      	mov	r1, r3
 80023c6:	4806      	ldr	r0, [pc, #24]	; (80023e0 <HAL_SPI_MspInit+0x110>)
 80023c8:	f004 fb5e 	bl	8006a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80023cc:	bf00      	nop
 80023ce:	37e0      	adds	r7, #224	; 0xe0
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40013000 	.word	0x40013000
 80023d8:	58024400 	.word	0x58024400
 80023dc:	58020000 	.word	0x58020000
 80023e0:	58020c00 	.word	0x58020c00

080023e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_MspInit+0x38>)
 80023ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023f0:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_MspInit+0x38>)
 80023f2:	f043 0302 	orr.w	r3, r3, #2
 80023f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023fa:	4b08      	ldr	r3, [pc, #32]	; (800241c <HAL_MspInit+0x38>)
 80023fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	607b      	str	r3, [r7, #4]
 8002406:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002408:	2200      	movs	r2, #0
 800240a:	210f      	movs	r1, #15
 800240c:	f06f 0001 	mvn.w	r0, #1
 8002410:	f001 f8b2 	bl	8003578 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002414:	bf00      	nop
 8002416:	3708      	adds	r7, #8
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	58024400 	.word	0x58024400

08002420 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b08e      	sub	sp, #56	; 0x38
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	d844      	bhi.n	80024b8 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 800242e:	2200      	movs	r2, #0
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	2019      	movs	r0, #25
 8002434:	f001 f8a0 	bl	8003578 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002438:	2019      	movs	r0, #25
 800243a:	f001 f8b7 	bl	80035ac <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 800243e:	4a24      	ldr	r2, [pc, #144]	; (80024d0 <HAL_InitTick+0xb0>)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002444:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_InitTick+0xb4>)
 8002446:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800244a:	4a22      	ldr	r2, [pc, #136]	; (80024d4 <HAL_InitTick+0xb4>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002454:	4b1f      	ldr	r3, [pc, #124]	; (80024d4 <HAL_InitTick+0xb4>)
 8002456:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002462:	f107 020c 	add.w	r2, r7, #12
 8002466:	f107 0310 	add.w	r3, r7, #16
 800246a:	4611      	mov	r1, r2
 800246c:	4618      	mov	r0, r3
 800246e:	f005 fc73 	bl	8007d58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002472:	f005 fc5b 	bl	8007d2c <HAL_RCC_GetPCLK2Freq>
 8002476:	4603      	mov	r3, r0
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800247c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <HAL_InitTick+0xb8>)
 8002480:	fba2 2303 	umull	r2, r3, r2, r3
 8002484:	0c9b      	lsrs	r3, r3, #18
 8002486:	3b01      	subs	r3, #1
 8002488:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <HAL_InitTick+0xbc>)
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <HAL_InitTick+0xc0>)
 800248e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002490:	4b12      	ldr	r3, [pc, #72]	; (80024dc <HAL_InitTick+0xbc>)
 8002492:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002496:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002498:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_InitTick+0xbc>)
 800249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800249c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <HAL_InitTick+0xbc>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <HAL_InitTick+0xbc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80024aa:	480c      	ldr	r0, [pc, #48]	; (80024dc <HAL_InitTick+0xbc>)
 80024ac:	f007 fb93 	bl	8009bd6 <HAL_TIM_Base_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d107      	bne.n	80024c6 <HAL_InitTick+0xa6>
 80024b6:	e001      	b.n	80024bc <HAL_InitTick+0x9c>
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e005      	b.n	80024c8 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80024bc:	4807      	ldr	r0, [pc, #28]	; (80024dc <HAL_InitTick+0xbc>)
 80024be:	f007 fbe1 	bl	8009c84 <HAL_TIM_Base_Start_IT>
 80024c2:	4603      	mov	r3, r0
 80024c4:	e000      	b.n	80024c8 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3738      	adds	r7, #56	; 0x38
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	24000010 	.word	0x24000010
 80024d4:	58024400 	.word	0x58024400
 80024d8:	431bde83 	.word	0x431bde83
 80024dc:	24004e94 	.word	0x24004e94
 80024e0:	40010000 	.word	0x40010000

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80024e8:	e7fe      	b.n	80024e8 <NMI_Handler+0x4>

080024ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ea:	b480      	push	{r7}
 80024ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ee:	e7fe      	b.n	80024ee <HardFault_Handler+0x4>

080024f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024f4:	e7fe      	b.n	80024f4 <MemManage_Handler+0x4>

080024f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024fa:	e7fe      	b.n	80024fa <BusFault_Handler+0x4>

080024fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002500:	e7fe      	b.n	8002500 <UsageFault_Handler+0x4>

08002502 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002506:	bf00      	nop
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002514:	4802      	ldr	r0, [pc, #8]	; (8002520 <FDCAN1_IT0_IRQHandler+0x10>)
 8002516:	f003 fda9 	bl	800606c <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800251a:	bf00      	nop
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	24004ca4 	.word	0x24004ca4

08002524 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002528:	4802      	ldr	r0, [pc, #8]	; (8002534 <TIM1_UP_IRQHandler+0x10>)
 800252a:	f007 fc31 	bl	8009d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	24004e94 	.word	0x24004e94

08002538 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_PWR_EN_Pin);
 800253c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002540:	f004 fc7d 	bl	8006e3e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002544:	bf00      	nop
 8002546:	bd80      	pop	{r7, pc}

08002548 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800254c:	4802      	ldr	r0, [pc, #8]	; (8002558 <ETH_IRQHandler+0x10>)
 800254e:	f001 fe7b 	bl	8004248 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002552:	bf00      	nop
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2400511c 	.word	0x2400511c

0800255c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
	return 1;
 8002560:	2301      	movs	r3, #1
}
 8002562:	4618      	mov	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_kill>:

int _kill(int pid, int sig)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <_kill+0x20>)
 8002578:	2216      	movs	r2, #22
 800257a:	601a      	str	r2, [r3, #0]
	return -1;
 800257c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002580:	4618      	mov	r0, r3
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	240082f8 	.word	0x240082f8

08002590 <_exit>:

void _exit (int status)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002598:	f04f 31ff 	mov.w	r1, #4294967295
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f7ff ffe5 	bl	800256c <_kill>
	while (1) {}		/* Make sure we hang here */
 80025a2:	e7fe      	b.n	80025a2 <_exit+0x12>

080025a4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e00a      	b.n	80025cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025b6:	f3af 8000 	nop.w
 80025ba:	4601      	mov	r1, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	60ba      	str	r2, [r7, #8]
 80025c2:	b2ca      	uxtb	r2, r1
 80025c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dbf0      	blt.n	80025b6 <_read+0x12>
	}

return len;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b086      	sub	sp, #24
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	2300      	movs	r3, #0
 80025ec:	617b      	str	r3, [r7, #20]
 80025ee:	e009      	b.n	8002604 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	60ba      	str	r2, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	4618      	mov	r0, r3
 80025fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	3301      	adds	r3, #1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697a      	ldr	r2, [r7, #20]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	429a      	cmp	r2, r3
 800260a:	dbf1      	blt.n	80025f0 <_write+0x12>
	}
	return len;
 800260c:	687b      	ldr	r3, [r7, #4]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3718      	adds	r7, #24
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <_close>:

int _close(int file)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	return -1;
 800261e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002622:	4618      	mov	r0, r3
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800262e:	b480      	push	{r7}
 8002630:	b083      	sub	sp, #12
 8002632:	af00      	add	r7, sp, #0
 8002634:	6078      	str	r0, [r7, #4]
 8002636:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800263e:	605a      	str	r2, [r3, #4]
	return 0;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <_isatty>:

int _isatty(int file)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
	return 1;
 8002656:	2301      	movs	r3, #1
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002664:	b480      	push	{r7}
 8002666:	b085      	sub	sp, #20
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	return 0;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
	...

08002680 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002680:	b480      	push	{r7}
 8002682:	b087      	sub	sp, #28
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002688:	4a14      	ldr	r2, [pc, #80]	; (80026dc <_sbrk+0x5c>)
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <_sbrk+0x60>)
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800269c:	4b11      	ldr	r3, [pc, #68]	; (80026e4 <_sbrk+0x64>)
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <_sbrk+0x68>)
 80026a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026a2:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <_sbrk+0x64>)
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4413      	add	r3, r2
 80026aa:	693a      	ldr	r2, [r7, #16]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d205      	bcs.n	80026bc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80026b0:	4b0e      	ldr	r3, [pc, #56]	; (80026ec <_sbrk+0x6c>)
 80026b2:	220c      	movs	r2, #12
 80026b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026b6:	f04f 33ff 	mov.w	r3, #4294967295
 80026ba:	e009      	b.n	80026d0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <_sbrk+0x64>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <_sbrk+0x64>)
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	4a06      	ldr	r2, [pc, #24]	; (80026e4 <_sbrk+0x64>)
 80026cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026ce:	68fb      	ldr	r3, [r7, #12]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	371c      	adds	r7, #28
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr
 80026dc:	24050000 	.word	0x24050000
 80026e0:	00000400 	.word	0x00000400
 80026e4:	240000c0 	.word	0x240000c0
 80026e8:	24008310 	.word	0x24008310
 80026ec:	240082f8 	.word	0x240082f8

080026f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80026f4:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <SystemInit+0xd8>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	4a33      	ldr	r2, [pc, #204]	; (80027c8 <SystemInit+0xd8>)
 80026fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002704:	4b31      	ldr	r3, [pc, #196]	; (80027cc <SystemInit+0xdc>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 030f 	and.w	r3, r3, #15
 800270c:	2b06      	cmp	r3, #6
 800270e:	d807      	bhi.n	8002720 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002710:	4b2e      	ldr	r3, [pc, #184]	; (80027cc <SystemInit+0xdc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 030f 	bic.w	r3, r3, #15
 8002718:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <SystemInit+0xdc>)
 800271a:	f043 0307 	orr.w	r3, r3, #7
 800271e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002720:	4b2b      	ldr	r3, [pc, #172]	; (80027d0 <SystemInit+0xe0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a2a      	ldr	r2, [pc, #168]	; (80027d0 <SystemInit+0xe0>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800272c:	4b28      	ldr	r3, [pc, #160]	; (80027d0 <SystemInit+0xe0>)
 800272e:	2200      	movs	r2, #0
 8002730:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002732:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <SystemInit+0xe0>)
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4926      	ldr	r1, [pc, #152]	; (80027d0 <SystemInit+0xe0>)
 8002738:	4b26      	ldr	r3, [pc, #152]	; (80027d4 <SystemInit+0xe4>)
 800273a:	4013      	ands	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800273e:	4b23      	ldr	r3, [pc, #140]	; (80027cc <SystemInit+0xdc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0308 	and.w	r3, r3, #8
 8002746:	2b00      	cmp	r3, #0
 8002748:	d007      	beq.n	800275a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800274a:	4b20      	ldr	r3, [pc, #128]	; (80027cc <SystemInit+0xdc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 030f 	bic.w	r3, r3, #15
 8002752:	4a1e      	ldr	r2, [pc, #120]	; (80027cc <SystemInit+0xdc>)
 8002754:	f043 0307 	orr.w	r3, r3, #7
 8002758:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800275a:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <SystemInit+0xe0>)
 800275c:	2200      	movs	r2, #0
 800275e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <SystemInit+0xe0>)
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <SystemInit+0xe0>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800276c:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <SystemInit+0xe0>)
 800276e:	4a1a      	ldr	r2, [pc, #104]	; (80027d8 <SystemInit+0xe8>)
 8002770:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <SystemInit+0xe0>)
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <SystemInit+0xec>)
 8002776:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002778:	4b15      	ldr	r3, [pc, #84]	; (80027d0 <SystemInit+0xe0>)
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <SystemInit+0xf0>)
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <SystemInit+0xe0>)
 8002780:	2200      	movs	r2, #0
 8002782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002784:	4b12      	ldr	r3, [pc, #72]	; (80027d0 <SystemInit+0xe0>)
 8002786:	4a16      	ldr	r2, [pc, #88]	; (80027e0 <SystemInit+0xf0>)
 8002788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800278a:	4b11      	ldr	r3, [pc, #68]	; (80027d0 <SystemInit+0xe0>)
 800278c:	2200      	movs	r2, #0
 800278e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002790:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <SystemInit+0xe0>)
 8002792:	4a13      	ldr	r2, [pc, #76]	; (80027e0 <SystemInit+0xf0>)
 8002794:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002796:	4b0e      	ldr	r3, [pc, #56]	; (80027d0 <SystemInit+0xe0>)
 8002798:	2200      	movs	r2, #0
 800279a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <SystemInit+0xe0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <SystemInit+0xe0>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027a8:	4b09      	ldr	r3, [pc, #36]	; (80027d0 <SystemInit+0xe0>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <SystemInit+0xf4>)
 80027b0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027b4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <SystemInit+0xd8>)
 80027b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027bc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80027be:	bf00      	nop
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00
 80027cc:	52002000 	.word	0x52002000
 80027d0:	58024400 	.word	0x58024400
 80027d4:	eaf6ed7f 	.word	0xeaf6ed7f
 80027d8:	02020200 	.word	0x02020200
 80027dc:	01ff0000 	.word	0x01ff0000
 80027e0:	01010280 	.word	0x01010280
 80027e4:	52004000 	.word	0x52004000

080027e8 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 80027ee:	f011 f995 	bl	8013b1c <tcp_new>
 80027f2:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 50, 100);
 80027f4:	4b0f      	ldr	r3, [pc, #60]	; (8002834 <tcp_server_init+0x4c>)
 80027f6:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 80027f8:	1d3b      	adds	r3, r7, #4
 80027fa:	220a      	movs	r2, #10
 80027fc:	4619      	mov	r1, r3
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	f010 f8e8 	bl	80129d4 <tcp_bind>
 8002804:	4603      	mov	r3, r0
 8002806:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8002808:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8002810:	21ff      	movs	r1, #255	; 0xff
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f010 f996 	bl	8012b44 <tcp_listen_with_backlog>
 8002818:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 800281a:	4907      	ldr	r1, [pc, #28]	; (8002838 <tcp_server_init+0x50>)
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f011 f9fd 	bl	8013c1c <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8002822:	e003      	b.n	800282c <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8002824:	68f9      	ldr	r1, [r7, #12]
 8002826:	2001      	movs	r0, #1
 8002828:	f00e fc80 	bl	801112c <memp_free>
}
 800282c:	bf00      	nop
 800282e:	3710      	adds	r7, #16
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	6432a8c0 	.word	0x6432a8c0
 8002838:	0800283d 	.word	0x0800283d

0800283c <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 800284a:	2101      	movs	r1, #1
 800284c:	68b8      	ldr	r0, [r7, #8]
 800284e:	f010 ff73 	bl	8013738 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8002852:	200c      	movs	r0, #12
 8002854:	f00e fa50 	bl	8010cf8 <mem_malloc>
 8002858:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d01f      	beq.n	80028a0 <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	68ba      	ldr	r2, [r7, #8]
 800286a:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	2200      	movs	r2, #0
 8002870:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8002878:	6939      	ldr	r1, [r7, #16]
 800287a:	68b8      	ldr	r0, [r7, #8]
 800287c:	f011 f956 	bl	8013b2c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8002880:	490d      	ldr	r1, [pc, #52]	; (80028b8 <tcp_server_accept+0x7c>)
 8002882:	68b8      	ldr	r0, [r7, #8]
 8002884:	f011 f964 	bl	8013b50 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8002888:	490c      	ldr	r1, [pc, #48]	; (80028bc <tcp_server_accept+0x80>)
 800288a:	68b8      	ldr	r0, [r7, #8]
 800288c:	f011 f9a4 	bl	8013bd8 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8002890:	2200      	movs	r2, #0
 8002892:	490b      	ldr	r1, [pc, #44]	; (80028c0 <tcp_server_accept+0x84>)
 8002894:	68b8      	ldr	r0, [r7, #8]
 8002896:	f011 f9d9 	bl	8013c4c <tcp_poll>

    ret_err = ERR_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]
 800289e:	e005      	b.n	80028ac <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 80028a0:	6939      	ldr	r1, [r7, #16]
 80028a2:	68b8      	ldr	r0, [r7, #8]
 80028a4:	f000 f965 	bl	8002b72 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80028a8:	23ff      	movs	r3, #255	; 0xff
 80028aa:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80028ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	080028c5 	.word	0x080028c5
 80028bc:	080029f9 	.word	0x080029f9
 80028c0:	08002a1d 	.word	0x08002a1d

080028c4 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d105      	bne.n	80028e4 <tcp_server_recv+0x20>
 80028d8:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <tcp_server_recv+0x124>)
 80028da:	22bf      	movs	r2, #191	; 0xbf
 80028dc:	4943      	ldr	r1, [pc, #268]	; (80029ec <tcp_server_recv+0x128>)
 80028de:	4844      	ldr	r0, [pc, #272]	; (80029f0 <tcp_server_recv+0x12c>)
 80028e0:	f018 fefc 	bl	801b6dc <iprintf>

  es = (struct tcp_server_struct *)arg;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d116      	bne.n	800291c <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2203      	movs	r2, #3
 80028f2:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d104      	bne.n	8002906 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 80028fc:	69b9      	ldr	r1, [r7, #24]
 80028fe:	68b8      	ldr	r0, [r7, #8]
 8002900:	f000 f937 	bl	8002b72 <tcp_server_connection_close>
 8002904:	e007      	b.n	8002916 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8002906:	493b      	ldr	r1, [pc, #236]	; (80029f4 <tcp_server_recv+0x130>)
 8002908:	68b8      	ldr	r0, [r7, #8]
 800290a:	f011 f943 	bl	8013b94 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 800290e:	69b9      	ldr	r1, [r7, #24]
 8002910:	68b8      	ldr	r0, [r7, #8]
 8002912:	f000 f8db 	bl	8002acc <tcp_server_send>
    }
    ret_err = ERR_OK;
 8002916:	2300      	movs	r3, #0
 8002918:	77fb      	strb	r3, [r7, #31]
 800291a:	e05f      	b.n	80029dc <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 800291c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00b      	beq.n	800293c <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2200      	movs	r2, #0
 800292e:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f00f fa9f 	bl	8011e74 <pbuf_free>
    }
    ret_err = err;
 8002936:	78fb      	ldrb	r3, [r7, #3]
 8002938:	77fb      	strb	r3, [r7, #31]
 800293a:	e04f      	b.n	80029dc <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d110      	bne.n	8002966 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2202      	movs	r2, #2
 8002948:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8002950:	4928      	ldr	r1, [pc, #160]	; (80029f4 <tcp_server_recv+0x130>)
 8002952:	68b8      	ldr	r0, [r7, #8]
 8002954:	f011 f91e 	bl	8013b94 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8002958:	69b9      	ldr	r1, [r7, #24]
 800295a:	68b8      	ldr	r0, [r7, #8]
 800295c:	f000 f930 	bl	8002bc0 <tcp_server_handle>

    ret_err = ERR_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e03a      	b.n	80029dc <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d115      	bne.n	800299a <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d107      	bne.n	8002986 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 800297c:	69b9      	ldr	r1, [r7, #24]
 800297e:	68b8      	ldr	r0, [r7, #8]
 8002980:	f000 f91e 	bl	8002bc0 <tcp_server_handle>
 8002984:	e006      	b.n	8002994 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 800298c:	6879      	ldr	r1, [r7, #4]
 800298e:	6978      	ldr	r0, [r7, #20]
 8002990:	f00f fb94 	bl	80120bc <pbuf_chain>
    }
    ret_err = ERR_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	77fb      	strb	r3, [r7, #31]
 8002998:	e020      	b.n	80029dc <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d10e      	bne.n	80029c0 <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	891b      	ldrh	r3, [r3, #8]
 80029a6:	4619      	mov	r1, r3
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f010 f9e1 	bl	8012d70 <tcp_recved>
    es->p = NULL;
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f00f fa5d 	bl	8011e74 <pbuf_free>
    ret_err = ERR_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	77fb      	strb	r3, [r7, #31]
 80029be:	e00d      	b.n	80029dc <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	891b      	ldrh	r3, [r3, #8]
 80029c4:	4619      	mov	r1, r3
 80029c6:	68b8      	ldr	r0, [r7, #8]
 80029c8:	f010 f9d2 	bl	8012d70 <tcp_recved>
    es->p = NULL;
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	2200      	movs	r2, #0
 80029d0:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f00f fa4e 	bl	8011e74 <pbuf_free>
    ret_err = ERR_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 80029dc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	0801c700 	.word	0x0801c700
 80029ec:	0801c71c 	.word	0x0801c71c
 80029f0:	0801c728 	.word	0x0801c728
 80029f4:	08002a7d 	.word	0x08002a7d

080029f8 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	460b      	mov	r3, r1
 8002a02:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d002      	beq.n	8002a14 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f00d ffd8 	bl	80109c4 <mem_free>
  }
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 8002a38:	490f      	ldr	r1, [pc, #60]	; (8002a78 <tcp_server_poll+0x5c>)
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	f011 f8aa 	bl	8013b94 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 8002a40:	68b9      	ldr	r1, [r7, #8]
 8002a42:	6838      	ldr	r0, [r7, #0]
 8002a44:	f000 f842 	bl	8002acc <tcp_server_send>
 8002a48:	e007      	b.n	8002a5a <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d103      	bne.n	8002a5a <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 8002a52:	68b9      	ldr	r1, [r7, #8]
 8002a54:	6838      	ldr	r0, [r7, #0]
 8002a56:	f000 f88c 	bl	8002b72 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	e004      	b.n	8002a6a <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 8002a60:	6838      	ldr	r0, [r7, #0]
 8002a62:	f00f ffab 	bl	80129bc <tcp_abort>
    ret_err = ERR_ABRT;
 8002a66:	23f3      	movs	r3, #243	; 0xf3
 8002a68:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8002a6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	08002a7d 	.word	0x08002a7d

08002a7c <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	4613      	mov	r3, r2
 8002a88:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2200      	movs	r2, #0
 8002a92:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d008      	beq.n	8002aae <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8002a9c:	490a      	ldr	r1, [pc, #40]	; (8002ac8 <tcp_server_sent+0x4c>)
 8002a9e:	68b8      	ldr	r0, [r7, #8]
 8002aa0:	f011 f878 	bl	8013b94 <tcp_sent>
    tcp_server_send(tpcb, es);
 8002aa4:	6979      	ldr	r1, [r7, #20]
 8002aa6:	68b8      	ldr	r0, [r7, #8]
 8002aa8:	f000 f810 	bl	8002acc <tcp_server_send>
 8002aac:	e007      	b.n	8002abe <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d103      	bne.n	8002abe <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8002ab6:	6979      	ldr	r1, [r7, #20]
 8002ab8:	68b8      	ldr	r0, [r7, #8]
 8002aba:	f000 f85a 	bl	8002b72 <tcp_server_connection_close>
  }
  return ERR_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	08002a7d 	.word	0x08002a7d

08002acc <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8002ada:	e036      	b.n	8002b4a <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	6859      	ldr	r1, [r3, #4]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	895a      	ldrh	r2, [r3, #10]
 8002aea:	2301      	movs	r3, #1
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f013 ff5b 	bl	80169a8 <tcp_write>
 8002af2:	4603      	mov	r3, r0
 8002af4:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8002af6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d11d      	bne.n	8002b3a <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	895b      	ldrh	r3, [r3, #10]
 8002b02:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d004      	beq.n	8002b1e <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f00f fa51 	bl	8011fc0 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 8002b1e:	6938      	ldr	r0, [r7, #16]
 8002b20:	f00f f9a8 	bl	8011e74 <pbuf_free>
 8002b24:	4603      	mov	r3, r0
 8002b26:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 8002b28:	7b7b      	ldrb	r3, [r7, #13]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0f7      	beq.n	8002b1e <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 8002b2e:	89fb      	ldrh	r3, [r7, #14]
 8002b30:	4619      	mov	r1, r3
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f010 f91c 	bl	8012d70 <tcp_recved>
 8002b38:	e007      	b.n	8002b4a <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 8002b3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b42:	d102      	bne.n	8002b4a <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8002b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10b      	bne.n	8002b6a <tcp_server_send+0x9e>
         (es->p != NULL) &&
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d007      	beq.n	8002b6a <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	895a      	ldrh	r2, [r3, #10]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d9b8      	bls.n	8002adc <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
 8002b7a:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f010 ffd4 	bl	8013b2c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8002b84:	2100      	movs	r1, #0
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f011 f804 	bl	8013b94 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8002b8c:	2100      	movs	r1, #0
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f010 ffde 	bl	8013b50 <tcp_recv>
  tcp_err(tpcb, NULL);
 8002b94:	2100      	movs	r1, #0
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f011 f81e 	bl	8013bd8 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f011 f853 	bl	8013c4c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d002      	beq.n	8002bb2 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8002bac:	6838      	ldr	r0, [r7, #0]
 8002bae:	f00d ff09 	bl	80109c4 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f00f fe18 	bl	80127e8 <tcp_close>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <tcp_server_handle>:

/* Handle the incoming TCP Data */

void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b0a9      	sub	sp, #164	; 0xa4
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
	//struct tcp_server_struct *esTx = 0;

	/* get the Remote IP */
	inIP = tpcb->remote_ip;
 8002bca:	4a6d      	ldr	r2, [pc, #436]	; (8002d80 <tcp_server_handle+0x1c0>)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	6013      	str	r3, [r2, #0]
	inPort = tpcb->remote_port;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	8b1a      	ldrh	r2, [r3, #24]
 8002bd6:	4b6b      	ldr	r3, [pc, #428]	; (8002d84 <tcp_server_handle+0x1c4>)
 8002bd8:	801a      	strh	r2, [r3, #0]

	char strTestMode1[] = "Test_Mode_1";
 8002bda:	4a6b      	ldr	r2, [pc, #428]	; (8002d88 <tcp_server_handle+0x1c8>)
 8002bdc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8002be2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char strTestMode2[] = "Test_Mode_2";
 8002be6:	4a69      	ldr	r2, [pc, #420]	; (8002d8c <tcp_server_handle+0x1cc>)
 8002be8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002bec:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char strTestMode3[] = "Test_Mode_3";
 8002bf2:	4a67      	ldr	r2, [pc, #412]	; (8002d90 <tcp_server_handle+0x1d0>)
 8002bf4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8002bfa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	char strTestMode4[] = "Test_Mode_4";
 8002bfe:	4a65      	ldr	r2, [pc, #404]	; (8002d94 <tcp_server_handle+0x1d4>)
 8002c00:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002c04:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c06:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8002c0a:	485d      	ldr	r0, [pc, #372]	; (8002d80 <tcp_server_handle+0x1c0>)
 8002c0c:	f017 fb38 	bl	801a280 <ip4addr_ntoa>
 8002c10:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

	esTx->state = es->state;
 8002c14:	4b60      	ldr	r3, [pc, #384]	; (8002d98 <tcp_server_handle+0x1d8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	683a      	ldr	r2, [r7, #0]
 8002c1a:	7812      	ldrb	r2, [r2, #0]
 8002c1c:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 8002c1e:	4b5e      	ldr	r3, [pc, #376]	; (8002d98 <tcp_server_handle+0x1d8>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	683a      	ldr	r2, [r7, #0]
 8002c24:	6852      	ldr	r2, [r2, #4]
 8002c26:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8002c28:	4b5b      	ldr	r3, [pc, #364]	; (8002d98 <tcp_server_handle+0x1d8>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	683a      	ldr	r2, [r7, #0]
 8002c2e:	6892      	ldr	r2, [r2, #8]
 8002c30:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 8002c32:	f107 0308 	add.w	r3, r7, #8
 8002c36:	2264      	movs	r2, #100	; 0x64
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f018 fceb 	bl	801b616 <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	6859      	ldr	r1, [r3, #4]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	891b      	ldrh	r3, [r3, #8]
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	f107 0308 	add.w	r3, r7, #8
 8002c52:	4618      	mov	r0, r3
 8002c54:	f018 fe57 	bl	801b906 <strncpy>

	if(!strcmp(buf, strTestMode1))
 8002c58:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8002c5c:	f107 0308 	add.w	r3, r7, #8
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fb54 	bl	8000310 <strcmp>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <tcp_server_handle+0xbe>
		xTaskNotify((TaskHandle_t)ControllerHandle, TEST_MODE_1, eSetValueWithOverwrite);
 8002c6e:	4b4b      	ldr	r3, [pc, #300]	; (8002d9c <tcp_server_handle+0x1dc>)
 8002c70:	6818      	ldr	r0, [r3, #0]
 8002c72:	2300      	movs	r3, #0
 8002c74:	2203      	movs	r2, #3
 8002c76:	2101      	movs	r1, #1
 8002c78:	f00c f932 	bl	800eee0 <xTaskGenericNotify>
 8002c7c:	e037      	b.n	8002cee <tcp_server_handle+0x12e>

	else if(!strcmp(buf, strTestMode2))
 8002c7e:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8002c82:	f107 0308 	add.w	r3, r7, #8
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7fd fb41 	bl	8000310 <strcmp>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d107      	bne.n	8002ca4 <tcp_server_handle+0xe4>
		xTaskNotify((TaskHandle_t)ControllerHandle, TEST_MODE_2, eSetValueWithOverwrite);
 8002c94:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <tcp_server_handle+0x1dc>)
 8002c96:	6818      	ldr	r0, [r3, #0]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	f00c f91f 	bl	800eee0 <xTaskGenericNotify>
 8002ca2:	e024      	b.n	8002cee <tcp_server_handle+0x12e>

	else if(!strcmp(buf, strTestMode3))
 8002ca4:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002ca8:	f107 0308 	add.w	r3, r7, #8
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fb2e 	bl	8000310 <strcmp>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <tcp_server_handle+0x10a>
		xTaskNotify((TaskHandle_t)ControllerHandle, TEST_MODE_3, eSetValueWithOverwrite);
 8002cba:	4b38      	ldr	r3, [pc, #224]	; (8002d9c <tcp_server_handle+0x1dc>)
 8002cbc:	6818      	ldr	r0, [r3, #0]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	2103      	movs	r1, #3
 8002cc4:	f00c f90c 	bl	800eee0 <xTaskGenericNotify>
 8002cc8:	e011      	b.n	8002cee <tcp_server_handle+0x12e>

	else if(!strcmp(buf, strTestMode4))
 8002cca:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002cce:	f107 0308 	add.w	r3, r7, #8
 8002cd2:	4611      	mov	r1, r2
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7fd fb1b 	bl	8000310 <strcmp>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d106      	bne.n	8002cee <tcp_server_handle+0x12e>
		xTaskNotify((TaskHandle_t)ControllerHandle, TEST_MODE_4, eSetValueWithOverwrite);
 8002ce0:	4b2e      	ldr	r3, [pc, #184]	; (8002d9c <tcp_server_handle+0x1dc>)
 8002ce2:	6818      	ldr	r0, [r3, #0]
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	2104      	movs	r1, #4
 8002cea:	f00c f8f9 	bl	800eee0 <xTaskGenericNotify>


	strcat (buf, " Received\n");
 8002cee:	f107 0308 	add.w	r3, r7, #8
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7fd fb16 	bl	8000324 <strlen>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f107 0308 	add.w	r3, r7, #8
 8002d00:	4413      	add	r3, r2
 8002d02:	4927      	ldr	r1, [pc, #156]	; (8002da0 <tcp_server_handle+0x1e0>)
 8002d04:	461a      	mov	r2, r3
 8002d06:	460b      	mov	r3, r1
 8002d08:	cb03      	ldmia	r3!, {r0, r1}
 8002d0a:	6010      	str	r0, [r2, #0]
 8002d0c:	6051      	str	r1, [r2, #4]
 8002d0e:	8819      	ldrh	r1, [r3, #0]
 8002d10:	789b      	ldrb	r3, [r3, #2]
 8002d12:	8111      	strh	r1, [r2, #8]
 8002d14:	7293      	strb	r3, [r2, #10]

	esTx->p->payload = (void *)buf;
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <tcp_server_handle+0x1d8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f107 0208 	add.w	r2, r7, #8
 8002d20:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	891a      	ldrh	r2, [r3, #8]
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	895b      	ldrh	r3, [r3, #10]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	b29c      	uxth	r4, r3
 8002d32:	f107 0308 	add.w	r3, r7, #8
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd faf4 	bl	8000324 <strlen>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <tcp_server_handle+0x1d8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4422      	add	r2, r4
 8002d48:	b292      	uxth	r2, r2
 8002d4a:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8002d4c:	f107 0308 	add.w	r3, r7, #8
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fae7 	bl	8000324 <strlen>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b0f      	ldr	r3, [pc, #60]	; (8002d98 <tcp_server_handle+0x1d8>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	b292      	uxth	r2, r2
 8002d60:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 8002d62:	4b0d      	ldr	r3, [pc, #52]	; (8002d98 <tcp_server_handle+0x1d8>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4619      	mov	r1, r3
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7ff feaf 	bl	8002acc <tcp_server_send>

	pbuf_free(es->p);
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f00f f87e 	bl	8011e74 <pbuf_free>

}
 8002d78:	bf00      	nop
 8002d7a:	37a4      	adds	r7, #164	; 0xa4
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd90      	pop	{r4, r7, pc}
 8002d80:	24004df8 	.word	0x24004df8
 8002d84:	24004dec 	.word	0x24004dec
 8002d88:	0801c75c 	.word	0x0801c75c
 8002d8c:	0801c768 	.word	0x0801c768
 8002d90:	0801c774 	.word	0x0801c774
 8002d94:	0801c780 	.word	0x0801c780
 8002d98:	24004df0 	.word	0x24004df0
 8002d9c:	24004c64 	.word	0x24004c64
 8002da0:	0801c750 	.word	0x0801c750

08002da4 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
 8002db2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002db4:	4b15      	ldr	r3, [pc, #84]	; (8002e0c <MX_TIM6_Init+0x68>)
 8002db6:	4a16      	ldr	r2, [pc, #88]	; (8002e10 <MX_TIM6_Init+0x6c>)
 8002db8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 8002dba:	4b14      	ldr	r3, [pc, #80]	; (8002e0c <MX_TIM6_Init+0x68>)
 8002dbc:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002dc0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <MX_TIM6_Init+0x68>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002dc8:	4b10      	ldr	r3, [pc, #64]	; (8002e0c <MX_TIM6_Init+0x68>)
 8002dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dce:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	; (8002e0c <MX_TIM6_Init+0x68>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002dd6:	480d      	ldr	r0, [pc, #52]	; (8002e0c <MX_TIM6_Init+0x68>)
 8002dd8:	f006 fefd 	bl	8009bd6 <HAL_TIM_Base_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002de2:	f7ff fa19 	bl	8002218 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dea:	2300      	movs	r3, #0
 8002dec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002dee:	1d3b      	adds	r3, r7, #4
 8002df0:	4619      	mov	r1, r3
 8002df2:	4806      	ldr	r0, [pc, #24]	; (8002e0c <MX_TIM6_Init+0x68>)
 8002df4:	f007 f9ba 	bl	800a16c <HAL_TIMEx_MasterConfigSynchronization>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002dfe:	f7ff fa0b 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	24004ee0 	.word	0x24004ee0
 8002e10:	40001000 	.word	0x40001000

08002e14 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0b      	ldr	r2, [pc, #44]	; (8002e50 <HAL_TIM_Base_MspInit+0x3c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d10e      	bne.n	8002e44 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e26:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_TIM_Base_MspInit+0x40>)
 8002e28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e2c:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_TIM_Base_MspInit+0x40>)
 8002e2e:	f043 0310 	orr.w	r3, r3, #16
 8002e32:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <HAL_TIM_Base_MspInit+0x40>)
 8002e38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002e44:	bf00      	nop
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr
 8002e50:	40001000 	.word	0x40001000
 8002e54:	58024400 	.word	0x58024400

08002e58 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002e5c:	4b22      	ldr	r3, [pc, #136]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e5e:	4a23      	ldr	r2, [pc, #140]	; (8002eec <MX_USART3_UART_Init+0x94>)
 8002e60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002e62:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002e68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e70:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e76:	4b1c      	ldr	r3, [pc, #112]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e7e:	220c      	movs	r2, #12
 8002e80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e82:	4b19      	ldr	r3, [pc, #100]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ea0:	4811      	ldr	r0, [pc, #68]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002ea2:	f007 fa1d 	bl	800a2e0 <HAL_UART_Init>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002eac:	f7ff f9b4 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb0:	2100      	movs	r1, #0
 8002eb2:	480d      	ldr	r0, [pc, #52]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002eb4:	f008 fab0 	bl	800b418 <HAL_UARTEx_SetTxFifoThreshold>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002ebe:	f7ff f9ab 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4808      	ldr	r0, [pc, #32]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002ec6:	f008 fae5 	bl	800b494 <HAL_UARTEx_SetRxFifoThreshold>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002ed0:	f7ff f9a2 	bl	8002218 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ed4:	4804      	ldr	r0, [pc, #16]	; (8002ee8 <MX_USART3_UART_Init+0x90>)
 8002ed6:	f008 fa66 	bl	800b3a6 <HAL_UARTEx_DisableFifoMode>
 8002eda:	4603      	mov	r3, r0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d001      	beq.n	8002ee4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002ee0:	f7ff f99a 	bl	8002218 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ee4:	bf00      	nop
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	24004f2c 	.word	0x24004f2c
 8002eec:	40004800 	.word	0x40004800

08002ef0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b0b6      	sub	sp, #216	; 0xd8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	605a      	str	r2, [r3, #4]
 8002f02:	609a      	str	r2, [r3, #8]
 8002f04:	60da      	str	r2, [r3, #12]
 8002f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002f08:	f107 0310 	add.w	r3, r7, #16
 8002f0c:	22b4      	movs	r2, #180	; 0xb4
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f018 fb80 	bl	801b616 <memset>
  if(uartHandle->Instance==USART3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a25      	ldr	r2, [pc, #148]	; (8002fb0 <HAL_UART_MspInit+0xc0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d142      	bne.n	8002fa6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f20:	2302      	movs	r3, #2
 8002f22:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f2a:	f107 0310 	add.w	r3, r7, #16
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f004 ff54 	bl	8007ddc <HAL_RCCEx_PeriphCLKConfig>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002f3a:	f7ff f96d 	bl	8002218 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f3e:	4b1d      	ldr	r3, [pc, #116]	; (8002fb4 <HAL_UART_MspInit+0xc4>)
 8002f40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f44:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <HAL_UART_MspInit+0xc4>)
 8002f46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f4e:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_UART_MspInit+0xc4>)
 8002f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f5c:	4b15      	ldr	r3, [pc, #84]	; (8002fb4 <HAL_UART_MspInit+0xc4>)
 8002f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f62:	4a14      	ldr	r2, [pc, #80]	; (8002fb4 <HAL_UART_MspInit+0xc4>)
 8002f64:	f043 0308 	orr.w	r3, r3, #8
 8002f68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_UART_MspInit+0xc4>)
 8002f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f72:	f003 0308 	and.w	r3, r3, #8
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8002f7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f7e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002f94:	2307      	movs	r3, #7
 8002f96:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f9a:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	4805      	ldr	r0, [pc, #20]	; (8002fb8 <HAL_UART_MspInit+0xc8>)
 8002fa2:	f003 fd71 	bl	8006a88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002fa6:	bf00      	nop
 8002fa8:	37d8      	adds	r7, #216	; 0xd8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40004800 	.word	0x40004800
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	58020c00 	.word	0x58020c00

08002fbc <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002fc0:	bf00      	nop
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
	...

08002fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002fd0:	f7ff fb8e 	bl	80026f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fd6:	490d      	ldr	r1, [pc, #52]	; (800300c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fdc:	e002      	b.n	8002fe4 <LoopCopyDataInit>

08002fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fe2:	3304      	adds	r3, #4

08002fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe8:	d3f9      	bcc.n	8002fde <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002fec:	4c0a      	ldr	r4, [pc, #40]	; (8003018 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ff0:	e001      	b.n	8002ff6 <LoopFillZerobss>

08002ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff4:	3204      	adds	r2, #4

08002ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff8:	d3fb      	bcc.n	8002ff2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f018 fac9 	bl	801b590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffe:	f7fe ffc9 	bl	8001f94 <main>
  bx  lr
 8003002:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003004:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8003008:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800300c:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 8003010:	0801fe90 	.word	0x0801fe90
  ldr r2, =_sbss
 8003014:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 8003018:	2400830c 	.word	0x2400830c

0800301c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC3_IRQHandler>

0800301e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <LAN8742_RegisterBusIO+0x28>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <LAN8742_RegisterBusIO+0x28>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <LAN8742_RegisterBusIO+0x28>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d102      	bne.n	800304c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003046:	f04f 33ff 	mov.w	r3, #4294967295
 800304a:	e014      	b.n	8003076 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	689a      	ldr	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003082:	b580      	push	{r7, lr}
 8003084:	b086      	sub	sp, #24
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800308a:	2300      	movs	r3, #0
 800308c:	60fb      	str	r3, [r7, #12]
 800308e:	2300      	movs	r3, #0
 8003090:	60bb      	str	r3, [r7, #8]
 8003092:	2300      	movs	r3, #0
 8003094:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003096:	2300      	movs	r3, #0
 8003098:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d17c      	bne.n	800319c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d002      	beq.n	80030b0 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e01c      	b.n	80030f6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	f107 0208 	add.w	r2, r7, #8
 80030c4:	2112      	movs	r1, #18
 80030c6:	6978      	ldr	r0, [r7, #20]
 80030c8:	4798      	blx	r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	da03      	bge.n	80030d8 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 80030d0:	f06f 0304 	mvn.w	r3, #4
 80030d4:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 80030d6:	e00b      	b.n	80030f0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 031f 	and.w	r3, r3, #31
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d105      	bne.n	80030f0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
         break;
 80030ee:	e005      	b.n	80030fc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3301      	adds	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b1f      	cmp	r3, #31
 80030fa:	d9df      	bls.n	80030bc <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b1f      	cmp	r3, #31
 8003102:	d902      	bls.n	800310a <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003104:	f06f 0302 	mvn.w	r3, #2
 8003108:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d145      	bne.n	800319c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691b      	ldr	r3, [r3, #16]
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6810      	ldr	r0, [r2, #0]
 8003118:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800311c:	2100      	movs	r1, #0
 800311e:	4798      	blx	r3
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	db37      	blt.n	8003196 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6810      	ldr	r0, [r2, #0]
 800312e:	f107 0208 	add.w	r2, r7, #8
 8003132:	2100      	movs	r1, #0
 8003134:	4798      	blx	r3
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	db28      	blt.n	800318e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	4798      	blx	r3
 8003142:	4603      	mov	r3, r0
 8003144:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003146:	e01c      	b.n	8003182 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4798      	blx	r3
 800314e:	4603      	mov	r3, r0
 8003150:	461a      	mov	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800315a:	d80e      	bhi.n	800317a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6810      	ldr	r0, [r2, #0]
 8003164:	f107 0208 	add.w	r2, r7, #8
 8003168:	2100      	movs	r1, #0
 800316a:	4798      	blx	r3
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	da07      	bge.n	8003182 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003172:	f06f 0304 	mvn.w	r3, #4
 8003176:	613b      	str	r3, [r7, #16]
                 break;
 8003178:	e010      	b.n	800319c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800317a:	f06f 0301 	mvn.w	r3, #1
 800317e:	613b      	str	r3, [r7, #16]
               break;
 8003180:	e00c      	b.n	800319c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1dd      	bne.n	8003148 <LAN8742_Init+0xc6>
 800318c:	e006      	b.n	800319c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800318e:	f06f 0304 	mvn.w	r3, #4
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	e002      	b.n	800319c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003196:	f06f 0303 	mvn.w	r3, #3
 800319a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d112      	bne.n	80031c8 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	4798      	blx	r3
 80031a8:	4603      	mov	r3, r0
 80031aa:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80031ac:	bf00      	nop
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	4798      	blx	r3
 80031b4:	4603      	mov	r3, r0
 80031b6:	461a      	mov	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80031c0:	d9f5      	bls.n	80031ae <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 80031c8:	693b      	ldr	r3, [r7, #16]
 }
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6810      	ldr	r0, [r2, #0]
 80031e6:	f107 020c 	add.w	r2, r7, #12
 80031ea:	2101      	movs	r1, #1
 80031ec:	4798      	blx	r3
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	da02      	bge.n	80031fa <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80031f4:	f06f 0304 	mvn.w	r3, #4
 80031f8:	e06e      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6810      	ldr	r0, [r2, #0]
 8003202:	f107 020c 	add.w	r2, r7, #12
 8003206:	2101      	movs	r1, #1
 8003208:	4798      	blx	r3
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	da02      	bge.n	8003216 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003210:	f06f 0304 	mvn.w	r3, #4
 8003214:	e060      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003220:	2301      	movs	r3, #1
 8003222:	e059      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6810      	ldr	r0, [r2, #0]
 800322c:	f107 020c 	add.w	r2, r7, #12
 8003230:	2100      	movs	r1, #0
 8003232:	4798      	blx	r3
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	da02      	bge.n	8003240 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800323a:	f06f 0304 	mvn.w	r3, #4
 800323e:	e04b      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d11b      	bne.n	8003282 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <LAN8742_GetLinkState+0x90>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800325e:	2302      	movs	r3, #2
 8003260:	e03a      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800326c:	2303      	movs	r3, #3
 800326e:	e033      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800327a:	2304      	movs	r3, #4
 800327c:	e02c      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800327e:	2305      	movs	r3, #5
 8003280:	e02a      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6810      	ldr	r0, [r2, #0]
 800328a:	f107 020c 	add.w	r2, r7, #12
 800328e:	211f      	movs	r1, #31
 8003290:	4798      	blx	r3
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	da02      	bge.n	800329e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003298:	f06f 0304 	mvn.w	r3, #4
 800329c:	e01c      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d101      	bne.n	80032ac <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80032a8:	2306      	movs	r3, #6
 80032aa:	e015      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 031c 	and.w	r3, r3, #28
 80032b2:	2b18      	cmp	r3, #24
 80032b4:	d101      	bne.n	80032ba <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80032b6:	2302      	movs	r3, #2
 80032b8:	e00e      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 031c 	and.w	r3, r3, #28
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d101      	bne.n	80032c8 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e007      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 031c 	and.w	r3, r3, #28
 80032ce:	2b14      	cmp	r3, #20
 80032d0:	d101      	bne.n	80032d6 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80032d2:	2304      	movs	r3, #4
 80032d4:	e000      	b.n	80032d8 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80032d6:	2305      	movs	r3, #5
    }				
  }
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3710      	adds	r7, #16
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032e6:	2003      	movs	r0, #3
 80032e8:	f000 f93b 	bl	8003562 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80032ec:	f004 fb5e 	bl	80079ac <HAL_RCC_GetSysClockFreq>
 80032f0:	4602      	mov	r2, r0
 80032f2:	4b15      	ldr	r3, [pc, #84]	; (8003348 <HAL_Init+0x68>)
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	0a1b      	lsrs	r3, r3, #8
 80032f8:	f003 030f 	and.w	r3, r3, #15
 80032fc:	4913      	ldr	r1, [pc, #76]	; (800334c <HAL_Init+0x6c>)
 80032fe:	5ccb      	ldrb	r3, [r1, r3]
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	fa22 f303 	lsr.w	r3, r2, r3
 8003308:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800330a:	4b0f      	ldr	r3, [pc, #60]	; (8003348 <HAL_Init+0x68>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	4a0e      	ldr	r2, [pc, #56]	; (800334c <HAL_Init+0x6c>)
 8003314:	5cd3      	ldrb	r3, [r2, r3]
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	fa22 f303 	lsr.w	r3, r2, r3
 8003320:	4a0b      	ldr	r2, [pc, #44]	; (8003350 <HAL_Init+0x70>)
 8003322:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003324:	4a0b      	ldr	r2, [pc, #44]	; (8003354 <HAL_Init+0x74>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800332a:	200f      	movs	r0, #15
 800332c:	f7ff f878 	bl	8002420 <HAL_InitTick>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e002      	b.n	8003340 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800333a:	f7ff f853 	bl	80023e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	58024400 	.word	0x58024400
 800334c:	0801fbbc 	.word	0x0801fbbc
 8003350:	2400000c 	.word	0x2400000c
 8003354:	24000008 	.word	0x24000008

08003358 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800335c:	4b06      	ldr	r3, [pc, #24]	; (8003378 <HAL_IncTick+0x20>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_IncTick+0x24>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_IncTick+0x24>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	24000014 	.word	0x24000014
 800337c:	24004fbc 	.word	0x24004fbc

08003380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  return uwTick;
 8003384:	4b03      	ldr	r3, [pc, #12]	; (8003394 <HAL_GetTick+0x14>)
 8003386:	681b      	ldr	r3, [r3, #0]
}
 8003388:	4618      	mov	r0, r3
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	24004fbc 	.word	0x24004fbc

08003398 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033a0:	f7ff ffee 	bl	8003380 <HAL_GetTick>
 80033a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b0:	d005      	beq.n	80033be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033b2:	4b0a      	ldr	r3, [pc, #40]	; (80033dc <HAL_Delay+0x44>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	4413      	add	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033be:	bf00      	nop
 80033c0:	f7ff ffde 	bl	8003380 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d8f7      	bhi.n	80033c0 <HAL_Delay+0x28>
  {
  }
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	24000014 	.word	0x24000014

080033e0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80033e8:	4b06      	ldr	r3, [pc, #24]	; (8003404 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80033f0:	4904      	ldr	r1, [pc, #16]	; (8003404 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	58000400 	.word	0x58000400

08003408 <__NVIC_SetPriorityGrouping>:
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003418:	4b0b      	ldr	r3, [pc, #44]	; (8003448 <__NVIC_SetPriorityGrouping+0x40>)
 800341a:	68db      	ldr	r3, [r3, #12]
 800341c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003424:	4013      	ands	r3, r2
 8003426:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003430:	4b06      	ldr	r3, [pc, #24]	; (800344c <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	4313      	orrs	r3, r2
 8003434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003436:	4a04      	ldr	r2, [pc, #16]	; (8003448 <__NVIC_SetPriorityGrouping+0x40>)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	60d3      	str	r3, [r2, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	e000ed00 	.word	0xe000ed00
 800344c:	05fa0000 	.word	0x05fa0000

08003450 <__NVIC_GetPriorityGrouping>:
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003454:	4b04      	ldr	r3, [pc, #16]	; (8003468 <__NVIC_GetPriorityGrouping+0x18>)
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	0a1b      	lsrs	r3, r3, #8
 800345a:	f003 0307 	and.w	r3, r3, #7
}
 800345e:	4618      	mov	r0, r3
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <__NVIC_EnableIRQ>:
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db0b      	blt.n	8003496 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	88fb      	ldrh	r3, [r7, #6]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4907      	ldr	r1, [pc, #28]	; (80034a4 <__NVIC_EnableIRQ+0x38>)
 8003486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	e000e100 	.word	0xe000e100

080034a8 <__NVIC_SetPriority>:
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	6039      	str	r1, [r7, #0]
 80034b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	db0a      	blt.n	80034d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	490c      	ldr	r1, [pc, #48]	; (80034f4 <__NVIC_SetPriority+0x4c>)
 80034c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034c6:	0112      	lsls	r2, r2, #4
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	440b      	add	r3, r1
 80034cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034d0:	e00a      	b.n	80034e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4908      	ldr	r1, [pc, #32]	; (80034f8 <__NVIC_SetPriority+0x50>)
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	3b04      	subs	r3, #4
 80034e0:	0112      	lsls	r2, r2, #4
 80034e2:	b2d2      	uxtb	r2, r2
 80034e4:	440b      	add	r3, r1
 80034e6:	761a      	strb	r2, [r3, #24]
}
 80034e8:	bf00      	nop
 80034ea:	370c      	adds	r7, #12
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	e000e100 	.word	0xe000e100
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <NVIC_EncodePriority>:
{
 80034fc:	b480      	push	{r7}
 80034fe:	b089      	sub	sp, #36	; 0x24
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f003 0307 	and.w	r3, r3, #7
 800350e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f1c3 0307 	rsb	r3, r3, #7
 8003516:	2b04      	cmp	r3, #4
 8003518:	bf28      	it	cs
 800351a:	2304      	movcs	r3, #4
 800351c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	3304      	adds	r3, #4
 8003522:	2b06      	cmp	r3, #6
 8003524:	d902      	bls.n	800352c <NVIC_EncodePriority+0x30>
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	3b03      	subs	r3, #3
 800352a:	e000      	b.n	800352e <NVIC_EncodePriority+0x32>
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003530:	f04f 32ff 	mov.w	r2, #4294967295
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43da      	mvns	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	401a      	ands	r2, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003544:	f04f 31ff 	mov.w	r1, #4294967295
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	43d9      	mvns	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003554:	4313      	orrs	r3, r2
}
 8003556:	4618      	mov	r0, r3
 8003558:	3724      	adds	r7, #36	; 0x24
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ff4c 	bl	8003408 <__NVIC_SetPriorityGrouping>
}
 8003570:	bf00      	nop
 8003572:	3708      	adds	r7, #8
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	60b9      	str	r1, [r7, #8]
 8003582:	607a      	str	r2, [r7, #4]
 8003584:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003586:	f7ff ff63 	bl	8003450 <__NVIC_GetPriorityGrouping>
 800358a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800358c:	687a      	ldr	r2, [r7, #4]
 800358e:	68b9      	ldr	r1, [r7, #8]
 8003590:	6978      	ldr	r0, [r7, #20]
 8003592:	f7ff ffb3 	bl	80034fc <NVIC_EncodePriority>
 8003596:	4602      	mov	r2, r0
 8003598:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800359c:	4611      	mov	r1, r2
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff ff82 	bl	80034a8 <__NVIC_SetPriority>
}
 80035a4:	bf00      	nop
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff ff56 	bl	800346c <__NVIC_EnableIRQ>
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80035cc:	f3bf 8f5f 	dmb	sy
}
 80035d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80035d2:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <HAL_MPU_Disable+0x28>)
 80035d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d6:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <HAL_MPU_Disable+0x28>)
 80035d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035dc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80035de:	4b05      	ldr	r3, [pc, #20]	; (80035f4 <HAL_MPU_Disable+0x2c>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	605a      	str	r2, [r3, #4]
}
 80035e4:	bf00      	nop
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	e000ed00 	.word	0xe000ed00
 80035f4:	e000ed90 	.word	0xe000ed90

080035f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003600:	4a0b      	ldr	r2, [pc, #44]	; (8003630 <HAL_MPU_Enable+0x38>)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f043 0301 	orr.w	r3, r3, #1
 8003608:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800360a:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <HAL_MPU_Enable+0x3c>)
 800360c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <HAL_MPU_Enable+0x3c>)
 8003610:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003614:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8003616:	f3bf 8f4f 	dsb	sy
}
 800361a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800361c:	f3bf 8f6f 	isb	sy
}
 8003620:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8003622:	bf00      	nop
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	e000ed90 	.word	0xe000ed90
 8003634:	e000ed00 	.word	0xe000ed00

08003638 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	785a      	ldrb	r2, [r3, #1]
 8003644:	4b1d      	ldr	r3, [pc, #116]	; (80036bc <HAL_MPU_ConfigRegion+0x84>)
 8003646:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d029      	beq.n	80036a4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8003650:	4a1a      	ldr	r2, [pc, #104]	; (80036bc <HAL_MPU_ConfigRegion+0x84>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7b1b      	ldrb	r3, [r3, #12]
 800365c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	7adb      	ldrb	r3, [r3, #11]
 8003662:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003664:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7a9b      	ldrb	r3, [r3, #10]
 800366a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800366c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	7b5b      	ldrb	r3, [r3, #13]
 8003672:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8003674:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	7b9b      	ldrb	r3, [r3, #14]
 800367a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800367c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7bdb      	ldrb	r3, [r3, #15]
 8003682:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8003684:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	7a5b      	ldrb	r3, [r3, #9]
 800368a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800368c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	7a1b      	ldrb	r3, [r3, #8]
 8003692:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8003694:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800369c:	4a07      	ldr	r2, [pc, #28]	; (80036bc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800369e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80036a0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80036a2:	e005      	b.n	80036b0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80036a4:	4b05      	ldr	r3, [pc, #20]	; (80036bc <HAL_MPU_ConfigRegion+0x84>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <HAL_MPU_ConfigRegion+0x84>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	611a      	str	r2, [r3, #16]
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr
 80036bc:	e000ed90 	.word	0xe000ed90

080036c0 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e054      	b.n	800377c <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7f5b      	ldrb	r3, [r3, #29]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d105      	bne.n	80036e8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd fb42 	bl	8000d6c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	791b      	ldrb	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10c      	bne.n	8003710 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a22      	ldr	r2, [pc, #136]	; (8003784 <HAL_CRC_Init+0xc4>)
 80036fc:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	689a      	ldr	r2, [r3, #8]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0218 	bic.w	r2, r2, #24
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	e00c      	b.n	800372a <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6899      	ldr	r1, [r3, #8]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	461a      	mov	r2, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f834 	bl	8003788 <HAL_CRCEx_Polynomial_Set>
 8003720:	4603      	mov	r3, r0
 8003722:	2b00      	cmp	r3, #0
 8003724:	d001      	beq.n	800372a <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e028      	b.n	800377c <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	795b      	ldrb	r3, [r3, #5]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d105      	bne.n	800373e <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f04f 32ff 	mov.w	r2, #4294967295
 800373a:	611a      	str	r2, [r3, #16]
 800373c:	e004      	b.n	8003748 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6912      	ldr	r2, [r2, #16]
 8003746:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695a      	ldr	r2, [r3, #20]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	430a      	orrs	r2, r1
 800375c:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699a      	ldr	r2, [r3, #24]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	430a      	orrs	r2, r1
 8003772:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3708      	adds	r7, #8
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	04c11db7 	.word	0x04c11db7

08003788 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003794:	2300      	movs	r3, #0
 8003796:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8003798:	231f      	movs	r3, #31
 800379a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800379c:	bf00      	nop
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1e5a      	subs	r2, r3, #1
 80037a2:	613a      	str	r2, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d009      	beq.n	80037bc <HAL_CRCEx_Polynomial_Set+0x34>
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_CRCEx_Polynomial_Set+0x16>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b18      	cmp	r3, #24
 80037c0:	d846      	bhi.n	8003850 <HAL_CRCEx_Polynomial_Set+0xc8>
 80037c2:	a201      	add	r2, pc, #4	; (adr r2, 80037c8 <HAL_CRCEx_Polynomial_Set+0x40>)
 80037c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c8:	08003857 	.word	0x08003857
 80037cc:	08003851 	.word	0x08003851
 80037d0:	08003851 	.word	0x08003851
 80037d4:	08003851 	.word	0x08003851
 80037d8:	08003851 	.word	0x08003851
 80037dc:	08003851 	.word	0x08003851
 80037e0:	08003851 	.word	0x08003851
 80037e4:	08003851 	.word	0x08003851
 80037e8:	08003845 	.word	0x08003845
 80037ec:	08003851 	.word	0x08003851
 80037f0:	08003851 	.word	0x08003851
 80037f4:	08003851 	.word	0x08003851
 80037f8:	08003851 	.word	0x08003851
 80037fc:	08003851 	.word	0x08003851
 8003800:	08003851 	.word	0x08003851
 8003804:	08003851 	.word	0x08003851
 8003808:	08003839 	.word	0x08003839
 800380c:	08003851 	.word	0x08003851
 8003810:	08003851 	.word	0x08003851
 8003814:	08003851 	.word	0x08003851
 8003818:	08003851 	.word	0x08003851
 800381c:	08003851 	.word	0x08003851
 8003820:	08003851 	.word	0x08003851
 8003824:	08003851 	.word	0x08003851
 8003828:	0800382d 	.word	0x0800382d
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b06      	cmp	r3, #6
 8003830:	d913      	bls.n	800385a <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003836:	e010      	b.n	800385a <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b07      	cmp	r3, #7
 800383c:	d90f      	bls.n	800385e <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003842:	e00c      	b.n	800385e <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	2b0f      	cmp	r3, #15
 8003848:	d90b      	bls.n	8003862 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800384e:	e008      	b.n	8003862 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	75fb      	strb	r3, [r7, #23]
      break;
 8003854:	e006      	b.n	8003864 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003856:	bf00      	nop
 8003858:	e004      	b.n	8003864 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8003862:	bf00      	nop
  }
  if (status == HAL_OK)
 8003864:	7dfb      	ldrb	r3, [r7, #23]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f023 0118 	bic.w	r1, r3, #24
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8003886:	7dfb      	ldrb	r3, [r7, #23]
}
 8003888:	4618      	mov	r0, r3
 800388a:	371c      	adds	r7, #28
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0c6      	b.n	8003a34 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d102      	bne.n	80038b4 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f007 ffd4 	bl	800b85c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2223      	movs	r2, #35	; 0x23
 80038b8:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ba:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <HAL_ETH_Init+0x1a8>)
 80038bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038c0:	4a5e      	ldr	r2, [pc, #376]	; (8003a3c <HAL_ETH_Init+0x1a8>)
 80038c2:	f043 0302 	orr.w	r3, r3, #2
 80038c6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038ca:	4b5c      	ldr	r3, [pc, #368]	; (8003a3c <HAL_ETH_Init+0x1a8>)
 80038cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038d0:	f003 0302 	and.w	r3, r3, #2
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7a1b      	ldrb	r3, [r3, #8]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d103      	bne.n	80038e8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80038e0:	2000      	movs	r0, #0
 80038e2:	f7ff fd7d 	bl	80033e0 <HAL_SYSCFG_ETHInterfaceSelect>
 80038e6:	e003      	b.n	80038f0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80038e8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80038ec:	f7ff fd78 	bl	80033e0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003906:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003908:	f7ff fd3a 	bl	8003380 <HAL_GetTick>
 800390c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800390e:	e00f      	b.n	8003930 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8003910:	f7ff fd36 	bl	8003380 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800391e:	d907      	bls.n	8003930 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2204      	movs	r2, #4
 8003924:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	22e0      	movs	r2, #224	; 0xe0
 800392a:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e081      	b.n	8003a34 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1e6      	bne.n	8003910 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f001 fad8 	bl	8004ef8 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003948:	f004 f9aa 	bl	8007ca0 <HAL_RCC_GetHCLKFreq>
 800394c:	4603      	mov	r3, r0
 800394e:	4a3c      	ldr	r2, [pc, #240]	; (8003a40 <HAL_ETH_Init+0x1ac>)
 8003950:	fba2 2303 	umull	r2, r3, r2, r3
 8003954:	0c9a      	lsrs	r2, r3, #18
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	3a01      	subs	r2, #1
 800395c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f001 fa2b 	bl	8004dbc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800397c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8003980:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	22e0      	movs	r2, #224	; 0xe0
 8003998:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e04a      	b.n	8003a34 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	f241 1308 	movw	r3, #4360	; 0x1108
 80039a6:	4413      	add	r3, r2
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_ETH_Init+0x1b0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6952      	ldr	r2, [r2, #20]
 80039b2:	0052      	lsls	r2, r2, #1
 80039b4:	6879      	ldr	r1, [r7, #4]
 80039b6:	6809      	ldr	r1, [r1, #0]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	f241 1308 	movw	r3, #4360	; 0x1108
 80039be:	440b      	add	r3, r1
 80039c0:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f001 faf0 	bl	8004fa8 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f001 fb34 	bl	8005036 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	3305      	adds	r3, #5
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	3304      	adds	r3, #4
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	4619      	mov	r1, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	3303      	adds	r3, #3
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	061a      	lsls	r2, r3, #24
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	3302      	adds	r3, #2
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	041b      	lsls	r3, r3, #16
 8003a00:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	3301      	adds	r3, #1
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a0c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003a1a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003a1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2210      	movs	r2, #16
 8003a2a:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2210      	movs	r2, #16
 8003a30:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	58024400 	.word	0x58024400
 8003a40:	431bde83 	.word	0x431bde83
 8003a44:	ffff8001 	.word	0xffff8001

08003a48 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b087      	sub	sp, #28
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	607a      	str	r2, [r7, #4]
 8003a54:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	3310      	adds	r3, #16
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	4413      	add	r3, r2
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_ETH_DescAssignMemory+0x28>
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d904      	bls.n	8003a7a <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2201      	movs	r2, #1
 8003a74:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e021      	b.n	8003abe <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00b      	beq.n	8003ab0 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8003a98:	683a      	ldr	r2, [r7, #0]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	371c      	adds	r7, #28
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr

08003aca <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b085      	sub	sp, #20
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ad6:	2b10      	cmp	r3, #16
 8003ad8:	d174      	bne.n	8003bc4 <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2223      	movs	r2, #35	; 0x23
 8003ade:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	e00f      	b.n	8003b06 <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3310      	adds	r3, #16
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4413      	add	r3, r2
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b03      	cmp	r3, #3
 8003b0a:	d9ec      	bls.n	8003ae6 <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0202 	orr.w	r2, r2, #2
 8003b20:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003b4e:	4413      	add	r3, r2
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6811      	ldr	r1, [r2, #0]
 8003b56:	f043 0201 	orr.w	r2, r3, #1
 8003b5a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003b5e:	440b      	add	r3, r1
 8003b60:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b6a:	4413      	add	r3, r2
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6811      	ldr	r1, [r2, #0]
 8003b72:	f043 0201 	orr.w	r2, r3, #1
 8003b76:	f241 1308 	movw	r3, #4360	; 0x1108
 8003b7a:	440b      	add	r3, r1
 8003b7c:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8003b90:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003b94:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	f241 1334 	movw	r3, #4404	; 0x1134
 8003b9e:	4413      	add	r3, r2
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6811      	ldr	r1, [r2, #0]
 8003ba6:	f24d 0241 	movw	r2, #53313	; 0xd041
 8003baa:	431a      	orrs	r2, r3
 8003bac:	f241 1334 	movw	r3, #4404	; 0x1134
 8003bb0:	440b      	add	r3, r1
 8003bb2:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2210      	movs	r2, #16
 8003bb8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2222      	movs	r2, #34	; 0x22
 8003bbe:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e000      	b.n	8003bc6 <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
	...

08003bd4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d067      	beq.n	8003cb4 <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2223      	movs	r2, #35	; 0x23
 8003be8:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	f241 1334 	movw	r3, #4404	; 0x1134
 8003bf2:	4413      	add	r3, r2
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	6811      	ldr	r1, [r2, #0]
 8003bfa:	4a32      	ldr	r2, [pc, #200]	; (8003cc4 <HAL_ETH_Stop_IT+0xf0>)
 8003bfc:	401a      	ands	r2, r3
 8003bfe:	f241 1334 	movw	r3, #4404	; 0x1134
 8003c02:	440b      	add	r3, r1
 8003c04:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003c0e:	4413      	add	r3, r2
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6811      	ldr	r1, [r2, #0]
 8003c16:	f023 0201 	bic.w	r2, r3, #1
 8003c1a:	f241 1304 	movw	r3, #4356	; 0x1104
 8003c1e:	440b      	add	r3, r1
 8003c20:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f241 1308 	movw	r3, #4360	; 0x1108
 8003c2a:	4413      	add	r3, r2
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	687a      	ldr	r2, [r7, #4]
 8003c30:	6811      	ldr	r1, [r2, #0]
 8003c32:	f023 0201 	bic.w	r2, r3, #1
 8003c36:	f241 1308 	movw	r3, #4360	; 0x1108
 8003c3a:	440b      	add	r3, r1
 8003c3c:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f022 0201 	bic.w	r2, r2, #1
 8003c4c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681a      	ldr	r2, [r3, #0]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 0202 	bic.w	r2, r2, #2
 8003c70:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e00f      	b.n	8003c98 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	3310      	adds	r3, #16
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	4413      	add	r3, r2
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3301      	adds	r3, #1
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d9ec      	bls.n	8003c78 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2210      	movs	r2, #16
 8003cae:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e000      	b.n	8003cb6 <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
  }
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	ffff2fbe 	.word	0xffff2fbe

08003cc8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	60b9      	str	r1, [r7, #8]
 8003cd2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d107      	bne.n	8003cea <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cde:	f043 0201 	orr.w	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e073      	b.n	8003dd2 <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cee:	2b10      	cmp	r3, #16
 8003cf0:	d16e      	bne.n	8003dd0 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f001 f9fa 	bl	80050f0 <ETH_Prepare_Tx_Descriptors>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d06:	f043 0202 	orr.w	r2, r3, #2
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e05f      	b.n	8003dd2 <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	3206      	adds	r2, #6
 8003d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d1e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d24:	1c5a      	adds	r2, r3, #1
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	629a      	str	r2, [r3, #40]	; 0x28
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d904      	bls.n	8003d3c <HAL_ETH_Transmit+0x74>
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d36:	1f1a      	subs	r2, r3, #4
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	68fa      	ldr	r2, [r7, #12]
 8003d46:	3106      	adds	r1, #6
 8003d48:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003d4c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003d50:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 8003d52:	f7ff fb15 	bl	8003380 <HAL_GetTick>
 8003d56:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003d58:	e034      	b.n	8003dc4 <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d011      	beq.n	8003d90 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f043 0208 	orr.w	r2, r3, #8
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	22e0      	movs	r2, #224	; 0xe0
 8003d8a:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e020      	b.n	8003dd2 <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d96:	d015      	beq.n	8003dc4 <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8003d98:	f7ff faf2 	bl	8003380 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <HAL_ETH_Transmit+0xe6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10a      	bne.n	8003dc4 <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003db2:	f043 0204 	orr.w	r2, r3, #4
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	22e0      	movs	r2, #224	; 0xe0
 8003dbe:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e006      	b.n	8003dd2 <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	dbc6      	blt.n	8003d5a <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b089      	sub	sp, #36	; 0x24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3344      	adds	r3, #68	; 0x44
 8003de6:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	691b      	ldr	r3, [r3, #16]
 8003dec:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003df6:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	2300      	movs	r3, #0
 8003e02:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d06b      	beq.n	8003ee4 <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	e0ce      	b.n	8003fae <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3301      	adds	r3, #1
 8003e14:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d036      	beq.n	8003e90 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	3301      	adds	r3, #1
 8003e26:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d101      	bne.n	8003e32 <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	3301      	adds	r3, #1
 8003e36:	61fb      	str	r3, [r7, #28]
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	d902      	bls.n	8003e44 <HAL_ETH_IsRxDataAvailable+0x6a>
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3b04      	subs	r3, #4
 8003e42:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	69fa      	ldr	r2, [r7, #28]
 8003e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e4c:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8003e4e:	69bb      	ldr	r3, [r7, #24]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	db11      	blt.n	8003e7a <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00b      	beq.n	8003e7a <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	2201      	movs	r2, #1
 8003e66:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	61fb      	str	r3, [r7, #28]
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	2b03      	cmp	r3, #3
 8003e72:	d902      	bls.n	8003e7a <HAL_ETH_IsRxDataAvailable+0xa0>
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	3b04      	subs	r3, #4
 8003e78:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	69fa      	ldr	r2, [r7, #28]
 8003e7e:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e08e      	b.n	8003fae <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
 8003eaa:	69fb      	ldr	r3, [r7, #28]
 8003eac:	2b03      	cmp	r3, #3
 8003eae:	d902      	bls.n	8003eb6 <HAL_ETH_IsRxDataAvailable+0xdc>
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	3b04      	subs	r3, #4
 8003eb4:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e010      	b.n	8003ee4 <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d902      	bls.n	8003eda <HAL_ETH_IsRxDataAvailable+0x100>
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	3b04      	subs	r3, #4
 8003ed8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ee2:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	db02      	blt.n	8003ef2 <HAL_ETH_IsRxDataAvailable+0x118>
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d98e      	bls.n	8003e10 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d056      	beq.n	8003fa6 <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f10:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	e03b      	b.n	8003f90 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f26:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d009      	beq.n	8003f44 <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d005      	beq.n	8003f64 <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	3b01      	subs	r3, #1
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d20d      	bcs.n	8003f8a <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d902      	bls.n	8003f80 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	3b04      	subs	r3, #4
 8003f7e:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f88:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	617b      	str	r3, [r7, #20]
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d3bf      	bcc.n	8003f18 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	69ba      	ldr	r2, [r7, #24]
 8003f9e:	f241 1328 	movw	r3, #4392	; 0x1128
 8003fa2:	440b      	add	r3, r1
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]

  return 0;
 8003fac:	2300      	movs	r3, #0
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3724      	adds	r7, #36	; 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr

08003fba <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b08a      	sub	sp, #40	; 0x28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	6078      	str	r0, [r7, #4]
 8003fc2:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3344      	adds	r3, #68	; 0x44
 8003fc8:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fdc:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d104      	bne.n	8003ff2 <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e07d      	b.n	80040ee <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	699b      	ldr	r3, [r3, #24]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10f      	bne.n	800401a <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff feed 	bl	8003dda <HAL_ETH_IsRxDataAvailable>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e071      	b.n	80040ee <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004018:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800401a:	2300      	movs	r3, #0
 800401c:	623b      	str	r3, [r7, #32]
 800401e:	e031      	b.n	8004084 <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	461a      	mov	r2, r3
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8004040:	69bb      	ldr	r3, [r7, #24]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	461a      	mov	r2, r3
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	695a      	ldr	r2, [r3, #20]
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800405a:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800405c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405e:	3301      	adds	r3, #1
 8004060:	627b      	str	r3, [r7, #36]	; 0x24
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	2b03      	cmp	r3, #3
 8004066:	d902      	bls.n	800406e <HAL_ETH_GetRxDataBuffer+0xb4>
 8004068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406a:	3b04      	subs	r3, #4
 800406c:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004076:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	3301      	adds	r3, #1
 8004082:	623b      	str	r3, [r7, #32]
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	3b01      	subs	r3, #1
 800408a:	6a3a      	ldr	r2, [r7, #32]
 800408c:	429a      	cmp	r2, r3
 800408e:	d3c7      	bcc.n	8004020 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	68db      	ldr	r3, [r3, #12]
 8004094:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	461a      	mov	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d803      	bhi.n	80040ba <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	605a      	str	r2, [r3, #4]
 80040b8:	e018      	b.n	80040ec <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 80040ba:	69bb      	ldr	r3, [r7, #24]
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d012      	beq.n	80040e8 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695a      	ldr	r2, [r3, #20]
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	461a      	mov	r2, r3
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695b      	ldr	r3, [r3, #20]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	1ad2      	subs	r2, r2, r3
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	e001      	b.n	80040ec <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e000      	b.n	80040ee <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3728      	adds	r7, #40	; 0x28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
 80040fe:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	3344      	adds	r3, #68	; 0x44
 8004104:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	699b      	ldr	r3, [r3, #24]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d107      	bne.n	8004124 <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f7ff fe60 	bl	8003dda <HAL_ETH_IsRxDataAvailable>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e017      	b.n	8004154 <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	4413      	add	r3, r2
 800412c:	3b01      	subs	r3, #1
 800412e:	617b      	str	r3, [r7, #20]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b03      	cmp	r3, #3
 8004134:	d902      	bls.n	800413c <HAL_ETH_GetRxDataLength+0x46>
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	3b04      	subs	r3, #4
 800413a:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004144:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3718      	adds	r7, #24
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 800415c:	b480      	push	{r7}
 800415e:	b089      	sub	sp, #36	; 0x24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	3344      	adds	r3, #68	; 0x44
 8004168:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	69fa      	ldr	r2, [r7, #28]
 8004174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004178:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e057      	b.n	800423c <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d002      	beq.n	800419a <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	3301      	adds	r3, #1
 8004198:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 800419a:	2300      	movs	r3, #0
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	e03b      	b.n	8004218 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	691a      	ldr	r2, [r3, #16]
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80041ae:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	695a      	ldr	r2, [r3, #20]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d005      	beq.n	80041ec <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d20d      	bcs.n	8004212 <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	3301      	adds	r3, #1
 80041fa:	61fb      	str	r3, [r7, #28]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	2b03      	cmp	r3, #3
 8004200:	d902      	bls.n	8004208 <HAL_ETH_BuildRxDescriptors+0xac>
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3b04      	subs	r3, #4
 8004206:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	69fa      	ldr	r2, [r7, #28]
 800420c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004210:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	3301      	adds	r3, #1
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693a      	ldr	r2, [r7, #16]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	d3bf      	bcc.n	80041a0 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6819      	ldr	r1, [r3, #0]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	f241 1328 	movw	r3, #4392	; 0x1128
 800422a:	440b      	add	r3, r1
 800422c:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3724      	adds	r7, #36	; 0x24
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	d113      	bne.n	800428a <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	f241 1334 	movw	r3, #4404	; 0x1134
 800426a:	4413      	add	r3, r2
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004272:	2b40      	cmp	r3, #64	; 0x40
 8004274:	d109      	bne.n	800428a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f007 fbc6 	bl	800ba08 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004284:	f248 0240 	movw	r2, #32832	; 0x8040
 8004288:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d113      	bne.n	80042c4 <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	f241 1334 	movw	r3, #4404	; 0x1134
 80042a4:	4413      	add	r3, r2
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d109      	bne.n	80042c4 <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 f8b7 	bl	8004424 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80042be:	f248 0201 	movw	r2, #32769	; 0x8001
 80042c2:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d6:	d149      	bne.n	800436c <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	f241 1334 	movw	r3, #4404	; 0x1134
 80042e0:	4413      	add	r3, r2
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ec:	d13e      	bne.n	800436c <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	f043 0208 	orr.w	r2, r3, #8
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800430c:	d11b      	bne.n	8004346 <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	f241 1302 	movw	r3, #4354	; 0x1102
 800431c:	4013      	ands	r3, r2
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	f241 1334 	movw	r3, #4404	; 0x1134
 800432a:	4413      	add	r3, r2
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	687a      	ldr	r2, [r7, #4]
 8004330:	6811      	ldr	r1, [r2, #0]
 8004332:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004336:	f241 1334 	movw	r3, #4404	; 0x1134
 800433a:	440b      	add	r3, r1
 800433c:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	22e0      	movs	r2, #224	; 0xe0
 8004342:	66da      	str	r2, [r3, #108]	; 0x6c
 8004344:	e00f      	b.n	8004366 <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8004360:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 8004364:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f000 f866 	bl	8004438 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004374:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8004378:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800437c:	d10e      	bne.n	800439c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	22e0      	movs	r2, #224	; 0xe0
 800438e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f85b 	bl	800444c <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b10      	cmp	r3, #16
 80043aa:	d10f      	bne.n	80043cc <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043b4:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80043be:	6878      	ldr	r0, [r7, #4]
 80043c0:	f000 f84e 	bl	8004460 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043d4:	f003 0320 	and.w	r3, r3, #32
 80043d8:	2b20      	cmp	r3, #32
 80043da:	d10f      	bne.n	80043fc <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043e4:	f003 020f 	and.w	r2, r3, #15
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f840 	bl	8004474 <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <HAL_ETH_IRQHandler+0x1d8>)
 80043fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004400:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d006      	beq.n	8004416 <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_ETH_IRQHandler+0x1d8>)
 800440a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800440e:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 f839 	bl	8004488 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 8004416:	bf00      	nop
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	58000080 	.word	0x58000080

08004424 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8004438:	b480      	push	{r7}
 800443a:	b083      	sub	sp, #12
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8004454:	bf00      	nop
 8004456:	370c      	adds	r7, #12
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004472:	4770      	bx	lr

08004474 <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e03e      	b.n	800453c <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044c6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	055b      	lsls	r3, r3, #21
 80044d2:	4313      	orrs	r3, r2
 80044d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	041b      	lsls	r3, r3, #16
 80044e0:	4313      	orrs	r3, r2
 80044e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f043 030c 	orr.w	r3, r3, #12
 80044ea:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f043 0301 	orr.w	r3, r3, #1
 80044f2:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80044fe:	f7fe ff3f 	bl	8003380 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8004504:	e009      	b.n	800451a <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8004506:	f7fe ff3b 	bl	8003380 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004514:	d901      	bls.n	800451a <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e010      	b.n	800453c <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ed      	bne.n	8004506 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004532:	b29b      	uxth	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e03c      	b.n	80045e0 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800456e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	055b      	lsls	r3, r3, #21
 800457a:	4313      	orrs	r3, r2
 800457c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	041b      	lsls	r3, r3, #16
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 030c 	bic.w	r3, r3, #12
 8004592:	f043 0304 	orr.w	r3, r3, #4
 8004596:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	4b10      	ldr	r3, [pc, #64]	; (80045e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80045a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 80045aa:	4a0f      	ldr	r2, [pc, #60]	; (80045e8 <HAL_ETH_WritePHYRegister+0xa4>)
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 80045b2:	f7fe fee5 	bl	8003380 <HAL_GetTick>
 80045b6:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80045b8:	e009      	b.n	80045ce <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 80045ba:	f7fe fee1 	bl	8003380 <HAL_GetTick>
 80045be:	4602      	mov	r2, r0
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045c8:	d901      	bls.n	80045ce <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e008      	b.n	80045e0 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80045d6:	f003 0301 	and.w	r3, r3, #1
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d1ed      	bne.n	80045ba <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40028000 	.word	0x40028000

080045ec <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e1c3      	b.n	8004988 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 020c 	and.w	r2, r3, #12
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf0c      	ite	eq
 8004646:	2301      	moveq	r3, #1
 8004648:	2300      	movne	r3, #0
 800464a:	b2db      	uxtb	r3, r3
 800464c:	461a      	mov	r2, r3
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800465e:	2b00      	cmp	r3, #0
 8004660:	bf14      	ite	ne
 8004662:	2301      	movne	r3, #1
 8004664:	2300      	moveq	r3, #0
 8004666:	b2db      	uxtb	r3, r3
 8004668:	461a      	mov	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	461a      	mov	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004692:	2b00      	cmp	r3, #0
 8004694:	bf14      	ite	ne
 8004696:	2301      	movne	r3, #1
 8004698:	2300      	moveq	r3, #0
 800469a:	b2db      	uxtb	r3, r3
 800469c:	461a      	mov	r2, r3
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	bf14      	ite	ne
 80046b0:	2301      	movne	r3, #1
 80046b2:	2300      	moveq	r3, #0
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	461a      	mov	r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	bf14      	ite	ne
 80046e6:	2301      	movne	r3, #1
 80046e8:	2300      	moveq	r3, #0
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	461a      	mov	r2, r3
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bf0c      	ite	eq
 8004700:	2301      	moveq	r3, #1
 8004702:	2300      	movne	r3, #0
 8004704:	b2db      	uxtb	r3, r3
 8004706:	461a      	mov	r2, r3
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004716:	2b00      	cmp	r3, #0
 8004718:	bf0c      	ite	eq
 800471a:	2301      	moveq	r3, #1
 800471c:	2300      	movne	r3, #0
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004730:	2b00      	cmp	r3, #0
 8004732:	bf14      	ite	ne
 8004734:	2301      	movne	r3, #1
 8004736:	2300      	moveq	r3, #0
 8004738:	b2db      	uxtb	r3, r3
 800473a:	461a      	mov	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474a:	2b00      	cmp	r3, #0
 800474c:	bf14      	ite	ne
 800474e:	2301      	movne	r3, #1
 8004750:	2300      	moveq	r3, #0
 8004752:	b2db      	uxtb	r3, r3
 8004754:	461a      	mov	r2, r3
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf14      	ite	ne
 8004768:	2301      	movne	r3, #1
 800476a:	2300      	moveq	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	bf0c      	ite	eq
 80047e0:	2301      	moveq	r3, #1
 80047e2:	2300      	movne	r3, #0
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	461a      	mov	r2, r3
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	bf14      	ite	ne
 80047fc:	2301      	movne	r3, #1
 80047fe:	2300      	moveq	r3, #0
 8004800:	b2db      	uxtb	r3, r3
 8004802:	461a      	mov	r2, r3
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004814:	2b00      	cmp	r3, #0
 8004816:	bf14      	ite	ne
 8004818:	2301      	movne	r3, #1
 800481a:	2300      	moveq	r3, #0
 800481c:	b2db      	uxtb	r3, r3
 800481e:	461a      	mov	r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	bf14      	ite	ne
 8004834:	2301      	movne	r3, #1
 8004836:	2300      	moveq	r3, #0
 8004838:	b2db      	uxtb	r3, r3
 800483a:	461a      	mov	r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0e5b      	lsrs	r3, r3, #25
 800484a:	f003 021f 	and.w	r2, r3, #31
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	bf14      	ite	ne
 8004860:	2301      	movne	r3, #1
 8004862:	2300      	moveq	r3, #0
 8004864:	b2db      	uxtb	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 020f 	and.w	r2, r3, #15
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	461a      	mov	r2, r3
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	461a      	mov	r2, r3
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048c8:	0c1b      	lsrs	r3, r3, #16
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b00      	cmp	r3, #0
 80048de:	bf14      	ite	ne
 80048e0:	2301      	movne	r3, #1
 80048e2:	2300      	moveq	r3, #0
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	461a      	mov	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f6:	f003 0302 	and.w	r3, r3, #2
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	bf14      	ite	ne
 80048fe:	2301      	movne	r3, #1
 8004900:	2300      	moveq	r3, #0
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004914:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004924:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b00      	cmp	r3, #0
 800493a:	bf14      	ite	ne
 800493c:	2301      	movne	r3, #1
 800493e:	2300      	moveq	r3, #0
 8004940:	b2db      	uxtb	r3, r3
 8004942:	461a      	mov	r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b00      	cmp	r3, #0
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	461a      	mov	r2, r3
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8004986:	2300      	movs	r3, #0
}
 8004988:	4618      	mov	r0, r3
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d101      	bne.n	80049a8 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e00a      	b.n	80049be <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049ac:	2b10      	cmp	r3, #16
 80049ae:	d105      	bne.n	80049bc <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f860 	bl	8004a78 <ETH_SetMACConfig>

    return HAL_OK;
 80049b8:	2300      	movs	r3, #0
 80049ba:	e000      	b.n	80049be <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
  }
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
	...

080049c8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80049d8:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80049e0:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80049e2:	f003 f95d 	bl	8007ca0 <HAL_RCC_GetHCLKFreq>
 80049e6:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d908      	bls.n	8004a02 <HAL_ETH_SetMDIOClockRange+0x3a>
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4a1d      	ldr	r2, [pc, #116]	; (8004a68 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d804      	bhi.n	8004a02 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	e027      	b.n	8004a52 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	4a18      	ldr	r2, [pc, #96]	; (8004a68 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d908      	bls.n	8004a1c <HAL_ETH_SetMDIOClockRange+0x54>
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4a17      	ldr	r2, [pc, #92]	; (8004a6c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d204      	bcs.n	8004a1c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	e01a      	b.n	8004a52 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d303      	bcc.n	8004a2c <HAL_ETH_SetMDIOClockRange+0x64>
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4a12      	ldr	r2, [pc, #72]	; (8004a70 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d911      	bls.n	8004a50 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4a10      	ldr	r2, [pc, #64]	; (8004a70 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d908      	bls.n	8004a46 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4a0f      	ldr	r2, [pc, #60]	; (8004a74 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d804      	bhi.n	8004a46 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	e005      	b.n	8004a52 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a4c:	60fb      	str	r3, [r7, #12]
 8004a4e:	e000      	b.n	8004a52 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004a50:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004a5c:	bf00      	nop
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	01312cff 	.word	0x01312cff
 8004a68:	02160ebf 	.word	0x02160ebf
 8004a6c:	03938700 	.word	0x03938700
 8004a70:	05f5e0ff 	.word	0x05f5e0ff
 8004a74:	08f0d17f 	.word	0x08f0d17f

08004a78 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b085      	sub	sp, #20
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004a8a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	791b      	ldrb	r3, [r3, #4]
 8004a90:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8004a92:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	7b1b      	ldrb	r3, [r3, #12]
 8004a98:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004a9a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	7b5b      	ldrb	r3, [r3, #13]
 8004aa0:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004aa2:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	7b9b      	ldrb	r3, [r3, #14]
 8004aa8:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004aaa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	7bdb      	ldrb	r3, [r3, #15]
 8004ab0:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004ab2:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004ab4:	683a      	ldr	r2, [r7, #0]
 8004ab6:	7c12      	ldrb	r2, [r2, #16]
 8004ab8:	2a00      	cmp	r2, #0
 8004aba:	d102      	bne.n	8004ac2 <ETH_SetMACConfig+0x4a>
 8004abc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004ac0:	e000      	b.n	8004ac4 <ETH_SetMACConfig+0x4c>
 8004ac2:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004ac4:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	7c52      	ldrb	r2, [r2, #17]
 8004aca:	2a00      	cmp	r2, #0
 8004acc:	d102      	bne.n	8004ad4 <ETH_SetMACConfig+0x5c>
 8004ace:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004ad2:	e000      	b.n	8004ad6 <ETH_SetMACConfig+0x5e>
 8004ad4:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004ad6:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	7c9b      	ldrb	r3, [r3, #18]
 8004adc:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004ade:	431a      	orrs	r2, r3
                                macconf->Speed |
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8004ae4:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8004aea:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	7f1b      	ldrb	r3, [r3, #28]
 8004af0:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8004af2:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	7f5b      	ldrb	r3, [r3, #29]
 8004af8:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8004afa:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	7f92      	ldrb	r2, [r2, #30]
 8004b00:	2a00      	cmp	r2, #0
 8004b02:	d102      	bne.n	8004b0a <ETH_SetMACConfig+0x92>
 8004b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b08:	e000      	b.n	8004b0c <ETH_SetMACConfig+0x94>
 8004b0a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8004b0c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	7fdb      	ldrb	r3, [r3, #31]
 8004b12:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8004b14:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004b16:	683a      	ldr	r2, [r7, #0]
 8004b18:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004b1c:	2a00      	cmp	r2, #0
 8004b1e:	d102      	bne.n	8004b26 <ETH_SetMACConfig+0xae>
 8004b20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b24:	e000      	b.n	8004b28 <ETH_SetMACConfig+0xb0>
 8004b26:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8004b28:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8004b2e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b36:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004b38:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	4b56      	ldr	r3, [pc, #344]	; (8004ca4 <ETH_SetMACConfig+0x22c>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6812      	ldr	r2, [r2, #0]
 8004b50:	68f9      	ldr	r1, [r7, #12]
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b5a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b62:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b64:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b6c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004b6e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b76:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004b78:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004b80:	2a00      	cmp	r2, #0
 8004b82:	d102      	bne.n	8004b8a <ETH_SetMACConfig+0x112>
 8004b84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004b88:	e000      	b.n	8004b8c <ETH_SetMACConfig+0x114>
 8004b8a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004b8c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <ETH_SetMACConfig+0x230>)
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	68f9      	ldr	r1, [r7, #12]
 8004ba6:	430b      	orrs	r3, r1
 8004ba8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bb0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	4b3a      	ldr	r3, [pc, #232]	; (8004cac <ETH_SetMACConfig+0x234>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6812      	ldr	r2, [r2, #0]
 8004bc8:	68f9      	ldr	r1, [r7, #12]
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004bd4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004bda:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8004bdc:	683a      	ldr	r2, [r7, #0]
 8004bde:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	d101      	bne.n	8004bea <ETH_SetMACConfig+0x172>
 8004be6:	2280      	movs	r2, #128	; 0x80
 8004be8:	e000      	b.n	8004bec <ETH_SetMACConfig+0x174>
 8004bea:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004bec:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bf2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004bfe:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004c02:	4013      	ands	r3, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6812      	ldr	r2, [r2, #0]
 8004c08:	68f9      	ldr	r1, [r7, #12]
 8004c0a:	430b      	orrs	r3, r1
 8004c0c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004c14:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004c1c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	f023 0103 	bic.w	r1, r3, #3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004c42:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004c58:	683a      	ldr	r2, [r7, #0]
 8004c5a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004c5e:	2a00      	cmp	r2, #0
 8004c60:	d101      	bne.n	8004c66 <ETH_SetMACConfig+0x1ee>
 8004c62:	2240      	movs	r2, #64	; 0x40
 8004c64:	e000      	b.n	8004c68 <ETH_SetMACConfig+0x1f0>
 8004c66:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004c68:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004c70:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004c72:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004c7a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004c88:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	00048083 	.word	0x00048083
 8004ca8:	c0f88000 	.word	0xc0f88000
 8004cac:	fffffef0 	.word	0xfffffef0

08004cb0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b38      	ldr	r3, [pc, #224]	; (8004da8 <ETH_SetDMAConfig+0xf8>)
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	6812      	ldr	r2, [r2, #0]
 8004ccc:	6879      	ldr	r1, [r7, #4]
 8004cce:	6809      	ldr	r1, [r1, #0]
 8004cd0:	431a      	orrs	r2, r3
 8004cd2:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8004cd6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	791b      	ldrb	r3, [r3, #4]
 8004cdc:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004ce2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	7b1b      	ldrb	r3, [r3, #12]
 8004ce8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	f241 0304 	movw	r3, #4100	; 0x1004
 8004cf6:	4413      	add	r3, r2
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	4b2c      	ldr	r3, [pc, #176]	; (8004dac <ETH_SetDMAConfig+0xfc>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	6811      	ldr	r1, [r2, #0]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	431a      	orrs	r2, r3
 8004d06:	f241 0304 	movw	r3, #4100	; 0x1004
 8004d0a:	440b      	add	r3, r1
 8004d0c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	7b5b      	ldrb	r3, [r3, #13]
 8004d12:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b22      	ldr	r3, [pc, #136]	; (8004db0 <ETH_SetDMAConfig+0x100>)
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6811      	ldr	r1, [r2, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8004d36:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	7d1b      	ldrb	r3, [r3, #20]
 8004d40:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004d42:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	7f5b      	ldrb	r3, [r3, #29]
 8004d48:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	f241 1304 	movw	r3, #4356	; 0x1104
 8004d56:	4413      	add	r3, r2
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <ETH_SetDMAConfig+0x104>)
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6811      	ldr	r1, [r2, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	431a      	orrs	r2, r3
 8004d66:	f241 1304 	movw	r3, #4356	; 0x1104
 8004d6a:	440b      	add	r3, r1
 8004d6c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	7f1b      	ldrb	r3, [r3, #28]
 8004d72:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d84:	4413      	add	r3, r2
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	4b0b      	ldr	r3, [pc, #44]	; (8004db8 <ETH_SetDMAConfig+0x108>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6811      	ldr	r1, [r2, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	f241 1308 	movw	r3, #4360	; 0x1108
 8004d98:	440b      	add	r3, r1
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	ffff87fd 	.word	0xffff87fd
 8004dac:	ffff2ffe 	.word	0xffff2ffe
 8004db0:	fffec000 	.word	0xfffec000
 8004db4:	ffc0efef 	.word	0xffc0efef
 8004db8:	7fc0ffff 	.word	0x7fc0ffff

08004dbc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b0a4      	sub	sp, #144	; 0x90
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004dec:	2300      	movs	r3, #0
 8004dee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004df8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004dfc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004e04:	2300      	movs	r3, #0
 8004e06:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004e14:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004e18:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004e20:	2300      	movs	r3, #0
 8004e22:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004e36:	2300      	movs	r3, #0
 8004e38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004e54:	2320      	movs	r3, #32
 8004e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004e60:	2300      	movs	r3, #0
 8004e62:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004e66:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004e6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004e70:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004e78:	2302      	movs	r3, #2
 8004e7a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004e96:	2300      	movs	r3, #0
 8004e98:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004ea0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7ff fde6 	bl	8004a78 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004eac:	2301      	movs	r3, #1
 8004eae:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004ec6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004eca:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004ed0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ed4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8004edc:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004ee2:	f107 0308 	add.w	r3, r7, #8
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fee1 	bl	8004cb0 <ETH_SetDMAConfig>
}
 8004eee:	bf00      	nop
 8004ef0:	3790      	adds	r7, #144	; 0x90
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
	...

08004ef8 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b084      	sub	sp, #16
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f08:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f10:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004f12:	f002 fec5 	bl	8007ca0 <HAL_RCC_GetHCLKFreq>
 8004f16:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4a1e      	ldr	r2, [pc, #120]	; (8004f94 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d908      	bls.n	8004f32 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d804      	bhi.n	8004f32 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	e027      	b.n	8004f82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	4a18      	ldr	r2, [pc, #96]	; (8004f98 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d908      	bls.n	8004f4c <ETH_MAC_MDIO_ClkConfig+0x54>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d204      	bcs.n	8004f4c <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004f48:	60fb      	str	r3, [r7, #12]
 8004f4a:	e01a      	b.n	8004f82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d303      	bcc.n	8004f5c <ETH_MAC_MDIO_ClkConfig+0x64>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d911      	bls.n	8004f80 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d908      	bls.n	8004f76 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d804      	bhi.n	8004f76 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e005      	b.n	8004f82 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e000      	b.n	8004f82 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004f80:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	01312cff 	.word	0x01312cff
 8004f98:	02160ebf 	.word	0x02160ebf
 8004f9c:	03938700 	.word	0x03938700
 8004fa0:	05f5e0ff 	.word	0x05f5e0ff
 8004fa4:	08f0d17f 	.word	0x08f0d17f

08004fa8 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
 8004fb4:	e01d      	b.n	8004ff2 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68d9      	ldr	r1, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	005b      	lsls	r3, r3, #1
 8004fc0:	4413      	add	r3, r2
 8004fc2:	00db      	lsls	r3, r3, #3
 8004fc4:	440b      	add	r3, r1
 8004fc6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004fe0:	68b9      	ldr	r1, [r7, #8]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	3206      	adds	r2, #6
 8004fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	3301      	adds	r3, #1
 8004ff0:	60fb      	str	r3, [r7, #12]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	d9de      	bls.n	8004fb6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	f241 132c 	movw	r3, #4396	; 0x112c
 8005006:	4413      	add	r3, r2
 8005008:	2203      	movs	r2, #3
 800500a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68d9      	ldr	r1, [r3, #12]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	f241 1314 	movw	r3, #4372	; 0x1114
 8005018:	4413      	add	r3, r2
 800501a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8005028:	601a      	str	r2, [r3, #0]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr

08005036 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e024      	b.n	800508e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6919      	ldr	r1, [r3, #16]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	4613      	mov	r3, r2
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	4413      	add	r3, r2
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	440b      	add	r3, r1
 8005054:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2200      	movs	r2, #0
 8005060:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	2200      	movs	r2, #0
 8005066:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2200      	movs	r2, #0
 800506c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2200      	movs	r2, #0
 8005072:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2200      	movs	r2, #0
 8005078:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3310      	adds	r3, #16
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	3301      	adds	r3, #1
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d9d7      	bls.n	8005044 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	f241 1330 	movw	r3, #4400	; 0x1130
 80050ba:	4413      	add	r3, r2
 80050bc:	2203      	movs	r2, #3
 80050be:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6919      	ldr	r1, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80050cc:	4413      	add	r3, r2
 80050ce:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	f241 1328 	movw	r3, #4392	; 0x1128
 80050e0:	4413      	add	r3, r2
 80050e2:	6019      	str	r1, [r3, #0]
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr

080050f0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b08d      	sub	sp, #52	; 0x34
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3318      	adds	r3, #24
 8005100:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	691b      	ldr	r3, [r3, #16]
 8005106:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 800510e:	2300      	movs	r3, #0
 8005110:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005116:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800511a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8005122:	2300      	movs	r3, #0
 8005124:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800512e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005132:	d007      	beq.n	8005144 <ETH_Prepare_Tx_Descriptors+0x54>
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	3304      	adds	r3, #4
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	4413      	add	r3, r2
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d001      	beq.n	8005148 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005144:	2302      	movs	r3, #2
 8005146:	e24a      	b.n	80055de <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d044      	beq.n	80051de <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	68da      	ldr	r2, [r3, #12]
 8005158:	4b72      	ldr	r3, [pc, #456]	; (8005324 <ETH_Prepare_Tx_Descriptors+0x234>)
 800515a:	4013      	ands	r3, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005160:	431a      	orrs	r2, r3
 8005162:	6a3b      	ldr	r3, [r7, #32]
 8005164:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005180:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d027      	beq.n	80051de <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800518e:	6a3b      	ldr	r3, [r7, #32]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	b29a      	uxth	r2, r3
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	431a      	orrs	r2, r3
 800519c:	6a3b      	ldr	r3, [r7, #32]
 800519e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051b8:	431a      	orrs	r2, r3
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80051cc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80051dc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00e      	beq.n	8005208 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	689a      	ldr	r2, [r3, #8]
 80051ee:	4b4e      	ldr	r3, [pc, #312]	; (8005328 <ETH_Prepare_Tx_Descriptors+0x238>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	6992      	ldr	r2, [r2, #24]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0304 	and.w	r3, r3, #4
 8005210:	2b00      	cmp	r3, #0
 8005212:	d105      	bne.n	8005220 <ETH_Prepare_Tx_Descriptors+0x130>
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0310 	and.w	r3, r3, #16
 800521c:	2b00      	cmp	r3, #0
 800521e:	d030      	beq.n	8005282 <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8005220:	6a3b      	ldr	r3, [r7, #32]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005234:	6a3b      	ldr	r3, [r7, #32]
 8005236:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800523a:	3301      	adds	r3, #1
 800523c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800523e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005240:	2b03      	cmp	r3, #3
 8005242:	d902      	bls.n	800524a <ETH_Prepare_Tx_Descriptors+0x15a>
 8005244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005246:	3b04      	subs	r3, #4
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005252:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8005254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005256:	3301      	adds	r3, #1
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005262:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005266:	d10c      	bne.n	8005282 <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005270:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8005272:	6a3b      	ldr	r3, [r7, #32]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800527e:	2302      	movs	r3, #2
 8005280:	e1ad      	b.n	80055de <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 8005282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005284:	3301      	adds	r3, #1
 8005286:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	6a3b      	ldr	r3, [r7, #32]
 8005290:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8005292:	6a3b      	ldr	r3, [r7, #32]
 8005294:	689a      	ldr	r2, [r3, #8]
 8005296:	4b24      	ldr	r3, [pc, #144]	; (8005328 <ETH_Prepare_Tx_Descriptors+0x238>)
 8005298:	4013      	ands	r3, r2
 800529a:	69fa      	ldr	r2, [r7, #28]
 800529c:	6852      	ldr	r2, [r2, #4]
 800529e:	431a      	orrs	r2, r3
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d012      	beq.n	80052d2 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	461a      	mov	r2, r3
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	4b1a      	ldr	r3, [pc, #104]	; (800532c <ETH_Prepare_Tx_Descriptors+0x23c>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	69fa      	ldr	r2, [r7, #28]
 80052c6:	6852      	ldr	r2, [r2, #4]
 80052c8:	0412      	lsls	r2, r2, #16
 80052ca:	431a      	orrs	r2, r3
 80052cc:	6a3b      	ldr	r3, [r7, #32]
 80052ce:	609a      	str	r2, [r3, #8]
 80052d0:	e008      	b.n	80052e4 <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	2200      	movs	r2, #0
 80052d6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	4b13      	ldr	r3, [pc, #76]	; (800532c <ETH_Prepare_Tx_Descriptors+0x23c>)
 80052de:	4013      	ands	r3, r2
 80052e0:	6a3a      	ldr	r2, [r7, #32]
 80052e2:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0310 	and.w	r3, r3, #16
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d021      	beq.n	8005334 <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6a1b      	ldr	r3, [r3, #32]
 80052fc:	04db      	lsls	r3, r3, #19
 80052fe:	431a      	orrs	r2, r3
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	68da      	ldr	r2, [r3, #12]
 8005308:	4b09      	ldr	r3, [pc, #36]	; (8005330 <ETH_Prepare_Tx_Descriptors+0x240>)
 800530a:	4013      	ands	r3, r2
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	69d2      	ldr	r2, [r2, #28]
 8005310:	431a      	orrs	r2, r3
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8005316:	6a3b      	ldr	r3, [r7, #32]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	60da      	str	r2, [r3, #12]
 8005322:	e02e      	b.n	8005382 <ETH_Prepare_Tx_Descriptors+0x292>
 8005324:	ffff0000 	.word	0xffff0000
 8005328:	ffffc000 	.word	0xffffc000
 800532c:	c000ffff 	.word	0xc000ffff
 8005330:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8005334:	6a3b      	ldr	r3, [r7, #32]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	4b93      	ldr	r3, [pc, #588]	; (8005588 <ETH_Prepare_Tx_Descriptors+0x498>)
 800533a:	4013      	ands	r3, r2
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	6852      	ldr	r2, [r2, #4]
 8005340:	431a      	orrs	r2, r3
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	d008      	beq.n	8005364 <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	431a      	orrs	r2, r3
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0320 	and.w	r3, r3, #32
 800536c:	2b00      	cmp	r3, #0
 800536e:	d008      	beq.n	8005382 <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	431a      	orrs	r2, r3
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0304 	and.w	r3, r3, #4
 800538a:	2b00      	cmp	r3, #0
 800538c:	d008      	beq.n	80053a0 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800538e:	6a3b      	ldr	r3, [r7, #32]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	431a      	orrs	r2, r3
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80053ac:	6a3b      	ldr	r3, [r7, #32]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80053b8:	6a3b      	ldr	r3, [r7, #32]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80053c0:	6a3b      	ldr	r3, [r7, #32]
 80053c2:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0302 	and.w	r3, r3, #2
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 80cb 	beq.w	8005568 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	431a      	orrs	r2, r3
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80053e4:	e0c0      	b.n	8005568 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	3301      	adds	r3, #1
 80053f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053fa:	2b03      	cmp	r3, #3
 80053fc:	d902      	bls.n	8005404 <ETH_Prepare_Tx_Descriptors+0x314>
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	3b04      	subs	r3, #4
 8005402:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800540c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005422:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005426:	d007      	beq.n	8005438 <ETH_Prepare_Tx_Descriptors+0x348>
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	3304      	adds	r3, #4
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d026      	beq.n	8005486 <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005444:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8005446:	2300      	movs	r3, #0
 8005448:	627b      	str	r3, [r7, #36]	; 0x24
 800544a:	e016      	b.n	800547a <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800544c:	6a3b      	ldr	r3, [r7, #32]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005454:	6a3b      	ldr	r3, [r7, #32]
 8005456:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545a:	3301      	adds	r3, #1
 800545c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	2b03      	cmp	r3, #3
 8005462:	d902      	bls.n	800546a <ETH_Prepare_Tx_Descriptors+0x37a>
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	3b04      	subs	r3, #4
 8005468:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005472:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	3301      	adds	r3, #1
 8005478:	627b      	str	r3, [r7, #36]	; 0x24
 800547a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	429a      	cmp	r2, r3
 8005480:	d3e4      	bcc.n	800544c <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8005482:	2302      	movs	r3, #2
 8005484:	e0ab      	b.n	80055de <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8005486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005488:	3301      	adds	r3, #1
 800548a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	461a      	mov	r2, r3
 8005498:	6a3b      	ldr	r3, [r7, #32]
 800549a:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800549c:	6a3b      	ldr	r3, [r7, #32]
 800549e:	689a      	ldr	r2, [r3, #8]
 80054a0:	4b3a      	ldr	r3, [pc, #232]	; (800558c <ETH_Prepare_Tx_Descriptors+0x49c>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	6852      	ldr	r2, [r2, #4]
 80054a8:	431a      	orrs	r2, r3
 80054aa:	6a3b      	ldr	r3, [r7, #32]
 80054ac:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d012      	beq.n	80054dc <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	4b31      	ldr	r3, [pc, #196]	; (8005590 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	6852      	ldr	r2, [r2, #4]
 80054d2:	0412      	lsls	r2, r2, #16
 80054d4:	431a      	orrs	r2, r3
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	609a      	str	r2, [r3, #8]
 80054da:	e008      	b.n	80054ee <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80054dc:	6a3b      	ldr	r3, [r7, #32]
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	689a      	ldr	r2, [r3, #8]
 80054e6:	4b2a      	ldr	r3, [pc, #168]	; (8005590 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 80054e8:	4013      	ands	r3, r2
 80054ea:	6a3a      	ldr	r2, [r7, #32]
 80054ec:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0310 	and.w	r3, r3, #16
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00f      	beq.n	800551a <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	4b25      	ldr	r3, [pc, #148]	; (8005594 <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8005500:	4013      	ands	r3, r2
 8005502:	68ba      	ldr	r2, [r7, #8]
 8005504:	69d2      	ldr	r2, [r2, #28]
 8005506:	431a      	orrs	r2, r3
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800550c:	6a3b      	ldr	r3, [r7, #32]
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005514:	6a3b      	ldr	r3, [r7, #32]
 8005516:	60da      	str	r2, [r3, #12]
 8005518:	e017      	b.n	800554a <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800551a:	6a3b      	ldr	r3, [r7, #32]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <ETH_Prepare_Tx_Descriptors+0x498>)
 8005520:	4013      	ands	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	6852      	ldr	r2, [r2, #4]
 8005526:	431a      	orrs	r2, r3
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	695b      	ldr	r3, [r3, #20]
 8005544:	431a      	orrs	r2, r3
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	3301      	adds	r3, #1
 800554e:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8005550:	6a3b      	ldr	r3, [r7, #32]
 8005552:	68db      	ldr	r3, [r3, #12]
 8005554:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800555c:	6a3b      	ldr	r3, [r7, #32]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	2b00      	cmp	r3, #0
 800556e:	f47f af3a 	bne.w	80053e6 <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00f      	beq.n	8005598 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	e00e      	b.n	80055a4 <ETH_Prepare_Tx_Descriptors+0x4b4>
 8005586:	bf00      	nop
 8005588:	ffff8000 	.word	0xffff8000
 800558c:	ffffc000 	.word	0xffffc000
 8005590:	c000ffff 	.word	0xc000ffff
 8005594:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80055a4:	6a3b      	ldr	r3, [r7, #32]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b4:	6979      	ldr	r1, [r7, #20]
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	3304      	adds	r3, #4
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	440b      	add	r3, r1
 80055be:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80055c6:	b672      	cpsid	i
}
 80055c8:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	4413      	add	r3, r2
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80055d8:	b662      	cpsie	i
}
 80055da:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3734      	adds	r7, #52	; 0x34
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop

080055ec <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b098      	sub	sp, #96	; 0x60
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80055f4:	4a84      	ldr	r2, [pc, #528]	; (8005808 <HAL_FDCAN_Init+0x21c>)
 80055f6:	f107 030c 	add.w	r3, r7, #12
 80055fa:	4611      	mov	r1, r2
 80055fc:	224c      	movs	r2, #76	; 0x4c
 80055fe:	4618      	mov	r0, r3
 8005600:	f015 fffb 	bl	801b5fa <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e1ca      	b.n	80059a4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a7e      	ldr	r2, [pc, #504]	; (800580c <HAL_FDCAN_Init+0x220>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d106      	bne.n	8005626 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005620:	461a      	mov	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fb fc1c 	bl	8000e78 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	699a      	ldr	r2, [r3, #24]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f022 0210 	bic.w	r2, r2, #16
 800564e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005650:	f7fd fe96 	bl	8003380 <HAL_GetTick>
 8005654:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005656:	e014      	b.n	8005682 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005658:	f7fd fe92 	bl	8003380 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b0a      	cmp	r3, #10
 8005664:	d90d      	bls.n	8005682 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800566c:	f043 0201 	orr.w	r2, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2203      	movs	r2, #3
 800567a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e190      	b.n	80059a4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	699b      	ldr	r3, [r3, #24]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d0e3      	beq.n	8005658 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	699a      	ldr	r2, [r3, #24]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0201 	orr.w	r2, r2, #1
 800569e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80056a0:	f7fd fe6e 	bl	8003380 <HAL_GetTick>
 80056a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80056a6:	e014      	b.n	80056d2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80056a8:	f7fd fe6a 	bl	8003380 <HAL_GetTick>
 80056ac:	4602      	mov	r2, r0
 80056ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	2b0a      	cmp	r3, #10
 80056b4:	d90d      	bls.n	80056d2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056bc:	f043 0201 	orr.w	r2, r3, #1
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2203      	movs	r2, #3
 80056ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e168      	b.n	80059a4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	699b      	ldr	r3, [r3, #24]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0e3      	beq.n	80056a8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699a      	ldr	r2, [r3, #24]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0202 	orr.w	r2, r2, #2
 80056ee:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	7c1b      	ldrb	r3, [r3, #16]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d108      	bne.n	800570a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	699a      	ldr	r2, [r3, #24]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005706:	619a      	str	r2, [r3, #24]
 8005708:	e007      	b.n	800571a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005718:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	7c5b      	ldrb	r3, [r3, #17]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d108      	bne.n	8005734 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	699a      	ldr	r2, [r3, #24]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005730:	619a      	str	r2, [r3, #24]
 8005732:	e007      	b.n	8005744 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005742:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	7c9b      	ldrb	r3, [r3, #18]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d108      	bne.n	800575e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	699a      	ldr	r2, [r3, #24]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800575a:	619a      	str	r2, [r3, #24]
 800575c:	e007      	b.n	800576e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699a      	ldr	r2, [r3, #24]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800576c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	699a      	ldr	r2, [r3, #24]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005792:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691a      	ldr	r2, [r3, #16]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0210 	bic.w	r2, r2, #16
 80057a2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d108      	bne.n	80057be <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0204 	orr.w	r2, r2, #4
 80057ba:	619a      	str	r2, [r3, #24]
 80057bc:	e030      	b.n	8005820 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d02c      	beq.n	8005820 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d020      	beq.n	8005810 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	699a      	ldr	r2, [r3, #24]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80057dc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	691a      	ldr	r2, [r3, #16]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f042 0210 	orr.w	r2, r2, #16
 80057ec:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	2b03      	cmp	r3, #3
 80057f4:	d114      	bne.n	8005820 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	699a      	ldr	r2, [r3, #24]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0220 	orr.w	r2, r2, #32
 8005804:	619a      	str	r2, [r3, #24]
 8005806:	e00b      	b.n	8005820 <HAL_FDCAN_Init+0x234>
 8005808:	0801c78c 	.word	0x0801c78c
 800580c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	699a      	ldr	r2, [r3, #24]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f042 0220 	orr.w	r2, r2, #32
 800581e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	699b      	ldr	r3, [r3, #24]
 8005824:	3b01      	subs	r3, #1
 8005826:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	3b01      	subs	r3, #1
 800582e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005830:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
 8005836:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005838:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	695b      	ldr	r3, [r3, #20]
 8005840:	3b01      	subs	r3, #1
 8005842:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005848:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800584a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005854:	d115      	bne.n	8005882 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005860:	3b01      	subs	r3, #1
 8005862:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005864:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586a:	3b01      	subs	r3, #1
 800586c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800586e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005876:	3b01      	subs	r3, #1
 8005878:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800587e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005880:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005886:	2b00      	cmp	r3, #0
 8005888:	d00a      	beq.n	80058a0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a8:	4413      	add	r3, r2
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d012      	beq.n	80058d4 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80058b6:	f023 0107 	bic.w	r1, r3, #7
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80058be:	009b      	lsls	r3, r3, #2
 80058c0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058c4:	4413      	add	r3, r2
 80058c6:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	430a      	orrs	r2, r1
 80058d0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d012      	beq.n	8005902 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80058e4:	f023 0107 	bic.w	r1, r3, #7
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80058f2:	4413      	add	r3, r2
 80058f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	430a      	orrs	r2, r1
 80058fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005906:	2b00      	cmp	r3, #0
 8005908:	d013      	beq.n	8005932 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005912:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005920:	4413      	add	r3, r2
 8005922:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005926:	011a      	lsls	r2, r3, #4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005936:	2b00      	cmp	r3, #0
 8005938:	d013      	beq.n	8005962 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005942:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005950:	4413      	add	r3, r2
 8005952:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005956:	021a      	lsls	r2, r3, #8
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a11      	ldr	r2, [pc, #68]	; (80059ac <HAL_FDCAN_Init+0x3c0>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d107      	bne.n	800597c <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	689a      	ldr	r2, [r3, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f022 0203 	bic.w	r2, r2, #3
 800597a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 fe73 	bl	8006680 <FDCAN_CalcultateRamBlockAddresses>
 800599a:	4603      	mov	r3, r0
 800599c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80059a0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3760      	adds	r7, #96	; 0x60
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	4000a000 	.word	0x4000a000

080059b0 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80059c0:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d002      	beq.n	80059ce <HAL_FDCAN_ConfigFilter+0x1e>
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	2b02      	cmp	r3, #2
 80059cc:	d157      	bne.n	8005a7e <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d12b      	bne.n	8005a2e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	2b07      	cmp	r3, #7
 80059dc:	d10d      	bne.n	80059fa <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	691b      	ldr	r3, [r3, #16]
 80059e2:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	69db      	ldr	r3, [r3, #28]
 80059e8:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80059ea:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80059f0:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80059f2:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	e00e      	b.n	8005a18 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a06:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8005a0e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e025      	b.n	8005a7a <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	075a      	lsls	r2, r3, #29
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	2b07      	cmp	r3, #7
 8005a42:	d103      	bne.n	8005a4c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	699b      	ldr	r3, [r3, #24]
 8005a48:	613b      	str	r3, [r7, #16]
 8005a4a:	e006      	b.n	8005a5a <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	079a      	lsls	r2, r3, #30
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	00db      	lsls	r3, r3, #3
 8005a64:	4413      	add	r3, r2
 8005a66:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	3304      	adds	r3, #4
 8005a72:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	693a      	ldr	r2, [r7, #16]
 8005a78:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	e008      	b.n	8005a90 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a84:	f043 0202 	orr.w	r2, r3, #2
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d110      	bne.n	8005ad8 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005abe:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005ac4:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005acc:	69ba      	ldr	r2, [r7, #24]
 8005ace:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005ad0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	e008      	b.n	8005aea <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ade:	f043 0204 	orr.w	r2, r3, #4
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3714      	adds	r7, #20
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_FDCAN_ConfigFifoWatermark>:
  *           - 0 and 32, if FIFO is FDCAN_CFG_TX_EVENT_FIFO
  *           - 0 and 64, if FIFO is FDCAN_CFG_RX_FIFO0 or FDCAN_CFG_RX_FIFO1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFifoWatermark(FDCAN_HandleTypeDef *hfdcan, uint32_t FIFO, uint32_t Watermark)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	60f8      	str	r0, [r7, #12]
 8005afe:	60b9      	str	r1, [r7, #8]
 8005b00:	607a      	str	r2, [r7, #4]
  else /* (FIFO == FDCAN_CFG_RX_FIFO0) || (FIFO == FDCAN_CFG_RX_FIFO1) */
  {
    assert_param(IS_FDCAN_MAX_VALUE(Watermark, 64U));
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d130      	bne.n	8005b70 <HAL_FDCAN_ConfigFifoWatermark+0x7a>
  {
    /* Set the level for FIFO watermark interrupt */
    if (FIFO == FDCAN_CFG_TX_EVENT_FIFO)
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10d      	bne.n	8005b30 <HAL_FDCAN_ConfigFifoWatermark+0x3a>
    {
      MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFWM, (Watermark << FDCAN_TXEFC_EFWM_Pos));
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005b1c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	061a      	lsls	r2, r3, #24
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	430a      	orrs	r2, r1
 8005b2a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8005b2e:	e01d      	b.n	8005b6c <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else if (FIFO == FDCAN_CFG_RX_FIFO0)
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10d      	bne.n	8005b52 <HAL_FDCAN_ConfigFifoWatermark+0x5c>
    {
      MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0WM, (Watermark << FDCAN_RXF0C_F0WM_Pos));
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005b3e:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	061a      	lsls	r2, r3, #24
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005b50:	e00c      	b.n	8005b6c <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else /* FIFO == FDCAN_CFG_RX_FIFO1 */
    {
      MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1WM, (Watermark << FDCAN_RXF1C_F1WM_Pos));
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005b5a:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	061a      	lsls	r2, r3, #24
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Return function status */
    return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e008      	b.n	8005b82 <HAL_FDCAN_ConfigFifoWatermark+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b76:	f043 0204 	orr.w	r2, r3, #4
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b083      	sub	sp, #12
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d111      	bne.n	8005bc6 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	e008      	b.n	8005bd8 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bcc:	f043 0204 	orr.w	r2, r3, #4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005bd6:	2301      	movs	r3, #1
  }
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	370c      	adds	r7, #12
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2b02      	cmp	r3, #2
 8005bfa:	d141      	bne.n	8005c80 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005c04:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d109      	bne.n	8005c20 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c12:	f043 0220 	orr.w	r2, r3, #32
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e038      	b.n	8005c92 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005c28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d009      	beq.n	8005c44 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c36:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005c40:	2301      	movs	r3, #1
 8005c42:	e026      	b.n	8005c92 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005c4c:	0c1b      	lsrs	r3, r3, #16
 8005c4e:	f003 031f 	and.w	r3, r3, #31
 8005c52:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f000 fe96 	bl	800698c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2101      	movs	r1, #1
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	fa01 f202 	lsl.w	r2, r1, r2
 8005c6c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005c70:	2201      	movs	r2, #1
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	409a      	lsls	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e008      	b.n	8005c92 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c86:	f043 0208 	orr.w	r2, r3, #8
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
  }
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
	...

08005c9c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b08b      	sub	sp, #44	; 0x2c
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005caa:	2300      	movs	r3, #0
 8005cac:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005cb4:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8005cb6:	7efb      	ldrb	r3, [r7, #27]
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	f040 814b 	bne.w	8005f54 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b40      	cmp	r3, #64	; 0x40
 8005cc2:	d14d      	bne.n	8005d60 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ccc:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d109      	bne.n	8005ce8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cda:	f043 0220 	orr.w	r2, r3, #32
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e13e      	b.n	8005f66 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d109      	bne.n	8005d0c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005cfe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e12c      	b.n	8005f66 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d14:	0e1b      	lsrs	r3, r3, #24
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d10b      	bne.n	8005d36 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005d26:	0fdb      	lsrs	r3, r3, #31
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d30:	d101      	bne.n	8005d36 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005d32:	2301      	movs	r3, #1
 8005d34:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d3e:	0a1b      	lsrs	r3, r3, #8
 8005d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	4413      	add	r3, r2
 8005d48:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d52:	69f9      	ldr	r1, [r7, #28]
 8005d54:	fb01 f303 	mul.w	r3, r1, r3
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d5e:	e069      	b.n	8005e34 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b41      	cmp	r3, #65	; 0x41
 8005d64:	d14d      	bne.n	8005e02 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d7c:	f043 0220 	orr.w	r2, r3, #32
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e0ed      	b.n	8005f66 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005d92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d109      	bne.n	8005dae <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005da0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e0db      	b.n	8005f66 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005db6:	0e1b      	lsrs	r3, r3, #24
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d10b      	bne.n	8005dd8 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005dc8:	0fdb      	lsrs	r3, r3, #31
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dd2:	d101      	bne.n	8005dd8 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005de0:	0a1b      	lsrs	r3, r3, #8
 8005de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005de6:	69fa      	ldr	r2, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df4:	69f9      	ldr	r1, [r7, #28]
 8005df6:	fb01 f303 	mul.w	r3, r1, r3
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005e00:	e018      	b.n	8005e34 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e06:	68ba      	ldr	r2, [r7, #8]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d309      	bcc.n	8005e20 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e12:	f043 0220 	orr.w	r2, r3, #32
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e0a2      	b.n	8005f66 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	68b9      	ldr	r1, [r7, #8]
 8005e2a:	fb01 f303 	mul.w	r3, r1, r3
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4413      	add	r3, r2
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d107      	bne.n	8005e58 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	0c9b      	lsrs	r3, r3, #18
 8005e4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	601a      	str	r2, [r3, #0]
 8005e56:	e005      	b.n	8005e64 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7e:	3304      	adds	r3, #4
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	0e1b      	lsrs	r3, r3, #24
 8005eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	0fda      	lsrs	r2, r3, #31
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eca:	3304      	adds	r3, #4
 8005ecc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	623b      	str	r3, [r7, #32]
 8005ed6:	e00a      	b.n	8005eee <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	441a      	add	r2, r3
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	440b      	add	r3, r1
 8005ee4:	7812      	ldrb	r2, [r2, #0]
 8005ee6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	3301      	adds	r3, #1
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	0c1b      	lsrs	r3, r3, #16
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8005ef6:	5cd3      	ldrb	r3, [r2, r3]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d3eb      	bcc.n	8005ed8 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2b40      	cmp	r3, #64	; 0x40
 8005f04:	d105      	bne.n	8005f12 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69fa      	ldr	r2, [r7, #28]
 8005f0c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8005f10:	e01e      	b.n	8005f50 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b41      	cmp	r3, #65	; 0x41
 8005f16:	d105      	bne.n	8005f24 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	69fa      	ldr	r2, [r7, #28]
 8005f1e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8005f22:	e015      	b.n	8005f50 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	2b1f      	cmp	r3, #31
 8005f28:	d808      	bhi.n	8005f3c <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2101      	movs	r1, #1
 8005f30:	68ba      	ldr	r2, [r7, #8]
 8005f32:	fa01 f202 	lsl.w	r2, r1, r2
 8005f36:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005f3a:	e009      	b.n	8005f50 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 021f 	and.w	r2, r3, #31
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2101      	movs	r1, #1
 8005f48:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005f50:	2300      	movs	r3, #0
 8005f52:	e008      	b.n	8005f66 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f5a:	f043 0208 	orr.w	r2, r3, #8
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
  }
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	372c      	adds	r7, #44	; 0x2c
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	0801fbcc 	.word	0x0801fbcc

08005f78 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b087      	sub	sp, #28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005f8a:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d002      	beq.n	8005f98 <HAL_FDCAN_ActivateNotification+0x20>
 8005f92:	7dfb      	ldrb	r3, [r7, #23]
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d155      	bne.n	8006044 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d108      	bne.n	8005fb8 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f042 0201 	orr.w	r2, r2, #1
 8005fb4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fb6:	e014      	b.n	8005fe2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d108      	bne.n	8005fda <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f042 0202 	orr.w	r2, r2, #2
 8005fd6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005fd8:	e003      	b.n	8005fe2 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2203      	movs	r2, #3
 8005fe0:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d009      	beq.n	8006000 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	430a      	orrs	r2, r1
 8005ffc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	430a      	orrs	r2, r1
 800601a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	4b0f      	ldr	r3, [pc, #60]	; (8006064 <HAL_FDCAN_ActivateNotification+0xec>)
 8006028:	4013      	ands	r3, r2
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	6812      	ldr	r2, [r2, #0]
 800602e:	430b      	orrs	r3, r1
 8006030:	6553      	str	r3, [r2, #84]	; 0x54
 8006032:	4b0d      	ldr	r3, [pc, #52]	; (8006068 <HAL_FDCAN_ActivateNotification+0xf0>)
 8006034:	695a      	ldr	r2, [r3, #20]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	0f9b      	lsrs	r3, r3, #30
 800603a:	490b      	ldr	r1, [pc, #44]	; (8006068 <HAL_FDCAN_ActivateNotification+0xf0>)
 800603c:	4313      	orrs	r3, r2
 800603e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8006040:	2300      	movs	r3, #0
 8006042:	e008      	b.n	8006056 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800604a:	f043 0202 	orr.w	r2, r3, #2
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
  }
}
 8006056:	4618      	mov	r0, r3
 8006058:	371c      	adds	r7, #28
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	3fcfffff 	.word	0x3fcfffff
 8006068:	4000a800 	.word	0x4000a800

0800606c <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b092      	sub	sp, #72	; 0x48
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8006074:	4b90      	ldr	r3, [pc, #576]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	079b      	lsls	r3, r3, #30
 800607a:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 800607c:	4b8e      	ldr	r3, [pc, #568]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	079b      	lsls	r3, r3, #30
 8006082:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006084:	4013      	ands	r3, r2
 8006086:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8006092:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800609a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800609c:	4013      	ands	r3, r2
 800609e:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a6:	f003 030f 	and.w	r3, r3, #15
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060b4:	4013      	ands	r3, r2
 80060b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80060c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060cc:	4013      	ands	r3, r2
 80060ce:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d6:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80060da:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060e4:	4013      	ands	r3, r2
 80060e6:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ee:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80060f2:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060fc:	4013      	ands	r3, r2
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800610a:	2b00      	cmp	r3, #0
 800610c:	d011      	beq.n	8006132 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00a      	beq.n	8006132 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006124:	651a      	str	r2, [r3, #80]	; 0x50
 8006126:	4b64      	ldr	r3, [pc, #400]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006128:	2200      	movs	r2, #0
 800612a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 fa5a 	bl	80065e6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800613c:	2b00      	cmp	r3, #0
 800613e:	d01e      	beq.n	800617e <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800614a:	2b00      	cmp	r3, #0
 800614c:	d017      	beq.n	800617e <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006160:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006162:	4013      	ands	r3, r2
 8006164:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800616e:	651a      	str	r2, [r3, #80]	; 0x50
 8006170:	4b51      	ldr	r3, [pc, #324]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006172:	2200      	movs	r2, #0
 8006174:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006176:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 fa0b 	bl	8006594 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800617e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006180:	2b00      	cmp	r3, #0
 8006182:	d00d      	beq.n	80061a0 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800618a:	4b4c      	ldr	r3, [pc, #304]	; (80062bc <HAL_FDCAN_IRQHandler+0x250>)
 800618c:	400b      	ands	r3, r1
 800618e:	6513      	str	r3, [r2, #80]	; 0x50
 8006190:	4a49      	ldr	r2, [pc, #292]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006194:	0f9b      	lsrs	r3, r3, #30
 8006196:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8006198:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 f9c4 	bl	8006528 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80061a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00d      	beq.n	80061c2 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061ac:	4b43      	ldr	r3, [pc, #268]	; (80062bc <HAL_FDCAN_IRQHandler+0x250>)
 80061ae:	400b      	ands	r3, r1
 80061b0:	6513      	str	r3, [r2, #80]	; 0x50
 80061b2:	4a41      	ldr	r2, [pc, #260]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 80061b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b6:	0f9b      	lsrs	r3, r3, #30
 80061b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80061ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f9be 	bl	800653e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80061c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d00d      	beq.n	80061e4 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061ce:	4b3b      	ldr	r3, [pc, #236]	; (80062bc <HAL_FDCAN_IRQHandler+0x250>)
 80061d0:	400b      	ands	r3, r1
 80061d2:	6513      	str	r3, [r2, #80]	; 0x50
 80061d4:	4a38      	ldr	r2, [pc, #224]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 80061d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061d8:	0f9b      	lsrs	r3, r3, #30
 80061da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80061dc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fa ff32 	bl	8001048 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80061e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80061f0:	4b32      	ldr	r3, [pc, #200]	; (80062bc <HAL_FDCAN_IRQHandler+0x250>)
 80061f2:	400b      	ands	r3, r1
 80061f4:	6513      	str	r3, [r2, #80]	; 0x50
 80061f6:	4a30      	ldr	r2, [pc, #192]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 80061f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061fa:	0f9b      	lsrs	r3, r3, #30
 80061fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80061fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 f9a7 	bl	8006554 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006210:	2b00      	cmp	r3, #0
 8006212:	d011      	beq.n	8006238 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800621a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800622a:	651a      	str	r2, [r3, #80]	; 0x50
 800622c:	4b22      	ldr	r3, [pc, #136]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 800622e:	2200      	movs	r2, #0
 8006230:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f999 	bl	800656a <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006242:	2b00      	cmp	r3, #0
 8006244:	d01e      	beq.n	8006284 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800624c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006250:	2b00      	cmp	r3, #0
 8006252:	d017      	beq.n	8006284 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006268:	4013      	ands	r3, r2
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006274:	651a      	str	r2, [r3, #80]	; 0x50
 8006276:	4b10      	ldr	r3, [pc, #64]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 8006278:	2200      	movs	r2, #0
 800627a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800627c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f97d 	bl	800657e <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800628e:	2b00      	cmp	r3, #0
 8006290:	d016      	beq.n	80062c0 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006298:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d00f      	beq.n	80062c0 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80062a8:	651a      	str	r2, [r3, #80]	; 0x50
 80062aa:	4b03      	ldr	r3, [pc, #12]	; (80062b8 <HAL_FDCAN_IRQHandler+0x24c>)
 80062ac:	2200      	movs	r2, #0
 80062ae:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 f97a 	bl	80065aa <HAL_FDCAN_RxBufferNewMessageCallback>
 80062b6:	e003      	b.n	80062c0 <HAL_FDCAN_IRQHandler+0x254>
 80062b8:	4000a800 	.word	0x4000a800
 80062bc:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d011      	beq.n	80062f2 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d00a      	beq.n	80062f2 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80062e4:	651a      	str	r2, [r3, #80]	; 0x50
 80062e6:	4b8d      	ldr	r3, [pc, #564]	; (800651c <HAL_FDCAN_IRQHandler+0x4b0>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f966 	bl	80065be <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d011      	beq.n	8006324 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006306:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006316:	651a      	str	r2, [r3, #80]	; 0x50
 8006318:	4b80      	ldr	r3, [pc, #512]	; (800651c <HAL_FDCAN_IRQHandler+0x4b0>)
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f957 	bl	80065d2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800632a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d016      	beq.n	8006360 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d00f      	beq.n	8006360 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006348:	651a      	str	r2, [r3, #80]	; 0x50
 800634a:	4b74      	ldr	r3, [pc, #464]	; (800651c <HAL_FDCAN_IRQHandler+0x4b0>)
 800634c:	2200      	movs	r2, #0
 800634e:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006356:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8006360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00d      	beq.n	8006382 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800636c:	4b6c      	ldr	r3, [pc, #432]	; (8006520 <HAL_FDCAN_IRQHandler+0x4b4>)
 800636e:	400b      	ands	r3, r1
 8006370:	6513      	str	r3, [r2, #80]	; 0x50
 8006372:	4a6a      	ldr	r2, [pc, #424]	; (800651c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006376:	0f9b      	lsrs	r3, r3, #30
 8006378:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800637a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f000 f946 	bl	800660e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8006382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006384:	2b00      	cmp	r3, #0
 8006386:	d011      	beq.n	80063ac <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800638e:	4b64      	ldr	r3, [pc, #400]	; (8006520 <HAL_FDCAN_IRQHandler+0x4b4>)
 8006390:	400b      	ands	r3, r1
 8006392:	6513      	str	r3, [r2, #80]	; 0x50
 8006394:	4a61      	ldr	r2, [pc, #388]	; (800651c <HAL_FDCAN_IRQHandler+0x4b0>)
 8006396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006398:	0f9b      	lsrs	r3, r3, #30
 800639a:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80063a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a4:	431a      	orrs	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a5c      	ldr	r2, [pc, #368]	; (8006524 <HAL_FDCAN_IRQHandler+0x4b8>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	f040 80a6 	bne.w	8006504 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	f003 0303 	and.w	r3, r3, #3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	f000 809e 	beq.w	8006504 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	f003 030f 	and.w	r3, r3, #15
 80063d2:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063dc:	4013      	ands	r3, r2
 80063de:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80063ea:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f2:	6a3a      	ldr	r2, [r7, #32]
 80063f4:	4013      	ands	r3, r2
 80063f6:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8006402:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	4013      	ands	r3, r2
 800640e:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	6a1b      	ldr	r3, [r3, #32]
 8006416:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800641a:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	685b      	ldr	r3, [r3, #4]
 8006420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	4013      	ands	r3, r2
 8006426:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8006432:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4013      	ands	r3, r2
 800643e:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8006440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800644c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800644e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f8e7 	bl	8006624 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	685b      	ldr	r3, [r3, #4]
 8006460:	6a3a      	ldr	r2, [r7, #32]
 8006462:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8006464:	6a39      	ldr	r1, [r7, #32]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f000 f8e7 	bl	800663a <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006476:	2b00      	cmp	r3, #0
 8006478:	d01b      	beq.n	80064b2 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	6a1b      	ldr	r3, [r3, #32]
 8006480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006484:	2b00      	cmp	r3, #0
 8006486:	d014      	beq.n	80064b2 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	685b      	ldr	r3, [r3, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800648e:	0c1b      	lsrs	r3, r3, #16
 8006490:	b29b      	uxth	r3, r3
 8006492:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800649a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800649e:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	685b      	ldr	r3, [r3, #4]
 80064a4:	2240      	movs	r2, #64	; 0x40
 80064a6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 80064a8:	68fa      	ldr	r2, [r7, #12]
 80064aa:	6939      	ldr	r1, [r7, #16]
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 f8cf 	bl	8006650 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d007      	beq.n	80064c8 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	685b      	ldr	r3, [r3, #4]
 80064bc:	69fa      	ldr	r2, [r7, #28]
 80064be:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 80064c0:	69f9      	ldr	r1, [r7, #28]
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f000 f8d0 	bl	8006668 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00b      	beq.n	80064e6 <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	69ba      	ldr	r2, [r7, #24]
 80064d4:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d00b      	beq.n	8006504 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	431a      	orrs	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f873 	bl	80065fa <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8006514:	bf00      	nop
 8006516:	3748      	adds	r7, #72	; 0x48
 8006518:	46bd      	mov	sp, r7
 800651a:	bd80      	pop	{r7, pc}
 800651c:	4000a800 	.word	0x4000a800
 8006520:	3fcfffff 	.word	0x3fcfffff
 8006524:	4000a000 	.word	0x4000a000

08006528 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8006532:	bf00      	nop
 8006534:	370c      	adds	r7, #12
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8006548:	bf00      	nop
 800654a:	370c      	adds	r7, #12
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8006572:	bf00      	nop
 8006574:	370c      	adds	r7, #12
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800657e:	b480      	push	{r7}
 8006580:	b083      	sub	sp, #12
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr

080065aa <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065aa:	b480      	push	{r7}
 80065ac:	b083      	sub	sp, #12
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80065b2:	bf00      	nop
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr

080065be <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]
 8006616:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8006618:	bf00      	nop
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800662e:	bf00      	nop
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8006650:	b480      	push	{r7}
 8006652:	b085      	sub	sp, #20
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800665c:	bf00      	nop
 800665e:	3714      	adds	r7, #20
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr
	...

08006680 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8006680:	b480      	push	{r7}
 8006682:	b085      	sub	sp, #20
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8006696:	4ba7      	ldr	r3, [pc, #668]	; (8006934 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006698:	4013      	ands	r3, r2
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	0091      	lsls	r1, r2, #2
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6812      	ldr	r2, [r2, #0]
 80066a2:	430b      	orrs	r3, r1
 80066a4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066b0:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066b8:	041a      	lsls	r2, r3, #16
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	4413      	add	r3, r2
 80066cc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80066d6:	4b97      	ldr	r3, [pc, #604]	; (8006934 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80066d8:	4013      	ands	r3, r2
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	0091      	lsls	r1, r2, #2
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	430b      	orrs	r3, r1
 80066e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f0:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066f8:	041a      	lsls	r2, r3, #16
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	4413      	add	r3, r2
 800670e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006718:	4b86      	ldr	r3, [pc, #536]	; (8006934 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800671a:	4013      	ands	r3, r2
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	0091      	lsls	r1, r2, #2
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	6812      	ldr	r2, [r2, #0]
 8006724:	430b      	orrs	r3, r1
 8006726:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006732:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800673a:	041a      	lsls	r2, r3, #16
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800674e:	fb02 f303 	mul.w	r3, r2, r3
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	4413      	add	r3, r2
 8006756:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006760:	4b74      	ldr	r3, [pc, #464]	; (8006934 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006762:	4013      	ands	r3, r2
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	0091      	lsls	r1, r2, #2
 8006768:	687a      	ldr	r2, [r7, #4]
 800676a:	6812      	ldr	r2, [r2, #0]
 800676c:	430b      	orrs	r3, r1
 800676e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800677a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006782:	041a      	lsls	r2, r3, #16
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	430a      	orrs	r2, r1
 800678a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006796:	fb02 f303 	mul.w	r3, r2, r3
 800679a:	68ba      	ldr	r2, [r7, #8]
 800679c:	4413      	add	r3, r2
 800679e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80067a8:	4b62      	ldr	r3, [pc, #392]	; (8006934 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067aa:	4013      	ands	r3, r2
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	0091      	lsls	r1, r2, #2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	430b      	orrs	r3, r1
 80067b6:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80067c2:	fb02 f303 	mul.w	r3, r2, r3
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	4413      	add	r3, r2
 80067ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80067d4:	4b57      	ldr	r3, [pc, #348]	; (8006934 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	0091      	lsls	r1, r2, #2
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	6812      	ldr	r2, [r2, #0]
 80067e0:	430b      	orrs	r3, r1
 80067e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80067ee:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f6:	041a      	lsls	r2, r3, #16
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	430a      	orrs	r2, r1
 80067fe:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006806:	005b      	lsls	r3, r3, #1
 8006808:	68ba      	ldr	r2, [r7, #8]
 800680a:	4413      	add	r3, r2
 800680c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006816:	4b47      	ldr	r3, [pc, #284]	; (8006934 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8006818:	4013      	ands	r3, r2
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	0091      	lsls	r1, r2, #2
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	6812      	ldr	r2, [r2, #0]
 8006822:	430b      	orrs	r3, r1
 8006824:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006830:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006838:	041a      	lsls	r2, r3, #16
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	430a      	orrs	r2, r1
 8006840:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800684c:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006854:	061a      	lsls	r2, r3, #24
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006864:	4b34      	ldr	r3, [pc, #208]	; (8006938 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8006866:	4413      	add	r3, r2
 8006868:	009a      	lsls	r2, r3, #2
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006876:	009b      	lsls	r3, r3, #2
 8006878:	441a      	add	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	441a      	add	r2, r3
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	6879      	ldr	r1, [r7, #4]
 8006898:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800689a:	fb01 f303 	mul.w	r3, r1, r3
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ae:	6879      	ldr	r1, [r7, #4]
 80068b0:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80068b2:	fb01 f303 	mul.w	r3, r1, r3
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c6:	6879      	ldr	r1, [r7, #4]
 80068c8:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80068ca:	fb01 f303 	mul.w	r3, r1, r3
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	441a      	add	r2, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	441a      	add	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80068fa:	fb01 f303 	mul.w	r3, r1, r3
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	441a      	add	r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006912:	6879      	ldr	r1, [r7, #4]
 8006914:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8006916:	fb01 f303 	mul.w	r3, r1, r3
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	441a      	add	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800692a:	4a04      	ldr	r2, [pc, #16]	; (800693c <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d915      	bls.n	800695c <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8006930:	e006      	b.n	8006940 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8006932:	bf00      	nop
 8006934:	ffff0003 	.word	0xffff0003
 8006938:	10002b00 	.word	0x10002b00
 800693c:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006946:	f043 0220 	orr.w	r2, r3, #32
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2203      	movs	r2, #3
 8006954:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8006958:	2301      	movs	r3, #1
 800695a:	e010      	b.n	800697e <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006960:	60fb      	str	r3, [r7, #12]
 8006962:	e005      	b.n	8006970 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	3304      	adds	r3, #4
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	429a      	cmp	r2, r3
 800697a:	d3f3      	bcc.n	8006964 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop

0800698c <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800698c:	b480      	push	{r7}
 800698e:	b089      	sub	sp, #36	; 0x24
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	607a      	str	r2, [r7, #4]
 8006998:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d10a      	bne.n	80069b8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80069aa:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069b2:	4313      	orrs	r3, r2
 80069b4:	61fb      	str	r3, [r7, #28]
 80069b6:	e00a      	b.n	80069ce <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80069c0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80069c6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80069c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069cc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80069d8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80069de:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80069e4:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80069f8:	6839      	ldr	r1, [r7, #0]
 80069fa:	fb01 f303 	mul.w	r3, r1, r3
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	4413      	add	r3, r2
 8006a02:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	3304      	adds	r3, #4
 8006a0e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	3304      	adds	r3, #4
 8006a1a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
 8006a20:	e020      	b.n	8006a64 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	3303      	adds	r3, #3
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	4413      	add	r3, r2
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	3302      	adds	r3, #2
 8006a32:	6879      	ldr	r1, [r7, #4]
 8006a34:	440b      	add	r3, r1
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006a3a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	6879      	ldr	r1, [r7, #4]
 8006a42:	440b      	add	r3, r1
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006a48:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006a4a:	6879      	ldr	r1, [r7, #4]
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	440a      	add	r2, r1
 8006a50:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006a52:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	3304      	adds	r3, #4
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	0c1b      	lsrs	r3, r3, #16
 8006a6a:	4a06      	ldr	r2, [pc, #24]	; (8006a84 <FDCAN_CopyMessageToRAM+0xf8>)
 8006a6c:	5cd3      	ldrb	r3, [r2, r3]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d3d5      	bcc.n	8006a22 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8006a76:	bf00      	nop
 8006a78:	bf00      	nop
 8006a7a:	3724      	adds	r7, #36	; 0x24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	0801fbcc 	.word	0x0801fbcc

08006a88 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b089      	sub	sp, #36	; 0x24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006a96:	4b86      	ldr	r3, [pc, #536]	; (8006cb0 <HAL_GPIO_Init+0x228>)
 8006a98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006a9a:	e18c      	b.n	8006db6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8006aa8:	4013      	ands	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 817e 	beq.w	8006db0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	f003 0303 	and.w	r3, r3, #3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d005      	beq.n	8006acc <HAL_GPIO_Init+0x44>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	f003 0303 	and.w	r3, r3, #3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d130      	bne.n	8006b2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	005b      	lsls	r3, r3, #1
 8006ad6:	2203      	movs	r2, #3
 8006ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8006adc:	43db      	mvns	r3, r3
 8006ade:	69ba      	ldr	r2, [r7, #24]
 8006ae0:	4013      	ands	r3, r2
 8006ae2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	005b      	lsls	r3, r3, #1
 8006aec:	fa02 f303 	lsl.w	r3, r2, r3
 8006af0:	69ba      	ldr	r2, [r7, #24]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	69ba      	ldr	r2, [r7, #24]
 8006afa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006b02:	2201      	movs	r2, #1
 8006b04:	69fb      	ldr	r3, [r7, #28]
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685b      	ldr	r3, [r3, #4]
 8006b16:	091b      	lsrs	r3, r3, #4
 8006b18:	f003 0201 	and.w	r2, r3, #1
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b22:	69ba      	ldr	r2, [r7, #24]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	69ba      	ldr	r2, [r7, #24]
 8006b2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d017      	beq.n	8006b6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	2203      	movs	r2, #3
 8006b46:	fa02 f303 	lsl.w	r3, r2, r3
 8006b4a:	43db      	mvns	r3, r3
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	4013      	ands	r3, r2
 8006b50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	689a      	ldr	r2, [r3, #8]
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	005b      	lsls	r3, r3, #1
 8006b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	69ba      	ldr	r2, [r7, #24]
 8006b68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	2b02      	cmp	r3, #2
 8006b74:	d123      	bne.n	8006bbe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006b76:	69fb      	ldr	r3, [r7, #28]
 8006b78:	08da      	lsrs	r2, r3, #3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	3208      	adds	r2, #8
 8006b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	220f      	movs	r2, #15
 8006b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b92:	43db      	mvns	r3, r3
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	4013      	ands	r3, r2
 8006b98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	691a      	ldr	r2, [r3, #16]
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	f003 0307 	and.w	r3, r3, #7
 8006ba4:	009b      	lsls	r3, r3, #2
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	08da      	lsrs	r2, r3, #3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	3208      	adds	r2, #8
 8006bb8:	69b9      	ldr	r1, [r7, #24]
 8006bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	005b      	lsls	r3, r3, #1
 8006bc8:	2203      	movs	r2, #3
 8006bca:	fa02 f303 	lsl.w	r3, r2, r3
 8006bce:	43db      	mvns	r3, r3
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	4013      	ands	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f003 0203 	and.w	r2, r3, #3
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	005b      	lsls	r3, r3, #1
 8006be2:	fa02 f303 	lsl.w	r3, r2, r3
 8006be6:	69ba      	ldr	r2, [r7, #24]
 8006be8:	4313      	orrs	r3, r2
 8006bea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80d8 	beq.w	8006db0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c00:	4b2c      	ldr	r3, [pc, #176]	; (8006cb4 <HAL_GPIO_Init+0x22c>)
 8006c02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c06:	4a2b      	ldr	r2, [pc, #172]	; (8006cb4 <HAL_GPIO_Init+0x22c>)
 8006c08:	f043 0302 	orr.w	r3, r3, #2
 8006c0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006c10:	4b28      	ldr	r3, [pc, #160]	; (8006cb4 <HAL_GPIO_Init+0x22c>)
 8006c12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006c16:	f003 0302 	and.w	r3, r3, #2
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006c1e:	4a26      	ldr	r2, [pc, #152]	; (8006cb8 <HAL_GPIO_Init+0x230>)
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	089b      	lsrs	r3, r3, #2
 8006c24:	3302      	adds	r3, #2
 8006c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	220f      	movs	r2, #15
 8006c36:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3a:	43db      	mvns	r3, r3
 8006c3c:	69ba      	ldr	r2, [r7, #24]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a1d      	ldr	r2, [pc, #116]	; (8006cbc <HAL_GPIO_Init+0x234>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d04a      	beq.n	8006ce0 <HAL_GPIO_Init+0x258>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a1c      	ldr	r2, [pc, #112]	; (8006cc0 <HAL_GPIO_Init+0x238>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d02b      	beq.n	8006caa <HAL_GPIO_Init+0x222>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <HAL_GPIO_Init+0x23c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d025      	beq.n	8006ca6 <HAL_GPIO_Init+0x21e>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <HAL_GPIO_Init+0x240>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d01f      	beq.n	8006ca2 <HAL_GPIO_Init+0x21a>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a19      	ldr	r2, [pc, #100]	; (8006ccc <HAL_GPIO_Init+0x244>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d019      	beq.n	8006c9e <HAL_GPIO_Init+0x216>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a18      	ldr	r2, [pc, #96]	; (8006cd0 <HAL_GPIO_Init+0x248>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d013      	beq.n	8006c9a <HAL_GPIO_Init+0x212>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a17      	ldr	r2, [pc, #92]	; (8006cd4 <HAL_GPIO_Init+0x24c>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d00d      	beq.n	8006c96 <HAL_GPIO_Init+0x20e>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a16      	ldr	r2, [pc, #88]	; (8006cd8 <HAL_GPIO_Init+0x250>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d007      	beq.n	8006c92 <HAL_GPIO_Init+0x20a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a15      	ldr	r2, [pc, #84]	; (8006cdc <HAL_GPIO_Init+0x254>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d101      	bne.n	8006c8e <HAL_GPIO_Init+0x206>
 8006c8a:	2309      	movs	r3, #9
 8006c8c:	e029      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006c8e:	230a      	movs	r3, #10
 8006c90:	e027      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006c92:	2307      	movs	r3, #7
 8006c94:	e025      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006c96:	2306      	movs	r3, #6
 8006c98:	e023      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006c9a:	2305      	movs	r3, #5
 8006c9c:	e021      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006c9e:	2304      	movs	r3, #4
 8006ca0:	e01f      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006ca2:	2303      	movs	r3, #3
 8006ca4:	e01d      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006ca6:	2302      	movs	r3, #2
 8006ca8:	e01b      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006caa:	2301      	movs	r3, #1
 8006cac:	e019      	b.n	8006ce2 <HAL_GPIO_Init+0x25a>
 8006cae:	bf00      	nop
 8006cb0:	58000080 	.word	0x58000080
 8006cb4:	58024400 	.word	0x58024400
 8006cb8:	58000400 	.word	0x58000400
 8006cbc:	58020000 	.word	0x58020000
 8006cc0:	58020400 	.word	0x58020400
 8006cc4:	58020800 	.word	0x58020800
 8006cc8:	58020c00 	.word	0x58020c00
 8006ccc:	58021000 	.word	0x58021000
 8006cd0:	58021400 	.word	0x58021400
 8006cd4:	58021800 	.word	0x58021800
 8006cd8:	58021c00 	.word	0x58021c00
 8006cdc:	58022400 	.word	0x58022400
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	f002 0203 	and.w	r2, r2, #3
 8006ce8:	0092      	lsls	r2, r2, #2
 8006cea:	4093      	lsls	r3, r2
 8006cec:	69ba      	ldr	r2, [r7, #24]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006cf2:	4938      	ldr	r1, [pc, #224]	; (8006dd4 <HAL_GPIO_Init+0x34c>)
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	089b      	lsrs	r3, r3, #2
 8006cf8:	3302      	adds	r3, #2
 8006cfa:	69ba      	ldr	r2, [r7, #24]
 8006cfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	43db      	mvns	r3, r3
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006d26:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8006d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006d32:	685b      	ldr	r3, [r3, #4]
 8006d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	43db      	mvns	r3, r3
 8006d3a:	69ba      	ldr	r2, [r7, #24]
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	685b      	ldr	r3, [r3, #4]
 8006d44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006d54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	43db      	mvns	r3, r3
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	43db      	mvns	r3, r3
 8006d90:	69ba      	ldr	r2, [r7, #24]
 8006d92:	4013      	ands	r3, r2
 8006d94:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006daa:	697b      	ldr	r3, [r7, #20]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	3301      	adds	r3, #1
 8006db4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f47f ae6b 	bne.w	8006a9c <HAL_GPIO_Init+0x14>
  }
}
 8006dc6:	bf00      	nop
 8006dc8:	bf00      	nop
 8006dca:	3724      	adds	r7, #36	; 0x24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr
 8006dd4:	58000400 	.word	0x58000400

08006dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	807b      	strh	r3, [r7, #2]
 8006de4:	4613      	mov	r3, r2
 8006de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006de8:	787b      	ldrb	r3, [r7, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006df4:	e003      	b.n	8006dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006df6:	887b      	ldrh	r3, [r7, #2]
 8006df8:	041a      	lsls	r2, r3, #16
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	619a      	str	r2, [r3, #24]
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e1c:	887a      	ldrh	r2, [r7, #2]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4013      	ands	r3, r2
 8006e22:	041a      	lsls	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	43d9      	mvns	r1, r3
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	400b      	ands	r3, r1
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	619a      	str	r2, [r3, #24]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e3e:	b580      	push	{r7, lr}
 8006e40:	b082      	sub	sp, #8
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	4603      	mov	r3, r0
 8006e46:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006e48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006e4c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006e50:	88fb      	ldrh	r3, [r7, #6]
 8006e52:	4013      	ands	r3, r2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d008      	beq.n	8006e6a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e58:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fb f881 	bl	8001f6c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006e6a:	bf00      	nop
 8006e6c:	3708      	adds	r7, #8
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e7c:	4b19      	ldr	r3, [pc, #100]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b04      	cmp	r3, #4
 8006e86:	d00a      	beq.n	8006e9e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e88:	4b16      	ldr	r3, [pc, #88]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006e8a:	68db      	ldr	r3, [r3, #12]
 8006e8c:	f003 0307 	and.w	r3, r3, #7
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d001      	beq.n	8006e9a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e01f      	b.n	8006eda <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	e01d      	b.n	8006eda <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e9e:	4b11      	ldr	r3, [pc, #68]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	f023 0207 	bic.w	r2, r3, #7
 8006ea6:	490f      	ldr	r1, [pc, #60]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006eae:	f7fc fa67 	bl	8003380 <HAL_GetTick>
 8006eb2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006eb4:	e009      	b.n	8006eca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006eb6:	f7fc fa63 	bl	8003380 <HAL_GetTick>
 8006eba:	4602      	mov	r2, r0
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	1ad3      	subs	r3, r2, r3
 8006ec0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ec4:	d901      	bls.n	8006eca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e007      	b.n	8006eda <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006eca:	4b06      	ldr	r3, [pc, #24]	; (8006ee4 <HAL_PWREx_ConfigSupply+0x70>)
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed6:	d1ee      	bne.n	8006eb6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006ed8:	2300      	movs	r3, #0
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop
 8006ee4:	58024800 	.word	0x58024800

08006ee8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b08c      	sub	sp, #48	; 0x30
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e397      	b.n	800762a <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0301 	and.w	r3, r3, #1
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f000 8087 	beq.w	8007016 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006f08:	4b9e      	ldr	r3, [pc, #632]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006f12:	4b9c      	ldr	r3, [pc, #624]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	2b10      	cmp	r3, #16
 8006f1c:	d007      	beq.n	8006f2e <HAL_RCC_OscConfig+0x46>
 8006f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f20:	2b18      	cmp	r3, #24
 8006f22:	d110      	bne.n	8006f46 <HAL_RCC_OscConfig+0x5e>
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	f003 0303 	and.w	r3, r3, #3
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d10b      	bne.n	8006f46 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f2e:	4b95      	ldr	r3, [pc, #596]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d06c      	beq.n	8007014 <HAL_RCC_OscConfig+0x12c>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d168      	bne.n	8007014 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	e371      	b.n	800762a <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f4e:	d106      	bne.n	8006f5e <HAL_RCC_OscConfig+0x76>
 8006f50:	4b8c      	ldr	r3, [pc, #560]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a8b      	ldr	r2, [pc, #556]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f5a:	6013      	str	r3, [r2, #0]
 8006f5c:	e02e      	b.n	8006fbc <HAL_RCC_OscConfig+0xd4>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d10c      	bne.n	8006f80 <HAL_RCC_OscConfig+0x98>
 8006f66:	4b87      	ldr	r3, [pc, #540]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a86      	ldr	r2, [pc, #536]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f70:	6013      	str	r3, [r2, #0]
 8006f72:	4b84      	ldr	r3, [pc, #528]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	4a83      	ldr	r2, [pc, #524]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f7c:	6013      	str	r3, [r2, #0]
 8006f7e:	e01d      	b.n	8006fbc <HAL_RCC_OscConfig+0xd4>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f88:	d10c      	bne.n	8006fa4 <HAL_RCC_OscConfig+0xbc>
 8006f8a:	4b7e      	ldr	r3, [pc, #504]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a7d      	ldr	r2, [pc, #500]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	4b7b      	ldr	r3, [pc, #492]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a7a      	ldr	r2, [pc, #488]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006f9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e00b      	b.n	8006fbc <HAL_RCC_OscConfig+0xd4>
 8006fa4:	4b77      	ldr	r3, [pc, #476]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a76      	ldr	r2, [pc, #472]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006faa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	4b74      	ldr	r3, [pc, #464]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a73      	ldr	r2, [pc, #460]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006fb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d013      	beq.n	8006fec <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fc4:	f7fc f9dc 	bl	8003380 <HAL_GetTick>
 8006fc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fca:	e008      	b.n	8006fde <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006fcc:	f7fc f9d8 	bl	8003380 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	2b64      	cmp	r3, #100	; 0x64
 8006fd8:	d901      	bls.n	8006fde <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006fda:	2303      	movs	r3, #3
 8006fdc:	e325      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006fde:	4b69      	ldr	r3, [pc, #420]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d0f0      	beq.n	8006fcc <HAL_RCC_OscConfig+0xe4>
 8006fea:	e014      	b.n	8007016 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fec:	f7fc f9c8 	bl	8003380 <HAL_GetTick>
 8006ff0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006ff2:	e008      	b.n	8007006 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006ff4:	f7fc f9c4 	bl	8003380 <HAL_GetTick>
 8006ff8:	4602      	mov	r2, r0
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	2b64      	cmp	r3, #100	; 0x64
 8007000:	d901      	bls.n	8007006 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8007002:	2303      	movs	r3, #3
 8007004:	e311      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007006:	4b5f      	ldr	r3, [pc, #380]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1f0      	bne.n	8006ff4 <HAL_RCC_OscConfig+0x10c>
 8007012:	e000      	b.n	8007016 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007014:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f003 0302 	and.w	r3, r3, #2
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 808a 	beq.w	8007138 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007024:	4b57      	ldr	r3, [pc, #348]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007026:	691b      	ldr	r3, [r3, #16]
 8007028:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800702c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800702e:	4b55      	ldr	r3, [pc, #340]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007032:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007034:	6a3b      	ldr	r3, [r7, #32]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d007      	beq.n	800704a <HAL_RCC_OscConfig+0x162>
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	2b18      	cmp	r3, #24
 800703e:	d137      	bne.n	80070b0 <HAL_RCC_OscConfig+0x1c8>
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	f003 0303 	and.w	r3, r3, #3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d132      	bne.n	80070b0 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800704a:	4b4e      	ldr	r3, [pc, #312]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d005      	beq.n	8007062 <HAL_RCC_OscConfig+0x17a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d101      	bne.n	8007062 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e2e3      	b.n	800762a <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007062:	4b48      	ldr	r3, [pc, #288]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f023 0219 	bic.w	r2, r3, #25
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	4945      	ldr	r1, [pc, #276]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007070:	4313      	orrs	r3, r2
 8007072:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007074:	f7fc f984 	bl	8003380 <HAL_GetTick>
 8007078:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800707c:	f7fc f980 	bl	8003380 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e2cd      	b.n	800762a <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800708e:	4b3d      	ldr	r3, [pc, #244]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 0304 	and.w	r3, r3, #4
 8007096:	2b00      	cmp	r3, #0
 8007098:	d0f0      	beq.n	800707c <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800709a:	4b3a      	ldr	r3, [pc, #232]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	061b      	lsls	r3, r3, #24
 80070a8:	4936      	ldr	r1, [pc, #216]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80070ae:	e043      	b.n	8007138 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	68db      	ldr	r3, [r3, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d026      	beq.n	8007106 <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80070b8:	4b32      	ldr	r3, [pc, #200]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f023 0219 	bic.w	r2, r3, #25
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	492f      	ldr	r1, [pc, #188]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070ca:	f7fc f959 	bl	8003380 <HAL_GetTick>
 80070ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80070d2:	f7fc f955 	bl	8003380 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e2a2      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070e4:	4b27      	ldr	r3, [pc, #156]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d0f0      	beq.n	80070d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070f0:	4b24      	ldr	r3, [pc, #144]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	061b      	lsls	r3, r3, #24
 80070fe:	4921      	ldr	r1, [pc, #132]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007100:	4313      	orrs	r3, r2
 8007102:	604b      	str	r3, [r1, #4]
 8007104:	e018      	b.n	8007138 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007106:	4b1f      	ldr	r3, [pc, #124]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a1e      	ldr	r2, [pc, #120]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 800710c:	f023 0301 	bic.w	r3, r3, #1
 8007110:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007112:	f7fc f935 	bl	8003380 <HAL_GetTick>
 8007116:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007118:	e008      	b.n	800712c <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800711a:	f7fc f931 	bl	8003380 <HAL_GetTick>
 800711e:	4602      	mov	r2, r0
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	1ad3      	subs	r3, r2, r3
 8007124:	2b02      	cmp	r3, #2
 8007126:	d901      	bls.n	800712c <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 8007128:	2303      	movs	r3, #3
 800712a:	e27e      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800712c:	4b15      	ldr	r3, [pc, #84]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f0      	bne.n	800711a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0310 	and.w	r3, r3, #16
 8007140:	2b00      	cmp	r3, #0
 8007142:	d06d      	beq.n	8007220 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800714c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800714e:	4b0d      	ldr	r3, [pc, #52]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	2b08      	cmp	r3, #8
 8007158:	d007      	beq.n	800716a <HAL_RCC_OscConfig+0x282>
 800715a:	69bb      	ldr	r3, [r7, #24]
 800715c:	2b18      	cmp	r3, #24
 800715e:	d11e      	bne.n	800719e <HAL_RCC_OscConfig+0x2b6>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f003 0303 	and.w	r3, r3, #3
 8007166:	2b01      	cmp	r3, #1
 8007168:	d119      	bne.n	800719e <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <HAL_RCC_OscConfig+0x29c>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_RCC_OscConfig+0x2a0>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	69db      	ldr	r3, [r3, #28]
 800717a:	2b80      	cmp	r3, #128	; 0x80
 800717c:	d004      	beq.n	8007188 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e253      	b.n	800762a <HAL_RCC_OscConfig+0x742>
 8007182:	bf00      	nop
 8007184:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007188:	4ba3      	ldr	r3, [pc, #652]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 800718a:	68db      	ldr	r3, [r3, #12]
 800718c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6a1b      	ldr	r3, [r3, #32]
 8007194:	061b      	lsls	r3, r3, #24
 8007196:	49a0      	ldr	r1, [pc, #640]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007198:	4313      	orrs	r3, r2
 800719a:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800719c:	e040      	b.n	8007220 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d023      	beq.n	80071ee <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071a6:	4b9c      	ldr	r3, [pc, #624]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a9b      	ldr	r2, [pc, #620]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80071ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071b2:	f7fc f8e5 	bl	8003380 <HAL_GetTick>
 80071b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071b8:	e008      	b.n	80071cc <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80071ba:	f7fc f8e1 	bl	8003380 <HAL_GetTick>
 80071be:	4602      	mov	r2, r0
 80071c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d901      	bls.n	80071cc <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 80071c8:	2303      	movs	r3, #3
 80071ca:	e22e      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80071cc:	4b92      	ldr	r3, [pc, #584]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0f0      	beq.n	80071ba <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071d8:	4b8f      	ldr	r3, [pc, #572]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a1b      	ldr	r3, [r3, #32]
 80071e4:	061b      	lsls	r3, r3, #24
 80071e6:	498c      	ldr	r1, [pc, #560]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60cb      	str	r3, [r1, #12]
 80071ec:	e018      	b.n	8007220 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80071ee:	4b8a      	ldr	r3, [pc, #552]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a89      	ldr	r2, [pc, #548]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80071f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80071f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071fa:	f7fc f8c1 	bl	8003380 <HAL_GetTick>
 80071fe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007200:	e008      	b.n	8007214 <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007202:	f7fc f8bd 	bl	8003380 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b02      	cmp	r3, #2
 800720e:	d901      	bls.n	8007214 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007210:	2303      	movs	r3, #3
 8007212:	e20a      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007214:	4b80      	ldr	r3, [pc, #512]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1f0      	bne.n	8007202 <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	2b00      	cmp	r3, #0
 800722a:	d036      	beq.n	800729a <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	695b      	ldr	r3, [r3, #20]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d019      	beq.n	8007268 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007234:	4b78      	ldr	r3, [pc, #480]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007238:	4a77      	ldr	r2, [pc, #476]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 800723a:	f043 0301 	orr.w	r3, r3, #1
 800723e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007240:	f7fc f89e 	bl	8003380 <HAL_GetTick>
 8007244:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007246:	e008      	b.n	800725a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007248:	f7fc f89a 	bl	8003380 <HAL_GetTick>
 800724c:	4602      	mov	r2, r0
 800724e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007250:	1ad3      	subs	r3, r2, r3
 8007252:	2b02      	cmp	r3, #2
 8007254:	d901      	bls.n	800725a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8007256:	2303      	movs	r3, #3
 8007258:	e1e7      	b.n	800762a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800725a:	4b6f      	ldr	r3, [pc, #444]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 800725c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800725e:	f003 0302 	and.w	r3, r3, #2
 8007262:	2b00      	cmp	r3, #0
 8007264:	d0f0      	beq.n	8007248 <HAL_RCC_OscConfig+0x360>
 8007266:	e018      	b.n	800729a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007268:	4b6b      	ldr	r3, [pc, #428]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 800726a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800726c:	4a6a      	ldr	r2, [pc, #424]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 800726e:	f023 0301 	bic.w	r3, r3, #1
 8007272:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007274:	f7fc f884 	bl	8003380 <HAL_GetTick>
 8007278:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800727c:	f7fc f880 	bl	8003380 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e1cd      	b.n	800762a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800728e:	4b62      	ldr	r3, [pc, #392]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1f0      	bne.n	800727c <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f003 0320 	and.w	r3, r3, #32
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d036      	beq.n	8007314 <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d019      	beq.n	80072e2 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80072ae:	4b5a      	ldr	r3, [pc, #360]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a59      	ldr	r2, [pc, #356]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80072b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80072b8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ba:	f7fc f861 	bl	8003380 <HAL_GetTick>
 80072be:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072c0:	e008      	b.n	80072d4 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072c2:	f7fc f85d 	bl	8003380 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d901      	bls.n	80072d4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80072d0:	2303      	movs	r3, #3
 80072d2:	e1aa      	b.n	800762a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80072d4:	4b50      	ldr	r3, [pc, #320]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0f0      	beq.n	80072c2 <HAL_RCC_OscConfig+0x3da>
 80072e0:	e018      	b.n	8007314 <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80072e2:	4b4d      	ldr	r3, [pc, #308]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a4c      	ldr	r2, [pc, #304]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80072e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072ec:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80072ee:	f7fc f847 	bl	8003380 <HAL_GetTick>
 80072f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80072f4:	e008      	b.n	8007308 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80072f6:	f7fc f843 	bl	8003380 <HAL_GetTick>
 80072fa:	4602      	mov	r2, r0
 80072fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	2b02      	cmp	r3, #2
 8007302:	d901      	bls.n	8007308 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 8007304:	2303      	movs	r3, #3
 8007306:	e190      	b.n	800762a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007308:	4b43      	ldr	r3, [pc, #268]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007310:	2b00      	cmp	r3, #0
 8007312:	d1f0      	bne.n	80072f6 <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0304 	and.w	r3, r3, #4
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8085 	beq.w	800742c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007322:	4b3e      	ldr	r3, [pc, #248]	; (800741c <HAL_RCC_OscConfig+0x534>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a3d      	ldr	r2, [pc, #244]	; (800741c <HAL_RCC_OscConfig+0x534>)
 8007328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800732c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800732e:	f7fc f827 	bl	8003380 <HAL_GetTick>
 8007332:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007334:	e008      	b.n	8007348 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007336:	f7fc f823 	bl	8003380 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b64      	cmp	r3, #100	; 0x64
 8007342:	d901      	bls.n	8007348 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e170      	b.n	800762a <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007348:	4b34      	ldr	r3, [pc, #208]	; (800741c <HAL_RCC_OscConfig+0x534>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d0f0      	beq.n	8007336 <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	2b01      	cmp	r3, #1
 800735a:	d106      	bne.n	800736a <HAL_RCC_OscConfig+0x482>
 800735c:	4b2e      	ldr	r3, [pc, #184]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 800735e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007360:	4a2d      	ldr	r2, [pc, #180]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007362:	f043 0301 	orr.w	r3, r3, #1
 8007366:	6713      	str	r3, [r2, #112]	; 0x70
 8007368:	e02d      	b.n	80073c6 <HAL_RCC_OscConfig+0x4de>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10c      	bne.n	800738c <HAL_RCC_OscConfig+0x4a4>
 8007372:	4b29      	ldr	r3, [pc, #164]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007376:	4a28      	ldr	r2, [pc, #160]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007378:	f023 0301 	bic.w	r3, r3, #1
 800737c:	6713      	str	r3, [r2, #112]	; 0x70
 800737e:	4b26      	ldr	r3, [pc, #152]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007382:	4a25      	ldr	r2, [pc, #148]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007384:	f023 0304 	bic.w	r3, r3, #4
 8007388:	6713      	str	r3, [r2, #112]	; 0x70
 800738a:	e01c      	b.n	80073c6 <HAL_RCC_OscConfig+0x4de>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	2b05      	cmp	r3, #5
 8007392:	d10c      	bne.n	80073ae <HAL_RCC_OscConfig+0x4c6>
 8007394:	4b20      	ldr	r3, [pc, #128]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 8007396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007398:	4a1f      	ldr	r2, [pc, #124]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 800739a:	f043 0304 	orr.w	r3, r3, #4
 800739e:	6713      	str	r3, [r2, #112]	; 0x70
 80073a0:	4b1d      	ldr	r3, [pc, #116]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a4:	4a1c      	ldr	r2, [pc, #112]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80073a6:	f043 0301 	orr.w	r3, r3, #1
 80073aa:	6713      	str	r3, [r2, #112]	; 0x70
 80073ac:	e00b      	b.n	80073c6 <HAL_RCC_OscConfig+0x4de>
 80073ae:	4b1a      	ldr	r3, [pc, #104]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	4a19      	ldr	r2, [pc, #100]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80073b4:	f023 0301 	bic.w	r3, r3, #1
 80073b8:	6713      	str	r3, [r2, #112]	; 0x70
 80073ba:	4b17      	ldr	r3, [pc, #92]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80073bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073be:	4a16      	ldr	r2, [pc, #88]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80073c0:	f023 0304 	bic.w	r3, r3, #4
 80073c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d015      	beq.n	80073fa <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ce:	f7fb ffd7 	bl	8003380 <HAL_GetTick>
 80073d2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073d4:	e00a      	b.n	80073ec <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073d6:	f7fb ffd3 	bl	8003380 <HAL_GetTick>
 80073da:	4602      	mov	r2, r0
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	1ad3      	subs	r3, r2, r3
 80073e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d901      	bls.n	80073ec <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e11e      	b.n	800762a <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073ec:	4b0a      	ldr	r3, [pc, #40]	; (8007418 <HAL_RCC_OscConfig+0x530>)
 80073ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f0:	f003 0302 	and.w	r3, r3, #2
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d0ee      	beq.n	80073d6 <HAL_RCC_OscConfig+0x4ee>
 80073f8:	e018      	b.n	800742c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073fa:	f7fb ffc1 	bl	8003380 <HAL_GetTick>
 80073fe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007400:	e00e      	b.n	8007420 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007402:	f7fb ffbd 	bl	8003380 <HAL_GetTick>
 8007406:	4602      	mov	r2, r0
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	1ad3      	subs	r3, r2, r3
 800740c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007410:	4293      	cmp	r3, r2
 8007412:	d905      	bls.n	8007420 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8007414:	2303      	movs	r3, #3
 8007416:	e108      	b.n	800762a <HAL_RCC_OscConfig+0x742>
 8007418:	58024400 	.word	0x58024400
 800741c:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007420:	4b84      	ldr	r3, [pc, #528]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1ea      	bne.n	8007402 <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	f000 80f9 	beq.w	8007628 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007436:	4b7f      	ldr	r3, [pc, #508]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800743e:	2b18      	cmp	r3, #24
 8007440:	f000 80b4 	beq.w	80075ac <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	2b02      	cmp	r3, #2
 800744a:	f040 8095 	bne.w	8007578 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800744e:	4b79      	ldr	r3, [pc, #484]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a78      	ldr	r2, [pc, #480]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007454:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800745a:	f7fb ff91 	bl	8003380 <HAL_GetTick>
 800745e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007460:	e008      	b.n	8007474 <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007462:	f7fb ff8d 	bl	8003380 <HAL_GetTick>
 8007466:	4602      	mov	r2, r0
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	2b02      	cmp	r3, #2
 800746e:	d901      	bls.n	8007474 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8007470:	2303      	movs	r3, #3
 8007472:	e0da      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007474:	4b6f      	ldr	r3, [pc, #444]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1f0      	bne.n	8007462 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007480:	4b6c      	ldr	r3, [pc, #432]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007484:	4b6c      	ldr	r3, [pc, #432]	; (8007638 <HAL_RCC_OscConfig+0x750>)
 8007486:	4013      	ands	r3, r2
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007490:	0112      	lsls	r2, r2, #4
 8007492:	430a      	orrs	r2, r1
 8007494:	4967      	ldr	r1, [pc, #412]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007496:	4313      	orrs	r3, r2
 8007498:	628b      	str	r3, [r1, #40]	; 0x28
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	3b01      	subs	r3, #1
 80074a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074a8:	3b01      	subs	r3, #1
 80074aa:	025b      	lsls	r3, r3, #9
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	3b01      	subs	r3, #1
 80074b6:	041b      	lsls	r3, r3, #16
 80074b8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80074bc:	431a      	orrs	r2, r3
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c2:	3b01      	subs	r3, #1
 80074c4:	061b      	lsls	r3, r3, #24
 80074c6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80074ca:	495a      	ldr	r1, [pc, #360]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80074cc:	4313      	orrs	r3, r2
 80074ce:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80074d0:	4b58      	ldr	r3, [pc, #352]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80074d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d4:	4a57      	ldr	r2, [pc, #348]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80074d6:	f023 0301 	bic.w	r3, r3, #1
 80074da:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80074dc:	4b55      	ldr	r3, [pc, #340]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80074de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074e0:	4b56      	ldr	r3, [pc, #344]	; (800763c <HAL_RCC_OscConfig+0x754>)
 80074e2:	4013      	ands	r3, r2
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80074e8:	00d2      	lsls	r2, r2, #3
 80074ea:	4952      	ldr	r1, [pc, #328]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80074ec:	4313      	orrs	r3, r2
 80074ee:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80074f0:	4b50      	ldr	r3, [pc, #320]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80074f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f4:	f023 020c 	bic.w	r2, r3, #12
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fc:	494d      	ldr	r1, [pc, #308]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007502:	4b4c      	ldr	r3, [pc, #304]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007506:	f023 0202 	bic.w	r2, r3, #2
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800750e:	4949      	ldr	r1, [pc, #292]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007510:	4313      	orrs	r3, r2
 8007512:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007514:	4b47      	ldr	r3, [pc, #284]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007518:	4a46      	ldr	r2, [pc, #280]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 800751a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800751e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007520:	4b44      	ldr	r3, [pc, #272]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	4a43      	ldr	r2, [pc, #268]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007526:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800752a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800752c:	4b41      	ldr	r3, [pc, #260]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	4a40      	ldr	r2, [pc, #256]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007532:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007538:	4b3e      	ldr	r3, [pc, #248]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	4a3d      	ldr	r2, [pc, #244]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007544:	4b3b      	ldr	r3, [pc, #236]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a3a      	ldr	r2, [pc, #232]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 800754a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800754e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007550:	f7fb ff16 	bl	8003380 <HAL_GetTick>
 8007554:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007556:	e008      	b.n	800756a <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007558:	f7fb ff12 	bl	8003380 <HAL_GetTick>
 800755c:	4602      	mov	r2, r0
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	1ad3      	subs	r3, r2, r3
 8007562:	2b02      	cmp	r3, #2
 8007564:	d901      	bls.n	800756a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e05f      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800756a:	4b32      	ldr	r3, [pc, #200]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d0f0      	beq.n	8007558 <HAL_RCC_OscConfig+0x670>
 8007576:	e057      	b.n	8007628 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007578:	4b2e      	ldr	r3, [pc, #184]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a2d      	ldr	r2, [pc, #180]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 800757e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007582:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007584:	f7fb fefc 	bl	8003380 <HAL_GetTick>
 8007588:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800758a:	e008      	b.n	800759e <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800758c:	f7fb fef8 	bl	8003380 <HAL_GetTick>
 8007590:	4602      	mov	r2, r0
 8007592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	2b02      	cmp	r3, #2
 8007598:	d901      	bls.n	800759e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 800759a:	2303      	movs	r3, #3
 800759c:	e045      	b.n	800762a <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800759e:	4b25      	ldr	r3, [pc, #148]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1f0      	bne.n	800758c <HAL_RCC_OscConfig+0x6a4>
 80075aa:	e03d      	b.n	8007628 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80075ac:	4b21      	ldr	r3, [pc, #132]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80075ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80075b2:	4b20      	ldr	r3, [pc, #128]	; (8007634 <HAL_RCC_OscConfig+0x74c>)
 80075b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d031      	beq.n	8007624 <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	f003 0203 	and.w	r2, r3, #3
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d12a      	bne.n	8007624 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	091b      	lsrs	r3, r3, #4
 80075d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075da:	429a      	cmp	r2, r3
 80075dc:	d122      	bne.n	8007624 <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d11a      	bne.n	8007624 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	0a5b      	lsrs	r3, r3, #9
 80075f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d111      	bne.n	8007624 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800760c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800760e:	429a      	cmp	r2, r3
 8007610:	d108      	bne.n	8007624 <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	0e1b      	lsrs	r3, r3, #24
 8007616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800761e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007620:	429a      	cmp	r2, r3
 8007622:	d001      	beq.n	8007628 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e000      	b.n	800762a <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8007628:	2300      	movs	r3, #0
}
 800762a:	4618      	mov	r0, r3
 800762c:	3730      	adds	r7, #48	; 0x30
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	58024400 	.word	0x58024400
 8007638:	fffffc0c 	.word	0xfffffc0c
 800763c:	ffff0007 	.word	0xffff0007

08007640 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b086      	sub	sp, #24
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d101      	bne.n	8007654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e19c      	b.n	800798e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007654:	4b8a      	ldr	r3, [pc, #552]	; (8007880 <HAL_RCC_ClockConfig+0x240>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	683a      	ldr	r2, [r7, #0]
 800765e:	429a      	cmp	r2, r3
 8007660:	d910      	bls.n	8007684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007662:	4b87      	ldr	r3, [pc, #540]	; (8007880 <HAL_RCC_ClockConfig+0x240>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f023 020f 	bic.w	r2, r3, #15
 800766a:	4985      	ldr	r1, [pc, #532]	; (8007880 <HAL_RCC_ClockConfig+0x240>)
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	4313      	orrs	r3, r2
 8007670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007672:	4b83      	ldr	r3, [pc, #524]	; (8007880 <HAL_RCC_ClockConfig+0x240>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 030f 	and.w	r3, r3, #15
 800767a:	683a      	ldr	r2, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d001      	beq.n	8007684 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e184      	b.n	800798e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d010      	beq.n	80076b2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	4b7b      	ldr	r3, [pc, #492]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800769c:	429a      	cmp	r2, r3
 800769e:	d908      	bls.n	80076b2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80076a0:	4b78      	ldr	r3, [pc, #480]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	691b      	ldr	r3, [r3, #16]
 80076ac:	4975      	ldr	r1, [pc, #468]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 0308 	and.w	r3, r3, #8
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d010      	beq.n	80076e0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	695a      	ldr	r2, [r3, #20]
 80076c2:	4b70      	ldr	r3, [pc, #448]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d908      	bls.n	80076e0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80076ce:	4b6d      	ldr	r3, [pc, #436]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80076d0:	69db      	ldr	r3, [r3, #28]
 80076d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	695b      	ldr	r3, [r3, #20]
 80076da:	496a      	ldr	r1, [pc, #424]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0310 	and.w	r3, r3, #16
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d010      	beq.n	800770e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	699a      	ldr	r2, [r3, #24]
 80076f0:	4b64      	ldr	r3, [pc, #400]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80076f2:	69db      	ldr	r3, [r3, #28]
 80076f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d908      	bls.n	800770e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80076fc:	4b61      	ldr	r3, [pc, #388]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80076fe:	69db      	ldr	r3, [r3, #28]
 8007700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	495e      	ldr	r1, [pc, #376]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 800770a:	4313      	orrs	r3, r2
 800770c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d010      	beq.n	800773c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	69da      	ldr	r2, [r3, #28]
 800771e:	4b59      	ldr	r3, [pc, #356]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007726:	429a      	cmp	r2, r3
 8007728:	d908      	bls.n	800773c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800772a:	4b56      	ldr	r3, [pc, #344]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 800772c:	6a1b      	ldr	r3, [r3, #32]
 800772e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	69db      	ldr	r3, [r3, #28]
 8007736:	4953      	ldr	r1, [pc, #332]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007738:	4313      	orrs	r3, r2
 800773a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0302 	and.w	r3, r3, #2
 8007744:	2b00      	cmp	r3, #0
 8007746:	d010      	beq.n	800776a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68da      	ldr	r2, [r3, #12]
 800774c:	4b4d      	ldr	r3, [pc, #308]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 800774e:	699b      	ldr	r3, [r3, #24]
 8007750:	f003 030f 	and.w	r3, r3, #15
 8007754:	429a      	cmp	r2, r3
 8007756:	d908      	bls.n	800776a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007758:	4b4a      	ldr	r3, [pc, #296]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 800775a:	699b      	ldr	r3, [r3, #24]
 800775c:	f023 020f 	bic.w	r2, r3, #15
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	4947      	ldr	r1, [pc, #284]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007766:	4313      	orrs	r3, r2
 8007768:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f003 0301 	and.w	r3, r3, #1
 8007772:	2b00      	cmp	r3, #0
 8007774:	d055      	beq.n	8007822 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007776:	4b43      	ldr	r3, [pc, #268]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	4940      	ldr	r1, [pc, #256]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007784:	4313      	orrs	r3, r2
 8007786:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2b02      	cmp	r3, #2
 800778e:	d107      	bne.n	80077a0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007790:	4b3c      	ldr	r3, [pc, #240]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007798:	2b00      	cmp	r3, #0
 800779a:	d121      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800779c:	2301      	movs	r3, #1
 800779e:	e0f6      	b.n	800798e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	d107      	bne.n	80077b8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80077a8:	4b36      	ldr	r3, [pc, #216]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d115      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e0ea      	b.n	800798e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	685b      	ldr	r3, [r3, #4]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d107      	bne.n	80077d0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80077c0:	4b30      	ldr	r3, [pc, #192]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d109      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e0de      	b.n	800798e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80077d0:	4b2c      	ldr	r3, [pc, #176]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0304 	and.w	r3, r3, #4
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e0d6      	b.n	800798e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80077e0:	4b28      	ldr	r3, [pc, #160]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80077e2:	691b      	ldr	r3, [r3, #16]
 80077e4:	f023 0207 	bic.w	r2, r3, #7
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	4925      	ldr	r1, [pc, #148]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077f2:	f7fb fdc5 	bl	8003380 <HAL_GetTick>
 80077f6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80077f8:	e00a      	b.n	8007810 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80077fa:	f7fb fdc1 	bl	8003380 <HAL_GetTick>
 80077fe:	4602      	mov	r2, r0
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	1ad3      	subs	r3, r2, r3
 8007804:	f241 3288 	movw	r2, #5000	; 0x1388
 8007808:	4293      	cmp	r3, r2
 800780a:	d901      	bls.n	8007810 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	e0be      	b.n	800798e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007810:	4b1c      	ldr	r3, [pc, #112]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	00db      	lsls	r3, r3, #3
 800781e:	429a      	cmp	r2, r3
 8007820:	d1eb      	bne.n	80077fa <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b00      	cmp	r3, #0
 800782c:	d010      	beq.n	8007850 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68da      	ldr	r2, [r3, #12]
 8007832:	4b14      	ldr	r3, [pc, #80]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007834:	699b      	ldr	r3, [r3, #24]
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	429a      	cmp	r2, r3
 800783c:	d208      	bcs.n	8007850 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800783e:	4b11      	ldr	r3, [pc, #68]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 8007840:	699b      	ldr	r3, [r3, #24]
 8007842:	f023 020f 	bic.w	r2, r3, #15
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	490e      	ldr	r1, [pc, #56]	; (8007884 <HAL_RCC_ClockConfig+0x244>)
 800784c:	4313      	orrs	r3, r2
 800784e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007850:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <HAL_RCC_ClockConfig+0x240>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 030f 	and.w	r3, r3, #15
 8007858:	683a      	ldr	r2, [r7, #0]
 800785a:	429a      	cmp	r2, r3
 800785c:	d214      	bcs.n	8007888 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800785e:	4b08      	ldr	r3, [pc, #32]	; (8007880 <HAL_RCC_ClockConfig+0x240>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f023 020f 	bic.w	r2, r3, #15
 8007866:	4906      	ldr	r1, [pc, #24]	; (8007880 <HAL_RCC_ClockConfig+0x240>)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	4313      	orrs	r3, r2
 800786c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800786e:	4b04      	ldr	r3, [pc, #16]	; (8007880 <HAL_RCC_ClockConfig+0x240>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	429a      	cmp	r2, r3
 800787a:	d005      	beq.n	8007888 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e086      	b.n	800798e <HAL_RCC_ClockConfig+0x34e>
 8007880:	52002000 	.word	0x52002000
 8007884:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0304 	and.w	r3, r3, #4
 8007890:	2b00      	cmp	r3, #0
 8007892:	d010      	beq.n	80078b6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	4b3f      	ldr	r3, [pc, #252]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 800789a:	699b      	ldr	r3, [r3, #24]
 800789c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d208      	bcs.n	80078b6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80078a4:	4b3c      	ldr	r3, [pc, #240]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 80078a6:	699b      	ldr	r3, [r3, #24]
 80078a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	4939      	ldr	r1, [pc, #228]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 80078b2:	4313      	orrs	r3, r2
 80078b4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f003 0308 	and.w	r3, r3, #8
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d010      	beq.n	80078e4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	695a      	ldr	r2, [r3, #20]
 80078c6:	4b34      	ldr	r3, [pc, #208]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d208      	bcs.n	80078e4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80078d2:	4b31      	ldr	r3, [pc, #196]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 80078d4:	69db      	ldr	r3, [r3, #28]
 80078d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	695b      	ldr	r3, [r3, #20]
 80078de:	492e      	ldr	r1, [pc, #184]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 80078e0:	4313      	orrs	r3, r2
 80078e2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0310 	and.w	r3, r3, #16
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d010      	beq.n	8007912 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	699a      	ldr	r2, [r3, #24]
 80078f4:	4b28      	ldr	r3, [pc, #160]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d208      	bcs.n	8007912 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007900:	4b25      	ldr	r3, [pc, #148]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	4922      	ldr	r1, [pc, #136]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 800790e:	4313      	orrs	r3, r2
 8007910:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0320 	and.w	r3, r3, #32
 800791a:	2b00      	cmp	r3, #0
 800791c:	d010      	beq.n	8007940 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	69da      	ldr	r2, [r3, #28]
 8007922:	4b1d      	ldr	r3, [pc, #116]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800792a:	429a      	cmp	r2, r3
 800792c:	d208      	bcs.n	8007940 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800792e:	4b1a      	ldr	r3, [pc, #104]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	69db      	ldr	r3, [r3, #28]
 800793a:	4917      	ldr	r1, [pc, #92]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 800793c:	4313      	orrs	r3, r2
 800793e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007940:	f000 f834 	bl	80079ac <HAL_RCC_GetSysClockFreq>
 8007944:	4602      	mov	r2, r0
 8007946:	4b14      	ldr	r3, [pc, #80]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 8007948:	699b      	ldr	r3, [r3, #24]
 800794a:	0a1b      	lsrs	r3, r3, #8
 800794c:	f003 030f 	and.w	r3, r3, #15
 8007950:	4912      	ldr	r1, [pc, #72]	; (800799c <HAL_RCC_ClockConfig+0x35c>)
 8007952:	5ccb      	ldrb	r3, [r1, r3]
 8007954:	f003 031f 	and.w	r3, r3, #31
 8007958:	fa22 f303 	lsr.w	r3, r2, r3
 800795c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800795e:	4b0e      	ldr	r3, [pc, #56]	; (8007998 <HAL_RCC_ClockConfig+0x358>)
 8007960:	699b      	ldr	r3, [r3, #24]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	4a0d      	ldr	r2, [pc, #52]	; (800799c <HAL_RCC_ClockConfig+0x35c>)
 8007968:	5cd3      	ldrb	r3, [r2, r3]
 800796a:	f003 031f 	and.w	r3, r3, #31
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	fa22 f303 	lsr.w	r3, r2, r3
 8007974:	4a0a      	ldr	r2, [pc, #40]	; (80079a0 <HAL_RCC_ClockConfig+0x360>)
 8007976:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007978:	4a0a      	ldr	r2, [pc, #40]	; (80079a4 <HAL_RCC_ClockConfig+0x364>)
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800797e:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <HAL_RCC_ClockConfig+0x368>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	4618      	mov	r0, r3
 8007984:	f7fa fd4c 	bl	8002420 <HAL_InitTick>
 8007988:	4603      	mov	r3, r0
 800798a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800798c:	7bfb      	ldrb	r3, [r7, #15]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3718      	adds	r7, #24
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	58024400 	.word	0x58024400
 800799c:	0801fbbc 	.word	0x0801fbbc
 80079a0:	2400000c 	.word	0x2400000c
 80079a4:	24000008 	.word	0x24000008
 80079a8:	24000010 	.word	0x24000010

080079ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b089      	sub	sp, #36	; 0x24
 80079b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b2:	4bb3      	ldr	r3, [pc, #716]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80079b4:	691b      	ldr	r3, [r3, #16]
 80079b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80079ba:	2b18      	cmp	r3, #24
 80079bc:	f200 8155 	bhi.w	8007c6a <HAL_RCC_GetSysClockFreq+0x2be>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	08007a2d 	.word	0x08007a2d
 80079cc:	08007c6b 	.word	0x08007c6b
 80079d0:	08007c6b 	.word	0x08007c6b
 80079d4:	08007c6b 	.word	0x08007c6b
 80079d8:	08007c6b 	.word	0x08007c6b
 80079dc:	08007c6b 	.word	0x08007c6b
 80079e0:	08007c6b 	.word	0x08007c6b
 80079e4:	08007c6b 	.word	0x08007c6b
 80079e8:	08007a53 	.word	0x08007a53
 80079ec:	08007c6b 	.word	0x08007c6b
 80079f0:	08007c6b 	.word	0x08007c6b
 80079f4:	08007c6b 	.word	0x08007c6b
 80079f8:	08007c6b 	.word	0x08007c6b
 80079fc:	08007c6b 	.word	0x08007c6b
 8007a00:	08007c6b 	.word	0x08007c6b
 8007a04:	08007c6b 	.word	0x08007c6b
 8007a08:	08007a59 	.word	0x08007a59
 8007a0c:	08007c6b 	.word	0x08007c6b
 8007a10:	08007c6b 	.word	0x08007c6b
 8007a14:	08007c6b 	.word	0x08007c6b
 8007a18:	08007c6b 	.word	0x08007c6b
 8007a1c:	08007c6b 	.word	0x08007c6b
 8007a20:	08007c6b 	.word	0x08007c6b
 8007a24:	08007c6b 	.word	0x08007c6b
 8007a28:	08007a5f 	.word	0x08007a5f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007a2c:	4b94      	ldr	r3, [pc, #592]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f003 0320 	and.w	r3, r3, #32
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d009      	beq.n	8007a4c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007a38:	4b91      	ldr	r3, [pc, #580]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	08db      	lsrs	r3, r3, #3
 8007a3e:	f003 0303 	and.w	r3, r3, #3
 8007a42:	4a90      	ldr	r2, [pc, #576]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a44:	fa22 f303 	lsr.w	r3, r2, r3
 8007a48:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007a4a:	e111      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007a4c:	4b8d      	ldr	r3, [pc, #564]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007a4e:	61bb      	str	r3, [r7, #24]
    break;
 8007a50:	e10e      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007a52:	4b8d      	ldr	r3, [pc, #564]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007a54:	61bb      	str	r3, [r7, #24]
    break;
 8007a56:	e10b      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007a58:	4b8c      	ldr	r3, [pc, #560]	; (8007c8c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007a5a:	61bb      	str	r3, [r7, #24]
    break;
 8007a5c:	e108      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a5e:	4b88      	ldr	r3, [pc, #544]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	f003 0303 	and.w	r3, r3, #3
 8007a66:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007a68:	4b85      	ldr	r3, [pc, #532]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a6c:	091b      	lsrs	r3, r3, #4
 8007a6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a72:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007a74:	4b82      	ldr	r3, [pc, #520]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a78:	f003 0301 	and.w	r3, r3, #1
 8007a7c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007a7e:	4b80      	ldr	r3, [pc, #512]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a82:	08db      	lsrs	r3, r3, #3
 8007a84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
 8007a8e:	ee07 3a90 	vmov	s15, r3
 8007a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a96:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 80e1 	beq.w	8007c64 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	f000 8083 	beq.w	8007bb0 <HAL_RCC_GetSysClockFreq+0x204>
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	f200 80a1 	bhi.w	8007bf4 <HAL_RCC_GetSysClockFreq+0x248>
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d003      	beq.n	8007ac0 <HAL_RCC_GetSysClockFreq+0x114>
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b01      	cmp	r3, #1
 8007abc:	d056      	beq.n	8007b6c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007abe:	e099      	b.n	8007bf4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ac0:	4b6f      	ldr	r3, [pc, #444]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f003 0320 	and.w	r3, r3, #32
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d02d      	beq.n	8007b28 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007acc:	4b6c      	ldr	r3, [pc, #432]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	08db      	lsrs	r3, r3, #3
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	4a6b      	ldr	r2, [pc, #428]	; (8007c84 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8007adc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	ee07 3a90 	vmov	s15, r3
 8007ae4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	ee07 3a90 	vmov	s15, r3
 8007aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007af2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007af6:	4b62      	ldr	r3, [pc, #392]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007afe:	ee07 3a90 	vmov	s15, r3
 8007b02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b06:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b0a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8007b26:	e087      	b.n	8007c38 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	ee07 3a90 	vmov	s15, r3
 8007b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b32:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007c94 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b3a:	4b51      	ldr	r3, [pc, #324]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b4e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b6a:	e065      	b.n	8007c38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	ee07 3a90 	vmov	s15, r3
 8007b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b76:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b7e:	4b40      	ldr	r3, [pc, #256]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b8e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b92:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bae:	e043      	b.n	8007c38 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bb0:	693b      	ldr	r3, [r7, #16]
 8007bb2:	ee07 3a90 	vmov	s15, r3
 8007bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bba:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007c9c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bc2:	4b2f      	ldr	r3, [pc, #188]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bd6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007be2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007bf2:	e021      	b.n	8007c38 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	ee07 3a90 	vmov	s15, r3
 8007bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bfe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007c98 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c06:	4b1e      	ldr	r3, [pc, #120]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c16:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c1a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007c90 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c36:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007c38:	4b11      	ldr	r3, [pc, #68]	; (8007c80 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c3c:	0a5b      	lsrs	r3, r3, #9
 8007c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c42:	3301      	adds	r3, #1
 8007c44:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	ee07 3a90 	vmov	s15, r3
 8007c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007c50:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c5c:	ee17 3a90 	vmov	r3, s15
 8007c60:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007c62:	e005      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007c64:	2300      	movs	r3, #0
 8007c66:	61bb      	str	r3, [r7, #24]
    break;
 8007c68:	e002      	b.n	8007c70 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007c6a:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007c6c:	61bb      	str	r3, [r7, #24]
    break;
 8007c6e:	bf00      	nop
  }

  return sysclockfreq;
 8007c70:	69bb      	ldr	r3, [r7, #24]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3724      	adds	r7, #36	; 0x24
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	58024400 	.word	0x58024400
 8007c84:	03d09000 	.word	0x03d09000
 8007c88:	003d0900 	.word	0x003d0900
 8007c8c:	007a1200 	.word	0x007a1200
 8007c90:	46000000 	.word	0x46000000
 8007c94:	4c742400 	.word	0x4c742400
 8007c98:	4a742400 	.word	0x4a742400
 8007c9c:	4af42400 	.word	0x4af42400

08007ca0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b082      	sub	sp, #8
 8007ca4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ca6:	f7ff fe81 	bl	80079ac <HAL_RCC_GetSysClockFreq>
 8007caa:	4602      	mov	r2, r0
 8007cac:	4b10      	ldr	r3, [pc, #64]	; (8007cf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cae:	699b      	ldr	r3, [r3, #24]
 8007cb0:	0a1b      	lsrs	r3, r3, #8
 8007cb2:	f003 030f 	and.w	r3, r3, #15
 8007cb6:	490f      	ldr	r1, [pc, #60]	; (8007cf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cb8:	5ccb      	ldrb	r3, [r1, r3]
 8007cba:	f003 031f 	and.w	r3, r3, #31
 8007cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8007cc2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cc4:	4b0a      	ldr	r3, [pc, #40]	; (8007cf0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	f003 030f 	and.w	r3, r3, #15
 8007ccc:	4a09      	ldr	r2, [pc, #36]	; (8007cf4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007cce:	5cd3      	ldrb	r3, [r2, r3]
 8007cd0:	f003 031f 	and.w	r3, r3, #31
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	fa22 f303 	lsr.w	r3, r2, r3
 8007cda:	4a07      	ldr	r2, [pc, #28]	; (8007cf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007cdc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007cde:	4a07      	ldr	r2, [pc, #28]	; (8007cfc <HAL_RCC_GetHCLKFreq+0x5c>)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007ce4:	4b04      	ldr	r3, [pc, #16]	; (8007cf8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3708      	adds	r7, #8
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	58024400 	.word	0x58024400
 8007cf4:	0801fbbc 	.word	0x0801fbbc
 8007cf8:	2400000c 	.word	0x2400000c
 8007cfc:	24000008 	.word	0x24000008

08007d00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007d04:	f7ff ffcc 	bl	8007ca0 <HAL_RCC_GetHCLKFreq>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007d0c:	69db      	ldr	r3, [r3, #28]
 8007d0e:	091b      	lsrs	r3, r3, #4
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	4904      	ldr	r1, [pc, #16]	; (8007d28 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007d16:	5ccb      	ldrb	r3, [r1, r3]
 8007d18:	f003 031f 	and.w	r3, r3, #31
 8007d1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	58024400 	.word	0x58024400
 8007d28:	0801fbbc 	.word	0x0801fbbc

08007d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007d30:	f7ff ffb6 	bl	8007ca0 <HAL_RCC_GetHCLKFreq>
 8007d34:	4602      	mov	r2, r0
 8007d36:	4b06      	ldr	r3, [pc, #24]	; (8007d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	0a1b      	lsrs	r3, r3, #8
 8007d3c:	f003 0307 	and.w	r3, r3, #7
 8007d40:	4904      	ldr	r1, [pc, #16]	; (8007d54 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007d42:	5ccb      	ldrb	r3, [r1, r3]
 8007d44:	f003 031f 	and.w	r3, r3, #31
 8007d48:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	bd80      	pop	{r7, pc}
 8007d50:	58024400 	.word	0x58024400
 8007d54:	0801fbbc 	.word	0x0801fbbc

08007d58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	223f      	movs	r2, #63	; 0x3f
 8007d66:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007d68:	4b1a      	ldr	r3, [pc, #104]	; (8007dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d6a:	691b      	ldr	r3, [r3, #16]
 8007d6c:	f003 0207 	and.w	r2, r3, #7
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8007d74:	4b17      	ldr	r3, [pc, #92]	; (8007dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007d80:	4b14      	ldr	r3, [pc, #80]	; (8007dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d82:	699b      	ldr	r3, [r3, #24]
 8007d84:	f003 020f 	and.w	r2, r3, #15
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007d8c:	4b11      	ldr	r3, [pc, #68]	; (8007dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007d98:	4b0e      	ldr	r3, [pc, #56]	; (8007dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8007da6:	69db      	ldr	r3, [r3, #28]
 8007da8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007db0:	4b08      	ldr	r3, [pc, #32]	; (8007dd4 <HAL_RCC_GetClockConfig+0x7c>)
 8007db2:	6a1b      	ldr	r3, [r3, #32]
 8007db4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007dbc:	4b06      	ldr	r3, [pc, #24]	; (8007dd8 <HAL_RCC_GetClockConfig+0x80>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 020f 	and.w	r2, r3, #15
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	601a      	str	r2, [r3, #0]
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr
 8007dd4:	58024400 	.word	0x58024400
 8007dd8:	52002000 	.word	0x52002000

08007ddc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b086      	sub	sp, #24
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007de4:	2300      	movs	r3, #0
 8007de6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007de8:	2300      	movs	r3, #0
 8007dea:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d03f      	beq.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dfc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e00:	d02a      	beq.n	8007e58 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007e02:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007e06:	d824      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e0c:	d018      	beq.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007e0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e12:	d81e      	bhi.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d003      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007e18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e1c:	d007      	beq.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007e1e:	e018      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e20:	4bab      	ldr	r3, [pc, #684]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e24:	4aaa      	ldr	r2, [pc, #680]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e2c:	e015      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	3304      	adds	r3, #4
 8007e32:	2102      	movs	r1, #2
 8007e34:	4618      	mov	r0, r3
 8007e36:	f001 f989 	bl	800914c <RCCEx_PLL2_Config>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e3e:	e00c      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	3324      	adds	r3, #36	; 0x24
 8007e44:	2102      	movs	r1, #2
 8007e46:	4618      	mov	r0, r3
 8007e48:	f001 fa32 	bl	80092b0 <RCCEx_PLL3_Config>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007e50:	e003      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e52:	2301      	movs	r3, #1
 8007e54:	75fb      	strb	r3, [r7, #23]
      break;
 8007e56:	e000      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007e60:	4b9b      	ldr	r3, [pc, #620]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e6c:	4998      	ldr	r1, [pc, #608]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	650b      	str	r3, [r1, #80]	; 0x50
 8007e72:	e001      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d03d      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d826      	bhi.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ea9 	.word	0x08007ea9
 8007e98:	08007eb7 	.word	0x08007eb7
 8007e9c:	08007ec9 	.word	0x08007ec9
 8007ea0:	08007ee1 	.word	0x08007ee1
 8007ea4:	08007ee1 	.word	0x08007ee1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ea8:	4b89      	ldr	r3, [pc, #548]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	4a88      	ldr	r2, [pc, #544]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007eb4:	e015      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	3304      	adds	r3, #4
 8007eba:	2100      	movs	r1, #0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f001 f945 	bl	800914c <RCCEx_PLL2_Config>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ec6:	e00c      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	3324      	adds	r3, #36	; 0x24
 8007ecc:	2100      	movs	r1, #0
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f001 f9ee 	bl	80092b0 <RCCEx_PLL3_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ed8:	e003      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	75fb      	strb	r3, [r7, #23]
      break;
 8007ede:	e000      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007ee0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ee2:	7dfb      	ldrb	r3, [r7, #23]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d109      	bne.n	8007efc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ee8:	4b79      	ldr	r3, [pc, #484]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007eea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eec:	f023 0207 	bic.w	r2, r3, #7
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ef4:	4976      	ldr	r1, [pc, #472]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	650b      	str	r3, [r1, #80]	; 0x50
 8007efa:	e001      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d051      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007f12:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007f16:	d036      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007f18:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8007f1c:	d830      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007f1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f22:	d032      	beq.n	8007f8a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 8007f24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007f28:	d82a      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007f2a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f2e:	d02e      	beq.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8007f30:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007f34:	d824      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f3a:	d018      	beq.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007f3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f40:	d81e      	bhi.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d003      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x172>
 8007f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f4a:	d007      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007f4c:	e018      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f4e:	4b60      	ldr	r3, [pc, #384]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	4a5f      	ldr	r2, [pc, #380]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f58:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f5a:	e019      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	3304      	adds	r3, #4
 8007f60:	2100      	movs	r1, #0
 8007f62:	4618      	mov	r0, r3
 8007f64:	f001 f8f2 	bl	800914c <RCCEx_PLL2_Config>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007f6c:	e010      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	3324      	adds	r3, #36	; 0x24
 8007f72:	2100      	movs	r1, #0
 8007f74:	4618      	mov	r0, r3
 8007f76:	f001 f99b 	bl	80092b0 <RCCEx_PLL3_Config>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007f7e:	e007      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	75fb      	strb	r3, [r7, #23]
      break;
 8007f84:	e004      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f90:	7dfb      	ldrb	r3, [r7, #23]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10a      	bne.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007f96:	4b4e      	ldr	r3, [pc, #312]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007fa4:	494a      	ldr	r1, [pc, #296]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8007faa:	e001      	b.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d051      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007fc2:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007fc6:	d036      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007fc8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007fcc:	d830      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007fce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fd2:	d032      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8007fd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fd8:	d82a      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fde:	d02e      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x262>
 8007fe0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007fe4:	d824      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fea:	d018      	beq.n	800801e <HAL_RCCEx_PeriphCLKConfig+0x242>
 8007fec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ff0:	d81e      	bhi.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d003      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x222>
 8007ff6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ffa:	d007      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007ffc:	e018      	b.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ffe:	4b34      	ldr	r3, [pc, #208]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008002:	4a33      	ldr	r2, [pc, #204]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008008:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800800a:	e019      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3304      	adds	r3, #4
 8008010:	2100      	movs	r1, #0
 8008012:	4618      	mov	r0, r3
 8008014:	f001 f89a 	bl	800914c <RCCEx_PLL2_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800801c:	e010      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	3324      	adds	r3, #36	; 0x24
 8008022:	2100      	movs	r1, #0
 8008024:	4618      	mov	r0, r3
 8008026:	f001 f943 	bl	80092b0 <RCCEx_PLL3_Config>
 800802a:	4603      	mov	r3, r0
 800802c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800802e:	e007      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	75fb      	strb	r3, [r7, #23]
      break;
 8008034:	e004      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8008036:	bf00      	nop
 8008038:	e002      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800803a:	bf00      	nop
 800803c:	e000      	b.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 800803e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008040:	7dfb      	ldrb	r3, [r7, #23]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10a      	bne.n	800805c <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008046:	4b22      	ldr	r3, [pc, #136]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008054:	491e      	ldr	r1, [pc, #120]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008056:	4313      	orrs	r3, r2
 8008058:	658b      	str	r3, [r1, #88]	; 0x58
 800805a:	e001      	b.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800805c:	7dfb      	ldrb	r3, [r7, #23]
 800805e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d035      	beq.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008070:	2b30      	cmp	r3, #48	; 0x30
 8008072:	d01c      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8008074:	2b30      	cmp	r3, #48	; 0x30
 8008076:	d817      	bhi.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008078:	2b20      	cmp	r3, #32
 800807a:	d00c      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 800807c:	2b20      	cmp	r3, #32
 800807e:	d813      	bhi.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d016      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 8008084:	2b10      	cmp	r3, #16
 8008086:	d10f      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008088:	4b11      	ldr	r3, [pc, #68]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800808c:	4a10      	ldr	r2, [pc, #64]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800808e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008092:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8008094:	e00e      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	3304      	adds	r3, #4
 800809a:	2102      	movs	r1, #2
 800809c:	4618      	mov	r0, r3
 800809e:	f001 f855 	bl	800914c <RCCEx_PLL2_Config>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 80080a6:	e005      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80080a8:	2301      	movs	r3, #1
 80080aa:	75fb      	strb	r3, [r7, #23]
      break;
 80080ac:	e002      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80080ae:	bf00      	nop
 80080b0:	e000      	b.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 80080b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080b4:	7dfb      	ldrb	r3, [r7, #23]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d10c      	bne.n	80080d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80080ba:	4b05      	ldr	r3, [pc, #20]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080c6:	4902      	ldr	r1, [pc, #8]	; (80080d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80080c8:	4313      	orrs	r3, r2
 80080ca:	64cb      	str	r3, [r1, #76]	; 0x4c
 80080cc:	e004      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80080ce:	bf00      	nop
 80080d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d047      	beq.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080ec:	d030      	beq.n	8008150 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80080ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080f2:	d82a      	bhi.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80080f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080f8:	d02c      	beq.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0x378>
 80080fa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080fe:	d824      	bhi.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8008100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008104:	d018      	beq.n	8008138 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8008106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810a:	d81e      	bhi.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800810c:	2b00      	cmp	r3, #0
 800810e:	d003      	beq.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008110:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008114:	d007      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008116:	e018      	b.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008118:	4bac      	ldr	r3, [pc, #688]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	4aab      	ldr	r2, [pc, #684]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800811e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008122:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008124:	e017      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	3304      	adds	r3, #4
 800812a:	2100      	movs	r1, #0
 800812c:	4618      	mov	r0, r3
 800812e:	f001 f80d 	bl	800914c <RCCEx_PLL2_Config>
 8008132:	4603      	mov	r3, r0
 8008134:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008136:	e00e      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	3324      	adds	r3, #36	; 0x24
 800813c:	2100      	movs	r1, #0
 800813e:	4618      	mov	r0, r3
 8008140:	f001 f8b6 	bl	80092b0 <RCCEx_PLL3_Config>
 8008144:	4603      	mov	r3, r0
 8008146:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008148:	e005      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	75fb      	strb	r3, [r7, #23]
      break;
 800814e:	e002      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008150:	bf00      	nop
 8008152:	e000      	b.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8008154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008156:	7dfb      	ldrb	r3, [r7, #23]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d109      	bne.n	8008170 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800815c:	4b9b      	ldr	r3, [pc, #620]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800815e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008160:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008168:	4998      	ldr	r1, [pc, #608]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800816a:	4313      	orrs	r3, r2
 800816c:	650b      	str	r3, [r1, #80]	; 0x50
 800816e:	e001      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800817c:	2b00      	cmp	r3, #0
 800817e:	d049      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008188:	d02e      	beq.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 800818a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800818e:	d828      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8008190:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008194:	d02a      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x410>
 8008196:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800819a:	d822      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 800819c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a0:	d026      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80081a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081a6:	d81c      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80081a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081ac:	d010      	beq.n	80081d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80081ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081b2:	d816      	bhi.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d01d      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80081b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081bc:	d111      	bne.n	80081e2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	3304      	adds	r3, #4
 80081c2:	2101      	movs	r1, #1
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 ffc1 	bl	800914c <RCCEx_PLL2_Config>
 80081ca:	4603      	mov	r3, r0
 80081cc:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80081ce:	e012      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	3324      	adds	r3, #36	; 0x24
 80081d4:	2101      	movs	r1, #1
 80081d6:	4618      	mov	r0, r3
 80081d8:	f001 f86a 	bl	80092b0 <RCCEx_PLL3_Config>
 80081dc:	4603      	mov	r3, r0
 80081de:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80081e0:	e009      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	75fb      	strb	r3, [r7, #23]
      break;
 80081e6:	e006      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80081e8:	bf00      	nop
 80081ea:	e004      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80081ec:	bf00      	nop
 80081ee:	e002      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80081f0:	bf00      	nop
 80081f2:	e000      	b.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80081f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d109      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80081fc:	4b73      	ldr	r3, [pc, #460]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80081fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008200:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008208:	4970      	ldr	r1, [pc, #448]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800820a:	4313      	orrs	r3, r2
 800820c:	650b      	str	r3, [r1, #80]	; 0x50
 800820e:	e001      	b.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d04b      	beq.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008226:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800822a:	d02e      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 800822c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008230:	d828      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008236:	d02a      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8008238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823c:	d822      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800823e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008242:	d026      	beq.n	8008292 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 8008244:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008248:	d81c      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800824a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800824e:	d010      	beq.n	8008272 <HAL_RCCEx_PeriphCLKConfig+0x496>
 8008250:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008254:	d816      	bhi.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d01d      	beq.n	8008296 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 800825a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800825e:	d111      	bne.n	8008284 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	3304      	adds	r3, #4
 8008264:	2101      	movs	r1, #1
 8008266:	4618      	mov	r0, r3
 8008268:	f000 ff70 	bl	800914c <RCCEx_PLL2_Config>
 800826c:	4603      	mov	r3, r0
 800826e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008270:	e012      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	3324      	adds	r3, #36	; 0x24
 8008276:	2101      	movs	r1, #1
 8008278:	4618      	mov	r0, r3
 800827a:	f001 f819 	bl	80092b0 <RCCEx_PLL3_Config>
 800827e:	4603      	mov	r3, r0
 8008280:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008282:	e009      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	75fb      	strb	r3, [r7, #23]
      break;
 8008288:	e006      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800828a:	bf00      	nop
 800828c:	e004      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800828e:	bf00      	nop
 8008290:	e002      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008292:	bf00      	nop
 8008294:	e000      	b.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8008296:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008298:	7dfb      	ldrb	r3, [r7, #23]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800829e:	4b4b      	ldr	r3, [pc, #300]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80082a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80082ac:	4947      	ldr	r1, [pc, #284]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80082ae:	4313      	orrs	r3, r2
 80082b0:	658b      	str	r3, [r1, #88]	; 0x58
 80082b2:	e001      	b.n	80082b8 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082b4:	7dfb      	ldrb	r3, [r7, #23]
 80082b6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d02f      	beq.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80082c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082cc:	d00e      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x510>
 80082ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80082d2:	d814      	bhi.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x522>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d015      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80082d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80082dc:	d10f      	bne.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082de:	4b3b      	ldr	r3, [pc, #236]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80082e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e2:	4a3a      	ldr	r2, [pc, #232]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80082e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082ea:	e00c      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3304      	adds	r3, #4
 80082f0:	2101      	movs	r1, #1
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 ff2a 	bl	800914c <RCCEx_PLL2_Config>
 80082f8:	4603      	mov	r3, r0
 80082fa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80082fc:	e003      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	75fb      	strb	r3, [r7, #23]
      break;
 8008302:	e000      	b.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 8008304:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008306:	7dfb      	ldrb	r3, [r7, #23]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d109      	bne.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800830c:	4b2f      	ldr	r3, [pc, #188]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800830e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008310:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008318:	492c      	ldr	r1, [pc, #176]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800831a:	4313      	orrs	r3, r2
 800831c:	650b      	str	r3, [r1, #80]	; 0x50
 800831e:	e001      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800832c:	2b00      	cmp	r3, #0
 800832e:	d032      	beq.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008334:	2b03      	cmp	r3, #3
 8008336:	d81b      	bhi.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8008338:	a201      	add	r2, pc, #4	; (adr r2, 8008340 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 800833a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833e:	bf00      	nop
 8008340:	08008377 	.word	0x08008377
 8008344:	08008351 	.word	0x08008351
 8008348:	0800835f 	.word	0x0800835f
 800834c:	08008377 	.word	0x08008377
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008350:	4b1e      	ldr	r3, [pc, #120]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008354:	4a1d      	ldr	r2, [pc, #116]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800835a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800835c:	e00c      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3304      	adds	r3, #4
 8008362:	2102      	movs	r1, #2
 8008364:	4618      	mov	r0, r3
 8008366:	f000 fef1 	bl	800914c <RCCEx_PLL2_Config>
 800836a:	4603      	mov	r3, r0
 800836c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800836e:	e003      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008370:	2301      	movs	r3, #1
 8008372:	75fb      	strb	r3, [r7, #23]
      break;
 8008374:	e000      	b.n	8008378 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8008376:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008378:	7dfb      	ldrb	r3, [r7, #23]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d109      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800837e:	4b13      	ldr	r3, [pc, #76]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8008380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008382:	f023 0203 	bic.w	r2, r3, #3
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838a:	4910      	ldr	r1, [pc, #64]	; (80083cc <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800838c:	4313      	orrs	r3, r2
 800838e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008390:	e001      	b.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008392:	7dfb      	ldrb	r3, [r7, #23]
 8008394:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 808a 	beq.w	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083a4:	4b0a      	ldr	r3, [pc, #40]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a09      	ldr	r2, [pc, #36]	; (80083d0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80083aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80083b0:	f7fa ffe6 	bl	8003380 <HAL_GetTick>
 80083b4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083b6:	e00d      	b.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083b8:	f7fa ffe2 	bl	8003380 <HAL_GetTick>
 80083bc:	4602      	mov	r2, r0
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	1ad3      	subs	r3, r2, r3
 80083c2:	2b64      	cmp	r3, #100	; 0x64
 80083c4:	d906      	bls.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 80083c6:	2303      	movs	r3, #3
 80083c8:	75fb      	strb	r3, [r7, #23]
        break;
 80083ca:	e009      	b.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80083cc:	58024400 	.word	0x58024400
 80083d0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083d4:	4bb9      	ldr	r3, [pc, #740]	; (80086bc <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0eb      	beq.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80083e0:	7dfb      	ldrb	r3, [r7, #23]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d166      	bne.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80083e6:	4bb6      	ldr	r3, [pc, #728]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80083e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80083f0:	4053      	eors	r3, r2
 80083f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d013      	beq.n	8008422 <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80083fa:	4bb1      	ldr	r3, [pc, #708]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008402:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008404:	4bae      	ldr	r3, [pc, #696]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008408:	4aad      	ldr	r2, [pc, #692]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800840a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800840e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008410:	4bab      	ldr	r3, [pc, #684]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008412:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008414:	4aaa      	ldr	r2, [pc, #680]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800841a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800841c:	4aa8      	ldr	r2, [pc, #672]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800842c:	d115      	bne.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842e:	f7fa ffa7 	bl	8003380 <HAL_GetTick>
 8008432:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008434:	e00b      	b.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008436:	f7fa ffa3 	bl	8003380 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	f241 3288 	movw	r2, #5000	; 0x1388
 8008444:	4293      	cmp	r3, r2
 8008446:	d902      	bls.n	800844e <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8008448:	2303      	movs	r3, #3
 800844a:	75fb      	strb	r3, [r7, #23]
            break;
 800844c:	e005      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800844e:	4b9c      	ldr	r3, [pc, #624]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008452:	f003 0302 	and.w	r3, r3, #2
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0ed      	beq.n	8008436 <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 800845a:	7dfb      	ldrb	r3, [r7, #23]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d126      	bne.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800846a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800846e:	d10d      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8008470:	4b93      	ldr	r3, [pc, #588]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008472:	691b      	ldr	r3, [r3, #16]
 8008474:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800847e:	0919      	lsrs	r1, r3, #4
 8008480:	4b90      	ldr	r3, [pc, #576]	; (80086c4 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8008482:	400b      	ands	r3, r1
 8008484:	498e      	ldr	r1, [pc, #568]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008486:	4313      	orrs	r3, r2
 8008488:	610b      	str	r3, [r1, #16]
 800848a:	e005      	b.n	8008498 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800848c:	4b8c      	ldr	r3, [pc, #560]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800848e:	691b      	ldr	r3, [r3, #16]
 8008490:	4a8b      	ldr	r2, [pc, #556]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008492:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008496:	6113      	str	r3, [r2, #16]
 8008498:	4b89      	ldr	r3, [pc, #548]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 800849a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80084a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084a6:	4986      	ldr	r1, [pc, #536]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80084a8:	4313      	orrs	r3, r2
 80084aa:	670b      	str	r3, [r1, #112]	; 0x70
 80084ac:	e004      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084ae:	7dfb      	ldrb	r3, [r7, #23]
 80084b0:	75bb      	strb	r3, [r7, #22]
 80084b2:	e001      	b.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084b4:	7dfb      	ldrb	r3, [r7, #23]
 80084b6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d07e      	beq.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c8:	2b28      	cmp	r3, #40	; 0x28
 80084ca:	d867      	bhi.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 80084cc:	a201      	add	r2, pc, #4	; (adr r2, 80084d4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 80084ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d2:	bf00      	nop
 80084d4:	080085a3 	.word	0x080085a3
 80084d8:	0800859d 	.word	0x0800859d
 80084dc:	0800859d 	.word	0x0800859d
 80084e0:	0800859d 	.word	0x0800859d
 80084e4:	0800859d 	.word	0x0800859d
 80084e8:	0800859d 	.word	0x0800859d
 80084ec:	0800859d 	.word	0x0800859d
 80084f0:	0800859d 	.word	0x0800859d
 80084f4:	08008579 	.word	0x08008579
 80084f8:	0800859d 	.word	0x0800859d
 80084fc:	0800859d 	.word	0x0800859d
 8008500:	0800859d 	.word	0x0800859d
 8008504:	0800859d 	.word	0x0800859d
 8008508:	0800859d 	.word	0x0800859d
 800850c:	0800859d 	.word	0x0800859d
 8008510:	0800859d 	.word	0x0800859d
 8008514:	0800858b 	.word	0x0800858b
 8008518:	0800859d 	.word	0x0800859d
 800851c:	0800859d 	.word	0x0800859d
 8008520:	0800859d 	.word	0x0800859d
 8008524:	0800859d 	.word	0x0800859d
 8008528:	0800859d 	.word	0x0800859d
 800852c:	0800859d 	.word	0x0800859d
 8008530:	0800859d 	.word	0x0800859d
 8008534:	080085a3 	.word	0x080085a3
 8008538:	0800859d 	.word	0x0800859d
 800853c:	0800859d 	.word	0x0800859d
 8008540:	0800859d 	.word	0x0800859d
 8008544:	0800859d 	.word	0x0800859d
 8008548:	0800859d 	.word	0x0800859d
 800854c:	0800859d 	.word	0x0800859d
 8008550:	0800859d 	.word	0x0800859d
 8008554:	080085a3 	.word	0x080085a3
 8008558:	0800859d 	.word	0x0800859d
 800855c:	0800859d 	.word	0x0800859d
 8008560:	0800859d 	.word	0x0800859d
 8008564:	0800859d 	.word	0x0800859d
 8008568:	0800859d 	.word	0x0800859d
 800856c:	0800859d 	.word	0x0800859d
 8008570:	0800859d 	.word	0x0800859d
 8008574:	080085a3 	.word	0x080085a3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	2101      	movs	r1, #1
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fde4 	bl	800914c <RCCEx_PLL2_Config>
 8008584:	4603      	mov	r3, r0
 8008586:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008588:	e00c      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	3324      	adds	r3, #36	; 0x24
 800858e:	2101      	movs	r1, #1
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fe8d 	bl	80092b0 <RCCEx_PLL3_Config>
 8008596:	4603      	mov	r3, r0
 8008598:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800859a:	e003      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	75fb      	strb	r3, [r7, #23]
      break;
 80085a0:	e000      	b.n	80085a4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 80085a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d109      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80085aa:	4b45      	ldr	r3, [pc, #276]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80085ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ae:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085b6:	4942      	ldr	r1, [pc, #264]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	654b      	str	r3, [r1, #84]	; 0x54
 80085bc:	e001      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085be:	7dfb      	ldrb	r3, [r7, #23]
 80085c0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f003 0302 	and.w	r3, r3, #2
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d037      	beq.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085d2:	2b05      	cmp	r3, #5
 80085d4:	d820      	bhi.n	8008618 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80085d6:	a201      	add	r2, pc, #4	; (adr r2, 80085dc <HAL_RCCEx_PeriphCLKConfig+0x800>)
 80085d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085dc:	0800861f 	.word	0x0800861f
 80085e0:	080085f5 	.word	0x080085f5
 80085e4:	08008607 	.word	0x08008607
 80085e8:	0800861f 	.word	0x0800861f
 80085ec:	0800861f 	.word	0x0800861f
 80085f0:	0800861f 	.word	0x0800861f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3304      	adds	r3, #4
 80085f8:	2101      	movs	r1, #1
 80085fa:	4618      	mov	r0, r3
 80085fc:	f000 fda6 	bl	800914c <RCCEx_PLL2_Config>
 8008600:	4603      	mov	r3, r0
 8008602:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008604:	e00c      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	3324      	adds	r3, #36	; 0x24
 800860a:	2101      	movs	r1, #1
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fe4f 	bl	80092b0 <RCCEx_PLL3_Config>
 8008612:	4603      	mov	r3, r0
 8008614:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008616:	e003      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	75fb      	strb	r3, [r7, #23]
      break;
 800861c:	e000      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 800861e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008620:	7dfb      	ldrb	r3, [r7, #23]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d109      	bne.n	800863a <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008626:	4b26      	ldr	r3, [pc, #152]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862a:	f023 0207 	bic.w	r2, r3, #7
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008632:	4923      	ldr	r1, [pc, #140]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8008634:	4313      	orrs	r3, r2
 8008636:	654b      	str	r3, [r1, #84]	; 0x54
 8008638:	e001      	b.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800863a:	7dfb      	ldrb	r3, [r7, #23]
 800863c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0304 	and.w	r3, r3, #4
 8008646:	2b00      	cmp	r3, #0
 8008648:	d040      	beq.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008650:	2b05      	cmp	r3, #5
 8008652:	d821      	bhi.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8008654:	a201      	add	r2, pc, #4	; (adr r2, 800865c <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8008656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800865a:	bf00      	nop
 800865c:	0800869f 	.word	0x0800869f
 8008660:	08008675 	.word	0x08008675
 8008664:	08008687 	.word	0x08008687
 8008668:	0800869f 	.word	0x0800869f
 800866c:	0800869f 	.word	0x0800869f
 8008670:	0800869f 	.word	0x0800869f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	3304      	adds	r3, #4
 8008678:	2101      	movs	r1, #1
 800867a:	4618      	mov	r0, r3
 800867c:	f000 fd66 	bl	800914c <RCCEx_PLL2_Config>
 8008680:	4603      	mov	r3, r0
 8008682:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008684:	e00c      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	3324      	adds	r3, #36	; 0x24
 800868a:	2101      	movs	r1, #1
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fe0f 	bl	80092b0 <RCCEx_PLL3_Config>
 8008692:	4603      	mov	r3, r0
 8008694:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008696:	e003      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008698:	2301      	movs	r3, #1
 800869a:	75fb      	strb	r3, [r7, #23]
      break;
 800869c:	e000      	b.n	80086a0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 800869e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80086a0:	7dfb      	ldrb	r3, [r7, #23]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d110      	bne.n	80086c8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086a6:	4b06      	ldr	r3, [pc, #24]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80086a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086aa:	f023 0207 	bic.w	r2, r3, #7
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086b4:	4902      	ldr	r1, [pc, #8]	; (80086c0 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80086b6:	4313      	orrs	r3, r2
 80086b8:	658b      	str	r3, [r1, #88]	; 0x58
 80086ba:	e007      	b.n	80086cc <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 80086bc:	58024800 	.word	0x58024800
 80086c0:	58024400 	.word	0x58024400
 80086c4:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c8:	7dfb      	ldrb	r3, [r7, #23]
 80086ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0320 	and.w	r3, r3, #32
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d04b      	beq.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086e2:	d02e      	beq.n	8008742 <HAL_RCCEx_PeriphCLKConfig+0x966>
 80086e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086e8:	d828      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80086ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086ee:	d02a      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 80086f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f4:	d822      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x960>
 80086f6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80086fa:	d026      	beq.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x96e>
 80086fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008700:	d81c      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x960>
 8008702:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008706:	d010      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8008708:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800870c:	d816      	bhi.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800870e:	2b00      	cmp	r3, #0
 8008710:	d01d      	beq.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x972>
 8008712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008716:	d111      	bne.n	800873c <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	3304      	adds	r3, #4
 800871c:	2100      	movs	r1, #0
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fd14 	bl	800914c <RCCEx_PLL2_Config>
 8008724:	4603      	mov	r3, r0
 8008726:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8008728:	e012      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	3324      	adds	r3, #36	; 0x24
 800872e:	2102      	movs	r1, #2
 8008730:	4618      	mov	r0, r3
 8008732:	f000 fdbd 	bl	80092b0 <RCCEx_PLL3_Config>
 8008736:	4603      	mov	r3, r0
 8008738:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800873a:	e009      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	75fb      	strb	r3, [r7, #23]
      break;
 8008740:	e006      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008742:	bf00      	nop
 8008744:	e004      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8008746:	bf00      	nop
 8008748:	e002      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800874a:	bf00      	nop
 800874c:	e000      	b.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 800874e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008756:	4bb2      	ldr	r3, [pc, #712]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800875a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008764:	49ae      	ldr	r1, [pc, #696]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008766:	4313      	orrs	r3, r2
 8008768:	654b      	str	r3, [r1, #84]	; 0x54
 800876a:	e001      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d04b      	beq.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008782:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008786:	d02e      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8008788:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800878c:	d828      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800878e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008792:	d02a      	beq.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8008794:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008798:	d822      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 800879a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800879e:	d026      	beq.n	80087ee <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80087a0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80087a4:	d81c      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80087a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087aa:	d010      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 80087ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087b0:	d816      	bhi.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d01d      	beq.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80087b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087ba:	d111      	bne.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	3304      	adds	r3, #4
 80087c0:	2100      	movs	r1, #0
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fcc2 	bl	800914c <RCCEx_PLL2_Config>
 80087c8:	4603      	mov	r3, r0
 80087ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087cc:	e012      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	3324      	adds	r3, #36	; 0x24
 80087d2:	2102      	movs	r1, #2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f000 fd6b 	bl	80092b0 <RCCEx_PLL3_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80087de:	e009      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	75fb      	strb	r3, [r7, #23]
      break;
 80087e4:	e006      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80087e6:	bf00      	nop
 80087e8:	e004      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80087ea:	bf00      	nop
 80087ec:	e002      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80087ee:	bf00      	nop
 80087f0:	e000      	b.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 80087f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80087f4:	7dfb      	ldrb	r3, [r7, #23]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d10a      	bne.n	8008810 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087fa:	4b89      	ldr	r3, [pc, #548]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80087fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087fe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008808:	4985      	ldr	r1, [pc, #532]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 800880a:	4313      	orrs	r3, r2
 800880c:	658b      	str	r3, [r1, #88]	; 0x58
 800880e:	e001      	b.n	8008814 <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008810:	7dfb      	ldrb	r3, [r7, #23]
 8008812:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881c:	2b00      	cmp	r3, #0
 800881e:	d04b      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008826:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800882a:	d02e      	beq.n	800888a <HAL_RCCEx_PeriphCLKConfig+0xaae>
 800882c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008830:	d828      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008832:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008836:	d02a      	beq.n	800888e <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8008838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800883c:	d822      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800883e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008842:	d026      	beq.n	8008892 <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8008844:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008848:	d81c      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800884a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800884e:	d010      	beq.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8008850:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008854:	d816      	bhi.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8008856:	2b00      	cmp	r3, #0
 8008858:	d01d      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0xaba>
 800885a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800885e:	d111      	bne.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	3304      	adds	r3, #4
 8008864:	2100      	movs	r1, #0
 8008866:	4618      	mov	r0, r3
 8008868:	f000 fc70 	bl	800914c <RCCEx_PLL2_Config>
 800886c:	4603      	mov	r3, r0
 800886e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008870:	e012      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3324      	adds	r3, #36	; 0x24
 8008876:	2102      	movs	r1, #2
 8008878:	4618      	mov	r0, r3
 800887a:	f000 fd19 	bl	80092b0 <RCCEx_PLL3_Config>
 800887e:	4603      	mov	r3, r0
 8008880:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008882:	e009      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	75fb      	strb	r3, [r7, #23]
      break;
 8008888:	e006      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800888a:	bf00      	nop
 800888c:	e004      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 800888e:	bf00      	nop
 8008890:	e002      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008892:	bf00      	nop
 8008894:	e000      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8008896:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008898:	7dfb      	ldrb	r3, [r7, #23]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10a      	bne.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800889e:	4b60      	ldr	r3, [pc, #384]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80088a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80088ac:	495c      	ldr	r1, [pc, #368]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	658b      	str	r3, [r1, #88]	; 0x58
 80088b2:	e001      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d018      	beq.n	80088f6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088cc:	d10a      	bne.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	3324      	adds	r3, #36	; 0x24
 80088d2:	2102      	movs	r1, #2
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fceb 	bl	80092b0 <RCCEx_PLL3_Config>
 80088da:	4603      	mov	r3, r0
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d001      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 80088e0:	2301      	movs	r3, #1
 80088e2:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80088e4:	4b4e      	ldr	r3, [pc, #312]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80088e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088f0:	494b      	ldr	r1, [pc, #300]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80088f2:	4313      	orrs	r3, r2
 80088f4:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0310 	and.w	r3, r3, #16
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01a      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800890c:	d10a      	bne.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	3324      	adds	r3, #36	; 0x24
 8008912:	2102      	movs	r1, #2
 8008914:	4618      	mov	r0, r3
 8008916:	f000 fccb 	bl	80092b0 <RCCEx_PLL3_Config>
 800891a:	4603      	mov	r3, r0
 800891c:	2b00      	cmp	r3, #0
 800891e:	d001      	beq.n	8008924 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008924:	4b3e      	ldr	r3, [pc, #248]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008928:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008932:	493b      	ldr	r1, [pc, #236]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008934:	4313      	orrs	r3, r2
 8008936:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d034      	beq.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800894a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800894e:	d01d      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8008950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008954:	d817      	bhi.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8008956:	2b00      	cmp	r3, #0
 8008958:	d003      	beq.n	8008962 <HAL_RCCEx_PeriphCLKConfig+0xb86>
 800895a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800895e:	d009      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8008960:	e011      	b.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	3304      	adds	r3, #4
 8008966:	2100      	movs	r1, #0
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fbef 	bl	800914c <RCCEx_PLL2_Config>
 800896e:	4603      	mov	r3, r0
 8008970:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008972:	e00c      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3324      	adds	r3, #36	; 0x24
 8008978:	2102      	movs	r1, #2
 800897a:	4618      	mov	r0, r3
 800897c:	f000 fc98 	bl	80092b0 <RCCEx_PLL3_Config>
 8008980:	4603      	mov	r3, r0
 8008982:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008984:	e003      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	75fb      	strb	r3, [r7, #23]
      break;
 800898a:	e000      	b.n	800898e <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 800898c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800898e:	7dfb      	ldrb	r3, [r7, #23]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d10a      	bne.n	80089aa <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008994:	4b22      	ldr	r3, [pc, #136]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008998:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80089a2:	491f      	ldr	r1, [pc, #124]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80089a4:	4313      	orrs	r3, r2
 80089a6:	658b      	str	r3, [r1, #88]	; 0x58
 80089a8:	e001      	b.n	80089ae <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089aa:	7dfb      	ldrb	r3, [r7, #23]
 80089ac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d036      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c4:	d01c      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80089c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089ca:	d816      	bhi.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80089cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089d0:	d003      	beq.n	80089da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80089d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d6:	d007      	beq.n	80089e8 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 80089d8:	e00f      	b.n	80089fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089da:	4b11      	ldr	r3, [pc, #68]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089de:	4a10      	ldr	r2, [pc, #64]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 80089e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80089e6:	e00c      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	3324      	adds	r3, #36	; 0x24
 80089ec:	2101      	movs	r1, #1
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 fc5e 	bl	80092b0 <RCCEx_PLL3_Config>
 80089f4:	4603      	mov	r3, r0
 80089f6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80089f8:	e003      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
      break;
 80089fe:	e000      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8008a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a02:	7dfb      	ldrb	r3, [r7, #23]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d10d      	bne.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008a08:	4b05      	ldr	r3, [pc, #20]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a0c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a16:	4902      	ldr	r1, [pc, #8]	; (8008a20 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	654b      	str	r3, [r1, #84]	; 0x54
 8008a1c:	e004      	b.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8008a1e:	bf00      	nop
 8008a20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a24:	7dfb      	ldrb	r3, [r7, #23]
 8008a26:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d029      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008a3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a40:	d007      	beq.n	8008a52 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008a42:	e00f      	b.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a44:	4b61      	ldr	r3, [pc, #388]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a48:	4a60      	ldr	r2, [pc, #384]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a50:	e00b      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	3304      	adds	r3, #4
 8008a56:	2102      	movs	r1, #2
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fb77 	bl	800914c <RCCEx_PLL2_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	75fb      	strb	r3, [r7, #23]
      break;
 8008a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008a70:	4b56      	ldr	r3, [pc, #344]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a7c:	4953      	ldr	r1, [pc, #332]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a82:	e001      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
 8008a86:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d00a      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	3324      	adds	r3, #36	; 0x24
 8008a98:	2102      	movs	r1, #2
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fc08 	bl	80092b0 <RCCEx_PLL3_Config>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d030      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008aba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008abe:	d017      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008ac0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008ac4:	d811      	bhi.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008aca:	d013      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ad0:	d80b      	bhi.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d010      	beq.n	8008af8 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 8008ad6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ada:	d106      	bne.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008adc:	4b3b      	ldr	r3, [pc, #236]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae0:	4a3a      	ldr	r2, [pc, #232]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ae2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008ae8:	e007      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	75fb      	strb	r3, [r7, #23]
      break;
 8008aee:	e004      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008af0:	bf00      	nop
 8008af2:	e002      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008af4:	bf00      	nop
 8008af6:	e000      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 8008af8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008afa:	7dfb      	ldrb	r3, [r7, #23]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d109      	bne.n	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008b00:	4b32      	ldr	r3, [pc, #200]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b0c:	492f      	ldr	r1, [pc, #188]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	654b      	str	r3, [r1, #84]	; 0x54
 8008b12:	e001      	b.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
 8008b16:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d008      	beq.n	8008b36 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008b24:	4b29      	ldr	r3, [pc, #164]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b28:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b30:	4926      	ldr	r1, [pc, #152]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d008      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008b42:	4b22      	ldr	r3, [pc, #136]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b4e:	491f      	ldr	r1, [pc, #124]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b50:	4313      	orrs	r3, r2
 8008b52:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d00d      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008b60:	4b1a      	ldr	r3, [pc, #104]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	4a19      	ldr	r2, [pc, #100]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008b6a:	6113      	str	r3, [r2, #16]
 8008b6c:	4b17      	ldr	r3, [pc, #92]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008b76:	4915      	ldr	r1, [pc, #84]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	da08      	bge.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008b84:	4b11      	ldr	r3, [pc, #68]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b88:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b90:	490e      	ldr	r1, [pc, #56]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d009      	beq.n	8008bb6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008ba2:	4b0a      	ldr	r3, [pc, #40]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ba6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008bb0:	4906      	ldr	r1, [pc, #24]	; (8008bcc <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8008bb6:	7dbb      	ldrb	r3, [r7, #22]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d101      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e000      	b.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3718      	adds	r7, #24
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	58024400 	.word	0x58024400

08008bd0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8008bd4:	f7ff f864 	bl	8007ca0 <HAL_RCC_GetHCLKFreq>
 8008bd8:	4602      	mov	r2, r0
 8008bda:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008bdc:	6a1b      	ldr	r3, [r3, #32]
 8008bde:	091b      	lsrs	r3, r3, #4
 8008be0:	f003 0307 	and.w	r3, r3, #7
 8008be4:	4904      	ldr	r1, [pc, #16]	; (8008bf8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8008be6:	5ccb      	ldrb	r3, [r1, r3]
 8008be8:	f003 031f 	and.w	r3, r3, #31
 8008bec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	bd80      	pop	{r7, pc}
 8008bf4:	58024400 	.word	0x58024400
 8008bf8:	0801fbbc 	.word	0x0801fbbc

08008bfc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b089      	sub	sp, #36	; 0x24
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c04:	4ba1      	ldr	r3, [pc, #644]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8008c0e:	4b9f      	ldr	r3, [pc, #636]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c12:	0b1b      	lsrs	r3, r3, #12
 8008c14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c18:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008c1a:	4b9c      	ldr	r3, [pc, #624]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1e:	091b      	lsrs	r3, r3, #4
 8008c20:	f003 0301 	and.w	r3, r3, #1
 8008c24:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008c26:	4b99      	ldr	r3, [pc, #612]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c2a:	08db      	lsrs	r3, r3, #3
 8008c2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c30:	693a      	ldr	r2, [r7, #16]
 8008c32:	fb02 f303 	mul.w	r3, r2, r3
 8008c36:	ee07 3a90 	vmov	s15, r3
 8008c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c3e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f000 8111 	beq.w	8008e6c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	f000 8083 	beq.w	8008d58 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	2b02      	cmp	r3, #2
 8008c56:	f200 80a1 	bhi.w	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d003      	beq.n	8008c68 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	2b01      	cmp	r3, #1
 8008c64:	d056      	beq.n	8008d14 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008c66:	e099      	b.n	8008d9c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c68:	4b88      	ldr	r3, [pc, #544]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 0320 	and.w	r3, r3, #32
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d02d      	beq.n	8008cd0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008c74:	4b85      	ldr	r3, [pc, #532]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	08db      	lsrs	r3, r3, #3
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	4a84      	ldr	r2, [pc, #528]	; (8008e90 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008c80:	fa22 f303 	lsr.w	r3, r2, r3
 8008c84:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	ee07 3a90 	vmov	s15, r3
 8008c8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	ee07 3a90 	vmov	s15, r3
 8008c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008c9e:	4b7b      	ldr	r3, [pc, #492]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ca6:	ee07 3a90 	vmov	s15, r3
 8008caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008cce:	e087      	b.n	8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	ee07 3a90 	vmov	s15, r3
 8008cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008e98 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce2:	4b6a      	ldr	r3, [pc, #424]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cea:	ee07 3a90 	vmov	s15, r3
 8008cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008cf6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d12:	e065      	b.n	8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	ee07 3a90 	vmov	s15, r3
 8008d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d26:	4b59      	ldr	r3, [pc, #356]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d2e:	ee07 3a90 	vmov	s15, r3
 8008d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d56:	e043      	b.n	8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	ee07 3a90 	vmov	s15, r3
 8008d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6a:	4b48      	ldr	r3, [pc, #288]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d72:	ee07 3a90 	vmov	s15, r3
 8008d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008d7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008d9a:	e021      	b.n	8008de0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008e9c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dae:	4b37      	ldr	r3, [pc, #220]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008dc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008e94 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008dde:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8008de0:	4b2a      	ldr	r3, [pc, #168]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008de4:	0a5b      	lsrs	r3, r3, #9
 8008de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dea:	ee07 3a90 	vmov	s15, r3
 8008dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008df2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008df6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008dfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008dfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e06:	ee17 2a90 	vmov	r2, s15
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8008e0e:	4b1f      	ldr	r3, [pc, #124]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e12:	0c1b      	lsrs	r3, r3, #16
 8008e14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e18:	ee07 3a90 	vmov	s15, r3
 8008e1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e28:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e34:	ee17 2a90 	vmov	r2, s15
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008e3c:	4b13      	ldr	r3, [pc, #76]	; (8008e8c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e40:	0e1b      	lsrs	r3, r3, #24
 8008e42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e46:	ee07 3a90 	vmov	s15, r3
 8008e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008e52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008e56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e62:	ee17 2a90 	vmov	r2, s15
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008e6a:	e008      	b.n	8008e7e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2200      	movs	r2, #0
 8008e76:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	609a      	str	r2, [r3, #8]
}
 8008e7e:	bf00      	nop
 8008e80:	3724      	adds	r7, #36	; 0x24
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr
 8008e8a:	bf00      	nop
 8008e8c:	58024400 	.word	0x58024400
 8008e90:	03d09000 	.word	0x03d09000
 8008e94:	46000000 	.word	0x46000000
 8008e98:	4c742400 	.word	0x4c742400
 8008e9c:	4a742400 	.word	0x4a742400
 8008ea0:	4af42400 	.word	0x4af42400

08008ea4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b089      	sub	sp, #36	; 0x24
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008eac:	4ba1      	ldr	r3, [pc, #644]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	f003 0303 	and.w	r3, r3, #3
 8008eb4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8008eb6:	4b9f      	ldr	r3, [pc, #636]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eba:	0d1b      	lsrs	r3, r3, #20
 8008ebc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ec0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ec2:	4b9c      	ldr	r3, [pc, #624]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec6:	0a1b      	lsrs	r3, r3, #8
 8008ec8:	f003 0301 	and.w	r3, r3, #1
 8008ecc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008ece:	4b99      	ldr	r3, [pc, #612]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed2:	08db      	lsrs	r3, r3, #3
 8008ed4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	fb02 f303 	mul.w	r3, r2, r3
 8008ede:	ee07 3a90 	vmov	s15, r3
 8008ee2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ee6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 8111 	beq.w	8009114 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2b02      	cmp	r3, #2
 8008ef6:	f000 8083 	beq.w	8009000 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008efa:	69bb      	ldr	r3, [r7, #24]
 8008efc:	2b02      	cmp	r3, #2
 8008efe:	f200 80a1 	bhi.w	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d056      	beq.n	8008fbc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008f0e:	e099      	b.n	8009044 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f10:	4b88      	ldr	r3, [pc, #544]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f003 0320 	and.w	r3, r3, #32
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d02d      	beq.n	8008f78 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008f1c:	4b85      	ldr	r3, [pc, #532]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	08db      	lsrs	r3, r3, #3
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	4a84      	ldr	r2, [pc, #528]	; (8009138 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008f28:	fa22 f303 	lsr.w	r3, r2, r3
 8008f2c:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	ee07 3a90 	vmov	s15, r3
 8008f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f46:	4b7b      	ldr	r3, [pc, #492]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f4e:	ee07 3a90 	vmov	s15, r3
 8008f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f5a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800913c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008f66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008f72:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008f76:	e087      	b.n	8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	ee07 3a90 	vmov	s15, r3
 8008f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008f82:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009140 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008f8a:	4b6a      	ldr	r3, [pc, #424]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f92:	ee07 3a90 	vmov	s15, r3
 8008f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008f9e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800913c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008faa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008fb6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008fba:	e065      	b.n	8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	ee07 3a90 	vmov	s15, r3
 8008fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008fc6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008fca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008fce:	4b59      	ldr	r3, [pc, #356]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fd6:	ee07 3a90 	vmov	s15, r3
 8008fda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008fde:	ed97 6a03 	vldr	s12, [r7, #12]
 8008fe2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800913c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008fe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008fea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008fee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ffa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ffe:	e043      	b.n	8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009000:	697b      	ldr	r3, [r7, #20]
 8009002:	ee07 3a90 	vmov	s15, r3
 8009006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800900a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009148 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800900e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009012:	4b48      	ldr	r3, [pc, #288]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800901a:	ee07 3a90 	vmov	s15, r3
 800901e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009022:	ed97 6a03 	vldr	s12, [r7, #12]
 8009026:	eddf 5a45 	vldr	s11, [pc, #276]	; 800913c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800902a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800902e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009032:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800903a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800903e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009042:	e021      	b.n	8009088 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	ee07 3a90 	vmov	s15, r3
 800904a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800904e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009144 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009056:	4b37      	ldr	r3, [pc, #220]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800905e:	ee07 3a90 	vmov	s15, r3
 8009062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009066:	ed97 6a03 	vldr	s12, [r7, #12]
 800906a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800913c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800906e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009076:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800907a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800907e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009082:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009086:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009088:	4b2a      	ldr	r3, [pc, #168]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800908a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800908c:	0a5b      	lsrs	r3, r3, #9
 800908e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009092:	ee07 3a90 	vmov	s15, r3
 8009096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800909a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800909e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80090a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090ae:	ee17 2a90 	vmov	r2, s15
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80090b6:	4b1f      	ldr	r3, [pc, #124]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ba:	0c1b      	lsrs	r3, r3, #16
 80090bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090c0:	ee07 3a90 	vmov	s15, r3
 80090c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80090d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80090d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090dc:	ee17 2a90 	vmov	r2, s15
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80090e4:	4b13      	ldr	r3, [pc, #76]	; (8009134 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80090e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e8:	0e1b      	lsrs	r3, r3, #24
 80090ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090ee:	ee07 3a90 	vmov	s15, r3
 80090f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80090f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80090fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80090fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8009102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800910a:	ee17 2a90 	vmov	r2, s15
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009112:	e008      	b.n	8009126 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2200      	movs	r2, #0
 800911e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	609a      	str	r2, [r3, #8]
}
 8009126:	bf00      	nop
 8009128:	3724      	adds	r7, #36	; 0x24
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	58024400 	.word	0x58024400
 8009138:	03d09000 	.word	0x03d09000
 800913c:	46000000 	.word	0x46000000
 8009140:	4c742400 	.word	0x4c742400
 8009144:	4a742400 	.word	0x4a742400
 8009148:	4af42400 	.word	0x4af42400

0800914c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009156:	2300      	movs	r3, #0
 8009158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800915a:	4b53      	ldr	r3, [pc, #332]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 800915c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915e:	f003 0303 	and.w	r3, r3, #3
 8009162:	2b03      	cmp	r3, #3
 8009164:	d101      	bne.n	800916a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e099      	b.n	800929e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800916a:	4b4f      	ldr	r3, [pc, #316]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a4e      	ldr	r2, [pc, #312]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009170:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009176:	f7fa f903 	bl	8003380 <HAL_GetTick>
 800917a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800917c:	e008      	b.n	8009190 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800917e:	f7fa f8ff 	bl	8003380 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	2b02      	cmp	r3, #2
 800918a:	d901      	bls.n	8009190 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800918c:	2303      	movs	r3, #3
 800918e:	e086      	b.n	800929e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009190:	4b45      	ldr	r3, [pc, #276]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d1f0      	bne.n	800917e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800919c:	4b42      	ldr	r3, [pc, #264]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 800919e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091a0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	031b      	lsls	r3, r3, #12
 80091aa:	493f      	ldr	r1, [pc, #252]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	628b      	str	r3, [r1, #40]	; 0x28
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	3b01      	subs	r3, #1
 80091b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	689b      	ldr	r3, [r3, #8]
 80091be:	3b01      	subs	r3, #1
 80091c0:	025b      	lsls	r3, r3, #9
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	431a      	orrs	r2, r3
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	3b01      	subs	r3, #1
 80091cc:	041b      	lsls	r3, r3, #16
 80091ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80091d2:	431a      	orrs	r2, r3
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	3b01      	subs	r3, #1
 80091da:	061b      	lsls	r3, r3, #24
 80091dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80091e0:	4931      	ldr	r1, [pc, #196]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 80091e2:	4313      	orrs	r3, r2
 80091e4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80091e6:	4b30      	ldr	r3, [pc, #192]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 80091e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	492d      	ldr	r1, [pc, #180]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 80091f4:	4313      	orrs	r3, r2
 80091f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80091f8:	4b2b      	ldr	r3, [pc, #172]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 80091fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091fc:	f023 0220 	bic.w	r2, r3, #32
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	699b      	ldr	r3, [r3, #24]
 8009204:	4928      	ldr	r1, [pc, #160]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009206:	4313      	orrs	r3, r2
 8009208:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800920a:	4b27      	ldr	r3, [pc, #156]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 800920c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800920e:	4a26      	ldr	r2, [pc, #152]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009210:	f023 0310 	bic.w	r3, r3, #16
 8009214:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009216:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800921a:	4b24      	ldr	r3, [pc, #144]	; (80092ac <RCCEx_PLL2_Config+0x160>)
 800921c:	4013      	ands	r3, r2
 800921e:	687a      	ldr	r2, [r7, #4]
 8009220:	69d2      	ldr	r2, [r2, #28]
 8009222:	00d2      	lsls	r2, r2, #3
 8009224:	4920      	ldr	r1, [pc, #128]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009226:	4313      	orrs	r3, r2
 8009228:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800922a:	4b1f      	ldr	r3, [pc, #124]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 800922c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800922e:	4a1e      	ldr	r2, [pc, #120]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009230:	f043 0310 	orr.w	r3, r3, #16
 8009234:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d106      	bne.n	800924a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800923c:	4b1a      	ldr	r3, [pc, #104]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 800923e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009240:	4a19      	ldr	r2, [pc, #100]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009246:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009248:	e00f      	b.n	800926a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d106      	bne.n	800925e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009250:	4b15      	ldr	r3, [pc, #84]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009254:	4a14      	ldr	r2, [pc, #80]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800925a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800925c:	e005      	b.n	800926a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800925e:	4b12      	ldr	r3, [pc, #72]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009262:	4a11      	ldr	r2, [pc, #68]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009264:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009268:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800926a:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a0e      	ldr	r2, [pc, #56]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009270:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009276:	f7fa f883 	bl	8003380 <HAL_GetTick>
 800927a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800927c:	e008      	b.n	8009290 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800927e:	f7fa f87f 	bl	8003380 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e006      	b.n	800929e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009290:	4b05      	ldr	r3, [pc, #20]	; (80092a8 <RCCEx_PLL2_Config+0x15c>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	58024400 	.word	0x58024400
 80092ac:	ffff0007 	.word	0xffff0007

080092b0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b084      	sub	sp, #16
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80092be:	4b53      	ldr	r3, [pc, #332]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80092c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092c2:	f003 0303 	and.w	r3, r3, #3
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	d101      	bne.n	80092ce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e099      	b.n	8009402 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80092ce:	4b4f      	ldr	r3, [pc, #316]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	4a4e      	ldr	r2, [pc, #312]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80092d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092da:	f7fa f851 	bl	8003380 <HAL_GetTick>
 80092de:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092e0:	e008      	b.n	80092f4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80092e2:	f7fa f84d 	bl	8003380 <HAL_GetTick>
 80092e6:	4602      	mov	r2, r0
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	1ad3      	subs	r3, r2, r3
 80092ec:	2b02      	cmp	r3, #2
 80092ee:	d901      	bls.n	80092f4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e086      	b.n	8009402 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80092f4:	4b45      	ldr	r3, [pc, #276]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1f0      	bne.n	80092e2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009300:	4b42      	ldr	r3, [pc, #264]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 8009302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009304:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	051b      	lsls	r3, r3, #20
 800930e:	493f      	ldr	r1, [pc, #252]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 8009310:	4313      	orrs	r3, r2
 8009312:	628b      	str	r3, [r1, #40]	; 0x28
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	685b      	ldr	r3, [r3, #4]
 8009318:	3b01      	subs	r3, #1
 800931a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	3b01      	subs	r3, #1
 8009324:	025b      	lsls	r3, r3, #9
 8009326:	b29b      	uxth	r3, r3
 8009328:	431a      	orrs	r2, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68db      	ldr	r3, [r3, #12]
 800932e:	3b01      	subs	r3, #1
 8009330:	041b      	lsls	r3, r3, #16
 8009332:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009336:	431a      	orrs	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	3b01      	subs	r3, #1
 800933e:	061b      	lsls	r3, r3, #24
 8009340:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009344:	4931      	ldr	r1, [pc, #196]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 8009346:	4313      	orrs	r3, r2
 8009348:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800934a:	4b30      	ldr	r3, [pc, #192]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 800934c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	695b      	ldr	r3, [r3, #20]
 8009356:	492d      	ldr	r1, [pc, #180]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 8009358:	4313      	orrs	r3, r2
 800935a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800935c:	4b2b      	ldr	r3, [pc, #172]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 800935e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009360:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	4928      	ldr	r1, [pc, #160]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 800936a:	4313      	orrs	r3, r2
 800936c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800936e:	4b27      	ldr	r3, [pc, #156]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 8009370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009372:	4a26      	ldr	r2, [pc, #152]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 8009374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009378:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800937a:	4b24      	ldr	r3, [pc, #144]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 800937c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800937e:	4b24      	ldr	r3, [pc, #144]	; (8009410 <RCCEx_PLL3_Config+0x160>)
 8009380:	4013      	ands	r3, r2
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	69d2      	ldr	r2, [r2, #28]
 8009386:	00d2      	lsls	r2, r2, #3
 8009388:	4920      	ldr	r1, [pc, #128]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 800938a:	4313      	orrs	r3, r2
 800938c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800938e:	4b1f      	ldr	r3, [pc, #124]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 8009390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009392:	4a1e      	ldr	r2, [pc, #120]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 8009394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009398:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d106      	bne.n	80093ae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80093a0:	4b1a      	ldr	r3, [pc, #104]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a4:	4a19      	ldr	r2, [pc, #100]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80093aa:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093ac:	e00f      	b.n	80093ce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80093ae:	683b      	ldr	r3, [r7, #0]
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d106      	bne.n	80093c2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80093b4:	4b15      	ldr	r3, [pc, #84]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b8:	4a14      	ldr	r2, [pc, #80]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093ba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80093be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80093c0:	e005      	b.n	80093ce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80093c2:	4b12      	ldr	r3, [pc, #72]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c6:	4a11      	ldr	r2, [pc, #68]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093c8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80093ce:	4b0f      	ldr	r3, [pc, #60]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4a0e      	ldr	r2, [pc, #56]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093da:	f7f9 ffd1 	bl	8003380 <HAL_GetTick>
 80093de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093e0:	e008      	b.n	80093f4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80093e2:	f7f9 ffcd 	bl	8003380 <HAL_GetTick>
 80093e6:	4602      	mov	r2, r0
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	1ad3      	subs	r3, r2, r3
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d901      	bls.n	80093f4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80093f0:	2303      	movs	r3, #3
 80093f2:	e006      	b.n	8009402 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80093f4:	4b05      	ldr	r3, [pc, #20]	; (800940c <RCCEx_PLL3_Config+0x15c>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d0f0      	beq.n	80093e2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	58024400 	.word	0x58024400
 8009410:	ffff0007 	.word	0xffff0007

08009414 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d101      	bne.n	8009426 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009422:	2301      	movs	r3, #1
 8009424:	e0f1      	b.n	800960a <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2200      	movs	r2, #0
 800942a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a78      	ldr	r2, [pc, #480]	; (8009614 <HAL_SPI_Init+0x200>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d00f      	beq.n	8009456 <HAL_SPI_Init+0x42>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a77      	ldr	r2, [pc, #476]	; (8009618 <HAL_SPI_Init+0x204>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d00a      	beq.n	8009456 <HAL_SPI_Init+0x42>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a75      	ldr	r2, [pc, #468]	; (800961c <HAL_SPI_Init+0x208>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d005      	beq.n	8009456 <HAL_SPI_Init+0x42>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	68db      	ldr	r3, [r3, #12]
 800944e:	2b0f      	cmp	r3, #15
 8009450:	d901      	bls.n	8009456 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e0d9      	b.n	800960a <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 fba2 	bl	8009ba0 <SPI_GetPacketSize>
 800945c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a6c      	ldr	r2, [pc, #432]	; (8009614 <HAL_SPI_Init+0x200>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d00c      	beq.n	8009482 <HAL_SPI_Init+0x6e>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a6a      	ldr	r2, [pc, #424]	; (8009618 <HAL_SPI_Init+0x204>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d007      	beq.n	8009482 <HAL_SPI_Init+0x6e>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a69      	ldr	r2, [pc, #420]	; (800961c <HAL_SPI_Init+0x208>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d002      	beq.n	8009482 <HAL_SPI_Init+0x6e>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2b08      	cmp	r3, #8
 8009480:	d811      	bhi.n	80094a6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009486:	4a63      	ldr	r2, [pc, #396]	; (8009614 <HAL_SPI_Init+0x200>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d009      	beq.n	80094a0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a61      	ldr	r2, [pc, #388]	; (8009618 <HAL_SPI_Init+0x204>)
 8009492:	4293      	cmp	r3, r2
 8009494:	d004      	beq.n	80094a0 <HAL_SPI_Init+0x8c>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4a60      	ldr	r2, [pc, #384]	; (800961c <HAL_SPI_Init+0x208>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d104      	bne.n	80094aa <HAL_SPI_Init+0x96>
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b10      	cmp	r3, #16
 80094a4:	d901      	bls.n	80094aa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e0af      	b.n	800960a <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d106      	bne.n	80094c4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f7f8 ff06 	bl	80022d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2202      	movs	r2, #2
 80094c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f022 0201 	bic.w	r2, r2, #1
 80094da:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	689b      	ldr	r3, [r3, #8]
 80094e2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80094e6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80094f0:	d119      	bne.n	8009526 <HAL_SPI_Init+0x112>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	685b      	ldr	r3, [r3, #4]
 80094f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094fa:	d103      	bne.n	8009504 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009500:	2b00      	cmp	r3, #0
 8009502:	d008      	beq.n	8009516 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009508:	2b00      	cmp	r3, #0
 800950a:	d10c      	bne.n	8009526 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009510:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009514:	d107      	bne.n	8009526 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009524:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	69da      	ldr	r2, [r3, #28]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800952e:	431a      	orrs	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	431a      	orrs	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009538:	ea42 0103 	orr.w	r1, r2, r3
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	68da      	ldr	r2, [r3, #12]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	430a      	orrs	r2, r1
 8009546:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009550:	431a      	orrs	r2, r3
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	431a      	orrs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	691b      	ldr	r3, [r3, #16]
 8009562:	431a      	orrs	r2, r3
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	695b      	ldr	r3, [r3, #20]
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	431a      	orrs	r2, r3
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	685b      	ldr	r3, [r3, #4]
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009586:	ea42 0103 	orr.w	r1, r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d113      	bne.n	80095c6 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	689b      	ldr	r3, [r3, #8]
 80095a4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095b0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80095c4:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 0201 	bic.w	r2, r2, #1
 80095d4:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	68db      	ldr	r3, [r3, #12]
 80095e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	2200      	movs	r2, #0
 80095fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2201      	movs	r2, #1
 8009604:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009608:	2300      	movs	r3, #0
}
 800960a:	4618      	mov	r0, r3
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	40013000 	.word	0x40013000
 8009618:	40003800 	.word	0x40003800
 800961c:	40003c00 	.word	0x40003c00

08009620 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b08a      	sub	sp, #40	; 0x28
 8009624:	af02      	add	r7, sp, #8
 8009626:	60f8      	str	r0, [r7, #12]
 8009628:	60b9      	str	r1, [r7, #8]
 800962a:	603b      	str	r3, [r7, #0]
 800962c:	4613      	mov	r3, r2
 800962e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3320      	adds	r3, #32
 8009636:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009638:	2300      	movs	r3, #0
 800963a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009642:	2b01      	cmp	r3, #1
 8009644:	d101      	bne.n	800964a <HAL_SPI_Transmit+0x2a>
 8009646:	2302      	movs	r3, #2
 8009648:	e1d7      	b.n	80099fa <HAL_SPI_Transmit+0x3da>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	2201      	movs	r2, #1
 800964e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009652:	f7f9 fe95 	bl	8003380 <HAL_GetTick>
 8009656:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800965e:	b2db      	uxtb	r3, r3
 8009660:	2b01      	cmp	r3, #1
 8009662:	d007      	beq.n	8009674 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009664:	2302      	movs	r3, #2
 8009666:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2200      	movs	r2, #0
 800966c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009670:	7efb      	ldrb	r3, [r7, #27]
 8009672:	e1c2      	b.n	80099fa <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d002      	beq.n	8009680 <HAL_SPI_Transmit+0x60>
 800967a:	88fb      	ldrh	r3, [r7, #6]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d107      	bne.n	8009690 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8009680:	2301      	movs	r3, #1
 8009682:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800968c:	7efb      	ldrb	r3, [r7, #27]
 800968e:	e1b4      	b.n	80099fa <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2203      	movs	r2, #3
 8009694:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	88fa      	ldrh	r2, [r7, #6]
 80096aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	88fa      	ldrh	r2, [r7, #6]
 80096b2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2200      	movs	r2, #0
 80096ba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80096e0:	d107      	bne.n	80096f2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	685a      	ldr	r2, [r3, #4]
 80096f8:	4b96      	ldr	r3, [pc, #600]	; (8009954 <HAL_SPI_Transmit+0x334>)
 80096fa:	4013      	ands	r3, r2
 80096fc:	88f9      	ldrh	r1, [r7, #6]
 80096fe:	68fa      	ldr	r2, [r7, #12]
 8009700:	6812      	ldr	r2, [r2, #0]
 8009702:	430b      	orrs	r3, r1
 8009704:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	681a      	ldr	r2, [r3, #0]
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	f042 0201 	orr.w	r2, r2, #1
 8009714:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800971e:	d107      	bne.n	8009730 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800972e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	68db      	ldr	r3, [r3, #12]
 8009734:	2b0f      	cmp	r3, #15
 8009736:	d947      	bls.n	80097c8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009738:	e03f      	b.n	80097ba <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b02      	cmp	r3, #2
 8009746:	d114      	bne.n	8009772 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6812      	ldr	r2, [r2, #0]
 8009752:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009758:	1d1a      	adds	r2, r3, #4
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009764:	b29b      	uxth	r3, r3
 8009766:	3b01      	subs	r3, #1
 8009768:	b29a      	uxth	r2, r3
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009770:	e023      	b.n	80097ba <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009772:	f7f9 fe05 	bl	8003380 <HAL_GetTick>
 8009776:	4602      	mov	r2, r0
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	1ad3      	subs	r3, r2, r3
 800977c:	683a      	ldr	r2, [r7, #0]
 800977e:	429a      	cmp	r2, r3
 8009780:	d803      	bhi.n	800978a <HAL_SPI_Transmit+0x16a>
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009788:	d102      	bne.n	8009790 <HAL_SPI_Transmit+0x170>
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d114      	bne.n	80097ba <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f000 f937 	bl	8009a04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	2200      	movs	r2, #0
 800979a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e11f      	b.n	80099fa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d1b9      	bne.n	800973a <HAL_SPI_Transmit+0x11a>
 80097c6:	e0f2      	b.n	80099ae <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	68db      	ldr	r3, [r3, #12]
 80097cc:	2b07      	cmp	r3, #7
 80097ce:	f240 80e7 	bls.w	80099a0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80097d2:	e05d      	b.n	8009890 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	f003 0302 	and.w	r3, r3, #2
 80097de:	2b02      	cmp	r3, #2
 80097e0:	d132      	bne.n	8009848 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80097e8:	b29b      	uxth	r3, r3
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d918      	bls.n	8009820 <HAL_SPI_Transmit+0x200>
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d014      	beq.n	8009820 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6812      	ldr	r2, [r2, #0]
 8009800:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009806:	1d1a      	adds	r2, r3, #4
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009812:	b29b      	uxth	r3, r3
 8009814:	3b02      	subs	r3, #2
 8009816:	b29a      	uxth	r2, r3
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800981e:	e037      	b.n	8009890 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009824:	881a      	ldrh	r2, [r3, #0]
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800982e:	1c9a      	adds	r2, r3, #2
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800983a:	b29b      	uxth	r3, r3
 800983c:	3b01      	subs	r3, #1
 800983e:	b29a      	uxth	r2, r3
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009846:	e023      	b.n	8009890 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009848:	f7f9 fd9a 	bl	8003380 <HAL_GetTick>
 800984c:	4602      	mov	r2, r0
 800984e:	697b      	ldr	r3, [r7, #20]
 8009850:	1ad3      	subs	r3, r2, r3
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	429a      	cmp	r2, r3
 8009856:	d803      	bhi.n	8009860 <HAL_SPI_Transmit+0x240>
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800985e:	d102      	bne.n	8009866 <HAL_SPI_Transmit+0x246>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d114      	bne.n	8009890 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009866:	68f8      	ldr	r0, [r7, #12]
 8009868:	f000 f8cc 	bl	8009a04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800987a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800988c:	2303      	movs	r3, #3
 800988e:	e0b4      	b.n	80099fa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009896:	b29b      	uxth	r3, r3
 8009898:	2b00      	cmp	r3, #0
 800989a:	d19b      	bne.n	80097d4 <HAL_SPI_Transmit+0x1b4>
 800989c:	e087      	b.n	80099ae <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	f003 0302 	and.w	r3, r3, #2
 80098a8:	2b02      	cmp	r3, #2
 80098aa:	d155      	bne.n	8009958 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d918      	bls.n	80098ea <HAL_SPI_Transmit+0x2ca>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098bc:	2b40      	cmp	r3, #64	; 0x40
 80098be:	d914      	bls.n	80098ea <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6812      	ldr	r2, [r2, #0]
 80098ca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d0:	1d1a      	adds	r2, r3, #4
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098dc:	b29b      	uxth	r3, r3
 80098de:	3b04      	subs	r3, #4
 80098e0:	b29a      	uxth	r2, r3
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80098e8:	e05a      	b.n	80099a0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	d917      	bls.n	8009926 <HAL_SPI_Transmit+0x306>
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d013      	beq.n	8009926 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009902:	881a      	ldrh	r2, [r3, #0]
 8009904:	69fb      	ldr	r3, [r7, #28]
 8009906:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990c:	1c9a      	adds	r2, r3, #2
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009918:	b29b      	uxth	r3, r3
 800991a:	3b02      	subs	r3, #2
 800991c:	b29a      	uxth	r2, r3
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009924:	e03c      	b.n	80099a0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3320      	adds	r3, #32
 8009930:	7812      	ldrb	r2, [r2, #0]
 8009932:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009938:	1c5a      	adds	r2, r3, #1
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009944:	b29b      	uxth	r3, r3
 8009946:	3b01      	subs	r3, #1
 8009948:	b29a      	uxth	r2, r3
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009950:	e026      	b.n	80099a0 <HAL_SPI_Transmit+0x380>
 8009952:	bf00      	nop
 8009954:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009958:	f7f9 fd12 	bl	8003380 <HAL_GetTick>
 800995c:	4602      	mov	r2, r0
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	1ad3      	subs	r3, r2, r3
 8009962:	683a      	ldr	r2, [r7, #0]
 8009964:	429a      	cmp	r2, r3
 8009966:	d803      	bhi.n	8009970 <HAL_SPI_Transmit+0x350>
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800996e:	d102      	bne.n	8009976 <HAL_SPI_Transmit+0x356>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d114      	bne.n	80099a0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009976:	68f8      	ldr	r0, [r7, #12]
 8009978:	f000 f844 	bl	8009a04 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	2200      	movs	r2, #0
 8009980:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800998a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800999c:	2303      	movs	r3, #3
 800999e:	e02c      	b.n	80099fa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	f47f af78 	bne.w	800989e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	9300      	str	r3, [sp, #0]
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	2200      	movs	r2, #0
 80099b6:	2108      	movs	r1, #8
 80099b8:	68f8      	ldr	r0, [r7, #12]
 80099ba:	f000 f8c3 	bl	8009b44 <SPI_WaitOnFlagUntilTimeout>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d007      	beq.n	80099d4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ca:	f043 0220 	orr.w	r2, r3, #32
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f815 	bl	8009a04 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	2201      	movs	r2, #1
 80099e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d001      	beq.n	80099f8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e000      	b.n	80099fa <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80099f8:	7efb      	ldrb	r3, [r7, #27]
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3720      	adds	r7, #32
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop

08009a04 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b085      	sub	sp, #20
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	699a      	ldr	r2, [r3, #24]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f042 0208 	orr.w	r2, r2, #8
 8009a22:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	699a      	ldr	r2, [r3, #24]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0210 	orr.w	r2, r2, #16
 8009a32:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	681a      	ldr	r2, [r3, #0]
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	f022 0201 	bic.w	r2, r2, #1
 8009a42:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	6919      	ldr	r1, [r3, #16]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	4b3c      	ldr	r3, [pc, #240]	; (8009b40 <SPI_CloseTransfer+0x13c>)
 8009a50:	400b      	ands	r3, r1
 8009a52:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689a      	ldr	r2, [r3, #8]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009a62:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	2b04      	cmp	r3, #4
 8009a6e:	d014      	beq.n	8009a9a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00f      	beq.n	8009a9a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a80:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f042 0220 	orr.w	r2, r2, #32
 8009a98:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d014      	beq.n	8009ad0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00f      	beq.n	8009ad0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ab6:	f043 0204 	orr.w	r2, r3, #4
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	699a      	ldr	r2, [r3, #24]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ace:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d00f      	beq.n	8009afa <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ae0:	f043 0201 	orr.w	r2, r3, #1
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	699a      	ldr	r2, [r3, #24]
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009af8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00f      	beq.n	8009b24 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009b0a:	f043 0208 	orr.w	r2, r3, #8
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	699a      	ldr	r2, [r3, #24]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009b22:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009b34:	bf00      	nop
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	fffffc90 	.word	0xfffffc90

08009b44 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b084      	sub	sp, #16
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	603b      	str	r3, [r7, #0]
 8009b50:	4613      	mov	r3, r2
 8009b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b54:	e010      	b.n	8009b78 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009b56:	f7f9 fc13 	bl	8003380 <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	69ba      	ldr	r2, [r7, #24]
 8009b62:	429a      	cmp	r2, r3
 8009b64:	d803      	bhi.n	8009b6e <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6c:	d102      	bne.n	8009b74 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009b74:	2303      	movs	r3, #3
 8009b76:	e00f      	b.n	8009b98 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	695a      	ldr	r2, [r3, #20]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	4013      	ands	r3, r2
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	429a      	cmp	r2, r3
 8009b86:	bf0c      	ite	eq
 8009b88:	2301      	moveq	r3, #1
 8009b8a:	2300      	movne	r3, #0
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	461a      	mov	r2, r3
 8009b90:	79fb      	ldrb	r3, [r7, #7]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d0df      	beq.n	8009b56 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009b96:	2300      	movs	r3, #0
}
 8009b98:	4618      	mov	r0, r3
 8009b9a:	3710      	adds	r7, #16
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	bd80      	pop	{r7, pc}

08009ba0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bac:	095b      	lsrs	r3, r3, #5
 8009bae:	3301      	adds	r3, #1
 8009bb0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	68db      	ldr	r3, [r3, #12]
 8009bb6:	3301      	adds	r3, #1
 8009bb8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	3307      	adds	r3, #7
 8009bbe:	08db      	lsrs	r3, r3, #3
 8009bc0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	68fa      	ldr	r2, [r7, #12]
 8009bc6:	fb02 f303 	mul.w	r3, r2, r3
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	3714      	adds	r7, #20
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr

08009bd6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009bd6:	b580      	push	{r7, lr}
 8009bd8:	b082      	sub	sp, #8
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e049      	b.n	8009c7c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bee:	b2db      	uxtb	r3, r3
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d106      	bne.n	8009c02 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7f9 f909 	bl	8002e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2202      	movs	r2, #2
 8009c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681a      	ldr	r2, [r3, #0]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	3304      	adds	r3, #4
 8009c12:	4619      	mov	r1, r3
 8009c14:	4610      	mov	r0, r2
 8009c16:	f000 fa03 	bl	800a020 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2201      	movs	r2, #1
 8009c36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2201      	movs	r2, #1
 8009c3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2201      	movs	r2, #1
 8009c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2201      	movs	r2, #1
 8009c66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2201      	movs	r2, #1
 8009c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3708      	adds	r7, #8
 8009c80:	46bd      	mov	sp, r7
 8009c82:	bd80      	pop	{r7, pc}

08009c84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b085      	sub	sp, #20
 8009c88:	af00      	add	r7, sp, #0
 8009c8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c92:	b2db      	uxtb	r3, r3
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d001      	beq.n	8009c9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	e05e      	b.n	8009d5a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	2202      	movs	r2, #2
 8009ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68da      	ldr	r2, [r3, #12]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f042 0201 	orr.w	r2, r2, #1
 8009cb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a2b      	ldr	r2, [pc, #172]	; (8009d68 <HAL_TIM_Base_Start_IT+0xe4>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d02c      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cc6:	d027      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	4a27      	ldr	r2, [pc, #156]	; (8009d6c <HAL_TIM_Base_Start_IT+0xe8>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d022      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	4a26      	ldr	r2, [pc, #152]	; (8009d70 <HAL_TIM_Base_Start_IT+0xec>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d01d      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a24      	ldr	r2, [pc, #144]	; (8009d74 <HAL_TIM_Base_Start_IT+0xf0>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d018      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a23      	ldr	r2, [pc, #140]	; (8009d78 <HAL_TIM_Base_Start_IT+0xf4>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d013      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a21      	ldr	r2, [pc, #132]	; (8009d7c <HAL_TIM_Base_Start_IT+0xf8>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d00e      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	4a20      	ldr	r2, [pc, #128]	; (8009d80 <HAL_TIM_Base_Start_IT+0xfc>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d009      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a1e      	ldr	r2, [pc, #120]	; (8009d84 <HAL_TIM_Base_Start_IT+0x100>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d004      	beq.n	8009d18 <HAL_TIM_Base_Start_IT+0x94>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a1d      	ldr	r2, [pc, #116]	; (8009d88 <HAL_TIM_Base_Start_IT+0x104>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d115      	bne.n	8009d44 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	689a      	ldr	r2, [r3, #8]
 8009d1e:	4b1b      	ldr	r3, [pc, #108]	; (8009d8c <HAL_TIM_Base_Start_IT+0x108>)
 8009d20:	4013      	ands	r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	2b06      	cmp	r3, #6
 8009d28:	d015      	beq.n	8009d56 <HAL_TIM_Base_Start_IT+0xd2>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d30:	d011      	beq.n	8009d56 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f042 0201 	orr.w	r2, r2, #1
 8009d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d42:	e008      	b.n	8009d56 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 0201 	orr.w	r2, r2, #1
 8009d52:	601a      	str	r2, [r3, #0]
 8009d54:	e000      	b.n	8009d58 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	40010000 	.word	0x40010000
 8009d6c:	40000400 	.word	0x40000400
 8009d70:	40000800 	.word	0x40000800
 8009d74:	40000c00 	.word	0x40000c00
 8009d78:	40010400 	.word	0x40010400
 8009d7c:	40001800 	.word	0x40001800
 8009d80:	40014000 	.word	0x40014000
 8009d84:	4000e000 	.word	0x4000e000
 8009d88:	4000e400 	.word	0x4000e400
 8009d8c:	00010007 	.word	0x00010007

08009d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	691b      	ldr	r3, [r3, #16]
 8009d9e:	f003 0302 	and.w	r3, r3, #2
 8009da2:	2b02      	cmp	r3, #2
 8009da4:	d122      	bne.n	8009dec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	68db      	ldr	r3, [r3, #12]
 8009dac:	f003 0302 	and.w	r3, r3, #2
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d11b      	bne.n	8009dec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f06f 0202 	mvn.w	r2, #2
 8009dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2201      	movs	r2, #1
 8009dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	699b      	ldr	r3, [r3, #24]
 8009dca:	f003 0303 	and.w	r3, r3, #3
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f000 f905 	bl	8009fe2 <HAL_TIM_IC_CaptureCallback>
 8009dd8:	e005      	b.n	8009de6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f8f7 	bl	8009fce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f000 f908 	bl	8009ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2200      	movs	r2, #0
 8009dea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	691b      	ldr	r3, [r3, #16]
 8009df2:	f003 0304 	and.w	r3, r3, #4
 8009df6:	2b04      	cmp	r3, #4
 8009df8:	d122      	bne.n	8009e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68db      	ldr	r3, [r3, #12]
 8009e00:	f003 0304 	and.w	r3, r3, #4
 8009e04:	2b04      	cmp	r3, #4
 8009e06:	d11b      	bne.n	8009e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f06f 0204 	mvn.w	r2, #4
 8009e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2202      	movs	r2, #2
 8009e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d003      	beq.n	8009e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e26:	6878      	ldr	r0, [r7, #4]
 8009e28:	f000 f8db 	bl	8009fe2 <HAL_TIM_IC_CaptureCallback>
 8009e2c:	e005      	b.n	8009e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 f8cd 	bl	8009fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f000 f8de 	bl	8009ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2200      	movs	r2, #0
 8009e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	691b      	ldr	r3, [r3, #16]
 8009e46:	f003 0308 	and.w	r3, r3, #8
 8009e4a:	2b08      	cmp	r3, #8
 8009e4c:	d122      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f003 0308 	and.w	r3, r3, #8
 8009e58:	2b08      	cmp	r3, #8
 8009e5a:	d11b      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f06f 0208 	mvn.w	r2, #8
 8009e64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2204      	movs	r2, #4
 8009e6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	69db      	ldr	r3, [r3, #28]
 8009e72:	f003 0303 	and.w	r3, r3, #3
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d003      	beq.n	8009e82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f000 f8b1 	bl	8009fe2 <HAL_TIM_IC_CaptureCallback>
 8009e80:	e005      	b.n	8009e8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f8a3 	bl	8009fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f8b4 	bl	8009ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0310 	and.w	r3, r3, #16
 8009e9e:	2b10      	cmp	r3, #16
 8009ea0:	d122      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0310 	and.w	r3, r3, #16
 8009eac:	2b10      	cmp	r3, #16
 8009eae:	d11b      	bne.n	8009ee8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0210 	mvn.w	r2, #16
 8009eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2208      	movs	r2, #8
 8009ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	69db      	ldr	r3, [r3, #28]
 8009ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d003      	beq.n	8009ed6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f887 	bl	8009fe2 <HAL_TIM_IC_CaptureCallback>
 8009ed4:	e005      	b.n	8009ee2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f000 f879 	bl	8009fce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	f000 f88a 	bl	8009ff6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	f003 0301 	and.w	r3, r3, #1
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d10e      	bne.n	8009f14 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	f003 0301 	and.w	r3, r3, #1
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d107      	bne.n	8009f14 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f06f 0201 	mvn.w	r2, #1
 8009f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f7f8 f970 	bl	80021f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1e:	2b80      	cmp	r3, #128	; 0x80
 8009f20:	d10e      	bne.n	8009f40 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f2c:	2b80      	cmp	r3, #128	; 0x80
 8009f2e:	d107      	bne.n	8009f40 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f3a:	6878      	ldr	r0, [r7, #4]
 8009f3c:	f000 f9bc 	bl	800a2b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	691b      	ldr	r3, [r3, #16]
 8009f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f4e:	d10e      	bne.n	8009f6e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68db      	ldr	r3, [r3, #12]
 8009f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f5a:	2b80      	cmp	r3, #128	; 0x80
 8009f5c:	d107      	bne.n	8009f6e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f000 f9af 	bl	800a2cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	691b      	ldr	r3, [r3, #16]
 8009f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f78:	2b40      	cmp	r3, #64	; 0x40
 8009f7a:	d10e      	bne.n	8009f9a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f86:	2b40      	cmp	r3, #64	; 0x40
 8009f88:	d107      	bne.n	8009f9a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f838 	bl	800a00a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	691b      	ldr	r3, [r3, #16]
 8009fa0:	f003 0320 	and.w	r3, r3, #32
 8009fa4:	2b20      	cmp	r3, #32
 8009fa6:	d10e      	bne.n	8009fc6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	f003 0320 	and.w	r3, r3, #32
 8009fb2:	2b20      	cmp	r3, #32
 8009fb4:	d107      	bne.n	8009fc6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f06f 0220 	mvn.w	r2, #32
 8009fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 f96f 	bl	800a2a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009fc6:	bf00      	nop
 8009fc8:	3708      	adds	r7, #8
 8009fca:	46bd      	mov	sp, r7
 8009fcc:	bd80      	pop	{r7, pc}

08009fce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009fce:	b480      	push	{r7}
 8009fd0:	b083      	sub	sp, #12
 8009fd2:	af00      	add	r7, sp, #0
 8009fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009fd6:	bf00      	nop
 8009fd8:	370c      	adds	r7, #12
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr

08009fe2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009fe2:	b480      	push	{r7}
 8009fe4:	b083      	sub	sp, #12
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009fea:	bf00      	nop
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009ffe:	bf00      	nop
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a012:	bf00      	nop
 800a014:	370c      	adds	r7, #12
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
	...

0800a020 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	4a44      	ldr	r2, [pc, #272]	; (800a144 <TIM_Base_SetConfig+0x124>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d013      	beq.n	800a060 <TIM_Base_SetConfig+0x40>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a03e:	d00f      	beq.n	800a060 <TIM_Base_SetConfig+0x40>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	4a41      	ldr	r2, [pc, #260]	; (800a148 <TIM_Base_SetConfig+0x128>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d00b      	beq.n	800a060 <TIM_Base_SetConfig+0x40>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	4a40      	ldr	r2, [pc, #256]	; (800a14c <TIM_Base_SetConfig+0x12c>)
 800a04c:	4293      	cmp	r3, r2
 800a04e:	d007      	beq.n	800a060 <TIM_Base_SetConfig+0x40>
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	4a3f      	ldr	r2, [pc, #252]	; (800a150 <TIM_Base_SetConfig+0x130>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d003      	beq.n	800a060 <TIM_Base_SetConfig+0x40>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a3e      	ldr	r2, [pc, #248]	; (800a154 <TIM_Base_SetConfig+0x134>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d108      	bne.n	800a072 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a066:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	685b      	ldr	r3, [r3, #4]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	4313      	orrs	r3, r2
 800a070:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	4a33      	ldr	r2, [pc, #204]	; (800a144 <TIM_Base_SetConfig+0x124>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d027      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a080:	d023      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	4a30      	ldr	r2, [pc, #192]	; (800a148 <TIM_Base_SetConfig+0x128>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d01f      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a2f      	ldr	r2, [pc, #188]	; (800a14c <TIM_Base_SetConfig+0x12c>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d01b      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a2e      	ldr	r2, [pc, #184]	; (800a150 <TIM_Base_SetConfig+0x130>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d017      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a2d      	ldr	r2, [pc, #180]	; (800a154 <TIM_Base_SetConfig+0x134>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d013      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a2c      	ldr	r2, [pc, #176]	; (800a158 <TIM_Base_SetConfig+0x138>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d00f      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a2b      	ldr	r2, [pc, #172]	; (800a15c <TIM_Base_SetConfig+0x13c>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d00b      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	4a2a      	ldr	r2, [pc, #168]	; (800a160 <TIM_Base_SetConfig+0x140>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d007      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	4a29      	ldr	r2, [pc, #164]	; (800a164 <TIM_Base_SetConfig+0x144>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d003      	beq.n	800a0ca <TIM_Base_SetConfig+0xaa>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	4a28      	ldr	r2, [pc, #160]	; (800a168 <TIM_Base_SetConfig+0x148>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d108      	bne.n	800a0dc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	695b      	ldr	r3, [r3, #20]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	689a      	ldr	r2, [r3, #8]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	4a10      	ldr	r2, [pc, #64]	; (800a144 <TIM_Base_SetConfig+0x124>)
 800a104:	4293      	cmp	r3, r2
 800a106:	d00f      	beq.n	800a128 <TIM_Base_SetConfig+0x108>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	4a12      	ldr	r2, [pc, #72]	; (800a154 <TIM_Base_SetConfig+0x134>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d00b      	beq.n	800a128 <TIM_Base_SetConfig+0x108>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	4a11      	ldr	r2, [pc, #68]	; (800a158 <TIM_Base_SetConfig+0x138>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d007      	beq.n	800a128 <TIM_Base_SetConfig+0x108>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	4a10      	ldr	r2, [pc, #64]	; (800a15c <TIM_Base_SetConfig+0x13c>)
 800a11c:	4293      	cmp	r3, r2
 800a11e:	d003      	beq.n	800a128 <TIM_Base_SetConfig+0x108>
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	4a0f      	ldr	r2, [pc, #60]	; (800a160 <TIM_Base_SetConfig+0x140>)
 800a124:	4293      	cmp	r3, r2
 800a126:	d103      	bne.n	800a130 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	691a      	ldr	r2, [r3, #16]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	615a      	str	r2, [r3, #20]
}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop
 800a144:	40010000 	.word	0x40010000
 800a148:	40000400 	.word	0x40000400
 800a14c:	40000800 	.word	0x40000800
 800a150:	40000c00 	.word	0x40000c00
 800a154:	40010400 	.word	0x40010400
 800a158:	40014000 	.word	0x40014000
 800a15c:	40014400 	.word	0x40014400
 800a160:	40014800 	.word	0x40014800
 800a164:	4000e000 	.word	0x4000e000
 800a168:	4000e400 	.word	0x4000e400

0800a16c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d101      	bne.n	800a184 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a180:	2302      	movs	r3, #2
 800a182:	e077      	b.n	800a274 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2201      	movs	r2, #1
 800a188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2202      	movs	r2, #2
 800a190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a35      	ldr	r2, [pc, #212]	; (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d004      	beq.n	800a1b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a34      	ldr	r2, [pc, #208]	; (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d108      	bne.n	800a1ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	685b      	ldr	r3, [r3, #4]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	68fa      	ldr	r2, [r7, #12]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68fa      	ldr	r2, [r7, #12]
 800a1e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a25      	ldr	r2, [pc, #148]	; (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d02c      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1f6:	d027      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	4a22      	ldr	r2, [pc, #136]	; (800a288 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d022      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	4a21      	ldr	r2, [pc, #132]	; (800a28c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d01d      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a1f      	ldr	r2, [pc, #124]	; (800a290 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a212:	4293      	cmp	r3, r2
 800a214:	d018      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a1a      	ldr	r2, [pc, #104]	; (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d013      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a1b      	ldr	r2, [pc, #108]	; (800a294 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d00e      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	4a1a      	ldr	r2, [pc, #104]	; (800a298 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d009      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a18      	ldr	r2, [pc, #96]	; (800a29c <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d004      	beq.n	800a248 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	4a17      	ldr	r2, [pc, #92]	; (800a2a0 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 800a244:	4293      	cmp	r3, r2
 800a246:	d10c      	bne.n	800a262 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a24e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	689b      	ldr	r3, [r3, #8]
 800a254:	68ba      	ldr	r2, [r7, #8]
 800a256:	4313      	orrs	r3, r2
 800a258:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68ba      	ldr	r2, [r7, #8]
 800a260:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a272:	2300      	movs	r3, #0
}
 800a274:	4618      	mov	r0, r3
 800a276:	3714      	adds	r7, #20
 800a278:	46bd      	mov	sp, r7
 800a27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27e:	4770      	bx	lr
 800a280:	40010000 	.word	0x40010000
 800a284:	40010400 	.word	0x40010400
 800a288:	40000400 	.word	0x40000400
 800a28c:	40000800 	.word	0x40000800
 800a290:	40000c00 	.word	0x40000c00
 800a294:	40001800 	.word	0x40001800
 800a298:	40014000 	.word	0x40014000
 800a29c:	4000e000 	.word	0x4000e000
 800a2a0:	4000e400 	.word	0x4000e400

0800a2a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d101      	bne.n	800a2f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a2ee:	2301      	movs	r3, #1
 800a2f0:	e042      	b.n	800a378 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d106      	bne.n	800a30a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f7f8 fdf3 	bl	8002ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2224      	movs	r2, #36	; 0x24
 800a30e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f022 0201 	bic.w	r2, r2, #1
 800a320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f000 f82c 	bl	800a380 <UART_SetConfig>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b01      	cmp	r3, #1
 800a32c:	d101      	bne.n	800a332 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a32e:	2301      	movs	r3, #1
 800a330:	e022      	b.n	800a378 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a336:	2b00      	cmp	r3, #0
 800a338:	d002      	beq.n	800a340 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a33a:	6878      	ldr	r0, [r7, #4]
 800a33c:	f000 fe7e 	bl	800b03c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685a      	ldr	r2, [r3, #4]
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a34e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	689a      	ldr	r2, [r3, #8]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a35e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f042 0201 	orr.w	r2, r2, #1
 800a36e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 ff05 	bl	800b180 <UART_CheckIdleState>
 800a376:	4603      	mov	r3, r0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3708      	adds	r7, #8
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a380:	b5b0      	push	{r4, r5, r7, lr}
 800a382:	b08e      	sub	sp, #56	; 0x38
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	691b      	ldr	r3, [r3, #16]
 800a396:	431a      	orrs	r2, r3
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	431a      	orrs	r2, r3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	69db      	ldr	r3, [r3, #28]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	4bbf      	ldr	r3, [pc, #764]	; (800a6ac <UART_SetConfig+0x32c>)
 800a3ae:	4013      	ands	r3, r2
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	6812      	ldr	r2, [r2, #0]
 800a3b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a3b6:	430b      	orrs	r3, r1
 800a3b8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	68da      	ldr	r2, [r3, #12]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	430a      	orrs	r2, r1
 800a3ce:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4ab5      	ldr	r2, [pc, #724]	; (800a6b0 <UART_SetConfig+0x330>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d004      	beq.n	800a3ea <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6a1b      	ldr	r3, [r3, #32]
 800a3e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	689a      	ldr	r2, [r3, #8]
 800a3f0:	4bb0      	ldr	r3, [pc, #704]	; (800a6b4 <UART_SetConfig+0x334>)
 800a3f2:	4013      	ands	r3, r2
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a3fa:	430b      	orrs	r3, r1
 800a3fc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a404:	f023 010f 	bic.w	r1, r3, #15
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	4aa7      	ldr	r2, [pc, #668]	; (800a6b8 <UART_SetConfig+0x338>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d176      	bne.n	800a50c <UART_SetConfig+0x18c>
 800a41e:	4ba7      	ldr	r3, [pc, #668]	; (800a6bc <UART_SetConfig+0x33c>)
 800a420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a422:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a426:	2b28      	cmp	r3, #40	; 0x28
 800a428:	d86c      	bhi.n	800a504 <UART_SetConfig+0x184>
 800a42a:	a201      	add	r2, pc, #4	; (adr r2, 800a430 <UART_SetConfig+0xb0>)
 800a42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a430:	0800a4d5 	.word	0x0800a4d5
 800a434:	0800a505 	.word	0x0800a505
 800a438:	0800a505 	.word	0x0800a505
 800a43c:	0800a505 	.word	0x0800a505
 800a440:	0800a505 	.word	0x0800a505
 800a444:	0800a505 	.word	0x0800a505
 800a448:	0800a505 	.word	0x0800a505
 800a44c:	0800a505 	.word	0x0800a505
 800a450:	0800a4dd 	.word	0x0800a4dd
 800a454:	0800a505 	.word	0x0800a505
 800a458:	0800a505 	.word	0x0800a505
 800a45c:	0800a505 	.word	0x0800a505
 800a460:	0800a505 	.word	0x0800a505
 800a464:	0800a505 	.word	0x0800a505
 800a468:	0800a505 	.word	0x0800a505
 800a46c:	0800a505 	.word	0x0800a505
 800a470:	0800a4e5 	.word	0x0800a4e5
 800a474:	0800a505 	.word	0x0800a505
 800a478:	0800a505 	.word	0x0800a505
 800a47c:	0800a505 	.word	0x0800a505
 800a480:	0800a505 	.word	0x0800a505
 800a484:	0800a505 	.word	0x0800a505
 800a488:	0800a505 	.word	0x0800a505
 800a48c:	0800a505 	.word	0x0800a505
 800a490:	0800a4ed 	.word	0x0800a4ed
 800a494:	0800a505 	.word	0x0800a505
 800a498:	0800a505 	.word	0x0800a505
 800a49c:	0800a505 	.word	0x0800a505
 800a4a0:	0800a505 	.word	0x0800a505
 800a4a4:	0800a505 	.word	0x0800a505
 800a4a8:	0800a505 	.word	0x0800a505
 800a4ac:	0800a505 	.word	0x0800a505
 800a4b0:	0800a4f5 	.word	0x0800a4f5
 800a4b4:	0800a505 	.word	0x0800a505
 800a4b8:	0800a505 	.word	0x0800a505
 800a4bc:	0800a505 	.word	0x0800a505
 800a4c0:	0800a505 	.word	0x0800a505
 800a4c4:	0800a505 	.word	0x0800a505
 800a4c8:	0800a505 	.word	0x0800a505
 800a4cc:	0800a505 	.word	0x0800a505
 800a4d0:	0800a4fd 	.word	0x0800a4fd
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4da:	e326      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a4dc:	2304      	movs	r3, #4
 800a4de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4e2:	e322      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a4e4:	2308      	movs	r3, #8
 800a4e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ea:	e31e      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a4ec:	2310      	movs	r3, #16
 800a4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f2:	e31a      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a4f4:	2320      	movs	r3, #32
 800a4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fa:	e316      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a4fc:	2340      	movs	r3, #64	; 0x40
 800a4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a502:	e312      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a504:	2380      	movs	r3, #128	; 0x80
 800a506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50a:	e30e      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	4a6b      	ldr	r2, [pc, #428]	; (800a6c0 <UART_SetConfig+0x340>)
 800a512:	4293      	cmp	r3, r2
 800a514:	d130      	bne.n	800a578 <UART_SetConfig+0x1f8>
 800a516:	4b69      	ldr	r3, [pc, #420]	; (800a6bc <UART_SetConfig+0x33c>)
 800a518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a51a:	f003 0307 	and.w	r3, r3, #7
 800a51e:	2b05      	cmp	r3, #5
 800a520:	d826      	bhi.n	800a570 <UART_SetConfig+0x1f0>
 800a522:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <UART_SetConfig+0x1a8>)
 800a524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a528:	0800a541 	.word	0x0800a541
 800a52c:	0800a549 	.word	0x0800a549
 800a530:	0800a551 	.word	0x0800a551
 800a534:	0800a559 	.word	0x0800a559
 800a538:	0800a561 	.word	0x0800a561
 800a53c:	0800a569 	.word	0x0800a569
 800a540:	2300      	movs	r3, #0
 800a542:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a546:	e2f0      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a548:	2304      	movs	r3, #4
 800a54a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a54e:	e2ec      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a550:	2308      	movs	r3, #8
 800a552:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a556:	e2e8      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a558:	2310      	movs	r3, #16
 800a55a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a55e:	e2e4      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a560:	2320      	movs	r3, #32
 800a562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a566:	e2e0      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a568:	2340      	movs	r3, #64	; 0x40
 800a56a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56e:	e2dc      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a570:	2380      	movs	r3, #128	; 0x80
 800a572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a576:	e2d8      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	4a51      	ldr	r2, [pc, #324]	; (800a6c4 <UART_SetConfig+0x344>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d130      	bne.n	800a5e4 <UART_SetConfig+0x264>
 800a582:	4b4e      	ldr	r3, [pc, #312]	; (800a6bc <UART_SetConfig+0x33c>)
 800a584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a586:	f003 0307 	and.w	r3, r3, #7
 800a58a:	2b05      	cmp	r3, #5
 800a58c:	d826      	bhi.n	800a5dc <UART_SetConfig+0x25c>
 800a58e:	a201      	add	r2, pc, #4	; (adr r2, 800a594 <UART_SetConfig+0x214>)
 800a590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a594:	0800a5ad 	.word	0x0800a5ad
 800a598:	0800a5b5 	.word	0x0800a5b5
 800a59c:	0800a5bd 	.word	0x0800a5bd
 800a5a0:	0800a5c5 	.word	0x0800a5c5
 800a5a4:	0800a5cd 	.word	0x0800a5cd
 800a5a8:	0800a5d5 	.word	0x0800a5d5
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b2:	e2ba      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a5b4:	2304      	movs	r3, #4
 800a5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ba:	e2b6      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a5bc:	2308      	movs	r3, #8
 800a5be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5c2:	e2b2      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a5c4:	2310      	movs	r3, #16
 800a5c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ca:	e2ae      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a5cc:	2320      	movs	r3, #32
 800a5ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5d2:	e2aa      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a5d4:	2340      	movs	r3, #64	; 0x40
 800a5d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5da:	e2a6      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a5dc:	2380      	movs	r3, #128	; 0x80
 800a5de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5e2:	e2a2      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	4a37      	ldr	r2, [pc, #220]	; (800a6c8 <UART_SetConfig+0x348>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d130      	bne.n	800a650 <UART_SetConfig+0x2d0>
 800a5ee:	4b33      	ldr	r3, [pc, #204]	; (800a6bc <UART_SetConfig+0x33c>)
 800a5f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5f2:	f003 0307 	and.w	r3, r3, #7
 800a5f6:	2b05      	cmp	r3, #5
 800a5f8:	d826      	bhi.n	800a648 <UART_SetConfig+0x2c8>
 800a5fa:	a201      	add	r2, pc, #4	; (adr r2, 800a600 <UART_SetConfig+0x280>)
 800a5fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a600:	0800a619 	.word	0x0800a619
 800a604:	0800a621 	.word	0x0800a621
 800a608:	0800a629 	.word	0x0800a629
 800a60c:	0800a631 	.word	0x0800a631
 800a610:	0800a639 	.word	0x0800a639
 800a614:	0800a641 	.word	0x0800a641
 800a618:	2300      	movs	r3, #0
 800a61a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a61e:	e284      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a620:	2304      	movs	r3, #4
 800a622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a626:	e280      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a628:	2308      	movs	r3, #8
 800a62a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a62e:	e27c      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a630:	2310      	movs	r3, #16
 800a632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a636:	e278      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a638:	2320      	movs	r3, #32
 800a63a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a63e:	e274      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a640:	2340      	movs	r3, #64	; 0x40
 800a642:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a646:	e270      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a648:	2380      	movs	r3, #128	; 0x80
 800a64a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a64e:	e26c      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	4a1d      	ldr	r2, [pc, #116]	; (800a6cc <UART_SetConfig+0x34c>)
 800a656:	4293      	cmp	r3, r2
 800a658:	d142      	bne.n	800a6e0 <UART_SetConfig+0x360>
 800a65a:	4b18      	ldr	r3, [pc, #96]	; (800a6bc <UART_SetConfig+0x33c>)
 800a65c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a65e:	f003 0307 	and.w	r3, r3, #7
 800a662:	2b05      	cmp	r3, #5
 800a664:	d838      	bhi.n	800a6d8 <UART_SetConfig+0x358>
 800a666:	a201      	add	r2, pc, #4	; (adr r2, 800a66c <UART_SetConfig+0x2ec>)
 800a668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a66c:	0800a685 	.word	0x0800a685
 800a670:	0800a68d 	.word	0x0800a68d
 800a674:	0800a695 	.word	0x0800a695
 800a678:	0800a69d 	.word	0x0800a69d
 800a67c:	0800a6a5 	.word	0x0800a6a5
 800a680:	0800a6d1 	.word	0x0800a6d1
 800a684:	2300      	movs	r3, #0
 800a686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68a:	e24e      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a68c:	2304      	movs	r3, #4
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a692:	e24a      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a694:	2308      	movs	r3, #8
 800a696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69a:	e246      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a69c:	2310      	movs	r3, #16
 800a69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a2:	e242      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a6a4:	2320      	movs	r3, #32
 800a6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6aa:	e23e      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a6ac:	cfff69f3 	.word	0xcfff69f3
 800a6b0:	58000c00 	.word	0x58000c00
 800a6b4:	11fff4ff 	.word	0x11fff4ff
 800a6b8:	40011000 	.word	0x40011000
 800a6bc:	58024400 	.word	0x58024400
 800a6c0:	40004400 	.word	0x40004400
 800a6c4:	40004800 	.word	0x40004800
 800a6c8:	40004c00 	.word	0x40004c00
 800a6cc:	40005000 	.word	0x40005000
 800a6d0:	2340      	movs	r3, #64	; 0x40
 800a6d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6d6:	e228      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a6d8:	2380      	movs	r3, #128	; 0x80
 800a6da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6de:	e224      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4ab1      	ldr	r2, [pc, #708]	; (800a9ac <UART_SetConfig+0x62c>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d176      	bne.n	800a7d8 <UART_SetConfig+0x458>
 800a6ea:	4bb1      	ldr	r3, [pc, #708]	; (800a9b0 <UART_SetConfig+0x630>)
 800a6ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6f2:	2b28      	cmp	r3, #40	; 0x28
 800a6f4:	d86c      	bhi.n	800a7d0 <UART_SetConfig+0x450>
 800a6f6:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <UART_SetConfig+0x37c>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a7a1 	.word	0x0800a7a1
 800a700:	0800a7d1 	.word	0x0800a7d1
 800a704:	0800a7d1 	.word	0x0800a7d1
 800a708:	0800a7d1 	.word	0x0800a7d1
 800a70c:	0800a7d1 	.word	0x0800a7d1
 800a710:	0800a7d1 	.word	0x0800a7d1
 800a714:	0800a7d1 	.word	0x0800a7d1
 800a718:	0800a7d1 	.word	0x0800a7d1
 800a71c:	0800a7a9 	.word	0x0800a7a9
 800a720:	0800a7d1 	.word	0x0800a7d1
 800a724:	0800a7d1 	.word	0x0800a7d1
 800a728:	0800a7d1 	.word	0x0800a7d1
 800a72c:	0800a7d1 	.word	0x0800a7d1
 800a730:	0800a7d1 	.word	0x0800a7d1
 800a734:	0800a7d1 	.word	0x0800a7d1
 800a738:	0800a7d1 	.word	0x0800a7d1
 800a73c:	0800a7b1 	.word	0x0800a7b1
 800a740:	0800a7d1 	.word	0x0800a7d1
 800a744:	0800a7d1 	.word	0x0800a7d1
 800a748:	0800a7d1 	.word	0x0800a7d1
 800a74c:	0800a7d1 	.word	0x0800a7d1
 800a750:	0800a7d1 	.word	0x0800a7d1
 800a754:	0800a7d1 	.word	0x0800a7d1
 800a758:	0800a7d1 	.word	0x0800a7d1
 800a75c:	0800a7b9 	.word	0x0800a7b9
 800a760:	0800a7d1 	.word	0x0800a7d1
 800a764:	0800a7d1 	.word	0x0800a7d1
 800a768:	0800a7d1 	.word	0x0800a7d1
 800a76c:	0800a7d1 	.word	0x0800a7d1
 800a770:	0800a7d1 	.word	0x0800a7d1
 800a774:	0800a7d1 	.word	0x0800a7d1
 800a778:	0800a7d1 	.word	0x0800a7d1
 800a77c:	0800a7c1 	.word	0x0800a7c1
 800a780:	0800a7d1 	.word	0x0800a7d1
 800a784:	0800a7d1 	.word	0x0800a7d1
 800a788:	0800a7d1 	.word	0x0800a7d1
 800a78c:	0800a7d1 	.word	0x0800a7d1
 800a790:	0800a7d1 	.word	0x0800a7d1
 800a794:	0800a7d1 	.word	0x0800a7d1
 800a798:	0800a7d1 	.word	0x0800a7d1
 800a79c:	0800a7c9 	.word	0x0800a7c9
 800a7a0:	2301      	movs	r3, #1
 800a7a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7a6:	e1c0      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a7a8:	2304      	movs	r3, #4
 800a7aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ae:	e1bc      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a7b0:	2308      	movs	r3, #8
 800a7b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7b6:	e1b8      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a7b8:	2310      	movs	r3, #16
 800a7ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7be:	e1b4      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a7c0:	2320      	movs	r3, #32
 800a7c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7c6:	e1b0      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a7c8:	2340      	movs	r3, #64	; 0x40
 800a7ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ce:	e1ac      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a7d0:	2380      	movs	r3, #128	; 0x80
 800a7d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d6:	e1a8      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	4a75      	ldr	r2, [pc, #468]	; (800a9b4 <UART_SetConfig+0x634>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d130      	bne.n	800a844 <UART_SetConfig+0x4c4>
 800a7e2:	4b73      	ldr	r3, [pc, #460]	; (800a9b0 <UART_SetConfig+0x630>)
 800a7e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e6:	f003 0307 	and.w	r3, r3, #7
 800a7ea:	2b05      	cmp	r3, #5
 800a7ec:	d826      	bhi.n	800a83c <UART_SetConfig+0x4bc>
 800a7ee:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <UART_SetConfig+0x474>)
 800a7f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f4:	0800a80d 	.word	0x0800a80d
 800a7f8:	0800a815 	.word	0x0800a815
 800a7fc:	0800a81d 	.word	0x0800a81d
 800a800:	0800a825 	.word	0x0800a825
 800a804:	0800a82d 	.word	0x0800a82d
 800a808:	0800a835 	.word	0x0800a835
 800a80c:	2300      	movs	r3, #0
 800a80e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a812:	e18a      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a814:	2304      	movs	r3, #4
 800a816:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a81a:	e186      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a81c:	2308      	movs	r3, #8
 800a81e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a822:	e182      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a824:	2310      	movs	r3, #16
 800a826:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a82a:	e17e      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a82c:	2320      	movs	r3, #32
 800a82e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a832:	e17a      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a834:	2340      	movs	r3, #64	; 0x40
 800a836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a83a:	e176      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a83c:	2380      	movs	r3, #128	; 0x80
 800a83e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a842:	e172      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a5b      	ldr	r2, [pc, #364]	; (800a9b8 <UART_SetConfig+0x638>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d130      	bne.n	800a8b0 <UART_SetConfig+0x530>
 800a84e:	4b58      	ldr	r3, [pc, #352]	; (800a9b0 <UART_SetConfig+0x630>)
 800a850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a852:	f003 0307 	and.w	r3, r3, #7
 800a856:	2b05      	cmp	r3, #5
 800a858:	d826      	bhi.n	800a8a8 <UART_SetConfig+0x528>
 800a85a:	a201      	add	r2, pc, #4	; (adr r2, 800a860 <UART_SetConfig+0x4e0>)
 800a85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a860:	0800a879 	.word	0x0800a879
 800a864:	0800a881 	.word	0x0800a881
 800a868:	0800a889 	.word	0x0800a889
 800a86c:	0800a891 	.word	0x0800a891
 800a870:	0800a899 	.word	0x0800a899
 800a874:	0800a8a1 	.word	0x0800a8a1
 800a878:	2300      	movs	r3, #0
 800a87a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a87e:	e154      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a880:	2304      	movs	r3, #4
 800a882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a886:	e150      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a888:	2308      	movs	r3, #8
 800a88a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a88e:	e14c      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a890:	2310      	movs	r3, #16
 800a892:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a896:	e148      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a898:	2320      	movs	r3, #32
 800a89a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a89e:	e144      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a8a0:	2340      	movs	r3, #64	; 0x40
 800a8a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8a6:	e140      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a8a8:	2380      	movs	r3, #128	; 0x80
 800a8aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a8ae:	e13c      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a41      	ldr	r2, [pc, #260]	; (800a9bc <UART_SetConfig+0x63c>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	f040 8082 	bne.w	800a9c0 <UART_SetConfig+0x640>
 800a8bc:	4b3c      	ldr	r3, [pc, #240]	; (800a9b0 <UART_SetConfig+0x630>)
 800a8be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a8c4:	2b28      	cmp	r3, #40	; 0x28
 800a8c6:	d86d      	bhi.n	800a9a4 <UART_SetConfig+0x624>
 800a8c8:	a201      	add	r2, pc, #4	; (adr r2, 800a8d0 <UART_SetConfig+0x550>)
 800a8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ce:	bf00      	nop
 800a8d0:	0800a975 	.word	0x0800a975
 800a8d4:	0800a9a5 	.word	0x0800a9a5
 800a8d8:	0800a9a5 	.word	0x0800a9a5
 800a8dc:	0800a9a5 	.word	0x0800a9a5
 800a8e0:	0800a9a5 	.word	0x0800a9a5
 800a8e4:	0800a9a5 	.word	0x0800a9a5
 800a8e8:	0800a9a5 	.word	0x0800a9a5
 800a8ec:	0800a9a5 	.word	0x0800a9a5
 800a8f0:	0800a97d 	.word	0x0800a97d
 800a8f4:	0800a9a5 	.word	0x0800a9a5
 800a8f8:	0800a9a5 	.word	0x0800a9a5
 800a8fc:	0800a9a5 	.word	0x0800a9a5
 800a900:	0800a9a5 	.word	0x0800a9a5
 800a904:	0800a9a5 	.word	0x0800a9a5
 800a908:	0800a9a5 	.word	0x0800a9a5
 800a90c:	0800a9a5 	.word	0x0800a9a5
 800a910:	0800a985 	.word	0x0800a985
 800a914:	0800a9a5 	.word	0x0800a9a5
 800a918:	0800a9a5 	.word	0x0800a9a5
 800a91c:	0800a9a5 	.word	0x0800a9a5
 800a920:	0800a9a5 	.word	0x0800a9a5
 800a924:	0800a9a5 	.word	0x0800a9a5
 800a928:	0800a9a5 	.word	0x0800a9a5
 800a92c:	0800a9a5 	.word	0x0800a9a5
 800a930:	0800a98d 	.word	0x0800a98d
 800a934:	0800a9a5 	.word	0x0800a9a5
 800a938:	0800a9a5 	.word	0x0800a9a5
 800a93c:	0800a9a5 	.word	0x0800a9a5
 800a940:	0800a9a5 	.word	0x0800a9a5
 800a944:	0800a9a5 	.word	0x0800a9a5
 800a948:	0800a9a5 	.word	0x0800a9a5
 800a94c:	0800a9a5 	.word	0x0800a9a5
 800a950:	0800a995 	.word	0x0800a995
 800a954:	0800a9a5 	.word	0x0800a9a5
 800a958:	0800a9a5 	.word	0x0800a9a5
 800a95c:	0800a9a5 	.word	0x0800a9a5
 800a960:	0800a9a5 	.word	0x0800a9a5
 800a964:	0800a9a5 	.word	0x0800a9a5
 800a968:	0800a9a5 	.word	0x0800a9a5
 800a96c:	0800a9a5 	.word	0x0800a9a5
 800a970:	0800a99d 	.word	0x0800a99d
 800a974:	2301      	movs	r3, #1
 800a976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a97a:	e0d6      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a97c:	2304      	movs	r3, #4
 800a97e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a982:	e0d2      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a984:	2308      	movs	r3, #8
 800a986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a98a:	e0ce      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a98c:	2310      	movs	r3, #16
 800a98e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a992:	e0ca      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a994:	2320      	movs	r3, #32
 800a996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a99a:	e0c6      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a99c:	2340      	movs	r3, #64	; 0x40
 800a99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9a2:	e0c2      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a9a4:	2380      	movs	r3, #128	; 0x80
 800a9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a9aa:	e0be      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800a9ac:	40011400 	.word	0x40011400
 800a9b0:	58024400 	.word	0x58024400
 800a9b4:	40007800 	.word	0x40007800
 800a9b8:	40007c00 	.word	0x40007c00
 800a9bc:	40011800 	.word	0x40011800
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	4aad      	ldr	r2, [pc, #692]	; (800ac7c <UART_SetConfig+0x8fc>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d176      	bne.n	800aab8 <UART_SetConfig+0x738>
 800a9ca:	4bad      	ldr	r3, [pc, #692]	; (800ac80 <UART_SetConfig+0x900>)
 800a9cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a9d2:	2b28      	cmp	r3, #40	; 0x28
 800a9d4:	d86c      	bhi.n	800aab0 <UART_SetConfig+0x730>
 800a9d6:	a201      	add	r2, pc, #4	; (adr r2, 800a9dc <UART_SetConfig+0x65c>)
 800a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9dc:	0800aa81 	.word	0x0800aa81
 800a9e0:	0800aab1 	.word	0x0800aab1
 800a9e4:	0800aab1 	.word	0x0800aab1
 800a9e8:	0800aab1 	.word	0x0800aab1
 800a9ec:	0800aab1 	.word	0x0800aab1
 800a9f0:	0800aab1 	.word	0x0800aab1
 800a9f4:	0800aab1 	.word	0x0800aab1
 800a9f8:	0800aab1 	.word	0x0800aab1
 800a9fc:	0800aa89 	.word	0x0800aa89
 800aa00:	0800aab1 	.word	0x0800aab1
 800aa04:	0800aab1 	.word	0x0800aab1
 800aa08:	0800aab1 	.word	0x0800aab1
 800aa0c:	0800aab1 	.word	0x0800aab1
 800aa10:	0800aab1 	.word	0x0800aab1
 800aa14:	0800aab1 	.word	0x0800aab1
 800aa18:	0800aab1 	.word	0x0800aab1
 800aa1c:	0800aa91 	.word	0x0800aa91
 800aa20:	0800aab1 	.word	0x0800aab1
 800aa24:	0800aab1 	.word	0x0800aab1
 800aa28:	0800aab1 	.word	0x0800aab1
 800aa2c:	0800aab1 	.word	0x0800aab1
 800aa30:	0800aab1 	.word	0x0800aab1
 800aa34:	0800aab1 	.word	0x0800aab1
 800aa38:	0800aab1 	.word	0x0800aab1
 800aa3c:	0800aa99 	.word	0x0800aa99
 800aa40:	0800aab1 	.word	0x0800aab1
 800aa44:	0800aab1 	.word	0x0800aab1
 800aa48:	0800aab1 	.word	0x0800aab1
 800aa4c:	0800aab1 	.word	0x0800aab1
 800aa50:	0800aab1 	.word	0x0800aab1
 800aa54:	0800aab1 	.word	0x0800aab1
 800aa58:	0800aab1 	.word	0x0800aab1
 800aa5c:	0800aaa1 	.word	0x0800aaa1
 800aa60:	0800aab1 	.word	0x0800aab1
 800aa64:	0800aab1 	.word	0x0800aab1
 800aa68:	0800aab1 	.word	0x0800aab1
 800aa6c:	0800aab1 	.word	0x0800aab1
 800aa70:	0800aab1 	.word	0x0800aab1
 800aa74:	0800aab1 	.word	0x0800aab1
 800aa78:	0800aab1 	.word	0x0800aab1
 800aa7c:	0800aaa9 	.word	0x0800aaa9
 800aa80:	2301      	movs	r3, #1
 800aa82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa86:	e050      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aa88:	2304      	movs	r3, #4
 800aa8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa8e:	e04c      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aa90:	2308      	movs	r3, #8
 800aa92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa96:	e048      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aa98:	2310      	movs	r3, #16
 800aa9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aa9e:	e044      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aaa0:	2320      	movs	r3, #32
 800aaa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaa6:	e040      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aaa8:	2340      	movs	r3, #64	; 0x40
 800aaaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaae:	e03c      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aab0:	2380      	movs	r3, #128	; 0x80
 800aab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aab6:	e038      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	4a71      	ldr	r2, [pc, #452]	; (800ac84 <UART_SetConfig+0x904>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d130      	bne.n	800ab24 <UART_SetConfig+0x7a4>
 800aac2:	4b6f      	ldr	r3, [pc, #444]	; (800ac80 <UART_SetConfig+0x900>)
 800aac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aac6:	f003 0307 	and.w	r3, r3, #7
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	d826      	bhi.n	800ab1c <UART_SetConfig+0x79c>
 800aace:	a201      	add	r2, pc, #4	; (adr r2, 800aad4 <UART_SetConfig+0x754>)
 800aad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad4:	0800aaed 	.word	0x0800aaed
 800aad8:	0800aaf5 	.word	0x0800aaf5
 800aadc:	0800aafd 	.word	0x0800aafd
 800aae0:	0800ab05 	.word	0x0800ab05
 800aae4:	0800ab0d 	.word	0x0800ab0d
 800aae8:	0800ab15 	.word	0x0800ab15
 800aaec:	2302      	movs	r3, #2
 800aaee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aaf2:	e01a      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aaf4:	2304      	movs	r3, #4
 800aaf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800aafa:	e016      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800aafc:	2308      	movs	r3, #8
 800aafe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab02:	e012      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800ab04:	2310      	movs	r3, #16
 800ab06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab0a:	e00e      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800ab0c:	2320      	movs	r3, #32
 800ab0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab12:	e00a      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800ab14:	2340      	movs	r3, #64	; 0x40
 800ab16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab1a:	e006      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800ab1c:	2380      	movs	r3, #128	; 0x80
 800ab1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ab22:	e002      	b.n	800ab2a <UART_SetConfig+0x7aa>
 800ab24:	2380      	movs	r3, #128	; 0x80
 800ab26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4a55      	ldr	r2, [pc, #340]	; (800ac84 <UART_SetConfig+0x904>)
 800ab30:	4293      	cmp	r3, r2
 800ab32:	f040 80f0 	bne.w	800ad16 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab3a:	2b20      	cmp	r3, #32
 800ab3c:	dc46      	bgt.n	800abcc <UART_SetConfig+0x84c>
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	db75      	blt.n	800ac2e <UART_SetConfig+0x8ae>
 800ab42:	3b02      	subs	r3, #2
 800ab44:	2b1e      	cmp	r3, #30
 800ab46:	d872      	bhi.n	800ac2e <UART_SetConfig+0x8ae>
 800ab48:	a201      	add	r2, pc, #4	; (adr r2, 800ab50 <UART_SetConfig+0x7d0>)
 800ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4e:	bf00      	nop
 800ab50:	0800abd3 	.word	0x0800abd3
 800ab54:	0800ac2f 	.word	0x0800ac2f
 800ab58:	0800abdb 	.word	0x0800abdb
 800ab5c:	0800ac2f 	.word	0x0800ac2f
 800ab60:	0800ac2f 	.word	0x0800ac2f
 800ab64:	0800ac2f 	.word	0x0800ac2f
 800ab68:	0800abeb 	.word	0x0800abeb
 800ab6c:	0800ac2f 	.word	0x0800ac2f
 800ab70:	0800ac2f 	.word	0x0800ac2f
 800ab74:	0800ac2f 	.word	0x0800ac2f
 800ab78:	0800ac2f 	.word	0x0800ac2f
 800ab7c:	0800ac2f 	.word	0x0800ac2f
 800ab80:	0800ac2f 	.word	0x0800ac2f
 800ab84:	0800ac2f 	.word	0x0800ac2f
 800ab88:	0800abfb 	.word	0x0800abfb
 800ab8c:	0800ac2f 	.word	0x0800ac2f
 800ab90:	0800ac2f 	.word	0x0800ac2f
 800ab94:	0800ac2f 	.word	0x0800ac2f
 800ab98:	0800ac2f 	.word	0x0800ac2f
 800ab9c:	0800ac2f 	.word	0x0800ac2f
 800aba0:	0800ac2f 	.word	0x0800ac2f
 800aba4:	0800ac2f 	.word	0x0800ac2f
 800aba8:	0800ac2f 	.word	0x0800ac2f
 800abac:	0800ac2f 	.word	0x0800ac2f
 800abb0:	0800ac2f 	.word	0x0800ac2f
 800abb4:	0800ac2f 	.word	0x0800ac2f
 800abb8:	0800ac2f 	.word	0x0800ac2f
 800abbc:	0800ac2f 	.word	0x0800ac2f
 800abc0:	0800ac2f 	.word	0x0800ac2f
 800abc4:	0800ac2f 	.word	0x0800ac2f
 800abc8:	0800ac21 	.word	0x0800ac21
 800abcc:	2b40      	cmp	r3, #64	; 0x40
 800abce:	d02a      	beq.n	800ac26 <UART_SetConfig+0x8a6>
 800abd0:	e02d      	b.n	800ac2e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800abd2:	f7fd fffd 	bl	8008bd0 <HAL_RCCEx_GetD3PCLK1Freq>
 800abd6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800abd8:	e02f      	b.n	800ac3a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800abda:	f107 0314 	add.w	r3, r7, #20
 800abde:	4618      	mov	r0, r3
 800abe0:	f7fe f80c 	bl	8008bfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800abe4:	69bb      	ldr	r3, [r7, #24]
 800abe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abe8:	e027      	b.n	800ac3a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800abea:	f107 0308 	add.w	r3, r7, #8
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fe f958 	bl	8008ea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800abf8:	e01f      	b.n	800ac3a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abfa:	4b21      	ldr	r3, [pc, #132]	; (800ac80 <UART_SetConfig+0x900>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 0320 	and.w	r3, r3, #32
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d009      	beq.n	800ac1a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac06:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <UART_SetConfig+0x900>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	08db      	lsrs	r3, r3, #3
 800ac0c:	f003 0303 	and.w	r3, r3, #3
 800ac10:	4a1d      	ldr	r2, [pc, #116]	; (800ac88 <UART_SetConfig+0x908>)
 800ac12:	fa22 f303 	lsr.w	r3, r2, r3
 800ac16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac18:	e00f      	b.n	800ac3a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800ac1a:	4b1b      	ldr	r3, [pc, #108]	; (800ac88 <UART_SetConfig+0x908>)
 800ac1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac1e:	e00c      	b.n	800ac3a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac20:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <UART_SetConfig+0x90c>)
 800ac22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac24:	e009      	b.n	800ac3a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ac2c:	e005      	b.n	800ac3a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ac32:	2301      	movs	r3, #1
 800ac34:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ac38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 81e6 	beq.w	800b00e <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac46:	4a12      	ldr	r2, [pc, #72]	; (800ac90 <UART_SetConfig+0x910>)
 800ac48:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac50:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac54:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	685a      	ldr	r2, [r3, #4]
 800ac5a:	4613      	mov	r3, r2
 800ac5c:	005b      	lsls	r3, r3, #1
 800ac5e:	4413      	add	r3, r2
 800ac60:	6a3a      	ldr	r2, [r7, #32]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d305      	bcc.n	800ac72 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac6c:	6a3a      	ldr	r2, [r7, #32]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d910      	bls.n	800ac94 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ac78:	e1c9      	b.n	800b00e <UART_SetConfig+0xc8e>
 800ac7a:	bf00      	nop
 800ac7c:	40011c00 	.word	0x40011c00
 800ac80:	58024400 	.word	0x58024400
 800ac84:	58000c00 	.word	0x58000c00
 800ac88:	03d09000 	.word	0x03d09000
 800ac8c:	003d0900 	.word	0x003d0900
 800ac90:	0801fbdc 	.word	0x0801fbdc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac96:	4618      	mov	r0, r3
 800ac98:	f04f 0100 	mov.w	r1, #0
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca0:	4ac1      	ldr	r2, [pc, #772]	; (800afa8 <UART_SetConfig+0xc28>)
 800aca2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aca6:	b29a      	uxth	r2, r3
 800aca8:	f04f 0300 	mov.w	r3, #0
 800acac:	f7f5 fb98 	bl	80003e0 <__aeabi_uldivmod>
 800acb0:	4602      	mov	r2, r0
 800acb2:	460b      	mov	r3, r1
 800acb4:	4610      	mov	r0, r2
 800acb6:	4619      	mov	r1, r3
 800acb8:	f04f 0200 	mov.w	r2, #0
 800acbc:	f04f 0300 	mov.w	r3, #0
 800acc0:	020b      	lsls	r3, r1, #8
 800acc2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acc6:	0202      	lsls	r2, r0, #8
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	6849      	ldr	r1, [r1, #4]
 800accc:	0849      	lsrs	r1, r1, #1
 800acce:	4608      	mov	r0, r1
 800acd0:	f04f 0100 	mov.w	r1, #0
 800acd4:	1814      	adds	r4, r2, r0
 800acd6:	eb43 0501 	adc.w	r5, r3, r1
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	461a      	mov	r2, r3
 800ace0:	f04f 0300 	mov.w	r3, #0
 800ace4:	4620      	mov	r0, r4
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f5 fb7a 	bl	80003e0 <__aeabi_uldivmod>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	4613      	mov	r3, r2
 800acf2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800acf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acfa:	d308      	bcc.n	800ad0e <UART_SetConfig+0x98e>
 800acfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad02:	d204      	bcs.n	800ad0e <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad0a:	60da      	str	r2, [r3, #12]
 800ad0c:	e17f      	b.n	800b00e <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800ad0e:	2301      	movs	r3, #1
 800ad10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ad14:	e17b      	b.n	800b00e <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	69db      	ldr	r3, [r3, #28]
 800ad1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad1e:	f040 80bd 	bne.w	800ae9c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800ad22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ad26:	2b20      	cmp	r3, #32
 800ad28:	dc48      	bgt.n	800adbc <UART_SetConfig+0xa3c>
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	db7b      	blt.n	800ae26 <UART_SetConfig+0xaa6>
 800ad2e:	2b20      	cmp	r3, #32
 800ad30:	d879      	bhi.n	800ae26 <UART_SetConfig+0xaa6>
 800ad32:	a201      	add	r2, pc, #4	; (adr r2, 800ad38 <UART_SetConfig+0x9b8>)
 800ad34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad38:	0800adc3 	.word	0x0800adc3
 800ad3c:	0800adcb 	.word	0x0800adcb
 800ad40:	0800ae27 	.word	0x0800ae27
 800ad44:	0800ae27 	.word	0x0800ae27
 800ad48:	0800add3 	.word	0x0800add3
 800ad4c:	0800ae27 	.word	0x0800ae27
 800ad50:	0800ae27 	.word	0x0800ae27
 800ad54:	0800ae27 	.word	0x0800ae27
 800ad58:	0800ade3 	.word	0x0800ade3
 800ad5c:	0800ae27 	.word	0x0800ae27
 800ad60:	0800ae27 	.word	0x0800ae27
 800ad64:	0800ae27 	.word	0x0800ae27
 800ad68:	0800ae27 	.word	0x0800ae27
 800ad6c:	0800ae27 	.word	0x0800ae27
 800ad70:	0800ae27 	.word	0x0800ae27
 800ad74:	0800ae27 	.word	0x0800ae27
 800ad78:	0800adf3 	.word	0x0800adf3
 800ad7c:	0800ae27 	.word	0x0800ae27
 800ad80:	0800ae27 	.word	0x0800ae27
 800ad84:	0800ae27 	.word	0x0800ae27
 800ad88:	0800ae27 	.word	0x0800ae27
 800ad8c:	0800ae27 	.word	0x0800ae27
 800ad90:	0800ae27 	.word	0x0800ae27
 800ad94:	0800ae27 	.word	0x0800ae27
 800ad98:	0800ae27 	.word	0x0800ae27
 800ad9c:	0800ae27 	.word	0x0800ae27
 800ada0:	0800ae27 	.word	0x0800ae27
 800ada4:	0800ae27 	.word	0x0800ae27
 800ada8:	0800ae27 	.word	0x0800ae27
 800adac:	0800ae27 	.word	0x0800ae27
 800adb0:	0800ae27 	.word	0x0800ae27
 800adb4:	0800ae27 	.word	0x0800ae27
 800adb8:	0800ae19 	.word	0x0800ae19
 800adbc:	2b40      	cmp	r3, #64	; 0x40
 800adbe:	d02e      	beq.n	800ae1e <UART_SetConfig+0xa9e>
 800adc0:	e031      	b.n	800ae26 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adc2:	f7fc ff9d 	bl	8007d00 <HAL_RCC_GetPCLK1Freq>
 800adc6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800adc8:	e033      	b.n	800ae32 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adca:	f7fc ffaf 	bl	8007d2c <HAL_RCC_GetPCLK2Freq>
 800adce:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800add0:	e02f      	b.n	800ae32 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800add2:	f107 0314 	add.w	r3, r7, #20
 800add6:	4618      	mov	r0, r3
 800add8:	f7fd ff10 	bl	8008bfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800addc:	69bb      	ldr	r3, [r7, #24]
 800adde:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ade0:	e027      	b.n	800ae32 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ade2:	f107 0308 	add.w	r3, r7, #8
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7fe f85c 	bl	8008ea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800adf0:	e01f      	b.n	800ae32 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adf2:	4b6e      	ldr	r3, [pc, #440]	; (800afac <UART_SetConfig+0xc2c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	f003 0320 	and.w	r3, r3, #32
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d009      	beq.n	800ae12 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800adfe:	4b6b      	ldr	r3, [pc, #428]	; (800afac <UART_SetConfig+0xc2c>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	08db      	lsrs	r3, r3, #3
 800ae04:	f003 0303 	and.w	r3, r3, #3
 800ae08:	4a69      	ldr	r2, [pc, #420]	; (800afb0 <UART_SetConfig+0xc30>)
 800ae0a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae10:	e00f      	b.n	800ae32 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800ae12:	4b67      	ldr	r3, [pc, #412]	; (800afb0 <UART_SetConfig+0xc30>)
 800ae14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae16:	e00c      	b.n	800ae32 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae18:	4b66      	ldr	r3, [pc, #408]	; (800afb4 <UART_SetConfig+0xc34>)
 800ae1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae1c:	e009      	b.n	800ae32 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ae24:	e005      	b.n	800ae32 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800ae26:	2300      	movs	r3, #0
 800ae28:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ae30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 80ea 	beq.w	800b00e <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3e:	4a5a      	ldr	r2, [pc, #360]	; (800afa8 <UART_SetConfig+0xc28>)
 800ae40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae44:	461a      	mov	r2, r3
 800ae46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae48:	fbb3 f3f2 	udiv	r3, r3, r2
 800ae4c:	005a      	lsls	r2, r3, #1
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	685b      	ldr	r3, [r3, #4]
 800ae52:	085b      	lsrs	r3, r3, #1
 800ae54:	441a      	add	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae5e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae62:	2b0f      	cmp	r3, #15
 800ae64:	d916      	bls.n	800ae94 <UART_SetConfig+0xb14>
 800ae66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae6c:	d212      	bcs.n	800ae94 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	f023 030f 	bic.w	r3, r3, #15
 800ae76:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7a:	085b      	lsrs	r3, r3, #1
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	f003 0307 	and.w	r3, r3, #7
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae86:	4313      	orrs	r3, r2
 800ae88:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae90:	60da      	str	r2, [r3, #12]
 800ae92:	e0bc      	b.n	800b00e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800ae94:	2301      	movs	r3, #1
 800ae96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ae9a:	e0b8      	b.n	800b00e <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800aea0:	2b20      	cmp	r3, #32
 800aea2:	dc4b      	bgt.n	800af3c <UART_SetConfig+0xbbc>
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	f2c0 8087 	blt.w	800afb8 <UART_SetConfig+0xc38>
 800aeaa:	2b20      	cmp	r3, #32
 800aeac:	f200 8084 	bhi.w	800afb8 <UART_SetConfig+0xc38>
 800aeb0:	a201      	add	r2, pc, #4	; (adr r2, 800aeb8 <UART_SetConfig+0xb38>)
 800aeb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb6:	bf00      	nop
 800aeb8:	0800af43 	.word	0x0800af43
 800aebc:	0800af4b 	.word	0x0800af4b
 800aec0:	0800afb9 	.word	0x0800afb9
 800aec4:	0800afb9 	.word	0x0800afb9
 800aec8:	0800af53 	.word	0x0800af53
 800aecc:	0800afb9 	.word	0x0800afb9
 800aed0:	0800afb9 	.word	0x0800afb9
 800aed4:	0800afb9 	.word	0x0800afb9
 800aed8:	0800af63 	.word	0x0800af63
 800aedc:	0800afb9 	.word	0x0800afb9
 800aee0:	0800afb9 	.word	0x0800afb9
 800aee4:	0800afb9 	.word	0x0800afb9
 800aee8:	0800afb9 	.word	0x0800afb9
 800aeec:	0800afb9 	.word	0x0800afb9
 800aef0:	0800afb9 	.word	0x0800afb9
 800aef4:	0800afb9 	.word	0x0800afb9
 800aef8:	0800af73 	.word	0x0800af73
 800aefc:	0800afb9 	.word	0x0800afb9
 800af00:	0800afb9 	.word	0x0800afb9
 800af04:	0800afb9 	.word	0x0800afb9
 800af08:	0800afb9 	.word	0x0800afb9
 800af0c:	0800afb9 	.word	0x0800afb9
 800af10:	0800afb9 	.word	0x0800afb9
 800af14:	0800afb9 	.word	0x0800afb9
 800af18:	0800afb9 	.word	0x0800afb9
 800af1c:	0800afb9 	.word	0x0800afb9
 800af20:	0800afb9 	.word	0x0800afb9
 800af24:	0800afb9 	.word	0x0800afb9
 800af28:	0800afb9 	.word	0x0800afb9
 800af2c:	0800afb9 	.word	0x0800afb9
 800af30:	0800afb9 	.word	0x0800afb9
 800af34:	0800afb9 	.word	0x0800afb9
 800af38:	0800af99 	.word	0x0800af99
 800af3c:	2b40      	cmp	r3, #64	; 0x40
 800af3e:	d02e      	beq.n	800af9e <UART_SetConfig+0xc1e>
 800af40:	e03a      	b.n	800afb8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800af42:	f7fc fedd 	bl	8007d00 <HAL_RCC_GetPCLK1Freq>
 800af46:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af48:	e03c      	b.n	800afc4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af4a:	f7fc feef 	bl	8007d2c <HAL_RCC_GetPCLK2Freq>
 800af4e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800af50:	e038      	b.n	800afc4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af52:	f107 0314 	add.w	r3, r7, #20
 800af56:	4618      	mov	r0, r3
 800af58:	f7fd fe50 	bl	8008bfc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af60:	e030      	b.n	800afc4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af62:	f107 0308 	add.w	r3, r7, #8
 800af66:	4618      	mov	r0, r3
 800af68:	f7fd ff9c 	bl	8008ea4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af70:	e028      	b.n	800afc4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af72:	4b0e      	ldr	r3, [pc, #56]	; (800afac <UART_SetConfig+0xc2c>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d009      	beq.n	800af92 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800af7e:	4b0b      	ldr	r3, [pc, #44]	; (800afac <UART_SetConfig+0xc2c>)
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	08db      	lsrs	r3, r3, #3
 800af84:	f003 0303 	and.w	r3, r3, #3
 800af88:	4a09      	ldr	r2, [pc, #36]	; (800afb0 <UART_SetConfig+0xc30>)
 800af8a:	fa22 f303 	lsr.w	r3, r2, r3
 800af8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800af90:	e018      	b.n	800afc4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800af92:	4b07      	ldr	r3, [pc, #28]	; (800afb0 <UART_SetConfig+0xc30>)
 800af94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af96:	e015      	b.n	800afc4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800af98:	4b06      	ldr	r3, [pc, #24]	; (800afb4 <UART_SetConfig+0xc34>)
 800af9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800af9c:	e012      	b.n	800afc4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800af9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800afa4:	e00e      	b.n	800afc4 <UART_SetConfig+0xc44>
 800afa6:	bf00      	nop
 800afa8:	0801fbdc 	.word	0x0801fbdc
 800afac:	58024400 	.word	0x58024400
 800afb0:	03d09000 	.word	0x03d09000
 800afb4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800afb8:	2300      	movs	r3, #0
 800afba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800afbc:	2301      	movs	r3, #1
 800afbe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800afc2:	bf00      	nop
    }

    if (pclk != 0U)
 800afc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d021      	beq.n	800b00e <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afce:	4a1a      	ldr	r2, [pc, #104]	; (800b038 <UART_SetConfig+0xcb8>)
 800afd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800afd4:	461a      	mov	r2, r3
 800afd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afd8:	fbb3 f2f2 	udiv	r2, r3, r2
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	085b      	lsrs	r3, r3, #1
 800afe2:	441a      	add	r2, r3
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	fbb2 f3f3 	udiv	r3, r2, r3
 800afec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800afee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff0:	2b0f      	cmp	r3, #15
 800aff2:	d909      	bls.n	800b008 <UART_SetConfig+0xc88>
 800aff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800affa:	d205      	bcs.n	800b008 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800affc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affe:	b29a      	uxth	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	60da      	str	r2, [r3, #12]
 800b006:	e002      	b.n	800b00e <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2201      	movs	r2, #1
 800b012:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2201      	movs	r2, #1
 800b01a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	2200      	movs	r2, #0
 800b022:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800b02a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3738      	adds	r7, #56	; 0x38
 800b032:	46bd      	mov	sp, r7
 800b034:	bdb0      	pop	{r4, r5, r7, pc}
 800b036:	bf00      	nop
 800b038:	0801fbdc 	.word	0x0801fbdc

0800b03c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b03c:	b480      	push	{r7}
 800b03e:	b083      	sub	sp, #12
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b048:	f003 0301 	and.w	r3, r3, #1
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d00a      	beq.n	800b066 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	430a      	orrs	r2, r1
 800b064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b06a:	f003 0302 	and.w	r3, r3, #2
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00a      	beq.n	800b088 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	430a      	orrs	r2, r1
 800b086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b08c:	f003 0304 	and.w	r3, r3, #4
 800b090:	2b00      	cmp	r3, #0
 800b092:	d00a      	beq.n	800b0aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	430a      	orrs	r2, r1
 800b0a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d00a      	beq.n	800b0cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	685b      	ldr	r3, [r3, #4]
 800b0bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	430a      	orrs	r2, r1
 800b0ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d0:	f003 0310 	and.w	r3, r3, #16
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d00a      	beq.n	800b0ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	430a      	orrs	r2, r1
 800b0ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0f2:	f003 0320 	and.w	r3, r3, #32
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	689b      	ldr	r3, [r3, #8]
 800b100:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	430a      	orrs	r2, r1
 800b10e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d01a      	beq.n	800b152 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	430a      	orrs	r2, r1
 800b130:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b13a:	d10a      	bne.n	800b152 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	430a      	orrs	r2, r1
 800b150:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00a      	beq.n	800b174 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	685b      	ldr	r3, [r3, #4]
 800b164:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	430a      	orrs	r2, r1
 800b172:	605a      	str	r2, [r3, #4]
  }
}
 800b174:	bf00      	nop
 800b176:	370c      	adds	r7, #12
 800b178:	46bd      	mov	sp, r7
 800b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17e:	4770      	bx	lr

0800b180 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b086      	sub	sp, #24
 800b184:	af02      	add	r7, sp, #8
 800b186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b190:	f7f8 f8f6 	bl	8003380 <HAL_GetTick>
 800b194:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f003 0308 	and.w	r3, r3, #8
 800b1a0:	2b08      	cmp	r3, #8
 800b1a2:	d10e      	bne.n	800b1c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1a8:	9300      	str	r3, [sp, #0]
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f82f 	bl	800b216 <UART_WaitOnFlagUntilTimeout>
 800b1b8:	4603      	mov	r3, r0
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d001      	beq.n	800b1c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1be:	2303      	movs	r3, #3
 800b1c0:	e025      	b.n	800b20e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f003 0304 	and.w	r3, r3, #4
 800b1cc:	2b04      	cmp	r3, #4
 800b1ce:	d10e      	bne.n	800b1ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b1d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b1de:	6878      	ldr	r0, [r7, #4]
 800b1e0:	f000 f819 	bl	800b216 <UART_WaitOnFlagUntilTimeout>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d001      	beq.n	800b1ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e00f      	b.n	800b20e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2220      	movs	r2, #32
 800b1f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2200      	movs	r2, #0
 800b202:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2200      	movs	r2, #0
 800b208:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b20c:	2300      	movs	r3, #0
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3710      	adds	r7, #16
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}

0800b216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b216:	b580      	push	{r7, lr}
 800b218:	b09c      	sub	sp, #112	; 0x70
 800b21a:	af00      	add	r7, sp, #0
 800b21c:	60f8      	str	r0, [r7, #12]
 800b21e:	60b9      	str	r1, [r7, #8]
 800b220:	603b      	str	r3, [r7, #0]
 800b222:	4613      	mov	r3, r2
 800b224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b226:	e0a9      	b.n	800b37c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b22a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22e:	f000 80a5 	beq.w	800b37c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b232:	f7f8 f8a5 	bl	8003380 <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b23e:	429a      	cmp	r2, r3
 800b240:	d302      	bcc.n	800b248 <UART_WaitOnFlagUntilTimeout+0x32>
 800b242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b244:	2b00      	cmp	r3, #0
 800b246:	d140      	bne.n	800b2ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b24e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b250:	e853 3f00 	ldrex	r3, [r3]
 800b254:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b258:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b25c:	667b      	str	r3, [r7, #100]	; 0x64
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b266:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b268:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b26a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b26c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b26e:	e841 2300 	strex	r3, r2, [r1]
 800b272:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b276:	2b00      	cmp	r3, #0
 800b278:	d1e6      	bne.n	800b248 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	3308      	adds	r3, #8
 800b280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b284:	e853 3f00 	ldrex	r3, [r3]
 800b288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b28c:	f023 0301 	bic.w	r3, r3, #1
 800b290:	663b      	str	r3, [r7, #96]	; 0x60
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	3308      	adds	r3, #8
 800b298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b29a:	64ba      	str	r2, [r7, #72]	; 0x48
 800b29c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b2a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2a2:	e841 2300 	strex	r3, r2, [r1]
 800b2a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b2a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d1e5      	bne.n	800b27a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	2220      	movs	r2, #32
 800b2b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	2220      	movs	r2, #32
 800b2ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e069      	b.n	800b39e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d051      	beq.n	800b37c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2e6:	d149      	bne.n	800b37c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2f0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2fa:	e853 3f00 	ldrex	r3, [r3]
 800b2fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b302:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b306:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	461a      	mov	r2, r3
 800b30e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b310:	637b      	str	r3, [r7, #52]	; 0x34
 800b312:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b314:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b316:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b318:	e841 2300 	strex	r3, r2, [r1]
 800b31c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d1e6      	bne.n	800b2f2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3308      	adds	r3, #8
 800b32a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32c:	697b      	ldr	r3, [r7, #20]
 800b32e:	e853 3f00 	ldrex	r3, [r3]
 800b332:	613b      	str	r3, [r7, #16]
   return(result);
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	f023 0301 	bic.w	r3, r3, #1
 800b33a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b344:	623a      	str	r2, [r7, #32]
 800b346:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b348:	69f9      	ldr	r1, [r7, #28]
 800b34a:	6a3a      	ldr	r2, [r7, #32]
 800b34c:	e841 2300 	strex	r3, r2, [r1]
 800b350:	61bb      	str	r3, [r7, #24]
   return(result);
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d1e5      	bne.n	800b324 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2220      	movs	r2, #32
 800b35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2220      	movs	r2, #32
 800b364:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2220      	movs	r2, #32
 800b36c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800b378:	2303      	movs	r3, #3
 800b37a:	e010      	b.n	800b39e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	69da      	ldr	r2, [r3, #28]
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	4013      	ands	r3, r2
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	429a      	cmp	r2, r3
 800b38a:	bf0c      	ite	eq
 800b38c:	2301      	moveq	r3, #1
 800b38e:	2300      	movne	r3, #0
 800b390:	b2db      	uxtb	r3, r3
 800b392:	461a      	mov	r2, r3
 800b394:	79fb      	ldrb	r3, [r7, #7]
 800b396:	429a      	cmp	r2, r3
 800b398:	f43f af46 	beq.w	800b228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3770      	adds	r7, #112	; 0x70
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}

0800b3a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b3a6:	b480      	push	{r7}
 800b3a8:	b085      	sub	sp, #20
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d101      	bne.n	800b3bc <HAL_UARTEx_DisableFifoMode+0x16>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	e027      	b.n	800b40c <HAL_UARTEx_DisableFifoMode+0x66>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2224      	movs	r2, #36	; 0x24
 800b3c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	681a      	ldr	r2, [r3, #0]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	f022 0201 	bic.w	r2, r2, #1
 800b3e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b3ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2200      	movs	r2, #0
 800b3f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b40a:	2300      	movs	r3, #0
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d101      	bne.n	800b430 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b42c:	2302      	movs	r3, #2
 800b42e:	e02d      	b.n	800b48c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	2201      	movs	r2, #1
 800b434:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2224      	movs	r2, #36	; 0x24
 800b43c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f022 0201 	bic.w	r2, r2, #1
 800b456:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	689b      	ldr	r3, [r3, #8]
 800b45e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	430a      	orrs	r2, r1
 800b46a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	f000 f84f 	bl	800b510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68fa      	ldr	r2, [r7, #12]
 800b478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2220      	movs	r2, #32
 800b47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b4a4:	2b01      	cmp	r3, #1
 800b4a6:	d101      	bne.n	800b4ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	e02d      	b.n	800b508 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2224      	movs	r2, #36	; 0x24
 800b4b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	681a      	ldr	r2, [r3, #0]
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f022 0201 	bic.w	r2, r2, #1
 800b4d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	689b      	ldr	r3, [r3, #8]
 800b4da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	683a      	ldr	r2, [r7, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f000 f811 	bl	800b510 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68fa      	ldr	r2, [r7, #12]
 800b4f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2220      	movs	r2, #32
 800b4fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2200      	movs	r2, #0
 800b502:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b506:	2300      	movs	r3, #0
}
 800b508:	4618      	mov	r0, r3
 800b50a:	3710      	adds	r7, #16
 800b50c:	46bd      	mov	sp, r7
 800b50e:	bd80      	pop	{r7, pc}

0800b510 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d108      	bne.n	800b532 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	2201      	movs	r2, #1
 800b524:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	2201      	movs	r2, #1
 800b52c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b530:	e031      	b.n	800b596 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b532:	2310      	movs	r3, #16
 800b534:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b536:	2310      	movs	r3, #16
 800b538:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	0e5b      	lsrs	r3, r3, #25
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f003 0307 	and.w	r3, r3, #7
 800b548:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	689b      	ldr	r3, [r3, #8]
 800b550:	0f5b      	lsrs	r3, r3, #29
 800b552:	b2db      	uxtb	r3, r3
 800b554:	f003 0307 	and.w	r3, r3, #7
 800b558:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b55a:	7bbb      	ldrb	r3, [r7, #14]
 800b55c:	7b3a      	ldrb	r2, [r7, #12]
 800b55e:	4911      	ldr	r1, [pc, #68]	; (800b5a4 <UARTEx_SetNbDataToProcess+0x94>)
 800b560:	5c8a      	ldrb	r2, [r1, r2]
 800b562:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b566:	7b3a      	ldrb	r2, [r7, #12]
 800b568:	490f      	ldr	r1, [pc, #60]	; (800b5a8 <UARTEx_SetNbDataToProcess+0x98>)
 800b56a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b56c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b570:	b29a      	uxth	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b578:	7bfb      	ldrb	r3, [r7, #15]
 800b57a:	7b7a      	ldrb	r2, [r7, #13]
 800b57c:	4909      	ldr	r1, [pc, #36]	; (800b5a4 <UARTEx_SetNbDataToProcess+0x94>)
 800b57e:	5c8a      	ldrb	r2, [r1, r2]
 800b580:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b584:	7b7a      	ldrb	r2, [r7, #13]
 800b586:	4908      	ldr	r1, [pc, #32]	; (800b5a8 <UARTEx_SetNbDataToProcess+0x98>)
 800b588:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b58a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b58e:	b29a      	uxth	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	0801fbf4 	.word	0x0801fbf4
 800b5a8:	0801fbfc 	.word	0x0801fbfc

0800b5ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800b5b2:	4b98      	ldr	r3, [pc, #608]	; (800b814 <MX_LWIP_Init+0x268>)
 800b5b4:	22c0      	movs	r2, #192	; 0xc0
 800b5b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800b5b8:	4b96      	ldr	r3, [pc, #600]	; (800b814 <MX_LWIP_Init+0x268>)
 800b5ba:	22a8      	movs	r2, #168	; 0xa8
 800b5bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 50;
 800b5be:	4b95      	ldr	r3, [pc, #596]	; (800b814 <MX_LWIP_Init+0x268>)
 800b5c0:	2232      	movs	r2, #50	; 0x32
 800b5c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 800b5c4:	4b93      	ldr	r3, [pc, #588]	; (800b814 <MX_LWIP_Init+0x268>)
 800b5c6:	2264      	movs	r2, #100	; 0x64
 800b5c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800b5ca:	4b93      	ldr	r3, [pc, #588]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b5cc:	22ff      	movs	r2, #255	; 0xff
 800b5ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800b5d0:	4b91      	ldr	r3, [pc, #580]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b5d2:	22ff      	movs	r2, #255	; 0xff
 800b5d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800b5d6:	4b90      	ldr	r3, [pc, #576]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b5d8:	22ff      	movs	r2, #255	; 0xff
 800b5da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800b5dc:	4b8e      	ldr	r3, [pc, #568]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b5de:	2200      	movs	r2, #0
 800b5e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800b5e2:	4b8e      	ldr	r3, [pc, #568]	; (800b81c <MX_LWIP_Init+0x270>)
 800b5e4:	22c0      	movs	r2, #192	; 0xc0
 800b5e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800b5e8:	4b8c      	ldr	r3, [pc, #560]	; (800b81c <MX_LWIP_Init+0x270>)
 800b5ea:	22a8      	movs	r2, #168	; 0xa8
 800b5ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800b5ee:	4b8b      	ldr	r3, [pc, #556]	; (800b81c <MX_LWIP_Init+0x270>)
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800b5f4:	4b89      	ldr	r3, [pc, #548]	; (800b81c <MX_LWIP_Init+0x270>)
 800b5f6:	2201      	movs	r2, #1
 800b5f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800b5fa:	2100      	movs	r1, #0
 800b5fc:	2000      	movs	r0, #0
 800b5fe:	f004 ff45 	bl	801048c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800b602:	4b84      	ldr	r3, [pc, #528]	; (800b814 <MX_LWIP_Init+0x268>)
 800b604:	781b      	ldrb	r3, [r3, #0]
 800b606:	061a      	lsls	r2, r3, #24
 800b608:	4b82      	ldr	r3, [pc, #520]	; (800b814 <MX_LWIP_Init+0x268>)
 800b60a:	785b      	ldrb	r3, [r3, #1]
 800b60c:	041b      	lsls	r3, r3, #16
 800b60e:	431a      	orrs	r2, r3
 800b610:	4b80      	ldr	r3, [pc, #512]	; (800b814 <MX_LWIP_Init+0x268>)
 800b612:	789b      	ldrb	r3, [r3, #2]
 800b614:	021b      	lsls	r3, r3, #8
 800b616:	4313      	orrs	r3, r2
 800b618:	4a7e      	ldr	r2, [pc, #504]	; (800b814 <MX_LWIP_Init+0x268>)
 800b61a:	78d2      	ldrb	r2, [r2, #3]
 800b61c:	4313      	orrs	r3, r2
 800b61e:	061a      	lsls	r2, r3, #24
 800b620:	4b7c      	ldr	r3, [pc, #496]	; (800b814 <MX_LWIP_Init+0x268>)
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	0619      	lsls	r1, r3, #24
 800b626:	4b7b      	ldr	r3, [pc, #492]	; (800b814 <MX_LWIP_Init+0x268>)
 800b628:	785b      	ldrb	r3, [r3, #1]
 800b62a:	041b      	lsls	r3, r3, #16
 800b62c:	4319      	orrs	r1, r3
 800b62e:	4b79      	ldr	r3, [pc, #484]	; (800b814 <MX_LWIP_Init+0x268>)
 800b630:	789b      	ldrb	r3, [r3, #2]
 800b632:	021b      	lsls	r3, r3, #8
 800b634:	430b      	orrs	r3, r1
 800b636:	4977      	ldr	r1, [pc, #476]	; (800b814 <MX_LWIP_Init+0x268>)
 800b638:	78c9      	ldrb	r1, [r1, #3]
 800b63a:	430b      	orrs	r3, r1
 800b63c:	021b      	lsls	r3, r3, #8
 800b63e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b642:	431a      	orrs	r2, r3
 800b644:	4b73      	ldr	r3, [pc, #460]	; (800b814 <MX_LWIP_Init+0x268>)
 800b646:	781b      	ldrb	r3, [r3, #0]
 800b648:	0619      	lsls	r1, r3, #24
 800b64a:	4b72      	ldr	r3, [pc, #456]	; (800b814 <MX_LWIP_Init+0x268>)
 800b64c:	785b      	ldrb	r3, [r3, #1]
 800b64e:	041b      	lsls	r3, r3, #16
 800b650:	4319      	orrs	r1, r3
 800b652:	4b70      	ldr	r3, [pc, #448]	; (800b814 <MX_LWIP_Init+0x268>)
 800b654:	789b      	ldrb	r3, [r3, #2]
 800b656:	021b      	lsls	r3, r3, #8
 800b658:	430b      	orrs	r3, r1
 800b65a:	496e      	ldr	r1, [pc, #440]	; (800b814 <MX_LWIP_Init+0x268>)
 800b65c:	78c9      	ldrb	r1, [r1, #3]
 800b65e:	430b      	orrs	r3, r1
 800b660:	0a1b      	lsrs	r3, r3, #8
 800b662:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b666:	431a      	orrs	r2, r3
 800b668:	4b6a      	ldr	r3, [pc, #424]	; (800b814 <MX_LWIP_Init+0x268>)
 800b66a:	781b      	ldrb	r3, [r3, #0]
 800b66c:	0619      	lsls	r1, r3, #24
 800b66e:	4b69      	ldr	r3, [pc, #420]	; (800b814 <MX_LWIP_Init+0x268>)
 800b670:	785b      	ldrb	r3, [r3, #1]
 800b672:	041b      	lsls	r3, r3, #16
 800b674:	4319      	orrs	r1, r3
 800b676:	4b67      	ldr	r3, [pc, #412]	; (800b814 <MX_LWIP_Init+0x268>)
 800b678:	789b      	ldrb	r3, [r3, #2]
 800b67a:	021b      	lsls	r3, r3, #8
 800b67c:	430b      	orrs	r3, r1
 800b67e:	4965      	ldr	r1, [pc, #404]	; (800b814 <MX_LWIP_Init+0x268>)
 800b680:	78c9      	ldrb	r1, [r1, #3]
 800b682:	430b      	orrs	r3, r1
 800b684:	0e1b      	lsrs	r3, r3, #24
 800b686:	4313      	orrs	r3, r2
 800b688:	4a65      	ldr	r2, [pc, #404]	; (800b820 <MX_LWIP_Init+0x274>)
 800b68a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800b68c:	4b62      	ldr	r3, [pc, #392]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	061a      	lsls	r2, r3, #24
 800b692:	4b61      	ldr	r3, [pc, #388]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b694:	785b      	ldrb	r3, [r3, #1]
 800b696:	041b      	lsls	r3, r3, #16
 800b698:	431a      	orrs	r2, r3
 800b69a:	4b5f      	ldr	r3, [pc, #380]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b69c:	789b      	ldrb	r3, [r3, #2]
 800b69e:	021b      	lsls	r3, r3, #8
 800b6a0:	4313      	orrs	r3, r2
 800b6a2:	4a5d      	ldr	r2, [pc, #372]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6a4:	78d2      	ldrb	r2, [r2, #3]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	061a      	lsls	r2, r3, #24
 800b6aa:	4b5b      	ldr	r3, [pc, #364]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	0619      	lsls	r1, r3, #24
 800b6b0:	4b59      	ldr	r3, [pc, #356]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6b2:	785b      	ldrb	r3, [r3, #1]
 800b6b4:	041b      	lsls	r3, r3, #16
 800b6b6:	4319      	orrs	r1, r3
 800b6b8:	4b57      	ldr	r3, [pc, #348]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6ba:	789b      	ldrb	r3, [r3, #2]
 800b6bc:	021b      	lsls	r3, r3, #8
 800b6be:	430b      	orrs	r3, r1
 800b6c0:	4955      	ldr	r1, [pc, #340]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6c2:	78c9      	ldrb	r1, [r1, #3]
 800b6c4:	430b      	orrs	r3, r1
 800b6c6:	021b      	lsls	r3, r3, #8
 800b6c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b6cc:	431a      	orrs	r2, r3
 800b6ce:	4b52      	ldr	r3, [pc, #328]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	0619      	lsls	r1, r3, #24
 800b6d4:	4b50      	ldr	r3, [pc, #320]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6d6:	785b      	ldrb	r3, [r3, #1]
 800b6d8:	041b      	lsls	r3, r3, #16
 800b6da:	4319      	orrs	r1, r3
 800b6dc:	4b4e      	ldr	r3, [pc, #312]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6de:	789b      	ldrb	r3, [r3, #2]
 800b6e0:	021b      	lsls	r3, r3, #8
 800b6e2:	430b      	orrs	r3, r1
 800b6e4:	494c      	ldr	r1, [pc, #304]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6e6:	78c9      	ldrb	r1, [r1, #3]
 800b6e8:	430b      	orrs	r3, r1
 800b6ea:	0a1b      	lsrs	r3, r3, #8
 800b6ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b6f0:	431a      	orrs	r2, r3
 800b6f2:	4b49      	ldr	r3, [pc, #292]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	0619      	lsls	r1, r3, #24
 800b6f8:	4b47      	ldr	r3, [pc, #284]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b6fa:	785b      	ldrb	r3, [r3, #1]
 800b6fc:	041b      	lsls	r3, r3, #16
 800b6fe:	4319      	orrs	r1, r3
 800b700:	4b45      	ldr	r3, [pc, #276]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b702:	789b      	ldrb	r3, [r3, #2]
 800b704:	021b      	lsls	r3, r3, #8
 800b706:	430b      	orrs	r3, r1
 800b708:	4943      	ldr	r1, [pc, #268]	; (800b818 <MX_LWIP_Init+0x26c>)
 800b70a:	78c9      	ldrb	r1, [r1, #3]
 800b70c:	430b      	orrs	r3, r1
 800b70e:	0e1b      	lsrs	r3, r3, #24
 800b710:	4313      	orrs	r3, r2
 800b712:	4a44      	ldr	r2, [pc, #272]	; (800b824 <MX_LWIP_Init+0x278>)
 800b714:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800b716:	4b41      	ldr	r3, [pc, #260]	; (800b81c <MX_LWIP_Init+0x270>)
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	061a      	lsls	r2, r3, #24
 800b71c:	4b3f      	ldr	r3, [pc, #252]	; (800b81c <MX_LWIP_Init+0x270>)
 800b71e:	785b      	ldrb	r3, [r3, #1]
 800b720:	041b      	lsls	r3, r3, #16
 800b722:	431a      	orrs	r2, r3
 800b724:	4b3d      	ldr	r3, [pc, #244]	; (800b81c <MX_LWIP_Init+0x270>)
 800b726:	789b      	ldrb	r3, [r3, #2]
 800b728:	021b      	lsls	r3, r3, #8
 800b72a:	4313      	orrs	r3, r2
 800b72c:	4a3b      	ldr	r2, [pc, #236]	; (800b81c <MX_LWIP_Init+0x270>)
 800b72e:	78d2      	ldrb	r2, [r2, #3]
 800b730:	4313      	orrs	r3, r2
 800b732:	061a      	lsls	r2, r3, #24
 800b734:	4b39      	ldr	r3, [pc, #228]	; (800b81c <MX_LWIP_Init+0x270>)
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	0619      	lsls	r1, r3, #24
 800b73a:	4b38      	ldr	r3, [pc, #224]	; (800b81c <MX_LWIP_Init+0x270>)
 800b73c:	785b      	ldrb	r3, [r3, #1]
 800b73e:	041b      	lsls	r3, r3, #16
 800b740:	4319      	orrs	r1, r3
 800b742:	4b36      	ldr	r3, [pc, #216]	; (800b81c <MX_LWIP_Init+0x270>)
 800b744:	789b      	ldrb	r3, [r3, #2]
 800b746:	021b      	lsls	r3, r3, #8
 800b748:	430b      	orrs	r3, r1
 800b74a:	4934      	ldr	r1, [pc, #208]	; (800b81c <MX_LWIP_Init+0x270>)
 800b74c:	78c9      	ldrb	r1, [r1, #3]
 800b74e:	430b      	orrs	r3, r1
 800b750:	021b      	lsls	r3, r3, #8
 800b752:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b756:	431a      	orrs	r2, r3
 800b758:	4b30      	ldr	r3, [pc, #192]	; (800b81c <MX_LWIP_Init+0x270>)
 800b75a:	781b      	ldrb	r3, [r3, #0]
 800b75c:	0619      	lsls	r1, r3, #24
 800b75e:	4b2f      	ldr	r3, [pc, #188]	; (800b81c <MX_LWIP_Init+0x270>)
 800b760:	785b      	ldrb	r3, [r3, #1]
 800b762:	041b      	lsls	r3, r3, #16
 800b764:	4319      	orrs	r1, r3
 800b766:	4b2d      	ldr	r3, [pc, #180]	; (800b81c <MX_LWIP_Init+0x270>)
 800b768:	789b      	ldrb	r3, [r3, #2]
 800b76a:	021b      	lsls	r3, r3, #8
 800b76c:	430b      	orrs	r3, r1
 800b76e:	492b      	ldr	r1, [pc, #172]	; (800b81c <MX_LWIP_Init+0x270>)
 800b770:	78c9      	ldrb	r1, [r1, #3]
 800b772:	430b      	orrs	r3, r1
 800b774:	0a1b      	lsrs	r3, r3, #8
 800b776:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b77a:	431a      	orrs	r2, r3
 800b77c:	4b27      	ldr	r3, [pc, #156]	; (800b81c <MX_LWIP_Init+0x270>)
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	0619      	lsls	r1, r3, #24
 800b782:	4b26      	ldr	r3, [pc, #152]	; (800b81c <MX_LWIP_Init+0x270>)
 800b784:	785b      	ldrb	r3, [r3, #1]
 800b786:	041b      	lsls	r3, r3, #16
 800b788:	4319      	orrs	r1, r3
 800b78a:	4b24      	ldr	r3, [pc, #144]	; (800b81c <MX_LWIP_Init+0x270>)
 800b78c:	789b      	ldrb	r3, [r3, #2]
 800b78e:	021b      	lsls	r3, r3, #8
 800b790:	430b      	orrs	r3, r1
 800b792:	4922      	ldr	r1, [pc, #136]	; (800b81c <MX_LWIP_Init+0x270>)
 800b794:	78c9      	ldrb	r1, [r1, #3]
 800b796:	430b      	orrs	r3, r1
 800b798:	0e1b      	lsrs	r3, r3, #24
 800b79a:	4313      	orrs	r3, r2
 800b79c:	4a22      	ldr	r2, [pc, #136]	; (800b828 <MX_LWIP_Init+0x27c>)
 800b79e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800b7a0:	4b22      	ldr	r3, [pc, #136]	; (800b82c <MX_LWIP_Init+0x280>)
 800b7a2:	9302      	str	r3, [sp, #8]
 800b7a4:	4b22      	ldr	r3, [pc, #136]	; (800b830 <MX_LWIP_Init+0x284>)
 800b7a6:	9301      	str	r3, [sp, #4]
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	4b1e      	ldr	r3, [pc, #120]	; (800b828 <MX_LWIP_Init+0x27c>)
 800b7ae:	4a1d      	ldr	r2, [pc, #116]	; (800b824 <MX_LWIP_Init+0x278>)
 800b7b0:	491b      	ldr	r1, [pc, #108]	; (800b820 <MX_LWIP_Init+0x274>)
 800b7b2:	4820      	ldr	r0, [pc, #128]	; (800b834 <MX_LWIP_Init+0x288>)
 800b7b4:	f005 fcec 	bl	8011190 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800b7b8:	481e      	ldr	r0, [pc, #120]	; (800b834 <MX_LWIP_Init+0x288>)
 800b7ba:	f005 fe9b 	bl	80114f4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800b7be:	4b1d      	ldr	r3, [pc, #116]	; (800b834 <MX_LWIP_Init+0x288>)
 800b7c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b7c4:	089b      	lsrs	r3, r3, #2
 800b7c6:	f003 0301 	and.w	r3, r3, #1
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d003      	beq.n	800b7d8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800b7d0:	4818      	ldr	r0, [pc, #96]	; (800b834 <MX_LWIP_Init+0x288>)
 800b7d2:	f005 fe9f 	bl	8011514 <netif_set_up>
 800b7d6:	e002      	b.n	800b7de <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800b7d8:	4816      	ldr	r0, [pc, #88]	; (800b834 <MX_LWIP_Init+0x288>)
 800b7da:	f005 ff07 	bl	80115ec <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800b7de:	4916      	ldr	r1, [pc, #88]	; (800b838 <MX_LWIP_Init+0x28c>)
 800b7e0:	4814      	ldr	r0, [pc, #80]	; (800b834 <MX_LWIP_Init+0x288>)
 800b7e2:	f005 ff99 	bl	8011718 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800b7e6:	2224      	movs	r2, #36	; 0x24
 800b7e8:	2100      	movs	r1, #0
 800b7ea:	4814      	ldr	r0, [pc, #80]	; (800b83c <MX_LWIP_Init+0x290>)
 800b7ec:	f00f ff13 	bl	801b616 <memset>
  attributes.name = "EthLink";
 800b7f0:	4b12      	ldr	r3, [pc, #72]	; (800b83c <MX_LWIP_Init+0x290>)
 800b7f2:	4a13      	ldr	r2, [pc, #76]	; (800b840 <MX_LWIP_Init+0x294>)
 800b7f4:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800b7f6:	4b11      	ldr	r3, [pc, #68]	; (800b83c <MX_LWIP_Init+0x290>)
 800b7f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b7fc:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800b7fe:	4b0f      	ldr	r3, [pc, #60]	; (800b83c <MX_LWIP_Init+0x290>)
 800b800:	2210      	movs	r2, #16
 800b802:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 800b804:	4a0d      	ldr	r2, [pc, #52]	; (800b83c <MX_LWIP_Init+0x290>)
 800b806:	490b      	ldr	r1, [pc, #44]	; (800b834 <MX_LWIP_Init+0x288>)
 800b808:	480e      	ldr	r0, [pc, #56]	; (800b844 <MX_LWIP_Init+0x298>)
 800b80a:	f000 fd3a 	bl	800c282 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800b80e:	bf00      	nop
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	24005024 	.word	0x24005024
 800b818:	24005020 	.word	0x24005020
 800b81c:	24004fc0 	.word	0x24004fc0
 800b820:	2400501c 	.word	0x2400501c
 800b824:	24005028 	.word	0x24005028
 800b828:	2400502c 	.word	0x2400502c
 800b82c:	080103c9 	.word	0x080103c9
 800b830:	0800bf09 	.word	0x0800bf09
 800b834:	24004fe8 	.word	0x24004fe8
 800b838:	0800b849 	.word	0x0800b849
 800b83c:	24004fc4 	.word	0x24004fc4
 800b840:	0801c7d8 	.word	0x0801c7d8
 800b844:	0800c031 	.word	0x0800c031

0800b848 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85a:	4770      	bx	lr

0800b85c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b08e      	sub	sp, #56	; 0x38
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b864:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b868:	2200      	movs	r2, #0
 800b86a:	601a      	str	r2, [r3, #0]
 800b86c:	605a      	str	r2, [r3, #4]
 800b86e:	609a      	str	r2, [r3, #8]
 800b870:	60da      	str	r2, [r3, #12]
 800b872:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a5d      	ldr	r2, [pc, #372]	; (800b9f0 <HAL_ETH_MspInit+0x194>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	f040 80b3 	bne.w	800b9e6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b880:	4b5c      	ldr	r3, [pc, #368]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b882:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b886:	4a5b      	ldr	r2, [pc, #364]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b88c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b890:	4b58      	ldr	r3, [pc, #352]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b892:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b896:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b89a:	623b      	str	r3, [r7, #32]
 800b89c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b89e:	4b55      	ldr	r3, [pc, #340]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b8a4:	4a53      	ldr	r2, [pc, #332]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b8aa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b8ae:	4b51      	ldr	r3, [pc, #324]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8b0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b8b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b8b8:	61fb      	str	r3, [r7, #28]
 800b8ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b8bc:	4b4d      	ldr	r3, [pc, #308]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b8c2:	4a4c      	ldr	r2, [pc, #304]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b8c8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b8cc:	4b49      	ldr	r3, [pc, #292]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b8d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8d6:	61bb      	str	r3, [r7, #24]
 800b8d8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b8da:	4b46      	ldr	r3, [pc, #280]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8e0:	4a44      	ldr	r2, [pc, #272]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8e2:	f043 0304 	orr.w	r3, r3, #4
 800b8e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b8ea:	4b42      	ldr	r3, [pc, #264]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8f0:	f003 0304 	and.w	r3, r3, #4
 800b8f4:	617b      	str	r3, [r7, #20]
 800b8f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b8f8:	4b3e      	ldr	r3, [pc, #248]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b8fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b8fe:	4a3d      	ldr	r2, [pc, #244]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b900:	f043 0301 	orr.w	r3, r3, #1
 800b904:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b908:	4b3a      	ldr	r3, [pc, #232]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b90a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b90e:	f003 0301 	and.w	r3, r3, #1
 800b912:	613b      	str	r3, [r7, #16]
 800b914:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b916:	4b37      	ldr	r3, [pc, #220]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b91c:	4a35      	ldr	r2, [pc, #212]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b91e:	f043 0302 	orr.w	r3, r3, #2
 800b922:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b926:	4b33      	ldr	r3, [pc, #204]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b928:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b92c:	f003 0302 	and.w	r3, r3, #2
 800b930:	60fb      	str	r3, [r7, #12]
 800b932:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b934:	4b2f      	ldr	r3, [pc, #188]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b93a:	4a2e      	ldr	r2, [pc, #184]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b93c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b940:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b944:	4b2b      	ldr	r3, [pc, #172]	; (800b9f4 <HAL_ETH_MspInit+0x198>)
 800b946:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b94a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b94e:	60bb      	str	r3, [r7, #8]
 800b950:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b952:	2332      	movs	r3, #50	; 0x32
 800b954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b956:	2302      	movs	r3, #2
 800b958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b95a:	2300      	movs	r3, #0
 800b95c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b95e:	2300      	movs	r3, #0
 800b960:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b962:	230b      	movs	r3, #11
 800b964:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b96a:	4619      	mov	r1, r3
 800b96c:	4822      	ldr	r0, [pc, #136]	; (800b9f8 <HAL_ETH_MspInit+0x19c>)
 800b96e:	f7fb f88b 	bl	8006a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b972:	2386      	movs	r3, #134	; 0x86
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b976:	2302      	movs	r3, #2
 800b978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b97e:	2300      	movs	r3, #0
 800b980:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b982:	230b      	movs	r3, #11
 800b984:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b98a:	4619      	mov	r1, r3
 800b98c:	481b      	ldr	r0, [pc, #108]	; (800b9fc <HAL_ETH_MspInit+0x1a0>)
 800b98e:	f7fb f87b 	bl	8006a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b998:	2302      	movs	r3, #2
 800b99a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b99c:	2300      	movs	r3, #0
 800b99e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b9a4:	230b      	movs	r3, #11
 800b9a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b9a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4814      	ldr	r0, [pc, #80]	; (800ba00 <HAL_ETH_MspInit+0x1a4>)
 800b9b0:	f7fb f86a 	bl	8006a88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b9b4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b9b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b9ba:	2302      	movs	r3, #2
 800b9bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b9c6:	230b      	movs	r3, #11
 800b9c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b9ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b9ce:	4619      	mov	r1, r3
 800b9d0:	480c      	ldr	r0, [pc, #48]	; (800ba04 <HAL_ETH_MspInit+0x1a8>)
 800b9d2:	f7fb f859 	bl	8006a88 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	2105      	movs	r1, #5
 800b9da:	203d      	movs	r0, #61	; 0x3d
 800b9dc:	f7f7 fdcc 	bl	8003578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b9e0:	203d      	movs	r0, #61	; 0x3d
 800b9e2:	f7f7 fde3 	bl	80035ac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b9e6:	bf00      	nop
 800b9e8:	3738      	adds	r7, #56	; 0x38
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}
 800b9ee:	bf00      	nop
 800b9f0:	40028000 	.word	0x40028000
 800b9f4:	58024400 	.word	0x58024400
 800b9f8:	58020800 	.word	0x58020800
 800b9fc:	58020000 	.word	0x58020000
 800ba00:	58020400 	.word	0x58020400
 800ba04:	58021800 	.word	0x58021800

0800ba08 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800ba08:	b580      	push	{r7, lr}
 800ba0a:	b082      	sub	sp, #8
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800ba10:	4b04      	ldr	r3, [pc, #16]	; (800ba24 <HAL_ETH_RxCpltCallback+0x1c>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	4618      	mov	r0, r3
 800ba16:	f000 fecb 	bl	800c7b0 <osSemaphoreRelease>
}
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	240000c4 	.word	0x240000c4

0800ba28 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b0ac      	sub	sp, #176	; 0xb0
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t idx = 0;
 800ba36:	2300      	movs	r3, #0
 800ba38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800ba42:	4b8f      	ldr	r3, [pc, #572]	; (800bc80 <low_level_init+0x258>)
 800ba44:	4a8f      	ldr	r2, [pc, #572]	; (800bc84 <low_level_init+0x25c>)
 800ba46:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 800ba4c:	2380      	movs	r3, #128	; 0x80
 800ba4e:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 800ba50:	23e1      	movs	r3, #225	; 0xe1
 800ba52:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 800ba54:	2300      	movs	r3, #0
 800ba56:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 800ba58:	2300      	movs	r3, #0
 800ba5a:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 800ba60:	4a87      	ldr	r2, [pc, #540]	; (800bc80 <low_level_init+0x258>)
 800ba62:	f107 030c 	add.w	r3, r7, #12
 800ba66:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800ba68:	4b85      	ldr	r3, [pc, #532]	; (800bc80 <low_level_init+0x258>)
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800ba6e:	4b84      	ldr	r3, [pc, #528]	; (800bc80 <low_level_init+0x258>)
 800ba70:	4a85      	ldr	r2, [pc, #532]	; (800bc88 <low_level_init+0x260>)
 800ba72:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800ba74:	4b82      	ldr	r3, [pc, #520]	; (800bc80 <low_level_init+0x258>)
 800ba76:	4a85      	ldr	r2, [pc, #532]	; (800bc8c <low_level_init+0x264>)
 800ba78:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800ba7a:	4b81      	ldr	r3, [pc, #516]	; (800bc80 <low_level_init+0x258>)
 800ba7c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800ba80:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ba82:	487f      	ldr	r0, [pc, #508]	; (800bc80 <low_level_init+0x258>)
 800ba84:	f7f7 ff06 	bl	8003894 <HAL_ETH_Init>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800ba8e:	2234      	movs	r2, #52	; 0x34
 800ba90:	2100      	movs	r1, #0
 800ba92:	487f      	ldr	r0, [pc, #508]	; (800bc90 <low_level_init+0x268>)
 800ba94:	f00f fdbf 	bl	801b616 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800ba98:	4b7d      	ldr	r3, [pc, #500]	; (800bc90 <low_level_init+0x268>)
 800ba9a:	2221      	movs	r2, #33	; 0x21
 800ba9c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800ba9e:	4b7c      	ldr	r3, [pc, #496]	; (800bc90 <low_level_init+0x268>)
 800baa0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800baa4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800baa6:	4b7a      	ldr	r3, [pc, #488]	; (800bc90 <low_level_init+0x268>)
 800baa8:	2200      	movs	r2, #0
 800baaa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800baac:	4879      	ldr	r0, [pc, #484]	; (800bc94 <low_level_init+0x26c>)
 800baae:	f005 fa29 	bl	8010f04 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2206      	movs	r2, #6
 800bab6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800baba:	4b71      	ldr	r3, [pc, #452]	; (800bc80 <low_level_init+0x258>)
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	781a      	ldrb	r2, [r3, #0]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800bac6:	4b6e      	ldr	r3, [pc, #440]	; (800bc80 <low_level_init+0x258>)
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	785a      	ldrb	r2, [r3, #1]
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800bad2:	4b6b      	ldr	r3, [pc, #428]	; (800bc80 <low_level_init+0x258>)
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	789a      	ldrb	r2, [r3, #2]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800bade:	4b68      	ldr	r3, [pc, #416]	; (800bc80 <low_level_init+0x258>)
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	78da      	ldrb	r2, [r3, #3]
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800baea:	4b65      	ldr	r3, [pc, #404]	; (800bc80 <low_level_init+0x258>)
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	791a      	ldrb	r2, [r3, #4]
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800baf6:	4b62      	ldr	r3, [pc, #392]	; (800bc80 <low_level_init+0x258>)
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	795a      	ldrb	r2, [r3, #5]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800bb08:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bb10:	f043 030a 	orr.w	r3, r3, #10
 800bb14:	b2da      	uxtb	r2, r3
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb22:	e012      	b.n	800bb4a <low_level_init+0x122>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800bb24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb28:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800bb2c:	fb02 f303 	mul.w	r3, r2, r3
 800bb30:	4a59      	ldr	r2, [pc, #356]	; (800bc98 <low_level_init+0x270>)
 800bb32:	441a      	add	r2, r3
 800bb34:	2300      	movs	r3, #0
 800bb36:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800bb3a:	4851      	ldr	r0, [pc, #324]	; (800bc80 <low_level_init+0x258>)
 800bb3c:	f7f7 ff84 	bl	8003a48 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800bb40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb44:	3301      	adds	r3, #1
 800bb46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bb4e:	2b03      	cmp	r3, #3
 800bb50:	d9e8      	bls.n	800bb24 <low_level_init+0xfc>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 800bb52:	2200      	movs	r2, #0
 800bb54:	2101      	movs	r1, #1
 800bb56:	2001      	movs	r0, #1
 800bb58:	f000 fd4e 	bl	800c5f8 <osSemaphoreNew>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	4a4f      	ldr	r2, [pc, #316]	; (800bc9c <low_level_init+0x274>)
 800bb60:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 800bb62:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb66:	2224      	movs	r2, #36	; 0x24
 800bb68:	2100      	movs	r1, #0
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f00f fd53 	bl	801b616 <memset>
  attributes.name = "EthIf";
 800bb70:	4b4b      	ldr	r3, [pc, #300]	; (800bca0 <low_level_init+0x278>)
 800bb72:	67bb      	str	r3, [r7, #120]	; 0x78
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 800bb74:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800bb78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  attributes.priority = osPriorityRealtime;
 800bb7c:	2330      	movs	r3, #48	; 0x30
 800bb7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  osThreadNew(ethernetif_input, netif, &attributes);
 800bb82:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800bb86:	461a      	mov	r2, r3
 800bb88:	6879      	ldr	r1, [r7, #4]
 800bb8a:	4846      	ldr	r0, [pc, #280]	; (800bca4 <low_level_init+0x27c>)
 800bb8c:	f000 fb79 	bl	800c282 <osThreadNew>
/* USER CODE END OS_THREAD_NEW_CMSIS_RTOS_V2 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800bb90:	4945      	ldr	r1, [pc, #276]	; (800bca8 <low_level_init+0x280>)
 800bb92:	4846      	ldr	r0, [pc, #280]	; (800bcac <low_level_init+0x284>)
 800bb94:	f7f7 fa43 	bl	800301e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800bb98:	4844      	ldr	r0, [pc, #272]	; (800bcac <low_level_init+0x284>)
 800bb9a:	f7f7 fa72 	bl	8003082 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800bb9e:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d165      	bne.n	800bc72 <low_level_init+0x24a>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800bba6:	4841      	ldr	r0, [pc, #260]	; (800bcac <low_level_init+0x284>)
 800bba8:	f7f7 fb13 	bl	80031d2 <LAN8742_GetLinkState>
 800bbac:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800bbb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	dc06      	bgt.n	800bbc6 <low_level_init+0x19e>
    {
      netif_set_link_down(netif);
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f005 fd7d 	bl	80116b8 <netif_set_link_down>
      netif_set_down(netif);
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f005 fd14 	bl	80115ec <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800bbc4:	e057      	b.n	800bc76 <low_level_init+0x24e>
 800bbc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bbca:	3b02      	subs	r3, #2
 800bbcc:	2b03      	cmp	r3, #3
 800bbce:	d82b      	bhi.n	800bc28 <low_level_init+0x200>
 800bbd0:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <low_level_init+0x1b0>)
 800bbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd6:	bf00      	nop
 800bbd8:	0800bbe9 	.word	0x0800bbe9
 800bbdc:	0800bbfb 	.word	0x0800bbfb
 800bbe0:	0800bc0b 	.word	0x0800bc0b
 800bbe4:	0800bc1b 	.word	0x0800bc1b
        duplex = ETH_FULLDUPLEX_MODE;
 800bbe8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bbec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800bbf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bbf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800bbf8:	e01f      	b.n	800bc3a <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800bc00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800bc08:	e017      	b.n	800bc3a <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800bc0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800bc12:	2300      	movs	r3, #0
 800bc14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800bc18:	e00f      	b.n	800bc3a <low_level_init+0x212>
        duplex = ETH_HALFDUPLEX_MODE;
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800bc20:	2300      	movs	r3, #0
 800bc22:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800bc26:	e008      	b.n	800bc3a <low_level_init+0x212>
        duplex = ETH_FULLDUPLEX_MODE;
 800bc28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bc2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800bc30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc34:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800bc38:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800bc3a:	f107 0314 	add.w	r3, r7, #20
 800bc3e:	4619      	mov	r1, r3
 800bc40:	480f      	ldr	r0, [pc, #60]	; (800bc80 <low_level_init+0x258>)
 800bc42:	f7f8 fcd3 	bl	80045ec <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800bc46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bc4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    MACConf.Speed = speed;
 800bc4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800bc50:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800bc52:	f107 0314 	add.w	r3, r7, #20
 800bc56:	4619      	mov	r1, r3
 800bc58:	4809      	ldr	r0, [pc, #36]	; (800bc80 <low_level_init+0x258>)
 800bc5a:	f7f8 fe9b 	bl	8004994 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800bc5e:	4808      	ldr	r0, [pc, #32]	; (800bc80 <low_level_init+0x258>)
 800bc60:	f7f7 ff33 	bl	8003aca <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f005 fc55 	bl	8011514 <netif_set_up>
    netif_set_link_up(netif);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f005 fcf0 	bl	8011650 <netif_set_link_up>
}
 800bc70:	e001      	b.n	800bc76 <low_level_init+0x24e>
    Error_Handler();
 800bc72:	f7f6 fad1 	bl	8002218 <Error_Handler>
}
 800bc76:	bf00      	nop
 800bc78:	37b0      	adds	r7, #176	; 0xb0
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	2400511c 	.word	0x2400511c
 800bc84:	40028000 	.word	0x40028000
 800bc88:	30000080 	.word	0x30000080
 800bc8c:	30000000 	.word	0x30000000
 800bc90:	240051a4 	.word	0x240051a4
 800bc94:	0801fc04 	.word	0x0801fc04
 800bc98:	30000100 	.word	0x30000100
 800bc9c:	240000c4 	.word	0x240000c4
 800bca0:	0801c7e0 	.word	0x0801c7e0
 800bca4:	0800beb9 	.word	0x0800beb9
 800bca8:	24000018 	.word	0x24000018
 800bcac:	240050fc 	.word	0x240050fc

0800bcb0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b092      	sub	sp, #72	; 0x48
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bcc4:	f107 030c 	add.w	r3, r7, #12
 800bcc8:	2230      	movs	r2, #48	; 0x30
 800bcca:	2100      	movs	r1, #0
 800bccc:	4618      	mov	r0, r3
 800bcce:	f00f fca2 	bl	801b616 <memset>

  for(q = p; q != NULL; q = q->next)
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	643b      	str	r3, [r7, #64]	; 0x40
 800bcd6:	e049      	b.n	800bd6c <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800bcd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	d902      	bls.n	800bce4 <low_level_output+0x34>
      return ERR_IF;
 800bcde:	f06f 030b 	mvn.w	r3, #11
 800bce2:	e056      	b.n	800bd92 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800bce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bce6:	6859      	ldr	r1, [r3, #4]
 800bce8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bcea:	4613      	mov	r3, r2
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	4413      	add	r3, r2
 800bcf0:	009b      	lsls	r3, r3, #2
 800bcf2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bcf6:	4413      	add	r3, r2
 800bcf8:	3b3c      	subs	r3, #60	; 0x3c
 800bcfa:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800bcfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcfe:	895b      	ldrh	r3, [r3, #10]
 800bd00:	4619      	mov	r1, r3
 800bd02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd04:	4613      	mov	r3, r2
 800bd06:	005b      	lsls	r3, r3, #1
 800bd08:	4413      	add	r3, r2
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bd10:	4413      	add	r3, r2
 800bd12:	3b38      	subs	r3, #56	; 0x38
 800bd14:	6019      	str	r1, [r3, #0]

    if(i>0)
 800bd16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d012      	beq.n	800bd42 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800bd1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd1e:	1e5a      	subs	r2, r3, #1
 800bd20:	f107 000c 	add.w	r0, r7, #12
 800bd24:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800bd26:	460b      	mov	r3, r1
 800bd28:	005b      	lsls	r3, r3, #1
 800bd2a:	440b      	add	r3, r1
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	18c1      	adds	r1, r0, r3
 800bd30:	4613      	mov	r3, r2
 800bd32:	005b      	lsls	r3, r3, #1
 800bd34:	4413      	add	r3, r2
 800bd36:	009b      	lsls	r3, r3, #2
 800bd38:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bd3c:	4413      	add	r3, r2
 800bd3e:	3b34      	subs	r3, #52	; 0x34
 800bd40:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800bd42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d10a      	bne.n	800bd60 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800bd4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	005b      	lsls	r3, r3, #1
 800bd50:	4413      	add	r3, r2
 800bd52:	009b      	lsls	r3, r3, #2
 800bd54:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800bd58:	4413      	add	r3, r2
 800bd5a:	3b34      	subs	r3, #52	; 0x34
 800bd5c:	2200      	movs	r2, #0
 800bd5e:	601a      	str	r2, [r3, #0]
    }

    i++;
 800bd60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bd62:	3301      	adds	r3, #1
 800bd64:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800bd66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	643b      	str	r3, [r7, #64]	; 0x40
 800bd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1b2      	bne.n	800bcd8 <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	891b      	ldrh	r3, [r3, #8]
 800bd76:	461a      	mov	r2, r3
 800bd78:	4b08      	ldr	r3, [pc, #32]	; (800bd9c <low_level_output+0xec>)
 800bd7a:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800bd7c:	4a07      	ldr	r2, [pc, #28]	; (800bd9c <low_level_output+0xec>)
 800bd7e:	f107 030c 	add.w	r3, r7, #12
 800bd82:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800bd84:	2214      	movs	r2, #20
 800bd86:	4905      	ldr	r1, [pc, #20]	; (800bd9c <low_level_output+0xec>)
 800bd88:	4805      	ldr	r0, [pc, #20]	; (800bda0 <low_level_output+0xf0>)
 800bd8a:	f7f7 ff9d 	bl	8003cc8 <HAL_ETH_Transmit>

  return errval;
 800bd8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3748      	adds	r7, #72	; 0x48
 800bd96:	46bd      	mov	sp, r7
 800bd98:	bd80      	pop	{r7, pc}
 800bd9a:	bf00      	nop
 800bd9c:	240051a4 	.word	0x240051a4
 800bda0:	2400511c 	.word	0x2400511c

0800bda4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b098      	sub	sp, #96	; 0x60
 800bda8:	af02      	add	r7, sp, #8
 800bdaa:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800bdac:	2300      	movs	r3, #0
 800bdae:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	60bb      	str	r3, [r7, #8]
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800bdb8:	f107 030c 	add.w	r3, r7, #12
 800bdbc:	2230      	movs	r2, #48	; 0x30
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f00f fc28 	bl	801b616 <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	653b      	str	r3, [r7, #80]	; 0x50
 800bdca:	e015      	b.n	800bdf8 <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800bdcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdce:	1c5a      	adds	r2, r3, #1
 800bdd0:	f107 010c 	add.w	r1, r7, #12
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	005b      	lsls	r3, r3, #1
 800bdd8:	4413      	add	r3, r2
 800bdda:	009b      	lsls	r3, r3, #2
 800bddc:	4419      	add	r1, r3
 800bdde:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bde0:	4613      	mov	r3, r2
 800bde2:	005b      	lsls	r3, r3, #1
 800bde4:	4413      	add	r3, r2
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bdec:	4413      	add	r3, r2
 800bdee:	3b44      	subs	r3, #68	; 0x44
 800bdf0:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800bdf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdf4:	3301      	adds	r3, #1
 800bdf6:	653b      	str	r3, [r7, #80]	; 0x50
 800bdf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bdfa:	2b02      	cmp	r3, #2
 800bdfc:	d9e6      	bls.n	800bdcc <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800bdfe:	f107 030c 	add.w	r3, r7, #12
 800be02:	4619      	mov	r1, r3
 800be04:	4828      	ldr	r0, [pc, #160]	; (800bea8 <low_level_input+0x104>)
 800be06:	f7f8 f8d8 	bl	8003fba <HAL_ETH_GetRxDataBuffer>
 800be0a:	4603      	mov	r3, r0
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d145      	bne.n	800be9c <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800be10:	f107 0308 	add.w	r3, r7, #8
 800be14:	4619      	mov	r1, r3
 800be16:	4824      	ldr	r0, [pc, #144]	; (800bea8 <low_level_input+0x104>)
 800be18:	f7f8 f96d 	bl	80040f6 <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800be1c:	4822      	ldr	r0, [pc, #136]	; (800bea8 <low_level_input+0x104>)
 800be1e:	f7f8 f99d 	bl	800415c <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	68ba      	ldr	r2, [r7, #8]
 800be26:	64bb      	str	r3, [r7, #72]	; 0x48
 800be28:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800be2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dd1d      	ble.n	800be6c <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800be30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be32:	f003 021f 	and.w	r2, r3, #31
 800be36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800be38:	4413      	add	r3, r2
 800be3a:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800be3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800be40:	f3bf 8f4f 	dsb	sy
}
 800be44:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800be46:	4a19      	ldr	r2, [pc, #100]	; (800beac <low_level_input+0x108>)
 800be48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be4a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800be4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be50:	3320      	adds	r3, #32
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800be54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be56:	3b20      	subs	r3, #32
 800be58:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800be5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	dcf2      	bgt.n	800be46 <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800be60:	f3bf 8f4f 	dsb	sy
}
 800be64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800be66:	f3bf 8f6f 	isb	sy
}
 800be6a:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800be6c:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800be6e:	4810      	ldr	r0, [pc, #64]	; (800beb0 <low_level_input+0x10c>)
 800be70:	f005 f8c4 	bl	8010ffc <memp_malloc_pool>
 800be74:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800be76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00f      	beq.n	800be9c <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800be7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be7e:	4a0d      	ldr	r2, [pc, #52]	; (800beb4 <low_level_input+0x110>)
 800be80:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	b299      	uxth	r1, r3
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	68ba      	ldr	r2, [r7, #8]
 800be8a:	b292      	uxth	r2, r2
 800be8c:	9201      	str	r2, [sp, #4]
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be92:	2241      	movs	r2, #65	; 0x41
 800be94:	2000      	movs	r0, #0
 800be96:	f005 fe33 	bl	8011b00 <pbuf_alloced_custom>
 800be9a:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800be9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3758      	adds	r7, #88	; 0x58
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}
 800bea6:	bf00      	nop
 800bea8:	2400511c 	.word	0x2400511c
 800beac:	e000ed00 	.word	0xe000ed00
 800beb0:	0801fc04 	.word	0x0801fc04
 800beb4:	0800bf65 	.word	0x0800bf65

0800beb8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bec4:	4b0f      	ldr	r3, [pc, #60]	; (800bf04 <ethernetif_input+0x4c>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f04f 31ff 	mov.w	r1, #4294967295
 800becc:	4618      	mov	r0, r3
 800bece:	f000 fc1d 	bl	800c70c <osSemaphoreAcquire>
 800bed2:	4603      	mov	r3, r0
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d1f5      	bne.n	800bec4 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800bed8:	68f8      	ldr	r0, [r7, #12]
 800beda:	f7ff ff63 	bl	800bda4 <low_level_input>
 800bede:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800bee0:	68bb      	ldr	r3, [r7, #8]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00a      	beq.n	800befc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	691b      	ldr	r3, [r3, #16]
 800beea:	68f9      	ldr	r1, [r7, #12]
 800beec:	68b8      	ldr	r0, [r7, #8]
 800beee:	4798      	blx	r3
 800bef0:	4603      	mov	r3, r0
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d002      	beq.n	800befc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800bef6:	68b8      	ldr	r0, [r7, #8]
 800bef8:	f005 ffbc 	bl	8011e74 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d1ea      	bne.n	800bed8 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800bf02:	e7df      	b.n	800bec4 <ethernetif_input+0xc>
 800bf04:	240000c4 	.word	0x240000c4

0800bf08 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800bf08:	b580      	push	{r7, lr}
 800bf0a:	b082      	sub	sp, #8
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d106      	bne.n	800bf24 <ethernetif_init+0x1c>
 800bf16:	4b0e      	ldr	r3, [pc, #56]	; (800bf50 <ethernetif_init+0x48>)
 800bf18:	f240 224e 	movw	r2, #590	; 0x24e
 800bf1c:	490d      	ldr	r1, [pc, #52]	; (800bf54 <ethernetif_init+0x4c>)
 800bf1e:	480e      	ldr	r0, [pc, #56]	; (800bf58 <ethernetif_init+0x50>)
 800bf20:	f00f fbdc 	bl	801b6dc <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2273      	movs	r2, #115	; 0x73
 800bf28:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2274      	movs	r2, #116	; 0x74
 800bf30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	4a09      	ldr	r2, [pc, #36]	; (800bf5c <ethernetif_init+0x54>)
 800bf38:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a08      	ldr	r2, [pc, #32]	; (800bf60 <ethernetif_init+0x58>)
 800bf3e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800bf40:	6878      	ldr	r0, [r7, #4]
 800bf42:	f7ff fd71 	bl	800ba28 <low_level_init>

  return ERR_OK;
 800bf46:	2300      	movs	r3, #0
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3708      	adds	r7, #8
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}
 800bf50:	0801c7e8 	.word	0x0801c7e8
 800bf54:	0801c804 	.word	0x0801c804
 800bf58:	0801c814 	.word	0x0801c814
 800bf5c:	08019369 	.word	0x08019369
 800bf60:	0800bcb1 	.word	0x0800bcb1

0800bf64 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800bf70:	68f9      	ldr	r1, [r7, #12]
 800bf72:	4803      	ldr	r0, [pc, #12]	; (800bf80 <pbuf_free_custom+0x1c>)
 800bf74:	f005 f8b6 	bl	80110e4 <memp_free_pool>
}
 800bf78:	bf00      	nop
 800bf7a:	3710      	adds	r7, #16
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	bd80      	pop	{r7, pc}
 800bf80:	0801fc04 	.word	0x0801fc04

0800bf84 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800bf88:	f7f7 f9fa 	bl	8003380 <HAL_GetTick>
 800bf8c:	4603      	mov	r3, r0
}
 800bf8e:	4618      	mov	r0, r3
 800bf90:	bd80      	pop	{r7, pc}
	...

0800bf94 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800bf98:	4802      	ldr	r0, [pc, #8]	; (800bfa4 <ETH_PHY_IO_Init+0x10>)
 800bf9a:	f7f8 fd15 	bl	80049c8 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	bd80      	pop	{r7, pc}
 800bfa4:	2400511c 	.word	0x2400511c

0800bfa8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	af00      	add	r7, sp, #0
  return 0;
 800bfac:	2300      	movs	r3, #0
}
 800bfae:	4618      	mov	r0, r3
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	68f9      	ldr	r1, [r7, #12]
 800bfca:	4807      	ldr	r0, [pc, #28]	; (800bfe8 <ETH_PHY_IO_ReadReg+0x30>)
 800bfcc:	f7f8 fa66 	bl	800449c <HAL_ETH_ReadPHYRegister>
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800bfd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bfda:	e000      	b.n	800bfde <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800bfdc:	2300      	movs	r3, #0
}
 800bfde:	4618      	mov	r0, r3
 800bfe0:	3710      	adds	r7, #16
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	bf00      	nop
 800bfe8:	2400511c 	.word	0x2400511c

0800bfec <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	60f8      	str	r0, [r7, #12]
 800bff4:	60b9      	str	r1, [r7, #8]
 800bff6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	68ba      	ldr	r2, [r7, #8]
 800bffc:	68f9      	ldr	r1, [r7, #12]
 800bffe:	4807      	ldr	r0, [pc, #28]	; (800c01c <ETH_PHY_IO_WriteReg+0x30>)
 800c000:	f7f8 faa0 	bl	8004544 <HAL_ETH_WritePHYRegister>
 800c004:	4603      	mov	r3, r0
 800c006:	2b00      	cmp	r3, #0
 800c008:	d002      	beq.n	800c010 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800c00a:	f04f 33ff 	mov.w	r3, #4294967295
 800c00e:	e000      	b.n	800c012 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
 800c01a:	bf00      	nop
 800c01c:	2400511c 	.word	0x2400511c

0800c020 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c024:	f7f7 f9ac 	bl	8003380 <HAL_GetTick>
 800c028:	4603      	mov	r3, r0
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	bd80      	pop	{r7, pc}
	...

0800c030 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @param  argument: netif
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b0a0      	sub	sp, #128	; 0x80
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800c038:	2300      	movs	r3, #0
 800c03a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c03c:	2300      	movs	r3, #0
 800c03e:	67bb      	str	r3, [r7, #120]	; 0x78
 800c040:	2300      	movs	r3, #0
 800c042:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c048:	483a      	ldr	r0, [pc, #232]	; (800c134 <ethernet_link_thread+0x104>)
 800c04a:	f7f7 f8c2 	bl	80031d2 <LAN8742_GetLinkState>
 800c04e:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800c050:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c056:	089b      	lsrs	r3, r3, #2
 800c058:	f003 0301 	and.w	r3, r3, #1
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00c      	beq.n	800c07c <ethernet_link_thread+0x4c>
 800c062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c064:	2b01      	cmp	r3, #1
 800c066:	dc09      	bgt.n	800c07c <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800c068:	4833      	ldr	r0, [pc, #204]	; (800c138 <ethernet_link_thread+0x108>)
 800c06a:	f7f7 fdb3 	bl	8003bd4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800c06e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c070:	f005 fabc 	bl	80115ec <netif_set_down>
    netif_set_link_down(netif);
 800c074:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c076:	f005 fb1f 	bl	80116b8 <netif_set_link_down>
 800c07a:	e056      	b.n	800c12a <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800c07c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c07e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c082:	f003 0304 	and.w	r3, r3, #4
 800c086:	2b00      	cmp	r3, #0
 800c088:	d14f      	bne.n	800c12a <ethernet_link_thread+0xfa>
 800c08a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c08c:	2b01      	cmp	r3, #1
 800c08e:	dd4c      	ble.n	800c12a <ethernet_link_thread+0xfa>
 800c090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c092:	3b02      	subs	r3, #2
 800c094:	2b03      	cmp	r3, #3
 800c096:	d82b      	bhi.n	800c0f0 <ethernet_link_thread+0xc0>
 800c098:	a201      	add	r2, pc, #4	; (adr r2, 800c0a0 <ethernet_link_thread+0x70>)
 800c09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c09e:	bf00      	nop
 800c0a0:	0800c0b1 	.word	0x0800c0b1
 800c0a4:	0800c0c3 	.word	0x0800c0c3
 800c0a8:	0800c0d3 	.word	0x0800c0d3
 800c0ac:	0800c0e3 	.word	0x0800c0e3
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c0b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c0b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c0c0:	e017      	b.n	800c0f2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800c0c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c0ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c0d0:	e00f      	b.n	800c0f2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800c0d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c0d6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c0dc:	2301      	movs	r3, #1
 800c0de:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c0e0:	e007      	b.n	800c0f2 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800c0ee:	e000      	b.n	800c0f2 <ethernet_link_thread+0xc2>
    default:
      break;
 800c0f0:	bf00      	nop
    }

    if(linkchanged)
 800c0f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d018      	beq.n	800c12a <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800c0f8:	f107 0308 	add.w	r3, r7, #8
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	480e      	ldr	r0, [pc, #56]	; (800c138 <ethernet_link_thread+0x108>)
 800c100:	f7f8 fa74 	bl	80045ec <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800c104:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c106:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800c108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c10a:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800c10c:	f107 0308 	add.w	r3, r7, #8
 800c110:	4619      	mov	r1, r3
 800c112:	4809      	ldr	r0, [pc, #36]	; (800c138 <ethernet_link_thread+0x108>)
 800c114:	f7f8 fc3e 	bl	8004994 <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800c118:	4807      	ldr	r0, [pc, #28]	; (800c138 <ethernet_link_thread+0x108>)
 800c11a:	f7f7 fcd6 	bl	8003aca <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800c11e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c120:	f005 f9f8 	bl	8011514 <netif_set_up>
      netif_set_link_up(netif);
 800c124:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c126:	f005 fa93 	bl	8011650 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800c12a:	2064      	movs	r0, #100	; 0x64
 800c12c:	f000 f93b 	bl	800c3a6 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800c130:	e78a      	b.n	800c048 <ethernet_link_thread+0x18>
 800c132:	bf00      	nop
 800c134:	240050fc 	.word	0x240050fc
 800c138:	2400511c 	.word	0x2400511c

0800c13c <__NVIC_SetPriority>:
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
 800c142:	4603      	mov	r3, r0
 800c144:	6039      	str	r1, [r7, #0]
 800c146:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c148:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	db0a      	blt.n	800c166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	b2da      	uxtb	r2, r3
 800c154:	490c      	ldr	r1, [pc, #48]	; (800c188 <__NVIC_SetPriority+0x4c>)
 800c156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c15a:	0112      	lsls	r2, r2, #4
 800c15c:	b2d2      	uxtb	r2, r2
 800c15e:	440b      	add	r3, r1
 800c160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c164:	e00a      	b.n	800c17c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	4908      	ldr	r1, [pc, #32]	; (800c18c <__NVIC_SetPriority+0x50>)
 800c16c:	88fb      	ldrh	r3, [r7, #6]
 800c16e:	f003 030f 	and.w	r3, r3, #15
 800c172:	3b04      	subs	r3, #4
 800c174:	0112      	lsls	r2, r2, #4
 800c176:	b2d2      	uxtb	r2, r2
 800c178:	440b      	add	r3, r1
 800c17a:	761a      	strb	r2, [r3, #24]
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	e000e100 	.word	0xe000e100
 800c18c:	e000ed00 	.word	0xe000ed00

0800c190 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c190:	b580      	push	{r7, lr}
 800c192:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c194:	4b05      	ldr	r3, [pc, #20]	; (800c1ac <SysTick_Handler+0x1c>)
 800c196:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c198:	f002 fcb8 	bl	800eb0c <xTaskGetSchedulerState>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b01      	cmp	r3, #1
 800c1a0:	d001      	beq.n	800c1a6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c1a2:	f003 fda1 	bl	800fce8 <xPortSysTickHandler>
  }
}
 800c1a6:	bf00      	nop
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	e000e010 	.word	0xe000e010

0800c1b0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c1b4:	2100      	movs	r1, #0
 800c1b6:	f06f 0004 	mvn.w	r0, #4
 800c1ba:	f7ff ffbf 	bl	800c13c <__NVIC_SetPriority>
#endif
}
 800c1be:	bf00      	nop
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1ca:	f3ef 8305 	mrs	r3, IPSR
 800c1ce:	603b      	str	r3, [r7, #0]
  return(result);
 800c1d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d003      	beq.n	800c1de <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c1d6:	f06f 0305 	mvn.w	r3, #5
 800c1da:	607b      	str	r3, [r7, #4]
 800c1dc:	e00c      	b.n	800c1f8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c1de:	4b0a      	ldr	r3, [pc, #40]	; (800c208 <osKernelInitialize+0x44>)
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d105      	bne.n	800c1f2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c1e6:	4b08      	ldr	r3, [pc, #32]	; (800c208 <osKernelInitialize+0x44>)
 800c1e8:	2201      	movs	r2, #1
 800c1ea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	607b      	str	r3, [r7, #4]
 800c1f0:	e002      	b.n	800c1f8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c1f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c1f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c1f8:	687b      	ldr	r3, [r7, #4]
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	370c      	adds	r7, #12
 800c1fe:	46bd      	mov	sp, r7
 800c200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c204:	4770      	bx	lr
 800c206:	bf00      	nop
 800c208:	240000cc 	.word	0x240000cc

0800c20c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b082      	sub	sp, #8
 800c210:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c212:	f3ef 8305 	mrs	r3, IPSR
 800c216:	603b      	str	r3, [r7, #0]
  return(result);
 800c218:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d003      	beq.n	800c226 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c21e:	f06f 0305 	mvn.w	r3, #5
 800c222:	607b      	str	r3, [r7, #4]
 800c224:	e010      	b.n	800c248 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c226:	4b0b      	ldr	r3, [pc, #44]	; (800c254 <osKernelStart+0x48>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d109      	bne.n	800c242 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c22e:	f7ff ffbf 	bl	800c1b0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c232:	4b08      	ldr	r3, [pc, #32]	; (800c254 <osKernelStart+0x48>)
 800c234:	2202      	movs	r2, #2
 800c236:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c238:	f001 ffcc 	bl	800e1d4 <vTaskStartScheduler>
      stat = osOK;
 800c23c:	2300      	movs	r3, #0
 800c23e:	607b      	str	r3, [r7, #4]
 800c240:	e002      	b.n	800c248 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c242:	f04f 33ff 	mov.w	r3, #4294967295
 800c246:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c248:	687b      	ldr	r3, [r7, #4]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	3708      	adds	r7, #8
 800c24e:	46bd      	mov	sp, r7
 800c250:	bd80      	pop	{r7, pc}
 800c252:	bf00      	nop
 800c254:	240000cc 	.word	0x240000cc

0800c258 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c25e:	f3ef 8305 	mrs	r3, IPSR
 800c262:	603b      	str	r3, [r7, #0]
  return(result);
 800c264:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c266:	2b00      	cmp	r3, #0
 800c268:	d003      	beq.n	800c272 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c26a:	f002 f8e1 	bl	800e430 <xTaskGetTickCountFromISR>
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	e002      	b.n	800c278 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c272:	f002 f8cd 	bl	800e410 <xTaskGetTickCount>
 800c276:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c278:	687b      	ldr	r3, [r7, #4]
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3708      	adds	r7, #8
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}

0800c282 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c282:	b580      	push	{r7, lr}
 800c284:	b08e      	sub	sp, #56	; 0x38
 800c286:	af04      	add	r7, sp, #16
 800c288:	60f8      	str	r0, [r7, #12]
 800c28a:	60b9      	str	r1, [r7, #8]
 800c28c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c28e:	2300      	movs	r3, #0
 800c290:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c292:	f3ef 8305 	mrs	r3, IPSR
 800c296:	617b      	str	r3, [r7, #20]
  return(result);
 800c298:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d17e      	bne.n	800c39c <osThreadNew+0x11a>
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d07b      	beq.n	800c39c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c2a4:	2380      	movs	r3, #128	; 0x80
 800c2a6:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c2a8:	2318      	movs	r3, #24
 800c2aa:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800c2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c2b4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d045      	beq.n	800c348 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d002      	beq.n	800c2ca <osThreadNew+0x48>
        name = attr->name;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	699b      	ldr	r3, [r3, #24]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	699b      	ldr	r3, [r3, #24]
 800c2d6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c2d8:	69fb      	ldr	r3, [r7, #28]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d008      	beq.n	800c2f0 <osThreadNew+0x6e>
 800c2de:	69fb      	ldr	r3, [r7, #28]
 800c2e0:	2b38      	cmp	r3, #56	; 0x38
 800c2e2:	d805      	bhi.n	800c2f0 <osThreadNew+0x6e>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	685b      	ldr	r3, [r3, #4]
 800c2e8:	f003 0301 	and.w	r3, r3, #1
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d001      	beq.n	800c2f4 <osThreadNew+0x72>
        return (NULL);
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	e054      	b.n	800c39e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d003      	beq.n	800c304 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	695b      	ldr	r3, [r3, #20]
 800c300:	089b      	lsrs	r3, r3, #2
 800c302:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	689b      	ldr	r3, [r3, #8]
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00e      	beq.n	800c32a <osThreadNew+0xa8>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	2bbf      	cmp	r3, #191	; 0xbf
 800c312:	d90a      	bls.n	800c32a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d006      	beq.n	800c32a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d002      	beq.n	800c32a <osThreadNew+0xa8>
        mem = 1;
 800c324:	2301      	movs	r3, #1
 800c326:	61bb      	str	r3, [r7, #24]
 800c328:	e010      	b.n	800c34c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	689b      	ldr	r3, [r3, #8]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10c      	bne.n	800c34c <osThreadNew+0xca>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	68db      	ldr	r3, [r3, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d108      	bne.n	800c34c <osThreadNew+0xca>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	691b      	ldr	r3, [r3, #16]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d104      	bne.n	800c34c <osThreadNew+0xca>
          mem = 0;
 800c342:	2300      	movs	r3, #0
 800c344:	61bb      	str	r3, [r7, #24]
 800c346:	e001      	b.n	800c34c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c348:	2300      	movs	r3, #0
 800c34a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d110      	bne.n	800c374 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c35a:	9202      	str	r2, [sp, #8]
 800c35c:	9301      	str	r3, [sp, #4]
 800c35e:	69fb      	ldr	r3, [r7, #28]
 800c360:	9300      	str	r3, [sp, #0]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	6a3a      	ldr	r2, [r7, #32]
 800c366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f001 fd43 	bl	800ddf4 <xTaskCreateStatic>
 800c36e:	4603      	mov	r3, r0
 800c370:	613b      	str	r3, [r7, #16]
 800c372:	e013      	b.n	800c39c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d110      	bne.n	800c39c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	b29a      	uxth	r2, r3
 800c37e:	f107 0310 	add.w	r3, r7, #16
 800c382:	9301      	str	r3, [sp, #4]
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	9300      	str	r3, [sp, #0]
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f001 fd8e 	bl	800deae <xTaskCreate>
 800c392:	4603      	mov	r3, r0
 800c394:	2b01      	cmp	r3, #1
 800c396:	d001      	beq.n	800c39c <osThreadNew+0x11a>
            hTask = NULL;
 800c398:	2300      	movs	r3, #0
 800c39a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c39c:	693b      	ldr	r3, [r7, #16]
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3728      	adds	r7, #40	; 0x28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b084      	sub	sp, #16
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3ae:	f3ef 8305 	mrs	r3, IPSR
 800c3b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d003      	beq.n	800c3c2 <osDelay+0x1c>
    stat = osErrorISR;
 800c3ba:	f06f 0305 	mvn.w	r3, #5
 800c3be:	60fb      	str	r3, [r7, #12]
 800c3c0:	e007      	b.n	800c3d2 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d002      	beq.n	800c3d2 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f001 fecd 	bl	800e16c <vTaskDelay>
    }
  }

  return (stat);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3710      	adds	r7, #16
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3e8:	f3ef 8305 	mrs	r3, IPSR
 800c3ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800c3ee:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d174      	bne.n	800c4de <osMutexNew+0x102>
    if (attr != NULL) {
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d003      	beq.n	800c402 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	61bb      	str	r3, [r7, #24]
 800c400:	e001      	b.n	800c406 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c402:	2300      	movs	r3, #0
 800c404:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c406:	69bb      	ldr	r3, [r7, #24]
 800c408:	f003 0301 	and.w	r3, r3, #1
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d002      	beq.n	800c416 <osMutexNew+0x3a>
      rmtx = 1U;
 800c410:	2301      	movs	r3, #1
 800c412:	617b      	str	r3, [r7, #20]
 800c414:	e001      	b.n	800c41a <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c416:	2300      	movs	r3, #0
 800c418:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	f003 0308 	and.w	r3, r3, #8
 800c420:	2b00      	cmp	r3, #0
 800c422:	d15c      	bne.n	800c4de <osMutexNew+0x102>
      mem = -1;
 800c424:	f04f 33ff 	mov.w	r3, #4294967295
 800c428:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d015      	beq.n	800c45c <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d006      	beq.n	800c446 <osMutexNew+0x6a>
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	2b4f      	cmp	r3, #79	; 0x4f
 800c43e:	d902      	bls.n	800c446 <osMutexNew+0x6a>
          mem = 1;
 800c440:	2301      	movs	r3, #1
 800c442:	613b      	str	r3, [r7, #16]
 800c444:	e00c      	b.n	800c460 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	689b      	ldr	r3, [r3, #8]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d108      	bne.n	800c460 <osMutexNew+0x84>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d104      	bne.n	800c460 <osMutexNew+0x84>
            mem = 0;
 800c456:	2300      	movs	r3, #0
 800c458:	613b      	str	r3, [r7, #16]
 800c45a:	e001      	b.n	800c460 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c460:	693b      	ldr	r3, [r7, #16]
 800c462:	2b01      	cmp	r3, #1
 800c464:	d112      	bne.n	800c48c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d007      	beq.n	800c47c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	4619      	mov	r1, r3
 800c472:	2004      	movs	r0, #4
 800c474:	f000 fd69 	bl	800cf4a <xQueueCreateMutexStatic>
 800c478:	61f8      	str	r0, [r7, #28]
 800c47a:	e016      	b.n	800c4aa <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	689b      	ldr	r3, [r3, #8]
 800c480:	4619      	mov	r1, r3
 800c482:	2001      	movs	r0, #1
 800c484:	f000 fd61 	bl	800cf4a <xQueueCreateMutexStatic>
 800c488:	61f8      	str	r0, [r7, #28]
 800c48a:	e00e      	b.n	800c4aa <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d10b      	bne.n	800c4aa <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d004      	beq.n	800c4a2 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c498:	2004      	movs	r0, #4
 800c49a:	f000 fd3e 	bl	800cf1a <xQueueCreateMutex>
 800c49e:	61f8      	str	r0, [r7, #28]
 800c4a0:	e003      	b.n	800c4aa <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c4a2:	2001      	movs	r0, #1
 800c4a4:	f000 fd39 	bl	800cf1a <xQueueCreateMutex>
 800c4a8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d00c      	beq.n	800c4ca <osMutexNew+0xee>
        if (attr != NULL) {
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d003      	beq.n	800c4be <osMutexNew+0xe2>
          name = attr->name;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	60fb      	str	r3, [r7, #12]
 800c4bc:	e001      	b.n	800c4c2 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c4c2:	68f9      	ldr	r1, [r7, #12]
 800c4c4:	69f8      	ldr	r0, [r7, #28]
 800c4c6:	f001 fc0d 	bl	800dce4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d006      	beq.n	800c4de <osMutexNew+0x102>
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d003      	beq.n	800c4de <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c4d6:	69fb      	ldr	r3, [r7, #28]
 800c4d8:	f043 0301 	orr.w	r3, r3, #1
 800c4dc:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c4de:	69fb      	ldr	r3, [r7, #28]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3720      	adds	r7, #32
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}

0800c4e8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
 800c4f0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f023 0301 	bic.w	r3, r3, #1
 800c4f8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	f003 0301 	and.w	r3, r3, #1
 800c500:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c502:	2300      	movs	r3, #0
 800c504:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c506:	f3ef 8305 	mrs	r3, IPSR
 800c50a:	60bb      	str	r3, [r7, #8]
  return(result);
 800c50c:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d003      	beq.n	800c51a <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c512:	f06f 0305 	mvn.w	r3, #5
 800c516:	617b      	str	r3, [r7, #20]
 800c518:	e02c      	b.n	800c574 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c51a:	693b      	ldr	r3, [r7, #16]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d103      	bne.n	800c528 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c520:	f06f 0303 	mvn.w	r3, #3
 800c524:	617b      	str	r3, [r7, #20]
 800c526:	e025      	b.n	800c574 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d011      	beq.n	800c552 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c52e:	6839      	ldr	r1, [r7, #0]
 800c530:	6938      	ldr	r0, [r7, #16]
 800c532:	f000 fd59 	bl	800cfe8 <xQueueTakeMutexRecursive>
 800c536:	4603      	mov	r3, r0
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d01b      	beq.n	800c574 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d003      	beq.n	800c54a <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c542:	f06f 0301 	mvn.w	r3, #1
 800c546:	617b      	str	r3, [r7, #20]
 800c548:	e014      	b.n	800c574 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c54a:	f06f 0302 	mvn.w	r3, #2
 800c54e:	617b      	str	r3, [r7, #20]
 800c550:	e010      	b.n	800c574 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c552:	6839      	ldr	r1, [r7, #0]
 800c554:	6938      	ldr	r0, [r7, #16]
 800c556:	f001 f8ed 	bl	800d734 <xQueueSemaphoreTake>
 800c55a:	4603      	mov	r3, r0
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d009      	beq.n	800c574 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d003      	beq.n	800c56e <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c566:	f06f 0301 	mvn.w	r3, #1
 800c56a:	617b      	str	r3, [r7, #20]
 800c56c:	e002      	b.n	800c574 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c56e:	f06f 0302 	mvn.w	r3, #2
 800c572:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c574:	697b      	ldr	r3, [r7, #20]
}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c57e:	b580      	push	{r7, lr}
 800c580:	b086      	sub	sp, #24
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	f023 0301 	bic.w	r3, r3, #1
 800c58c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c596:	2300      	movs	r3, #0
 800c598:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c59a:	f3ef 8305 	mrs	r3, IPSR
 800c59e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5a0:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d003      	beq.n	800c5ae <osMutexRelease+0x30>
    stat = osErrorISR;
 800c5a6:	f06f 0305 	mvn.w	r3, #5
 800c5aa:	617b      	str	r3, [r7, #20]
 800c5ac:	e01f      	b.n	800c5ee <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d103      	bne.n	800c5bc <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c5b4:	f06f 0303 	mvn.w	r3, #3
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	e018      	b.n	800c5ee <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d009      	beq.n	800c5d6 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c5c2:	6938      	ldr	r0, [r7, #16]
 800c5c4:	f000 fcdc 	bl	800cf80 <xQueueGiveMutexRecursive>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d00f      	beq.n	800c5ee <osMutexRelease+0x70>
        stat = osErrorResource;
 800c5ce:	f06f 0302 	mvn.w	r3, #2
 800c5d2:	617b      	str	r3, [r7, #20]
 800c5d4:	e00b      	b.n	800c5ee <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	2200      	movs	r2, #0
 800c5da:	2100      	movs	r1, #0
 800c5dc:	6938      	ldr	r0, [r7, #16]
 800c5de:	f000 fda3 	bl	800d128 <xQueueGenericSend>
 800c5e2:	4603      	mov	r3, r0
 800c5e4:	2b01      	cmp	r3, #1
 800c5e6:	d002      	beq.n	800c5ee <osMutexRelease+0x70>
        stat = osErrorResource;
 800c5e8:	f06f 0302 	mvn.w	r3, #2
 800c5ec:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c5ee:	697b      	ldr	r3, [r7, #20]
}
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	3718      	adds	r7, #24
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	bd80      	pop	{r7, pc}

0800c5f8 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b08a      	sub	sp, #40	; 0x28
 800c5fc:	af02      	add	r7, sp, #8
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c604:	2300      	movs	r3, #0
 800c606:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c608:	f3ef 8305 	mrs	r3, IPSR
 800c60c:	613b      	str	r3, [r7, #16]
  return(result);
 800c60e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c610:	2b00      	cmp	r3, #0
 800c612:	d175      	bne.n	800c700 <osSemaphoreNew+0x108>
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d072      	beq.n	800c700 <osSemaphoreNew+0x108>
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	429a      	cmp	r2, r3
 800c620:	d86e      	bhi.n	800c700 <osSemaphoreNew+0x108>
    mem = -1;
 800c622:	f04f 33ff 	mov.w	r3, #4294967295
 800c626:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d015      	beq.n	800c65a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	689b      	ldr	r3, [r3, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d006      	beq.n	800c644 <osSemaphoreNew+0x4c>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	68db      	ldr	r3, [r3, #12]
 800c63a:	2b4f      	cmp	r3, #79	; 0x4f
 800c63c:	d902      	bls.n	800c644 <osSemaphoreNew+0x4c>
        mem = 1;
 800c63e:	2301      	movs	r3, #1
 800c640:	61bb      	str	r3, [r7, #24]
 800c642:	e00c      	b.n	800c65e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	689b      	ldr	r3, [r3, #8]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d108      	bne.n	800c65e <osSemaphoreNew+0x66>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d104      	bne.n	800c65e <osSemaphoreNew+0x66>
          mem = 0;
 800c654:	2300      	movs	r3, #0
 800c656:	61bb      	str	r3, [r7, #24]
 800c658:	e001      	b.n	800c65e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c65a:	2300      	movs	r3, #0
 800c65c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c65e:	69bb      	ldr	r3, [r7, #24]
 800c660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c664:	d04c      	beq.n	800c700 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d128      	bne.n	800c6be <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c66c:	69bb      	ldr	r3, [r7, #24]
 800c66e:	2b01      	cmp	r3, #1
 800c670:	d10a      	bne.n	800c688 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	689b      	ldr	r3, [r3, #8]
 800c676:	2203      	movs	r2, #3
 800c678:	9200      	str	r2, [sp, #0]
 800c67a:	2200      	movs	r2, #0
 800c67c:	2100      	movs	r1, #0
 800c67e:	2001      	movs	r0, #1
 800c680:	f000 fb5c 	bl	800cd3c <xQueueGenericCreateStatic>
 800c684:	61f8      	str	r0, [r7, #28]
 800c686:	e005      	b.n	800c694 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c688:	2203      	movs	r2, #3
 800c68a:	2100      	movs	r1, #0
 800c68c:	2001      	movs	r0, #1
 800c68e:	f000 fbcd 	bl	800ce2c <xQueueGenericCreate>
 800c692:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c694:	69fb      	ldr	r3, [r7, #28]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d022      	beq.n	800c6e0 <osSemaphoreNew+0xe8>
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d01f      	beq.n	800c6e0 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	2100      	movs	r1, #0
 800c6a6:	69f8      	ldr	r0, [r7, #28]
 800c6a8:	f000 fd3e 	bl	800d128 <xQueueGenericSend>
 800c6ac:	4603      	mov	r3, r0
 800c6ae:	2b01      	cmp	r3, #1
 800c6b0:	d016      	beq.n	800c6e0 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c6b2:	69f8      	ldr	r0, [r7, #28]
 800c6b4:	f001 f9ca 	bl	800da4c <vQueueDelete>
            hSemaphore = NULL;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	61fb      	str	r3, [r7, #28]
 800c6bc:	e010      	b.n	800c6e0 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d108      	bne.n	800c6d6 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	689b      	ldr	r3, [r3, #8]
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	68b9      	ldr	r1, [r7, #8]
 800c6cc:	68f8      	ldr	r0, [r7, #12]
 800c6ce:	f000 fcc1 	bl	800d054 <xQueueCreateCountingSemaphoreStatic>
 800c6d2:	61f8      	str	r0, [r7, #28]
 800c6d4:	e004      	b.n	800c6e0 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c6d6:	68b9      	ldr	r1, [r7, #8]
 800c6d8:	68f8      	ldr	r0, [r7, #12]
 800c6da:	f000 fcf2 	bl	800d0c2 <xQueueCreateCountingSemaphore>
 800c6de:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c6e0:	69fb      	ldr	r3, [r7, #28]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d00c      	beq.n	800c700 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d003      	beq.n	800c6f4 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	617b      	str	r3, [r7, #20]
 800c6f2:	e001      	b.n	800c6f8 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c6f8:	6979      	ldr	r1, [r7, #20]
 800c6fa:	69f8      	ldr	r0, [r7, #28]
 800c6fc:	f001 faf2 	bl	800dce4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c700:	69fb      	ldr	r3, [r7, #28]
}
 800c702:	4618      	mov	r0, r3
 800c704:	3720      	adds	r7, #32
 800c706:	46bd      	mov	sp, r7
 800c708:	bd80      	pop	{r7, pc}
	...

0800c70c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b086      	sub	sp, #24
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c71a:	2300      	movs	r3, #0
 800c71c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d103      	bne.n	800c72c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c724:	f06f 0303 	mvn.w	r3, #3
 800c728:	617b      	str	r3, [r7, #20]
 800c72a:	e039      	b.n	800c7a0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c72c:	f3ef 8305 	mrs	r3, IPSR
 800c730:	60fb      	str	r3, [r7, #12]
  return(result);
 800c732:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c734:	2b00      	cmp	r3, #0
 800c736:	d022      	beq.n	800c77e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d003      	beq.n	800c746 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c73e:	f06f 0303 	mvn.w	r3, #3
 800c742:	617b      	str	r3, [r7, #20]
 800c744:	e02c      	b.n	800c7a0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c746:	2300      	movs	r3, #0
 800c748:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c74a:	f107 0308 	add.w	r3, r7, #8
 800c74e:	461a      	mov	r2, r3
 800c750:	2100      	movs	r1, #0
 800c752:	6938      	ldr	r0, [r7, #16]
 800c754:	f001 f8fa 	bl	800d94c <xQueueReceiveFromISR>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b01      	cmp	r3, #1
 800c75c:	d003      	beq.n	800c766 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c75e:	f06f 0302 	mvn.w	r3, #2
 800c762:	617b      	str	r3, [r7, #20]
 800c764:	e01c      	b.n	800c7a0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d019      	beq.n	800c7a0 <osSemaphoreAcquire+0x94>
 800c76c:	4b0f      	ldr	r3, [pc, #60]	; (800c7ac <osSemaphoreAcquire+0xa0>)
 800c76e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c772:	601a      	str	r2, [r3, #0]
 800c774:	f3bf 8f4f 	dsb	sy
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	e010      	b.n	800c7a0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c77e:	6839      	ldr	r1, [r7, #0]
 800c780:	6938      	ldr	r0, [r7, #16]
 800c782:	f000 ffd7 	bl	800d734 <xQueueSemaphoreTake>
 800c786:	4603      	mov	r3, r0
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d009      	beq.n	800c7a0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c792:	f06f 0301 	mvn.w	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	e002      	b.n	800c7a0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c79a:	f06f 0302 	mvn.w	r3, #2
 800c79e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c7a0:	697b      	ldr	r3, [r7, #20]
}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3718      	adds	r7, #24
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}
 800c7aa:	bf00      	nop
 800c7ac:	e000ed04 	.word	0xe000ed04

0800c7b0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c7bc:	2300      	movs	r3, #0
 800c7be:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c7c0:	693b      	ldr	r3, [r7, #16]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d103      	bne.n	800c7ce <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c7c6:	f06f 0303 	mvn.w	r3, #3
 800c7ca:	617b      	str	r3, [r7, #20]
 800c7cc:	e02c      	b.n	800c828 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7ce:	f3ef 8305 	mrs	r3, IPSR
 800c7d2:	60fb      	str	r3, [r7, #12]
  return(result);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d01a      	beq.n	800c810 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c7de:	f107 0308 	add.w	r3, r7, #8
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	6938      	ldr	r0, [r7, #16]
 800c7e6:	f000 fe38 	bl	800d45a <xQueueGiveFromISR>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d003      	beq.n	800c7f8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c7f0:	f06f 0302 	mvn.w	r3, #2
 800c7f4:	617b      	str	r3, [r7, #20]
 800c7f6:	e017      	b.n	800c828 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d014      	beq.n	800c828 <osSemaphoreRelease+0x78>
 800c7fe:	4b0d      	ldr	r3, [pc, #52]	; (800c834 <osSemaphoreRelease+0x84>)
 800c800:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c804:	601a      	str	r2, [r3, #0]
 800c806:	f3bf 8f4f 	dsb	sy
 800c80a:	f3bf 8f6f 	isb	sy
 800c80e:	e00b      	b.n	800c828 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c810:	2300      	movs	r3, #0
 800c812:	2200      	movs	r2, #0
 800c814:	2100      	movs	r1, #0
 800c816:	6938      	ldr	r0, [r7, #16]
 800c818:	f000 fc86 	bl	800d128 <xQueueGenericSend>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b01      	cmp	r3, #1
 800c820:	d002      	beq.n	800c828 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c822:	f06f 0302 	mvn.w	r3, #2
 800c826:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c828:	697b      	ldr	r3, [r7, #20]
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3718      	adds	r7, #24
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	e000ed04 	.word	0xe000ed04

0800c838 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08a      	sub	sp, #40	; 0x28
 800c83c:	af02      	add	r7, sp, #8
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c848:	f3ef 8305 	mrs	r3, IPSR
 800c84c:	613b      	str	r3, [r7, #16]
  return(result);
 800c84e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c850:	2b00      	cmp	r3, #0
 800c852:	d15f      	bne.n	800c914 <osMessageQueueNew+0xdc>
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d05c      	beq.n	800c914 <osMessageQueueNew+0xdc>
 800c85a:	68bb      	ldr	r3, [r7, #8]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d059      	beq.n	800c914 <osMessageQueueNew+0xdc>
    mem = -1;
 800c860:	f04f 33ff 	mov.w	r3, #4294967295
 800c864:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d029      	beq.n	800c8c0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	2b00      	cmp	r3, #0
 800c872:	d012      	beq.n	800c89a <osMessageQueueNew+0x62>
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	68db      	ldr	r3, [r3, #12]
 800c878:	2b4f      	cmp	r3, #79	; 0x4f
 800c87a:	d90e      	bls.n	800c89a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00a      	beq.n	800c89a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	695a      	ldr	r2, [r3, #20]
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	68b9      	ldr	r1, [r7, #8]
 800c88c:	fb01 f303 	mul.w	r3, r1, r3
 800c890:	429a      	cmp	r2, r3
 800c892:	d302      	bcc.n	800c89a <osMessageQueueNew+0x62>
        mem = 1;
 800c894:	2301      	movs	r3, #1
 800c896:	61bb      	str	r3, [r7, #24]
 800c898:	e014      	b.n	800c8c4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d110      	bne.n	800c8c4 <osMessageQueueNew+0x8c>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	68db      	ldr	r3, [r3, #12]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10c      	bne.n	800c8c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d108      	bne.n	800c8c4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	695b      	ldr	r3, [r3, #20]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d104      	bne.n	800c8c4 <osMessageQueueNew+0x8c>
          mem = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	61bb      	str	r3, [r7, #24]
 800c8be:	e001      	b.n	800c8c4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c8c4:	69bb      	ldr	r3, [r7, #24]
 800c8c6:	2b01      	cmp	r3, #1
 800c8c8:	d10b      	bne.n	800c8e2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	691a      	ldr	r2, [r3, #16]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	689b      	ldr	r3, [r3, #8]
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	9100      	str	r1, [sp, #0]
 800c8d6:	68b9      	ldr	r1, [r7, #8]
 800c8d8:	68f8      	ldr	r0, [r7, #12]
 800c8da:	f000 fa2f 	bl	800cd3c <xQueueGenericCreateStatic>
 800c8de:	61f8      	str	r0, [r7, #28]
 800c8e0:	e008      	b.n	800c8f4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d105      	bne.n	800c8f4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c8e8:	2200      	movs	r2, #0
 800c8ea:	68b9      	ldr	r1, [r7, #8]
 800c8ec:	68f8      	ldr	r0, [r7, #12]
 800c8ee:	f000 fa9d 	bl	800ce2c <xQueueGenericCreate>
 800c8f2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00c      	beq.n	800c914 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d003      	beq.n	800c908 <osMessageQueueNew+0xd0>
        name = attr->name;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	e001      	b.n	800c90c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c908:	2300      	movs	r3, #0
 800c90a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c90c:	6979      	ldr	r1, [r7, #20]
 800c90e:	69f8      	ldr	r0, [r7, #28]
 800c910:	f001 f9e8 	bl	800dce4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c914:	69fb      	ldr	r3, [r7, #28]
}
 800c916:	4618      	mov	r0, r3
 800c918:	3720      	adds	r7, #32
 800c91a:	46bd      	mov	sp, r7
 800c91c:	bd80      	pop	{r7, pc}
	...

0800c920 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c920:	b580      	push	{r7, lr}
 800c922:	b088      	sub	sp, #32
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	603b      	str	r3, [r7, #0]
 800c92c:	4613      	mov	r3, r2
 800c92e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c934:	2300      	movs	r3, #0
 800c936:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c938:	f3ef 8305 	mrs	r3, IPSR
 800c93c:	617b      	str	r3, [r7, #20]
  return(result);
 800c93e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c940:	2b00      	cmp	r3, #0
 800c942:	d028      	beq.n	800c996 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c944:	69bb      	ldr	r3, [r7, #24]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d005      	beq.n	800c956 <osMessageQueuePut+0x36>
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d002      	beq.n	800c956 <osMessageQueuePut+0x36>
 800c950:	683b      	ldr	r3, [r7, #0]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d003      	beq.n	800c95e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c956:	f06f 0303 	mvn.w	r3, #3
 800c95a:	61fb      	str	r3, [r7, #28]
 800c95c:	e038      	b.n	800c9d0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c95e:	2300      	movs	r3, #0
 800c960:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c962:	f107 0210 	add.w	r2, r7, #16
 800c966:	2300      	movs	r3, #0
 800c968:	68b9      	ldr	r1, [r7, #8]
 800c96a:	69b8      	ldr	r0, [r7, #24]
 800c96c:	f000 fcda 	bl	800d324 <xQueueGenericSendFromISR>
 800c970:	4603      	mov	r3, r0
 800c972:	2b01      	cmp	r3, #1
 800c974:	d003      	beq.n	800c97e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c976:	f06f 0302 	mvn.w	r3, #2
 800c97a:	61fb      	str	r3, [r7, #28]
 800c97c:	e028      	b.n	800c9d0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d025      	beq.n	800c9d0 <osMessageQueuePut+0xb0>
 800c984:	4b15      	ldr	r3, [pc, #84]	; (800c9dc <osMessageQueuePut+0xbc>)
 800c986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c98a:	601a      	str	r2, [r3, #0]
 800c98c:	f3bf 8f4f 	dsb	sy
 800c990:	f3bf 8f6f 	isb	sy
 800c994:	e01c      	b.n	800c9d0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c996:	69bb      	ldr	r3, [r7, #24]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d002      	beq.n	800c9a2 <osMessageQueuePut+0x82>
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d103      	bne.n	800c9aa <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c9a2:	f06f 0303 	mvn.w	r3, #3
 800c9a6:	61fb      	str	r3, [r7, #28]
 800c9a8:	e012      	b.n	800c9d0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	683a      	ldr	r2, [r7, #0]
 800c9ae:	68b9      	ldr	r1, [r7, #8]
 800c9b0:	69b8      	ldr	r0, [r7, #24]
 800c9b2:	f000 fbb9 	bl	800d128 <xQueueGenericSend>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b01      	cmp	r3, #1
 800c9ba:	d009      	beq.n	800c9d0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d003      	beq.n	800c9ca <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c9c2:	f06f 0301 	mvn.w	r3, #1
 800c9c6:	61fb      	str	r3, [r7, #28]
 800c9c8:	e002      	b.n	800c9d0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c9ca:	f06f 0302 	mvn.w	r3, #2
 800c9ce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c9d0:	69fb      	ldr	r3, [r7, #28]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3720      	adds	r7, #32
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	e000ed04 	.word	0xe000ed04

0800c9e0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b088      	sub	sp, #32
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c9f6:	f3ef 8305 	mrs	r3, IPSR
 800c9fa:	617b      	str	r3, [r7, #20]
  return(result);
 800c9fc:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d028      	beq.n	800ca54 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ca02:	69bb      	ldr	r3, [r7, #24]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d005      	beq.n	800ca14 <osMessageQueueGet+0x34>
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <osMessageQueueGet+0x34>
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d003      	beq.n	800ca1c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800ca14:	f06f 0303 	mvn.w	r3, #3
 800ca18:	61fb      	str	r3, [r7, #28]
 800ca1a:	e037      	b.n	800ca8c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800ca20:	f107 0310 	add.w	r3, r7, #16
 800ca24:	461a      	mov	r2, r3
 800ca26:	68b9      	ldr	r1, [r7, #8]
 800ca28:	69b8      	ldr	r0, [r7, #24]
 800ca2a:	f000 ff8f 	bl	800d94c <xQueueReceiveFromISR>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d003      	beq.n	800ca3c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800ca34:	f06f 0302 	mvn.w	r3, #2
 800ca38:	61fb      	str	r3, [r7, #28]
 800ca3a:	e027      	b.n	800ca8c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d024      	beq.n	800ca8c <osMessageQueueGet+0xac>
 800ca42:	4b15      	ldr	r3, [pc, #84]	; (800ca98 <osMessageQueueGet+0xb8>)
 800ca44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	f3bf 8f4f 	dsb	sy
 800ca4e:	f3bf 8f6f 	isb	sy
 800ca52:	e01b      	b.n	800ca8c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d002      	beq.n	800ca60 <osMessageQueueGet+0x80>
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d103      	bne.n	800ca68 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800ca60:	f06f 0303 	mvn.w	r3, #3
 800ca64:	61fb      	str	r3, [r7, #28]
 800ca66:	e011      	b.n	800ca8c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ca68:	683a      	ldr	r2, [r7, #0]
 800ca6a:	68b9      	ldr	r1, [r7, #8]
 800ca6c:	69b8      	ldr	r0, [r7, #24]
 800ca6e:	f000 fd81 	bl	800d574 <xQueueReceive>
 800ca72:	4603      	mov	r3, r0
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d009      	beq.n	800ca8c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d003      	beq.n	800ca86 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800ca7e:	f06f 0301 	mvn.w	r3, #1
 800ca82:	61fb      	str	r3, [r7, #28]
 800ca84:	e002      	b.n	800ca8c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800ca86:	f06f 0302 	mvn.w	r3, #2
 800ca8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ca8c:	69fb      	ldr	r3, [r7, #28]
}
 800ca8e:	4618      	mov	r0, r3
 800ca90:	3720      	adds	r7, #32
 800ca92:	46bd      	mov	sp, r7
 800ca94:	bd80      	pop	{r7, pc}
 800ca96:	bf00      	nop
 800ca98:	e000ed04 	.word	0xe000ed04

0800ca9c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ca9c:	b480      	push	{r7}
 800ca9e:	b085      	sub	sp, #20
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	60f8      	str	r0, [r7, #12]
 800caa4:	60b9      	str	r1, [r7, #8]
 800caa6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	4a07      	ldr	r2, [pc, #28]	; (800cac8 <vApplicationGetIdleTaskMemory+0x2c>)
 800caac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	4a06      	ldr	r2, [pc, #24]	; (800cacc <vApplicationGetIdleTaskMemory+0x30>)
 800cab2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2280      	movs	r2, #128	; 0x80
 800cab8:	601a      	str	r2, [r3, #0]
}
 800caba:	bf00      	nop
 800cabc:	3714      	adds	r7, #20
 800cabe:	46bd      	mov	sp, r7
 800cac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac4:	4770      	bx	lr
 800cac6:	bf00      	nop
 800cac8:	240000d0 	.word	0x240000d0
 800cacc:	24000190 	.word	0x24000190

0800cad0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	4a07      	ldr	r2, [pc, #28]	; (800cafc <vApplicationGetTimerTaskMemory+0x2c>)
 800cae0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cae2:	68bb      	ldr	r3, [r7, #8]
 800cae4:	4a06      	ldr	r2, [pc, #24]	; (800cb00 <vApplicationGetTimerTaskMemory+0x30>)
 800cae6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f44f 7280 	mov.w	r2, #256	; 0x100
 800caee:	601a      	str	r2, [r3, #0]
}
 800caf0:	bf00      	nop
 800caf2:	3714      	adds	r7, #20
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr
 800cafc:	24000390 	.word	0x24000390
 800cb00:	24000450 	.word	0x24000450

0800cb04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	f103 0208 	add.w	r2, r3, #8
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f04f 32ff 	mov.w	r2, #4294967295
 800cb1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f103 0208 	add.w	r2, r3, #8
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f103 0208 	add.w	r2, r3, #8
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb44:	b480      	push	{r7}
 800cb46:	b083      	sub	sp, #12
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2200      	movs	r2, #0
 800cb50:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb52:	bf00      	nop
 800cb54:	370c      	adds	r7, #12
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr

0800cb5e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb5e:	b480      	push	{r7}
 800cb60:	b085      	sub	sp, #20
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	6078      	str	r0, [r7, #4]
 800cb66:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	685b      	ldr	r3, [r3, #4]
 800cb6c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	68fa      	ldr	r2, [r7, #12]
 800cb72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	689a      	ldr	r2, [r3, #8]
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	683a      	ldr	r2, [r7, #0]
 800cb82:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	683a      	ldr	r2, [r7, #0]
 800cb88:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb8a:	683b      	ldr	r3, [r7, #0]
 800cb8c:	687a      	ldr	r2, [r7, #4]
 800cb8e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	601a      	str	r2, [r3, #0]
}
 800cb9a:	bf00      	nop
 800cb9c:	3714      	adds	r7, #20
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr

0800cba6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cba6:	b480      	push	{r7}
 800cba8:	b085      	sub	sp, #20
 800cbaa:	af00      	add	r7, sp, #0
 800cbac:	6078      	str	r0, [r7, #4]
 800cbae:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cbb6:	68bb      	ldr	r3, [r7, #8]
 800cbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbbc:	d103      	bne.n	800cbc6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	691b      	ldr	r3, [r3, #16]
 800cbc2:	60fb      	str	r3, [r7, #12]
 800cbc4:	e00c      	b.n	800cbe0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	3308      	adds	r3, #8
 800cbca:	60fb      	str	r3, [r7, #12]
 800cbcc:	e002      	b.n	800cbd4 <vListInsert+0x2e>
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	60fb      	str	r3, [r7, #12]
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	685b      	ldr	r3, [r3, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	68ba      	ldr	r2, [r7, #8]
 800cbdc:	429a      	cmp	r2, r3
 800cbde:	d2f6      	bcs.n	800cbce <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	685a      	ldr	r2, [r3, #4]
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	68fa      	ldr	r2, [r7, #12]
 800cbf4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	601a      	str	r2, [r3, #0]
}
 800cc0c:	bf00      	nop
 800cc0e:	3714      	adds	r7, #20
 800cc10:	46bd      	mov	sp, r7
 800cc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc16:	4770      	bx	lr

0800cc18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	691b      	ldr	r3, [r3, #16]
 800cc24:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	685b      	ldr	r3, [r3, #4]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	6892      	ldr	r2, [r2, #8]
 800cc2e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	689b      	ldr	r3, [r3, #8]
 800cc34:	687a      	ldr	r2, [r7, #4]
 800cc36:	6852      	ldr	r2, [r2, #4]
 800cc38:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d103      	bne.n	800cc4c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	689a      	ldr	r2, [r3, #8]
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	1e5a      	subs	r2, r3, #1
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	681b      	ldr	r3, [r3, #0]
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3714      	adds	r7, #20
 800cc64:	46bd      	mov	sp, r7
 800cc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6a:	4770      	bx	lr

0800cc6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b084      	sub	sp, #16
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
 800cc74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d10a      	bne.n	800cc96 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc84:	f383 8811 	msr	BASEPRI, r3
 800cc88:	f3bf 8f6f 	isb	sy
 800cc8c:	f3bf 8f4f 	dsb	sy
 800cc90:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800cc92:	bf00      	nop
 800cc94:	e7fe      	b.n	800cc94 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc96:	f002 ff95 	bl	800fbc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	681a      	ldr	r2, [r3, #0]
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca2:	68f9      	ldr	r1, [r7, #12]
 800cca4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cca6:	fb01 f303 	mul.w	r3, r1, r3
 800ccaa:	441a      	add	r2, r3
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc6:	3b01      	subs	r3, #1
 800ccc8:	68f9      	ldr	r1, [r7, #12]
 800ccca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cccc:	fb01 f303 	mul.w	r3, r1, r3
 800ccd0:	441a      	add	r2, r3
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	22ff      	movs	r2, #255	; 0xff
 800ccda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	22ff      	movs	r2, #255	; 0xff
 800cce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d114      	bne.n	800cd16 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	691b      	ldr	r3, [r3, #16]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d01a      	beq.n	800cd2a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	3310      	adds	r3, #16
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f001 fd35 	bl	800e768 <xTaskRemoveFromEventList>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d012      	beq.n	800cd2a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd04:	4b0c      	ldr	r3, [pc, #48]	; (800cd38 <xQueueGenericReset+0xcc>)
 800cd06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd0a:	601a      	str	r2, [r3, #0]
 800cd0c:	f3bf 8f4f 	dsb	sy
 800cd10:	f3bf 8f6f 	isb	sy
 800cd14:	e009      	b.n	800cd2a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	3310      	adds	r3, #16
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff fef2 	bl	800cb04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	3324      	adds	r3, #36	; 0x24
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7ff feed 	bl	800cb04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd2a:	f002 ff7b 	bl	800fc24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd2e:	2301      	movs	r3, #1
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3710      	adds	r7, #16
 800cd34:	46bd      	mov	sp, r7
 800cd36:	bd80      	pop	{r7, pc}
 800cd38:	e000ed04 	.word	0xe000ed04

0800cd3c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08e      	sub	sp, #56	; 0x38
 800cd40:	af02      	add	r7, sp, #8
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d10a      	bne.n	800cd66 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cd50:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd54:	f383 8811 	msr	BASEPRI, r3
 800cd58:	f3bf 8f6f 	isb	sy
 800cd5c:	f3bf 8f4f 	dsb	sy
 800cd60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd62:	bf00      	nop
 800cd64:	e7fe      	b.n	800cd64 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd66:	683b      	ldr	r3, [r7, #0]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10a      	bne.n	800cd82 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cd6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd70:	f383 8811 	msr	BASEPRI, r3
 800cd74:	f3bf 8f6f 	isb	sy
 800cd78:	f3bf 8f4f 	dsb	sy
 800cd7c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd7e:	bf00      	nop
 800cd80:	e7fe      	b.n	800cd80 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <xQueueGenericCreateStatic+0x52>
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d001      	beq.n	800cd92 <xQueueGenericCreateStatic+0x56>
 800cd8e:	2301      	movs	r3, #1
 800cd90:	e000      	b.n	800cd94 <xQueueGenericCreateStatic+0x58>
 800cd92:	2300      	movs	r3, #0
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d10a      	bne.n	800cdae <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	623b      	str	r3, [r7, #32]
}
 800cdaa:	bf00      	nop
 800cdac:	e7fe      	b.n	800cdac <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d102      	bne.n	800cdba <xQueueGenericCreateStatic+0x7e>
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d101      	bne.n	800cdbe <xQueueGenericCreateStatic+0x82>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	e000      	b.n	800cdc0 <xQueueGenericCreateStatic+0x84>
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d10a      	bne.n	800cdda <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	61fb      	str	r3, [r7, #28]
}
 800cdd6:	bf00      	nop
 800cdd8:	e7fe      	b.n	800cdd8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cdda:	2350      	movs	r3, #80	; 0x50
 800cddc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	2b50      	cmp	r3, #80	; 0x50
 800cde2:	d00a      	beq.n	800cdfa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde8:	f383 8811 	msr	BASEPRI, r3
 800cdec:	f3bf 8f6f 	isb	sy
 800cdf0:	f3bf 8f4f 	dsb	sy
 800cdf4:	61bb      	str	r3, [r7, #24]
}
 800cdf6:	bf00      	nop
 800cdf8:	e7fe      	b.n	800cdf8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdfa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00d      	beq.n	800ce22 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce08:	2201      	movs	r2, #1
 800ce0a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce0e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce14:	9300      	str	r3, [sp, #0]
 800ce16:	4613      	mov	r3, r2
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	68b9      	ldr	r1, [r7, #8]
 800ce1c:	68f8      	ldr	r0, [r7, #12]
 800ce1e:	f000 f83f 	bl	800cea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce24:	4618      	mov	r0, r3
 800ce26:	3730      	adds	r7, #48	; 0x30
 800ce28:	46bd      	mov	sp, r7
 800ce2a:	bd80      	pop	{r7, pc}

0800ce2c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b08a      	sub	sp, #40	; 0x28
 800ce30:	af02      	add	r7, sp, #8
 800ce32:	60f8      	str	r0, [r7, #12]
 800ce34:	60b9      	str	r1, [r7, #8]
 800ce36:	4613      	mov	r3, r2
 800ce38:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ce40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce44:	f383 8811 	msr	BASEPRI, r3
 800ce48:	f3bf 8f6f 	isb	sy
 800ce4c:	f3bf 8f4f 	dsb	sy
 800ce50:	613b      	str	r3, [r7, #16]
}
 800ce52:	bf00      	nop
 800ce54:	e7fe      	b.n	800ce54 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	68ba      	ldr	r2, [r7, #8]
 800ce5a:	fb02 f303 	mul.w	r3, r2, r3
 800ce5e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce60:	69fb      	ldr	r3, [r7, #28]
 800ce62:	3350      	adds	r3, #80	; 0x50
 800ce64:	4618      	mov	r0, r3
 800ce66:	f002 ffcf 	bl	800fe08 <pvPortMalloc>
 800ce6a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d011      	beq.n	800ce96 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	3350      	adds	r3, #80	; 0x50
 800ce7a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce7c:	69bb      	ldr	r3, [r7, #24]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce84:	79fa      	ldrb	r2, [r7, #7]
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	9300      	str	r3, [sp, #0]
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	697a      	ldr	r2, [r7, #20]
 800ce8e:	68b9      	ldr	r1, [r7, #8]
 800ce90:	68f8      	ldr	r0, [r7, #12]
 800ce92:	f000 f805 	bl	800cea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce96:	69bb      	ldr	r3, [r7, #24]
	}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3720      	adds	r7, #32
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}

0800cea0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b084      	sub	sp, #16
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	60f8      	str	r0, [r7, #12]
 800cea8:	60b9      	str	r1, [r7, #8]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ceae:	68bb      	ldr	r3, [r7, #8]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d103      	bne.n	800cebc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	69ba      	ldr	r2, [r7, #24]
 800ceb8:	601a      	str	r2, [r3, #0]
 800ceba:	e002      	b.n	800cec2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	68fa      	ldr	r2, [r7, #12]
 800cec6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cec8:	69bb      	ldr	r3, [r7, #24]
 800ceca:	68ba      	ldr	r2, [r7, #8]
 800cecc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cece:	2101      	movs	r1, #1
 800ced0:	69b8      	ldr	r0, [r7, #24]
 800ced2:	f7ff fecb 	bl	800cc6c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	78fa      	ldrb	r2, [r7, #3]
 800ceda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cede:	bf00      	nop
 800cee0:	3710      	adds	r7, #16
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}

0800cee6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cee6:	b580      	push	{r7, lr}
 800cee8:	b082      	sub	sp, #8
 800ceea:	af00      	add	r7, sp, #0
 800ceec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d00e      	beq.n	800cf12 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2200      	movs	r2, #0
 800cefe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2200      	movs	r2, #0
 800cf04:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cf06:	2300      	movs	r3, #0
 800cf08:	2200      	movs	r2, #0
 800cf0a:	2100      	movs	r1, #0
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f000 f90b 	bl	800d128 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cf12:	bf00      	nop
 800cf14:	3708      	adds	r7, #8
 800cf16:	46bd      	mov	sp, r7
 800cf18:	bd80      	pop	{r7, pc}

0800cf1a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cf1a:	b580      	push	{r7, lr}
 800cf1c:	b086      	sub	sp, #24
 800cf1e:	af00      	add	r7, sp, #0
 800cf20:	4603      	mov	r3, r0
 800cf22:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf24:	2301      	movs	r3, #1
 800cf26:	617b      	str	r3, [r7, #20]
 800cf28:	2300      	movs	r3, #0
 800cf2a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cf2c:	79fb      	ldrb	r3, [r7, #7]
 800cf2e:	461a      	mov	r2, r3
 800cf30:	6939      	ldr	r1, [r7, #16]
 800cf32:	6978      	ldr	r0, [r7, #20]
 800cf34:	f7ff ff7a 	bl	800ce2c <xQueueGenericCreate>
 800cf38:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf3a:	68f8      	ldr	r0, [r7, #12]
 800cf3c:	f7ff ffd3 	bl	800cee6 <prvInitialiseMutex>

		return xNewQueue;
 800cf40:	68fb      	ldr	r3, [r7, #12]
	}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3718      	adds	r7, #24
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}

0800cf4a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cf4a:	b580      	push	{r7, lr}
 800cf4c:	b088      	sub	sp, #32
 800cf4e:	af02      	add	r7, sp, #8
 800cf50:	4603      	mov	r3, r0
 800cf52:	6039      	str	r1, [r7, #0]
 800cf54:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf56:	2301      	movs	r3, #1
 800cf58:	617b      	str	r3, [r7, #20]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
 800cf60:	9300      	str	r3, [sp, #0]
 800cf62:	683b      	ldr	r3, [r7, #0]
 800cf64:	2200      	movs	r2, #0
 800cf66:	6939      	ldr	r1, [r7, #16]
 800cf68:	6978      	ldr	r0, [r7, #20]
 800cf6a:	f7ff fee7 	bl	800cd3c <xQueueGenericCreateStatic>
 800cf6e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf70:	68f8      	ldr	r0, [r7, #12]
 800cf72:	f7ff ffb8 	bl	800cee6 <prvInitialiseMutex>

		return xNewQueue;
 800cf76:	68fb      	ldr	r3, [r7, #12]
	}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3718      	adds	r7, #24
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cf80:	b590      	push	{r4, r7, lr}
 800cf82:	b087      	sub	sp, #28
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d10a      	bne.n	800cfa8 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800cf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf96:	f383 8811 	msr	BASEPRI, r3
 800cf9a:	f3bf 8f6f 	isb	sy
 800cf9e:	f3bf 8f4f 	dsb	sy
 800cfa2:	60fb      	str	r3, [r7, #12]
}
 800cfa4:	bf00      	nop
 800cfa6:	e7fe      	b.n	800cfa6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cfa8:	693b      	ldr	r3, [r7, #16]
 800cfaa:	689c      	ldr	r4, [r3, #8]
 800cfac:	f001 fd9e 	bl	800eaec <xTaskGetCurrentTaskHandle>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	429c      	cmp	r4, r3
 800cfb4:	d111      	bne.n	800cfda <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cfb6:	693b      	ldr	r3, [r7, #16]
 800cfb8:	68db      	ldr	r3, [r3, #12]
 800cfba:	1e5a      	subs	r2, r3, #1
 800cfbc:	693b      	ldr	r3, [r7, #16]
 800cfbe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	68db      	ldr	r3, [r3, #12]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d105      	bne.n	800cfd4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cfc8:	2300      	movs	r3, #0
 800cfca:	2200      	movs	r2, #0
 800cfcc:	2100      	movs	r1, #0
 800cfce:	6938      	ldr	r0, [r7, #16]
 800cfd0:	f000 f8aa 	bl	800d128 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cfd4:	2301      	movs	r3, #1
 800cfd6:	617b      	str	r3, [r7, #20]
 800cfd8:	e001      	b.n	800cfde <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cfde:	697b      	ldr	r3, [r7, #20]
	}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	371c      	adds	r7, #28
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd90      	pop	{r4, r7, pc}

0800cfe8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cfe8:	b590      	push	{r4, r7, lr}
 800cfea:	b087      	sub	sp, #28
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d10a      	bne.n	800d012 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	60fb      	str	r3, [r7, #12]
}
 800d00e:	bf00      	nop
 800d010:	e7fe      	b.n	800d010 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d012:	693b      	ldr	r3, [r7, #16]
 800d014:	689c      	ldr	r4, [r3, #8]
 800d016:	f001 fd69 	bl	800eaec <xTaskGetCurrentTaskHandle>
 800d01a:	4603      	mov	r3, r0
 800d01c:	429c      	cmp	r4, r3
 800d01e:	d107      	bne.n	800d030 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d020:	693b      	ldr	r3, [r7, #16]
 800d022:	68db      	ldr	r3, [r3, #12]
 800d024:	1c5a      	adds	r2, r3, #1
 800d026:	693b      	ldr	r3, [r7, #16]
 800d028:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d02a:	2301      	movs	r3, #1
 800d02c:	617b      	str	r3, [r7, #20]
 800d02e:	e00c      	b.n	800d04a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	6938      	ldr	r0, [r7, #16]
 800d034:	f000 fb7e 	bl	800d734 <xQueueSemaphoreTake>
 800d038:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d004      	beq.n	800d04a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	68db      	ldr	r3, [r3, #12]
 800d044:	1c5a      	adds	r2, r3, #1
 800d046:	693b      	ldr	r3, [r7, #16]
 800d048:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d04a:	697b      	ldr	r3, [r7, #20]
	}
 800d04c:	4618      	mov	r0, r3
 800d04e:	371c      	adds	r7, #28
 800d050:	46bd      	mov	sp, r7
 800d052:	bd90      	pop	{r4, r7, pc}

0800d054 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08a      	sub	sp, #40	; 0x28
 800d058:	af02      	add	r7, sp, #8
 800d05a:	60f8      	str	r0, [r7, #12]
 800d05c:	60b9      	str	r1, [r7, #8]
 800d05e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d10a      	bne.n	800d07c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	61bb      	str	r3, [r7, #24]
}
 800d078:	bf00      	nop
 800d07a:	e7fe      	b.n	800d07a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d07c:	68ba      	ldr	r2, [r7, #8]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	429a      	cmp	r2, r3
 800d082:	d90a      	bls.n	800d09a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d088:	f383 8811 	msr	BASEPRI, r3
 800d08c:	f3bf 8f6f 	isb	sy
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	617b      	str	r3, [r7, #20]
}
 800d096:	bf00      	nop
 800d098:	e7fe      	b.n	800d098 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d09a:	2302      	movs	r3, #2
 800d09c:	9300      	str	r3, [sp, #0]
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	2100      	movs	r1, #0
 800d0a4:	68f8      	ldr	r0, [r7, #12]
 800d0a6:	f7ff fe49 	bl	800cd3c <xQueueGenericCreateStatic>
 800d0aa:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d0ac:	69fb      	ldr	r3, [r7, #28]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d002      	beq.n	800d0b8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0b2:	69fb      	ldr	r3, [r7, #28]
 800d0b4:	68ba      	ldr	r2, [r7, #8]
 800d0b6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0b8:	69fb      	ldr	r3, [r7, #28]
	}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3720      	adds	r7, #32
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}

0800d0c2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d0c2:	b580      	push	{r7, lr}
 800d0c4:	b086      	sub	sp, #24
 800d0c6:	af00      	add	r7, sp, #0
 800d0c8:	6078      	str	r0, [r7, #4]
 800d0ca:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d10a      	bne.n	800d0e8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d6:	f383 8811 	msr	BASEPRI, r3
 800d0da:	f3bf 8f6f 	isb	sy
 800d0de:	f3bf 8f4f 	dsb	sy
 800d0e2:	613b      	str	r3, [r7, #16]
}
 800d0e4:	bf00      	nop
 800d0e6:	e7fe      	b.n	800d0e6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d0e8:	683a      	ldr	r2, [r7, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d90a      	bls.n	800d106 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f4:	f383 8811 	msr	BASEPRI, r3
 800d0f8:	f3bf 8f6f 	isb	sy
 800d0fc:	f3bf 8f4f 	dsb	sy
 800d100:	60fb      	str	r3, [r7, #12]
}
 800d102:	bf00      	nop
 800d104:	e7fe      	b.n	800d104 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d106:	2202      	movs	r2, #2
 800d108:	2100      	movs	r1, #0
 800d10a:	6878      	ldr	r0, [r7, #4]
 800d10c:	f7ff fe8e 	bl	800ce2c <xQueueGenericCreate>
 800d110:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d002      	beq.n	800d11e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d118:	697b      	ldr	r3, [r7, #20]
 800d11a:	683a      	ldr	r2, [r7, #0]
 800d11c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d11e:	697b      	ldr	r3, [r7, #20]
	}
 800d120:	4618      	mov	r0, r3
 800d122:	3718      	adds	r7, #24
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b08e      	sub	sp, #56	; 0x38
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	60f8      	str	r0, [r7, #12]
 800d130:	60b9      	str	r1, [r7, #8]
 800d132:	607a      	str	r2, [r7, #4]
 800d134:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d136:	2300      	movs	r3, #0
 800d138:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d140:	2b00      	cmp	r3, #0
 800d142:	d10a      	bne.n	800d15a <xQueueGenericSend+0x32>
	__asm volatile
 800d144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d148:	f383 8811 	msr	BASEPRI, r3
 800d14c:	f3bf 8f6f 	isb	sy
 800d150:	f3bf 8f4f 	dsb	sy
 800d154:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d156:	bf00      	nop
 800d158:	e7fe      	b.n	800d158 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d15a:	68bb      	ldr	r3, [r7, #8]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d103      	bne.n	800d168 <xQueueGenericSend+0x40>
 800d160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d164:	2b00      	cmp	r3, #0
 800d166:	d101      	bne.n	800d16c <xQueueGenericSend+0x44>
 800d168:	2301      	movs	r3, #1
 800d16a:	e000      	b.n	800d16e <xQueueGenericSend+0x46>
 800d16c:	2300      	movs	r3, #0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d10a      	bne.n	800d188 <xQueueGenericSend+0x60>
	__asm volatile
 800d172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d176:	f383 8811 	msr	BASEPRI, r3
 800d17a:	f3bf 8f6f 	isb	sy
 800d17e:	f3bf 8f4f 	dsb	sy
 800d182:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d184:	bf00      	nop
 800d186:	e7fe      	b.n	800d186 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2b02      	cmp	r3, #2
 800d18c:	d103      	bne.n	800d196 <xQueueGenericSend+0x6e>
 800d18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d192:	2b01      	cmp	r3, #1
 800d194:	d101      	bne.n	800d19a <xQueueGenericSend+0x72>
 800d196:	2301      	movs	r3, #1
 800d198:	e000      	b.n	800d19c <xQueueGenericSend+0x74>
 800d19a:	2300      	movs	r3, #0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d10a      	bne.n	800d1b6 <xQueueGenericSend+0x8e>
	__asm volatile
 800d1a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	623b      	str	r3, [r7, #32]
}
 800d1b2:	bf00      	nop
 800d1b4:	e7fe      	b.n	800d1b4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1b6:	f001 fca9 	bl	800eb0c <xTaskGetSchedulerState>
 800d1ba:	4603      	mov	r3, r0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d102      	bne.n	800d1c6 <xQueueGenericSend+0x9e>
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	d101      	bne.n	800d1ca <xQueueGenericSend+0xa2>
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	e000      	b.n	800d1cc <xQueueGenericSend+0xa4>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10a      	bne.n	800d1e6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	61fb      	str	r3, [r7, #28]
}
 800d1e2:	bf00      	nop
 800d1e4:	e7fe      	b.n	800d1e4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1e6:	f002 fced 	bl	800fbc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1f2:	429a      	cmp	r2, r3
 800d1f4:	d302      	bcc.n	800d1fc <xQueueGenericSend+0xd4>
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b02      	cmp	r3, #2
 800d1fa:	d129      	bne.n	800d250 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1fc:	683a      	ldr	r2, [r7, #0]
 800d1fe:	68b9      	ldr	r1, [r7, #8]
 800d200:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d202:	f000 fc5e 	bl	800dac2 <prvCopyDataToQueue>
 800d206:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d20a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d010      	beq.n	800d232 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d212:	3324      	adds	r3, #36	; 0x24
 800d214:	4618      	mov	r0, r3
 800d216:	f001 faa7 	bl	800e768 <xTaskRemoveFromEventList>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d013      	beq.n	800d248 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d220:	4b3f      	ldr	r3, [pc, #252]	; (800d320 <xQueueGenericSend+0x1f8>)
 800d222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d226:	601a      	str	r2, [r3, #0]
 800d228:	f3bf 8f4f 	dsb	sy
 800d22c:	f3bf 8f6f 	isb	sy
 800d230:	e00a      	b.n	800d248 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d234:	2b00      	cmp	r3, #0
 800d236:	d007      	beq.n	800d248 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d238:	4b39      	ldr	r3, [pc, #228]	; (800d320 <xQueueGenericSend+0x1f8>)
 800d23a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23e:	601a      	str	r2, [r3, #0]
 800d240:	f3bf 8f4f 	dsb	sy
 800d244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d248:	f002 fcec 	bl	800fc24 <vPortExitCritical>
				return pdPASS;
 800d24c:	2301      	movs	r3, #1
 800d24e:	e063      	b.n	800d318 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d103      	bne.n	800d25e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d256:	f002 fce5 	bl	800fc24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d25a:	2300      	movs	r3, #0
 800d25c:	e05c      	b.n	800d318 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d25e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d260:	2b00      	cmp	r3, #0
 800d262:	d106      	bne.n	800d272 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d264:	f107 0314 	add.w	r3, r7, #20
 800d268:	4618      	mov	r0, r3
 800d26a:	f001 fae1 	bl	800e830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d26e:	2301      	movs	r3, #1
 800d270:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d272:	f002 fcd7 	bl	800fc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d276:	f001 f81f 	bl	800e2b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d27a:	f002 fca3 	bl	800fbc4 <vPortEnterCritical>
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d284:	b25b      	sxtb	r3, r3
 800d286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d28a:	d103      	bne.n	800d294 <xQueueGenericSend+0x16c>
 800d28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d28e:	2200      	movs	r2, #0
 800d290:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d29a:	b25b      	sxtb	r3, r3
 800d29c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2a0:	d103      	bne.n	800d2aa <xQueueGenericSend+0x182>
 800d2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2aa:	f002 fcbb 	bl	800fc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d2ae:	1d3a      	adds	r2, r7, #4
 800d2b0:	f107 0314 	add.w	r3, r7, #20
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	f001 fad0 	bl	800e85c <xTaskCheckForTimeOut>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d124      	bne.n	800d30c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2c4:	f000 fcf5 	bl	800dcb2 <prvIsQueueFull>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d018      	beq.n	800d300 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2d0:	3310      	adds	r3, #16
 800d2d2:	687a      	ldr	r2, [r7, #4]
 800d2d4:	4611      	mov	r1, r2
 800d2d6:	4618      	mov	r0, r3
 800d2d8:	f001 f9f6 	bl	800e6c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2de:	f000 fc80 	bl	800dbe2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2e2:	f000 fff7 	bl	800e2d4 <xTaskResumeAll>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	f47f af7c 	bne.w	800d1e6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d2ee:	4b0c      	ldr	r3, [pc, #48]	; (800d320 <xQueueGenericSend+0x1f8>)
 800d2f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f4:	601a      	str	r2, [r3, #0]
 800d2f6:	f3bf 8f4f 	dsb	sy
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	e772      	b.n	800d1e6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d302:	f000 fc6e 	bl	800dbe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d306:	f000 ffe5 	bl	800e2d4 <xTaskResumeAll>
 800d30a:	e76c      	b.n	800d1e6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d30c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d30e:	f000 fc68 	bl	800dbe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d312:	f000 ffdf 	bl	800e2d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d316:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d318:	4618      	mov	r0, r3
 800d31a:	3738      	adds	r7, #56	; 0x38
 800d31c:	46bd      	mov	sp, r7
 800d31e:	bd80      	pop	{r7, pc}
 800d320:	e000ed04 	.word	0xe000ed04

0800d324 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b090      	sub	sp, #64	; 0x40
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
 800d330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d10a      	bne.n	800d352 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d340:	f383 8811 	msr	BASEPRI, r3
 800d344:	f3bf 8f6f 	isb	sy
 800d348:	f3bf 8f4f 	dsb	sy
 800d34c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d34e:	bf00      	nop
 800d350:	e7fe      	b.n	800d350 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d103      	bne.n	800d360 <xQueueGenericSendFromISR+0x3c>
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d101      	bne.n	800d364 <xQueueGenericSendFromISR+0x40>
 800d360:	2301      	movs	r3, #1
 800d362:	e000      	b.n	800d366 <xQueueGenericSendFromISR+0x42>
 800d364:	2300      	movs	r3, #0
 800d366:	2b00      	cmp	r3, #0
 800d368:	d10a      	bne.n	800d380 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d36a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d36e:	f383 8811 	msr	BASEPRI, r3
 800d372:	f3bf 8f6f 	isb	sy
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d37c:	bf00      	nop
 800d37e:	e7fe      	b.n	800d37e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	2b02      	cmp	r3, #2
 800d384:	d103      	bne.n	800d38e <xQueueGenericSendFromISR+0x6a>
 800d386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d38a:	2b01      	cmp	r3, #1
 800d38c:	d101      	bne.n	800d392 <xQueueGenericSendFromISR+0x6e>
 800d38e:	2301      	movs	r3, #1
 800d390:	e000      	b.n	800d394 <xQueueGenericSendFromISR+0x70>
 800d392:	2300      	movs	r3, #0
 800d394:	2b00      	cmp	r3, #0
 800d396:	d10a      	bne.n	800d3ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d39c:	f383 8811 	msr	BASEPRI, r3
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	f3bf 8f4f 	dsb	sy
 800d3a8:	623b      	str	r3, [r7, #32]
}
 800d3aa:	bf00      	nop
 800d3ac:	e7fe      	b.n	800d3ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d3ae:	f002 fceb 	bl	800fd88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3b2:	f3ef 8211 	mrs	r2, BASEPRI
 800d3b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ba:	f383 8811 	msr	BASEPRI, r3
 800d3be:	f3bf 8f6f 	isb	sy
 800d3c2:	f3bf 8f4f 	dsb	sy
 800d3c6:	61fa      	str	r2, [r7, #28]
 800d3c8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3d6:	429a      	cmp	r2, r3
 800d3d8:	d302      	bcc.n	800d3e0 <xQueueGenericSendFromISR+0xbc>
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	2b02      	cmp	r3, #2
 800d3de:	d12f      	bne.n	800d440 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3f0:	683a      	ldr	r2, [r7, #0]
 800d3f2:	68b9      	ldr	r1, [r7, #8]
 800d3f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3f6:	f000 fb64 	bl	800dac2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d3fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d402:	d112      	bne.n	800d42a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d016      	beq.n	800d43a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d40e:	3324      	adds	r3, #36	; 0x24
 800d410:	4618      	mov	r0, r3
 800d412:	f001 f9a9 	bl	800e768 <xTaskRemoveFromEventList>
 800d416:	4603      	mov	r3, r0
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d00e      	beq.n	800d43a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00b      	beq.n	800d43a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	601a      	str	r2, [r3, #0]
 800d428:	e007      	b.n	800d43a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d42a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d42e:	3301      	adds	r3, #1
 800d430:	b2db      	uxtb	r3, r3
 800d432:	b25a      	sxtb	r2, r3
 800d434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d436:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d43a:	2301      	movs	r3, #1
 800d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d43e:	e001      	b.n	800d444 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d440:	2300      	movs	r3, #0
 800d442:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d446:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d448:	697b      	ldr	r3, [r7, #20]
 800d44a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d44e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d452:	4618      	mov	r0, r3
 800d454:	3740      	adds	r7, #64	; 0x40
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}

0800d45a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d45a:	b580      	push	{r7, lr}
 800d45c:	b08e      	sub	sp, #56	; 0x38
 800d45e:	af00      	add	r7, sp, #0
 800d460:	6078      	str	r0, [r7, #4]
 800d462:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d10a      	bne.n	800d484 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d472:	f383 8811 	msr	BASEPRI, r3
 800d476:	f3bf 8f6f 	isb	sy
 800d47a:	f3bf 8f4f 	dsb	sy
 800d47e:	623b      	str	r3, [r7, #32]
}
 800d480:	bf00      	nop
 800d482:	e7fe      	b.n	800d482 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d00a      	beq.n	800d4a2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	61fb      	str	r3, [r7, #28]
}
 800d49e:	bf00      	nop
 800d4a0:	e7fe      	b.n	800d4a0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d103      	bne.n	800d4b2 <xQueueGiveFromISR+0x58>
 800d4aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ac:	689b      	ldr	r3, [r3, #8]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d101      	bne.n	800d4b6 <xQueueGiveFromISR+0x5c>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e000      	b.n	800d4b8 <xQueueGiveFromISR+0x5e>
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d10a      	bne.n	800d4d2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d4bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4c0:	f383 8811 	msr	BASEPRI, r3
 800d4c4:	f3bf 8f6f 	isb	sy
 800d4c8:	f3bf 8f4f 	dsb	sy
 800d4cc:	61bb      	str	r3, [r7, #24]
}
 800d4ce:	bf00      	nop
 800d4d0:	e7fe      	b.n	800d4d0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4d2:	f002 fc59 	bl	800fd88 <vPortValidateInterruptPriority>
	__asm volatile
 800d4d6:	f3ef 8211 	mrs	r2, BASEPRI
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	f383 8811 	msr	BASEPRI, r3
 800d4e2:	f3bf 8f6f 	isb	sy
 800d4e6:	f3bf 8f4f 	dsb	sy
 800d4ea:	617a      	str	r2, [r7, #20]
 800d4ec:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d4ee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d22b      	bcs.n	800d55a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d50c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d50e:	1c5a      	adds	r2, r3, #1
 800d510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d512:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d514:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d51c:	d112      	bne.n	800d544 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d522:	2b00      	cmp	r3, #0
 800d524:	d016      	beq.n	800d554 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d528:	3324      	adds	r3, #36	; 0x24
 800d52a:	4618      	mov	r0, r3
 800d52c:	f001 f91c 	bl	800e768 <xTaskRemoveFromEventList>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d00e      	beq.n	800d554 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00b      	beq.n	800d554 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	2201      	movs	r2, #1
 800d540:	601a      	str	r2, [r3, #0]
 800d542:	e007      	b.n	800d554 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d548:	3301      	adds	r3, #1
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	b25a      	sxtb	r2, r3
 800d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d554:	2301      	movs	r3, #1
 800d556:	637b      	str	r3, [r7, #52]	; 0x34
 800d558:	e001      	b.n	800d55e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d55a:	2300      	movs	r3, #0
 800d55c:	637b      	str	r3, [r7, #52]	; 0x34
 800d55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d560:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	f383 8811 	msr	BASEPRI, r3
}
 800d568:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d56a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3738      	adds	r7, #56	; 0x38
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b08c      	sub	sp, #48	; 0x30
 800d578:	af00      	add	r7, sp, #0
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d580:	2300      	movs	r3, #0
 800d582:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d10a      	bne.n	800d5a4 <xQueueReceive+0x30>
	__asm volatile
 800d58e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d592:	f383 8811 	msr	BASEPRI, r3
 800d596:	f3bf 8f6f 	isb	sy
 800d59a:	f3bf 8f4f 	dsb	sy
 800d59e:	623b      	str	r3, [r7, #32]
}
 800d5a0:	bf00      	nop
 800d5a2:	e7fe      	b.n	800d5a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d103      	bne.n	800d5b2 <xQueueReceive+0x3e>
 800d5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d101      	bne.n	800d5b6 <xQueueReceive+0x42>
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	e000      	b.n	800d5b8 <xQueueReceive+0x44>
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10a      	bne.n	800d5d2 <xQueueReceive+0x5e>
	__asm volatile
 800d5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	61fb      	str	r3, [r7, #28]
}
 800d5ce:	bf00      	nop
 800d5d0:	e7fe      	b.n	800d5d0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5d2:	f001 fa9b 	bl	800eb0c <xTaskGetSchedulerState>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d102      	bne.n	800d5e2 <xQueueReceive+0x6e>
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d101      	bne.n	800d5e6 <xQueueReceive+0x72>
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	e000      	b.n	800d5e8 <xQueueReceive+0x74>
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d10a      	bne.n	800d602 <xQueueReceive+0x8e>
	__asm volatile
 800d5ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5f0:	f383 8811 	msr	BASEPRI, r3
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	f3bf 8f4f 	dsb	sy
 800d5fc:	61bb      	str	r3, [r7, #24]
}
 800d5fe:	bf00      	nop
 800d600:	e7fe      	b.n	800d600 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d602:	f002 fadf 	bl	800fbc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d60a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d01f      	beq.n	800d652 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d612:	68b9      	ldr	r1, [r7, #8]
 800d614:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d616:	f000 fabe 	bl	800db96 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d61c:	1e5a      	subs	r2, r3, #1
 800d61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d620:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d624:	691b      	ldr	r3, [r3, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00f      	beq.n	800d64a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d62c:	3310      	adds	r3, #16
 800d62e:	4618      	mov	r0, r3
 800d630:	f001 f89a 	bl	800e768 <xTaskRemoveFromEventList>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d007      	beq.n	800d64a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d63a:	4b3d      	ldr	r3, [pc, #244]	; (800d730 <xQueueReceive+0x1bc>)
 800d63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d640:	601a      	str	r2, [r3, #0]
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d64a:	f002 faeb 	bl	800fc24 <vPortExitCritical>
				return pdPASS;
 800d64e:	2301      	movs	r3, #1
 800d650:	e069      	b.n	800d726 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d103      	bne.n	800d660 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d658:	f002 fae4 	bl	800fc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e062      	b.n	800d726 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d662:	2b00      	cmp	r3, #0
 800d664:	d106      	bne.n	800d674 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d666:	f107 0310 	add.w	r3, r7, #16
 800d66a:	4618      	mov	r0, r3
 800d66c:	f001 f8e0 	bl	800e830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d670:	2301      	movs	r3, #1
 800d672:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d674:	f002 fad6 	bl	800fc24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d678:	f000 fe1e 	bl	800e2b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d67c:	f002 faa2 	bl	800fbc4 <vPortEnterCritical>
 800d680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d682:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d686:	b25b      	sxtb	r3, r3
 800d688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d68c:	d103      	bne.n	800d696 <xQueueReceive+0x122>
 800d68e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d690:	2200      	movs	r2, #0
 800d692:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d69c:	b25b      	sxtb	r3, r3
 800d69e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6a2:	d103      	bne.n	800d6ac <xQueueReceive+0x138>
 800d6a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6a6:	2200      	movs	r2, #0
 800d6a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d6ac:	f002 faba 	bl	800fc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6b0:	1d3a      	adds	r2, r7, #4
 800d6b2:	f107 0310 	add.w	r3, r7, #16
 800d6b6:	4611      	mov	r1, r2
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f001 f8cf 	bl	800e85c <xTaskCheckForTimeOut>
 800d6be:	4603      	mov	r3, r0
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d123      	bne.n	800d70c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6c6:	f000 fade 	bl	800dc86 <prvIsQueueEmpty>
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d017      	beq.n	800d700 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6d2:	3324      	adds	r3, #36	; 0x24
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 fff5 	bl	800e6c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6e0:	f000 fa7f 	bl	800dbe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6e4:	f000 fdf6 	bl	800e2d4 <xTaskResumeAll>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d189      	bne.n	800d602 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d6ee:	4b10      	ldr	r3, [pc, #64]	; (800d730 <xQueueReceive+0x1bc>)
 800d6f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6f4:	601a      	str	r2, [r3, #0]
 800d6f6:	f3bf 8f4f 	dsb	sy
 800d6fa:	f3bf 8f6f 	isb	sy
 800d6fe:	e780      	b.n	800d602 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d702:	f000 fa6e 	bl	800dbe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d706:	f000 fde5 	bl	800e2d4 <xTaskResumeAll>
 800d70a:	e77a      	b.n	800d602 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d70c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d70e:	f000 fa68 	bl	800dbe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d712:	f000 fddf 	bl	800e2d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d718:	f000 fab5 	bl	800dc86 <prvIsQueueEmpty>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	f43f af6f 	beq.w	800d602 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d724:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d726:	4618      	mov	r0, r3
 800d728:	3730      	adds	r7, #48	; 0x30
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	e000ed04 	.word	0xe000ed04

0800d734 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b08e      	sub	sp, #56	; 0x38
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d73e:	2300      	movs	r3, #0
 800d740:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d746:	2300      	movs	r3, #0
 800d748:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d74a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d10a      	bne.n	800d766 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	623b      	str	r3, [r7, #32]
}
 800d762:	bf00      	nop
 800d764:	e7fe      	b.n	800d764 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d00a      	beq.n	800d784 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d76e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d772:	f383 8811 	msr	BASEPRI, r3
 800d776:	f3bf 8f6f 	isb	sy
 800d77a:	f3bf 8f4f 	dsb	sy
 800d77e:	61fb      	str	r3, [r7, #28]
}
 800d780:	bf00      	nop
 800d782:	e7fe      	b.n	800d782 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d784:	f001 f9c2 	bl	800eb0c <xTaskGetSchedulerState>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d102      	bne.n	800d794 <xQueueSemaphoreTake+0x60>
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d101      	bne.n	800d798 <xQueueSemaphoreTake+0x64>
 800d794:	2301      	movs	r3, #1
 800d796:	e000      	b.n	800d79a <xQueueSemaphoreTake+0x66>
 800d798:	2300      	movs	r3, #0
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10a      	bne.n	800d7b4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d79e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7a2:	f383 8811 	msr	BASEPRI, r3
 800d7a6:	f3bf 8f6f 	isb	sy
 800d7aa:	f3bf 8f4f 	dsb	sy
 800d7ae:	61bb      	str	r3, [r7, #24]
}
 800d7b0:	bf00      	nop
 800d7b2:	e7fe      	b.n	800d7b2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7b4:	f002 fa06 	bl	800fbc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7bc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d7be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d024      	beq.n	800d80e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d7c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c6:	1e5a      	subs	r2, r3, #1
 800d7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d104      	bne.n	800d7de <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d7d4:	f001 fb10 	bl	800edf8 <pvTaskIncrementMutexHeldCount>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7dc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d00f      	beq.n	800d806 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e8:	3310      	adds	r3, #16
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	f000 ffbc 	bl	800e768 <xTaskRemoveFromEventList>
 800d7f0:	4603      	mov	r3, r0
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d007      	beq.n	800d806 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7f6:	4b54      	ldr	r3, [pc, #336]	; (800d948 <xQueueSemaphoreTake+0x214>)
 800d7f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7fc:	601a      	str	r2, [r3, #0]
 800d7fe:	f3bf 8f4f 	dsb	sy
 800d802:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d806:	f002 fa0d 	bl	800fc24 <vPortExitCritical>
				return pdPASS;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e097      	b.n	800d93e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d80e:	683b      	ldr	r3, [r7, #0]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d111      	bne.n	800d838 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d816:	2b00      	cmp	r3, #0
 800d818:	d00a      	beq.n	800d830 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d81e:	f383 8811 	msr	BASEPRI, r3
 800d822:	f3bf 8f6f 	isb	sy
 800d826:	f3bf 8f4f 	dsb	sy
 800d82a:	617b      	str	r3, [r7, #20]
}
 800d82c:	bf00      	nop
 800d82e:	e7fe      	b.n	800d82e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d830:	f002 f9f8 	bl	800fc24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d834:	2300      	movs	r3, #0
 800d836:	e082      	b.n	800d93e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d106      	bne.n	800d84c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d83e:	f107 030c 	add.w	r3, r7, #12
 800d842:	4618      	mov	r0, r3
 800d844:	f000 fff4 	bl	800e830 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d848:	2301      	movs	r3, #1
 800d84a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d84c:	f002 f9ea 	bl	800fc24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d850:	f000 fd32 	bl	800e2b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d854:	f002 f9b6 	bl	800fbc4 <vPortEnterCritical>
 800d858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d85a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d85e:	b25b      	sxtb	r3, r3
 800d860:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d864:	d103      	bne.n	800d86e <xQueueSemaphoreTake+0x13a>
 800d866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d868:	2200      	movs	r2, #0
 800d86a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d870:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d874:	b25b      	sxtb	r3, r3
 800d876:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d87a:	d103      	bne.n	800d884 <xQueueSemaphoreTake+0x150>
 800d87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87e:	2200      	movs	r2, #0
 800d880:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d884:	f002 f9ce 	bl	800fc24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d888:	463a      	mov	r2, r7
 800d88a:	f107 030c 	add.w	r3, r7, #12
 800d88e:	4611      	mov	r1, r2
 800d890:	4618      	mov	r0, r3
 800d892:	f000 ffe3 	bl	800e85c <xTaskCheckForTimeOut>
 800d896:	4603      	mov	r3, r0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d132      	bne.n	800d902 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d89c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d89e:	f000 f9f2 	bl	800dc86 <prvIsQueueEmpty>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d026      	beq.n	800d8f6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d109      	bne.n	800d8c4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d8b0:	f002 f988 	bl	800fbc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	689b      	ldr	r3, [r3, #8]
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	f001 f945 	bl	800eb48 <xTaskPriorityInherit>
 800d8be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d8c0:	f002 f9b0 	bl	800fc24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c6:	3324      	adds	r3, #36	; 0x24
 800d8c8:	683a      	ldr	r2, [r7, #0]
 800d8ca:	4611      	mov	r1, r2
 800d8cc:	4618      	mov	r0, r3
 800d8ce:	f000 fefb 	bl	800e6c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8d4:	f000 f985 	bl	800dbe2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8d8:	f000 fcfc 	bl	800e2d4 <xTaskResumeAll>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	f47f af68 	bne.w	800d7b4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d8e4:	4b18      	ldr	r3, [pc, #96]	; (800d948 <xQueueSemaphoreTake+0x214>)
 800d8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8ea:	601a      	str	r2, [r3, #0]
 800d8ec:	f3bf 8f4f 	dsb	sy
 800d8f0:	f3bf 8f6f 	isb	sy
 800d8f4:	e75e      	b.n	800d7b4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d8f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8f8:	f000 f973 	bl	800dbe2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8fc:	f000 fcea 	bl	800e2d4 <xTaskResumeAll>
 800d900:	e758      	b.n	800d7b4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d902:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d904:	f000 f96d 	bl	800dbe2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d908:	f000 fce4 	bl	800e2d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d90c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d90e:	f000 f9ba 	bl	800dc86 <prvIsQueueEmpty>
 800d912:	4603      	mov	r3, r0
 800d914:	2b00      	cmp	r3, #0
 800d916:	f43f af4d 	beq.w	800d7b4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d00d      	beq.n	800d93c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d920:	f002 f950 	bl	800fbc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d924:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d926:	f000 f8b4 	bl	800da92 <prvGetDisinheritPriorityAfterTimeout>
 800d92a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d92c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d932:	4618      	mov	r0, r3
 800d934:	f001 f9de 	bl	800ecf4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d938:	f002 f974 	bl	800fc24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d93c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d93e:	4618      	mov	r0, r3
 800d940:	3738      	adds	r7, #56	; 0x38
 800d942:	46bd      	mov	sp, r7
 800d944:	bd80      	pop	{r7, pc}
 800d946:	bf00      	nop
 800d948:	e000ed04 	.word	0xe000ed04

0800d94c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b08e      	sub	sp, #56	; 0x38
 800d950:	af00      	add	r7, sp, #0
 800d952:	60f8      	str	r0, [r7, #12]
 800d954:	60b9      	str	r1, [r7, #8]
 800d956:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d95c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10a      	bne.n	800d978 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d966:	f383 8811 	msr	BASEPRI, r3
 800d96a:	f3bf 8f6f 	isb	sy
 800d96e:	f3bf 8f4f 	dsb	sy
 800d972:	623b      	str	r3, [r7, #32]
}
 800d974:	bf00      	nop
 800d976:	e7fe      	b.n	800d976 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d978:	68bb      	ldr	r3, [r7, #8]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d103      	bne.n	800d986 <xQueueReceiveFromISR+0x3a>
 800d97e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d982:	2b00      	cmp	r3, #0
 800d984:	d101      	bne.n	800d98a <xQueueReceiveFromISR+0x3e>
 800d986:	2301      	movs	r3, #1
 800d988:	e000      	b.n	800d98c <xQueueReceiveFromISR+0x40>
 800d98a:	2300      	movs	r3, #0
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10a      	bne.n	800d9a6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d994:	f383 8811 	msr	BASEPRI, r3
 800d998:	f3bf 8f6f 	isb	sy
 800d99c:	f3bf 8f4f 	dsb	sy
 800d9a0:	61fb      	str	r3, [r7, #28]
}
 800d9a2:	bf00      	nop
 800d9a4:	e7fe      	b.n	800d9a4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9a6:	f002 f9ef 	bl	800fd88 <vPortValidateInterruptPriority>
	__asm volatile
 800d9aa:	f3ef 8211 	mrs	r2, BASEPRI
 800d9ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9b2:	f383 8811 	msr	BASEPRI, r3
 800d9b6:	f3bf 8f6f 	isb	sy
 800d9ba:	f3bf 8f4f 	dsb	sy
 800d9be:	61ba      	str	r2, [r7, #24]
 800d9c0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d9c2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9c4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ca:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d02f      	beq.n	800da32 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9dc:	68b9      	ldr	r1, [r7, #8]
 800d9de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9e0:	f000 f8d9 	bl	800db96 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	1e5a      	subs	r2, r3, #1
 800d9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9ea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d9ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f4:	d112      	bne.n	800da1c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d016      	beq.n	800da2c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da00:	3310      	adds	r3, #16
 800da02:	4618      	mov	r0, r3
 800da04:	f000 feb0 	bl	800e768 <xTaskRemoveFromEventList>
 800da08:	4603      	mov	r3, r0
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00e      	beq.n	800da2c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00b      	beq.n	800da2c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2201      	movs	r2, #1
 800da18:	601a      	str	r2, [r3, #0]
 800da1a:	e007      	b.n	800da2c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da20:	3301      	adds	r3, #1
 800da22:	b2db      	uxtb	r3, r3
 800da24:	b25a      	sxtb	r2, r3
 800da26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800da2c:	2301      	movs	r3, #1
 800da2e:	637b      	str	r3, [r7, #52]	; 0x34
 800da30:	e001      	b.n	800da36 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800da32:	2300      	movs	r3, #0
 800da34:	637b      	str	r3, [r7, #52]	; 0x34
 800da36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da38:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	f383 8811 	msr	BASEPRI, r3
}
 800da40:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da44:	4618      	mov	r0, r3
 800da46:	3738      	adds	r7, #56	; 0x38
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d10a      	bne.n	800da74 <vQueueDelete+0x28>
	__asm volatile
 800da5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da62:	f383 8811 	msr	BASEPRI, r3
 800da66:	f3bf 8f6f 	isb	sy
 800da6a:	f3bf 8f4f 	dsb	sy
 800da6e:	60bb      	str	r3, [r7, #8]
}
 800da70:	bf00      	nop
 800da72:	e7fe      	b.n	800da72 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 f95f 	bl	800dd38 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da80:	2b00      	cmp	r3, #0
 800da82:	d102      	bne.n	800da8a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f002 fa8b 	bl	800ffa0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da8a:	bf00      	nop
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}

0800da92 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da92:	b480      	push	{r7}
 800da94:	b085      	sub	sp, #20
 800da96:	af00      	add	r7, sp, #0
 800da98:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d006      	beq.n	800dab0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800daac:	60fb      	str	r3, [r7, #12]
 800daae:	e001      	b.n	800dab4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dab0:	2300      	movs	r3, #0
 800dab2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dab4:	68fb      	ldr	r3, [r7, #12]
	}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3714      	adds	r7, #20
 800daba:	46bd      	mov	sp, r7
 800dabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac0:	4770      	bx	lr

0800dac2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dac2:	b580      	push	{r7, lr}
 800dac4:	b086      	sub	sp, #24
 800dac6:	af00      	add	r7, sp, #0
 800dac8:	60f8      	str	r0, [r7, #12]
 800daca:	60b9      	str	r1, [r7, #8]
 800dacc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dace:	2300      	movs	r3, #0
 800dad0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10d      	bne.n	800dafc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d14d      	bne.n	800db84 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	4618      	mov	r0, r3
 800daee:	f001 f893 	bl	800ec18 <xTaskPriorityDisinherit>
 800daf2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	609a      	str	r2, [r3, #8]
 800dafa:	e043      	b.n	800db84 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d119      	bne.n	800db36 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6858      	ldr	r0, [r3, #4]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db0a:	461a      	mov	r2, r3
 800db0c:	68b9      	ldr	r1, [r7, #8]
 800db0e:	f00d fd74 	bl	801b5fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	685a      	ldr	r2, [r3, #4]
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db1a:	441a      	add	r2, r3
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	685a      	ldr	r2, [r3, #4]
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	689b      	ldr	r3, [r3, #8]
 800db28:	429a      	cmp	r2, r3
 800db2a:	d32b      	bcc.n	800db84 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	681a      	ldr	r2, [r3, #0]
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	605a      	str	r2, [r3, #4]
 800db34:	e026      	b.n	800db84 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	68d8      	ldr	r0, [r3, #12]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3e:	461a      	mov	r2, r3
 800db40:	68b9      	ldr	r1, [r7, #8]
 800db42:	f00d fd5a 	bl	801b5fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	68da      	ldr	r2, [r3, #12]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db4e:	425b      	negs	r3, r3
 800db50:	441a      	add	r2, r3
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	68da      	ldr	r2, [r3, #12]
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d207      	bcs.n	800db72 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	689a      	ldr	r2, [r3, #8]
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db6a:	425b      	negs	r3, r3
 800db6c:	441a      	add	r2, r3
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b02      	cmp	r3, #2
 800db76:	d105      	bne.n	800db84 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d002      	beq.n	800db84 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	3b01      	subs	r3, #1
 800db82:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	1c5a      	adds	r2, r3, #1
 800db88:	68fb      	ldr	r3, [r7, #12]
 800db8a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db8c:	697b      	ldr	r3, [r7, #20]
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b082      	sub	sp, #8
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
 800db9e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d018      	beq.n	800dbda <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	68da      	ldr	r2, [r3, #12]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbb0:	441a      	add	r2, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68da      	ldr	r2, [r3, #12]
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	689b      	ldr	r3, [r3, #8]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d303      	bcc.n	800dbca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681a      	ldr	r2, [r3, #0]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	68d9      	ldr	r1, [r3, #12]
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	461a      	mov	r2, r3
 800dbd4:	6838      	ldr	r0, [r7, #0]
 800dbd6:	f00d fd10 	bl	801b5fa <memcpy>
	}
}
 800dbda:	bf00      	nop
 800dbdc:	3708      	adds	r7, #8
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b084      	sub	sp, #16
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbea:	f001 ffeb 	bl	800fbc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbf4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbf6:	e011      	b.n	800dc1c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d012      	beq.n	800dc26 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	3324      	adds	r3, #36	; 0x24
 800dc04:	4618      	mov	r0, r3
 800dc06:	f000 fdaf 	bl	800e768 <xTaskRemoveFromEventList>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d001      	beq.n	800dc14 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc10:	f000 fe86 	bl	800e920 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc14:	7bfb      	ldrb	r3, [r7, #15]
 800dc16:	3b01      	subs	r3, #1
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	dce9      	bgt.n	800dbf8 <prvUnlockQueue+0x16>
 800dc24:	e000      	b.n	800dc28 <prvUnlockQueue+0x46>
					break;
 800dc26:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	22ff      	movs	r2, #255	; 0xff
 800dc2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc30:	f001 fff8 	bl	800fc24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc34:	f001 ffc6 	bl	800fbc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc3e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc40:	e011      	b.n	800dc66 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	691b      	ldr	r3, [r3, #16]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d012      	beq.n	800dc70 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	3310      	adds	r3, #16
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f000 fd8a 	bl	800e768 <xTaskRemoveFromEventList>
 800dc54:	4603      	mov	r3, r0
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d001      	beq.n	800dc5e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc5a:	f000 fe61 	bl	800e920 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc5e:	7bbb      	ldrb	r3, [r7, #14]
 800dc60:	3b01      	subs	r3, #1
 800dc62:	b2db      	uxtb	r3, r3
 800dc64:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	dce9      	bgt.n	800dc42 <prvUnlockQueue+0x60>
 800dc6e:	e000      	b.n	800dc72 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc70:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	22ff      	movs	r2, #255	; 0xff
 800dc76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc7a:	f001 ffd3 	bl	800fc24 <vPortExitCritical>
}
 800dc7e:	bf00      	nop
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}

0800dc86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc86:	b580      	push	{r7, lr}
 800dc88:	b084      	sub	sp, #16
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc8e:	f001 ff99 	bl	800fbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d102      	bne.n	800dca0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	e001      	b.n	800dca4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dca0:	2300      	movs	r3, #0
 800dca2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dca4:	f001 ffbe 	bl	800fc24 <vPortExitCritical>

	return xReturn;
 800dca8:	68fb      	ldr	r3, [r7, #12]
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	3710      	adds	r7, #16
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	bd80      	pop	{r7, pc}

0800dcb2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dcb2:	b580      	push	{r7, lr}
 800dcb4:	b084      	sub	sp, #16
 800dcb6:	af00      	add	r7, sp, #0
 800dcb8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcba:	f001 ff83 	bl	800fbc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d102      	bne.n	800dcd0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcca:	2301      	movs	r3, #1
 800dccc:	60fb      	str	r3, [r7, #12]
 800dcce:	e001      	b.n	800dcd4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcd0:	2300      	movs	r3, #0
 800dcd2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcd4:	f001 ffa6 	bl	800fc24 <vPortExitCritical>

	return xReturn;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	3710      	adds	r7, #16
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
	...

0800dce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dce4:	b480      	push	{r7}
 800dce6:	b085      	sub	sp, #20
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
 800dcec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60fb      	str	r3, [r7, #12]
 800dcf2:	e014      	b.n	800dd1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dcf4:	4a0f      	ldr	r2, [pc, #60]	; (800dd34 <vQueueAddToRegistry+0x50>)
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d10b      	bne.n	800dd18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dd00:	490c      	ldr	r1, [pc, #48]	; (800dd34 <vQueueAddToRegistry+0x50>)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	683a      	ldr	r2, [r7, #0]
 800dd06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dd0a:	4a0a      	ldr	r2, [pc, #40]	; (800dd34 <vQueueAddToRegistry+0x50>)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	4413      	add	r3, r2
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd16:	e006      	b.n	800dd26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	60fb      	str	r3, [r7, #12]
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	2b07      	cmp	r3, #7
 800dd22:	d9e7      	bls.n	800dcf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd24:	bf00      	nop
 800dd26:	bf00      	nop
 800dd28:	3714      	adds	r7, #20
 800dd2a:	46bd      	mov	sp, r7
 800dd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd30:	4770      	bx	lr
 800dd32:	bf00      	nop
 800dd34:	240051d8 	.word	0x240051d8

0800dd38 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dd38:	b480      	push	{r7}
 800dd3a:	b085      	sub	sp, #20
 800dd3c:	af00      	add	r7, sp, #0
 800dd3e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd40:	2300      	movs	r3, #0
 800dd42:	60fb      	str	r3, [r7, #12]
 800dd44:	e016      	b.n	800dd74 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dd46:	4a10      	ldr	r2, [pc, #64]	; (800dd88 <vQueueUnregisterQueue+0x50>)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	00db      	lsls	r3, r3, #3
 800dd4c:	4413      	add	r3, r2
 800dd4e:	685b      	ldr	r3, [r3, #4]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d10b      	bne.n	800dd6e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dd56:	4a0c      	ldr	r2, [pc, #48]	; (800dd88 <vQueueUnregisterQueue+0x50>)
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dd60:	4a09      	ldr	r2, [pc, #36]	; (800dd88 <vQueueUnregisterQueue+0x50>)
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	00db      	lsls	r3, r3, #3
 800dd66:	4413      	add	r3, r2
 800dd68:	2200      	movs	r2, #0
 800dd6a:	605a      	str	r2, [r3, #4]
				break;
 800dd6c:	e006      	b.n	800dd7c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	3301      	adds	r3, #1
 800dd72:	60fb      	str	r3, [r7, #12]
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b07      	cmp	r3, #7
 800dd78:	d9e5      	bls.n	800dd46 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dd7a:	bf00      	nop
 800dd7c:	bf00      	nop
 800dd7e:	3714      	adds	r7, #20
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	240051d8 	.word	0x240051d8

0800dd8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b086      	sub	sp, #24
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	60b9      	str	r1, [r7, #8]
 800dd96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd9c:	f001 ff12 	bl	800fbc4 <vPortEnterCritical>
 800dda0:	697b      	ldr	r3, [r7, #20]
 800dda2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dda6:	b25b      	sxtb	r3, r3
 800dda8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddac:	d103      	bne.n	800ddb6 <vQueueWaitForMessageRestricted+0x2a>
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddbc:	b25b      	sxtb	r3, r3
 800ddbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddc2:	d103      	bne.n	800ddcc <vQueueWaitForMessageRestricted+0x40>
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddcc:	f001 ff2a 	bl	800fc24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ddd0:	697b      	ldr	r3, [r7, #20]
 800ddd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d106      	bne.n	800dde6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ddd8:	697b      	ldr	r3, [r7, #20]
 800ddda:	3324      	adds	r3, #36	; 0x24
 800dddc:	687a      	ldr	r2, [r7, #4]
 800ddde:	68b9      	ldr	r1, [r7, #8]
 800dde0:	4618      	mov	r0, r3
 800dde2:	f000 fc95 	bl	800e710 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dde6:	6978      	ldr	r0, [r7, #20]
 800dde8:	f7ff fefb 	bl	800dbe2 <prvUnlockQueue>
	}
 800ddec:	bf00      	nop
 800ddee:	3718      	adds	r7, #24
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}

0800ddf4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08e      	sub	sp, #56	; 0x38
 800ddf8:	af04      	add	r7, sp, #16
 800ddfa:	60f8      	str	r0, [r7, #12]
 800ddfc:	60b9      	str	r1, [r7, #8]
 800ddfe:	607a      	str	r2, [r7, #4]
 800de00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800de02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de04:	2b00      	cmp	r3, #0
 800de06:	d10a      	bne.n	800de1e <xTaskCreateStatic+0x2a>
	__asm volatile
 800de08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0c:	f383 8811 	msr	BASEPRI, r3
 800de10:	f3bf 8f6f 	isb	sy
 800de14:	f3bf 8f4f 	dsb	sy
 800de18:	623b      	str	r3, [r7, #32]
}
 800de1a:	bf00      	nop
 800de1c:	e7fe      	b.n	800de1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de20:	2b00      	cmp	r3, #0
 800de22:	d10a      	bne.n	800de3a <xTaskCreateStatic+0x46>
	__asm volatile
 800de24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de28:	f383 8811 	msr	BASEPRI, r3
 800de2c:	f3bf 8f6f 	isb	sy
 800de30:	f3bf 8f4f 	dsb	sy
 800de34:	61fb      	str	r3, [r7, #28]
}
 800de36:	bf00      	nop
 800de38:	e7fe      	b.n	800de38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de3a:	23c0      	movs	r3, #192	; 0xc0
 800de3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	2bc0      	cmp	r3, #192	; 0xc0
 800de42:	d00a      	beq.n	800de5a <xTaskCreateStatic+0x66>
	__asm volatile
 800de44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de48:	f383 8811 	msr	BASEPRI, r3
 800de4c:	f3bf 8f6f 	isb	sy
 800de50:	f3bf 8f4f 	dsb	sy
 800de54:	61bb      	str	r3, [r7, #24]
}
 800de56:	bf00      	nop
 800de58:	e7fe      	b.n	800de58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d01e      	beq.n	800dea0 <xTaskCreateStatic+0xac>
 800de62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de64:	2b00      	cmp	r3, #0
 800de66:	d01b      	beq.n	800dea0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de74:	2202      	movs	r2, #2
 800de76:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de7a:	2300      	movs	r3, #0
 800de7c:	9303      	str	r3, [sp, #12]
 800de7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de80:	9302      	str	r3, [sp, #8]
 800de82:	f107 0314 	add.w	r3, r7, #20
 800de86:	9301      	str	r3, [sp, #4]
 800de88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de8a:	9300      	str	r3, [sp, #0]
 800de8c:	683b      	ldr	r3, [r7, #0]
 800de8e:	687a      	ldr	r2, [r7, #4]
 800de90:	68b9      	ldr	r1, [r7, #8]
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f000 f850 	bl	800df38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de9a:	f000 f8f7 	bl	800e08c <prvAddNewTaskToReadyList>
 800de9e:	e001      	b.n	800dea4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dea0:	2300      	movs	r3, #0
 800dea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dea4:	697b      	ldr	r3, [r7, #20]
	}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3728      	adds	r7, #40	; 0x28
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}

0800deae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800deae:	b580      	push	{r7, lr}
 800deb0:	b08c      	sub	sp, #48	; 0x30
 800deb2:	af04      	add	r7, sp, #16
 800deb4:	60f8      	str	r0, [r7, #12]
 800deb6:	60b9      	str	r1, [r7, #8]
 800deb8:	603b      	str	r3, [r7, #0]
 800deba:	4613      	mov	r3, r2
 800debc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800debe:	88fb      	ldrh	r3, [r7, #6]
 800dec0:	009b      	lsls	r3, r3, #2
 800dec2:	4618      	mov	r0, r3
 800dec4:	f001 ffa0 	bl	800fe08 <pvPortMalloc>
 800dec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800deca:	697b      	ldr	r3, [r7, #20]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00e      	beq.n	800deee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ded0:	20c0      	movs	r0, #192	; 0xc0
 800ded2:	f001 ff99 	bl	800fe08 <pvPortMalloc>
 800ded6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ded8:	69fb      	ldr	r3, [r7, #28]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d003      	beq.n	800dee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dede:	69fb      	ldr	r3, [r7, #28]
 800dee0:	697a      	ldr	r2, [r7, #20]
 800dee2:	631a      	str	r2, [r3, #48]	; 0x30
 800dee4:	e005      	b.n	800def2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dee6:	6978      	ldr	r0, [r7, #20]
 800dee8:	f002 f85a 	bl	800ffa0 <vPortFree>
 800deec:	e001      	b.n	800def2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800deee:	2300      	movs	r3, #0
 800def0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800def2:	69fb      	ldr	r3, [r7, #28]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d017      	beq.n	800df28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800def8:	69fb      	ldr	r3, [r7, #28]
 800defa:	2200      	movs	r2, #0
 800defc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800df00:	88fa      	ldrh	r2, [r7, #6]
 800df02:	2300      	movs	r3, #0
 800df04:	9303      	str	r3, [sp, #12]
 800df06:	69fb      	ldr	r3, [r7, #28]
 800df08:	9302      	str	r3, [sp, #8]
 800df0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0c:	9301      	str	r3, [sp, #4]
 800df0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df10:	9300      	str	r3, [sp, #0]
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	68b9      	ldr	r1, [r7, #8]
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f000 f80e 	bl	800df38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df1c:	69f8      	ldr	r0, [r7, #28]
 800df1e:	f000 f8b5 	bl	800e08c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df22:	2301      	movs	r3, #1
 800df24:	61bb      	str	r3, [r7, #24]
 800df26:	e002      	b.n	800df2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df28:	f04f 33ff 	mov.w	r3, #4294967295
 800df2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800df2e:	69bb      	ldr	r3, [r7, #24]
	}
 800df30:	4618      	mov	r0, r3
 800df32:	3720      	adds	r7, #32
 800df34:	46bd      	mov	sp, r7
 800df36:	bd80      	pop	{r7, pc}

0800df38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b088      	sub	sp, #32
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	60f8      	str	r0, [r7, #12]
 800df40:	60b9      	str	r1, [r7, #8]
 800df42:	607a      	str	r2, [r7, #4]
 800df44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	009b      	lsls	r3, r3, #2
 800df4e:	461a      	mov	r2, r3
 800df50:	21a5      	movs	r1, #165	; 0xa5
 800df52:	f00d fb60 	bl	801b616 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df5a:	6879      	ldr	r1, [r7, #4]
 800df5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800df60:	440b      	add	r3, r1
 800df62:	009b      	lsls	r3, r3, #2
 800df64:	4413      	add	r3, r2
 800df66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df68:	69bb      	ldr	r3, [r7, #24]
 800df6a:	f023 0307 	bic.w	r3, r3, #7
 800df6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df70:	69bb      	ldr	r3, [r7, #24]
 800df72:	f003 0307 	and.w	r3, r3, #7
 800df76:	2b00      	cmp	r3, #0
 800df78:	d00a      	beq.n	800df90 <prvInitialiseNewTask+0x58>
	__asm volatile
 800df7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7e:	f383 8811 	msr	BASEPRI, r3
 800df82:	f3bf 8f6f 	isb	sy
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	617b      	str	r3, [r7, #20]
}
 800df8c:	bf00      	nop
 800df8e:	e7fe      	b.n	800df8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	2b00      	cmp	r3, #0
 800df94:	d01f      	beq.n	800dfd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df96:	2300      	movs	r3, #0
 800df98:	61fb      	str	r3, [r7, #28]
 800df9a:	e012      	b.n	800dfc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df9c:	68ba      	ldr	r2, [r7, #8]
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	4413      	add	r3, r2
 800dfa2:	7819      	ldrb	r1, [r3, #0]
 800dfa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfa6:	69fb      	ldr	r3, [r7, #28]
 800dfa8:	4413      	add	r3, r2
 800dfaa:	3334      	adds	r3, #52	; 0x34
 800dfac:	460a      	mov	r2, r1
 800dfae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dfb0:	68ba      	ldr	r2, [r7, #8]
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	4413      	add	r3, r2
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d006      	beq.n	800dfca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	3301      	adds	r3, #1
 800dfc0:	61fb      	str	r3, [r7, #28]
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	2b0f      	cmp	r3, #15
 800dfc6:	d9e9      	bls.n	800df9c <prvInitialiseNewTask+0x64>
 800dfc8:	e000      	b.n	800dfcc <prvInitialiseNewTask+0x94>
			{
				break;
 800dfca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dfcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dfd4:	e003      	b.n	800dfde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfe0:	2b37      	cmp	r3, #55	; 0x37
 800dfe2:	d901      	bls.n	800dfe8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfe4:	2337      	movs	r3, #55	; 0x37
 800dfe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dff2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	2200      	movs	r2, #0
 800dff8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dffc:	3304      	adds	r3, #4
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fe fda0 	bl	800cb44 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e006:	3318      	adds	r3, #24
 800e008:	4618      	mov	r0, r3
 800e00a:	f7fe fd9b 	bl	800cb44 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e012:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e016:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e01a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e01e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e022:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e026:	2200      	movs	r2, #0
 800e028:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02c:	2200      	movs	r2, #0
 800e02e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e034:	2200      	movs	r2, #0
 800e036:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03c:	3358      	adds	r3, #88	; 0x58
 800e03e:	2260      	movs	r2, #96	; 0x60
 800e040:	2100      	movs	r1, #0
 800e042:	4618      	mov	r0, r3
 800e044:	f00d fae7 	bl	801b616 <memset>
 800e048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e04a:	4a0d      	ldr	r2, [pc, #52]	; (800e080 <prvInitialiseNewTask+0x148>)
 800e04c:	65da      	str	r2, [r3, #92]	; 0x5c
 800e04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e050:	4a0c      	ldr	r2, [pc, #48]	; (800e084 <prvInitialiseNewTask+0x14c>)
 800e052:	661a      	str	r2, [r3, #96]	; 0x60
 800e054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e056:	4a0c      	ldr	r2, [pc, #48]	; (800e088 <prvInitialiseNewTask+0x150>)
 800e058:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e05a:	683a      	ldr	r2, [r7, #0]
 800e05c:	68f9      	ldr	r1, [r7, #12]
 800e05e:	69b8      	ldr	r0, [r7, #24]
 800e060:	f001 fc82 	bl	800f968 <pxPortInitialiseStack>
 800e064:	4602      	mov	r2, r0
 800e066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e068:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e06a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d002      	beq.n	800e076 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e072:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e074:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e076:	bf00      	nop
 800e078:	3720      	adds	r7, #32
 800e07a:	46bd      	mov	sp, r7
 800e07c:	bd80      	pop	{r7, pc}
 800e07e:	bf00      	nop
 800e080:	0801fd54 	.word	0x0801fd54
 800e084:	0801fd74 	.word	0x0801fd74
 800e088:	0801fd34 	.word	0x0801fd34

0800e08c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e094:	f001 fd96 	bl	800fbc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e098:	4b2d      	ldr	r3, [pc, #180]	; (800e150 <prvAddNewTaskToReadyList+0xc4>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	3301      	adds	r3, #1
 800e09e:	4a2c      	ldr	r2, [pc, #176]	; (800e150 <prvAddNewTaskToReadyList+0xc4>)
 800e0a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e0a2:	4b2c      	ldr	r3, [pc, #176]	; (800e154 <prvAddNewTaskToReadyList+0xc8>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d109      	bne.n	800e0be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e0aa:	4a2a      	ldr	r2, [pc, #168]	; (800e154 <prvAddNewTaskToReadyList+0xc8>)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e0b0:	4b27      	ldr	r3, [pc, #156]	; (800e150 <prvAddNewTaskToReadyList+0xc4>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	2b01      	cmp	r3, #1
 800e0b6:	d110      	bne.n	800e0da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0b8:	f000 fc56 	bl	800e968 <prvInitialiseTaskLists>
 800e0bc:	e00d      	b.n	800e0da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0be:	4b26      	ldr	r3, [pc, #152]	; (800e158 <prvAddNewTaskToReadyList+0xcc>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d109      	bne.n	800e0da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e0c6:	4b23      	ldr	r3, [pc, #140]	; (800e154 <prvAddNewTaskToReadyList+0xc8>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d0:	429a      	cmp	r2, r3
 800e0d2:	d802      	bhi.n	800e0da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0d4:	4a1f      	ldr	r2, [pc, #124]	; (800e154 <prvAddNewTaskToReadyList+0xc8>)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0da:	4b20      	ldr	r3, [pc, #128]	; (800e15c <prvAddNewTaskToReadyList+0xd0>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	4a1e      	ldr	r2, [pc, #120]	; (800e15c <prvAddNewTaskToReadyList+0xd0>)
 800e0e2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e0e4:	4b1d      	ldr	r3, [pc, #116]	; (800e15c <prvAddNewTaskToReadyList+0xd0>)
 800e0e6:	681a      	ldr	r2, [r3, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0f0:	4b1b      	ldr	r3, [pc, #108]	; (800e160 <prvAddNewTaskToReadyList+0xd4>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d903      	bls.n	800e100 <prvAddNewTaskToReadyList+0x74>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0fc:	4a18      	ldr	r2, [pc, #96]	; (800e160 <prvAddNewTaskToReadyList+0xd4>)
 800e0fe:	6013      	str	r3, [r2, #0]
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e104:	4613      	mov	r3, r2
 800e106:	009b      	lsls	r3, r3, #2
 800e108:	4413      	add	r3, r2
 800e10a:	009b      	lsls	r3, r3, #2
 800e10c:	4a15      	ldr	r2, [pc, #84]	; (800e164 <prvAddNewTaskToReadyList+0xd8>)
 800e10e:	441a      	add	r2, r3
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	3304      	adds	r3, #4
 800e114:	4619      	mov	r1, r3
 800e116:	4610      	mov	r0, r2
 800e118:	f7fe fd21 	bl	800cb5e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e11c:	f001 fd82 	bl	800fc24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e120:	4b0d      	ldr	r3, [pc, #52]	; (800e158 <prvAddNewTaskToReadyList+0xcc>)
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d00e      	beq.n	800e146 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e128:	4b0a      	ldr	r3, [pc, #40]	; (800e154 <prvAddNewTaskToReadyList+0xc8>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e132:	429a      	cmp	r2, r3
 800e134:	d207      	bcs.n	800e146 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e136:	4b0c      	ldr	r3, [pc, #48]	; (800e168 <prvAddNewTaskToReadyList+0xdc>)
 800e138:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e13c:	601a      	str	r2, [r3, #0]
 800e13e:	f3bf 8f4f 	dsb	sy
 800e142:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e146:	bf00      	nop
 800e148:	3708      	adds	r7, #8
 800e14a:	46bd      	mov	sp, r7
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	bf00      	nop
 800e150:	24000d24 	.word	0x24000d24
 800e154:	24000850 	.word	0x24000850
 800e158:	24000d30 	.word	0x24000d30
 800e15c:	24000d40 	.word	0x24000d40
 800e160:	24000d2c 	.word	0x24000d2c
 800e164:	24000854 	.word	0x24000854
 800e168:	e000ed04 	.word	0xe000ed04

0800e16c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e174:	2300      	movs	r3, #0
 800e176:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d017      	beq.n	800e1ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e17e:	4b13      	ldr	r3, [pc, #76]	; (800e1cc <vTaskDelay+0x60>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00a      	beq.n	800e19c <vTaskDelay+0x30>
	__asm volatile
 800e186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e18a:	f383 8811 	msr	BASEPRI, r3
 800e18e:	f3bf 8f6f 	isb	sy
 800e192:	f3bf 8f4f 	dsb	sy
 800e196:	60bb      	str	r3, [r7, #8]
}
 800e198:	bf00      	nop
 800e19a:	e7fe      	b.n	800e19a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e19c:	f000 f88c 	bl	800e2b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	6878      	ldr	r0, [r7, #4]
 800e1a4:	f001 f83e 	bl	800f224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e1a8:	f000 f894 	bl	800e2d4 <xTaskResumeAll>
 800e1ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d107      	bne.n	800e1c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e1b4:	4b06      	ldr	r3, [pc, #24]	; (800e1d0 <vTaskDelay+0x64>)
 800e1b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1ba:	601a      	str	r2, [r3, #0]
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e1c4:	bf00      	nop
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bd80      	pop	{r7, pc}
 800e1cc:	24000d4c 	.word	0x24000d4c
 800e1d0:	e000ed04 	.word	0xe000ed04

0800e1d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b08a      	sub	sp, #40	; 0x28
 800e1d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e1da:	2300      	movs	r3, #0
 800e1dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e1e2:	463a      	mov	r2, r7
 800e1e4:	1d39      	adds	r1, r7, #4
 800e1e6:	f107 0308 	add.w	r3, r7, #8
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	f7fe fc56 	bl	800ca9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e1f0:	6839      	ldr	r1, [r7, #0]
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	9202      	str	r2, [sp, #8]
 800e1f8:	9301      	str	r3, [sp, #4]
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	9300      	str	r3, [sp, #0]
 800e1fe:	2300      	movs	r3, #0
 800e200:	460a      	mov	r2, r1
 800e202:	4925      	ldr	r1, [pc, #148]	; (800e298 <vTaskStartScheduler+0xc4>)
 800e204:	4825      	ldr	r0, [pc, #148]	; (800e29c <vTaskStartScheduler+0xc8>)
 800e206:	f7ff fdf5 	bl	800ddf4 <xTaskCreateStatic>
 800e20a:	4603      	mov	r3, r0
 800e20c:	4a24      	ldr	r2, [pc, #144]	; (800e2a0 <vTaskStartScheduler+0xcc>)
 800e20e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e210:	4b23      	ldr	r3, [pc, #140]	; (800e2a0 <vTaskStartScheduler+0xcc>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d002      	beq.n	800e21e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e218:	2301      	movs	r3, #1
 800e21a:	617b      	str	r3, [r7, #20]
 800e21c:	e001      	b.n	800e222 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e21e:	2300      	movs	r3, #0
 800e220:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	2b01      	cmp	r3, #1
 800e226:	d102      	bne.n	800e22e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e228:	f001 f850 	bl	800f2cc <xTimerCreateTimerTask>
 800e22c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e22e:	697b      	ldr	r3, [r7, #20]
 800e230:	2b01      	cmp	r3, #1
 800e232:	d11d      	bne.n	800e270 <vTaskStartScheduler+0x9c>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	613b      	str	r3, [r7, #16]
}
 800e246:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e248:	4b16      	ldr	r3, [pc, #88]	; (800e2a4 <vTaskStartScheduler+0xd0>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	3358      	adds	r3, #88	; 0x58
 800e24e:	4a16      	ldr	r2, [pc, #88]	; (800e2a8 <vTaskStartScheduler+0xd4>)
 800e250:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e252:	4b16      	ldr	r3, [pc, #88]	; (800e2ac <vTaskStartScheduler+0xd8>)
 800e254:	f04f 32ff 	mov.w	r2, #4294967295
 800e258:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e25a:	4b15      	ldr	r3, [pc, #84]	; (800e2b0 <vTaskStartScheduler+0xdc>)
 800e25c:	2201      	movs	r2, #1
 800e25e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e260:	4b14      	ldr	r3, [pc, #80]	; (800e2b4 <vTaskStartScheduler+0xe0>)
 800e262:	2200      	movs	r2, #0
 800e264:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e266:	f7f2 ff3b 	bl	80010e0 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e26a:	f001 fc09 	bl	800fa80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e26e:	e00e      	b.n	800e28e <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e270:	697b      	ldr	r3, [r7, #20]
 800e272:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e276:	d10a      	bne.n	800e28e <vTaskStartScheduler+0xba>
	__asm volatile
 800e278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e27c:	f383 8811 	msr	BASEPRI, r3
 800e280:	f3bf 8f6f 	isb	sy
 800e284:	f3bf 8f4f 	dsb	sy
 800e288:	60fb      	str	r3, [r7, #12]
}
 800e28a:	bf00      	nop
 800e28c:	e7fe      	b.n	800e28c <vTaskStartScheduler+0xb8>
}
 800e28e:	bf00      	nop
 800e290:	3718      	adds	r7, #24
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}
 800e296:	bf00      	nop
 800e298:	0801c83c 	.word	0x0801c83c
 800e29c:	0800e939 	.word	0x0800e939
 800e2a0:	24000d48 	.word	0x24000d48
 800e2a4:	24000850 	.word	0x24000850
 800e2a8:	2400003c 	.word	0x2400003c
 800e2ac:	24000d44 	.word	0x24000d44
 800e2b0:	24000d30 	.word	0x24000d30
 800e2b4:	24000d28 	.word	0x24000d28

0800e2b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e2bc:	4b04      	ldr	r3, [pc, #16]	; (800e2d0 <vTaskSuspendAll+0x18>)
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3301      	adds	r3, #1
 800e2c2:	4a03      	ldr	r2, [pc, #12]	; (800e2d0 <vTaskSuspendAll+0x18>)
 800e2c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e2c6:	bf00      	nop
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ce:	4770      	bx	lr
 800e2d0:	24000d4c 	.word	0x24000d4c

0800e2d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b084      	sub	sp, #16
 800e2d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e2de:	2300      	movs	r3, #0
 800e2e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e2e2:	4b42      	ldr	r3, [pc, #264]	; (800e3ec <xTaskResumeAll+0x118>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d10a      	bne.n	800e300 <xTaskResumeAll+0x2c>
	__asm volatile
 800e2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2ee:	f383 8811 	msr	BASEPRI, r3
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	f3bf 8f4f 	dsb	sy
 800e2fa:	603b      	str	r3, [r7, #0]
}
 800e2fc:	bf00      	nop
 800e2fe:	e7fe      	b.n	800e2fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e300:	f001 fc60 	bl	800fbc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e304:	4b39      	ldr	r3, [pc, #228]	; (800e3ec <xTaskResumeAll+0x118>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	3b01      	subs	r3, #1
 800e30a:	4a38      	ldr	r2, [pc, #224]	; (800e3ec <xTaskResumeAll+0x118>)
 800e30c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e30e:	4b37      	ldr	r3, [pc, #220]	; (800e3ec <xTaskResumeAll+0x118>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d162      	bne.n	800e3dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e316:	4b36      	ldr	r3, [pc, #216]	; (800e3f0 <xTaskResumeAll+0x11c>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d05e      	beq.n	800e3dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e31e:	e02f      	b.n	800e380 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e320:	4b34      	ldr	r3, [pc, #208]	; (800e3f4 <xTaskResumeAll+0x120>)
 800e322:	68db      	ldr	r3, [r3, #12]
 800e324:	68db      	ldr	r3, [r3, #12]
 800e326:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	3318      	adds	r3, #24
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fe fc73 	bl	800cc18 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	3304      	adds	r3, #4
 800e336:	4618      	mov	r0, r3
 800e338:	f7fe fc6e 	bl	800cc18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e340:	4b2d      	ldr	r3, [pc, #180]	; (800e3f8 <xTaskResumeAll+0x124>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	429a      	cmp	r2, r3
 800e346:	d903      	bls.n	800e350 <xTaskResumeAll+0x7c>
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e34c:	4a2a      	ldr	r2, [pc, #168]	; (800e3f8 <xTaskResumeAll+0x124>)
 800e34e:	6013      	str	r3, [r2, #0]
 800e350:	68fb      	ldr	r3, [r7, #12]
 800e352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e354:	4613      	mov	r3, r2
 800e356:	009b      	lsls	r3, r3, #2
 800e358:	4413      	add	r3, r2
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	4a27      	ldr	r2, [pc, #156]	; (800e3fc <xTaskResumeAll+0x128>)
 800e35e:	441a      	add	r2, r3
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	3304      	adds	r3, #4
 800e364:	4619      	mov	r1, r3
 800e366:	4610      	mov	r0, r2
 800e368:	f7fe fbf9 	bl	800cb5e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e370:	4b23      	ldr	r3, [pc, #140]	; (800e400 <xTaskResumeAll+0x12c>)
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e376:	429a      	cmp	r2, r3
 800e378:	d302      	bcc.n	800e380 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e37a:	4b22      	ldr	r3, [pc, #136]	; (800e404 <xTaskResumeAll+0x130>)
 800e37c:	2201      	movs	r2, #1
 800e37e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e380:	4b1c      	ldr	r3, [pc, #112]	; (800e3f4 <xTaskResumeAll+0x120>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d1cb      	bne.n	800e320 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d001      	beq.n	800e392 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e38e:	f000 fb8d 	bl	800eaac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e392:	4b1d      	ldr	r3, [pc, #116]	; (800e408 <xTaskResumeAll+0x134>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d010      	beq.n	800e3c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e39e:	f000 f859 	bl	800e454 <xTaskIncrementTick>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d002      	beq.n	800e3ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e3a8:	4b16      	ldr	r3, [pc, #88]	; (800e404 <xTaskResumeAll+0x130>)
 800e3aa:	2201      	movs	r2, #1
 800e3ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	3b01      	subs	r3, #1
 800e3b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d1f1      	bne.n	800e39e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e3ba:	4b13      	ldr	r3, [pc, #76]	; (800e408 <xTaskResumeAll+0x134>)
 800e3bc:	2200      	movs	r2, #0
 800e3be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e3c0:	4b10      	ldr	r3, [pc, #64]	; (800e404 <xTaskResumeAll+0x130>)
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d009      	beq.n	800e3dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e3cc:	4b0f      	ldr	r3, [pc, #60]	; (800e40c <xTaskResumeAll+0x138>)
 800e3ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3d2:	601a      	str	r2, [r3, #0]
 800e3d4:	f3bf 8f4f 	dsb	sy
 800e3d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e3dc:	f001 fc22 	bl	800fc24 <vPortExitCritical>

	return xAlreadyYielded;
 800e3e0:	68bb      	ldr	r3, [r7, #8]
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	24000d4c 	.word	0x24000d4c
 800e3f0:	24000d24 	.word	0x24000d24
 800e3f4:	24000ce4 	.word	0x24000ce4
 800e3f8:	24000d2c 	.word	0x24000d2c
 800e3fc:	24000854 	.word	0x24000854
 800e400:	24000850 	.word	0x24000850
 800e404:	24000d38 	.word	0x24000d38
 800e408:	24000d34 	.word	0x24000d34
 800e40c:	e000ed04 	.word	0xe000ed04

0800e410 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e416:	4b05      	ldr	r3, [pc, #20]	; (800e42c <xTaskGetTickCount+0x1c>)
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e41c:	687b      	ldr	r3, [r7, #4]
}
 800e41e:	4618      	mov	r0, r3
 800e420:	370c      	adds	r7, #12
 800e422:	46bd      	mov	sp, r7
 800e424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e428:	4770      	bx	lr
 800e42a:	bf00      	nop
 800e42c:	24000d28 	.word	0x24000d28

0800e430 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e436:	f001 fca7 	bl	800fd88 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e43a:	2300      	movs	r3, #0
 800e43c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e43e:	4b04      	ldr	r3, [pc, #16]	; (800e450 <xTaskGetTickCountFromISR+0x20>)
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e444:	683b      	ldr	r3, [r7, #0]
}
 800e446:	4618      	mov	r0, r3
 800e448:	3708      	adds	r7, #8
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	24000d28 	.word	0x24000d28

0800e454 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b086      	sub	sp, #24
 800e458:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e45a:	2300      	movs	r3, #0
 800e45c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e45e:	4b4f      	ldr	r3, [pc, #316]	; (800e59c <xTaskIncrementTick+0x148>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	2b00      	cmp	r3, #0
 800e464:	f040 808f 	bne.w	800e586 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e468:	4b4d      	ldr	r3, [pc, #308]	; (800e5a0 <xTaskIncrementTick+0x14c>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	3301      	adds	r3, #1
 800e46e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e470:	4a4b      	ldr	r2, [pc, #300]	; (800e5a0 <xTaskIncrementTick+0x14c>)
 800e472:	693b      	ldr	r3, [r7, #16]
 800e474:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d120      	bne.n	800e4be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e47c:	4b49      	ldr	r3, [pc, #292]	; (800e5a4 <xTaskIncrementTick+0x150>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d00a      	beq.n	800e49c <xTaskIncrementTick+0x48>
	__asm volatile
 800e486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e48a:	f383 8811 	msr	BASEPRI, r3
 800e48e:	f3bf 8f6f 	isb	sy
 800e492:	f3bf 8f4f 	dsb	sy
 800e496:	603b      	str	r3, [r7, #0]
}
 800e498:	bf00      	nop
 800e49a:	e7fe      	b.n	800e49a <xTaskIncrementTick+0x46>
 800e49c:	4b41      	ldr	r3, [pc, #260]	; (800e5a4 <xTaskIncrementTick+0x150>)
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	60fb      	str	r3, [r7, #12]
 800e4a2:	4b41      	ldr	r3, [pc, #260]	; (800e5a8 <xTaskIncrementTick+0x154>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	4a3f      	ldr	r2, [pc, #252]	; (800e5a4 <xTaskIncrementTick+0x150>)
 800e4a8:	6013      	str	r3, [r2, #0]
 800e4aa:	4a3f      	ldr	r2, [pc, #252]	; (800e5a8 <xTaskIncrementTick+0x154>)
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	6013      	str	r3, [r2, #0]
 800e4b0:	4b3e      	ldr	r3, [pc, #248]	; (800e5ac <xTaskIncrementTick+0x158>)
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	4a3d      	ldr	r2, [pc, #244]	; (800e5ac <xTaskIncrementTick+0x158>)
 800e4b8:	6013      	str	r3, [r2, #0]
 800e4ba:	f000 faf7 	bl	800eaac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e4be:	4b3c      	ldr	r3, [pc, #240]	; (800e5b0 <xTaskIncrementTick+0x15c>)
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	693a      	ldr	r2, [r7, #16]
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d349      	bcc.n	800e55c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e4c8:	4b36      	ldr	r3, [pc, #216]	; (800e5a4 <xTaskIncrementTick+0x150>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d104      	bne.n	800e4dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4d2:	4b37      	ldr	r3, [pc, #220]	; (800e5b0 <xTaskIncrementTick+0x15c>)
 800e4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4d8:	601a      	str	r2, [r3, #0]
					break;
 800e4da:	e03f      	b.n	800e55c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4dc:	4b31      	ldr	r3, [pc, #196]	; (800e5a4 <xTaskIncrementTick+0x150>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	68db      	ldr	r3, [r3, #12]
 800e4e2:	68db      	ldr	r3, [r3, #12]
 800e4e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	685b      	ldr	r3, [r3, #4]
 800e4ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e4ec:	693a      	ldr	r2, [r7, #16]
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	429a      	cmp	r2, r3
 800e4f2:	d203      	bcs.n	800e4fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e4f4:	4a2e      	ldr	r2, [pc, #184]	; (800e5b0 <xTaskIncrementTick+0x15c>)
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e4fa:	e02f      	b.n	800e55c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	3304      	adds	r3, #4
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe fb89 	bl	800cc18 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e506:	68bb      	ldr	r3, [r7, #8]
 800e508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d004      	beq.n	800e518 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e50e:	68bb      	ldr	r3, [r7, #8]
 800e510:	3318      	adds	r3, #24
 800e512:	4618      	mov	r0, r3
 800e514:	f7fe fb80 	bl	800cc18 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e518:	68bb      	ldr	r3, [r7, #8]
 800e51a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e51c:	4b25      	ldr	r3, [pc, #148]	; (800e5b4 <xTaskIncrementTick+0x160>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	429a      	cmp	r2, r3
 800e522:	d903      	bls.n	800e52c <xTaskIncrementTick+0xd8>
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e528:	4a22      	ldr	r2, [pc, #136]	; (800e5b4 <xTaskIncrementTick+0x160>)
 800e52a:	6013      	str	r3, [r2, #0]
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e530:	4613      	mov	r3, r2
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	4413      	add	r3, r2
 800e536:	009b      	lsls	r3, r3, #2
 800e538:	4a1f      	ldr	r2, [pc, #124]	; (800e5b8 <xTaskIncrementTick+0x164>)
 800e53a:	441a      	add	r2, r3
 800e53c:	68bb      	ldr	r3, [r7, #8]
 800e53e:	3304      	adds	r3, #4
 800e540:	4619      	mov	r1, r3
 800e542:	4610      	mov	r0, r2
 800e544:	f7fe fb0b 	bl	800cb5e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e54c:	4b1b      	ldr	r3, [pc, #108]	; (800e5bc <xTaskIncrementTick+0x168>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e552:	429a      	cmp	r2, r3
 800e554:	d3b8      	bcc.n	800e4c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e556:	2301      	movs	r3, #1
 800e558:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e55a:	e7b5      	b.n	800e4c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e55c:	4b17      	ldr	r3, [pc, #92]	; (800e5bc <xTaskIncrementTick+0x168>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e562:	4915      	ldr	r1, [pc, #84]	; (800e5b8 <xTaskIncrementTick+0x164>)
 800e564:	4613      	mov	r3, r2
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	4413      	add	r3, r2
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	440b      	add	r3, r1
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	2b01      	cmp	r3, #1
 800e572:	d901      	bls.n	800e578 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e574:	2301      	movs	r3, #1
 800e576:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e578:	4b11      	ldr	r3, [pc, #68]	; (800e5c0 <xTaskIncrementTick+0x16c>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d007      	beq.n	800e590 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e580:	2301      	movs	r3, #1
 800e582:	617b      	str	r3, [r7, #20]
 800e584:	e004      	b.n	800e590 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e586:	4b0f      	ldr	r3, [pc, #60]	; (800e5c4 <xTaskIncrementTick+0x170>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3301      	adds	r3, #1
 800e58c:	4a0d      	ldr	r2, [pc, #52]	; (800e5c4 <xTaskIncrementTick+0x170>)
 800e58e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e590:	697b      	ldr	r3, [r7, #20]
}
 800e592:	4618      	mov	r0, r3
 800e594:	3718      	adds	r7, #24
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}
 800e59a:	bf00      	nop
 800e59c:	24000d4c 	.word	0x24000d4c
 800e5a0:	24000d28 	.word	0x24000d28
 800e5a4:	24000cdc 	.word	0x24000cdc
 800e5a8:	24000ce0 	.word	0x24000ce0
 800e5ac:	24000d3c 	.word	0x24000d3c
 800e5b0:	24000d44 	.word	0x24000d44
 800e5b4:	24000d2c 	.word	0x24000d2c
 800e5b8:	24000854 	.word	0x24000854
 800e5bc:	24000850 	.word	0x24000850
 800e5c0:	24000d38 	.word	0x24000d38
 800e5c4:	24000d34 	.word	0x24000d34

0800e5c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b084      	sub	sp, #16
 800e5cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e5ce:	4b36      	ldr	r3, [pc, #216]	; (800e6a8 <vTaskSwitchContext+0xe0>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d003      	beq.n	800e5de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e5d6:	4b35      	ldr	r3, [pc, #212]	; (800e6ac <vTaskSwitchContext+0xe4>)
 800e5d8:	2201      	movs	r2, #1
 800e5da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e5dc:	e05f      	b.n	800e69e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 800e5de:	4b33      	ldr	r3, [pc, #204]	; (800e6ac <vTaskSwitchContext+0xe4>)
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800e5e4:	f7f2 fd83 	bl	80010ee <getRunTimeCounterValue>
 800e5e8:	4603      	mov	r3, r0
 800e5ea:	4a31      	ldr	r2, [pc, #196]	; (800e6b0 <vTaskSwitchContext+0xe8>)
 800e5ec:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800e5ee:	4b30      	ldr	r3, [pc, #192]	; (800e6b0 <vTaskSwitchContext+0xe8>)
 800e5f0:	681a      	ldr	r2, [r3, #0]
 800e5f2:	4b30      	ldr	r3, [pc, #192]	; (800e6b4 <vTaskSwitchContext+0xec>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d909      	bls.n	800e60e <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800e5fa:	4b2f      	ldr	r3, [pc, #188]	; (800e6b8 <vTaskSwitchContext+0xf0>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800e600:	4a2b      	ldr	r2, [pc, #172]	; (800e6b0 <vTaskSwitchContext+0xe8>)
 800e602:	6810      	ldr	r0, [r2, #0]
 800e604:	4a2b      	ldr	r2, [pc, #172]	; (800e6b4 <vTaskSwitchContext+0xec>)
 800e606:	6812      	ldr	r2, [r2, #0]
 800e608:	1a82      	subs	r2, r0, r2
 800e60a:	440a      	add	r2, r1
 800e60c:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800e60e:	4b28      	ldr	r3, [pc, #160]	; (800e6b0 <vTaskSwitchContext+0xe8>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4a28      	ldr	r2, [pc, #160]	; (800e6b4 <vTaskSwitchContext+0xec>)
 800e614:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e616:	4b29      	ldr	r3, [pc, #164]	; (800e6bc <vTaskSwitchContext+0xf4>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	60fb      	str	r3, [r7, #12]
 800e61c:	e010      	b.n	800e640 <vTaskSwitchContext+0x78>
 800e61e:	68fb      	ldr	r3, [r7, #12]
 800e620:	2b00      	cmp	r3, #0
 800e622:	d10a      	bne.n	800e63a <vTaskSwitchContext+0x72>
	__asm volatile
 800e624:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e628:	f383 8811 	msr	BASEPRI, r3
 800e62c:	f3bf 8f6f 	isb	sy
 800e630:	f3bf 8f4f 	dsb	sy
 800e634:	607b      	str	r3, [r7, #4]
}
 800e636:	bf00      	nop
 800e638:	e7fe      	b.n	800e638 <vTaskSwitchContext+0x70>
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	3b01      	subs	r3, #1
 800e63e:	60fb      	str	r3, [r7, #12]
 800e640:	491f      	ldr	r1, [pc, #124]	; (800e6c0 <vTaskSwitchContext+0xf8>)
 800e642:	68fa      	ldr	r2, [r7, #12]
 800e644:	4613      	mov	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	4413      	add	r3, r2
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	440b      	add	r3, r1
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	2b00      	cmp	r3, #0
 800e652:	d0e4      	beq.n	800e61e <vTaskSwitchContext+0x56>
 800e654:	68fa      	ldr	r2, [r7, #12]
 800e656:	4613      	mov	r3, r2
 800e658:	009b      	lsls	r3, r3, #2
 800e65a:	4413      	add	r3, r2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4a18      	ldr	r2, [pc, #96]	; (800e6c0 <vTaskSwitchContext+0xf8>)
 800e660:	4413      	add	r3, r2
 800e662:	60bb      	str	r3, [r7, #8]
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	685b      	ldr	r3, [r3, #4]
 800e668:	685a      	ldr	r2, [r3, #4]
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	605a      	str	r2, [r3, #4]
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	685a      	ldr	r2, [r3, #4]
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	3308      	adds	r3, #8
 800e676:	429a      	cmp	r2, r3
 800e678:	d104      	bne.n	800e684 <vTaskSwitchContext+0xbc>
 800e67a:	68bb      	ldr	r3, [r7, #8]
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	685a      	ldr	r2, [r3, #4]
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	605a      	str	r2, [r3, #4]
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	685b      	ldr	r3, [r3, #4]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	4a0b      	ldr	r2, [pc, #44]	; (800e6b8 <vTaskSwitchContext+0xf0>)
 800e68c:	6013      	str	r3, [r2, #0]
 800e68e:	4a0b      	ldr	r2, [pc, #44]	; (800e6bc <vTaskSwitchContext+0xf4>)
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e694:	4b08      	ldr	r3, [pc, #32]	; (800e6b8 <vTaskSwitchContext+0xf0>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	3358      	adds	r3, #88	; 0x58
 800e69a:	4a0a      	ldr	r2, [pc, #40]	; (800e6c4 <vTaskSwitchContext+0xfc>)
 800e69c:	6013      	str	r3, [r2, #0]
}
 800e69e:	bf00      	nop
 800e6a0:	3710      	adds	r7, #16
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	bd80      	pop	{r7, pc}
 800e6a6:	bf00      	nop
 800e6a8:	24000d4c 	.word	0x24000d4c
 800e6ac:	24000d38 	.word	0x24000d38
 800e6b0:	24000d54 	.word	0x24000d54
 800e6b4:	24000d50 	.word	0x24000d50
 800e6b8:	24000850 	.word	0x24000850
 800e6bc:	24000d2c 	.word	0x24000d2c
 800e6c0:	24000854 	.word	0x24000854
 800e6c4:	2400003c 	.word	0x2400003c

0800e6c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d10a      	bne.n	800e6ee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6dc:	f383 8811 	msr	BASEPRI, r3
 800e6e0:	f3bf 8f6f 	isb	sy
 800e6e4:	f3bf 8f4f 	dsb	sy
 800e6e8:	60fb      	str	r3, [r7, #12]
}
 800e6ea:	bf00      	nop
 800e6ec:	e7fe      	b.n	800e6ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e6ee:	4b07      	ldr	r3, [pc, #28]	; (800e70c <vTaskPlaceOnEventList+0x44>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	3318      	adds	r3, #24
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f7fe fa55 	bl	800cba6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	6838      	ldr	r0, [r7, #0]
 800e700:	f000 fd90 	bl	800f224 <prvAddCurrentTaskToDelayedList>
}
 800e704:	bf00      	nop
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	24000850 	.word	0x24000850

0800e710 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10a      	bne.n	800e738 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e726:	f383 8811 	msr	BASEPRI, r3
 800e72a:	f3bf 8f6f 	isb	sy
 800e72e:	f3bf 8f4f 	dsb	sy
 800e732:	617b      	str	r3, [r7, #20]
}
 800e734:	bf00      	nop
 800e736:	e7fe      	b.n	800e736 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e738:	4b0a      	ldr	r3, [pc, #40]	; (800e764 <vTaskPlaceOnEventListRestricted+0x54>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	3318      	adds	r3, #24
 800e73e:	4619      	mov	r1, r3
 800e740:	68f8      	ldr	r0, [r7, #12]
 800e742:	f7fe fa0c 	bl	800cb5e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d002      	beq.n	800e752 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e74c:	f04f 33ff 	mov.w	r3, #4294967295
 800e750:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e752:	6879      	ldr	r1, [r7, #4]
 800e754:	68b8      	ldr	r0, [r7, #8]
 800e756:	f000 fd65 	bl	800f224 <prvAddCurrentTaskToDelayedList>
	}
 800e75a:	bf00      	nop
 800e75c:	3718      	adds	r7, #24
 800e75e:	46bd      	mov	sp, r7
 800e760:	bd80      	pop	{r7, pc}
 800e762:	bf00      	nop
 800e764:	24000850 	.word	0x24000850

0800e768 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e768:	b580      	push	{r7, lr}
 800e76a:	b086      	sub	sp, #24
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	68db      	ldr	r3, [r3, #12]
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e778:	693b      	ldr	r3, [r7, #16]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d10a      	bne.n	800e794 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	60fb      	str	r3, [r7, #12]
}
 800e790:	bf00      	nop
 800e792:	e7fe      	b.n	800e792 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e794:	693b      	ldr	r3, [r7, #16]
 800e796:	3318      	adds	r3, #24
 800e798:	4618      	mov	r0, r3
 800e79a:	f7fe fa3d 	bl	800cc18 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e79e:	4b1e      	ldr	r3, [pc, #120]	; (800e818 <xTaskRemoveFromEventList+0xb0>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d11d      	bne.n	800e7e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e7a6:	693b      	ldr	r3, [r7, #16]
 800e7a8:	3304      	adds	r3, #4
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7fe fa34 	bl	800cc18 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7b4:	4b19      	ldr	r3, [pc, #100]	; (800e81c <xTaskRemoveFromEventList+0xb4>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	429a      	cmp	r2, r3
 800e7ba:	d903      	bls.n	800e7c4 <xTaskRemoveFromEventList+0x5c>
 800e7bc:	693b      	ldr	r3, [r7, #16]
 800e7be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c0:	4a16      	ldr	r2, [pc, #88]	; (800e81c <xTaskRemoveFromEventList+0xb4>)
 800e7c2:	6013      	str	r3, [r2, #0]
 800e7c4:	693b      	ldr	r3, [r7, #16]
 800e7c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c8:	4613      	mov	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	4413      	add	r3, r2
 800e7ce:	009b      	lsls	r3, r3, #2
 800e7d0:	4a13      	ldr	r2, [pc, #76]	; (800e820 <xTaskRemoveFromEventList+0xb8>)
 800e7d2:	441a      	add	r2, r3
 800e7d4:	693b      	ldr	r3, [r7, #16]
 800e7d6:	3304      	adds	r3, #4
 800e7d8:	4619      	mov	r1, r3
 800e7da:	4610      	mov	r0, r2
 800e7dc:	f7fe f9bf 	bl	800cb5e <vListInsertEnd>
 800e7e0:	e005      	b.n	800e7ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e7e2:	693b      	ldr	r3, [r7, #16]
 800e7e4:	3318      	adds	r3, #24
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	480e      	ldr	r0, [pc, #56]	; (800e824 <xTaskRemoveFromEventList+0xbc>)
 800e7ea:	f7fe f9b8 	bl	800cb5e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e7ee:	693b      	ldr	r3, [r7, #16]
 800e7f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7f2:	4b0d      	ldr	r3, [pc, #52]	; (800e828 <xTaskRemoveFromEventList+0xc0>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d905      	bls.n	800e808 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e7fc:	2301      	movs	r3, #1
 800e7fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e800:	4b0a      	ldr	r3, [pc, #40]	; (800e82c <xTaskRemoveFromEventList+0xc4>)
 800e802:	2201      	movs	r2, #1
 800e804:	601a      	str	r2, [r3, #0]
 800e806:	e001      	b.n	800e80c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e808:	2300      	movs	r3, #0
 800e80a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e80c:	697b      	ldr	r3, [r7, #20]
}
 800e80e:	4618      	mov	r0, r3
 800e810:	3718      	adds	r7, #24
 800e812:	46bd      	mov	sp, r7
 800e814:	bd80      	pop	{r7, pc}
 800e816:	bf00      	nop
 800e818:	24000d4c 	.word	0x24000d4c
 800e81c:	24000d2c 	.word	0x24000d2c
 800e820:	24000854 	.word	0x24000854
 800e824:	24000ce4 	.word	0x24000ce4
 800e828:	24000850 	.word	0x24000850
 800e82c:	24000d38 	.word	0x24000d38

0800e830 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e830:	b480      	push	{r7}
 800e832:	b083      	sub	sp, #12
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e838:	4b06      	ldr	r3, [pc, #24]	; (800e854 <vTaskInternalSetTimeOutState+0x24>)
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e840:	4b05      	ldr	r3, [pc, #20]	; (800e858 <vTaskInternalSetTimeOutState+0x28>)
 800e842:	681a      	ldr	r2, [r3, #0]
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	605a      	str	r2, [r3, #4]
}
 800e848:	bf00      	nop
 800e84a:	370c      	adds	r7, #12
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr
 800e854:	24000d3c 	.word	0x24000d3c
 800e858:	24000d28 	.word	0x24000d28

0800e85c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b088      	sub	sp, #32
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d10a      	bne.n	800e882 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	613b      	str	r3, [r7, #16]
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e882:	683b      	ldr	r3, [r7, #0]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d10a      	bne.n	800e89e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800e888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88c:	f383 8811 	msr	BASEPRI, r3
 800e890:	f3bf 8f6f 	isb	sy
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	60fb      	str	r3, [r7, #12]
}
 800e89a:	bf00      	nop
 800e89c:	e7fe      	b.n	800e89c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800e89e:	f001 f991 	bl	800fbc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e8a2:	4b1d      	ldr	r3, [pc, #116]	; (800e918 <xTaskCheckForTimeOut+0xbc>)
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	685b      	ldr	r3, [r3, #4]
 800e8ac:	69ba      	ldr	r2, [r7, #24]
 800e8ae:	1ad3      	subs	r3, r2, r3
 800e8b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e8b2:	683b      	ldr	r3, [r7, #0]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8ba:	d102      	bne.n	800e8c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	61fb      	str	r3, [r7, #28]
 800e8c0:	e023      	b.n	800e90a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	4b15      	ldr	r3, [pc, #84]	; (800e91c <xTaskCheckForTimeOut+0xc0>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d007      	beq.n	800e8de <xTaskCheckForTimeOut+0x82>
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	69ba      	ldr	r2, [r7, #24]
 800e8d4:	429a      	cmp	r2, r3
 800e8d6:	d302      	bcc.n	800e8de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e8d8:	2301      	movs	r3, #1
 800e8da:	61fb      	str	r3, [r7, #28]
 800e8dc:	e015      	b.n	800e90a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	697a      	ldr	r2, [r7, #20]
 800e8e4:	429a      	cmp	r2, r3
 800e8e6:	d20b      	bcs.n	800e900 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e8e8:	683b      	ldr	r3, [r7, #0]
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	697b      	ldr	r3, [r7, #20]
 800e8ee:	1ad2      	subs	r2, r2, r3
 800e8f0:	683b      	ldr	r3, [r7, #0]
 800e8f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f7ff ff9b 	bl	800e830 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	61fb      	str	r3, [r7, #28]
 800e8fe:	e004      	b.n	800e90a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800e900:	683b      	ldr	r3, [r7, #0]
 800e902:	2200      	movs	r2, #0
 800e904:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e906:	2301      	movs	r3, #1
 800e908:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e90a:	f001 f98b 	bl	800fc24 <vPortExitCritical>

	return xReturn;
 800e90e:	69fb      	ldr	r3, [r7, #28]
}
 800e910:	4618      	mov	r0, r3
 800e912:	3720      	adds	r7, #32
 800e914:	46bd      	mov	sp, r7
 800e916:	bd80      	pop	{r7, pc}
 800e918:	24000d28 	.word	0x24000d28
 800e91c:	24000d3c 	.word	0x24000d3c

0800e920 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e920:	b480      	push	{r7}
 800e922:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e924:	4b03      	ldr	r3, [pc, #12]	; (800e934 <vTaskMissedYield+0x14>)
 800e926:	2201      	movs	r2, #1
 800e928:	601a      	str	r2, [r3, #0]
}
 800e92a:	bf00      	nop
 800e92c:	46bd      	mov	sp, r7
 800e92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e932:	4770      	bx	lr
 800e934:	24000d38 	.word	0x24000d38

0800e938 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	b082      	sub	sp, #8
 800e93c:	af00      	add	r7, sp, #0
 800e93e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e940:	f000 f852 	bl	800e9e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e944:	4b06      	ldr	r3, [pc, #24]	; (800e960 <prvIdleTask+0x28>)
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d9f9      	bls.n	800e940 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e94c:	4b05      	ldr	r3, [pc, #20]	; (800e964 <prvIdleTask+0x2c>)
 800e94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	f3bf 8f4f 	dsb	sy
 800e958:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e95c:	e7f0      	b.n	800e940 <prvIdleTask+0x8>
 800e95e:	bf00      	nop
 800e960:	24000854 	.word	0x24000854
 800e964:	e000ed04 	.word	0xe000ed04

0800e968 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b082      	sub	sp, #8
 800e96c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e96e:	2300      	movs	r3, #0
 800e970:	607b      	str	r3, [r7, #4]
 800e972:	e00c      	b.n	800e98e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e974:	687a      	ldr	r2, [r7, #4]
 800e976:	4613      	mov	r3, r2
 800e978:	009b      	lsls	r3, r3, #2
 800e97a:	4413      	add	r3, r2
 800e97c:	009b      	lsls	r3, r3, #2
 800e97e:	4a12      	ldr	r2, [pc, #72]	; (800e9c8 <prvInitialiseTaskLists+0x60>)
 800e980:	4413      	add	r3, r2
 800e982:	4618      	mov	r0, r3
 800e984:	f7fe f8be 	bl	800cb04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	3301      	adds	r3, #1
 800e98c:	607b      	str	r3, [r7, #4]
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	2b37      	cmp	r3, #55	; 0x37
 800e992:	d9ef      	bls.n	800e974 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e994:	480d      	ldr	r0, [pc, #52]	; (800e9cc <prvInitialiseTaskLists+0x64>)
 800e996:	f7fe f8b5 	bl	800cb04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e99a:	480d      	ldr	r0, [pc, #52]	; (800e9d0 <prvInitialiseTaskLists+0x68>)
 800e99c:	f7fe f8b2 	bl	800cb04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e9a0:	480c      	ldr	r0, [pc, #48]	; (800e9d4 <prvInitialiseTaskLists+0x6c>)
 800e9a2:	f7fe f8af 	bl	800cb04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e9a6:	480c      	ldr	r0, [pc, #48]	; (800e9d8 <prvInitialiseTaskLists+0x70>)
 800e9a8:	f7fe f8ac 	bl	800cb04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e9ac:	480b      	ldr	r0, [pc, #44]	; (800e9dc <prvInitialiseTaskLists+0x74>)
 800e9ae:	f7fe f8a9 	bl	800cb04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e9b2:	4b0b      	ldr	r3, [pc, #44]	; (800e9e0 <prvInitialiseTaskLists+0x78>)
 800e9b4:	4a05      	ldr	r2, [pc, #20]	; (800e9cc <prvInitialiseTaskLists+0x64>)
 800e9b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e9b8:	4b0a      	ldr	r3, [pc, #40]	; (800e9e4 <prvInitialiseTaskLists+0x7c>)
 800e9ba:	4a05      	ldr	r2, [pc, #20]	; (800e9d0 <prvInitialiseTaskLists+0x68>)
 800e9bc:	601a      	str	r2, [r3, #0]
}
 800e9be:	bf00      	nop
 800e9c0:	3708      	adds	r7, #8
 800e9c2:	46bd      	mov	sp, r7
 800e9c4:	bd80      	pop	{r7, pc}
 800e9c6:	bf00      	nop
 800e9c8:	24000854 	.word	0x24000854
 800e9cc:	24000cb4 	.word	0x24000cb4
 800e9d0:	24000cc8 	.word	0x24000cc8
 800e9d4:	24000ce4 	.word	0x24000ce4
 800e9d8:	24000cf8 	.word	0x24000cf8
 800e9dc:	24000d10 	.word	0x24000d10
 800e9e0:	24000cdc 	.word	0x24000cdc
 800e9e4:	24000ce0 	.word	0x24000ce0

0800e9e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e9ee:	e019      	b.n	800ea24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e9f0:	f001 f8e8 	bl	800fbc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9f4:	4b10      	ldr	r3, [pc, #64]	; (800ea38 <prvCheckTasksWaitingTermination+0x50>)
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	68db      	ldr	r3, [r3, #12]
 800e9fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	3304      	adds	r3, #4
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7fe f909 	bl	800cc18 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ea06:	4b0d      	ldr	r3, [pc, #52]	; (800ea3c <prvCheckTasksWaitingTermination+0x54>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	3b01      	subs	r3, #1
 800ea0c:	4a0b      	ldr	r2, [pc, #44]	; (800ea3c <prvCheckTasksWaitingTermination+0x54>)
 800ea0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ea10:	4b0b      	ldr	r3, [pc, #44]	; (800ea40 <prvCheckTasksWaitingTermination+0x58>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	4a0a      	ldr	r2, [pc, #40]	; (800ea40 <prvCheckTasksWaitingTermination+0x58>)
 800ea18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ea1a:	f001 f903 	bl	800fc24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 f810 	bl	800ea44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ea24:	4b06      	ldr	r3, [pc, #24]	; (800ea40 <prvCheckTasksWaitingTermination+0x58>)
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d1e1      	bne.n	800e9f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ea2c:	bf00      	nop
 800ea2e:	bf00      	nop
 800ea30:	3708      	adds	r7, #8
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}
 800ea36:	bf00      	nop
 800ea38:	24000cf8 	.word	0x24000cf8
 800ea3c:	24000d24 	.word	0x24000d24
 800ea40:	24000d0c 	.word	0x24000d0c

0800ea44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3358      	adds	r3, #88	; 0x58
 800ea50:	4618      	mov	r0, r3
 800ea52:	f00c fea9 	bl	801b7a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d108      	bne.n	800ea72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea64:	4618      	mov	r0, r3
 800ea66:	f001 fa9b 	bl	800ffa0 <vPortFree>
				vPortFree( pxTCB );
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f001 fa98 	bl	800ffa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ea70:	e018      	b.n	800eaa4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ea78:	2b01      	cmp	r3, #1
 800ea7a:	d103      	bne.n	800ea84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f001 fa8f 	bl	800ffa0 <vPortFree>
	}
 800ea82:	e00f      	b.n	800eaa4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800ea8a:	2b02      	cmp	r3, #2
 800ea8c:	d00a      	beq.n	800eaa4 <prvDeleteTCB+0x60>
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	60fb      	str	r3, [r7, #12]
}
 800eaa0:	bf00      	nop
 800eaa2:	e7fe      	b.n	800eaa2 <prvDeleteTCB+0x5e>
	}
 800eaa4:	bf00      	nop
 800eaa6:	3710      	adds	r7, #16
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bd80      	pop	{r7, pc}

0800eaac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eab2:	4b0c      	ldr	r3, [pc, #48]	; (800eae4 <prvResetNextTaskUnblockTime+0x38>)
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d104      	bne.n	800eac6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eabc:	4b0a      	ldr	r3, [pc, #40]	; (800eae8 <prvResetNextTaskUnblockTime+0x3c>)
 800eabe:	f04f 32ff 	mov.w	r2, #4294967295
 800eac2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eac4:	e008      	b.n	800ead8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eac6:	4b07      	ldr	r3, [pc, #28]	; (800eae4 <prvResetNextTaskUnblockTime+0x38>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	68db      	ldr	r3, [r3, #12]
 800eace:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	685b      	ldr	r3, [r3, #4]
 800ead4:	4a04      	ldr	r2, [pc, #16]	; (800eae8 <prvResetNextTaskUnblockTime+0x3c>)
 800ead6:	6013      	str	r3, [r2, #0]
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	24000cdc 	.word	0x24000cdc
 800eae8:	24000d44 	.word	0x24000d44

0800eaec <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800eaec:	b480      	push	{r7}
 800eaee:	b083      	sub	sp, #12
 800eaf0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800eaf2:	4b05      	ldr	r3, [pc, #20]	; (800eb08 <xTaskGetCurrentTaskHandle+0x1c>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800eaf8:	687b      	ldr	r3, [r7, #4]
	}
 800eafa:	4618      	mov	r0, r3
 800eafc:	370c      	adds	r7, #12
 800eafe:	46bd      	mov	sp, r7
 800eb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb04:	4770      	bx	lr
 800eb06:	bf00      	nop
 800eb08:	24000850 	.word	0x24000850

0800eb0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800eb12:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <xTaskGetSchedulerState+0x34>)
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d102      	bne.n	800eb20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800eb1a:	2301      	movs	r3, #1
 800eb1c:	607b      	str	r3, [r7, #4]
 800eb1e:	e008      	b.n	800eb32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eb20:	4b08      	ldr	r3, [pc, #32]	; (800eb44 <xTaskGetSchedulerState+0x38>)
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d102      	bne.n	800eb2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800eb28:	2302      	movs	r3, #2
 800eb2a:	607b      	str	r3, [r7, #4]
 800eb2c:	e001      	b.n	800eb32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800eb32:	687b      	ldr	r3, [r7, #4]
	}
 800eb34:	4618      	mov	r0, r3
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr
 800eb40:	24000d30 	.word	0x24000d30
 800eb44:	24000d4c 	.word	0x24000d4c

0800eb48 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800eb54:	2300      	movs	r3, #0
 800eb56:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d051      	beq.n	800ec02 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800eb5e:	68bb      	ldr	r3, [r7, #8]
 800eb60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb62:	4b2a      	ldr	r3, [pc, #168]	; (800ec0c <xTaskPriorityInherit+0xc4>)
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb68:	429a      	cmp	r2, r3
 800eb6a:	d241      	bcs.n	800ebf0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	699b      	ldr	r3, [r3, #24]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	db06      	blt.n	800eb82 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eb74:	4b25      	ldr	r3, [pc, #148]	; (800ec0c <xTaskPriorityInherit+0xc4>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eb82:	68bb      	ldr	r3, [r7, #8]
 800eb84:	6959      	ldr	r1, [r3, #20]
 800eb86:	68bb      	ldr	r3, [r7, #8]
 800eb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eb8a:	4613      	mov	r3, r2
 800eb8c:	009b      	lsls	r3, r3, #2
 800eb8e:	4413      	add	r3, r2
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	4a1f      	ldr	r2, [pc, #124]	; (800ec10 <xTaskPriorityInherit+0xc8>)
 800eb94:	4413      	add	r3, r2
 800eb96:	4299      	cmp	r1, r3
 800eb98:	d122      	bne.n	800ebe0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	3304      	adds	r3, #4
 800eb9e:	4618      	mov	r0, r3
 800eba0:	f7fe f83a 	bl	800cc18 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eba4:	4b19      	ldr	r3, [pc, #100]	; (800ec0c <xTaskPriorityInherit+0xc4>)
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebb2:	4b18      	ldr	r3, [pc, #96]	; (800ec14 <xTaskPriorityInherit+0xcc>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	d903      	bls.n	800ebc2 <xTaskPriorityInherit+0x7a>
 800ebba:	68bb      	ldr	r3, [r7, #8]
 800ebbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebbe:	4a15      	ldr	r2, [pc, #84]	; (800ec14 <xTaskPriorityInherit+0xcc>)
 800ebc0:	6013      	str	r3, [r2, #0]
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebc6:	4613      	mov	r3, r2
 800ebc8:	009b      	lsls	r3, r3, #2
 800ebca:	4413      	add	r3, r2
 800ebcc:	009b      	lsls	r3, r3, #2
 800ebce:	4a10      	ldr	r2, [pc, #64]	; (800ec10 <xTaskPriorityInherit+0xc8>)
 800ebd0:	441a      	add	r2, r3
 800ebd2:	68bb      	ldr	r3, [r7, #8]
 800ebd4:	3304      	adds	r3, #4
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	4610      	mov	r0, r2
 800ebda:	f7fd ffc0 	bl	800cb5e <vListInsertEnd>
 800ebde:	e004      	b.n	800ebea <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ebe0:	4b0a      	ldr	r3, [pc, #40]	; (800ec0c <xTaskPriorityInherit+0xc4>)
 800ebe2:	681b      	ldr	r3, [r3, #0]
 800ebe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ebea:	2301      	movs	r3, #1
 800ebec:	60fb      	str	r3, [r7, #12]
 800ebee:	e008      	b.n	800ec02 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ebf4:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <xTaskPriorityInherit+0xc4>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ebfa:	429a      	cmp	r2, r3
 800ebfc:	d201      	bcs.n	800ec02 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ec02:	68fb      	ldr	r3, [r7, #12]
	}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}
 800ec0c:	24000850 	.word	0x24000850
 800ec10:	24000854 	.word	0x24000854
 800ec14:	24000d2c 	.word	0x24000d2c

0800ec18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b086      	sub	sp, #24
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ec24:	2300      	movs	r3, #0
 800ec26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d056      	beq.n	800ecdc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ec2e:	4b2e      	ldr	r3, [pc, #184]	; (800ece8 <xTaskPriorityDisinherit+0xd0>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	693a      	ldr	r2, [r7, #16]
 800ec34:	429a      	cmp	r2, r3
 800ec36:	d00a      	beq.n	800ec4e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ec38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3c:	f383 8811 	msr	BASEPRI, r3
 800ec40:	f3bf 8f6f 	isb	sy
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	60fb      	str	r3, [r7, #12]
}
 800ec4a:	bf00      	nop
 800ec4c:	e7fe      	b.n	800ec4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ec4e:	693b      	ldr	r3, [r7, #16]
 800ec50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10a      	bne.n	800ec6c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ec56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5a:	f383 8811 	msr	BASEPRI, r3
 800ec5e:	f3bf 8f6f 	isb	sy
 800ec62:	f3bf 8f4f 	dsb	sy
 800ec66:	60bb      	str	r3, [r7, #8]
}
 800ec68:	bf00      	nop
 800ec6a:	e7fe      	b.n	800ec6a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec70:	1e5a      	subs	r2, r3, #1
 800ec72:	693b      	ldr	r3, [r7, #16]
 800ec74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ec76:	693b      	ldr	r3, [r7, #16]
 800ec78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ec7a:	693b      	ldr	r3, [r7, #16]
 800ec7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d02c      	beq.n	800ecdc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ec82:	693b      	ldr	r3, [r7, #16]
 800ec84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d128      	bne.n	800ecdc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	3304      	adds	r3, #4
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7fd ffc2 	bl	800cc18 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ec94:	693b      	ldr	r3, [r7, #16]
 800ec96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ec98:	693b      	ldr	r3, [r7, #16]
 800ec9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eca0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800eca8:	693b      	ldr	r3, [r7, #16]
 800ecaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecac:	4b0f      	ldr	r3, [pc, #60]	; (800ecec <xTaskPriorityDisinherit+0xd4>)
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d903      	bls.n	800ecbc <xTaskPriorityDisinherit+0xa4>
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecb8:	4a0c      	ldr	r2, [pc, #48]	; (800ecec <xTaskPriorityDisinherit+0xd4>)
 800ecba:	6013      	str	r3, [r2, #0]
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	009b      	lsls	r3, r3, #2
 800ecc4:	4413      	add	r3, r2
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	4a09      	ldr	r2, [pc, #36]	; (800ecf0 <xTaskPriorityDisinherit+0xd8>)
 800ecca:	441a      	add	r2, r3
 800eccc:	693b      	ldr	r3, [r7, #16]
 800ecce:	3304      	adds	r3, #4
 800ecd0:	4619      	mov	r1, r3
 800ecd2:	4610      	mov	r0, r2
 800ecd4:	f7fd ff43 	bl	800cb5e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ecdc:	697b      	ldr	r3, [r7, #20]
	}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3718      	adds	r7, #24
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	24000850 	.word	0x24000850
 800ecec:	24000d2c 	.word	0x24000d2c
 800ecf0:	24000854 	.word	0x24000854

0800ecf4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b088      	sub	sp, #32
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ed02:	2301      	movs	r3, #1
 800ed04:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d06a      	beq.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ed0c:	69bb      	ldr	r3, [r7, #24]
 800ed0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d10a      	bne.n	800ed2a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	60fb      	str	r3, [r7, #12]
}
 800ed26:	bf00      	nop
 800ed28:	e7fe      	b.n	800ed28 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed2e:	683a      	ldr	r2, [r7, #0]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d902      	bls.n	800ed3a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ed34:	683b      	ldr	r3, [r7, #0]
 800ed36:	61fb      	str	r3, [r7, #28]
 800ed38:	e002      	b.n	800ed40 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed3e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed44:	69fa      	ldr	r2, [r7, #28]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d04b      	beq.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ed4a:	69bb      	ldr	r3, [r7, #24]
 800ed4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed4e:	697a      	ldr	r2, [r7, #20]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	d146      	bne.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ed54:	4b25      	ldr	r3, [pc, #148]	; (800edec <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	69ba      	ldr	r2, [r7, #24]
 800ed5a:	429a      	cmp	r2, r3
 800ed5c:	d10a      	bne.n	800ed74 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ed5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	60bb      	str	r3, [r7, #8]
}
 800ed70:	bf00      	nop
 800ed72:	e7fe      	b.n	800ed72 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ed74:	69bb      	ldr	r3, [r7, #24]
 800ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ed7a:	69bb      	ldr	r3, [r7, #24]
 800ed7c:	69fa      	ldr	r2, [r7, #28]
 800ed7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed80:	69bb      	ldr	r3, [r7, #24]
 800ed82:	699b      	ldr	r3, [r3, #24]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	db04      	blt.n	800ed92 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed88:	69fb      	ldr	r3, [r7, #28]
 800ed8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed8e:	69bb      	ldr	r3, [r7, #24]
 800ed90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	6959      	ldr	r1, [r3, #20]
 800ed96:	693a      	ldr	r2, [r7, #16]
 800ed98:	4613      	mov	r3, r2
 800ed9a:	009b      	lsls	r3, r3, #2
 800ed9c:	4413      	add	r3, r2
 800ed9e:	009b      	lsls	r3, r3, #2
 800eda0:	4a13      	ldr	r2, [pc, #76]	; (800edf0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800eda2:	4413      	add	r3, r2
 800eda4:	4299      	cmp	r1, r3
 800eda6:	d11c      	bne.n	800ede2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eda8:	69bb      	ldr	r3, [r7, #24]
 800edaa:	3304      	adds	r3, #4
 800edac:	4618      	mov	r0, r3
 800edae:	f7fd ff33 	bl	800cc18 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800edb2:	69bb      	ldr	r3, [r7, #24]
 800edb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edb6:	4b0f      	ldr	r3, [pc, #60]	; (800edf4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d903      	bls.n	800edc6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800edbe:	69bb      	ldr	r3, [r7, #24]
 800edc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edc2:	4a0c      	ldr	r2, [pc, #48]	; (800edf4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800edc4:	6013      	str	r3, [r2, #0]
 800edc6:	69bb      	ldr	r3, [r7, #24]
 800edc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edca:	4613      	mov	r3, r2
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	4413      	add	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	4a07      	ldr	r2, [pc, #28]	; (800edf0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800edd4:	441a      	add	r2, r3
 800edd6:	69bb      	ldr	r3, [r7, #24]
 800edd8:	3304      	adds	r3, #4
 800edda:	4619      	mov	r1, r3
 800eddc:	4610      	mov	r0, r2
 800edde:	f7fd febe 	bl	800cb5e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ede2:	bf00      	nop
 800ede4:	3720      	adds	r7, #32
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
 800edea:	bf00      	nop
 800edec:	24000850 	.word	0x24000850
 800edf0:	24000854 	.word	0x24000854
 800edf4:	24000d2c 	.word	0x24000d2c

0800edf8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800edf8:	b480      	push	{r7}
 800edfa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800edfc:	4b07      	ldr	r3, [pc, #28]	; (800ee1c <pvTaskIncrementMutexHeldCount+0x24>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d004      	beq.n	800ee0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ee04:	4b05      	ldr	r3, [pc, #20]	; (800ee1c <pvTaskIncrementMutexHeldCount+0x24>)
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ee0a:	3201      	adds	r2, #1
 800ee0c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ee0e:	4b03      	ldr	r3, [pc, #12]	; (800ee1c <pvTaskIncrementMutexHeldCount+0x24>)
 800ee10:	681b      	ldr	r3, [r3, #0]
	}
 800ee12:	4618      	mov	r0, r3
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr
 800ee1c:	24000850 	.word	0x24000850

0800ee20 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b086      	sub	sp, #24
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
 800ee2c:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 800ee2e:	f000 fec9 	bl	800fbc4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee32:	4b29      	ldr	r3, [pc, #164]	; (800eed8 <xTaskNotifyWait+0xb8>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ee3a:	b2db      	uxtb	r3, r3
 800ee3c:	2b02      	cmp	r3, #2
 800ee3e:	d01c      	beq.n	800ee7a <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 800ee40:	4b25      	ldr	r3, [pc, #148]	; (800eed8 <xTaskNotifyWait+0xb8>)
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800ee48:	68fa      	ldr	r2, [r7, #12]
 800ee4a:	43d2      	mvns	r2, r2
 800ee4c:	400a      	ands	r2, r1
 800ee4e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800ee52:	4b21      	ldr	r3, [pc, #132]	; (800eed8 <xTaskNotifyWait+0xb8>)
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	2201      	movs	r2, #1
 800ee58:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

				if( xTicksToWait > ( TickType_t ) 0 )
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00b      	beq.n	800ee7a <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ee62:	2101      	movs	r1, #1
 800ee64:	6838      	ldr	r0, [r7, #0]
 800ee66:	f000 f9dd 	bl	800f224 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ee6a:	4b1c      	ldr	r3, [pc, #112]	; (800eedc <xTaskNotifyWait+0xbc>)
 800ee6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee70:	601a      	str	r2, [r3, #0]
 800ee72:	f3bf 8f4f 	dsb	sy
 800ee76:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ee7a:	f000 fed3 	bl	800fc24 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ee7e:	f000 fea1 	bl	800fbc4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d005      	beq.n	800ee94 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800ee88:	4b13      	ldr	r3, [pc, #76]	; (800eed8 <xTaskNotifyWait+0xb8>)
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800ee94:	4b10      	ldr	r3, [pc, #64]	; (800eed8 <xTaskNotifyWait+0xb8>)
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	2b02      	cmp	r3, #2
 800eea0:	d002      	beq.n	800eea8 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 800eea2:	2300      	movs	r3, #0
 800eea4:	617b      	str	r3, [r7, #20]
 800eea6:	e00a      	b.n	800eebe <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800eea8:	4b0b      	ldr	r3, [pc, #44]	; (800eed8 <xTaskNotifyWait+0xb8>)
 800eeaa:	681b      	ldr	r3, [r3, #0]
 800eeac:	f8d3 10b8 	ldr.w	r1, [r3, #184]	; 0xb8
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	43d2      	mvns	r2, r2
 800eeb4:	400a      	ands	r2, r1
 800eeb6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
				xReturn = pdTRUE;
 800eeba:	2301      	movs	r3, #1
 800eebc:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800eebe:	4b06      	ldr	r3, [pc, #24]	; (800eed8 <xTaskNotifyWait+0xb8>)
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	2200      	movs	r2, #0
 800eec4:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
		}
		taskEXIT_CRITICAL();
 800eec8:	f000 feac 	bl	800fc24 <vPortExitCritical>

		return xReturn;
 800eecc:	697b      	ldr	r3, [r7, #20]
	}
 800eece:	4618      	mov	r0, r3
 800eed0:	3718      	adds	r7, #24
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	24000850 	.word	0x24000850
 800eedc:	e000ed04 	.word	0xe000ed04

0800eee0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b08a      	sub	sp, #40	; 0x28
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	603b      	str	r3, [r7, #0]
 800eeec:	4613      	mov	r3, r2
 800eeee:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800eef0:	2301      	movs	r3, #1
 800eef2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d10a      	bne.n	800ef10 <xTaskGenericNotify+0x30>
	__asm volatile
 800eefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefe:	f383 8811 	msr	BASEPRI, r3
 800ef02:	f3bf 8f6f 	isb	sy
 800ef06:	f3bf 8f4f 	dsb	sy
 800ef0a:	61bb      	str	r3, [r7, #24]
}
 800ef0c:	bf00      	nop
 800ef0e:	e7fe      	b.n	800ef0e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ef14:	f000 fe56 	bl	800fbc4 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800ef18:	683b      	ldr	r3, [r7, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d004      	beq.n	800ef28 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800ef1e:	6a3b      	ldr	r3, [r7, #32]
 800ef20:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800ef28:	6a3b      	ldr	r3, [r7, #32]
 800ef2a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800ef2e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800ef30:	6a3b      	ldr	r3, [r7, #32]
 800ef32:	2202      	movs	r2, #2
 800ef34:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800ef38:	79fb      	ldrb	r3, [r7, #7]
 800ef3a:	2b04      	cmp	r3, #4
 800ef3c:	d82d      	bhi.n	800ef9a <xTaskGenericNotify+0xba>
 800ef3e:	a201      	add	r2, pc, #4	; (adr r2, 800ef44 <xTaskGenericNotify+0x64>)
 800ef40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef44:	0800efbd 	.word	0x0800efbd
 800ef48:	0800ef59 	.word	0x0800ef59
 800ef4c:	0800ef6b 	.word	0x0800ef6b
 800ef50:	0800ef7b 	.word	0x0800ef7b
 800ef54:	0800ef85 	.word	0x0800ef85
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800ef58:	6a3b      	ldr	r3, [r7, #32]
 800ef5a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	431a      	orrs	r2, r3
 800ef62:	6a3b      	ldr	r3, [r7, #32]
 800ef64:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800ef68:	e02b      	b.n	800efc2 <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800ef6a:	6a3b      	ldr	r3, [r7, #32]
 800ef6c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800ef70:	1c5a      	adds	r2, r3, #1
 800ef72:	6a3b      	ldr	r3, [r7, #32]
 800ef74:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800ef78:	e023      	b.n	800efc2 <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800ef7a:	6a3b      	ldr	r3, [r7, #32]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800ef82:	e01e      	b.n	800efc2 <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ef84:	7ffb      	ldrb	r3, [r7, #31]
 800ef86:	2b02      	cmp	r3, #2
 800ef88:	d004      	beq.n	800ef94 <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800ef8a:	6a3b      	ldr	r3, [r7, #32]
 800ef8c:	68ba      	ldr	r2, [r7, #8]
 800ef8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800ef92:	e016      	b.n	800efc2 <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 800ef94:	2300      	movs	r3, #0
 800ef96:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800ef98:	e013      	b.n	800efc2 <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800ef9a:	6a3b      	ldr	r3, [r7, #32]
 800ef9c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800efa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa4:	d00c      	beq.n	800efc0 <xTaskGenericNotify+0xe0>
	__asm volatile
 800efa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efaa:	f383 8811 	msr	BASEPRI, r3
 800efae:	f3bf 8f6f 	isb	sy
 800efb2:	f3bf 8f4f 	dsb	sy
 800efb6:	617b      	str	r3, [r7, #20]
}
 800efb8:	bf00      	nop
 800efba:	e7fe      	b.n	800efba <xTaskGenericNotify+0xda>
					break;
 800efbc:	bf00      	nop
 800efbe:	e000      	b.n	800efc2 <xTaskGenericNotify+0xe2>

					break;
 800efc0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800efc2:	7ffb      	ldrb	r3, [r7, #31]
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	d13a      	bne.n	800f03e <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800efc8:	6a3b      	ldr	r3, [r7, #32]
 800efca:	3304      	adds	r3, #4
 800efcc:	4618      	mov	r0, r3
 800efce:	f7fd fe23 	bl	800cc18 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800efd2:	6a3b      	ldr	r3, [r7, #32]
 800efd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efd6:	4b1d      	ldr	r3, [pc, #116]	; (800f04c <xTaskGenericNotify+0x16c>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d903      	bls.n	800efe6 <xTaskGenericNotify+0x106>
 800efde:	6a3b      	ldr	r3, [r7, #32]
 800efe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe2:	4a1a      	ldr	r2, [pc, #104]	; (800f04c <xTaskGenericNotify+0x16c>)
 800efe4:	6013      	str	r3, [r2, #0]
 800efe6:	6a3b      	ldr	r3, [r7, #32]
 800efe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efea:	4613      	mov	r3, r2
 800efec:	009b      	lsls	r3, r3, #2
 800efee:	4413      	add	r3, r2
 800eff0:	009b      	lsls	r3, r3, #2
 800eff2:	4a17      	ldr	r2, [pc, #92]	; (800f050 <xTaskGenericNotify+0x170>)
 800eff4:	441a      	add	r2, r3
 800eff6:	6a3b      	ldr	r3, [r7, #32]
 800eff8:	3304      	adds	r3, #4
 800effa:	4619      	mov	r1, r3
 800effc:	4610      	mov	r0, r2
 800effe:	f7fd fdae 	bl	800cb5e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f002:	6a3b      	ldr	r3, [r7, #32]
 800f004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f006:	2b00      	cmp	r3, #0
 800f008:	d00a      	beq.n	800f020 <xTaskGenericNotify+0x140>
	__asm volatile
 800f00a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f00e:	f383 8811 	msr	BASEPRI, r3
 800f012:	f3bf 8f6f 	isb	sy
 800f016:	f3bf 8f4f 	dsb	sy
 800f01a:	613b      	str	r3, [r7, #16]
}
 800f01c:	bf00      	nop
 800f01e:	e7fe      	b.n	800f01e <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f020:	6a3b      	ldr	r3, [r7, #32]
 800f022:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f024:	4b0b      	ldr	r3, [pc, #44]	; (800f054 <xTaskGenericNotify+0x174>)
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d907      	bls.n	800f03e <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f02e:	4b0a      	ldr	r3, [pc, #40]	; (800f058 <xTaskGenericNotify+0x178>)
 800f030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f034:	601a      	str	r2, [r3, #0]
 800f036:	f3bf 8f4f 	dsb	sy
 800f03a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f03e:	f000 fdf1 	bl	800fc24 <vPortExitCritical>

		return xReturn;
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f044:	4618      	mov	r0, r3
 800f046:	3728      	adds	r7, #40	; 0x28
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	24000d2c 	.word	0x24000d2c
 800f050:	24000854 	.word	0x24000854
 800f054:	24000850 	.word	0x24000850
 800f058:	e000ed04 	.word	0xe000ed04

0800f05c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b08e      	sub	sp, #56	; 0x38
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	603b      	str	r3, [r7, #0]
 800f068:	4613      	mov	r3, r2
 800f06a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800f06c:	2301      	movs	r3, #1
 800f06e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d10a      	bne.n	800f08c <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800f076:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f07a:	f383 8811 	msr	BASEPRI, r3
 800f07e:	f3bf 8f6f 	isb	sy
 800f082:	f3bf 8f4f 	dsb	sy
 800f086:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f088:	bf00      	nop
 800f08a:	e7fe      	b.n	800f08a <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f08c:	f000 fe7c 	bl	800fd88 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800f090:	68fb      	ldr	r3, [r7, #12]
 800f092:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800f094:	f3ef 8211 	mrs	r2, BASEPRI
 800f098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f09c:	f383 8811 	msr	BASEPRI, r3
 800f0a0:	f3bf 8f6f 	isb	sy
 800f0a4:	f3bf 8f4f 	dsb	sy
 800f0a8:	623a      	str	r2, [r7, #32]
 800f0aa:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800f0ac:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f0ae:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d004      	beq.n	800f0c0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0b8:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800f0bc:	683b      	ldr	r3, [r7, #0]
 800f0be:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0c2:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800f0c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0cc:	2202      	movs	r2, #2
 800f0ce:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc

			switch( eAction )
 800f0d2:	79fb      	ldrb	r3, [r7, #7]
 800f0d4:	2b04      	cmp	r3, #4
 800f0d6:	d82f      	bhi.n	800f138 <xTaskGenericNotifyFromISR+0xdc>
 800f0d8:	a201      	add	r2, pc, #4	; (adr r2, 800f0e0 <xTaskGenericNotifyFromISR+0x84>)
 800f0da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0de:	bf00      	nop
 800f0e0:	0800f15b 	.word	0x0800f15b
 800f0e4:	0800f0f5 	.word	0x0800f0f5
 800f0e8:	0800f107 	.word	0x0800f107
 800f0ec:	0800f117 	.word	0x0800f117
 800f0f0:	0800f121 	.word	0x0800f121
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f0f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0f6:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	431a      	orrs	r2, r3
 800f0fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f100:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800f104:	e02c      	b.n	800f160 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f108:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f10c:	1c5a      	adds	r2, r3, #1
 800f10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f110:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800f114:	e024      	b.n	800f160 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f118:	68ba      	ldr	r2, [r7, #8]
 800f11a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					break;
 800f11e:	e01f      	b.n	800f160 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f120:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f124:	2b02      	cmp	r3, #2
 800f126:	d004      	beq.n	800f132 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f12a:	68ba      	ldr	r2, [r7, #8]
 800f12c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f130:	e016      	b.n	800f160 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800f132:	2300      	movs	r3, #0
 800f134:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800f136:	e013      	b.n	800f160 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f13a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800f13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f142:	d00c      	beq.n	800f15e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800f144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f148:	f383 8811 	msr	BASEPRI, r3
 800f14c:	f3bf 8f6f 	isb	sy
 800f150:	f3bf 8f4f 	dsb	sy
 800f154:	61bb      	str	r3, [r7, #24]
}
 800f156:	bf00      	nop
 800f158:	e7fe      	b.n	800f158 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800f15a:	bf00      	nop
 800f15c:	e000      	b.n	800f160 <xTaskGenericNotifyFromISR+0x104>
					break;
 800f15e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f160:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f164:	2b01      	cmp	r3, #1
 800f166:	d146      	bne.n	800f1f6 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f16a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d00a      	beq.n	800f186 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 800f170:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f174:	f383 8811 	msr	BASEPRI, r3
 800f178:	f3bf 8f6f 	isb	sy
 800f17c:	f3bf 8f4f 	dsb	sy
 800f180:	617b      	str	r3, [r7, #20]
}
 800f182:	bf00      	nop
 800f184:	e7fe      	b.n	800f184 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f186:	4b21      	ldr	r3, [pc, #132]	; (800f20c <xTaskGenericNotifyFromISR+0x1b0>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d11d      	bne.n	800f1ca <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f18e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f190:	3304      	adds	r3, #4
 800f192:	4618      	mov	r0, r3
 800f194:	f7fd fd40 	bl	800cc18 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f19c:	4b1c      	ldr	r3, [pc, #112]	; (800f210 <xTaskGenericNotifyFromISR+0x1b4>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	d903      	bls.n	800f1ac <xTaskGenericNotifyFromISR+0x150>
 800f1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1a8:	4a19      	ldr	r2, [pc, #100]	; (800f210 <xTaskGenericNotifyFromISR+0x1b4>)
 800f1aa:	6013      	str	r3, [r2, #0]
 800f1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1b0:	4613      	mov	r3, r2
 800f1b2:	009b      	lsls	r3, r3, #2
 800f1b4:	4413      	add	r3, r2
 800f1b6:	009b      	lsls	r3, r3, #2
 800f1b8:	4a16      	ldr	r2, [pc, #88]	; (800f214 <xTaskGenericNotifyFromISR+0x1b8>)
 800f1ba:	441a      	add	r2, r3
 800f1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1be:	3304      	adds	r3, #4
 800f1c0:	4619      	mov	r1, r3
 800f1c2:	4610      	mov	r0, r2
 800f1c4:	f7fd fccb 	bl	800cb5e <vListInsertEnd>
 800f1c8:	e005      	b.n	800f1d6 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800f1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1cc:	3318      	adds	r3, #24
 800f1ce:	4619      	mov	r1, r3
 800f1d0:	4811      	ldr	r0, [pc, #68]	; (800f218 <xTaskGenericNotifyFromISR+0x1bc>)
 800f1d2:	f7fd fcc4 	bl	800cb5e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f1d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f1da:	4b10      	ldr	r3, [pc, #64]	; (800f21c <xTaskGenericNotifyFromISR+0x1c0>)
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f1e0:	429a      	cmp	r2, r3
 800f1e2:	d908      	bls.n	800f1f6 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800f1e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800f1ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f1ec:	2201      	movs	r2, #1
 800f1ee:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800f1f0:	4b0b      	ldr	r3, [pc, #44]	; (800f220 <xTaskGenericNotifyFromISR+0x1c4>)
 800f1f2:	2201      	movs	r2, #1
 800f1f4:	601a      	str	r2, [r3, #0]
 800f1f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f1fa:	693b      	ldr	r3, [r7, #16]
 800f1fc:	f383 8811 	msr	BASEPRI, r3
}
 800f200:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800f202:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800f204:	4618      	mov	r0, r3
 800f206:	3738      	adds	r7, #56	; 0x38
 800f208:	46bd      	mov	sp, r7
 800f20a:	bd80      	pop	{r7, pc}
 800f20c:	24000d4c 	.word	0x24000d4c
 800f210:	24000d2c 	.word	0x24000d2c
 800f214:	24000854 	.word	0x24000854
 800f218:	24000ce4 	.word	0x24000ce4
 800f21c:	24000850 	.word	0x24000850
 800f220:	24000d38 	.word	0x24000d38

0800f224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b084      	sub	sp, #16
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f22e:	4b21      	ldr	r3, [pc, #132]	; (800f2b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f234:	4b20      	ldr	r3, [pc, #128]	; (800f2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	3304      	adds	r3, #4
 800f23a:	4618      	mov	r0, r3
 800f23c:	f7fd fcec 	bl	800cc18 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f246:	d10a      	bne.n	800f25e <prvAddCurrentTaskToDelayedList+0x3a>
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d007      	beq.n	800f25e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f24e:	4b1a      	ldr	r3, [pc, #104]	; (800f2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	3304      	adds	r3, #4
 800f254:	4619      	mov	r1, r3
 800f256:	4819      	ldr	r0, [pc, #100]	; (800f2bc <prvAddCurrentTaskToDelayedList+0x98>)
 800f258:	f7fd fc81 	bl	800cb5e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f25c:	e026      	b.n	800f2ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4413      	add	r3, r2
 800f264:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f266:	4b14      	ldr	r3, [pc, #80]	; (800f2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	68ba      	ldr	r2, [r7, #8]
 800f26c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f26e:	68ba      	ldr	r2, [r7, #8]
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	429a      	cmp	r2, r3
 800f274:	d209      	bcs.n	800f28a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f276:	4b12      	ldr	r3, [pc, #72]	; (800f2c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f278:	681a      	ldr	r2, [r3, #0]
 800f27a:	4b0f      	ldr	r3, [pc, #60]	; (800f2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	3304      	adds	r3, #4
 800f280:	4619      	mov	r1, r3
 800f282:	4610      	mov	r0, r2
 800f284:	f7fd fc8f 	bl	800cba6 <vListInsert>
}
 800f288:	e010      	b.n	800f2ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f28a:	4b0e      	ldr	r3, [pc, #56]	; (800f2c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f28c:	681a      	ldr	r2, [r3, #0]
 800f28e:	4b0a      	ldr	r3, [pc, #40]	; (800f2b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	3304      	adds	r3, #4
 800f294:	4619      	mov	r1, r3
 800f296:	4610      	mov	r0, r2
 800f298:	f7fd fc85 	bl	800cba6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f29c:	4b0a      	ldr	r3, [pc, #40]	; (800f2c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	68ba      	ldr	r2, [r7, #8]
 800f2a2:	429a      	cmp	r2, r3
 800f2a4:	d202      	bcs.n	800f2ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f2a6:	4a08      	ldr	r2, [pc, #32]	; (800f2c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	6013      	str	r3, [r2, #0]
}
 800f2ac:	bf00      	nop
 800f2ae:	3710      	adds	r7, #16
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	24000d28 	.word	0x24000d28
 800f2b8:	24000850 	.word	0x24000850
 800f2bc:	24000d10 	.word	0x24000d10
 800f2c0:	24000ce0 	.word	0x24000ce0
 800f2c4:	24000cdc 	.word	0x24000cdc
 800f2c8:	24000d44 	.word	0x24000d44

0800f2cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b08a      	sub	sp, #40	; 0x28
 800f2d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f2d6:	f000 fb07 	bl	800f8e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f2da:	4b1c      	ldr	r3, [pc, #112]	; (800f34c <xTimerCreateTimerTask+0x80>)
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d021      	beq.n	800f326 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f2ea:	1d3a      	adds	r2, r7, #4
 800f2ec:	f107 0108 	add.w	r1, r7, #8
 800f2f0:	f107 030c 	add.w	r3, r7, #12
 800f2f4:	4618      	mov	r0, r3
 800f2f6:	f7fd fbeb 	bl	800cad0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f2fa:	6879      	ldr	r1, [r7, #4]
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	68fa      	ldr	r2, [r7, #12]
 800f300:	9202      	str	r2, [sp, #8]
 800f302:	9301      	str	r3, [sp, #4]
 800f304:	2302      	movs	r3, #2
 800f306:	9300      	str	r3, [sp, #0]
 800f308:	2300      	movs	r3, #0
 800f30a:	460a      	mov	r2, r1
 800f30c:	4910      	ldr	r1, [pc, #64]	; (800f350 <xTimerCreateTimerTask+0x84>)
 800f30e:	4811      	ldr	r0, [pc, #68]	; (800f354 <xTimerCreateTimerTask+0x88>)
 800f310:	f7fe fd70 	bl	800ddf4 <xTaskCreateStatic>
 800f314:	4603      	mov	r3, r0
 800f316:	4a10      	ldr	r2, [pc, #64]	; (800f358 <xTimerCreateTimerTask+0x8c>)
 800f318:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f31a:	4b0f      	ldr	r3, [pc, #60]	; (800f358 <xTimerCreateTimerTask+0x8c>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f322:	2301      	movs	r3, #1
 800f324:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d10a      	bne.n	800f342 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f330:	f383 8811 	msr	BASEPRI, r3
 800f334:	f3bf 8f6f 	isb	sy
 800f338:	f3bf 8f4f 	dsb	sy
 800f33c:	613b      	str	r3, [r7, #16]
}
 800f33e:	bf00      	nop
 800f340:	e7fe      	b.n	800f340 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f342:	697b      	ldr	r3, [r7, #20]
}
 800f344:	4618      	mov	r0, r3
 800f346:	3718      	adds	r7, #24
 800f348:	46bd      	mov	sp, r7
 800f34a:	bd80      	pop	{r7, pc}
 800f34c:	24000d88 	.word	0x24000d88
 800f350:	0801c86c 	.word	0x0801c86c
 800f354:	0800f491 	.word	0x0800f491
 800f358:	24000d8c 	.word	0x24000d8c

0800f35c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b08a      	sub	sp, #40	; 0x28
 800f360:	af00      	add	r7, sp, #0
 800f362:	60f8      	str	r0, [r7, #12]
 800f364:	60b9      	str	r1, [r7, #8]
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f36a:	2300      	movs	r3, #0
 800f36c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d10a      	bne.n	800f38a <xTimerGenericCommand+0x2e>
	__asm volatile
 800f374:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f378:	f383 8811 	msr	BASEPRI, r3
 800f37c:	f3bf 8f6f 	isb	sy
 800f380:	f3bf 8f4f 	dsb	sy
 800f384:	623b      	str	r3, [r7, #32]
}
 800f386:	bf00      	nop
 800f388:	e7fe      	b.n	800f388 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f38a:	4b1a      	ldr	r3, [pc, #104]	; (800f3f4 <xTimerGenericCommand+0x98>)
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d02a      	beq.n	800f3e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f39e:	68bb      	ldr	r3, [r7, #8]
 800f3a0:	2b05      	cmp	r3, #5
 800f3a2:	dc18      	bgt.n	800f3d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f3a4:	f7ff fbb2 	bl	800eb0c <xTaskGetSchedulerState>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b02      	cmp	r3, #2
 800f3ac:	d109      	bne.n	800f3c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f3ae:	4b11      	ldr	r3, [pc, #68]	; (800f3f4 <xTimerGenericCommand+0x98>)
 800f3b0:	6818      	ldr	r0, [r3, #0]
 800f3b2:	f107 0110 	add.w	r1, r7, #16
 800f3b6:	2300      	movs	r3, #0
 800f3b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ba:	f7fd feb5 	bl	800d128 <xQueueGenericSend>
 800f3be:	6278      	str	r0, [r7, #36]	; 0x24
 800f3c0:	e012      	b.n	800f3e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f3c2:	4b0c      	ldr	r3, [pc, #48]	; (800f3f4 <xTimerGenericCommand+0x98>)
 800f3c4:	6818      	ldr	r0, [r3, #0]
 800f3c6:	f107 0110 	add.w	r1, r7, #16
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	2200      	movs	r2, #0
 800f3ce:	f7fd feab 	bl	800d128 <xQueueGenericSend>
 800f3d2:	6278      	str	r0, [r7, #36]	; 0x24
 800f3d4:	e008      	b.n	800f3e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f3d6:	4b07      	ldr	r3, [pc, #28]	; (800f3f4 <xTimerGenericCommand+0x98>)
 800f3d8:	6818      	ldr	r0, [r3, #0]
 800f3da:	f107 0110 	add.w	r1, r7, #16
 800f3de:	2300      	movs	r3, #0
 800f3e0:	683a      	ldr	r2, [r7, #0]
 800f3e2:	f7fd ff9f 	bl	800d324 <xQueueGenericSendFromISR>
 800f3e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3728      	adds	r7, #40	; 0x28
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}
 800f3f2:	bf00      	nop
 800f3f4:	24000d88 	.word	0x24000d88

0800f3f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b088      	sub	sp, #32
 800f3fc:	af02      	add	r7, sp, #8
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f402:	4b22      	ldr	r3, [pc, #136]	; (800f48c <prvProcessExpiredTimer+0x94>)
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	68db      	ldr	r3, [r3, #12]
 800f408:	68db      	ldr	r3, [r3, #12]
 800f40a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	3304      	adds	r3, #4
 800f410:	4618      	mov	r0, r3
 800f412:	f7fd fc01 	bl	800cc18 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f416:	697b      	ldr	r3, [r7, #20]
 800f418:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f41c:	f003 0304 	and.w	r3, r3, #4
 800f420:	2b00      	cmp	r3, #0
 800f422:	d022      	beq.n	800f46a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f424:	697b      	ldr	r3, [r7, #20]
 800f426:	699a      	ldr	r2, [r3, #24]
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	18d1      	adds	r1, r2, r3
 800f42c:	687b      	ldr	r3, [r7, #4]
 800f42e:	683a      	ldr	r2, [r7, #0]
 800f430:	6978      	ldr	r0, [r7, #20]
 800f432:	f000 f8d1 	bl	800f5d8 <prvInsertTimerInActiveList>
 800f436:	4603      	mov	r3, r0
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d01f      	beq.n	800f47c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f43c:	2300      	movs	r3, #0
 800f43e:	9300      	str	r3, [sp, #0]
 800f440:	2300      	movs	r3, #0
 800f442:	687a      	ldr	r2, [r7, #4]
 800f444:	2100      	movs	r1, #0
 800f446:	6978      	ldr	r0, [r7, #20]
 800f448:	f7ff ff88 	bl	800f35c <xTimerGenericCommand>
 800f44c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d113      	bne.n	800f47c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f454:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f458:	f383 8811 	msr	BASEPRI, r3
 800f45c:	f3bf 8f6f 	isb	sy
 800f460:	f3bf 8f4f 	dsb	sy
 800f464:	60fb      	str	r3, [r7, #12]
}
 800f466:	bf00      	nop
 800f468:	e7fe      	b.n	800f468 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f470:	f023 0301 	bic.w	r3, r3, #1
 800f474:	b2da      	uxtb	r2, r3
 800f476:	697b      	ldr	r3, [r7, #20]
 800f478:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	6a1b      	ldr	r3, [r3, #32]
 800f480:	6978      	ldr	r0, [r7, #20]
 800f482:	4798      	blx	r3
}
 800f484:	bf00      	nop
 800f486:	3718      	adds	r7, #24
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}
 800f48c:	24000d80 	.word	0x24000d80

0800f490 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b084      	sub	sp, #16
 800f494:	af00      	add	r7, sp, #0
 800f496:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f498:	f107 0308 	add.w	r3, r7, #8
 800f49c:	4618      	mov	r0, r3
 800f49e:	f000 f857 	bl	800f550 <prvGetNextExpireTime>
 800f4a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f4a4:	68bb      	ldr	r3, [r7, #8]
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	68f8      	ldr	r0, [r7, #12]
 800f4aa:	f000 f803 	bl	800f4b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f4ae:	f000 f8d5 	bl	800f65c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f4b2:	e7f1      	b.n	800f498 <prvTimerTask+0x8>

0800f4b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b084      	sub	sp, #16
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	6078      	str	r0, [r7, #4]
 800f4bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f4be:	f7fe fefb 	bl	800e2b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4c2:	f107 0308 	add.w	r3, r7, #8
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f000 f866 	bl	800f598 <prvSampleTimeNow>
 800f4cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d130      	bne.n	800f536 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d10a      	bne.n	800f4f0 <prvProcessTimerOrBlockTask+0x3c>
 800f4da:	687a      	ldr	r2, [r7, #4]
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d806      	bhi.n	800f4f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f4e2:	f7fe fef7 	bl	800e2d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f4e6:	68f9      	ldr	r1, [r7, #12]
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	f7ff ff85 	bl	800f3f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f4ee:	e024      	b.n	800f53a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f4f0:	683b      	ldr	r3, [r7, #0]
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d008      	beq.n	800f508 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f4f6:	4b13      	ldr	r3, [pc, #76]	; (800f544 <prvProcessTimerOrBlockTask+0x90>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d101      	bne.n	800f504 <prvProcessTimerOrBlockTask+0x50>
 800f500:	2301      	movs	r3, #1
 800f502:	e000      	b.n	800f506 <prvProcessTimerOrBlockTask+0x52>
 800f504:	2300      	movs	r3, #0
 800f506:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f508:	4b0f      	ldr	r3, [pc, #60]	; (800f548 <prvProcessTimerOrBlockTask+0x94>)
 800f50a:	6818      	ldr	r0, [r3, #0]
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	1ad3      	subs	r3, r2, r3
 800f512:	683a      	ldr	r2, [r7, #0]
 800f514:	4619      	mov	r1, r3
 800f516:	f7fe fc39 	bl	800dd8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f51a:	f7fe fedb 	bl	800e2d4 <xTaskResumeAll>
 800f51e:	4603      	mov	r3, r0
 800f520:	2b00      	cmp	r3, #0
 800f522:	d10a      	bne.n	800f53a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f524:	4b09      	ldr	r3, [pc, #36]	; (800f54c <prvProcessTimerOrBlockTask+0x98>)
 800f526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f52a:	601a      	str	r2, [r3, #0]
 800f52c:	f3bf 8f4f 	dsb	sy
 800f530:	f3bf 8f6f 	isb	sy
}
 800f534:	e001      	b.n	800f53a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f536:	f7fe fecd 	bl	800e2d4 <xTaskResumeAll>
}
 800f53a:	bf00      	nop
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
 800f542:	bf00      	nop
 800f544:	24000d84 	.word	0x24000d84
 800f548:	24000d88 	.word	0x24000d88
 800f54c:	e000ed04 	.word	0xe000ed04

0800f550 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f550:	b480      	push	{r7}
 800f552:	b085      	sub	sp, #20
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f558:	4b0e      	ldr	r3, [pc, #56]	; (800f594 <prvGetNextExpireTime+0x44>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d101      	bne.n	800f566 <prvGetNextExpireTime+0x16>
 800f562:	2201      	movs	r2, #1
 800f564:	e000      	b.n	800f568 <prvGetNextExpireTime+0x18>
 800f566:	2200      	movs	r2, #0
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d105      	bne.n	800f580 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f574:	4b07      	ldr	r3, [pc, #28]	; (800f594 <prvGetNextExpireTime+0x44>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	68db      	ldr	r3, [r3, #12]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	60fb      	str	r3, [r7, #12]
 800f57e:	e001      	b.n	800f584 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f580:	2300      	movs	r3, #0
 800f582:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f584:	68fb      	ldr	r3, [r7, #12]
}
 800f586:	4618      	mov	r0, r3
 800f588:	3714      	adds	r7, #20
 800f58a:	46bd      	mov	sp, r7
 800f58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f590:	4770      	bx	lr
 800f592:	bf00      	nop
 800f594:	24000d80 	.word	0x24000d80

0800f598 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b084      	sub	sp, #16
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f5a0:	f7fe ff36 	bl	800e410 <xTaskGetTickCount>
 800f5a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f5a6:	4b0b      	ldr	r3, [pc, #44]	; (800f5d4 <prvSampleTimeNow+0x3c>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	429a      	cmp	r2, r3
 800f5ae:	d205      	bcs.n	800f5bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f5b0:	f000 f936 	bl	800f820 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	2201      	movs	r2, #1
 800f5b8:	601a      	str	r2, [r3, #0]
 800f5ba:	e002      	b.n	800f5c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	2200      	movs	r2, #0
 800f5c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f5c2:	4a04      	ldr	r2, [pc, #16]	; (800f5d4 <prvSampleTimeNow+0x3c>)
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3710      	adds	r7, #16
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop
 800f5d4:	24000d90 	.word	0x24000d90

0800f5d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b086      	sub	sp, #24
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	60f8      	str	r0, [r7, #12]
 800f5e0:	60b9      	str	r1, [r7, #8]
 800f5e2:	607a      	str	r2, [r7, #4]
 800f5e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	68fa      	ldr	r2, [r7, #12]
 800f5f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	429a      	cmp	r2, r3
 800f5fc:	d812      	bhi.n	800f624 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f5fe:	687a      	ldr	r2, [r7, #4]
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	1ad2      	subs	r2, r2, r3
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	699b      	ldr	r3, [r3, #24]
 800f608:	429a      	cmp	r2, r3
 800f60a:	d302      	bcc.n	800f612 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f60c:	2301      	movs	r3, #1
 800f60e:	617b      	str	r3, [r7, #20]
 800f610:	e01b      	b.n	800f64a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f612:	4b10      	ldr	r3, [pc, #64]	; (800f654 <prvInsertTimerInActiveList+0x7c>)
 800f614:	681a      	ldr	r2, [r3, #0]
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	3304      	adds	r3, #4
 800f61a:	4619      	mov	r1, r3
 800f61c:	4610      	mov	r0, r2
 800f61e:	f7fd fac2 	bl	800cba6 <vListInsert>
 800f622:	e012      	b.n	800f64a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f624:	687a      	ldr	r2, [r7, #4]
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	429a      	cmp	r2, r3
 800f62a:	d206      	bcs.n	800f63a <prvInsertTimerInActiveList+0x62>
 800f62c:	68ba      	ldr	r2, [r7, #8]
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	429a      	cmp	r2, r3
 800f632:	d302      	bcc.n	800f63a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f634:	2301      	movs	r3, #1
 800f636:	617b      	str	r3, [r7, #20]
 800f638:	e007      	b.n	800f64a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f63a:	4b07      	ldr	r3, [pc, #28]	; (800f658 <prvInsertTimerInActiveList+0x80>)
 800f63c:	681a      	ldr	r2, [r3, #0]
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3304      	adds	r3, #4
 800f642:	4619      	mov	r1, r3
 800f644:	4610      	mov	r0, r2
 800f646:	f7fd faae 	bl	800cba6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f64a:	697b      	ldr	r3, [r7, #20]
}
 800f64c:	4618      	mov	r0, r3
 800f64e:	3718      	adds	r7, #24
 800f650:	46bd      	mov	sp, r7
 800f652:	bd80      	pop	{r7, pc}
 800f654:	24000d84 	.word	0x24000d84
 800f658:	24000d80 	.word	0x24000d80

0800f65c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f65c:	b580      	push	{r7, lr}
 800f65e:	b08e      	sub	sp, #56	; 0x38
 800f660:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f662:	e0ca      	b.n	800f7fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	2b00      	cmp	r3, #0
 800f668:	da18      	bge.n	800f69c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f66a:	1d3b      	adds	r3, r7, #4
 800f66c:	3304      	adds	r3, #4
 800f66e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f672:	2b00      	cmp	r3, #0
 800f674:	d10a      	bne.n	800f68c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67a:	f383 8811 	msr	BASEPRI, r3
 800f67e:	f3bf 8f6f 	isb	sy
 800f682:	f3bf 8f4f 	dsb	sy
 800f686:	61fb      	str	r3, [r7, #28]
}
 800f688:	bf00      	nop
 800f68a:	e7fe      	b.n	800f68a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f692:	6850      	ldr	r0, [r2, #4]
 800f694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f696:	6892      	ldr	r2, [r2, #8]
 800f698:	4611      	mov	r1, r2
 800f69a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	f2c0 80aa 	blt.w	800f7f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f6a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6aa:	695b      	ldr	r3, [r3, #20]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f6b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b2:	3304      	adds	r3, #4
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fd faaf 	bl	800cc18 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f6ba:	463b      	mov	r3, r7
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7ff ff6b 	bl	800f598 <prvSampleTimeNow>
 800f6c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	2b09      	cmp	r3, #9
 800f6c8:	f200 8097 	bhi.w	800f7fa <prvProcessReceivedCommands+0x19e>
 800f6cc:	a201      	add	r2, pc, #4	; (adr r2, 800f6d4 <prvProcessReceivedCommands+0x78>)
 800f6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d2:	bf00      	nop
 800f6d4:	0800f6fd 	.word	0x0800f6fd
 800f6d8:	0800f6fd 	.word	0x0800f6fd
 800f6dc:	0800f6fd 	.word	0x0800f6fd
 800f6e0:	0800f771 	.word	0x0800f771
 800f6e4:	0800f785 	.word	0x0800f785
 800f6e8:	0800f7cf 	.word	0x0800f7cf
 800f6ec:	0800f6fd 	.word	0x0800f6fd
 800f6f0:	0800f6fd 	.word	0x0800f6fd
 800f6f4:	0800f771 	.word	0x0800f771
 800f6f8:	0800f785 	.word	0x0800f785
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f702:	f043 0301 	orr.w	r3, r3, #1
 800f706:	b2da      	uxtb	r2, r3
 800f708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f70a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f712:	699b      	ldr	r3, [r3, #24]
 800f714:	18d1      	adds	r1, r2, r3
 800f716:	68bb      	ldr	r3, [r7, #8]
 800f718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f71a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f71c:	f7ff ff5c 	bl	800f5d8 <prvInsertTimerInActiveList>
 800f720:	4603      	mov	r3, r0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d069      	beq.n	800f7fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f728:	6a1b      	ldr	r3, [r3, #32]
 800f72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f72c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f730:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f734:	f003 0304 	and.w	r3, r3, #4
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d05e      	beq.n	800f7fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f73c:	68ba      	ldr	r2, [r7, #8]
 800f73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f740:	699b      	ldr	r3, [r3, #24]
 800f742:	441a      	add	r2, r3
 800f744:	2300      	movs	r3, #0
 800f746:	9300      	str	r3, [sp, #0]
 800f748:	2300      	movs	r3, #0
 800f74a:	2100      	movs	r1, #0
 800f74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f74e:	f7ff fe05 	bl	800f35c <xTimerGenericCommand>
 800f752:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f754:	6a3b      	ldr	r3, [r7, #32]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d14f      	bne.n	800f7fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f75a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f75e:	f383 8811 	msr	BASEPRI, r3
 800f762:	f3bf 8f6f 	isb	sy
 800f766:	f3bf 8f4f 	dsb	sy
 800f76a:	61bb      	str	r3, [r7, #24]
}
 800f76c:	bf00      	nop
 800f76e:	e7fe      	b.n	800f76e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f772:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f776:	f023 0301 	bic.w	r3, r3, #1
 800f77a:	b2da      	uxtb	r2, r3
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f782:	e03a      	b.n	800f7fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f786:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f78a:	f043 0301 	orr.w	r3, r3, #1
 800f78e:	b2da      	uxtb	r2, r3
 800f790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f792:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f796:	68ba      	ldr	r2, [r7, #8]
 800f798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f79c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f79e:	699b      	ldr	r3, [r3, #24]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d10a      	bne.n	800f7ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7a8:	f383 8811 	msr	BASEPRI, r3
 800f7ac:	f3bf 8f6f 	isb	sy
 800f7b0:	f3bf 8f4f 	dsb	sy
 800f7b4:	617b      	str	r3, [r7, #20]
}
 800f7b6:	bf00      	nop
 800f7b8:	e7fe      	b.n	800f7b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7bc:	699a      	ldr	r2, [r3, #24]
 800f7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c0:	18d1      	adds	r1, r2, r3
 800f7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7c8:	f7ff ff06 	bl	800f5d8 <prvInsertTimerInActiveList>
					break;
 800f7cc:	e015      	b.n	800f7fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7d4:	f003 0302 	and.w	r3, r3, #2
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d103      	bne.n	800f7e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f7dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f7de:	f000 fbdf 	bl	800ffa0 <vPortFree>
 800f7e2:	e00a      	b.n	800f7fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f7ea:	f023 0301 	bic.w	r3, r3, #1
 800f7ee:	b2da      	uxtb	r2, r3
 800f7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f7f6:	e000      	b.n	800f7fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f7f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f7fa:	4b08      	ldr	r3, [pc, #32]	; (800f81c <prvProcessReceivedCommands+0x1c0>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	1d39      	adds	r1, r7, #4
 800f800:	2200      	movs	r2, #0
 800f802:	4618      	mov	r0, r3
 800f804:	f7fd feb6 	bl	800d574 <xQueueReceive>
 800f808:	4603      	mov	r3, r0
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	f47f af2a 	bne.w	800f664 <prvProcessReceivedCommands+0x8>
	}
}
 800f810:	bf00      	nop
 800f812:	bf00      	nop
 800f814:	3730      	adds	r7, #48	; 0x30
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	24000d88 	.word	0x24000d88

0800f820 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b088      	sub	sp, #32
 800f824:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f826:	e048      	b.n	800f8ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f828:	4b2d      	ldr	r3, [pc, #180]	; (800f8e0 <prvSwitchTimerLists+0xc0>)
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f832:	4b2b      	ldr	r3, [pc, #172]	; (800f8e0 <prvSwitchTimerLists+0xc0>)
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	68db      	ldr	r3, [r3, #12]
 800f83a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	3304      	adds	r3, #4
 800f840:	4618      	mov	r0, r3
 800f842:	f7fd f9e9 	bl	800cc18 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	6a1b      	ldr	r3, [r3, #32]
 800f84a:	68f8      	ldr	r0, [r7, #12]
 800f84c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f854:	f003 0304 	and.w	r3, r3, #4
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d02e      	beq.n	800f8ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	699b      	ldr	r3, [r3, #24]
 800f860:	693a      	ldr	r2, [r7, #16]
 800f862:	4413      	add	r3, r2
 800f864:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f866:	68ba      	ldr	r2, [r7, #8]
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	429a      	cmp	r2, r3
 800f86c:	d90e      	bls.n	800f88c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	68ba      	ldr	r2, [r7, #8]
 800f872:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	68fa      	ldr	r2, [r7, #12]
 800f878:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f87a:	4b19      	ldr	r3, [pc, #100]	; (800f8e0 <prvSwitchTimerLists+0xc0>)
 800f87c:	681a      	ldr	r2, [r3, #0]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	3304      	adds	r3, #4
 800f882:	4619      	mov	r1, r3
 800f884:	4610      	mov	r0, r2
 800f886:	f7fd f98e 	bl	800cba6 <vListInsert>
 800f88a:	e016      	b.n	800f8ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f88c:	2300      	movs	r3, #0
 800f88e:	9300      	str	r3, [sp, #0]
 800f890:	2300      	movs	r3, #0
 800f892:	693a      	ldr	r2, [r7, #16]
 800f894:	2100      	movs	r1, #0
 800f896:	68f8      	ldr	r0, [r7, #12]
 800f898:	f7ff fd60 	bl	800f35c <xTimerGenericCommand>
 800f89c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d10a      	bne.n	800f8ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8a8:	f383 8811 	msr	BASEPRI, r3
 800f8ac:	f3bf 8f6f 	isb	sy
 800f8b0:	f3bf 8f4f 	dsb	sy
 800f8b4:	603b      	str	r3, [r7, #0]
}
 800f8b6:	bf00      	nop
 800f8b8:	e7fe      	b.n	800f8b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f8ba:	4b09      	ldr	r3, [pc, #36]	; (800f8e0 <prvSwitchTimerLists+0xc0>)
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d1b1      	bne.n	800f828 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f8c4:	4b06      	ldr	r3, [pc, #24]	; (800f8e0 <prvSwitchTimerLists+0xc0>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f8ca:	4b06      	ldr	r3, [pc, #24]	; (800f8e4 <prvSwitchTimerLists+0xc4>)
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4a04      	ldr	r2, [pc, #16]	; (800f8e0 <prvSwitchTimerLists+0xc0>)
 800f8d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f8d2:	4a04      	ldr	r2, [pc, #16]	; (800f8e4 <prvSwitchTimerLists+0xc4>)
 800f8d4:	697b      	ldr	r3, [r7, #20]
 800f8d6:	6013      	str	r3, [r2, #0]
}
 800f8d8:	bf00      	nop
 800f8da:	3718      	adds	r7, #24
 800f8dc:	46bd      	mov	sp, r7
 800f8de:	bd80      	pop	{r7, pc}
 800f8e0:	24000d80 	.word	0x24000d80
 800f8e4:	24000d84 	.word	0x24000d84

0800f8e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f8e8:	b580      	push	{r7, lr}
 800f8ea:	b082      	sub	sp, #8
 800f8ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f8ee:	f000 f969 	bl	800fbc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f8f2:	4b15      	ldr	r3, [pc, #84]	; (800f948 <prvCheckForValidListAndQueue+0x60>)
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d120      	bne.n	800f93c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f8fa:	4814      	ldr	r0, [pc, #80]	; (800f94c <prvCheckForValidListAndQueue+0x64>)
 800f8fc:	f7fd f902 	bl	800cb04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f900:	4813      	ldr	r0, [pc, #76]	; (800f950 <prvCheckForValidListAndQueue+0x68>)
 800f902:	f7fd f8ff 	bl	800cb04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f906:	4b13      	ldr	r3, [pc, #76]	; (800f954 <prvCheckForValidListAndQueue+0x6c>)
 800f908:	4a10      	ldr	r2, [pc, #64]	; (800f94c <prvCheckForValidListAndQueue+0x64>)
 800f90a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f90c:	4b12      	ldr	r3, [pc, #72]	; (800f958 <prvCheckForValidListAndQueue+0x70>)
 800f90e:	4a10      	ldr	r2, [pc, #64]	; (800f950 <prvCheckForValidListAndQueue+0x68>)
 800f910:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f912:	2300      	movs	r3, #0
 800f914:	9300      	str	r3, [sp, #0]
 800f916:	4b11      	ldr	r3, [pc, #68]	; (800f95c <prvCheckForValidListAndQueue+0x74>)
 800f918:	4a11      	ldr	r2, [pc, #68]	; (800f960 <prvCheckForValidListAndQueue+0x78>)
 800f91a:	2110      	movs	r1, #16
 800f91c:	200a      	movs	r0, #10
 800f91e:	f7fd fa0d 	bl	800cd3c <xQueueGenericCreateStatic>
 800f922:	4603      	mov	r3, r0
 800f924:	4a08      	ldr	r2, [pc, #32]	; (800f948 <prvCheckForValidListAndQueue+0x60>)
 800f926:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f928:	4b07      	ldr	r3, [pc, #28]	; (800f948 <prvCheckForValidListAndQueue+0x60>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d005      	beq.n	800f93c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f930:	4b05      	ldr	r3, [pc, #20]	; (800f948 <prvCheckForValidListAndQueue+0x60>)
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	490b      	ldr	r1, [pc, #44]	; (800f964 <prvCheckForValidListAndQueue+0x7c>)
 800f936:	4618      	mov	r0, r3
 800f938:	f7fe f9d4 	bl	800dce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f93c:	f000 f972 	bl	800fc24 <vPortExitCritical>
}
 800f940:	bf00      	nop
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
 800f946:	bf00      	nop
 800f948:	24000d88 	.word	0x24000d88
 800f94c:	24000d58 	.word	0x24000d58
 800f950:	24000d6c 	.word	0x24000d6c
 800f954:	24000d80 	.word	0x24000d80
 800f958:	24000d84 	.word	0x24000d84
 800f95c:	24000e34 	.word	0x24000e34
 800f960:	24000d94 	.word	0x24000d94
 800f964:	0801c874 	.word	0x0801c874

0800f968 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f968:	b480      	push	{r7}
 800f96a:	b085      	sub	sp, #20
 800f96c:	af00      	add	r7, sp, #0
 800f96e:	60f8      	str	r0, [r7, #12]
 800f970:	60b9      	str	r1, [r7, #8]
 800f972:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	3b04      	subs	r3, #4
 800f978:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	3b04      	subs	r3, #4
 800f986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	f023 0201 	bic.w	r2, r3, #1
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f992:	68fb      	ldr	r3, [r7, #12]
 800f994:	3b04      	subs	r3, #4
 800f996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f998:	4a0c      	ldr	r2, [pc, #48]	; (800f9cc <pxPortInitialiseStack+0x64>)
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	3b14      	subs	r3, #20
 800f9a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f9a4:	687a      	ldr	r2, [r7, #4]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f9aa:	68fb      	ldr	r3, [r7, #12]
 800f9ac:	3b04      	subs	r3, #4
 800f9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f06f 0202 	mvn.w	r2, #2
 800f9b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	3b20      	subs	r3, #32
 800f9bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f9be:	68fb      	ldr	r3, [r7, #12]
}
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr
 800f9cc:	0800f9d1 	.word	0x0800f9d1

0800f9d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f9d0:	b480      	push	{r7}
 800f9d2:	b085      	sub	sp, #20
 800f9d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f9da:	4b12      	ldr	r3, [pc, #72]	; (800fa24 <prvTaskExitError+0x54>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e2:	d00a      	beq.n	800f9fa <prvTaskExitError+0x2a>
	__asm volatile
 800f9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e8:	f383 8811 	msr	BASEPRI, r3
 800f9ec:	f3bf 8f6f 	isb	sy
 800f9f0:	f3bf 8f4f 	dsb	sy
 800f9f4:	60fb      	str	r3, [r7, #12]
}
 800f9f6:	bf00      	nop
 800f9f8:	e7fe      	b.n	800f9f8 <prvTaskExitError+0x28>
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	60bb      	str	r3, [r7, #8]
}
 800fa0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fa0e:	bf00      	nop
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d0fc      	beq.n	800fa10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fa16:	bf00      	nop
 800fa18:	bf00      	nop
 800fa1a:	3714      	adds	r7, #20
 800fa1c:	46bd      	mov	sp, r7
 800fa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa22:	4770      	bx	lr
 800fa24:	2400002c 	.word	0x2400002c
	...

0800fa30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fa30:	4b07      	ldr	r3, [pc, #28]	; (800fa50 <pxCurrentTCBConst2>)
 800fa32:	6819      	ldr	r1, [r3, #0]
 800fa34:	6808      	ldr	r0, [r1, #0]
 800fa36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa3a:	f380 8809 	msr	PSP, r0
 800fa3e:	f3bf 8f6f 	isb	sy
 800fa42:	f04f 0000 	mov.w	r0, #0
 800fa46:	f380 8811 	msr	BASEPRI, r0
 800fa4a:	4770      	bx	lr
 800fa4c:	f3af 8000 	nop.w

0800fa50 <pxCurrentTCBConst2>:
 800fa50:	24000850 	.word	0x24000850
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fa54:	bf00      	nop
 800fa56:	bf00      	nop

0800fa58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fa58:	4808      	ldr	r0, [pc, #32]	; (800fa7c <prvPortStartFirstTask+0x24>)
 800fa5a:	6800      	ldr	r0, [r0, #0]
 800fa5c:	6800      	ldr	r0, [r0, #0]
 800fa5e:	f380 8808 	msr	MSP, r0
 800fa62:	f04f 0000 	mov.w	r0, #0
 800fa66:	f380 8814 	msr	CONTROL, r0
 800fa6a:	b662      	cpsie	i
 800fa6c:	b661      	cpsie	f
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	f3bf 8f6f 	isb	sy
 800fa76:	df00      	svc	0
 800fa78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fa7a:	bf00      	nop
 800fa7c:	e000ed08 	.word	0xe000ed08

0800fa80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fa86:	4b46      	ldr	r3, [pc, #280]	; (800fba0 <xPortStartScheduler+0x120>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a46      	ldr	r2, [pc, #280]	; (800fba4 <xPortStartScheduler+0x124>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d10a      	bne.n	800faa6 <xPortStartScheduler+0x26>
	__asm volatile
 800fa90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa94:	f383 8811 	msr	BASEPRI, r3
 800fa98:	f3bf 8f6f 	isb	sy
 800fa9c:	f3bf 8f4f 	dsb	sy
 800faa0:	613b      	str	r3, [r7, #16]
}
 800faa2:	bf00      	nop
 800faa4:	e7fe      	b.n	800faa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800faa6:	4b3e      	ldr	r3, [pc, #248]	; (800fba0 <xPortStartScheduler+0x120>)
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a3f      	ldr	r2, [pc, #252]	; (800fba8 <xPortStartScheduler+0x128>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d10a      	bne.n	800fac6 <xPortStartScheduler+0x46>
	__asm volatile
 800fab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fab4:	f383 8811 	msr	BASEPRI, r3
 800fab8:	f3bf 8f6f 	isb	sy
 800fabc:	f3bf 8f4f 	dsb	sy
 800fac0:	60fb      	str	r3, [r7, #12]
}
 800fac2:	bf00      	nop
 800fac4:	e7fe      	b.n	800fac4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fac6:	4b39      	ldr	r3, [pc, #228]	; (800fbac <xPortStartScheduler+0x12c>)
 800fac8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800faca:	697b      	ldr	r3, [r7, #20]
 800facc:	781b      	ldrb	r3, [r3, #0]
 800face:	b2db      	uxtb	r3, r3
 800fad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fad2:	697b      	ldr	r3, [r7, #20]
 800fad4:	22ff      	movs	r2, #255	; 0xff
 800fad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fad8:	697b      	ldr	r3, [r7, #20]
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fae0:	78fb      	ldrb	r3, [r7, #3]
 800fae2:	b2db      	uxtb	r3, r3
 800fae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800fae8:	b2da      	uxtb	r2, r3
 800faea:	4b31      	ldr	r3, [pc, #196]	; (800fbb0 <xPortStartScheduler+0x130>)
 800faec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800faee:	4b31      	ldr	r3, [pc, #196]	; (800fbb4 <xPortStartScheduler+0x134>)
 800faf0:	2207      	movs	r2, #7
 800faf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800faf4:	e009      	b.n	800fb0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800faf6:	4b2f      	ldr	r3, [pc, #188]	; (800fbb4 <xPortStartScheduler+0x134>)
 800faf8:	681b      	ldr	r3, [r3, #0]
 800fafa:	3b01      	subs	r3, #1
 800fafc:	4a2d      	ldr	r2, [pc, #180]	; (800fbb4 <xPortStartScheduler+0x134>)
 800fafe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fb00:	78fb      	ldrb	r3, [r7, #3]
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	b2db      	uxtb	r3, r3
 800fb08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fb0a:	78fb      	ldrb	r3, [r7, #3]
 800fb0c:	b2db      	uxtb	r3, r3
 800fb0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb12:	2b80      	cmp	r3, #128	; 0x80
 800fb14:	d0ef      	beq.n	800faf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fb16:	4b27      	ldr	r3, [pc, #156]	; (800fbb4 <xPortStartScheduler+0x134>)
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	f1c3 0307 	rsb	r3, r3, #7
 800fb1e:	2b04      	cmp	r3, #4
 800fb20:	d00a      	beq.n	800fb38 <xPortStartScheduler+0xb8>
	__asm volatile
 800fb22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb26:	f383 8811 	msr	BASEPRI, r3
 800fb2a:	f3bf 8f6f 	isb	sy
 800fb2e:	f3bf 8f4f 	dsb	sy
 800fb32:	60bb      	str	r3, [r7, #8]
}
 800fb34:	bf00      	nop
 800fb36:	e7fe      	b.n	800fb36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800fb38:	4b1e      	ldr	r3, [pc, #120]	; (800fbb4 <xPortStartScheduler+0x134>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	021b      	lsls	r3, r3, #8
 800fb3e:	4a1d      	ldr	r2, [pc, #116]	; (800fbb4 <xPortStartScheduler+0x134>)
 800fb40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800fb42:	4b1c      	ldr	r3, [pc, #112]	; (800fbb4 <xPortStartScheduler+0x134>)
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fb4a:	4a1a      	ldr	r2, [pc, #104]	; (800fbb4 <xPortStartScheduler+0x134>)
 800fb4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	b2da      	uxtb	r2, r3
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fb56:	4b18      	ldr	r3, [pc, #96]	; (800fbb8 <xPortStartScheduler+0x138>)
 800fb58:	681b      	ldr	r3, [r3, #0]
 800fb5a:	4a17      	ldr	r2, [pc, #92]	; (800fbb8 <xPortStartScheduler+0x138>)
 800fb5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800fb60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fb62:	4b15      	ldr	r3, [pc, #84]	; (800fbb8 <xPortStartScheduler+0x138>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	4a14      	ldr	r2, [pc, #80]	; (800fbb8 <xPortStartScheduler+0x138>)
 800fb68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800fb6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fb6e:	f000 f8dd 	bl	800fd2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fb72:	4b12      	ldr	r3, [pc, #72]	; (800fbbc <xPortStartScheduler+0x13c>)
 800fb74:	2200      	movs	r2, #0
 800fb76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800fb78:	f000 f8fc 	bl	800fd74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fb7c:	4b10      	ldr	r3, [pc, #64]	; (800fbc0 <xPortStartScheduler+0x140>)
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	4a0f      	ldr	r2, [pc, #60]	; (800fbc0 <xPortStartScheduler+0x140>)
 800fb82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800fb86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fb88:	f7ff ff66 	bl	800fa58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800fb8c:	f7fe fd1c 	bl	800e5c8 <vTaskSwitchContext>
	prvTaskExitError();
 800fb90:	f7ff ff1e 	bl	800f9d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800fb94:	2300      	movs	r3, #0
}
 800fb96:	4618      	mov	r0, r3
 800fb98:	3718      	adds	r7, #24
 800fb9a:	46bd      	mov	sp, r7
 800fb9c:	bd80      	pop	{r7, pc}
 800fb9e:	bf00      	nop
 800fba0:	e000ed00 	.word	0xe000ed00
 800fba4:	410fc271 	.word	0x410fc271
 800fba8:	410fc270 	.word	0x410fc270
 800fbac:	e000e400 	.word	0xe000e400
 800fbb0:	24000e84 	.word	0x24000e84
 800fbb4:	24000e88 	.word	0x24000e88
 800fbb8:	e000ed20 	.word	0xe000ed20
 800fbbc:	2400002c 	.word	0x2400002c
 800fbc0:	e000ef34 	.word	0xe000ef34

0800fbc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b083      	sub	sp, #12
 800fbc8:	af00      	add	r7, sp, #0
	__asm volatile
 800fbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbce:	f383 8811 	msr	BASEPRI, r3
 800fbd2:	f3bf 8f6f 	isb	sy
 800fbd6:	f3bf 8f4f 	dsb	sy
 800fbda:	607b      	str	r3, [r7, #4]
}
 800fbdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fbde:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <vPortEnterCritical+0x58>)
 800fbe0:	681b      	ldr	r3, [r3, #0]
 800fbe2:	3301      	adds	r3, #1
 800fbe4:	4a0d      	ldr	r2, [pc, #52]	; (800fc1c <vPortEnterCritical+0x58>)
 800fbe6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fbe8:	4b0c      	ldr	r3, [pc, #48]	; (800fc1c <vPortEnterCritical+0x58>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2b01      	cmp	r3, #1
 800fbee:	d10f      	bne.n	800fc10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fbf0:	4b0b      	ldr	r3, [pc, #44]	; (800fc20 <vPortEnterCritical+0x5c>)
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	b2db      	uxtb	r3, r3
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d00a      	beq.n	800fc10 <vPortEnterCritical+0x4c>
	__asm volatile
 800fbfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbfe:	f383 8811 	msr	BASEPRI, r3
 800fc02:	f3bf 8f6f 	isb	sy
 800fc06:	f3bf 8f4f 	dsb	sy
 800fc0a:	603b      	str	r3, [r7, #0]
}
 800fc0c:	bf00      	nop
 800fc0e:	e7fe      	b.n	800fc0e <vPortEnterCritical+0x4a>
	}
}
 800fc10:	bf00      	nop
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr
 800fc1c:	2400002c 	.word	0x2400002c
 800fc20:	e000ed04 	.word	0xe000ed04

0800fc24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fc2a:	4b12      	ldr	r3, [pc, #72]	; (800fc74 <vPortExitCritical+0x50>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d10a      	bne.n	800fc48 <vPortExitCritical+0x24>
	__asm volatile
 800fc32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc36:	f383 8811 	msr	BASEPRI, r3
 800fc3a:	f3bf 8f6f 	isb	sy
 800fc3e:	f3bf 8f4f 	dsb	sy
 800fc42:	607b      	str	r3, [r7, #4]
}
 800fc44:	bf00      	nop
 800fc46:	e7fe      	b.n	800fc46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fc48:	4b0a      	ldr	r3, [pc, #40]	; (800fc74 <vPortExitCritical+0x50>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	3b01      	subs	r3, #1
 800fc4e:	4a09      	ldr	r2, [pc, #36]	; (800fc74 <vPortExitCritical+0x50>)
 800fc50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fc52:	4b08      	ldr	r3, [pc, #32]	; (800fc74 <vPortExitCritical+0x50>)
 800fc54:	681b      	ldr	r3, [r3, #0]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d105      	bne.n	800fc66 <vPortExitCritical+0x42>
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	f383 8811 	msr	BASEPRI, r3
}
 800fc64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fc66:	bf00      	nop
 800fc68:	370c      	adds	r7, #12
 800fc6a:	46bd      	mov	sp, r7
 800fc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc70:	4770      	bx	lr
 800fc72:	bf00      	nop
 800fc74:	2400002c 	.word	0x2400002c
	...

0800fc80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fc80:	f3ef 8009 	mrs	r0, PSP
 800fc84:	f3bf 8f6f 	isb	sy
 800fc88:	4b15      	ldr	r3, [pc, #84]	; (800fce0 <pxCurrentTCBConst>)
 800fc8a:	681a      	ldr	r2, [r3, #0]
 800fc8c:	f01e 0f10 	tst.w	lr, #16
 800fc90:	bf08      	it	eq
 800fc92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fc96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc9a:	6010      	str	r0, [r2, #0]
 800fc9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fca4:	f380 8811 	msr	BASEPRI, r0
 800fca8:	f3bf 8f4f 	dsb	sy
 800fcac:	f3bf 8f6f 	isb	sy
 800fcb0:	f7fe fc8a 	bl	800e5c8 <vTaskSwitchContext>
 800fcb4:	f04f 0000 	mov.w	r0, #0
 800fcb8:	f380 8811 	msr	BASEPRI, r0
 800fcbc:	bc09      	pop	{r0, r3}
 800fcbe:	6819      	ldr	r1, [r3, #0]
 800fcc0:	6808      	ldr	r0, [r1, #0]
 800fcc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc6:	f01e 0f10 	tst.w	lr, #16
 800fcca:	bf08      	it	eq
 800fccc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fcd0:	f380 8809 	msr	PSP, r0
 800fcd4:	f3bf 8f6f 	isb	sy
 800fcd8:	4770      	bx	lr
 800fcda:	bf00      	nop
 800fcdc:	f3af 8000 	nop.w

0800fce0 <pxCurrentTCBConst>:
 800fce0:	24000850 	.word	0x24000850
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fce4:	bf00      	nop
 800fce6:	bf00      	nop

0800fce8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b082      	sub	sp, #8
 800fcec:	af00      	add	r7, sp, #0
	__asm volatile
 800fcee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcf2:	f383 8811 	msr	BASEPRI, r3
 800fcf6:	f3bf 8f6f 	isb	sy
 800fcfa:	f3bf 8f4f 	dsb	sy
 800fcfe:	607b      	str	r3, [r7, #4]
}
 800fd00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fd02:	f7fe fba7 	bl	800e454 <xTaskIncrementTick>
 800fd06:	4603      	mov	r3, r0
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d003      	beq.n	800fd14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fd0c:	4b06      	ldr	r3, [pc, #24]	; (800fd28 <xPortSysTickHandler+0x40>)
 800fd0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd12:	601a      	str	r2, [r3, #0]
 800fd14:	2300      	movs	r3, #0
 800fd16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fd18:	683b      	ldr	r3, [r7, #0]
 800fd1a:	f383 8811 	msr	BASEPRI, r3
}
 800fd1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fd20:	bf00      	nop
 800fd22:	3708      	adds	r7, #8
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	e000ed04 	.word	0xe000ed04

0800fd2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fd30:	4b0b      	ldr	r3, [pc, #44]	; (800fd60 <vPortSetupTimerInterrupt+0x34>)
 800fd32:	2200      	movs	r2, #0
 800fd34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fd36:	4b0b      	ldr	r3, [pc, #44]	; (800fd64 <vPortSetupTimerInterrupt+0x38>)
 800fd38:	2200      	movs	r2, #0
 800fd3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fd3c:	4b0a      	ldr	r3, [pc, #40]	; (800fd68 <vPortSetupTimerInterrupt+0x3c>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4a0a      	ldr	r2, [pc, #40]	; (800fd6c <vPortSetupTimerInterrupt+0x40>)
 800fd42:	fba2 2303 	umull	r2, r3, r2, r3
 800fd46:	095b      	lsrs	r3, r3, #5
 800fd48:	4a09      	ldr	r2, [pc, #36]	; (800fd70 <vPortSetupTimerInterrupt+0x44>)
 800fd4a:	3b01      	subs	r3, #1
 800fd4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fd4e:	4b04      	ldr	r3, [pc, #16]	; (800fd60 <vPortSetupTimerInterrupt+0x34>)
 800fd50:	2207      	movs	r2, #7
 800fd52:	601a      	str	r2, [r3, #0]
}
 800fd54:	bf00      	nop
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr
 800fd5e:	bf00      	nop
 800fd60:	e000e010 	.word	0xe000e010
 800fd64:	e000e018 	.word	0xe000e018
 800fd68:	24000008 	.word	0x24000008
 800fd6c:	51eb851f 	.word	0x51eb851f
 800fd70:	e000e014 	.word	0xe000e014

0800fd74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fd74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fd84 <vPortEnableVFP+0x10>
 800fd78:	6801      	ldr	r1, [r0, #0]
 800fd7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fd7e:	6001      	str	r1, [r0, #0]
 800fd80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fd82:	bf00      	nop
 800fd84:	e000ed88 	.word	0xe000ed88

0800fd88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fd88:	b480      	push	{r7}
 800fd8a:	b085      	sub	sp, #20
 800fd8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fd8e:	f3ef 8305 	mrs	r3, IPSR
 800fd92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	2b0f      	cmp	r3, #15
 800fd98:	d914      	bls.n	800fdc4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fd9a:	4a17      	ldr	r2, [pc, #92]	; (800fdf8 <vPortValidateInterruptPriority+0x70>)
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	4413      	add	r3, r2
 800fda0:	781b      	ldrb	r3, [r3, #0]
 800fda2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fda4:	4b15      	ldr	r3, [pc, #84]	; (800fdfc <vPortValidateInterruptPriority+0x74>)
 800fda6:	781b      	ldrb	r3, [r3, #0]
 800fda8:	7afa      	ldrb	r2, [r7, #11]
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d20a      	bcs.n	800fdc4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fdae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb2:	f383 8811 	msr	BASEPRI, r3
 800fdb6:	f3bf 8f6f 	isb	sy
 800fdba:	f3bf 8f4f 	dsb	sy
 800fdbe:	607b      	str	r3, [r7, #4]
}
 800fdc0:	bf00      	nop
 800fdc2:	e7fe      	b.n	800fdc2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fdc4:	4b0e      	ldr	r3, [pc, #56]	; (800fe00 <vPortValidateInterruptPriority+0x78>)
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fdcc:	4b0d      	ldr	r3, [pc, #52]	; (800fe04 <vPortValidateInterruptPriority+0x7c>)
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	429a      	cmp	r2, r3
 800fdd2:	d90a      	bls.n	800fdea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdd8:	f383 8811 	msr	BASEPRI, r3
 800fddc:	f3bf 8f6f 	isb	sy
 800fde0:	f3bf 8f4f 	dsb	sy
 800fde4:	603b      	str	r3, [r7, #0]
}
 800fde6:	bf00      	nop
 800fde8:	e7fe      	b.n	800fde8 <vPortValidateInterruptPriority+0x60>
	}
 800fdea:	bf00      	nop
 800fdec:	3714      	adds	r7, #20
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdf4:	4770      	bx	lr
 800fdf6:	bf00      	nop
 800fdf8:	e000e3f0 	.word	0xe000e3f0
 800fdfc:	24000e84 	.word	0x24000e84
 800fe00:	e000ed0c 	.word	0xe000ed0c
 800fe04:	24000e88 	.word	0x24000e88

0800fe08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b08a      	sub	sp, #40	; 0x28
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fe10:	2300      	movs	r3, #0
 800fe12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fe14:	f7fe fa50 	bl	800e2b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fe18:	4b5b      	ldr	r3, [pc, #364]	; (800ff88 <pvPortMalloc+0x180>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d101      	bne.n	800fe24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fe20:	f000 f920 	bl	8010064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fe24:	4b59      	ldr	r3, [pc, #356]	; (800ff8c <pvPortMalloc+0x184>)
 800fe26:	681a      	ldr	r2, [r3, #0]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	4013      	ands	r3, r2
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	f040 8093 	bne.w	800ff58 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d01d      	beq.n	800fe74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fe38:	2208      	movs	r2, #8
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f003 0307 	and.w	r3, r3, #7
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d014      	beq.n	800fe74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	f023 0307 	bic.w	r3, r3, #7
 800fe50:	3308      	adds	r3, #8
 800fe52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f003 0307 	and.w	r3, r3, #7
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d00a      	beq.n	800fe74 <pvPortMalloc+0x6c>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	617b      	str	r3, [r7, #20]
}
 800fe70:	bf00      	nop
 800fe72:	e7fe      	b.n	800fe72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d06e      	beq.n	800ff58 <pvPortMalloc+0x150>
 800fe7a:	4b45      	ldr	r3, [pc, #276]	; (800ff90 <pvPortMalloc+0x188>)
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	687a      	ldr	r2, [r7, #4]
 800fe80:	429a      	cmp	r2, r3
 800fe82:	d869      	bhi.n	800ff58 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fe84:	4b43      	ldr	r3, [pc, #268]	; (800ff94 <pvPortMalloc+0x18c>)
 800fe86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fe88:	4b42      	ldr	r3, [pc, #264]	; (800ff94 <pvPortMalloc+0x18c>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe8e:	e004      	b.n	800fe9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fe90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fe94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe96:	681b      	ldr	r3, [r3, #0]
 800fe98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fe9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	687a      	ldr	r2, [r7, #4]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d903      	bls.n	800feac <pvPortMalloc+0xa4>
 800fea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1f1      	bne.n	800fe90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800feac:	4b36      	ldr	r3, [pc, #216]	; (800ff88 <pvPortMalloc+0x180>)
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feb2:	429a      	cmp	r2, r3
 800feb4:	d050      	beq.n	800ff58 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800feb6:	6a3b      	ldr	r3, [r7, #32]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	2208      	movs	r2, #8
 800febc:	4413      	add	r3, r2
 800febe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	6a3b      	ldr	r3, [r7, #32]
 800fec6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feca:	685a      	ldr	r2, [r3, #4]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	1ad2      	subs	r2, r2, r3
 800fed0:	2308      	movs	r3, #8
 800fed2:	005b      	lsls	r3, r3, #1
 800fed4:	429a      	cmp	r2, r3
 800fed6:	d91f      	bls.n	800ff18 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fed8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	4413      	add	r3, r2
 800fede:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fee0:	69bb      	ldr	r3, [r7, #24]
 800fee2:	f003 0307 	and.w	r3, r3, #7
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d00a      	beq.n	800ff00 <pvPortMalloc+0xf8>
	__asm volatile
 800feea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800feee:	f383 8811 	msr	BASEPRI, r3
 800fef2:	f3bf 8f6f 	isb	sy
 800fef6:	f3bf 8f4f 	dsb	sy
 800fefa:	613b      	str	r3, [r7, #16]
}
 800fefc:	bf00      	nop
 800fefe:	e7fe      	b.n	800fefe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ff00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff02:	685a      	ldr	r2, [r3, #4]
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	1ad2      	subs	r2, r2, r3
 800ff08:	69bb      	ldr	r3, [r7, #24]
 800ff0a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ff0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ff12:	69b8      	ldr	r0, [r7, #24]
 800ff14:	f000 f908 	bl	8010128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ff18:	4b1d      	ldr	r3, [pc, #116]	; (800ff90 <pvPortMalloc+0x188>)
 800ff1a:	681a      	ldr	r2, [r3, #0]
 800ff1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	1ad3      	subs	r3, r2, r3
 800ff22:	4a1b      	ldr	r2, [pc, #108]	; (800ff90 <pvPortMalloc+0x188>)
 800ff24:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ff26:	4b1a      	ldr	r3, [pc, #104]	; (800ff90 <pvPortMalloc+0x188>)
 800ff28:	681a      	ldr	r2, [r3, #0]
 800ff2a:	4b1b      	ldr	r3, [pc, #108]	; (800ff98 <pvPortMalloc+0x190>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d203      	bcs.n	800ff3a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ff32:	4b17      	ldr	r3, [pc, #92]	; (800ff90 <pvPortMalloc+0x188>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4a18      	ldr	r2, [pc, #96]	; (800ff98 <pvPortMalloc+0x190>)
 800ff38:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ff3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3c:	685a      	ldr	r2, [r3, #4]
 800ff3e:	4b13      	ldr	r3, [pc, #76]	; (800ff8c <pvPortMalloc+0x184>)
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	431a      	orrs	r2, r3
 800ff44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff46:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ff4e:	4b13      	ldr	r3, [pc, #76]	; (800ff9c <pvPortMalloc+0x194>)
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	3301      	adds	r3, #1
 800ff54:	4a11      	ldr	r2, [pc, #68]	; (800ff9c <pvPortMalloc+0x194>)
 800ff56:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ff58:	f7fe f9bc 	bl	800e2d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ff5c:	69fb      	ldr	r3, [r7, #28]
 800ff5e:	f003 0307 	and.w	r3, r3, #7
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d00a      	beq.n	800ff7c <pvPortMalloc+0x174>
	__asm volatile
 800ff66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	60fb      	str	r3, [r7, #12]
}
 800ff78:	bf00      	nop
 800ff7a:	e7fe      	b.n	800ff7a <pvPortMalloc+0x172>
	return pvReturn;
 800ff7c:	69fb      	ldr	r3, [r7, #28]
}
 800ff7e:	4618      	mov	r0, r3
 800ff80:	3728      	adds	r7, #40	; 0x28
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	24004a94 	.word	0x24004a94
 800ff8c:	24004aa8 	.word	0x24004aa8
 800ff90:	24004a98 	.word	0x24004a98
 800ff94:	24004a8c 	.word	0x24004a8c
 800ff98:	24004a9c 	.word	0x24004a9c
 800ff9c:	24004aa0 	.word	0x24004aa0

0800ffa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ffa0:	b580      	push	{r7, lr}
 800ffa2:	b086      	sub	sp, #24
 800ffa4:	af00      	add	r7, sp, #0
 800ffa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d04d      	beq.n	801004e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ffb2:	2308      	movs	r3, #8
 800ffb4:	425b      	negs	r3, r3
 800ffb6:	697a      	ldr	r2, [r7, #20]
 800ffb8:	4413      	add	r3, r2
 800ffba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	685a      	ldr	r2, [r3, #4]
 800ffc4:	4b24      	ldr	r3, [pc, #144]	; (8010058 <vPortFree+0xb8>)
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	4013      	ands	r3, r2
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d10a      	bne.n	800ffe4 <vPortFree+0x44>
	__asm volatile
 800ffce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd2:	f383 8811 	msr	BASEPRI, r3
 800ffd6:	f3bf 8f6f 	isb	sy
 800ffda:	f3bf 8f4f 	dsb	sy
 800ffde:	60fb      	str	r3, [r7, #12]
}
 800ffe0:	bf00      	nop
 800ffe2:	e7fe      	b.n	800ffe2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	681b      	ldr	r3, [r3, #0]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d00a      	beq.n	8010002 <vPortFree+0x62>
	__asm volatile
 800ffec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fff0:	f383 8811 	msr	BASEPRI, r3
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	f3bf 8f4f 	dsb	sy
 800fffc:	60bb      	str	r3, [r7, #8]
}
 800fffe:	bf00      	nop
 8010000:	e7fe      	b.n	8010000 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010002:	693b      	ldr	r3, [r7, #16]
 8010004:	685a      	ldr	r2, [r3, #4]
 8010006:	4b14      	ldr	r3, [pc, #80]	; (8010058 <vPortFree+0xb8>)
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	4013      	ands	r3, r2
 801000c:	2b00      	cmp	r3, #0
 801000e:	d01e      	beq.n	801004e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010010:	693b      	ldr	r3, [r7, #16]
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d11a      	bne.n	801004e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	685a      	ldr	r2, [r3, #4]
 801001c:	4b0e      	ldr	r3, [pc, #56]	; (8010058 <vPortFree+0xb8>)
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	43db      	mvns	r3, r3
 8010022:	401a      	ands	r2, r3
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010028:	f7fe f946 	bl	800e2b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	685a      	ldr	r2, [r3, #4]
 8010030:	4b0a      	ldr	r3, [pc, #40]	; (801005c <vPortFree+0xbc>)
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	4413      	add	r3, r2
 8010036:	4a09      	ldr	r2, [pc, #36]	; (801005c <vPortFree+0xbc>)
 8010038:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801003a:	6938      	ldr	r0, [r7, #16]
 801003c:	f000 f874 	bl	8010128 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010040:	4b07      	ldr	r3, [pc, #28]	; (8010060 <vPortFree+0xc0>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	3301      	adds	r3, #1
 8010046:	4a06      	ldr	r2, [pc, #24]	; (8010060 <vPortFree+0xc0>)
 8010048:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801004a:	f7fe f943 	bl	800e2d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801004e:	bf00      	nop
 8010050:	3718      	adds	r7, #24
 8010052:	46bd      	mov	sp, r7
 8010054:	bd80      	pop	{r7, pc}
 8010056:	bf00      	nop
 8010058:	24004aa8 	.word	0x24004aa8
 801005c:	24004a98 	.word	0x24004a98
 8010060:	24004aa4 	.word	0x24004aa4

08010064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801006a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801006e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010070:	4b27      	ldr	r3, [pc, #156]	; (8010110 <prvHeapInit+0xac>)
 8010072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	f003 0307 	and.w	r3, r3, #7
 801007a:	2b00      	cmp	r3, #0
 801007c:	d00c      	beq.n	8010098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	3307      	adds	r3, #7
 8010082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	f023 0307 	bic.w	r3, r3, #7
 801008a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801008c:	68ba      	ldr	r2, [r7, #8]
 801008e:	68fb      	ldr	r3, [r7, #12]
 8010090:	1ad3      	subs	r3, r2, r3
 8010092:	4a1f      	ldr	r2, [pc, #124]	; (8010110 <prvHeapInit+0xac>)
 8010094:	4413      	add	r3, r2
 8010096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801009c:	4a1d      	ldr	r2, [pc, #116]	; (8010114 <prvHeapInit+0xb0>)
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80100a2:	4b1c      	ldr	r3, [pc, #112]	; (8010114 <prvHeapInit+0xb0>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	68ba      	ldr	r2, [r7, #8]
 80100ac:	4413      	add	r3, r2
 80100ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80100b0:	2208      	movs	r2, #8
 80100b2:	68fb      	ldr	r3, [r7, #12]
 80100b4:	1a9b      	subs	r3, r3, r2
 80100b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f023 0307 	bic.w	r3, r3, #7
 80100be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	4a15      	ldr	r2, [pc, #84]	; (8010118 <prvHeapInit+0xb4>)
 80100c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80100c6:	4b14      	ldr	r3, [pc, #80]	; (8010118 <prvHeapInit+0xb4>)
 80100c8:	681b      	ldr	r3, [r3, #0]
 80100ca:	2200      	movs	r2, #0
 80100cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80100ce:	4b12      	ldr	r3, [pc, #72]	; (8010118 <prvHeapInit+0xb4>)
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	2200      	movs	r2, #0
 80100d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	68fa      	ldr	r2, [r7, #12]
 80100de:	1ad2      	subs	r2, r2, r3
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80100e4:	4b0c      	ldr	r3, [pc, #48]	; (8010118 <prvHeapInit+0xb4>)
 80100e6:	681a      	ldr	r2, [r3, #0]
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	4a0a      	ldr	r2, [pc, #40]	; (801011c <prvHeapInit+0xb8>)
 80100f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80100f4:	683b      	ldr	r3, [r7, #0]
 80100f6:	685b      	ldr	r3, [r3, #4]
 80100f8:	4a09      	ldr	r2, [pc, #36]	; (8010120 <prvHeapInit+0xbc>)
 80100fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80100fc:	4b09      	ldr	r3, [pc, #36]	; (8010124 <prvHeapInit+0xc0>)
 80100fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010102:	601a      	str	r2, [r3, #0]
}
 8010104:	bf00      	nop
 8010106:	3714      	adds	r7, #20
 8010108:	46bd      	mov	sp, r7
 801010a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010e:	4770      	bx	lr
 8010110:	24000e8c 	.word	0x24000e8c
 8010114:	24004a8c 	.word	0x24004a8c
 8010118:	24004a94 	.word	0x24004a94
 801011c:	24004a9c 	.word	0x24004a9c
 8010120:	24004a98 	.word	0x24004a98
 8010124:	24004aa8 	.word	0x24004aa8

08010128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010128:	b480      	push	{r7}
 801012a:	b085      	sub	sp, #20
 801012c:	af00      	add	r7, sp, #0
 801012e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010130:	4b28      	ldr	r3, [pc, #160]	; (80101d4 <prvInsertBlockIntoFreeList+0xac>)
 8010132:	60fb      	str	r3, [r7, #12]
 8010134:	e002      	b.n	801013c <prvInsertBlockIntoFreeList+0x14>
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	60fb      	str	r3, [r7, #12]
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	429a      	cmp	r2, r3
 8010144:	d8f7      	bhi.n	8010136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010146:	68fb      	ldr	r3, [r7, #12]
 8010148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	685b      	ldr	r3, [r3, #4]
 801014e:	68ba      	ldr	r2, [r7, #8]
 8010150:	4413      	add	r3, r2
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	429a      	cmp	r2, r3
 8010156:	d108      	bne.n	801016a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010158:	68fb      	ldr	r3, [r7, #12]
 801015a:	685a      	ldr	r2, [r3, #4]
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	685b      	ldr	r3, [r3, #4]
 8010160:	441a      	add	r2, r3
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	685b      	ldr	r3, [r3, #4]
 8010172:	68ba      	ldr	r2, [r7, #8]
 8010174:	441a      	add	r2, r3
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	429a      	cmp	r2, r3
 801017c:	d118      	bne.n	80101b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681a      	ldr	r2, [r3, #0]
 8010182:	4b15      	ldr	r3, [pc, #84]	; (80101d8 <prvInsertBlockIntoFreeList+0xb0>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	429a      	cmp	r2, r3
 8010188:	d00d      	beq.n	80101a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	685a      	ldr	r2, [r3, #4]
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	685b      	ldr	r3, [r3, #4]
 8010194:	441a      	add	r2, r3
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801019a:	68fb      	ldr	r3, [r7, #12]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	681a      	ldr	r2, [r3, #0]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	601a      	str	r2, [r3, #0]
 80101a4:	e008      	b.n	80101b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80101a6:	4b0c      	ldr	r3, [pc, #48]	; (80101d8 <prvInsertBlockIntoFreeList+0xb0>)
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	601a      	str	r2, [r3, #0]
 80101ae:	e003      	b.n	80101b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	681a      	ldr	r2, [r3, #0]
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80101b8:	68fa      	ldr	r2, [r7, #12]
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d002      	beq.n	80101c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	687a      	ldr	r2, [r7, #4]
 80101c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101c6:	bf00      	nop
 80101c8:	3714      	adds	r7, #20
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr
 80101d2:	bf00      	nop
 80101d4:	24004a8c 	.word	0x24004a8c
 80101d8:	24004a94 	.word	0x24004a94

080101dc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
 80101e4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80101e6:	f008 fa81 	bl	80186ec <sys_timeouts_sleeptime>
 80101ea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80101f2:	d10b      	bne.n	801020c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80101f4:	4813      	ldr	r0, [pc, #76]	; (8010244 <tcpip_timeouts_mbox_fetch+0x68>)
 80101f6:	f00b f88a 	bl	801b30e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80101fa:	2200      	movs	r2, #0
 80101fc:	6839      	ldr	r1, [r7, #0]
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f00b f812 	bl	801b228 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010204:	480f      	ldr	r0, [pc, #60]	; (8010244 <tcpip_timeouts_mbox_fetch+0x68>)
 8010206:	f00b f873 	bl	801b2f0 <sys_mutex_lock>
    return;
 801020a:	e018      	b.n	801023e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2b00      	cmp	r3, #0
 8010210:	d102      	bne.n	8010218 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8010212:	f008 fa31 	bl	8018678 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010216:	e7e6      	b.n	80101e6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010218:	480a      	ldr	r0, [pc, #40]	; (8010244 <tcpip_timeouts_mbox_fetch+0x68>)
 801021a:	f00b f878 	bl	801b30e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801021e:	68fa      	ldr	r2, [r7, #12]
 8010220:	6839      	ldr	r1, [r7, #0]
 8010222:	6878      	ldr	r0, [r7, #4]
 8010224:	f00b f800 	bl	801b228 <sys_arch_mbox_fetch>
 8010228:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801022a:	4806      	ldr	r0, [pc, #24]	; (8010244 <tcpip_timeouts_mbox_fetch+0x68>)
 801022c:	f00b f860 	bl	801b2f0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8010230:	68bb      	ldr	r3, [r7, #8]
 8010232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010236:	d102      	bne.n	801023e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8010238:	f008 fa1e 	bl	8018678 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801023c:	e7d3      	b.n	80101e6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801023e:	3710      	adds	r7, #16
 8010240:	46bd      	mov	sp, r7
 8010242:	bd80      	pop	{r7, pc}
 8010244:	24005218 	.word	0x24005218

08010248 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b084      	sub	sp, #16
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8010250:	4810      	ldr	r0, [pc, #64]	; (8010294 <tcpip_thread+0x4c>)
 8010252:	f00b f84d 	bl	801b2f0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8010256:	4b10      	ldr	r3, [pc, #64]	; (8010298 <tcpip_thread+0x50>)
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2b00      	cmp	r3, #0
 801025c:	d005      	beq.n	801026a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801025e:	4b0e      	ldr	r3, [pc, #56]	; (8010298 <tcpip_thread+0x50>)
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	4a0e      	ldr	r2, [pc, #56]	; (801029c <tcpip_thread+0x54>)
 8010264:	6812      	ldr	r2, [r2, #0]
 8010266:	4610      	mov	r0, r2
 8010268:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801026a:	f107 030c 	add.w	r3, r7, #12
 801026e:	4619      	mov	r1, r3
 8010270:	480b      	ldr	r0, [pc, #44]	; (80102a0 <tcpip_thread+0x58>)
 8010272:	f7ff ffb3 	bl	80101dc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d106      	bne.n	801028a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801027c:	4b09      	ldr	r3, [pc, #36]	; (80102a4 <tcpip_thread+0x5c>)
 801027e:	2291      	movs	r2, #145	; 0x91
 8010280:	4909      	ldr	r1, [pc, #36]	; (80102a8 <tcpip_thread+0x60>)
 8010282:	480a      	ldr	r0, [pc, #40]	; (80102ac <tcpip_thread+0x64>)
 8010284:	f00b fa2a 	bl	801b6dc <iprintf>
      continue;
 8010288:	e003      	b.n	8010292 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	4618      	mov	r0, r3
 801028e:	f000 f80f 	bl	80102b0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8010292:	e7ea      	b.n	801026a <tcpip_thread+0x22>
 8010294:	24005218 	.word	0x24005218
 8010298:	24004aac 	.word	0x24004aac
 801029c:	24004ab0 	.word	0x24004ab0
 80102a0:	24004ab4 	.word	0x24004ab4
 80102a4:	0801c87c 	.word	0x0801c87c
 80102a8:	0801c8ac 	.word	0x0801c8ac
 80102ac:	0801c8cc 	.word	0x0801c8cc

080102b0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	781b      	ldrb	r3, [r3, #0]
 80102bc:	2b02      	cmp	r3, #2
 80102be:	d026      	beq.n	801030e <tcpip_thread_handle_msg+0x5e>
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	dc2b      	bgt.n	801031c <tcpip_thread_handle_msg+0x6c>
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d002      	beq.n	80102ce <tcpip_thread_handle_msg+0x1e>
 80102c8:	2b01      	cmp	r3, #1
 80102ca:	d015      	beq.n	80102f8 <tcpip_thread_handle_msg+0x48>
 80102cc:	e026      	b.n	801031c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	68db      	ldr	r3, [r3, #12]
 80102d2:	687a      	ldr	r2, [r7, #4]
 80102d4:	6850      	ldr	r0, [r2, #4]
 80102d6:	687a      	ldr	r2, [r7, #4]
 80102d8:	6892      	ldr	r2, [r2, #8]
 80102da:	4611      	mov	r1, r2
 80102dc:	4798      	blx	r3
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d004      	beq.n	80102ee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f001 fdc3 	bl	8011e74 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80102ee:	6879      	ldr	r1, [r7, #4]
 80102f0:	2009      	movs	r0, #9
 80102f2:	f000 ff1b 	bl	801112c <memp_free>
      break;
 80102f6:	e018      	b.n	801032a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	687a      	ldr	r2, [r7, #4]
 80102fe:	6892      	ldr	r2, [r2, #8]
 8010300:	4610      	mov	r0, r2
 8010302:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010304:	6879      	ldr	r1, [r7, #4]
 8010306:	2008      	movs	r0, #8
 8010308:	f000 ff10 	bl	801112c <memp_free>
      break;
 801030c:	e00d      	b.n	801032a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	685b      	ldr	r3, [r3, #4]
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	6892      	ldr	r2, [r2, #8]
 8010316:	4610      	mov	r0, r2
 8010318:	4798      	blx	r3
      break;
 801031a:	e006      	b.n	801032a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801031c:	4b05      	ldr	r3, [pc, #20]	; (8010334 <tcpip_thread_handle_msg+0x84>)
 801031e:	22cf      	movs	r2, #207	; 0xcf
 8010320:	4905      	ldr	r1, [pc, #20]	; (8010338 <tcpip_thread_handle_msg+0x88>)
 8010322:	4806      	ldr	r0, [pc, #24]	; (801033c <tcpip_thread_handle_msg+0x8c>)
 8010324:	f00b f9da 	bl	801b6dc <iprintf>
      break;
 8010328:	bf00      	nop
  }
}
 801032a:	bf00      	nop
 801032c:	3708      	adds	r7, #8
 801032e:	46bd      	mov	sp, r7
 8010330:	bd80      	pop	{r7, pc}
 8010332:	bf00      	nop
 8010334:	0801c87c 	.word	0x0801c87c
 8010338:	0801c8ac 	.word	0x0801c8ac
 801033c:	0801c8cc 	.word	0x0801c8cc

08010340 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b086      	sub	sp, #24
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801034c:	481a      	ldr	r0, [pc, #104]	; (80103b8 <tcpip_inpkt+0x78>)
 801034e:	f00a ff9c 	bl	801b28a <sys_mbox_valid>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d105      	bne.n	8010364 <tcpip_inpkt+0x24>
 8010358:	4b18      	ldr	r3, [pc, #96]	; (80103bc <tcpip_inpkt+0x7c>)
 801035a:	22fc      	movs	r2, #252	; 0xfc
 801035c:	4918      	ldr	r1, [pc, #96]	; (80103c0 <tcpip_inpkt+0x80>)
 801035e:	4819      	ldr	r0, [pc, #100]	; (80103c4 <tcpip_inpkt+0x84>)
 8010360:	f00b f9bc 	bl	801b6dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8010364:	2009      	movs	r0, #9
 8010366:	f000 fe6b 	bl	8011040 <memp_malloc>
 801036a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d102      	bne.n	8010378 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8010372:	f04f 33ff 	mov.w	r3, #4294967295
 8010376:	e01a      	b.n	80103ae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	2200      	movs	r2, #0
 801037c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801037e:	697b      	ldr	r3, [r7, #20]
 8010380:	68fa      	ldr	r2, [r7, #12]
 8010382:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010384:	697b      	ldr	r3, [r7, #20]
 8010386:	68ba      	ldr	r2, [r7, #8]
 8010388:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801038a:	697b      	ldr	r3, [r7, #20]
 801038c:	687a      	ldr	r2, [r7, #4]
 801038e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010390:	6979      	ldr	r1, [r7, #20]
 8010392:	4809      	ldr	r0, [pc, #36]	; (80103b8 <tcpip_inpkt+0x78>)
 8010394:	f00a ff2e 	bl	801b1f4 <sys_mbox_trypost>
 8010398:	4603      	mov	r3, r0
 801039a:	2b00      	cmp	r3, #0
 801039c:	d006      	beq.n	80103ac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801039e:	6979      	ldr	r1, [r7, #20]
 80103a0:	2009      	movs	r0, #9
 80103a2:	f000 fec3 	bl	801112c <memp_free>
    return ERR_MEM;
 80103a6:	f04f 33ff 	mov.w	r3, #4294967295
 80103aa:	e000      	b.n	80103ae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 80103ac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 80103ae:	4618      	mov	r0, r3
 80103b0:	3718      	adds	r7, #24
 80103b2:	46bd      	mov	sp, r7
 80103b4:	bd80      	pop	{r7, pc}
 80103b6:	bf00      	nop
 80103b8:	24004ab4 	.word	0x24004ab4
 80103bc:	0801c87c 	.word	0x0801c87c
 80103c0:	0801c8f4 	.word	0x0801c8f4
 80103c4:	0801c8cc 	.word	0x0801c8cc

080103c8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80103d8:	f003 0318 	and.w	r3, r3, #24
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d006      	beq.n	80103ee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80103e0:	4a08      	ldr	r2, [pc, #32]	; (8010404 <tcpip_input+0x3c>)
 80103e2:	6839      	ldr	r1, [r7, #0]
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f7ff ffab 	bl	8010340 <tcpip_inpkt>
 80103ea:	4603      	mov	r3, r0
 80103ec:	e005      	b.n	80103fa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80103ee:	4a06      	ldr	r2, [pc, #24]	; (8010408 <tcpip_input+0x40>)
 80103f0:	6839      	ldr	r1, [r7, #0]
 80103f2:	6878      	ldr	r0, [r7, #4]
 80103f4:	f7ff ffa4 	bl	8010340 <tcpip_inpkt>
 80103f8:	4603      	mov	r3, r0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3708      	adds	r7, #8
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop
 8010404:	0801b015 	.word	0x0801b015
 8010408:	08019e05 	.word	0x08019e05

0801040c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010416:	4819      	ldr	r0, [pc, #100]	; (801047c <tcpip_try_callback+0x70>)
 8010418:	f00a ff37 	bl	801b28a <sys_mbox_valid>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d106      	bne.n	8010430 <tcpip_try_callback+0x24>
 8010422:	4b17      	ldr	r3, [pc, #92]	; (8010480 <tcpip_try_callback+0x74>)
 8010424:	f240 125d 	movw	r2, #349	; 0x15d
 8010428:	4916      	ldr	r1, [pc, #88]	; (8010484 <tcpip_try_callback+0x78>)
 801042a:	4817      	ldr	r0, [pc, #92]	; (8010488 <tcpip_try_callback+0x7c>)
 801042c:	f00b f956 	bl	801b6dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8010430:	2008      	movs	r0, #8
 8010432:	f000 fe05 	bl	8011040 <memp_malloc>
 8010436:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d102      	bne.n	8010444 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801043e:	f04f 33ff 	mov.w	r3, #4294967295
 8010442:	e017      	b.n	8010474 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	2201      	movs	r2, #1
 8010448:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801044a:	68fb      	ldr	r3, [r7, #12]
 801044c:	687a      	ldr	r2, [r7, #4]
 801044e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	683a      	ldr	r2, [r7, #0]
 8010454:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8010456:	68f9      	ldr	r1, [r7, #12]
 8010458:	4808      	ldr	r0, [pc, #32]	; (801047c <tcpip_try_callback+0x70>)
 801045a:	f00a fecb 	bl	801b1f4 <sys_mbox_trypost>
 801045e:	4603      	mov	r3, r0
 8010460:	2b00      	cmp	r3, #0
 8010462:	d006      	beq.n	8010472 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8010464:	68f9      	ldr	r1, [r7, #12]
 8010466:	2008      	movs	r0, #8
 8010468:	f000 fe60 	bl	801112c <memp_free>
    return ERR_MEM;
 801046c:	f04f 33ff 	mov.w	r3, #4294967295
 8010470:	e000      	b.n	8010474 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8010472:	2300      	movs	r3, #0
}
 8010474:	4618      	mov	r0, r3
 8010476:	3710      	adds	r7, #16
 8010478:	46bd      	mov	sp, r7
 801047a:	bd80      	pop	{r7, pc}
 801047c:	24004ab4 	.word	0x24004ab4
 8010480:	0801c87c 	.word	0x0801c87c
 8010484:	0801c8f4 	.word	0x0801c8f4
 8010488:	0801c8cc 	.word	0x0801c8cc

0801048c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	b084      	sub	sp, #16
 8010490:	af02      	add	r7, sp, #8
 8010492:	6078      	str	r0, [r7, #4]
 8010494:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010496:	f000 f92d 	bl	80106f4 <lwip_init>

  tcpip_init_done = initfunc;
 801049a:	4a17      	ldr	r2, [pc, #92]	; (80104f8 <tcpip_init+0x6c>)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80104a0:	4a16      	ldr	r2, [pc, #88]	; (80104fc <tcpip_init+0x70>)
 80104a2:	683b      	ldr	r3, [r7, #0]
 80104a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80104a6:	2106      	movs	r1, #6
 80104a8:	4815      	ldr	r0, [pc, #84]	; (8010500 <tcpip_init+0x74>)
 80104aa:	f00a fe89 	bl	801b1c0 <sys_mbox_new>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d006      	beq.n	80104c2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80104b4:	4b13      	ldr	r3, [pc, #76]	; (8010504 <tcpip_init+0x78>)
 80104b6:	f240 2261 	movw	r2, #609	; 0x261
 80104ba:	4913      	ldr	r1, [pc, #76]	; (8010508 <tcpip_init+0x7c>)
 80104bc:	4813      	ldr	r0, [pc, #76]	; (801050c <tcpip_init+0x80>)
 80104be:	f00b f90d 	bl	801b6dc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80104c2:	4813      	ldr	r0, [pc, #76]	; (8010510 <tcpip_init+0x84>)
 80104c4:	f00a fefe 	bl	801b2c4 <sys_mutex_new>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d006      	beq.n	80104dc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80104ce:	4b0d      	ldr	r3, [pc, #52]	; (8010504 <tcpip_init+0x78>)
 80104d0:	f240 2265 	movw	r2, #613	; 0x265
 80104d4:	490f      	ldr	r1, [pc, #60]	; (8010514 <tcpip_init+0x88>)
 80104d6:	480d      	ldr	r0, [pc, #52]	; (801050c <tcpip_init+0x80>)
 80104d8:	f00b f900 	bl	801b6dc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80104dc:	2318      	movs	r3, #24
 80104de:	9300      	str	r3, [sp, #0]
 80104e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104e4:	2200      	movs	r2, #0
 80104e6:	490c      	ldr	r1, [pc, #48]	; (8010518 <tcpip_init+0x8c>)
 80104e8:	480c      	ldr	r0, [pc, #48]	; (801051c <tcpip_init+0x90>)
 80104ea:	f00a ff1d 	bl	801b328 <sys_thread_new>
}
 80104ee:	bf00      	nop
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	24004aac 	.word	0x24004aac
 80104fc:	24004ab0 	.word	0x24004ab0
 8010500:	24004ab4 	.word	0x24004ab4
 8010504:	0801c87c 	.word	0x0801c87c
 8010508:	0801c904 	.word	0x0801c904
 801050c:	0801c8cc 	.word	0x0801c8cc
 8010510:	24005218 	.word	0x24005218
 8010514:	0801c928 	.word	0x0801c928
 8010518:	08010249 	.word	0x08010249
 801051c:	0801c94c 	.word	0x0801c94c

08010520 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8010520:	b480      	push	{r7}
 8010522:	b083      	sub	sp, #12
 8010524:	af00      	add	r7, sp, #0
 8010526:	4603      	mov	r3, r0
 8010528:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801052a:	88fb      	ldrh	r3, [r7, #6]
 801052c:	021b      	lsls	r3, r3, #8
 801052e:	b21a      	sxth	r2, r3
 8010530:	88fb      	ldrh	r3, [r7, #6]
 8010532:	0a1b      	lsrs	r3, r3, #8
 8010534:	b29b      	uxth	r3, r3
 8010536:	b21b      	sxth	r3, r3
 8010538:	4313      	orrs	r3, r2
 801053a:	b21b      	sxth	r3, r3
 801053c:	b29b      	uxth	r3, r3
}
 801053e:	4618      	mov	r0, r3
 8010540:	370c      	adds	r7, #12
 8010542:	46bd      	mov	sp, r7
 8010544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010548:	4770      	bx	lr

0801054a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 801054a:	b480      	push	{r7}
 801054c:	b083      	sub	sp, #12
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	061a      	lsls	r2, r3, #24
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	021b      	lsls	r3, r3, #8
 801055a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801055e:	431a      	orrs	r2, r3
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	0a1b      	lsrs	r3, r3, #8
 8010564:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8010568:	431a      	orrs	r2, r3
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	0e1b      	lsrs	r3, r3, #24
 801056e:	4313      	orrs	r3, r2
}
 8010570:	4618      	mov	r0, r3
 8010572:	370c      	adds	r7, #12
 8010574:	46bd      	mov	sp, r7
 8010576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801057a:	4770      	bx	lr

0801057c <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 801057c:	b480      	push	{r7}
 801057e:	b089      	sub	sp, #36	; 0x24
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 801058a:	2300      	movs	r3, #0
 801058c:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 801058e:	2300      	movs	r3, #0
 8010590:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 8010592:	69fb      	ldr	r3, [r7, #28]
 8010594:	f003 0301 	and.w	r3, r3, #1
 8010598:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 801059a:	693b      	ldr	r3, [r7, #16]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d00d      	beq.n	80105bc <lwip_standard_chksum+0x40>
 80105a0:	683b      	ldr	r3, [r7, #0]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	dd0a      	ble.n	80105bc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 80105a6:	69fa      	ldr	r2, [r7, #28]
 80105a8:	1c53      	adds	r3, r2, #1
 80105aa:	61fb      	str	r3, [r7, #28]
 80105ac:	f107 030e 	add.w	r3, r7, #14
 80105b0:	3301      	adds	r3, #1
 80105b2:	7812      	ldrb	r2, [r2, #0]
 80105b4:	701a      	strb	r2, [r3, #0]
    len--;
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	3b01      	subs	r3, #1
 80105ba:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 80105bc:	69fb      	ldr	r3, [r7, #28]
 80105be:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 80105c0:	e00a      	b.n	80105d8 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 80105c2:	69bb      	ldr	r3, [r7, #24]
 80105c4:	1c9a      	adds	r2, r3, #2
 80105c6:	61ba      	str	r2, [r7, #24]
 80105c8:	881b      	ldrh	r3, [r3, #0]
 80105ca:	461a      	mov	r2, r3
 80105cc:	697b      	ldr	r3, [r7, #20]
 80105ce:	4413      	add	r3, r2
 80105d0:	617b      	str	r3, [r7, #20]
    len -= 2;
 80105d2:	683b      	ldr	r3, [r7, #0]
 80105d4:	3b02      	subs	r3, #2
 80105d6:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 80105d8:	683b      	ldr	r3, [r7, #0]
 80105da:	2b01      	cmp	r3, #1
 80105dc:	dcf1      	bgt.n	80105c2 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80105de:	683b      	ldr	r3, [r7, #0]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	dd04      	ble.n	80105ee <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80105e4:	f107 030e 	add.w	r3, r7, #14
 80105e8:	69ba      	ldr	r2, [r7, #24]
 80105ea:	7812      	ldrb	r2, [r2, #0]
 80105ec:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 80105ee:	89fb      	ldrh	r3, [r7, #14]
 80105f0:	461a      	mov	r2, r3
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	4413      	add	r3, r2
 80105f6:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80105f8:	697b      	ldr	r3, [r7, #20]
 80105fa:	0c1a      	lsrs	r2, r3, #16
 80105fc:	697b      	ldr	r3, [r7, #20]
 80105fe:	b29b      	uxth	r3, r3
 8010600:	4413      	add	r3, r2
 8010602:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 8010604:	697b      	ldr	r3, [r7, #20]
 8010606:	0c1a      	lsrs	r2, r3, #16
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	b29b      	uxth	r3, r3
 801060c:	4413      	add	r3, r2
 801060e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	2b00      	cmp	r3, #0
 8010614:	d007      	beq.n	8010626 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	021b      	lsls	r3, r3, #8
 801061a:	b29a      	uxth	r2, r3
 801061c:	697b      	ldr	r3, [r7, #20]
 801061e:	0a1b      	lsrs	r3, r3, #8
 8010620:	b2db      	uxtb	r3, r3
 8010622:	4313      	orrs	r3, r2
 8010624:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 8010626:	697b      	ldr	r3, [r7, #20]
 8010628:	b29b      	uxth	r3, r3
}
 801062a:	4618      	mov	r0, r3
 801062c:	3724      	adds	r7, #36	; 0x24
 801062e:	46bd      	mov	sp, r7
 8010630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010634:	4770      	bx	lr

08010636 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8010636:	b580      	push	{r7, lr}
 8010638:	b082      	sub	sp, #8
 801063a:	af00      	add	r7, sp, #0
 801063c:	6078      	str	r0, [r7, #4]
 801063e:	460b      	mov	r3, r1
 8010640:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8010642:	887b      	ldrh	r3, [r7, #2]
 8010644:	4619      	mov	r1, r3
 8010646:	6878      	ldr	r0, [r7, #4]
 8010648:	f7ff ff98 	bl	801057c <lwip_standard_chksum>
 801064c:	4603      	mov	r3, r0
 801064e:	43db      	mvns	r3, r3
 8010650:	b29b      	uxth	r3, r3
}
 8010652:	4618      	mov	r0, r3
 8010654:	3708      	adds	r7, #8
 8010656:	46bd      	mov	sp, r7
 8010658:	bd80      	pop	{r7, pc}

0801065a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 801065a:	b580      	push	{r7, lr}
 801065c:	b086      	sub	sp, #24
 801065e:	af00      	add	r7, sp, #0
 8010660:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 8010662:	2300      	movs	r3, #0
 8010664:	60fb      	str	r3, [r7, #12]

  acc = 0;
 8010666:	2300      	movs	r3, #0
 8010668:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	613b      	str	r3, [r7, #16]
 801066e:	e02b      	b.n	80106c8 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 8010670:	693b      	ldr	r3, [r7, #16]
 8010672:	685a      	ldr	r2, [r3, #4]
 8010674:	693b      	ldr	r3, [r7, #16]
 8010676:	895b      	ldrh	r3, [r3, #10]
 8010678:	4619      	mov	r1, r3
 801067a:	4610      	mov	r0, r2
 801067c:	f7ff ff7e 	bl	801057c <lwip_standard_chksum>
 8010680:	4603      	mov	r3, r0
 8010682:	461a      	mov	r2, r3
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	4413      	add	r3, r2
 8010688:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 801068a:	697b      	ldr	r3, [r7, #20]
 801068c:	0c1a      	lsrs	r2, r3, #16
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	b29b      	uxth	r3, r3
 8010692:	4413      	add	r3, r2
 8010694:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	895b      	ldrh	r3, [r3, #10]
 801069a:	f003 0301 	and.w	r3, r3, #1
 801069e:	b29b      	uxth	r3, r3
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d00e      	beq.n	80106c2 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	bf0c      	ite	eq
 80106aa:	2301      	moveq	r3, #1
 80106ac:	2300      	movne	r3, #0
 80106ae:	b2db      	uxtb	r3, r3
 80106b0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 80106b2:	697b      	ldr	r3, [r7, #20]
 80106b4:	021b      	lsls	r3, r3, #8
 80106b6:	b29a      	uxth	r2, r3
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	0a1b      	lsrs	r3, r3, #8
 80106bc:	b2db      	uxtb	r3, r3
 80106be:	4313      	orrs	r3, r2
 80106c0:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	613b      	str	r3, [r7, #16]
 80106c8:	693b      	ldr	r3, [r7, #16]
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	d1d0      	bne.n	8010670 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d007      	beq.n	80106e4 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 80106d4:	697b      	ldr	r3, [r7, #20]
 80106d6:	021b      	lsls	r3, r3, #8
 80106d8:	b29a      	uxth	r2, r3
 80106da:	697b      	ldr	r3, [r7, #20]
 80106dc:	0a1b      	lsrs	r3, r3, #8
 80106de:	b2db      	uxtb	r3, r3
 80106e0:	4313      	orrs	r3, r2
 80106e2:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 80106e4:	697b      	ldr	r3, [r7, #20]
 80106e6:	b29b      	uxth	r3, r3
 80106e8:	43db      	mvns	r3, r3
 80106ea:	b29b      	uxth	r3, r3
}
 80106ec:	4618      	mov	r0, r3
 80106ee:	3718      	adds	r7, #24
 80106f0:	46bd      	mov	sp, r7
 80106f2:	bd80      	pop	{r7, pc}

080106f4 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b082      	sub	sp, #8
 80106f8:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80106fa:	2300      	movs	r3, #0
 80106fc:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80106fe:	f00a fdd5 	bl	801b2ac <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010702:	f000 f8d5 	bl	80108b0 <mem_init>
  memp_init();
 8010706:	f000 fc2d 	bl	8010f64 <memp_init>
  pbuf_init();
  netif_init();
 801070a:	f000 fd39 	bl	8011180 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801070e:	f008 f825 	bl	801875c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010712:	f001 fe59 	bl	80123c8 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010716:	f007 ff67 	bl	80185e8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801071a:	bf00      	nop
 801071c:	3708      	adds	r7, #8
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
	...

08010724 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	4603      	mov	r3, r0
 801072c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801072e:	4b05      	ldr	r3, [pc, #20]	; (8010744 <ptr_to_mem+0x20>)
 8010730:	681a      	ldr	r2, [r3, #0]
 8010732:	88fb      	ldrh	r3, [r7, #6]
 8010734:	4413      	add	r3, r2
}
 8010736:	4618      	mov	r0, r3
 8010738:	370c      	adds	r7, #12
 801073a:	46bd      	mov	sp, r7
 801073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010740:	4770      	bx	lr
 8010742:	bf00      	nop
 8010744:	24004ab8 	.word	0x24004ab8

08010748 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010748:	b480      	push	{r7}
 801074a:	b083      	sub	sp, #12
 801074c:	af00      	add	r7, sp, #0
 801074e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010750:	4b05      	ldr	r3, [pc, #20]	; (8010768 <mem_to_ptr+0x20>)
 8010752:	681b      	ldr	r3, [r3, #0]
 8010754:	687a      	ldr	r2, [r7, #4]
 8010756:	1ad3      	subs	r3, r2, r3
 8010758:	b29b      	uxth	r3, r3
}
 801075a:	4618      	mov	r0, r3
 801075c:	370c      	adds	r7, #12
 801075e:	46bd      	mov	sp, r7
 8010760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010764:	4770      	bx	lr
 8010766:	bf00      	nop
 8010768:	24004ab8 	.word	0x24004ab8

0801076c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801076c:	b590      	push	{r4, r7, lr}
 801076e:	b085      	sub	sp, #20
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010774:	4b45      	ldr	r3, [pc, #276]	; (801088c <plug_holes+0x120>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	687a      	ldr	r2, [r7, #4]
 801077a:	429a      	cmp	r2, r3
 801077c:	d206      	bcs.n	801078c <plug_holes+0x20>
 801077e:	4b44      	ldr	r3, [pc, #272]	; (8010890 <plug_holes+0x124>)
 8010780:	f240 12df 	movw	r2, #479	; 0x1df
 8010784:	4943      	ldr	r1, [pc, #268]	; (8010894 <plug_holes+0x128>)
 8010786:	4844      	ldr	r0, [pc, #272]	; (8010898 <plug_holes+0x12c>)
 8010788:	f00a ffa8 	bl	801b6dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801078c:	4b43      	ldr	r3, [pc, #268]	; (801089c <plug_holes+0x130>)
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	687a      	ldr	r2, [r7, #4]
 8010792:	429a      	cmp	r2, r3
 8010794:	d306      	bcc.n	80107a4 <plug_holes+0x38>
 8010796:	4b3e      	ldr	r3, [pc, #248]	; (8010890 <plug_holes+0x124>)
 8010798:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801079c:	4940      	ldr	r1, [pc, #256]	; (80108a0 <plug_holes+0x134>)
 801079e:	483e      	ldr	r0, [pc, #248]	; (8010898 <plug_holes+0x12c>)
 80107a0:	f00a ff9c 	bl	801b6dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	791b      	ldrb	r3, [r3, #4]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d006      	beq.n	80107ba <plug_holes+0x4e>
 80107ac:	4b38      	ldr	r3, [pc, #224]	; (8010890 <plug_holes+0x124>)
 80107ae:	f240 12e1 	movw	r2, #481	; 0x1e1
 80107b2:	493c      	ldr	r1, [pc, #240]	; (80108a4 <plug_holes+0x138>)
 80107b4:	4838      	ldr	r0, [pc, #224]	; (8010898 <plug_holes+0x12c>)
 80107b6:	f00a ff91 	bl	801b6dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	881b      	ldrh	r3, [r3, #0]
 80107be:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80107c2:	d906      	bls.n	80107d2 <plug_holes+0x66>
 80107c4:	4b32      	ldr	r3, [pc, #200]	; (8010890 <plug_holes+0x124>)
 80107c6:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80107ca:	4937      	ldr	r1, [pc, #220]	; (80108a8 <plug_holes+0x13c>)
 80107cc:	4832      	ldr	r0, [pc, #200]	; (8010898 <plug_holes+0x12c>)
 80107ce:	f00a ff85 	bl	801b6dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	881b      	ldrh	r3, [r3, #0]
 80107d6:	4618      	mov	r0, r3
 80107d8:	f7ff ffa4 	bl	8010724 <ptr_to_mem>
 80107dc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80107de:	687a      	ldr	r2, [r7, #4]
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d024      	beq.n	8010830 <plug_holes+0xc4>
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	791b      	ldrb	r3, [r3, #4]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d120      	bne.n	8010830 <plug_holes+0xc4>
 80107ee:	4b2b      	ldr	r3, [pc, #172]	; (801089c <plug_holes+0x130>)
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	68fa      	ldr	r2, [r7, #12]
 80107f4:	429a      	cmp	r2, r3
 80107f6:	d01b      	beq.n	8010830 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80107f8:	4b2c      	ldr	r3, [pc, #176]	; (80108ac <plug_holes+0x140>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	68fa      	ldr	r2, [r7, #12]
 80107fe:	429a      	cmp	r2, r3
 8010800:	d102      	bne.n	8010808 <plug_holes+0x9c>
      lfree = mem;
 8010802:	4a2a      	ldr	r2, [pc, #168]	; (80108ac <plug_holes+0x140>)
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010808:	68fb      	ldr	r3, [r7, #12]
 801080a:	881a      	ldrh	r2, [r3, #0]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010810:	68fb      	ldr	r3, [r7, #12]
 8010812:	881b      	ldrh	r3, [r3, #0]
 8010814:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010818:	d00a      	beq.n	8010830 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	881b      	ldrh	r3, [r3, #0]
 801081e:	4618      	mov	r0, r3
 8010820:	f7ff ff80 	bl	8010724 <ptr_to_mem>
 8010824:	4604      	mov	r4, r0
 8010826:	6878      	ldr	r0, [r7, #4]
 8010828:	f7ff ff8e 	bl	8010748 <mem_to_ptr>
 801082c:	4603      	mov	r3, r0
 801082e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	885b      	ldrh	r3, [r3, #2]
 8010834:	4618      	mov	r0, r3
 8010836:	f7ff ff75 	bl	8010724 <ptr_to_mem>
 801083a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801083c:	68ba      	ldr	r2, [r7, #8]
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	429a      	cmp	r2, r3
 8010842:	d01f      	beq.n	8010884 <plug_holes+0x118>
 8010844:	68bb      	ldr	r3, [r7, #8]
 8010846:	791b      	ldrb	r3, [r3, #4]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d11b      	bne.n	8010884 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801084c:	4b17      	ldr	r3, [pc, #92]	; (80108ac <plug_holes+0x140>)
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	687a      	ldr	r2, [r7, #4]
 8010852:	429a      	cmp	r2, r3
 8010854:	d102      	bne.n	801085c <plug_holes+0xf0>
      lfree = pmem;
 8010856:	4a15      	ldr	r2, [pc, #84]	; (80108ac <plug_holes+0x140>)
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	881a      	ldrh	r2, [r3, #0]
 8010860:	68bb      	ldr	r3, [r7, #8]
 8010862:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	881b      	ldrh	r3, [r3, #0]
 8010868:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801086c:	d00a      	beq.n	8010884 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	881b      	ldrh	r3, [r3, #0]
 8010872:	4618      	mov	r0, r3
 8010874:	f7ff ff56 	bl	8010724 <ptr_to_mem>
 8010878:	4604      	mov	r4, r0
 801087a:	68b8      	ldr	r0, [r7, #8]
 801087c:	f7ff ff64 	bl	8010748 <mem_to_ptr>
 8010880:	4603      	mov	r3, r0
 8010882:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8010884:	bf00      	nop
 8010886:	3714      	adds	r7, #20
 8010888:	46bd      	mov	sp, r7
 801088a:	bd90      	pop	{r4, r7, pc}
 801088c:	24004ab8 	.word	0x24004ab8
 8010890:	0801c95c 	.word	0x0801c95c
 8010894:	0801c98c 	.word	0x0801c98c
 8010898:	0801c9a4 	.word	0x0801c9a4
 801089c:	24004abc 	.word	0x24004abc
 80108a0:	0801c9cc 	.word	0x0801c9cc
 80108a4:	0801c9e8 	.word	0x0801c9e8
 80108a8:	0801ca04 	.word	0x0801ca04
 80108ac:	24004ac4 	.word	0x24004ac4

080108b0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80108b0:	b580      	push	{r7, lr}
 80108b2:	b082      	sub	sp, #8
 80108b4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80108b6:	4b1d      	ldr	r3, [pc, #116]	; (801092c <mem_init+0x7c>)
 80108b8:	4a1d      	ldr	r2, [pc, #116]	; (8010930 <mem_init+0x80>)
 80108ba:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80108bc:	4b1b      	ldr	r3, [pc, #108]	; (801092c <mem_init+0x7c>)
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80108c8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2200      	movs	r2, #0
 80108ce:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2200      	movs	r2, #0
 80108d4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80108d6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 80108da:	f7ff ff23 	bl	8010724 <ptr_to_mem>
 80108de:	4603      	mov	r3, r0
 80108e0:	4a14      	ldr	r2, [pc, #80]	; (8010934 <mem_init+0x84>)
 80108e2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80108e4:	4b13      	ldr	r3, [pc, #76]	; (8010934 <mem_init+0x84>)
 80108e6:	681b      	ldr	r3, [r3, #0]
 80108e8:	2201      	movs	r2, #1
 80108ea:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80108ec:	4b11      	ldr	r3, [pc, #68]	; (8010934 <mem_init+0x84>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80108f4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80108f6:	4b0f      	ldr	r3, [pc, #60]	; (8010934 <mem_init+0x84>)
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80108fe:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8010900:	4b0a      	ldr	r3, [pc, #40]	; (801092c <mem_init+0x7c>)
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	4a0c      	ldr	r2, [pc, #48]	; (8010938 <mem_init+0x88>)
 8010906:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8010908:	480c      	ldr	r0, [pc, #48]	; (801093c <mem_init+0x8c>)
 801090a:	f00a fcdb 	bl	801b2c4 <sys_mutex_new>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d006      	beq.n	8010922 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8010914:	4b0a      	ldr	r3, [pc, #40]	; (8010940 <mem_init+0x90>)
 8010916:	f240 221f 	movw	r2, #543	; 0x21f
 801091a:	490a      	ldr	r1, [pc, #40]	; (8010944 <mem_init+0x94>)
 801091c:	480a      	ldr	r0, [pc, #40]	; (8010948 <mem_init+0x98>)
 801091e:	f00a fedd 	bl	801b6dc <iprintf>
  }
}
 8010922:	bf00      	nop
 8010924:	3708      	adds	r7, #8
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	24004ab8 	.word	0x24004ab8
 8010930:	30002000 	.word	0x30002000
 8010934:	24004abc 	.word	0x24004abc
 8010938:	24004ac4 	.word	0x24004ac4
 801093c:	24004ac0 	.word	0x24004ac0
 8010940:	0801c95c 	.word	0x0801c95c
 8010944:	0801ca30 	.word	0x0801ca30
 8010948:	0801c9a4 	.word	0x0801c9a4

0801094c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b086      	sub	sp, #24
 8010950:	af00      	add	r7, sp, #0
 8010952:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f7ff fef7 	bl	8010748 <mem_to_ptr>
 801095a:	4603      	mov	r3, r0
 801095c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	881b      	ldrh	r3, [r3, #0]
 8010962:	4618      	mov	r0, r3
 8010964:	f7ff fede 	bl	8010724 <ptr_to_mem>
 8010968:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	885b      	ldrh	r3, [r3, #2]
 801096e:	4618      	mov	r0, r3
 8010970:	f7ff fed8 	bl	8010724 <ptr_to_mem>
 8010974:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	881b      	ldrh	r3, [r3, #0]
 801097a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801097e:	d818      	bhi.n	80109b2 <mem_link_valid+0x66>
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	885b      	ldrh	r3, [r3, #2]
 8010984:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010988:	d813      	bhi.n	80109b2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801098e:	8afa      	ldrh	r2, [r7, #22]
 8010990:	429a      	cmp	r2, r3
 8010992:	d004      	beq.n	801099e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	881b      	ldrh	r3, [r3, #0]
 8010998:	8afa      	ldrh	r2, [r7, #22]
 801099a:	429a      	cmp	r2, r3
 801099c:	d109      	bne.n	80109b2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801099e:	4b08      	ldr	r3, [pc, #32]	; (80109c0 <mem_link_valid+0x74>)
 80109a0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80109a2:	693a      	ldr	r2, [r7, #16]
 80109a4:	429a      	cmp	r2, r3
 80109a6:	d006      	beq.n	80109b6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	885b      	ldrh	r3, [r3, #2]
 80109ac:	8afa      	ldrh	r2, [r7, #22]
 80109ae:	429a      	cmp	r2, r3
 80109b0:	d001      	beq.n	80109b6 <mem_link_valid+0x6a>
    return 0;
 80109b2:	2300      	movs	r3, #0
 80109b4:	e000      	b.n	80109b8 <mem_link_valid+0x6c>
  }
  return 1;
 80109b6:	2301      	movs	r3, #1
}
 80109b8:	4618      	mov	r0, r3
 80109ba:	3718      	adds	r7, #24
 80109bc:	46bd      	mov	sp, r7
 80109be:	bd80      	pop	{r7, pc}
 80109c0:	24004abc 	.word	0x24004abc

080109c4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b088      	sub	sp, #32
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d070      	beq.n	8010ab4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	f003 0303 	and.w	r3, r3, #3
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d00d      	beq.n	80109f8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80109dc:	4b37      	ldr	r3, [pc, #220]	; (8010abc <mem_free+0xf8>)
 80109de:	f240 2273 	movw	r2, #627	; 0x273
 80109e2:	4937      	ldr	r1, [pc, #220]	; (8010ac0 <mem_free+0xfc>)
 80109e4:	4837      	ldr	r0, [pc, #220]	; (8010ac4 <mem_free+0x100>)
 80109e6:	f00a fe79 	bl	801b6dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80109ea:	f00a fcbd 	bl	801b368 <sys_arch_protect>
 80109ee:	60f8      	str	r0, [r7, #12]
 80109f0:	68f8      	ldr	r0, [r7, #12]
 80109f2:	f00a fcc7 	bl	801b384 <sys_arch_unprotect>
    return;
 80109f6:	e05e      	b.n	8010ab6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	3b08      	subs	r3, #8
 80109fc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80109fe:	4b32      	ldr	r3, [pc, #200]	; (8010ac8 <mem_free+0x104>)
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	69fa      	ldr	r2, [r7, #28]
 8010a04:	429a      	cmp	r2, r3
 8010a06:	d306      	bcc.n	8010a16 <mem_free+0x52>
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f103 020c 	add.w	r2, r3, #12
 8010a0e:	4b2f      	ldr	r3, [pc, #188]	; (8010acc <mem_free+0x108>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	429a      	cmp	r2, r3
 8010a14:	d90d      	bls.n	8010a32 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010a16:	4b29      	ldr	r3, [pc, #164]	; (8010abc <mem_free+0xf8>)
 8010a18:	f240 227f 	movw	r2, #639	; 0x27f
 8010a1c:	492c      	ldr	r1, [pc, #176]	; (8010ad0 <mem_free+0x10c>)
 8010a1e:	4829      	ldr	r0, [pc, #164]	; (8010ac4 <mem_free+0x100>)
 8010a20:	f00a fe5c 	bl	801b6dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010a24:	f00a fca0 	bl	801b368 <sys_arch_protect>
 8010a28:	6138      	str	r0, [r7, #16]
 8010a2a:	6938      	ldr	r0, [r7, #16]
 8010a2c:	f00a fcaa 	bl	801b384 <sys_arch_unprotect>
    return;
 8010a30:	e041      	b.n	8010ab6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010a32:	4828      	ldr	r0, [pc, #160]	; (8010ad4 <mem_free+0x110>)
 8010a34:	f00a fc5c 	bl	801b2f0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8010a38:	69fb      	ldr	r3, [r7, #28]
 8010a3a:	791b      	ldrb	r3, [r3, #4]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d110      	bne.n	8010a62 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8010a40:	4b1e      	ldr	r3, [pc, #120]	; (8010abc <mem_free+0xf8>)
 8010a42:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010a46:	4924      	ldr	r1, [pc, #144]	; (8010ad8 <mem_free+0x114>)
 8010a48:	481e      	ldr	r0, [pc, #120]	; (8010ac4 <mem_free+0x100>)
 8010a4a:	f00a fe47 	bl	801b6dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010a4e:	4821      	ldr	r0, [pc, #132]	; (8010ad4 <mem_free+0x110>)
 8010a50:	f00a fc5d 	bl	801b30e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010a54:	f00a fc88 	bl	801b368 <sys_arch_protect>
 8010a58:	6178      	str	r0, [r7, #20]
 8010a5a:	6978      	ldr	r0, [r7, #20]
 8010a5c:	f00a fc92 	bl	801b384 <sys_arch_unprotect>
    return;
 8010a60:	e029      	b.n	8010ab6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8010a62:	69f8      	ldr	r0, [r7, #28]
 8010a64:	f7ff ff72 	bl	801094c <mem_link_valid>
 8010a68:	4603      	mov	r3, r0
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d110      	bne.n	8010a90 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010a6e:	4b13      	ldr	r3, [pc, #76]	; (8010abc <mem_free+0xf8>)
 8010a70:	f240 2295 	movw	r2, #661	; 0x295
 8010a74:	4919      	ldr	r1, [pc, #100]	; (8010adc <mem_free+0x118>)
 8010a76:	4813      	ldr	r0, [pc, #76]	; (8010ac4 <mem_free+0x100>)
 8010a78:	f00a fe30 	bl	801b6dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8010a7c:	4815      	ldr	r0, [pc, #84]	; (8010ad4 <mem_free+0x110>)
 8010a7e:	f00a fc46 	bl	801b30e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010a82:	f00a fc71 	bl	801b368 <sys_arch_protect>
 8010a86:	61b8      	str	r0, [r7, #24]
 8010a88:	69b8      	ldr	r0, [r7, #24]
 8010a8a:	f00a fc7b 	bl	801b384 <sys_arch_unprotect>
    return;
 8010a8e:	e012      	b.n	8010ab6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	2200      	movs	r2, #0
 8010a94:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8010a96:	4b12      	ldr	r3, [pc, #72]	; (8010ae0 <mem_free+0x11c>)
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	69fa      	ldr	r2, [r7, #28]
 8010a9c:	429a      	cmp	r2, r3
 8010a9e:	d202      	bcs.n	8010aa6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010aa0:	4a0f      	ldr	r2, [pc, #60]	; (8010ae0 <mem_free+0x11c>)
 8010aa2:	69fb      	ldr	r3, [r7, #28]
 8010aa4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8010aa6:	69f8      	ldr	r0, [r7, #28]
 8010aa8:	f7ff fe60 	bl	801076c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010aac:	4809      	ldr	r0, [pc, #36]	; (8010ad4 <mem_free+0x110>)
 8010aae:	f00a fc2e 	bl	801b30e <sys_mutex_unlock>
 8010ab2:	e000      	b.n	8010ab6 <mem_free+0xf2>
    return;
 8010ab4:	bf00      	nop
}
 8010ab6:	3720      	adds	r7, #32
 8010ab8:	46bd      	mov	sp, r7
 8010aba:	bd80      	pop	{r7, pc}
 8010abc:	0801c95c 	.word	0x0801c95c
 8010ac0:	0801ca4c 	.word	0x0801ca4c
 8010ac4:	0801c9a4 	.word	0x0801c9a4
 8010ac8:	24004ab8 	.word	0x24004ab8
 8010acc:	24004abc 	.word	0x24004abc
 8010ad0:	0801ca70 	.word	0x0801ca70
 8010ad4:	24004ac0 	.word	0x24004ac0
 8010ad8:	0801ca8c 	.word	0x0801ca8c
 8010adc:	0801cab4 	.word	0x0801cab4
 8010ae0:	24004ac4 	.word	0x24004ac4

08010ae4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8010ae4:	b580      	push	{r7, lr}
 8010ae6:	b088      	sub	sp, #32
 8010ae8:	af00      	add	r7, sp, #0
 8010aea:	6078      	str	r0, [r7, #4]
 8010aec:	460b      	mov	r3, r1
 8010aee:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8010af0:	887b      	ldrh	r3, [r7, #2]
 8010af2:	3303      	adds	r3, #3
 8010af4:	b29b      	uxth	r3, r3
 8010af6:	f023 0303 	bic.w	r3, r3, #3
 8010afa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8010afc:	8bfb      	ldrh	r3, [r7, #30]
 8010afe:	2b0b      	cmp	r3, #11
 8010b00:	d801      	bhi.n	8010b06 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8010b02:	230c      	movs	r3, #12
 8010b04:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8010b06:	8bfb      	ldrh	r3, [r7, #30]
 8010b08:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010b0c:	d803      	bhi.n	8010b16 <mem_trim+0x32>
 8010b0e:	8bfa      	ldrh	r2, [r7, #30]
 8010b10:	887b      	ldrh	r3, [r7, #2]
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d201      	bcs.n	8010b1a <mem_trim+0x36>
    return NULL;
 8010b16:	2300      	movs	r3, #0
 8010b18:	e0d8      	b.n	8010ccc <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010b1a:	4b6e      	ldr	r3, [pc, #440]	; (8010cd4 <mem_trim+0x1f0>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	687a      	ldr	r2, [r7, #4]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d304      	bcc.n	8010b2e <mem_trim+0x4a>
 8010b24:	4b6c      	ldr	r3, [pc, #432]	; (8010cd8 <mem_trim+0x1f4>)
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	429a      	cmp	r2, r3
 8010b2c:	d306      	bcc.n	8010b3c <mem_trim+0x58>
 8010b2e:	4b6b      	ldr	r3, [pc, #428]	; (8010cdc <mem_trim+0x1f8>)
 8010b30:	f240 22d1 	movw	r2, #721	; 0x2d1
 8010b34:	496a      	ldr	r1, [pc, #424]	; (8010ce0 <mem_trim+0x1fc>)
 8010b36:	486b      	ldr	r0, [pc, #428]	; (8010ce4 <mem_trim+0x200>)
 8010b38:	f00a fdd0 	bl	801b6dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010b3c:	4b65      	ldr	r3, [pc, #404]	; (8010cd4 <mem_trim+0x1f0>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d304      	bcc.n	8010b50 <mem_trim+0x6c>
 8010b46:	4b64      	ldr	r3, [pc, #400]	; (8010cd8 <mem_trim+0x1f4>)
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	687a      	ldr	r2, [r7, #4]
 8010b4c:	429a      	cmp	r2, r3
 8010b4e:	d307      	bcc.n	8010b60 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8010b50:	f00a fc0a 	bl	801b368 <sys_arch_protect>
 8010b54:	60b8      	str	r0, [r7, #8]
 8010b56:	68b8      	ldr	r0, [r7, #8]
 8010b58:	f00a fc14 	bl	801b384 <sys_arch_unprotect>
    return rmem;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	e0b5      	b.n	8010ccc <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	3b08      	subs	r3, #8
 8010b64:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010b66:	69b8      	ldr	r0, [r7, #24]
 8010b68:	f7ff fdee 	bl	8010748 <mem_to_ptr>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	881a      	ldrh	r2, [r3, #0]
 8010b74:	8afb      	ldrh	r3, [r7, #22]
 8010b76:	1ad3      	subs	r3, r2, r3
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	3b08      	subs	r3, #8
 8010b7c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010b7e:	8bfa      	ldrh	r2, [r7, #30]
 8010b80:	8abb      	ldrh	r3, [r7, #20]
 8010b82:	429a      	cmp	r2, r3
 8010b84:	d906      	bls.n	8010b94 <mem_trim+0xb0>
 8010b86:	4b55      	ldr	r3, [pc, #340]	; (8010cdc <mem_trim+0x1f8>)
 8010b88:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010b8c:	4956      	ldr	r1, [pc, #344]	; (8010ce8 <mem_trim+0x204>)
 8010b8e:	4855      	ldr	r0, [pc, #340]	; (8010ce4 <mem_trim+0x200>)
 8010b90:	f00a fda4 	bl	801b6dc <iprintf>
  if (newsize > size) {
 8010b94:	8bfa      	ldrh	r2, [r7, #30]
 8010b96:	8abb      	ldrh	r3, [r7, #20]
 8010b98:	429a      	cmp	r2, r3
 8010b9a:	d901      	bls.n	8010ba0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	e095      	b.n	8010ccc <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8010ba0:	8bfa      	ldrh	r2, [r7, #30]
 8010ba2:	8abb      	ldrh	r3, [r7, #20]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d101      	bne.n	8010bac <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	e08f      	b.n	8010ccc <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8010bac:	484f      	ldr	r0, [pc, #316]	; (8010cec <mem_trim+0x208>)
 8010bae:	f00a fb9f 	bl	801b2f0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8010bb2:	69bb      	ldr	r3, [r7, #24]
 8010bb4:	881b      	ldrh	r3, [r3, #0]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f7ff fdb4 	bl	8010724 <ptr_to_mem>
 8010bbc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8010bbe:	693b      	ldr	r3, [r7, #16]
 8010bc0:	791b      	ldrb	r3, [r3, #4]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d13f      	bne.n	8010c46 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	881b      	ldrh	r3, [r3, #0]
 8010bca:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010bce:	d106      	bne.n	8010bde <mem_trim+0xfa>
 8010bd0:	4b42      	ldr	r3, [pc, #264]	; (8010cdc <mem_trim+0x1f8>)
 8010bd2:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010bd6:	4946      	ldr	r1, [pc, #280]	; (8010cf0 <mem_trim+0x20c>)
 8010bd8:	4842      	ldr	r0, [pc, #264]	; (8010ce4 <mem_trim+0x200>)
 8010bda:	f00a fd7f 	bl	801b6dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010bde:	693b      	ldr	r3, [r7, #16]
 8010be0:	881b      	ldrh	r3, [r3, #0]
 8010be2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010be4:	8afa      	ldrh	r2, [r7, #22]
 8010be6:	8bfb      	ldrh	r3, [r7, #30]
 8010be8:	4413      	add	r3, r2
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	3308      	adds	r3, #8
 8010bee:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8010bf0:	4b40      	ldr	r3, [pc, #256]	; (8010cf4 <mem_trim+0x210>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	693a      	ldr	r2, [r7, #16]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d106      	bne.n	8010c08 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8010bfa:	89fb      	ldrh	r3, [r7, #14]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f7ff fd91 	bl	8010724 <ptr_to_mem>
 8010c02:	4603      	mov	r3, r0
 8010c04:	4a3b      	ldr	r2, [pc, #236]	; (8010cf4 <mem_trim+0x210>)
 8010c06:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8010c08:	89fb      	ldrh	r3, [r7, #14]
 8010c0a:	4618      	mov	r0, r3
 8010c0c:	f7ff fd8a 	bl	8010724 <ptr_to_mem>
 8010c10:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8010c12:	693b      	ldr	r3, [r7, #16]
 8010c14:	2200      	movs	r2, #0
 8010c16:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010c18:	693b      	ldr	r3, [r7, #16]
 8010c1a:	89ba      	ldrh	r2, [r7, #12]
 8010c1c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010c1e:	693b      	ldr	r3, [r7, #16]
 8010c20:	8afa      	ldrh	r2, [r7, #22]
 8010c22:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010c24:	69bb      	ldr	r3, [r7, #24]
 8010c26:	89fa      	ldrh	r2, [r7, #14]
 8010c28:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010c2a:	693b      	ldr	r3, [r7, #16]
 8010c2c:	881b      	ldrh	r3, [r3, #0]
 8010c2e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010c32:	d047      	beq.n	8010cc4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010c34:	693b      	ldr	r3, [r7, #16]
 8010c36:	881b      	ldrh	r3, [r3, #0]
 8010c38:	4618      	mov	r0, r3
 8010c3a:	f7ff fd73 	bl	8010724 <ptr_to_mem>
 8010c3e:	4602      	mov	r2, r0
 8010c40:	89fb      	ldrh	r3, [r7, #14]
 8010c42:	8053      	strh	r3, [r2, #2]
 8010c44:	e03e      	b.n	8010cc4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010c46:	8bfb      	ldrh	r3, [r7, #30]
 8010c48:	f103 0214 	add.w	r2, r3, #20
 8010c4c:	8abb      	ldrh	r3, [r7, #20]
 8010c4e:	429a      	cmp	r2, r3
 8010c50:	d838      	bhi.n	8010cc4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010c52:	8afa      	ldrh	r2, [r7, #22]
 8010c54:	8bfb      	ldrh	r3, [r7, #30]
 8010c56:	4413      	add	r3, r2
 8010c58:	b29b      	uxth	r3, r3
 8010c5a:	3308      	adds	r3, #8
 8010c5c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010c5e:	69bb      	ldr	r3, [r7, #24]
 8010c60:	881b      	ldrh	r3, [r3, #0]
 8010c62:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010c66:	d106      	bne.n	8010c76 <mem_trim+0x192>
 8010c68:	4b1c      	ldr	r3, [pc, #112]	; (8010cdc <mem_trim+0x1f8>)
 8010c6a:	f240 3216 	movw	r2, #790	; 0x316
 8010c6e:	4920      	ldr	r1, [pc, #128]	; (8010cf0 <mem_trim+0x20c>)
 8010c70:	481c      	ldr	r0, [pc, #112]	; (8010ce4 <mem_trim+0x200>)
 8010c72:	f00a fd33 	bl	801b6dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010c76:	89fb      	ldrh	r3, [r7, #14]
 8010c78:	4618      	mov	r0, r3
 8010c7a:	f7ff fd53 	bl	8010724 <ptr_to_mem>
 8010c7e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8010c80:	4b1c      	ldr	r3, [pc, #112]	; (8010cf4 <mem_trim+0x210>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	693a      	ldr	r2, [r7, #16]
 8010c86:	429a      	cmp	r2, r3
 8010c88:	d202      	bcs.n	8010c90 <mem_trim+0x1ac>
      lfree = mem2;
 8010c8a:	4a1a      	ldr	r2, [pc, #104]	; (8010cf4 <mem_trim+0x210>)
 8010c8c:	693b      	ldr	r3, [r7, #16]
 8010c8e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	2200      	movs	r2, #0
 8010c94:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	881a      	ldrh	r2, [r3, #0]
 8010c9a:	693b      	ldr	r3, [r7, #16]
 8010c9c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010c9e:	693b      	ldr	r3, [r7, #16]
 8010ca0:	8afa      	ldrh	r2, [r7, #22]
 8010ca2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010ca4:	69bb      	ldr	r3, [r7, #24]
 8010ca6:	89fa      	ldrh	r2, [r7, #14]
 8010ca8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010caa:	693b      	ldr	r3, [r7, #16]
 8010cac:	881b      	ldrh	r3, [r3, #0]
 8010cae:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010cb2:	d007      	beq.n	8010cc4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	881b      	ldrh	r3, [r3, #0]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7ff fd33 	bl	8010724 <ptr_to_mem>
 8010cbe:	4602      	mov	r2, r0
 8010cc0:	89fb      	ldrh	r3, [r7, #14]
 8010cc2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010cc4:	4809      	ldr	r0, [pc, #36]	; (8010cec <mem_trim+0x208>)
 8010cc6:	f00a fb22 	bl	801b30e <sys_mutex_unlock>
  return rmem;
 8010cca:	687b      	ldr	r3, [r7, #4]
}
 8010ccc:	4618      	mov	r0, r3
 8010cce:	3720      	adds	r7, #32
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}
 8010cd4:	24004ab8 	.word	0x24004ab8
 8010cd8:	24004abc 	.word	0x24004abc
 8010cdc:	0801c95c 	.word	0x0801c95c
 8010ce0:	0801cae8 	.word	0x0801cae8
 8010ce4:	0801c9a4 	.word	0x0801c9a4
 8010ce8:	0801cb00 	.word	0x0801cb00
 8010cec:	24004ac0 	.word	0x24004ac0
 8010cf0:	0801cb20 	.word	0x0801cb20
 8010cf4:	24004ac4 	.word	0x24004ac4

08010cf8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b088      	sub	sp, #32
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	4603      	mov	r3, r0
 8010d00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8010d02:	88fb      	ldrh	r3, [r7, #6]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d101      	bne.n	8010d0c <mem_malloc+0x14>
    return NULL;
 8010d08:	2300      	movs	r3, #0
 8010d0a:	e0e2      	b.n	8010ed2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010d0c:	88fb      	ldrh	r3, [r7, #6]
 8010d0e:	3303      	adds	r3, #3
 8010d10:	b29b      	uxth	r3, r3
 8010d12:	f023 0303 	bic.w	r3, r3, #3
 8010d16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010d18:	8bbb      	ldrh	r3, [r7, #28]
 8010d1a:	2b0b      	cmp	r3, #11
 8010d1c:	d801      	bhi.n	8010d22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010d1e:	230c      	movs	r3, #12
 8010d20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8010d22:	8bbb      	ldrh	r3, [r7, #28]
 8010d24:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010d28:	d803      	bhi.n	8010d32 <mem_malloc+0x3a>
 8010d2a:	8bba      	ldrh	r2, [r7, #28]
 8010d2c:	88fb      	ldrh	r3, [r7, #6]
 8010d2e:	429a      	cmp	r2, r3
 8010d30:	d201      	bcs.n	8010d36 <mem_malloc+0x3e>
    return NULL;
 8010d32:	2300      	movs	r3, #0
 8010d34:	e0cd      	b.n	8010ed2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010d36:	4869      	ldr	r0, [pc, #420]	; (8010edc <mem_malloc+0x1e4>)
 8010d38:	f00a fada 	bl	801b2f0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010d3c:	4b68      	ldr	r3, [pc, #416]	; (8010ee0 <mem_malloc+0x1e8>)
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	4618      	mov	r0, r3
 8010d42:	f7ff fd01 	bl	8010748 <mem_to_ptr>
 8010d46:	4603      	mov	r3, r0
 8010d48:	83fb      	strh	r3, [r7, #30]
 8010d4a:	e0b7      	b.n	8010ebc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010d4c:	8bfb      	ldrh	r3, [r7, #30]
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7ff fce8 	bl	8010724 <ptr_to_mem>
 8010d54:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010d56:	697b      	ldr	r3, [r7, #20]
 8010d58:	791b      	ldrb	r3, [r3, #4]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	f040 80a7 	bne.w	8010eae <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010d60:	697b      	ldr	r3, [r7, #20]
 8010d62:	881b      	ldrh	r3, [r3, #0]
 8010d64:	461a      	mov	r2, r3
 8010d66:	8bfb      	ldrh	r3, [r7, #30]
 8010d68:	1ad3      	subs	r3, r2, r3
 8010d6a:	f1a3 0208 	sub.w	r2, r3, #8
 8010d6e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8010d70:	429a      	cmp	r2, r3
 8010d72:	f0c0 809c 	bcc.w	8010eae <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010d76:	697b      	ldr	r3, [r7, #20]
 8010d78:	881b      	ldrh	r3, [r3, #0]
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	8bfb      	ldrh	r3, [r7, #30]
 8010d7e:	1ad3      	subs	r3, r2, r3
 8010d80:	f1a3 0208 	sub.w	r2, r3, #8
 8010d84:	8bbb      	ldrh	r3, [r7, #28]
 8010d86:	3314      	adds	r3, #20
 8010d88:	429a      	cmp	r2, r3
 8010d8a:	d333      	bcc.n	8010df4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010d8c:	8bfa      	ldrh	r2, [r7, #30]
 8010d8e:	8bbb      	ldrh	r3, [r7, #28]
 8010d90:	4413      	add	r3, r2
 8010d92:	b29b      	uxth	r3, r3
 8010d94:	3308      	adds	r3, #8
 8010d96:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010d98:	8a7b      	ldrh	r3, [r7, #18]
 8010d9a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010d9e:	d106      	bne.n	8010dae <mem_malloc+0xb6>
 8010da0:	4b50      	ldr	r3, [pc, #320]	; (8010ee4 <mem_malloc+0x1ec>)
 8010da2:	f240 3287 	movw	r2, #903	; 0x387
 8010da6:	4950      	ldr	r1, [pc, #320]	; (8010ee8 <mem_malloc+0x1f0>)
 8010da8:	4850      	ldr	r0, [pc, #320]	; (8010eec <mem_malloc+0x1f4>)
 8010daa:	f00a fc97 	bl	801b6dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010dae:	8a7b      	ldrh	r3, [r7, #18]
 8010db0:	4618      	mov	r0, r3
 8010db2:	f7ff fcb7 	bl	8010724 <ptr_to_mem>
 8010db6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010db8:	68fb      	ldr	r3, [r7, #12]
 8010dba:	2200      	movs	r2, #0
 8010dbc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010dbe:	697b      	ldr	r3, [r7, #20]
 8010dc0:	881a      	ldrh	r2, [r3, #0]
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	8bfa      	ldrh	r2, [r7, #30]
 8010dca:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	8a7a      	ldrh	r2, [r7, #18]
 8010dd0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010dd2:	697b      	ldr	r3, [r7, #20]
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	881b      	ldrh	r3, [r3, #0]
 8010ddc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8010de0:	d00b      	beq.n	8010dfa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	881b      	ldrh	r3, [r3, #0]
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7ff fc9c 	bl	8010724 <ptr_to_mem>
 8010dec:	4602      	mov	r2, r0
 8010dee:	8a7b      	ldrh	r3, [r7, #18]
 8010df0:	8053      	strh	r3, [r2, #2]
 8010df2:	e002      	b.n	8010dfa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010df4:	697b      	ldr	r3, [r7, #20]
 8010df6:	2201      	movs	r2, #1
 8010df8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010dfa:	4b39      	ldr	r3, [pc, #228]	; (8010ee0 <mem_malloc+0x1e8>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	697a      	ldr	r2, [r7, #20]
 8010e00:	429a      	cmp	r2, r3
 8010e02:	d127      	bne.n	8010e54 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010e04:	4b36      	ldr	r3, [pc, #216]	; (8010ee0 <mem_malloc+0x1e8>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010e0a:	e005      	b.n	8010e18 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010e0c:	69bb      	ldr	r3, [r7, #24]
 8010e0e:	881b      	ldrh	r3, [r3, #0]
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7ff fc87 	bl	8010724 <ptr_to_mem>
 8010e16:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010e18:	69bb      	ldr	r3, [r7, #24]
 8010e1a:	791b      	ldrb	r3, [r3, #4]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d004      	beq.n	8010e2a <mem_malloc+0x132>
 8010e20:	4b33      	ldr	r3, [pc, #204]	; (8010ef0 <mem_malloc+0x1f8>)
 8010e22:	681b      	ldr	r3, [r3, #0]
 8010e24:	69ba      	ldr	r2, [r7, #24]
 8010e26:	429a      	cmp	r2, r3
 8010e28:	d1f0      	bne.n	8010e0c <mem_malloc+0x114>
          }
          lfree = cur;
 8010e2a:	4a2d      	ldr	r2, [pc, #180]	; (8010ee0 <mem_malloc+0x1e8>)
 8010e2c:	69bb      	ldr	r3, [r7, #24]
 8010e2e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010e30:	4b2b      	ldr	r3, [pc, #172]	; (8010ee0 <mem_malloc+0x1e8>)
 8010e32:	681a      	ldr	r2, [r3, #0]
 8010e34:	4b2e      	ldr	r3, [pc, #184]	; (8010ef0 <mem_malloc+0x1f8>)
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	429a      	cmp	r2, r3
 8010e3a:	d00b      	beq.n	8010e54 <mem_malloc+0x15c>
 8010e3c:	4b28      	ldr	r3, [pc, #160]	; (8010ee0 <mem_malloc+0x1e8>)
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	791b      	ldrb	r3, [r3, #4]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d006      	beq.n	8010e54 <mem_malloc+0x15c>
 8010e46:	4b27      	ldr	r3, [pc, #156]	; (8010ee4 <mem_malloc+0x1ec>)
 8010e48:	f240 32b5 	movw	r2, #949	; 0x3b5
 8010e4c:	4929      	ldr	r1, [pc, #164]	; (8010ef4 <mem_malloc+0x1fc>)
 8010e4e:	4827      	ldr	r0, [pc, #156]	; (8010eec <mem_malloc+0x1f4>)
 8010e50:	f00a fc44 	bl	801b6dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010e54:	4821      	ldr	r0, [pc, #132]	; (8010edc <mem_malloc+0x1e4>)
 8010e56:	f00a fa5a 	bl	801b30e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010e5a:	8bba      	ldrh	r2, [r7, #28]
 8010e5c:	697b      	ldr	r3, [r7, #20]
 8010e5e:	4413      	add	r3, r2
 8010e60:	3308      	adds	r3, #8
 8010e62:	4a23      	ldr	r2, [pc, #140]	; (8010ef0 <mem_malloc+0x1f8>)
 8010e64:	6812      	ldr	r2, [r2, #0]
 8010e66:	4293      	cmp	r3, r2
 8010e68:	d906      	bls.n	8010e78 <mem_malloc+0x180>
 8010e6a:	4b1e      	ldr	r3, [pc, #120]	; (8010ee4 <mem_malloc+0x1ec>)
 8010e6c:	f240 32b9 	movw	r2, #953	; 0x3b9
 8010e70:	4921      	ldr	r1, [pc, #132]	; (8010ef8 <mem_malloc+0x200>)
 8010e72:	481e      	ldr	r0, [pc, #120]	; (8010eec <mem_malloc+0x1f4>)
 8010e74:	f00a fc32 	bl	801b6dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010e78:	697b      	ldr	r3, [r7, #20]
 8010e7a:	f003 0303 	and.w	r3, r3, #3
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d006      	beq.n	8010e90 <mem_malloc+0x198>
 8010e82:	4b18      	ldr	r3, [pc, #96]	; (8010ee4 <mem_malloc+0x1ec>)
 8010e84:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010e88:	491c      	ldr	r1, [pc, #112]	; (8010efc <mem_malloc+0x204>)
 8010e8a:	4818      	ldr	r0, [pc, #96]	; (8010eec <mem_malloc+0x1f4>)
 8010e8c:	f00a fc26 	bl	801b6dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010e90:	697b      	ldr	r3, [r7, #20]
 8010e92:	f003 0303 	and.w	r3, r3, #3
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d006      	beq.n	8010ea8 <mem_malloc+0x1b0>
 8010e9a:	4b12      	ldr	r3, [pc, #72]	; (8010ee4 <mem_malloc+0x1ec>)
 8010e9c:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010ea0:	4917      	ldr	r1, [pc, #92]	; (8010f00 <mem_malloc+0x208>)
 8010ea2:	4812      	ldr	r0, [pc, #72]	; (8010eec <mem_malloc+0x1f4>)
 8010ea4:	f00a fc1a 	bl	801b6dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010ea8:	697b      	ldr	r3, [r7, #20]
 8010eaa:	3308      	adds	r3, #8
 8010eac:	e011      	b.n	8010ed2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8010eae:	8bfb      	ldrh	r3, [r7, #30]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7ff fc37 	bl	8010724 <ptr_to_mem>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	881b      	ldrh	r3, [r3, #0]
 8010eba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010ebc:	8bfa      	ldrh	r2, [r7, #30]
 8010ebe:	8bbb      	ldrh	r3, [r7, #28]
 8010ec0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	f4ff af41 	bcc.w	8010d4c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010eca:	4804      	ldr	r0, [pc, #16]	; (8010edc <mem_malloc+0x1e4>)
 8010ecc:	f00a fa1f 	bl	801b30e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010ed0:	2300      	movs	r3, #0
}
 8010ed2:	4618      	mov	r0, r3
 8010ed4:	3720      	adds	r7, #32
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	24004ac0 	.word	0x24004ac0
 8010ee0:	24004ac4 	.word	0x24004ac4
 8010ee4:	0801c95c 	.word	0x0801c95c
 8010ee8:	0801cb20 	.word	0x0801cb20
 8010eec:	0801c9a4 	.word	0x0801c9a4
 8010ef0:	24004abc 	.word	0x24004abc
 8010ef4:	0801cb34 	.word	0x0801cb34
 8010ef8:	0801cb50 	.word	0x0801cb50
 8010efc:	0801cb80 	.word	0x0801cb80
 8010f00:	0801cbb0 	.word	0x0801cbb0

08010f04 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b085      	sub	sp, #20
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	689b      	ldr	r3, [r3, #8]
 8010f10:	2200      	movs	r2, #0
 8010f12:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	685b      	ldr	r3, [r3, #4]
 8010f18:	3303      	adds	r3, #3
 8010f1a:	f023 0303 	bic.w	r3, r3, #3
 8010f1e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010f20:	2300      	movs	r3, #0
 8010f22:	60fb      	str	r3, [r7, #12]
 8010f24:	e011      	b.n	8010f4a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	689b      	ldr	r3, [r3, #8]
 8010f2a:	681a      	ldr	r2, [r3, #0]
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	689b      	ldr	r3, [r3, #8]
 8010f34:	68ba      	ldr	r2, [r7, #8]
 8010f36:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	881b      	ldrh	r3, [r3, #0]
 8010f3c:	461a      	mov	r2, r3
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	4413      	add	r3, r2
 8010f42:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	3301      	adds	r3, #1
 8010f48:	60fb      	str	r3, [r7, #12]
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	885b      	ldrh	r3, [r3, #2]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	4293      	cmp	r3, r2
 8010f54:	dbe7      	blt.n	8010f26 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010f56:	bf00      	nop
 8010f58:	bf00      	nop
 8010f5a:	3714      	adds	r7, #20
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr

08010f64 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	80fb      	strh	r3, [r7, #6]
 8010f6e:	e009      	b.n	8010f84 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010f70:	88fb      	ldrh	r3, [r7, #6]
 8010f72:	4a08      	ldr	r2, [pc, #32]	; (8010f94 <memp_init+0x30>)
 8010f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f7ff ffc3 	bl	8010f04 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010f7e:	88fb      	ldrh	r3, [r7, #6]
 8010f80:	3301      	adds	r3, #1
 8010f82:	80fb      	strh	r3, [r7, #6]
 8010f84:	88fb      	ldrh	r3, [r7, #6]
 8010f86:	2b0c      	cmp	r3, #12
 8010f88:	d9f2      	bls.n	8010f70 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010f8a:	bf00      	nop
 8010f8c:	bf00      	nop
 8010f8e:	3708      	adds	r7, #8
 8010f90:	46bd      	mov	sp, r7
 8010f92:	bd80      	pop	{r7, pc}
 8010f94:	0801fcac 	.word	0x0801fcac

08010f98 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b084      	sub	sp, #16
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010fa0:	f00a f9e2 	bl	801b368 <sys_arch_protect>
 8010fa4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	689b      	ldr	r3, [r3, #8]
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d015      	beq.n	8010fe0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	689b      	ldr	r3, [r3, #8]
 8010fb8:	68ba      	ldr	r2, [r7, #8]
 8010fba:	6812      	ldr	r2, [r2, #0]
 8010fbc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010fbe:	68bb      	ldr	r3, [r7, #8]
 8010fc0:	f003 0303 	and.w	r3, r3, #3
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d006      	beq.n	8010fd6 <do_memp_malloc_pool+0x3e>
 8010fc8:	4b09      	ldr	r3, [pc, #36]	; (8010ff0 <do_memp_malloc_pool+0x58>)
 8010fca:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010fce:	4909      	ldr	r1, [pc, #36]	; (8010ff4 <do_memp_malloc_pool+0x5c>)
 8010fd0:	4809      	ldr	r0, [pc, #36]	; (8010ff8 <do_memp_malloc_pool+0x60>)
 8010fd2:	f00a fb83 	bl	801b6dc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010fd6:	68f8      	ldr	r0, [r7, #12]
 8010fd8:	f00a f9d4 	bl	801b384 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	e003      	b.n	8010fe8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010fe0:	68f8      	ldr	r0, [r7, #12]
 8010fe2:	f00a f9cf 	bl	801b384 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010fe6:	2300      	movs	r3, #0
}
 8010fe8:	4618      	mov	r0, r3
 8010fea:	3710      	adds	r7, #16
 8010fec:	46bd      	mov	sp, r7
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	0801cbd4 	.word	0x0801cbd4
 8010ff4:	0801cc04 	.word	0x0801cc04
 8010ff8:	0801cc28 	.word	0x0801cc28

08010ffc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d106      	bne.n	8011018 <memp_malloc_pool+0x1c>
 801100a:	4b0a      	ldr	r3, [pc, #40]	; (8011034 <memp_malloc_pool+0x38>)
 801100c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8011010:	4909      	ldr	r1, [pc, #36]	; (8011038 <memp_malloc_pool+0x3c>)
 8011012:	480a      	ldr	r0, [pc, #40]	; (801103c <memp_malloc_pool+0x40>)
 8011014:	f00a fb62 	bl	801b6dc <iprintf>
  if (desc == NULL) {
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d101      	bne.n	8011022 <memp_malloc_pool+0x26>
    return NULL;
 801101e:	2300      	movs	r3, #0
 8011020:	e003      	b.n	801102a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f7ff ffb8 	bl	8010f98 <do_memp_malloc_pool>
 8011028:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801102a:	4618      	mov	r0, r3
 801102c:	3708      	adds	r7, #8
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
 8011032:	bf00      	nop
 8011034:	0801cbd4 	.word	0x0801cbd4
 8011038:	0801cc50 	.word	0x0801cc50
 801103c:	0801cc28 	.word	0x0801cc28

08011040 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	4603      	mov	r3, r0
 8011048:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801104a:	79fb      	ldrb	r3, [r7, #7]
 801104c:	2b0c      	cmp	r3, #12
 801104e:	d908      	bls.n	8011062 <memp_malloc+0x22>
 8011050:	4b0a      	ldr	r3, [pc, #40]	; (801107c <memp_malloc+0x3c>)
 8011052:	f240 1257 	movw	r2, #343	; 0x157
 8011056:	490a      	ldr	r1, [pc, #40]	; (8011080 <memp_malloc+0x40>)
 8011058:	480a      	ldr	r0, [pc, #40]	; (8011084 <memp_malloc+0x44>)
 801105a:	f00a fb3f 	bl	801b6dc <iprintf>
 801105e:	2300      	movs	r3, #0
 8011060:	e008      	b.n	8011074 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8011062:	79fb      	ldrb	r3, [r7, #7]
 8011064:	4a08      	ldr	r2, [pc, #32]	; (8011088 <memp_malloc+0x48>)
 8011066:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801106a:	4618      	mov	r0, r3
 801106c:	f7ff ff94 	bl	8010f98 <do_memp_malloc_pool>
 8011070:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8011072:	68fb      	ldr	r3, [r7, #12]
}
 8011074:	4618      	mov	r0, r3
 8011076:	3710      	adds	r7, #16
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	0801cbd4 	.word	0x0801cbd4
 8011080:	0801cc64 	.word	0x0801cc64
 8011084:	0801cc28 	.word	0x0801cc28
 8011088:	0801fcac 	.word	0x0801fcac

0801108c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	f003 0303 	and.w	r3, r3, #3
 801109c:	2b00      	cmp	r3, #0
 801109e:	d006      	beq.n	80110ae <do_memp_free_pool+0x22>
 80110a0:	4b0d      	ldr	r3, [pc, #52]	; (80110d8 <do_memp_free_pool+0x4c>)
 80110a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80110a6:	490d      	ldr	r1, [pc, #52]	; (80110dc <do_memp_free_pool+0x50>)
 80110a8:	480d      	ldr	r0, [pc, #52]	; (80110e0 <do_memp_free_pool+0x54>)
 80110aa:	f00a fb17 	bl	801b6dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80110b2:	f00a f959 	bl	801b368 <sys_arch_protect>
 80110b6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	689b      	ldr	r3, [r3, #8]
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	689b      	ldr	r3, [r3, #8]
 80110c6:	68fa      	ldr	r2, [r7, #12]
 80110c8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80110ca:	68b8      	ldr	r0, [r7, #8]
 80110cc:	f00a f95a 	bl	801b384 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80110d0:	bf00      	nop
 80110d2:	3710      	adds	r7, #16
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	0801cbd4 	.word	0x0801cbd4
 80110dc:	0801cc84 	.word	0x0801cc84
 80110e0:	0801cc28 	.word	0x0801cc28

080110e4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d106      	bne.n	8011102 <memp_free_pool+0x1e>
 80110f4:	4b0a      	ldr	r3, [pc, #40]	; (8011120 <memp_free_pool+0x3c>)
 80110f6:	f240 1295 	movw	r2, #405	; 0x195
 80110fa:	490a      	ldr	r1, [pc, #40]	; (8011124 <memp_free_pool+0x40>)
 80110fc:	480a      	ldr	r0, [pc, #40]	; (8011128 <memp_free_pool+0x44>)
 80110fe:	f00a faed 	bl	801b6dc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	2b00      	cmp	r3, #0
 8011106:	d007      	beq.n	8011118 <memp_free_pool+0x34>
 8011108:	683b      	ldr	r3, [r7, #0]
 801110a:	2b00      	cmp	r3, #0
 801110c:	d004      	beq.n	8011118 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801110e:	6839      	ldr	r1, [r7, #0]
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f7ff ffbb 	bl	801108c <do_memp_free_pool>
 8011116:	e000      	b.n	801111a <memp_free_pool+0x36>
    return;
 8011118:	bf00      	nop
}
 801111a:	3708      	adds	r7, #8
 801111c:	46bd      	mov	sp, r7
 801111e:	bd80      	pop	{r7, pc}
 8011120:	0801cbd4 	.word	0x0801cbd4
 8011124:	0801cc50 	.word	0x0801cc50
 8011128:	0801cc28 	.word	0x0801cc28

0801112c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	4603      	mov	r3, r0
 8011134:	6039      	str	r1, [r7, #0]
 8011136:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011138:	79fb      	ldrb	r3, [r7, #7]
 801113a:	2b0c      	cmp	r3, #12
 801113c:	d907      	bls.n	801114e <memp_free+0x22>
 801113e:	4b0c      	ldr	r3, [pc, #48]	; (8011170 <memp_free+0x44>)
 8011140:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8011144:	490b      	ldr	r1, [pc, #44]	; (8011174 <memp_free+0x48>)
 8011146:	480c      	ldr	r0, [pc, #48]	; (8011178 <memp_free+0x4c>)
 8011148:	f00a fac8 	bl	801b6dc <iprintf>
 801114c:	e00c      	b.n	8011168 <memp_free+0x3c>

  if (mem == NULL) {
 801114e:	683b      	ldr	r3, [r7, #0]
 8011150:	2b00      	cmp	r3, #0
 8011152:	d008      	beq.n	8011166 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8011154:	79fb      	ldrb	r3, [r7, #7]
 8011156:	4a09      	ldr	r2, [pc, #36]	; (801117c <memp_free+0x50>)
 8011158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801115c:	6839      	ldr	r1, [r7, #0]
 801115e:	4618      	mov	r0, r3
 8011160:	f7ff ff94 	bl	801108c <do_memp_free_pool>
 8011164:	e000      	b.n	8011168 <memp_free+0x3c>
    return;
 8011166:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011168:	3708      	adds	r7, #8
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	0801cbd4 	.word	0x0801cbd4
 8011174:	0801cca4 	.word	0x0801cca4
 8011178:	0801cc28 	.word	0x0801cc28
 801117c:	0801fcac 	.word	0x0801fcac

08011180 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011180:	b480      	push	{r7}
 8011182:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8011184:	bf00      	nop
 8011186:	46bd      	mov	sp, r7
 8011188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118c:	4770      	bx	lr
	...

08011190 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011190:	b580      	push	{r7, lr}
 8011192:	b086      	sub	sp, #24
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
 801119c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d108      	bne.n	80111b6 <netif_add+0x26>
 80111a4:	4b57      	ldr	r3, [pc, #348]	; (8011304 <netif_add+0x174>)
 80111a6:	f240 1227 	movw	r2, #295	; 0x127
 80111aa:	4957      	ldr	r1, [pc, #348]	; (8011308 <netif_add+0x178>)
 80111ac:	4857      	ldr	r0, [pc, #348]	; (801130c <netif_add+0x17c>)
 80111ae:	f00a fa95 	bl	801b6dc <iprintf>
 80111b2:	2300      	movs	r3, #0
 80111b4:	e0a2      	b.n	80112fc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80111b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d108      	bne.n	80111ce <netif_add+0x3e>
 80111bc:	4b51      	ldr	r3, [pc, #324]	; (8011304 <netif_add+0x174>)
 80111be:	f44f 7294 	mov.w	r2, #296	; 0x128
 80111c2:	4953      	ldr	r1, [pc, #332]	; (8011310 <netif_add+0x180>)
 80111c4:	4851      	ldr	r0, [pc, #324]	; (801130c <netif_add+0x17c>)
 80111c6:	f00a fa89 	bl	801b6dc <iprintf>
 80111ca:	2300      	movs	r3, #0
 80111cc:	e096      	b.n	80112fc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80111ce:	68bb      	ldr	r3, [r7, #8]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d101      	bne.n	80111d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80111d4:	4b4f      	ldr	r3, [pc, #316]	; (8011314 <netif_add+0x184>)
 80111d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d101      	bne.n	80111e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80111de:	4b4d      	ldr	r3, [pc, #308]	; (8011314 <netif_add+0x184>)
 80111e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80111e2:	683b      	ldr	r3, [r7, #0]
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d101      	bne.n	80111ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80111e8:	4b4a      	ldr	r3, [pc, #296]	; (8011314 <netif_add+0x184>)
 80111ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	2200      	movs	r2, #0
 80111f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	2200      	movs	r2, #0
 80111f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	2200      	movs	r2, #0
 80111fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	4a45      	ldr	r2, [pc, #276]	; (8011318 <netif_add+0x188>)
 8011202:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	2200      	movs	r2, #0
 8011208:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	2200      	movs	r2, #0
 801120e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	2200      	movs	r2, #0
 8011216:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	6a3a      	ldr	r2, [r7, #32]
 801121c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801121e:	4b3f      	ldr	r3, [pc, #252]	; (801131c <netif_add+0x18c>)
 8011220:	781a      	ldrb	r2, [r3, #0]
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801122c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801122e:	683b      	ldr	r3, [r7, #0]
 8011230:	687a      	ldr	r2, [r7, #4]
 8011232:	68b9      	ldr	r1, [r7, #8]
 8011234:	68f8      	ldr	r0, [r7, #12]
 8011236:	f000 f913 	bl	8011460 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801123a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801123c:	68f8      	ldr	r0, [r7, #12]
 801123e:	4798      	blx	r3
 8011240:	4603      	mov	r3, r0
 8011242:	2b00      	cmp	r3, #0
 8011244:	d001      	beq.n	801124a <netif_add+0xba>
    return NULL;
 8011246:	2300      	movs	r3, #0
 8011248:	e058      	b.n	80112fc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011250:	2bff      	cmp	r3, #255	; 0xff
 8011252:	d103      	bne.n	801125c <netif_add+0xcc>
        netif->num = 0;
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	2200      	movs	r2, #0
 8011258:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 801125c:	2300      	movs	r3, #0
 801125e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011260:	4b2f      	ldr	r3, [pc, #188]	; (8011320 <netif_add+0x190>)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	617b      	str	r3, [r7, #20]
 8011266:	e02b      	b.n	80112c0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011268:	697a      	ldr	r2, [r7, #20]
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	429a      	cmp	r2, r3
 801126e:	d106      	bne.n	801127e <netif_add+0xee>
 8011270:	4b24      	ldr	r3, [pc, #144]	; (8011304 <netif_add+0x174>)
 8011272:	f240 128b 	movw	r2, #395	; 0x18b
 8011276:	492b      	ldr	r1, [pc, #172]	; (8011324 <netif_add+0x194>)
 8011278:	4824      	ldr	r0, [pc, #144]	; (801130c <netif_add+0x17c>)
 801127a:	f00a fa2f 	bl	801b6dc <iprintf>
        num_netifs++;
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	3301      	adds	r3, #1
 8011282:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	2bff      	cmp	r3, #255	; 0xff
 8011288:	dd06      	ble.n	8011298 <netif_add+0x108>
 801128a:	4b1e      	ldr	r3, [pc, #120]	; (8011304 <netif_add+0x174>)
 801128c:	f240 128d 	movw	r2, #397	; 0x18d
 8011290:	4925      	ldr	r1, [pc, #148]	; (8011328 <netif_add+0x198>)
 8011292:	481e      	ldr	r0, [pc, #120]	; (801130c <netif_add+0x17c>)
 8011294:	f00a fa22 	bl	801b6dc <iprintf>
        if (netif2->num == netif->num) {
 8011298:	697b      	ldr	r3, [r7, #20]
 801129a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112a4:	429a      	cmp	r2, r3
 80112a6:	d108      	bne.n	80112ba <netif_add+0x12a>
          netif->num++;
 80112a8:	68fb      	ldr	r3, [r7, #12]
 80112aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112ae:	3301      	adds	r3, #1
 80112b0:	b2da      	uxtb	r2, r3
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 80112b8:	e005      	b.n	80112c6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80112ba:	697b      	ldr	r3, [r7, #20]
 80112bc:	681b      	ldr	r3, [r3, #0]
 80112be:	617b      	str	r3, [r7, #20]
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d1d0      	bne.n	8011268 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d1be      	bne.n	801124a <netif_add+0xba>
  }
  if (netif->num == 254) {
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112d2:	2bfe      	cmp	r3, #254	; 0xfe
 80112d4:	d103      	bne.n	80112de <netif_add+0x14e>
    netif_num = 0;
 80112d6:	4b11      	ldr	r3, [pc, #68]	; (801131c <netif_add+0x18c>)
 80112d8:	2200      	movs	r2, #0
 80112da:	701a      	strb	r2, [r3, #0]
 80112dc:	e006      	b.n	80112ec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112e4:	3301      	adds	r3, #1
 80112e6:	b2da      	uxtb	r2, r3
 80112e8:	4b0c      	ldr	r3, [pc, #48]	; (801131c <netif_add+0x18c>)
 80112ea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80112ec:	4b0c      	ldr	r3, [pc, #48]	; (8011320 <netif_add+0x190>)
 80112ee:	681a      	ldr	r2, [r3, #0]
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80112f4:	4a0a      	ldr	r2, [pc, #40]	; (8011320 <netif_add+0x190>)
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80112fa:	68fb      	ldr	r3, [r7, #12]
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3718      	adds	r7, #24
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	0801ccc0 	.word	0x0801ccc0
 8011308:	0801cd54 	.word	0x0801cd54
 801130c:	0801cd10 	.word	0x0801cd10
 8011310:	0801cd70 	.word	0x0801cd70
 8011314:	0801fd20 	.word	0x0801fd20
 8011318:	0801173b 	.word	0x0801173b
 801131c:	24004afc 	.word	0x24004afc
 8011320:	240082cc 	.word	0x240082cc
 8011324:	0801cd94 	.word	0x0801cd94
 8011328:	0801cda8 	.word	0x0801cda8

0801132c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b082      	sub	sp, #8
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
 8011334:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011336:	6839      	ldr	r1, [r7, #0]
 8011338:	6878      	ldr	r0, [r7, #4]
 801133a:	f002 fe2d 	bl	8013f98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801133e:	6839      	ldr	r1, [r7, #0]
 8011340:	6878      	ldr	r0, [r7, #4]
 8011342:	f007 fb95 	bl	8018a70 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011346:	bf00      	nop
 8011348:	3708      	adds	r7, #8
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
	...

08011350 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b086      	sub	sp, #24
 8011354:	af00      	add	r7, sp, #0
 8011356:	60f8      	str	r0, [r7, #12]
 8011358:	60b9      	str	r1, [r7, #8]
 801135a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801135c:	68bb      	ldr	r3, [r7, #8]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d106      	bne.n	8011370 <netif_do_set_ipaddr+0x20>
 8011362:	4b1d      	ldr	r3, [pc, #116]	; (80113d8 <netif_do_set_ipaddr+0x88>)
 8011364:	f240 12cb 	movw	r2, #459	; 0x1cb
 8011368:	491c      	ldr	r1, [pc, #112]	; (80113dc <netif_do_set_ipaddr+0x8c>)
 801136a:	481d      	ldr	r0, [pc, #116]	; (80113e0 <netif_do_set_ipaddr+0x90>)
 801136c:	f00a f9b6 	bl	801b6dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	2b00      	cmp	r3, #0
 8011374:	d106      	bne.n	8011384 <netif_do_set_ipaddr+0x34>
 8011376:	4b18      	ldr	r3, [pc, #96]	; (80113d8 <netif_do_set_ipaddr+0x88>)
 8011378:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801137c:	4917      	ldr	r1, [pc, #92]	; (80113dc <netif_do_set_ipaddr+0x8c>)
 801137e:	4818      	ldr	r0, [pc, #96]	; (80113e0 <netif_do_set_ipaddr+0x90>)
 8011380:	f00a f9ac 	bl	801b6dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011384:	68bb      	ldr	r3, [r7, #8]
 8011386:	681a      	ldr	r2, [r3, #0]
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	3304      	adds	r3, #4
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	429a      	cmp	r2, r3
 8011390:	d01c      	beq.n	80113cc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011392:	68bb      	ldr	r3, [r7, #8]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	3304      	adds	r3, #4
 801139c:	681a      	ldr	r2, [r3, #0]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80113a2:	f107 0314 	add.w	r3, r7, #20
 80113a6:	4619      	mov	r1, r3
 80113a8:	6878      	ldr	r0, [r7, #4]
 80113aa:	f7ff ffbf 	bl	801132c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d002      	beq.n	80113ba <netif_do_set_ipaddr+0x6a>
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	e000      	b.n	80113bc <netif_do_set_ipaddr+0x6c>
 80113ba:	2300      	movs	r3, #0
 80113bc:	68fa      	ldr	r2, [r7, #12]
 80113be:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80113c0:	2101      	movs	r1, #1
 80113c2:	68f8      	ldr	r0, [r7, #12]
 80113c4:	f000 f8d2 	bl	801156c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80113c8:	2301      	movs	r3, #1
 80113ca:	e000      	b.n	80113ce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80113cc:	2300      	movs	r3, #0
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	3718      	adds	r7, #24
 80113d2:	46bd      	mov	sp, r7
 80113d4:	bd80      	pop	{r7, pc}
 80113d6:	bf00      	nop
 80113d8:	0801ccc0 	.word	0x0801ccc0
 80113dc:	0801cdd8 	.word	0x0801cdd8
 80113e0:	0801cd10 	.word	0x0801cd10

080113e4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80113e4:	b480      	push	{r7}
 80113e6:	b085      	sub	sp, #20
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80113f0:	68bb      	ldr	r3, [r7, #8]
 80113f2:	681a      	ldr	r2, [r3, #0]
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	3308      	adds	r3, #8
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	429a      	cmp	r2, r3
 80113fc:	d00a      	beq.n	8011414 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d002      	beq.n	801140a <netif_do_set_netmask+0x26>
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	e000      	b.n	801140c <netif_do_set_netmask+0x28>
 801140a:	2300      	movs	r3, #0
 801140c:	68fa      	ldr	r2, [r7, #12]
 801140e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011410:	2301      	movs	r3, #1
 8011412:	e000      	b.n	8011416 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011414:	2300      	movs	r3, #0
}
 8011416:	4618      	mov	r0, r3
 8011418:	3714      	adds	r7, #20
 801141a:	46bd      	mov	sp, r7
 801141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011420:	4770      	bx	lr

08011422 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011422:	b480      	push	{r7}
 8011424:	b085      	sub	sp, #20
 8011426:	af00      	add	r7, sp, #0
 8011428:	60f8      	str	r0, [r7, #12]
 801142a:	60b9      	str	r1, [r7, #8]
 801142c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801142e:	68bb      	ldr	r3, [r7, #8]
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	330c      	adds	r3, #12
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	429a      	cmp	r2, r3
 801143a:	d00a      	beq.n	8011452 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d002      	beq.n	8011448 <netif_do_set_gw+0x26>
 8011442:	68bb      	ldr	r3, [r7, #8]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	e000      	b.n	801144a <netif_do_set_gw+0x28>
 8011448:	2300      	movs	r3, #0
 801144a:	68fa      	ldr	r2, [r7, #12]
 801144c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801144e:	2301      	movs	r3, #1
 8011450:	e000      	b.n	8011454 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011452:	2300      	movs	r3, #0
}
 8011454:	4618      	mov	r0, r3
 8011456:	3714      	adds	r7, #20
 8011458:	46bd      	mov	sp, r7
 801145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145e:	4770      	bx	lr

08011460 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b088      	sub	sp, #32
 8011464:	af00      	add	r7, sp, #0
 8011466:	60f8      	str	r0, [r7, #12]
 8011468:	60b9      	str	r1, [r7, #8]
 801146a:	607a      	str	r2, [r7, #4]
 801146c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801146e:	2300      	movs	r3, #0
 8011470:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011472:	2300      	movs	r3, #0
 8011474:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d101      	bne.n	8011480 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801147c:	4b1c      	ldr	r3, [pc, #112]	; (80114f0 <netif_set_addr+0x90>)
 801147e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d101      	bne.n	801148a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011486:	4b1a      	ldr	r3, [pc, #104]	; (80114f0 <netif_set_addr+0x90>)
 8011488:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d101      	bne.n	8011494 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011490:	4b17      	ldr	r3, [pc, #92]	; (80114f0 <netif_set_addr+0x90>)
 8011492:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d003      	beq.n	80114a2 <netif_set_addr+0x42>
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d101      	bne.n	80114a6 <netif_set_addr+0x46>
 80114a2:	2301      	movs	r3, #1
 80114a4:	e000      	b.n	80114a8 <netif_set_addr+0x48>
 80114a6:	2300      	movs	r3, #0
 80114a8:	617b      	str	r3, [r7, #20]
  if (remove) {
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d006      	beq.n	80114be <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80114b0:	f107 0310 	add.w	r3, r7, #16
 80114b4:	461a      	mov	r2, r3
 80114b6:	68b9      	ldr	r1, [r7, #8]
 80114b8:	68f8      	ldr	r0, [r7, #12]
 80114ba:	f7ff ff49 	bl	8011350 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80114be:	69fa      	ldr	r2, [r7, #28]
 80114c0:	6879      	ldr	r1, [r7, #4]
 80114c2:	68f8      	ldr	r0, [r7, #12]
 80114c4:	f7ff ff8e 	bl	80113e4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80114c8:	69ba      	ldr	r2, [r7, #24]
 80114ca:	6839      	ldr	r1, [r7, #0]
 80114cc:	68f8      	ldr	r0, [r7, #12]
 80114ce:	f7ff ffa8 	bl	8011422 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d106      	bne.n	80114e6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80114d8:	f107 0310 	add.w	r3, r7, #16
 80114dc:	461a      	mov	r2, r3
 80114de:	68b9      	ldr	r1, [r7, #8]
 80114e0:	68f8      	ldr	r0, [r7, #12]
 80114e2:	f7ff ff35 	bl	8011350 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80114e6:	bf00      	nop
 80114e8:	3720      	adds	r7, #32
 80114ea:	46bd      	mov	sp, r7
 80114ec:	bd80      	pop	{r7, pc}
 80114ee:	bf00      	nop
 80114f0:	0801fd20 	.word	0x0801fd20

080114f4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80114f4:	b480      	push	{r7}
 80114f6:	b083      	sub	sp, #12
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80114fc:	4a04      	ldr	r2, [pc, #16]	; (8011510 <netif_set_default+0x1c>)
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011502:	bf00      	nop
 8011504:	370c      	adds	r7, #12
 8011506:	46bd      	mov	sp, r7
 8011508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150c:	4770      	bx	lr
 801150e:	bf00      	nop
 8011510:	240082d0 	.word	0x240082d0

08011514 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b082      	sub	sp, #8
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d107      	bne.n	8011532 <netif_set_up+0x1e>
 8011522:	4b0f      	ldr	r3, [pc, #60]	; (8011560 <netif_set_up+0x4c>)
 8011524:	f44f 7254 	mov.w	r2, #848	; 0x350
 8011528:	490e      	ldr	r1, [pc, #56]	; (8011564 <netif_set_up+0x50>)
 801152a:	480f      	ldr	r0, [pc, #60]	; (8011568 <netif_set_up+0x54>)
 801152c:	f00a f8d6 	bl	801b6dc <iprintf>
 8011530:	e013      	b.n	801155a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011538:	f003 0301 	and.w	r3, r3, #1
 801153c:	2b00      	cmp	r3, #0
 801153e:	d10c      	bne.n	801155a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011546:	f043 0301 	orr.w	r3, r3, #1
 801154a:	b2da      	uxtb	r2, r3
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011552:	2103      	movs	r1, #3
 8011554:	6878      	ldr	r0, [r7, #4]
 8011556:	f000 f809 	bl	801156c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801155a:	3708      	adds	r7, #8
 801155c:	46bd      	mov	sp, r7
 801155e:	bd80      	pop	{r7, pc}
 8011560:	0801ccc0 	.word	0x0801ccc0
 8011564:	0801ce48 	.word	0x0801ce48
 8011568:	0801cd10 	.word	0x0801cd10

0801156c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801156c:	b580      	push	{r7, lr}
 801156e:	b082      	sub	sp, #8
 8011570:	af00      	add	r7, sp, #0
 8011572:	6078      	str	r0, [r7, #4]
 8011574:	460b      	mov	r3, r1
 8011576:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d106      	bne.n	801158c <netif_issue_reports+0x20>
 801157e:	4b18      	ldr	r3, [pc, #96]	; (80115e0 <netif_issue_reports+0x74>)
 8011580:	f240 326d 	movw	r2, #877	; 0x36d
 8011584:	4917      	ldr	r1, [pc, #92]	; (80115e4 <netif_issue_reports+0x78>)
 8011586:	4818      	ldr	r0, [pc, #96]	; (80115e8 <netif_issue_reports+0x7c>)
 8011588:	f00a f8a8 	bl	801b6dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011592:	f003 0304 	and.w	r3, r3, #4
 8011596:	2b00      	cmp	r3, #0
 8011598:	d01e      	beq.n	80115d8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115a0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d017      	beq.n	80115d8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80115a8:	78fb      	ldrb	r3, [r7, #3]
 80115aa:	f003 0301 	and.w	r3, r3, #1
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d013      	beq.n	80115da <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	3304      	adds	r3, #4
 80115b6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d00e      	beq.n	80115da <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80115c2:	f003 0308 	and.w	r3, r3, #8
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d007      	beq.n	80115da <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	3304      	adds	r3, #4
 80115ce:	4619      	mov	r1, r3
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f008 f9b7 	bl	8019944 <etharp_request>
 80115d6:	e000      	b.n	80115da <netif_issue_reports+0x6e>
    return;
 80115d8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80115da:	3708      	adds	r7, #8
 80115dc:	46bd      	mov	sp, r7
 80115de:	bd80      	pop	{r7, pc}
 80115e0:	0801ccc0 	.word	0x0801ccc0
 80115e4:	0801ce64 	.word	0x0801ce64
 80115e8:	0801cd10 	.word	0x0801cd10

080115ec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b082      	sub	sp, #8
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d107      	bne.n	801160a <netif_set_down+0x1e>
 80115fa:	4b12      	ldr	r3, [pc, #72]	; (8011644 <netif_set_down+0x58>)
 80115fc:	f240 329b 	movw	r2, #923	; 0x39b
 8011600:	4911      	ldr	r1, [pc, #68]	; (8011648 <netif_set_down+0x5c>)
 8011602:	4812      	ldr	r0, [pc, #72]	; (801164c <netif_set_down+0x60>)
 8011604:	f00a f86a 	bl	801b6dc <iprintf>
 8011608:	e019      	b.n	801163e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011610:	f003 0301 	and.w	r3, r3, #1
 8011614:	2b00      	cmp	r3, #0
 8011616:	d012      	beq.n	801163e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801161e:	f023 0301 	bic.w	r3, r3, #1
 8011622:	b2da      	uxtb	r2, r3
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011630:	f003 0308 	and.w	r3, r3, #8
 8011634:	2b00      	cmp	r3, #0
 8011636:	d002      	beq.n	801163e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011638:	6878      	ldr	r0, [r7, #4]
 801163a:	f007 fd41 	bl	80190c0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801163e:	3708      	adds	r7, #8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	0801ccc0 	.word	0x0801ccc0
 8011648:	0801ce88 	.word	0x0801ce88
 801164c:	0801cd10 	.word	0x0801cd10

08011650 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011650:	b580      	push	{r7, lr}
 8011652:	b082      	sub	sp, #8
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d107      	bne.n	801166e <netif_set_link_up+0x1e>
 801165e:	4b13      	ldr	r3, [pc, #76]	; (80116ac <netif_set_link_up+0x5c>)
 8011660:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8011664:	4912      	ldr	r1, [pc, #72]	; (80116b0 <netif_set_link_up+0x60>)
 8011666:	4813      	ldr	r0, [pc, #76]	; (80116b4 <netif_set_link_up+0x64>)
 8011668:	f00a f838 	bl	801b6dc <iprintf>
 801166c:	e01b      	b.n	80116a6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011674:	f003 0304 	and.w	r3, r3, #4
 8011678:	2b00      	cmp	r3, #0
 801167a:	d114      	bne.n	80116a6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011682:	f043 0304 	orr.w	r3, r3, #4
 8011686:	b2da      	uxtb	r2, r3
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801168e:	2103      	movs	r1, #3
 8011690:	6878      	ldr	r0, [r7, #4]
 8011692:	f7ff ff6b 	bl	801156c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	69db      	ldr	r3, [r3, #28]
 801169a:	2b00      	cmp	r3, #0
 801169c:	d003      	beq.n	80116a6 <netif_set_link_up+0x56>
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	69db      	ldr	r3, [r3, #28]
 80116a2:	6878      	ldr	r0, [r7, #4]
 80116a4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80116a6:	3708      	adds	r7, #8
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	0801ccc0 	.word	0x0801ccc0
 80116b0:	0801cea8 	.word	0x0801cea8
 80116b4:	0801cd10 	.word	0x0801cd10

080116b8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d107      	bne.n	80116d6 <netif_set_link_down+0x1e>
 80116c6:	4b11      	ldr	r3, [pc, #68]	; (801170c <netif_set_link_down+0x54>)
 80116c8:	f240 4206 	movw	r2, #1030	; 0x406
 80116cc:	4910      	ldr	r1, [pc, #64]	; (8011710 <netif_set_link_down+0x58>)
 80116ce:	4811      	ldr	r0, [pc, #68]	; (8011714 <netif_set_link_down+0x5c>)
 80116d0:	f00a f804 	bl	801b6dc <iprintf>
 80116d4:	e017      	b.n	8011706 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116dc:	f003 0304 	and.w	r3, r3, #4
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d010      	beq.n	8011706 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80116ea:	f023 0304 	bic.w	r3, r3, #4
 80116ee:	b2da      	uxtb	r2, r3
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	69db      	ldr	r3, [r3, #28]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d003      	beq.n	8011706 <netif_set_link_down+0x4e>
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	69db      	ldr	r3, [r3, #28]
 8011702:	6878      	ldr	r0, [r7, #4]
 8011704:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011706:	3708      	adds	r7, #8
 8011708:	46bd      	mov	sp, r7
 801170a:	bd80      	pop	{r7, pc}
 801170c:	0801ccc0 	.word	0x0801ccc0
 8011710:	0801cecc 	.word	0x0801cecc
 8011714:	0801cd10 	.word	0x0801cd10

08011718 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011718:	b480      	push	{r7}
 801171a:	b083      	sub	sp, #12
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
 8011720:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d002      	beq.n	801172e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	683a      	ldr	r2, [r7, #0]
 801172c:	61da      	str	r2, [r3, #28]
  }
}
 801172e:	bf00      	nop
 8011730:	370c      	adds	r7, #12
 8011732:	46bd      	mov	sp, r7
 8011734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011738:	4770      	bx	lr

0801173a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801173a:	b480      	push	{r7}
 801173c:	b085      	sub	sp, #20
 801173e:	af00      	add	r7, sp, #0
 8011740:	60f8      	str	r0, [r7, #12]
 8011742:	60b9      	str	r1, [r7, #8]
 8011744:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011746:	f06f 030b 	mvn.w	r3, #11
}
 801174a:	4618      	mov	r0, r3
 801174c:	3714      	adds	r7, #20
 801174e:	46bd      	mov	sp, r7
 8011750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011754:	4770      	bx	lr
	...

08011758 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011758:	b480      	push	{r7}
 801175a:	b085      	sub	sp, #20
 801175c:	af00      	add	r7, sp, #0
 801175e:	4603      	mov	r3, r0
 8011760:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011762:	79fb      	ldrb	r3, [r7, #7]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d013      	beq.n	8011790 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011768:	4b0d      	ldr	r3, [pc, #52]	; (80117a0 <netif_get_by_index+0x48>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	60fb      	str	r3, [r7, #12]
 801176e:	e00c      	b.n	801178a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011776:	3301      	adds	r3, #1
 8011778:	b2db      	uxtb	r3, r3
 801177a:	79fa      	ldrb	r2, [r7, #7]
 801177c:	429a      	cmp	r2, r3
 801177e:	d101      	bne.n	8011784 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	e006      	b.n	8011792 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	60fb      	str	r3, [r7, #12]
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	2b00      	cmp	r3, #0
 801178e:	d1ef      	bne.n	8011770 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011790:	2300      	movs	r3, #0
}
 8011792:	4618      	mov	r0, r3
 8011794:	3714      	adds	r7, #20
 8011796:	46bd      	mov	sp, r7
 8011798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179c:	4770      	bx	lr
 801179e:	bf00      	nop
 80117a0:	240082cc 	.word	0x240082cc

080117a4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b082      	sub	sp, #8
 80117a8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80117aa:	f009 fddd 	bl	801b368 <sys_arch_protect>
 80117ae:	6038      	str	r0, [r7, #0]
 80117b0:	4b0d      	ldr	r3, [pc, #52]	; (80117e8 <pbuf_free_ooseq+0x44>)
 80117b2:	2200      	movs	r2, #0
 80117b4:	701a      	strb	r2, [r3, #0]
 80117b6:	6838      	ldr	r0, [r7, #0]
 80117b8:	f009 fde4 	bl	801b384 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80117bc:	4b0b      	ldr	r3, [pc, #44]	; (80117ec <pbuf_free_ooseq+0x48>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	607b      	str	r3, [r7, #4]
 80117c2:	e00a      	b.n	80117da <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d003      	beq.n	80117d4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f002 fc21 	bl	8014014 <tcp_free_ooseq>
      return;
 80117d2:	e005      	b.n	80117e0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	68db      	ldr	r3, [r3, #12]
 80117d8:	607b      	str	r3, [r7, #4]
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d1f1      	bne.n	80117c4 <pbuf_free_ooseq+0x20>
    }
  }
}
 80117e0:	3708      	adds	r7, #8
 80117e2:	46bd      	mov	sp, r7
 80117e4:	bd80      	pop	{r7, pc}
 80117e6:	bf00      	nop
 80117e8:	240082d4 	.word	0x240082d4
 80117ec:	240082dc 	.word	0x240082dc

080117f0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80117f0:	b580      	push	{r7, lr}
 80117f2:	b082      	sub	sp, #8
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80117f8:	f7ff ffd4 	bl	80117a4 <pbuf_free_ooseq>
}
 80117fc:	bf00      	nop
 80117fe:	3708      	adds	r7, #8
 8011800:	46bd      	mov	sp, r7
 8011802:	bd80      	pop	{r7, pc}

08011804 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8011804:	b580      	push	{r7, lr}
 8011806:	b082      	sub	sp, #8
 8011808:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801180a:	f009 fdad 	bl	801b368 <sys_arch_protect>
 801180e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8011810:	4b0f      	ldr	r3, [pc, #60]	; (8011850 <pbuf_pool_is_empty+0x4c>)
 8011812:	781b      	ldrb	r3, [r3, #0]
 8011814:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8011816:	4b0e      	ldr	r3, [pc, #56]	; (8011850 <pbuf_pool_is_empty+0x4c>)
 8011818:	2201      	movs	r2, #1
 801181a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f009 fdb1 	bl	801b384 <sys_arch_unprotect>

  if (!queued) {
 8011822:	78fb      	ldrb	r3, [r7, #3]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d10f      	bne.n	8011848 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011828:	2100      	movs	r1, #0
 801182a:	480a      	ldr	r0, [pc, #40]	; (8011854 <pbuf_pool_is_empty+0x50>)
 801182c:	f7fe fdee 	bl	801040c <tcpip_try_callback>
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d008      	beq.n	8011848 <pbuf_pool_is_empty+0x44>
 8011836:	f009 fd97 	bl	801b368 <sys_arch_protect>
 801183a:	6078      	str	r0, [r7, #4]
 801183c:	4b04      	ldr	r3, [pc, #16]	; (8011850 <pbuf_pool_is_empty+0x4c>)
 801183e:	2200      	movs	r2, #0
 8011840:	701a      	strb	r2, [r3, #0]
 8011842:	6878      	ldr	r0, [r7, #4]
 8011844:	f009 fd9e 	bl	801b384 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011848:	bf00      	nop
 801184a:	3708      	adds	r7, #8
 801184c:	46bd      	mov	sp, r7
 801184e:	bd80      	pop	{r7, pc}
 8011850:	240082d4 	.word	0x240082d4
 8011854:	080117f1 	.word	0x080117f1

08011858 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8011858:	b480      	push	{r7}
 801185a:	b085      	sub	sp, #20
 801185c:	af00      	add	r7, sp, #0
 801185e:	60f8      	str	r0, [r7, #12]
 8011860:	60b9      	str	r1, [r7, #8]
 8011862:	4611      	mov	r1, r2
 8011864:	461a      	mov	r2, r3
 8011866:	460b      	mov	r3, r1
 8011868:	80fb      	strh	r3, [r7, #6]
 801186a:	4613      	mov	r3, r2
 801186c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	2200      	movs	r2, #0
 8011872:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	68ba      	ldr	r2, [r7, #8]
 8011878:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	88fa      	ldrh	r2, [r7, #6]
 801187e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	88ba      	ldrh	r2, [r7, #4]
 8011884:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8011886:	8b3b      	ldrh	r3, [r7, #24]
 8011888:	b2da      	uxtb	r2, r3
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	7f3a      	ldrb	r2, [r7, #28]
 8011892:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	2201      	movs	r2, #1
 8011898:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	2200      	movs	r2, #0
 801189e:	73da      	strb	r2, [r3, #15]
}
 80118a0:	bf00      	nop
 80118a2:	3714      	adds	r7, #20
 80118a4:	46bd      	mov	sp, r7
 80118a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118aa:	4770      	bx	lr

080118ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80118ac:	b580      	push	{r7, lr}
 80118ae:	b08c      	sub	sp, #48	; 0x30
 80118b0:	af02      	add	r7, sp, #8
 80118b2:	4603      	mov	r3, r0
 80118b4:	71fb      	strb	r3, [r7, #7]
 80118b6:	460b      	mov	r3, r1
 80118b8:	80bb      	strh	r3, [r7, #4]
 80118ba:	4613      	mov	r3, r2
 80118bc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80118be:	79fb      	ldrb	r3, [r7, #7]
 80118c0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80118c2:	887b      	ldrh	r3, [r7, #2]
 80118c4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80118c8:	d07f      	beq.n	80119ca <pbuf_alloc+0x11e>
 80118ca:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 80118ce:	f300 80c8 	bgt.w	8011a62 <pbuf_alloc+0x1b6>
 80118d2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80118d6:	d010      	beq.n	80118fa <pbuf_alloc+0x4e>
 80118d8:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 80118dc:	f300 80c1 	bgt.w	8011a62 <pbuf_alloc+0x1b6>
 80118e0:	2b01      	cmp	r3, #1
 80118e2:	d002      	beq.n	80118ea <pbuf_alloc+0x3e>
 80118e4:	2b41      	cmp	r3, #65	; 0x41
 80118e6:	f040 80bc 	bne.w	8011a62 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80118ea:	887a      	ldrh	r2, [r7, #2]
 80118ec:	88bb      	ldrh	r3, [r7, #4]
 80118ee:	4619      	mov	r1, r3
 80118f0:	2000      	movs	r0, #0
 80118f2:	f000 f8d1 	bl	8011a98 <pbuf_alloc_reference>
 80118f6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80118f8:	e0bd      	b.n	8011a76 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80118fa:	2300      	movs	r3, #0
 80118fc:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80118fe:	2300      	movs	r3, #0
 8011900:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011902:	88bb      	ldrh	r3, [r7, #4]
 8011904:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011906:	200c      	movs	r0, #12
 8011908:	f7ff fb9a 	bl	8011040 <memp_malloc>
 801190c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801190e:	693b      	ldr	r3, [r7, #16]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d109      	bne.n	8011928 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8011914:	f7ff ff76 	bl	8011804 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8011918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801191a:	2b00      	cmp	r3, #0
 801191c:	d002      	beq.n	8011924 <pbuf_alloc+0x78>
            pbuf_free(p);
 801191e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011920:	f000 faa8 	bl	8011e74 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011924:	2300      	movs	r3, #0
 8011926:	e0a7      	b.n	8011a78 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8011928:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801192a:	3303      	adds	r3, #3
 801192c:	b29b      	uxth	r3, r3
 801192e:	f023 0303 	bic.w	r3, r3, #3
 8011932:	b29b      	uxth	r3, r3
 8011934:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8011938:	b29b      	uxth	r3, r3
 801193a:	8b7a      	ldrh	r2, [r7, #26]
 801193c:	4293      	cmp	r3, r2
 801193e:	bf28      	it	cs
 8011940:	4613      	movcs	r3, r2
 8011942:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011946:	3310      	adds	r3, #16
 8011948:	693a      	ldr	r2, [r7, #16]
 801194a:	4413      	add	r3, r2
 801194c:	3303      	adds	r3, #3
 801194e:	f023 0303 	bic.w	r3, r3, #3
 8011952:	4618      	mov	r0, r3
 8011954:	89f9      	ldrh	r1, [r7, #14]
 8011956:	8b7a      	ldrh	r2, [r7, #26]
 8011958:	2300      	movs	r3, #0
 801195a:	9301      	str	r3, [sp, #4]
 801195c:	887b      	ldrh	r3, [r7, #2]
 801195e:	9300      	str	r3, [sp, #0]
 8011960:	460b      	mov	r3, r1
 8011962:	4601      	mov	r1, r0
 8011964:	6938      	ldr	r0, [r7, #16]
 8011966:	f7ff ff77 	bl	8011858 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801196a:	693b      	ldr	r3, [r7, #16]
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	f003 0303 	and.w	r3, r3, #3
 8011972:	2b00      	cmp	r3, #0
 8011974:	d006      	beq.n	8011984 <pbuf_alloc+0xd8>
 8011976:	4b42      	ldr	r3, [pc, #264]	; (8011a80 <pbuf_alloc+0x1d4>)
 8011978:	f44f 7280 	mov.w	r2, #256	; 0x100
 801197c:	4941      	ldr	r1, [pc, #260]	; (8011a84 <pbuf_alloc+0x1d8>)
 801197e:	4842      	ldr	r0, [pc, #264]	; (8011a88 <pbuf_alloc+0x1dc>)
 8011980:	f009 feac 	bl	801b6dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011984:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011986:	3303      	adds	r3, #3
 8011988:	f023 0303 	bic.w	r3, r3, #3
 801198c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011990:	d106      	bne.n	80119a0 <pbuf_alloc+0xf4>
 8011992:	4b3b      	ldr	r3, [pc, #236]	; (8011a80 <pbuf_alloc+0x1d4>)
 8011994:	f44f 7281 	mov.w	r2, #258	; 0x102
 8011998:	493c      	ldr	r1, [pc, #240]	; (8011a8c <pbuf_alloc+0x1e0>)
 801199a:	483b      	ldr	r0, [pc, #236]	; (8011a88 <pbuf_alloc+0x1dc>)
 801199c:	f009 fe9e 	bl	801b6dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80119a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119a2:	2b00      	cmp	r3, #0
 80119a4:	d102      	bne.n	80119ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	627b      	str	r3, [r7, #36]	; 0x24
 80119aa:	e002      	b.n	80119b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	693a      	ldr	r2, [r7, #16]
 80119b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80119b2:	693b      	ldr	r3, [r7, #16]
 80119b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80119b6:	8b7a      	ldrh	r2, [r7, #26]
 80119b8:	89fb      	ldrh	r3, [r7, #14]
 80119ba:	1ad3      	subs	r3, r2, r3
 80119bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80119be:	2300      	movs	r3, #0
 80119c0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80119c2:	8b7b      	ldrh	r3, [r7, #26]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d19e      	bne.n	8011906 <pbuf_alloc+0x5a>
      break;
 80119c8:	e055      	b.n	8011a76 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80119ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80119cc:	3303      	adds	r3, #3
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	f023 0303 	bic.w	r3, r3, #3
 80119d4:	b29a      	uxth	r2, r3
 80119d6:	88bb      	ldrh	r3, [r7, #4]
 80119d8:	3303      	adds	r3, #3
 80119da:	b29b      	uxth	r3, r3
 80119dc:	f023 0303 	bic.w	r3, r3, #3
 80119e0:	b29b      	uxth	r3, r3
 80119e2:	4413      	add	r3, r2
 80119e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80119e6:	8b3b      	ldrh	r3, [r7, #24]
 80119e8:	3310      	adds	r3, #16
 80119ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80119ec:	8b3a      	ldrh	r2, [r7, #24]
 80119ee:	88bb      	ldrh	r3, [r7, #4]
 80119f0:	3303      	adds	r3, #3
 80119f2:	f023 0303 	bic.w	r3, r3, #3
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d306      	bcc.n	8011a08 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80119fa:	8afa      	ldrh	r2, [r7, #22]
 80119fc:	88bb      	ldrh	r3, [r7, #4]
 80119fe:	3303      	adds	r3, #3
 8011a00:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011a04:	429a      	cmp	r2, r3
 8011a06:	d201      	bcs.n	8011a0c <pbuf_alloc+0x160>
        return NULL;
 8011a08:	2300      	movs	r3, #0
 8011a0a:	e035      	b.n	8011a78 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011a0c:	8afb      	ldrh	r3, [r7, #22]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f7ff f972 	bl	8010cf8 <mem_malloc>
 8011a14:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8011a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d101      	bne.n	8011a20 <pbuf_alloc+0x174>
        return NULL;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	e02b      	b.n	8011a78 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011a20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011a22:	3310      	adds	r3, #16
 8011a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a26:	4413      	add	r3, r2
 8011a28:	3303      	adds	r3, #3
 8011a2a:	f023 0303 	bic.w	r3, r3, #3
 8011a2e:	4618      	mov	r0, r3
 8011a30:	88b9      	ldrh	r1, [r7, #4]
 8011a32:	88ba      	ldrh	r2, [r7, #4]
 8011a34:	2300      	movs	r3, #0
 8011a36:	9301      	str	r3, [sp, #4]
 8011a38:	887b      	ldrh	r3, [r7, #2]
 8011a3a:	9300      	str	r3, [sp, #0]
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	4601      	mov	r1, r0
 8011a40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011a42:	f7ff ff09 	bl	8011858 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8011a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a48:	685b      	ldr	r3, [r3, #4]
 8011a4a:	f003 0303 	and.w	r3, r3, #3
 8011a4e:	2b00      	cmp	r3, #0
 8011a50:	d010      	beq.n	8011a74 <pbuf_alloc+0x1c8>
 8011a52:	4b0b      	ldr	r3, [pc, #44]	; (8011a80 <pbuf_alloc+0x1d4>)
 8011a54:	f44f 7291 	mov.w	r2, #290	; 0x122
 8011a58:	490d      	ldr	r1, [pc, #52]	; (8011a90 <pbuf_alloc+0x1e4>)
 8011a5a:	480b      	ldr	r0, [pc, #44]	; (8011a88 <pbuf_alloc+0x1dc>)
 8011a5c:	f009 fe3e 	bl	801b6dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011a60:	e008      	b.n	8011a74 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011a62:	4b07      	ldr	r3, [pc, #28]	; (8011a80 <pbuf_alloc+0x1d4>)
 8011a64:	f240 1227 	movw	r2, #295	; 0x127
 8011a68:	490a      	ldr	r1, [pc, #40]	; (8011a94 <pbuf_alloc+0x1e8>)
 8011a6a:	4807      	ldr	r0, [pc, #28]	; (8011a88 <pbuf_alloc+0x1dc>)
 8011a6c:	f009 fe36 	bl	801b6dc <iprintf>
      return NULL;
 8011a70:	2300      	movs	r3, #0
 8011a72:	e001      	b.n	8011a78 <pbuf_alloc+0x1cc>
      break;
 8011a74:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	3728      	adds	r7, #40	; 0x28
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}
 8011a80:	0801cef0 	.word	0x0801cef0
 8011a84:	0801cf20 	.word	0x0801cf20
 8011a88:	0801cf50 	.word	0x0801cf50
 8011a8c:	0801cf78 	.word	0x0801cf78
 8011a90:	0801cfac 	.word	0x0801cfac
 8011a94:	0801cfd8 	.word	0x0801cfd8

08011a98 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b086      	sub	sp, #24
 8011a9c:	af02      	add	r7, sp, #8
 8011a9e:	6078      	str	r0, [r7, #4]
 8011aa0:	460b      	mov	r3, r1
 8011aa2:	807b      	strh	r3, [r7, #2]
 8011aa4:	4613      	mov	r3, r2
 8011aa6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8011aa8:	883b      	ldrh	r3, [r7, #0]
 8011aaa:	2b41      	cmp	r3, #65	; 0x41
 8011aac:	d009      	beq.n	8011ac2 <pbuf_alloc_reference+0x2a>
 8011aae:	883b      	ldrh	r3, [r7, #0]
 8011ab0:	2b01      	cmp	r3, #1
 8011ab2:	d006      	beq.n	8011ac2 <pbuf_alloc_reference+0x2a>
 8011ab4:	4b0f      	ldr	r3, [pc, #60]	; (8011af4 <pbuf_alloc_reference+0x5c>)
 8011ab6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8011aba:	490f      	ldr	r1, [pc, #60]	; (8011af8 <pbuf_alloc_reference+0x60>)
 8011abc:	480f      	ldr	r0, [pc, #60]	; (8011afc <pbuf_alloc_reference+0x64>)
 8011abe:	f009 fe0d 	bl	801b6dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8011ac2:	200b      	movs	r0, #11
 8011ac4:	f7ff fabc 	bl	8011040 <memp_malloc>
 8011ac8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8011aca:	68fb      	ldr	r3, [r7, #12]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d101      	bne.n	8011ad4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	e00b      	b.n	8011aec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8011ad4:	8879      	ldrh	r1, [r7, #2]
 8011ad6:	887a      	ldrh	r2, [r7, #2]
 8011ad8:	2300      	movs	r3, #0
 8011ada:	9301      	str	r3, [sp, #4]
 8011adc:	883b      	ldrh	r3, [r7, #0]
 8011ade:	9300      	str	r3, [sp, #0]
 8011ae0:	460b      	mov	r3, r1
 8011ae2:	6879      	ldr	r1, [r7, #4]
 8011ae4:	68f8      	ldr	r0, [r7, #12]
 8011ae6:	f7ff feb7 	bl	8011858 <pbuf_init_alloced_pbuf>
  return p;
 8011aea:	68fb      	ldr	r3, [r7, #12]
}
 8011aec:	4618      	mov	r0, r3
 8011aee:	3710      	adds	r7, #16
 8011af0:	46bd      	mov	sp, r7
 8011af2:	bd80      	pop	{r7, pc}
 8011af4:	0801cef0 	.word	0x0801cef0
 8011af8:	0801cff4 	.word	0x0801cff4
 8011afc:	0801cf50 	.word	0x0801cf50

08011b00 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b088      	sub	sp, #32
 8011b04:	af02      	add	r7, sp, #8
 8011b06:	607b      	str	r3, [r7, #4]
 8011b08:	4603      	mov	r3, r0
 8011b0a:	73fb      	strb	r3, [r7, #15]
 8011b0c:	460b      	mov	r3, r1
 8011b0e:	81bb      	strh	r3, [r7, #12]
 8011b10:	4613      	mov	r3, r2
 8011b12:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011b14:	7bfb      	ldrb	r3, [r7, #15]
 8011b16:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8011b18:	8a7b      	ldrh	r3, [r7, #18]
 8011b1a:	3303      	adds	r3, #3
 8011b1c:	f023 0203 	bic.w	r2, r3, #3
 8011b20:	89bb      	ldrh	r3, [r7, #12]
 8011b22:	441a      	add	r2, r3
 8011b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b26:	429a      	cmp	r2, r3
 8011b28:	d901      	bls.n	8011b2e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8011b2a:	2300      	movs	r3, #0
 8011b2c:	e018      	b.n	8011b60 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011b2e:	6a3b      	ldr	r3, [r7, #32]
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d007      	beq.n	8011b44 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011b34:	8a7b      	ldrh	r3, [r7, #18]
 8011b36:	3303      	adds	r3, #3
 8011b38:	f023 0303 	bic.w	r3, r3, #3
 8011b3c:	6a3a      	ldr	r2, [r7, #32]
 8011b3e:	4413      	add	r3, r2
 8011b40:	617b      	str	r3, [r7, #20]
 8011b42:	e001      	b.n	8011b48 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011b44:	2300      	movs	r3, #0
 8011b46:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8011b48:	6878      	ldr	r0, [r7, #4]
 8011b4a:	89b9      	ldrh	r1, [r7, #12]
 8011b4c:	89ba      	ldrh	r2, [r7, #12]
 8011b4e:	2302      	movs	r3, #2
 8011b50:	9301      	str	r3, [sp, #4]
 8011b52:	897b      	ldrh	r3, [r7, #10]
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	460b      	mov	r3, r1
 8011b58:	6979      	ldr	r1, [r7, #20]
 8011b5a:	f7ff fe7d 	bl	8011858 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011b5e:	687b      	ldr	r3, [r7, #4]
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3718      	adds	r7, #24
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d106      	bne.n	8011b88 <pbuf_realloc+0x20>
 8011b7a:	4b3a      	ldr	r3, [pc, #232]	; (8011c64 <pbuf_realloc+0xfc>)
 8011b7c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011b80:	4939      	ldr	r1, [pc, #228]	; (8011c68 <pbuf_realloc+0x100>)
 8011b82:	483a      	ldr	r0, [pc, #232]	; (8011c6c <pbuf_realloc+0x104>)
 8011b84:	f009 fdaa 	bl	801b6dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	891b      	ldrh	r3, [r3, #8]
 8011b8c:	887a      	ldrh	r2, [r7, #2]
 8011b8e:	429a      	cmp	r2, r3
 8011b90:	d263      	bcs.n	8011c5a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	891a      	ldrh	r2, [r3, #8]
 8011b96:	887b      	ldrh	r3, [r7, #2]
 8011b98:	1ad3      	subs	r3, r2, r3
 8011b9a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011b9c:	887b      	ldrh	r3, [r7, #2]
 8011b9e:	817b      	strh	r3, [r7, #10]
  q = p;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8011ba4:	e018      	b.n	8011bd8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	895b      	ldrh	r3, [r3, #10]
 8011baa:	897a      	ldrh	r2, [r7, #10]
 8011bac:	1ad3      	subs	r3, r2, r3
 8011bae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8011bb0:	68fb      	ldr	r3, [r7, #12]
 8011bb2:	891a      	ldrh	r2, [r3, #8]
 8011bb4:	893b      	ldrh	r3, [r7, #8]
 8011bb6:	1ad3      	subs	r3, r2, r3
 8011bb8:	b29a      	uxth	r2, r3
 8011bba:	68fb      	ldr	r3, [r7, #12]
 8011bbc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	681b      	ldr	r3, [r3, #0]
 8011bc2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8011bc4:	68fb      	ldr	r3, [r7, #12]
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d106      	bne.n	8011bd8 <pbuf_realloc+0x70>
 8011bca:	4b26      	ldr	r3, [pc, #152]	; (8011c64 <pbuf_realloc+0xfc>)
 8011bcc:	f240 12af 	movw	r2, #431	; 0x1af
 8011bd0:	4927      	ldr	r1, [pc, #156]	; (8011c70 <pbuf_realloc+0x108>)
 8011bd2:	4826      	ldr	r0, [pc, #152]	; (8011c6c <pbuf_realloc+0x104>)
 8011bd4:	f009 fd82 	bl	801b6dc <iprintf>
  while (rem_len > q->len) {
 8011bd8:	68fb      	ldr	r3, [r7, #12]
 8011bda:	895b      	ldrh	r3, [r3, #10]
 8011bdc:	897a      	ldrh	r2, [r7, #10]
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d8e1      	bhi.n	8011ba6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8011be2:	68fb      	ldr	r3, [r7, #12]
 8011be4:	7b1b      	ldrb	r3, [r3, #12]
 8011be6:	f003 030f 	and.w	r3, r3, #15
 8011bea:	2b00      	cmp	r3, #0
 8011bec:	d121      	bne.n	8011c32 <pbuf_realloc+0xca>
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	895b      	ldrh	r3, [r3, #10]
 8011bf2:	897a      	ldrh	r2, [r7, #10]
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d01c      	beq.n	8011c32 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	7b5b      	ldrb	r3, [r3, #13]
 8011bfc:	f003 0302 	and.w	r3, r3, #2
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d116      	bne.n	8011c32 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	685a      	ldr	r2, [r3, #4]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	1ad3      	subs	r3, r2, r3
 8011c0c:	b29a      	uxth	r2, r3
 8011c0e:	897b      	ldrh	r3, [r7, #10]
 8011c10:	4413      	add	r3, r2
 8011c12:	b29b      	uxth	r3, r3
 8011c14:	4619      	mov	r1, r3
 8011c16:	68f8      	ldr	r0, [r7, #12]
 8011c18:	f7fe ff64 	bl	8010ae4 <mem_trim>
 8011c1c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d106      	bne.n	8011c32 <pbuf_realloc+0xca>
 8011c24:	4b0f      	ldr	r3, [pc, #60]	; (8011c64 <pbuf_realloc+0xfc>)
 8011c26:	f240 12bd 	movw	r2, #445	; 0x1bd
 8011c2a:	4912      	ldr	r1, [pc, #72]	; (8011c74 <pbuf_realloc+0x10c>)
 8011c2c:	480f      	ldr	r0, [pc, #60]	; (8011c6c <pbuf_realloc+0x104>)
 8011c2e:	f009 fd55 	bl	801b6dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	897a      	ldrh	r2, [r7, #10]
 8011c36:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	895a      	ldrh	r2, [r3, #10]
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d004      	beq.n	8011c52 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	f000 f911 	bl	8011e74 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	2200      	movs	r2, #0
 8011c56:	601a      	str	r2, [r3, #0]
 8011c58:	e000      	b.n	8011c5c <pbuf_realloc+0xf4>
    return;
 8011c5a:	bf00      	nop

}
 8011c5c:	3710      	adds	r7, #16
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	bd80      	pop	{r7, pc}
 8011c62:	bf00      	nop
 8011c64:	0801cef0 	.word	0x0801cef0
 8011c68:	0801d008 	.word	0x0801d008
 8011c6c:	0801cf50 	.word	0x0801cf50
 8011c70:	0801d020 	.word	0x0801d020
 8011c74:	0801d038 	.word	0x0801d038

08011c78 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b086      	sub	sp, #24
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	60f8      	str	r0, [r7, #12]
 8011c80:	60b9      	str	r1, [r7, #8]
 8011c82:	4613      	mov	r3, r2
 8011c84:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011c86:	68fb      	ldr	r3, [r7, #12]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d106      	bne.n	8011c9a <pbuf_add_header_impl+0x22>
 8011c8c:	4b2b      	ldr	r3, [pc, #172]	; (8011d3c <pbuf_add_header_impl+0xc4>)
 8011c8e:	f240 12df 	movw	r2, #479	; 0x1df
 8011c92:	492b      	ldr	r1, [pc, #172]	; (8011d40 <pbuf_add_header_impl+0xc8>)
 8011c94:	482b      	ldr	r0, [pc, #172]	; (8011d44 <pbuf_add_header_impl+0xcc>)
 8011c96:	f009 fd21 	bl	801b6dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d003      	beq.n	8011ca8 <pbuf_add_header_impl+0x30>
 8011ca0:	68bb      	ldr	r3, [r7, #8]
 8011ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ca6:	d301      	bcc.n	8011cac <pbuf_add_header_impl+0x34>
    return 1;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	e043      	b.n	8011d34 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d101      	bne.n	8011cb6 <pbuf_add_header_impl+0x3e>
    return 0;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	e03e      	b.n	8011d34 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	891a      	ldrh	r2, [r3, #8]
 8011cbe:	8a7b      	ldrh	r3, [r7, #18]
 8011cc0:	4413      	add	r3, r2
 8011cc2:	b29b      	uxth	r3, r3
 8011cc4:	8a7a      	ldrh	r2, [r7, #18]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d901      	bls.n	8011cce <pbuf_add_header_impl+0x56>
    return 1;
 8011cca:	2301      	movs	r3, #1
 8011ccc:	e032      	b.n	8011d34 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	7b1b      	ldrb	r3, [r3, #12]
 8011cd2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011cd4:	8a3b      	ldrh	r3, [r7, #16]
 8011cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d00c      	beq.n	8011cf8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011cde:	68fb      	ldr	r3, [r7, #12]
 8011ce0:	685a      	ldr	r2, [r3, #4]
 8011ce2:	68bb      	ldr	r3, [r7, #8]
 8011ce4:	425b      	negs	r3, r3
 8011ce6:	4413      	add	r3, r2
 8011ce8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	3310      	adds	r3, #16
 8011cee:	697a      	ldr	r2, [r7, #20]
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d20d      	bcs.n	8011d10 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011cf4:	2301      	movs	r3, #1
 8011cf6:	e01d      	b.n	8011d34 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8011cf8:	79fb      	ldrb	r3, [r7, #7]
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d006      	beq.n	8011d0c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011cfe:	68fb      	ldr	r3, [r7, #12]
 8011d00:	685a      	ldr	r2, [r3, #4]
 8011d02:	68bb      	ldr	r3, [r7, #8]
 8011d04:	425b      	negs	r3, r3
 8011d06:	4413      	add	r3, r2
 8011d08:	617b      	str	r3, [r7, #20]
 8011d0a:	e001      	b.n	8011d10 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011d0c:	2301      	movs	r3, #1
 8011d0e:	e011      	b.n	8011d34 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011d10:	68fb      	ldr	r3, [r7, #12]
 8011d12:	697a      	ldr	r2, [r7, #20]
 8011d14:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	895a      	ldrh	r2, [r3, #10]
 8011d1a:	8a7b      	ldrh	r3, [r7, #18]
 8011d1c:	4413      	add	r3, r2
 8011d1e:	b29a      	uxth	r2, r3
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	891a      	ldrh	r2, [r3, #8]
 8011d28:	8a7b      	ldrh	r3, [r7, #18]
 8011d2a:	4413      	add	r3, r2
 8011d2c:	b29a      	uxth	r2, r3
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	811a      	strh	r2, [r3, #8]


  return 0;
 8011d32:	2300      	movs	r3, #0
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	3718      	adds	r7, #24
 8011d38:	46bd      	mov	sp, r7
 8011d3a:	bd80      	pop	{r7, pc}
 8011d3c:	0801cef0 	.word	0x0801cef0
 8011d40:	0801d054 	.word	0x0801d054
 8011d44:	0801cf50 	.word	0x0801cf50

08011d48 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b082      	sub	sp, #8
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011d52:	2200      	movs	r2, #0
 8011d54:	6839      	ldr	r1, [r7, #0]
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f7ff ff8e 	bl	8011c78 <pbuf_add_header_impl>
 8011d5c:	4603      	mov	r3, r0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3708      	adds	r7, #8
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}
	...

08011d68 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b084      	sub	sp, #16
 8011d6c:	af00      	add	r7, sp, #0
 8011d6e:	6078      	str	r0, [r7, #4]
 8011d70:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d106      	bne.n	8011d86 <pbuf_remove_header+0x1e>
 8011d78:	4b20      	ldr	r3, [pc, #128]	; (8011dfc <pbuf_remove_header+0x94>)
 8011d7a:	f240 224b 	movw	r2, #587	; 0x24b
 8011d7e:	4920      	ldr	r1, [pc, #128]	; (8011e00 <pbuf_remove_header+0x98>)
 8011d80:	4820      	ldr	r0, [pc, #128]	; (8011e04 <pbuf_remove_header+0x9c>)
 8011d82:	f009 fcab 	bl	801b6dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d003      	beq.n	8011d94 <pbuf_remove_header+0x2c>
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d92:	d301      	bcc.n	8011d98 <pbuf_remove_header+0x30>
    return 1;
 8011d94:	2301      	movs	r3, #1
 8011d96:	e02c      	b.n	8011df2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d101      	bne.n	8011da2 <pbuf_remove_header+0x3a>
    return 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	e027      	b.n	8011df2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	895b      	ldrh	r3, [r3, #10]
 8011daa:	89fa      	ldrh	r2, [r7, #14]
 8011dac:	429a      	cmp	r2, r3
 8011dae:	d908      	bls.n	8011dc2 <pbuf_remove_header+0x5a>
 8011db0:	4b12      	ldr	r3, [pc, #72]	; (8011dfc <pbuf_remove_header+0x94>)
 8011db2:	f240 2255 	movw	r2, #597	; 0x255
 8011db6:	4914      	ldr	r1, [pc, #80]	; (8011e08 <pbuf_remove_header+0xa0>)
 8011db8:	4812      	ldr	r0, [pc, #72]	; (8011e04 <pbuf_remove_header+0x9c>)
 8011dba:	f009 fc8f 	bl	801b6dc <iprintf>
 8011dbe:	2301      	movs	r3, #1
 8011dc0:	e017      	b.n	8011df2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	685b      	ldr	r3, [r3, #4]
 8011dc6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	685a      	ldr	r2, [r3, #4]
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	441a      	add	r2, r3
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	895a      	ldrh	r2, [r3, #10]
 8011dd8:	89fb      	ldrh	r3, [r7, #14]
 8011dda:	1ad3      	subs	r3, r2, r3
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	891a      	ldrh	r2, [r3, #8]
 8011de6:	89fb      	ldrh	r3, [r7, #14]
 8011de8:	1ad3      	subs	r3, r2, r3
 8011dea:	b29a      	uxth	r2, r3
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011df0:	2300      	movs	r3, #0
}
 8011df2:	4618      	mov	r0, r3
 8011df4:	3710      	adds	r7, #16
 8011df6:	46bd      	mov	sp, r7
 8011df8:	bd80      	pop	{r7, pc}
 8011dfa:	bf00      	nop
 8011dfc:	0801cef0 	.word	0x0801cef0
 8011e00:	0801d054 	.word	0x0801d054
 8011e04:	0801cf50 	.word	0x0801cf50
 8011e08:	0801d060 	.word	0x0801d060

08011e0c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
 8011e14:	460b      	mov	r3, r1
 8011e16:	807b      	strh	r3, [r7, #2]
 8011e18:	4613      	mov	r3, r2
 8011e1a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011e1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	da08      	bge.n	8011e36 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011e24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e28:	425b      	negs	r3, r3
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	6878      	ldr	r0, [r7, #4]
 8011e2e:	f7ff ff9b 	bl	8011d68 <pbuf_remove_header>
 8011e32:	4603      	mov	r3, r0
 8011e34:	e007      	b.n	8011e46 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011e36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e3a:	787a      	ldrb	r2, [r7, #1]
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	6878      	ldr	r0, [r7, #4]
 8011e40:	f7ff ff1a 	bl	8011c78 <pbuf_add_header_impl>
 8011e44:	4603      	mov	r3, r0
  }
}
 8011e46:	4618      	mov	r0, r3
 8011e48:	3708      	adds	r7, #8
 8011e4a:	46bd      	mov	sp, r7
 8011e4c:	bd80      	pop	{r7, pc}

08011e4e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011e4e:	b580      	push	{r7, lr}
 8011e50:	b082      	sub	sp, #8
 8011e52:	af00      	add	r7, sp, #0
 8011e54:	6078      	str	r0, [r7, #4]
 8011e56:	460b      	mov	r3, r1
 8011e58:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011e5a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e5e:	2201      	movs	r2, #1
 8011e60:	4619      	mov	r1, r3
 8011e62:	6878      	ldr	r0, [r7, #4]
 8011e64:	f7ff ffd2 	bl	8011e0c <pbuf_header_impl>
 8011e68:	4603      	mov	r3, r0
}
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	3708      	adds	r7, #8
 8011e6e:	46bd      	mov	sp, r7
 8011e70:	bd80      	pop	{r7, pc}
	...

08011e74 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b088      	sub	sp, #32
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d10b      	bne.n	8011e9a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	2b00      	cmp	r3, #0
 8011e86:	d106      	bne.n	8011e96 <pbuf_free+0x22>
 8011e88:	4b3b      	ldr	r3, [pc, #236]	; (8011f78 <pbuf_free+0x104>)
 8011e8a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011e8e:	493b      	ldr	r1, [pc, #236]	; (8011f7c <pbuf_free+0x108>)
 8011e90:	483b      	ldr	r0, [pc, #236]	; (8011f80 <pbuf_free+0x10c>)
 8011e92:	f009 fc23 	bl	801b6dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011e96:	2300      	movs	r3, #0
 8011e98:	e069      	b.n	8011f6e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011e9e:	e062      	b.n	8011f66 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011ea0:	f009 fa62 	bl	801b368 <sys_arch_protect>
 8011ea4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	7b9b      	ldrb	r3, [r3, #14]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d106      	bne.n	8011ebc <pbuf_free+0x48>
 8011eae:	4b32      	ldr	r3, [pc, #200]	; (8011f78 <pbuf_free+0x104>)
 8011eb0:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011eb4:	4933      	ldr	r1, [pc, #204]	; (8011f84 <pbuf_free+0x110>)
 8011eb6:	4832      	ldr	r0, [pc, #200]	; (8011f80 <pbuf_free+0x10c>)
 8011eb8:	f009 fc10 	bl	801b6dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	7b9b      	ldrb	r3, [r3, #14]
 8011ec0:	3b01      	subs	r3, #1
 8011ec2:	b2da      	uxtb	r2, r3
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	739a      	strb	r2, [r3, #14]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	7b9b      	ldrb	r3, [r3, #14]
 8011ecc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011ece:	69b8      	ldr	r0, [r7, #24]
 8011ed0:	f009 fa58 	bl	801b384 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011ed4:	7dfb      	ldrb	r3, [r7, #23]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d143      	bne.n	8011f62 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	7b1b      	ldrb	r3, [r3, #12]
 8011ee4:	f003 030f 	and.w	r3, r3, #15
 8011ee8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8011eea:	687b      	ldr	r3, [r7, #4]
 8011eec:	7b5b      	ldrb	r3, [r3, #13]
 8011eee:	f003 0302 	and.w	r3, r3, #2
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d011      	beq.n	8011f1a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8011efa:	68bb      	ldr	r3, [r7, #8]
 8011efc:	691b      	ldr	r3, [r3, #16]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d106      	bne.n	8011f10 <pbuf_free+0x9c>
 8011f02:	4b1d      	ldr	r3, [pc, #116]	; (8011f78 <pbuf_free+0x104>)
 8011f04:	f240 22ff 	movw	r2, #767	; 0x2ff
 8011f08:	491f      	ldr	r1, [pc, #124]	; (8011f88 <pbuf_free+0x114>)
 8011f0a:	481d      	ldr	r0, [pc, #116]	; (8011f80 <pbuf_free+0x10c>)
 8011f0c:	f009 fbe6 	bl	801b6dc <iprintf>
        pc->custom_free_function(p);
 8011f10:	68bb      	ldr	r3, [r7, #8]
 8011f12:	691b      	ldr	r3, [r3, #16]
 8011f14:	6878      	ldr	r0, [r7, #4]
 8011f16:	4798      	blx	r3
 8011f18:	e01d      	b.n	8011f56 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8011f1a:	7bfb      	ldrb	r3, [r7, #15]
 8011f1c:	2b02      	cmp	r3, #2
 8011f1e:	d104      	bne.n	8011f2a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011f20:	6879      	ldr	r1, [r7, #4]
 8011f22:	200c      	movs	r0, #12
 8011f24:	f7ff f902 	bl	801112c <memp_free>
 8011f28:	e015      	b.n	8011f56 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8011f2a:	7bfb      	ldrb	r3, [r7, #15]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d104      	bne.n	8011f3a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011f30:	6879      	ldr	r1, [r7, #4]
 8011f32:	200b      	movs	r0, #11
 8011f34:	f7ff f8fa 	bl	801112c <memp_free>
 8011f38:	e00d      	b.n	8011f56 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011f3a:	7bfb      	ldrb	r3, [r7, #15]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d103      	bne.n	8011f48 <pbuf_free+0xd4>
          mem_free(p);
 8011f40:	6878      	ldr	r0, [r7, #4]
 8011f42:	f7fe fd3f 	bl	80109c4 <mem_free>
 8011f46:	e006      	b.n	8011f56 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011f48:	4b0b      	ldr	r3, [pc, #44]	; (8011f78 <pbuf_free+0x104>)
 8011f4a:	f240 320f 	movw	r2, #783	; 0x30f
 8011f4e:	490f      	ldr	r1, [pc, #60]	; (8011f8c <pbuf_free+0x118>)
 8011f50:	480b      	ldr	r0, [pc, #44]	; (8011f80 <pbuf_free+0x10c>)
 8011f52:	f009 fbc3 	bl	801b6dc <iprintf>
        }
      }
      count++;
 8011f56:	7ffb      	ldrb	r3, [r7, #31]
 8011f58:	3301      	adds	r3, #1
 8011f5a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	607b      	str	r3, [r7, #4]
 8011f60:	e001      	b.n	8011f66 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011f62:	2300      	movs	r3, #0
 8011f64:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d199      	bne.n	8011ea0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011f6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8011f6e:	4618      	mov	r0, r3
 8011f70:	3720      	adds	r7, #32
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}
 8011f76:	bf00      	nop
 8011f78:	0801cef0 	.word	0x0801cef0
 8011f7c:	0801d054 	.word	0x0801d054
 8011f80:	0801cf50 	.word	0x0801cf50
 8011f84:	0801d080 	.word	0x0801d080
 8011f88:	0801d098 	.word	0x0801d098
 8011f8c:	0801d0bc 	.word	0x0801d0bc

08011f90 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011f90:	b480      	push	{r7}
 8011f92:	b085      	sub	sp, #20
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011f98:	2300      	movs	r3, #0
 8011f9a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011f9c:	e005      	b.n	8011faa <pbuf_clen+0x1a>
    ++len;
 8011f9e:	89fb      	ldrh	r3, [r7, #14]
 8011fa0:	3301      	adds	r3, #1
 8011fa2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d1f6      	bne.n	8011f9e <pbuf_clen+0xe>
  }
  return len;
 8011fb0:	89fb      	ldrh	r3, [r7, #14]
}
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	3714      	adds	r7, #20
 8011fb6:	46bd      	mov	sp, r7
 8011fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fbc:	4770      	bx	lr
	...

08011fc0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011fc0:	b580      	push	{r7, lr}
 8011fc2:	b084      	sub	sp, #16
 8011fc4:	af00      	add	r7, sp, #0
 8011fc6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d016      	beq.n	8011ffc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011fce:	f009 f9cb 	bl	801b368 <sys_arch_protect>
 8011fd2:	60f8      	str	r0, [r7, #12]
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	7b9b      	ldrb	r3, [r3, #14]
 8011fd8:	3301      	adds	r3, #1
 8011fda:	b2da      	uxtb	r2, r3
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	739a      	strb	r2, [r3, #14]
 8011fe0:	68f8      	ldr	r0, [r7, #12]
 8011fe2:	f009 f9cf 	bl	801b384 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	7b9b      	ldrb	r3, [r3, #14]
 8011fea:	2b00      	cmp	r3, #0
 8011fec:	d106      	bne.n	8011ffc <pbuf_ref+0x3c>
 8011fee:	4b05      	ldr	r3, [pc, #20]	; (8012004 <pbuf_ref+0x44>)
 8011ff0:	f240 3242 	movw	r2, #834	; 0x342
 8011ff4:	4904      	ldr	r1, [pc, #16]	; (8012008 <pbuf_ref+0x48>)
 8011ff6:	4805      	ldr	r0, [pc, #20]	; (801200c <pbuf_ref+0x4c>)
 8011ff8:	f009 fb70 	bl	801b6dc <iprintf>
  }
}
 8011ffc:	bf00      	nop
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	0801cef0 	.word	0x0801cef0
 8012008:	0801d0d0 	.word	0x0801d0d0
 801200c:	0801cf50 	.word	0x0801cf50

08012010 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012010:	b580      	push	{r7, lr}
 8012012:	b084      	sub	sp, #16
 8012014:	af00      	add	r7, sp, #0
 8012016:	6078      	str	r0, [r7, #4]
 8012018:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d002      	beq.n	8012026 <pbuf_cat+0x16>
 8012020:	683b      	ldr	r3, [r7, #0]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d107      	bne.n	8012036 <pbuf_cat+0x26>
 8012026:	4b20      	ldr	r3, [pc, #128]	; (80120a8 <pbuf_cat+0x98>)
 8012028:	f240 3259 	movw	r2, #857	; 0x359
 801202c:	491f      	ldr	r1, [pc, #124]	; (80120ac <pbuf_cat+0x9c>)
 801202e:	4820      	ldr	r0, [pc, #128]	; (80120b0 <pbuf_cat+0xa0>)
 8012030:	f009 fb54 	bl	801b6dc <iprintf>
 8012034:	e034      	b.n	80120a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	60fb      	str	r3, [r7, #12]
 801203a:	e00a      	b.n	8012052 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	891a      	ldrh	r2, [r3, #8]
 8012040:	683b      	ldr	r3, [r7, #0]
 8012042:	891b      	ldrh	r3, [r3, #8]
 8012044:	4413      	add	r3, r2
 8012046:	b29a      	uxth	r2, r3
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	681b      	ldr	r3, [r3, #0]
 8012050:	60fb      	str	r3, [r7, #12]
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d1f0      	bne.n	801203c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801205a:	68fb      	ldr	r3, [r7, #12]
 801205c:	891a      	ldrh	r2, [r3, #8]
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	895b      	ldrh	r3, [r3, #10]
 8012062:	429a      	cmp	r2, r3
 8012064:	d006      	beq.n	8012074 <pbuf_cat+0x64>
 8012066:	4b10      	ldr	r3, [pc, #64]	; (80120a8 <pbuf_cat+0x98>)
 8012068:	f240 3262 	movw	r2, #866	; 0x362
 801206c:	4911      	ldr	r1, [pc, #68]	; (80120b4 <pbuf_cat+0xa4>)
 801206e:	4810      	ldr	r0, [pc, #64]	; (80120b0 <pbuf_cat+0xa0>)
 8012070:	f009 fb34 	bl	801b6dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	2b00      	cmp	r3, #0
 801207a:	d006      	beq.n	801208a <pbuf_cat+0x7a>
 801207c:	4b0a      	ldr	r3, [pc, #40]	; (80120a8 <pbuf_cat+0x98>)
 801207e:	f240 3263 	movw	r2, #867	; 0x363
 8012082:	490d      	ldr	r1, [pc, #52]	; (80120b8 <pbuf_cat+0xa8>)
 8012084:	480a      	ldr	r0, [pc, #40]	; (80120b0 <pbuf_cat+0xa0>)
 8012086:	f009 fb29 	bl	801b6dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	891a      	ldrh	r2, [r3, #8]
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	891b      	ldrh	r3, [r3, #8]
 8012092:	4413      	add	r3, r2
 8012094:	b29a      	uxth	r2, r3
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	683a      	ldr	r2, [r7, #0]
 801209e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80120a0:	3710      	adds	r7, #16
 80120a2:	46bd      	mov	sp, r7
 80120a4:	bd80      	pop	{r7, pc}
 80120a6:	bf00      	nop
 80120a8:	0801cef0 	.word	0x0801cef0
 80120ac:	0801d0e4 	.word	0x0801d0e4
 80120b0:	0801cf50 	.word	0x0801cf50
 80120b4:	0801d11c 	.word	0x0801d11c
 80120b8:	0801d14c 	.word	0x0801d14c

080120bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
 80120c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80120c6:	6839      	ldr	r1, [r7, #0]
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f7ff ffa1 	bl	8012010 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80120ce:	6838      	ldr	r0, [r7, #0]
 80120d0:	f7ff ff76 	bl	8011fc0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80120d4:	bf00      	nop
 80120d6:	3708      	adds	r7, #8
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}

080120dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b086      	sub	sp, #24
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80120e6:	2300      	movs	r3, #0
 80120e8:	617b      	str	r3, [r7, #20]
 80120ea:	2300      	movs	r3, #0
 80120ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d008      	beq.n	8012106 <pbuf_copy+0x2a>
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d005      	beq.n	8012106 <pbuf_copy+0x2a>
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	891a      	ldrh	r2, [r3, #8]
 80120fe:	683b      	ldr	r3, [r7, #0]
 8012100:	891b      	ldrh	r3, [r3, #8]
 8012102:	429a      	cmp	r2, r3
 8012104:	d209      	bcs.n	801211a <pbuf_copy+0x3e>
 8012106:	4b57      	ldr	r3, [pc, #348]	; (8012264 <pbuf_copy+0x188>)
 8012108:	f240 32c9 	movw	r2, #969	; 0x3c9
 801210c:	4956      	ldr	r1, [pc, #344]	; (8012268 <pbuf_copy+0x18c>)
 801210e:	4857      	ldr	r0, [pc, #348]	; (801226c <pbuf_copy+0x190>)
 8012110:	f009 fae4 	bl	801b6dc <iprintf>
 8012114:	f06f 030f 	mvn.w	r3, #15
 8012118:	e09f      	b.n	801225a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	895b      	ldrh	r3, [r3, #10]
 801211e:	461a      	mov	r2, r3
 8012120:	697b      	ldr	r3, [r7, #20]
 8012122:	1ad2      	subs	r2, r2, r3
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	895b      	ldrh	r3, [r3, #10]
 8012128:	4619      	mov	r1, r3
 801212a:	693b      	ldr	r3, [r7, #16]
 801212c:	1acb      	subs	r3, r1, r3
 801212e:	429a      	cmp	r2, r3
 8012130:	d306      	bcc.n	8012140 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012132:	683b      	ldr	r3, [r7, #0]
 8012134:	895b      	ldrh	r3, [r3, #10]
 8012136:	461a      	mov	r2, r3
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	1ad3      	subs	r3, r2, r3
 801213c:	60fb      	str	r3, [r7, #12]
 801213e:	e005      	b.n	801214c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	895b      	ldrh	r3, [r3, #10]
 8012144:	461a      	mov	r2, r3
 8012146:	697b      	ldr	r3, [r7, #20]
 8012148:	1ad3      	subs	r3, r2, r3
 801214a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	685a      	ldr	r2, [r3, #4]
 8012150:	697b      	ldr	r3, [r7, #20]
 8012152:	18d0      	adds	r0, r2, r3
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	685a      	ldr	r2, [r3, #4]
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	4413      	add	r3, r2
 801215c:	68fa      	ldr	r2, [r7, #12]
 801215e:	4619      	mov	r1, r3
 8012160:	f009 fa4b 	bl	801b5fa <memcpy>
    offset_to += len;
 8012164:	697a      	ldr	r2, [r7, #20]
 8012166:	68fb      	ldr	r3, [r7, #12]
 8012168:	4413      	add	r3, r2
 801216a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801216c:	693a      	ldr	r2, [r7, #16]
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	4413      	add	r3, r2
 8012172:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	895b      	ldrh	r3, [r3, #10]
 8012178:	461a      	mov	r2, r3
 801217a:	697b      	ldr	r3, [r7, #20]
 801217c:	4293      	cmp	r3, r2
 801217e:	d906      	bls.n	801218e <pbuf_copy+0xb2>
 8012180:	4b38      	ldr	r3, [pc, #224]	; (8012264 <pbuf_copy+0x188>)
 8012182:	f240 32d9 	movw	r2, #985	; 0x3d9
 8012186:	493a      	ldr	r1, [pc, #232]	; (8012270 <pbuf_copy+0x194>)
 8012188:	4838      	ldr	r0, [pc, #224]	; (801226c <pbuf_copy+0x190>)
 801218a:	f009 faa7 	bl	801b6dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801218e:	683b      	ldr	r3, [r7, #0]
 8012190:	895b      	ldrh	r3, [r3, #10]
 8012192:	461a      	mov	r2, r3
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	4293      	cmp	r3, r2
 8012198:	d906      	bls.n	80121a8 <pbuf_copy+0xcc>
 801219a:	4b32      	ldr	r3, [pc, #200]	; (8012264 <pbuf_copy+0x188>)
 801219c:	f240 32da 	movw	r2, #986	; 0x3da
 80121a0:	4934      	ldr	r1, [pc, #208]	; (8012274 <pbuf_copy+0x198>)
 80121a2:	4832      	ldr	r0, [pc, #200]	; (801226c <pbuf_copy+0x190>)
 80121a4:	f009 fa9a 	bl	801b6dc <iprintf>
    if (offset_from >= p_from->len) {
 80121a8:	683b      	ldr	r3, [r7, #0]
 80121aa:	895b      	ldrh	r3, [r3, #10]
 80121ac:	461a      	mov	r2, r3
 80121ae:	693b      	ldr	r3, [r7, #16]
 80121b0:	4293      	cmp	r3, r2
 80121b2:	d304      	bcc.n	80121be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80121b4:	2300      	movs	r3, #0
 80121b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80121b8:	683b      	ldr	r3, [r7, #0]
 80121ba:	681b      	ldr	r3, [r3, #0]
 80121bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	895b      	ldrh	r3, [r3, #10]
 80121c2:	461a      	mov	r2, r3
 80121c4:	697b      	ldr	r3, [r7, #20]
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d114      	bne.n	80121f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80121ca:	2300      	movs	r3, #0
 80121cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	d10c      	bne.n	80121f4 <pbuf_copy+0x118>
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d009      	beq.n	80121f4 <pbuf_copy+0x118>
 80121e0:	4b20      	ldr	r3, [pc, #128]	; (8012264 <pbuf_copy+0x188>)
 80121e2:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80121e6:	4924      	ldr	r1, [pc, #144]	; (8012278 <pbuf_copy+0x19c>)
 80121e8:	4820      	ldr	r0, [pc, #128]	; (801226c <pbuf_copy+0x190>)
 80121ea:	f009 fa77 	bl	801b6dc <iprintf>
 80121ee:	f06f 030f 	mvn.w	r3, #15
 80121f2:	e032      	b.n	801225a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80121f4:	683b      	ldr	r3, [r7, #0]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d013      	beq.n	8012222 <pbuf_copy+0x146>
 80121fa:	683b      	ldr	r3, [r7, #0]
 80121fc:	895a      	ldrh	r2, [r3, #10]
 80121fe:	683b      	ldr	r3, [r7, #0]
 8012200:	891b      	ldrh	r3, [r3, #8]
 8012202:	429a      	cmp	r2, r3
 8012204:	d10d      	bne.n	8012222 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d009      	beq.n	8012222 <pbuf_copy+0x146>
 801220e:	4b15      	ldr	r3, [pc, #84]	; (8012264 <pbuf_copy+0x188>)
 8012210:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8012214:	4919      	ldr	r1, [pc, #100]	; (801227c <pbuf_copy+0x1a0>)
 8012216:	4815      	ldr	r0, [pc, #84]	; (801226c <pbuf_copy+0x190>)
 8012218:	f009 fa60 	bl	801b6dc <iprintf>
 801221c:	f06f 0305 	mvn.w	r3, #5
 8012220:	e01b      	b.n	801225a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d013      	beq.n	8012250 <pbuf_copy+0x174>
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	895a      	ldrh	r2, [r3, #10]
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	891b      	ldrh	r3, [r3, #8]
 8012230:	429a      	cmp	r2, r3
 8012232:	d10d      	bne.n	8012250 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d009      	beq.n	8012250 <pbuf_copy+0x174>
 801223c:	4b09      	ldr	r3, [pc, #36]	; (8012264 <pbuf_copy+0x188>)
 801223e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8012242:	490e      	ldr	r1, [pc, #56]	; (801227c <pbuf_copy+0x1a0>)
 8012244:	4809      	ldr	r0, [pc, #36]	; (801226c <pbuf_copy+0x190>)
 8012246:	f009 fa49 	bl	801b6dc <iprintf>
 801224a:	f06f 0305 	mvn.w	r3, #5
 801224e:	e004      	b.n	801225a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	2b00      	cmp	r3, #0
 8012254:	f47f af61 	bne.w	801211a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012258:	2300      	movs	r3, #0
}
 801225a:	4618      	mov	r0, r3
 801225c:	3718      	adds	r7, #24
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	0801cef0 	.word	0x0801cef0
 8012268:	0801d198 	.word	0x0801d198
 801226c:	0801cf50 	.word	0x0801cf50
 8012270:	0801d1c8 	.word	0x0801d1c8
 8012274:	0801d1e0 	.word	0x0801d1e0
 8012278:	0801d1fc 	.word	0x0801d1fc
 801227c:	0801d20c 	.word	0x0801d20c

08012280 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	b088      	sub	sp, #32
 8012284:	af00      	add	r7, sp, #0
 8012286:	60f8      	str	r0, [r7, #12]
 8012288:	60b9      	str	r1, [r7, #8]
 801228a:	4611      	mov	r1, r2
 801228c:	461a      	mov	r2, r3
 801228e:	460b      	mov	r3, r1
 8012290:	80fb      	strh	r3, [r7, #6]
 8012292:	4613      	mov	r3, r2
 8012294:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012296:	2300      	movs	r3, #0
 8012298:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801229a:	2300      	movs	r3, #0
 801229c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d108      	bne.n	80122b6 <pbuf_copy_partial+0x36>
 80122a4:	4b2b      	ldr	r3, [pc, #172]	; (8012354 <pbuf_copy_partial+0xd4>)
 80122a6:	f240 420a 	movw	r2, #1034	; 0x40a
 80122aa:	492b      	ldr	r1, [pc, #172]	; (8012358 <pbuf_copy_partial+0xd8>)
 80122ac:	482b      	ldr	r0, [pc, #172]	; (801235c <pbuf_copy_partial+0xdc>)
 80122ae:	f009 fa15 	bl	801b6dc <iprintf>
 80122b2:	2300      	movs	r3, #0
 80122b4:	e04a      	b.n	801234c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80122b6:	68bb      	ldr	r3, [r7, #8]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d108      	bne.n	80122ce <pbuf_copy_partial+0x4e>
 80122bc:	4b25      	ldr	r3, [pc, #148]	; (8012354 <pbuf_copy_partial+0xd4>)
 80122be:	f240 420b 	movw	r2, #1035	; 0x40b
 80122c2:	4927      	ldr	r1, [pc, #156]	; (8012360 <pbuf_copy_partial+0xe0>)
 80122c4:	4825      	ldr	r0, [pc, #148]	; (801235c <pbuf_copy_partial+0xdc>)
 80122c6:	f009 fa09 	bl	801b6dc <iprintf>
 80122ca:	2300      	movs	r3, #0
 80122cc:	e03e      	b.n	801234c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	61fb      	str	r3, [r7, #28]
 80122d2:	e034      	b.n	801233e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80122d4:	88bb      	ldrh	r3, [r7, #4]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d00a      	beq.n	80122f0 <pbuf_copy_partial+0x70>
 80122da:	69fb      	ldr	r3, [r7, #28]
 80122dc:	895b      	ldrh	r3, [r3, #10]
 80122de:	88ba      	ldrh	r2, [r7, #4]
 80122e0:	429a      	cmp	r2, r3
 80122e2:	d305      	bcc.n	80122f0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	895b      	ldrh	r3, [r3, #10]
 80122e8:	88ba      	ldrh	r2, [r7, #4]
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	80bb      	strh	r3, [r7, #4]
 80122ee:	e023      	b.n	8012338 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80122f0:	69fb      	ldr	r3, [r7, #28]
 80122f2:	895a      	ldrh	r2, [r3, #10]
 80122f4:	88bb      	ldrh	r3, [r7, #4]
 80122f6:	1ad3      	subs	r3, r2, r3
 80122f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80122fa:	8b3a      	ldrh	r2, [r7, #24]
 80122fc:	88fb      	ldrh	r3, [r7, #6]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d901      	bls.n	8012306 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012302:	88fb      	ldrh	r3, [r7, #6]
 8012304:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012306:	8b7b      	ldrh	r3, [r7, #26]
 8012308:	68ba      	ldr	r2, [r7, #8]
 801230a:	18d0      	adds	r0, r2, r3
 801230c:	69fb      	ldr	r3, [r7, #28]
 801230e:	685a      	ldr	r2, [r3, #4]
 8012310:	88bb      	ldrh	r3, [r7, #4]
 8012312:	4413      	add	r3, r2
 8012314:	8b3a      	ldrh	r2, [r7, #24]
 8012316:	4619      	mov	r1, r3
 8012318:	f009 f96f 	bl	801b5fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801231c:	8afa      	ldrh	r2, [r7, #22]
 801231e:	8b3b      	ldrh	r3, [r7, #24]
 8012320:	4413      	add	r3, r2
 8012322:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012324:	8b7a      	ldrh	r2, [r7, #26]
 8012326:	8b3b      	ldrh	r3, [r7, #24]
 8012328:	4413      	add	r3, r2
 801232a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801232c:	88fa      	ldrh	r2, [r7, #6]
 801232e:	8b3b      	ldrh	r3, [r7, #24]
 8012330:	1ad3      	subs	r3, r2, r3
 8012332:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012334:	2300      	movs	r3, #0
 8012336:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012338:	69fb      	ldr	r3, [r7, #28]
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	61fb      	str	r3, [r7, #28]
 801233e:	88fb      	ldrh	r3, [r7, #6]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d002      	beq.n	801234a <pbuf_copy_partial+0xca>
 8012344:	69fb      	ldr	r3, [r7, #28]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d1c4      	bne.n	80122d4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801234a:	8afb      	ldrh	r3, [r7, #22]
}
 801234c:	4618      	mov	r0, r3
 801234e:	3720      	adds	r7, #32
 8012350:	46bd      	mov	sp, r7
 8012352:	bd80      	pop	{r7, pc}
 8012354:	0801cef0 	.word	0x0801cef0
 8012358:	0801d238 	.word	0x0801d238
 801235c:	0801cf50 	.word	0x0801cf50
 8012360:	0801d258 	.word	0x0801d258

08012364 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012364:	b580      	push	{r7, lr}
 8012366:	b084      	sub	sp, #16
 8012368:	af00      	add	r7, sp, #0
 801236a:	4603      	mov	r3, r0
 801236c:	603a      	str	r2, [r7, #0]
 801236e:	71fb      	strb	r3, [r7, #7]
 8012370:	460b      	mov	r3, r1
 8012372:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	8919      	ldrh	r1, [r3, #8]
 8012378:	88ba      	ldrh	r2, [r7, #4]
 801237a:	79fb      	ldrb	r3, [r7, #7]
 801237c:	4618      	mov	r0, r3
 801237e:	f7ff fa95 	bl	80118ac <pbuf_alloc>
 8012382:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d101      	bne.n	801238e <pbuf_clone+0x2a>
    return NULL;
 801238a:	2300      	movs	r3, #0
 801238c:	e011      	b.n	80123b2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801238e:	6839      	ldr	r1, [r7, #0]
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f7ff fea3 	bl	80120dc <pbuf_copy>
 8012396:	4603      	mov	r3, r0
 8012398:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801239a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d006      	beq.n	80123b0 <pbuf_clone+0x4c>
 80123a2:	4b06      	ldr	r3, [pc, #24]	; (80123bc <pbuf_clone+0x58>)
 80123a4:	f240 5224 	movw	r2, #1316	; 0x524
 80123a8:	4905      	ldr	r1, [pc, #20]	; (80123c0 <pbuf_clone+0x5c>)
 80123aa:	4806      	ldr	r0, [pc, #24]	; (80123c4 <pbuf_clone+0x60>)
 80123ac:	f009 f996 	bl	801b6dc <iprintf>
  return q;
 80123b0:	68fb      	ldr	r3, [r7, #12]
}
 80123b2:	4618      	mov	r0, r3
 80123b4:	3710      	adds	r7, #16
 80123b6:	46bd      	mov	sp, r7
 80123b8:	bd80      	pop	{r7, pc}
 80123ba:	bf00      	nop
 80123bc:	0801cef0 	.word	0x0801cef0
 80123c0:	0801d364 	.word	0x0801d364
 80123c4:	0801cf50 	.word	0x0801cf50

080123c8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80123cc:	f009 f99e 	bl	801b70c <rand>
 80123d0:	4603      	mov	r3, r0
 80123d2:	b29b      	uxth	r3, r3
 80123d4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80123d8:	b29b      	uxth	r3, r3
 80123da:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80123de:	b29a      	uxth	r2, r3
 80123e0:	4b01      	ldr	r3, [pc, #4]	; (80123e8 <tcp_init+0x20>)
 80123e2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80123e4:	bf00      	nop
 80123e6:	bd80      	pop	{r7, pc}
 80123e8:	24000030 	.word	0x24000030

080123ec <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	7d1b      	ldrb	r3, [r3, #20]
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d105      	bne.n	8012408 <tcp_free+0x1c>
 80123fc:	4b06      	ldr	r3, [pc, #24]	; (8012418 <tcp_free+0x2c>)
 80123fe:	22d4      	movs	r2, #212	; 0xd4
 8012400:	4906      	ldr	r1, [pc, #24]	; (801241c <tcp_free+0x30>)
 8012402:	4807      	ldr	r0, [pc, #28]	; (8012420 <tcp_free+0x34>)
 8012404:	f009 f96a 	bl	801b6dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012408:	6879      	ldr	r1, [r7, #4]
 801240a:	2001      	movs	r0, #1
 801240c:	f7fe fe8e 	bl	801112c <memp_free>
}
 8012410:	bf00      	nop
 8012412:	3708      	adds	r7, #8
 8012414:	46bd      	mov	sp, r7
 8012416:	bd80      	pop	{r7, pc}
 8012418:	0801d3f0 	.word	0x0801d3f0
 801241c:	0801d420 	.word	0x0801d420
 8012420:	0801d434 	.word	0x0801d434

08012424 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012424:	b580      	push	{r7, lr}
 8012426:	b082      	sub	sp, #8
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	7d1b      	ldrb	r3, [r3, #20]
 8012430:	2b01      	cmp	r3, #1
 8012432:	d105      	bne.n	8012440 <tcp_free_listen+0x1c>
 8012434:	4b06      	ldr	r3, [pc, #24]	; (8012450 <tcp_free_listen+0x2c>)
 8012436:	22df      	movs	r2, #223	; 0xdf
 8012438:	4906      	ldr	r1, [pc, #24]	; (8012454 <tcp_free_listen+0x30>)
 801243a:	4807      	ldr	r0, [pc, #28]	; (8012458 <tcp_free_listen+0x34>)
 801243c:	f009 f94e 	bl	801b6dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012440:	6879      	ldr	r1, [r7, #4]
 8012442:	2002      	movs	r0, #2
 8012444:	f7fe fe72 	bl	801112c <memp_free>
}
 8012448:	bf00      	nop
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	0801d3f0 	.word	0x0801d3f0
 8012454:	0801d45c 	.word	0x0801d45c
 8012458:	0801d434 	.word	0x0801d434

0801245c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 801245c:	b580      	push	{r7, lr}
 801245e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012460:	f001 f85c 	bl	801351c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012464:	4b07      	ldr	r3, [pc, #28]	; (8012484 <tcp_tmr+0x28>)
 8012466:	781b      	ldrb	r3, [r3, #0]
 8012468:	3301      	adds	r3, #1
 801246a:	b2da      	uxtb	r2, r3
 801246c:	4b05      	ldr	r3, [pc, #20]	; (8012484 <tcp_tmr+0x28>)
 801246e:	701a      	strb	r2, [r3, #0]
 8012470:	4b04      	ldr	r3, [pc, #16]	; (8012484 <tcp_tmr+0x28>)
 8012472:	781b      	ldrb	r3, [r3, #0]
 8012474:	f003 0301 	and.w	r3, r3, #1
 8012478:	2b00      	cmp	r3, #0
 801247a:	d001      	beq.n	8012480 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801247c:	f000 fd0e 	bl	8012e9c <tcp_slowtmr>
  }
}
 8012480:	bf00      	nop
 8012482:	bd80      	pop	{r7, pc}
 8012484:	24004afd 	.word	0x24004afd

08012488 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012488:	b580      	push	{r7, lr}
 801248a:	b084      	sub	sp, #16
 801248c:	af00      	add	r7, sp, #0
 801248e:	6078      	str	r0, [r7, #4]
 8012490:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012492:	683b      	ldr	r3, [r7, #0]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d105      	bne.n	80124a4 <tcp_remove_listener+0x1c>
 8012498:	4b0d      	ldr	r3, [pc, #52]	; (80124d0 <tcp_remove_listener+0x48>)
 801249a:	22ff      	movs	r2, #255	; 0xff
 801249c:	490d      	ldr	r1, [pc, #52]	; (80124d4 <tcp_remove_listener+0x4c>)
 801249e:	480e      	ldr	r0, [pc, #56]	; (80124d8 <tcp_remove_listener+0x50>)
 80124a0:	f009 f91c 	bl	801b6dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	60fb      	str	r3, [r7, #12]
 80124a8:	e00a      	b.n	80124c0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80124ae:	683a      	ldr	r2, [r7, #0]
 80124b0:	429a      	cmp	r2, r3
 80124b2:	d102      	bne.n	80124ba <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80124b4:	68fb      	ldr	r3, [r7, #12]
 80124b6:	2200      	movs	r2, #0
 80124b8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	60fb      	str	r3, [r7, #12]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d1f1      	bne.n	80124aa <tcp_remove_listener+0x22>
    }
  }
}
 80124c6:	bf00      	nop
 80124c8:	bf00      	nop
 80124ca:	3710      	adds	r7, #16
 80124cc:	46bd      	mov	sp, r7
 80124ce:	bd80      	pop	{r7, pc}
 80124d0:	0801d3f0 	.word	0x0801d3f0
 80124d4:	0801d478 	.word	0x0801d478
 80124d8:	0801d434 	.word	0x0801d434

080124dc <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d106      	bne.n	80124f8 <tcp_listen_closed+0x1c>
 80124ea:	4b14      	ldr	r3, [pc, #80]	; (801253c <tcp_listen_closed+0x60>)
 80124ec:	f240 1211 	movw	r2, #273	; 0x111
 80124f0:	4913      	ldr	r1, [pc, #76]	; (8012540 <tcp_listen_closed+0x64>)
 80124f2:	4814      	ldr	r0, [pc, #80]	; (8012544 <tcp_listen_closed+0x68>)
 80124f4:	f009 f8f2 	bl	801b6dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	7d1b      	ldrb	r3, [r3, #20]
 80124fc:	2b01      	cmp	r3, #1
 80124fe:	d006      	beq.n	801250e <tcp_listen_closed+0x32>
 8012500:	4b0e      	ldr	r3, [pc, #56]	; (801253c <tcp_listen_closed+0x60>)
 8012502:	f44f 7289 	mov.w	r2, #274	; 0x112
 8012506:	4910      	ldr	r1, [pc, #64]	; (8012548 <tcp_listen_closed+0x6c>)
 8012508:	480e      	ldr	r0, [pc, #56]	; (8012544 <tcp_listen_closed+0x68>)
 801250a:	f009 f8e7 	bl	801b6dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801250e:	2301      	movs	r3, #1
 8012510:	60fb      	str	r3, [r7, #12]
 8012512:	e00b      	b.n	801252c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012514:	4a0d      	ldr	r2, [pc, #52]	; (801254c <tcp_listen_closed+0x70>)
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801251c:	681b      	ldr	r3, [r3, #0]
 801251e:	6879      	ldr	r1, [r7, #4]
 8012520:	4618      	mov	r0, r3
 8012522:	f7ff ffb1 	bl	8012488 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012526:	68fb      	ldr	r3, [r7, #12]
 8012528:	3301      	adds	r3, #1
 801252a:	60fb      	str	r3, [r7, #12]
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	2b03      	cmp	r3, #3
 8012530:	d9f0      	bls.n	8012514 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012532:	bf00      	nop
 8012534:	bf00      	nop
 8012536:	3710      	adds	r7, #16
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	0801d3f0 	.word	0x0801d3f0
 8012540:	0801d4a0 	.word	0x0801d4a0
 8012544:	0801d434 	.word	0x0801d434
 8012548:	0801d4ac 	.word	0x0801d4ac
 801254c:	0801fcf8 	.word	0x0801fcf8

08012550 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8012550:	b5b0      	push	{r4, r5, r7, lr}
 8012552:	b088      	sub	sp, #32
 8012554:	af04      	add	r7, sp, #16
 8012556:	6078      	str	r0, [r7, #4]
 8012558:	460b      	mov	r3, r1
 801255a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	2b00      	cmp	r3, #0
 8012560:	d106      	bne.n	8012570 <tcp_close_shutdown+0x20>
 8012562:	4b63      	ldr	r3, [pc, #396]	; (80126f0 <tcp_close_shutdown+0x1a0>)
 8012564:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8012568:	4962      	ldr	r1, [pc, #392]	; (80126f4 <tcp_close_shutdown+0x1a4>)
 801256a:	4863      	ldr	r0, [pc, #396]	; (80126f8 <tcp_close_shutdown+0x1a8>)
 801256c:	f009 f8b6 	bl	801b6dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8012570:	78fb      	ldrb	r3, [r7, #3]
 8012572:	2b00      	cmp	r3, #0
 8012574:	d066      	beq.n	8012644 <tcp_close_shutdown+0xf4>
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	7d1b      	ldrb	r3, [r3, #20]
 801257a:	2b04      	cmp	r3, #4
 801257c:	d003      	beq.n	8012586 <tcp_close_shutdown+0x36>
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	7d1b      	ldrb	r3, [r3, #20]
 8012582:	2b07      	cmp	r3, #7
 8012584:	d15e      	bne.n	8012644 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801258a:	2b00      	cmp	r3, #0
 801258c:	d104      	bne.n	8012598 <tcp_close_shutdown+0x48>
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012592:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012596:	d055      	beq.n	8012644 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	8b5b      	ldrh	r3, [r3, #26]
 801259c:	f003 0310 	and.w	r3, r3, #16
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d106      	bne.n	80125b2 <tcp_close_shutdown+0x62>
 80125a4:	4b52      	ldr	r3, [pc, #328]	; (80126f0 <tcp_close_shutdown+0x1a0>)
 80125a6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80125aa:	4954      	ldr	r1, [pc, #336]	; (80126fc <tcp_close_shutdown+0x1ac>)
 80125ac:	4852      	ldr	r0, [pc, #328]	; (80126f8 <tcp_close_shutdown+0x1a8>)
 80125ae:	f009 f895 	bl	801b6dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80125ba:	687d      	ldr	r5, [r7, #4]
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	3304      	adds	r3, #4
 80125c0:	687a      	ldr	r2, [r7, #4]
 80125c2:	8ad2      	ldrh	r2, [r2, #22]
 80125c4:	6879      	ldr	r1, [r7, #4]
 80125c6:	8b09      	ldrh	r1, [r1, #24]
 80125c8:	9102      	str	r1, [sp, #8]
 80125ca:	9201      	str	r2, [sp, #4]
 80125cc:	9300      	str	r3, [sp, #0]
 80125ce:	462b      	mov	r3, r5
 80125d0:	4622      	mov	r2, r4
 80125d2:	4601      	mov	r1, r0
 80125d4:	6878      	ldr	r0, [r7, #4]
 80125d6:	f005 fd85 	bl	80180e4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80125da:	6878      	ldr	r0, [r7, #4]
 80125dc:	f001 fb66 	bl	8013cac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80125e0:	4b47      	ldr	r3, [pc, #284]	; (8012700 <tcp_close_shutdown+0x1b0>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	429a      	cmp	r2, r3
 80125e8:	d105      	bne.n	80125f6 <tcp_close_shutdown+0xa6>
 80125ea:	4b45      	ldr	r3, [pc, #276]	; (8012700 <tcp_close_shutdown+0x1b0>)
 80125ec:	681b      	ldr	r3, [r3, #0]
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	4a43      	ldr	r2, [pc, #268]	; (8012700 <tcp_close_shutdown+0x1b0>)
 80125f2:	6013      	str	r3, [r2, #0]
 80125f4:	e013      	b.n	801261e <tcp_close_shutdown+0xce>
 80125f6:	4b42      	ldr	r3, [pc, #264]	; (8012700 <tcp_close_shutdown+0x1b0>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	60fb      	str	r3, [r7, #12]
 80125fc:	e00c      	b.n	8012618 <tcp_close_shutdown+0xc8>
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	687a      	ldr	r2, [r7, #4]
 8012604:	429a      	cmp	r2, r3
 8012606:	d104      	bne.n	8012612 <tcp_close_shutdown+0xc2>
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	68da      	ldr	r2, [r3, #12]
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	60da      	str	r2, [r3, #12]
 8012610:	e005      	b.n	801261e <tcp_close_shutdown+0xce>
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	68db      	ldr	r3, [r3, #12]
 8012616:	60fb      	str	r3, [r7, #12]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d1ef      	bne.n	80125fe <tcp_close_shutdown+0xae>
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	2200      	movs	r2, #0
 8012622:	60da      	str	r2, [r3, #12]
 8012624:	4b37      	ldr	r3, [pc, #220]	; (8012704 <tcp_close_shutdown+0x1b4>)
 8012626:	2201      	movs	r2, #1
 8012628:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801262a:	4b37      	ldr	r3, [pc, #220]	; (8012708 <tcp_close_shutdown+0x1b8>)
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	687a      	ldr	r2, [r7, #4]
 8012630:	429a      	cmp	r2, r3
 8012632:	d102      	bne.n	801263a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8012634:	f003 fffa 	bl	801662c <tcp_trigger_input_pcb_close>
 8012638:	e002      	b.n	8012640 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801263a:	6878      	ldr	r0, [r7, #4]
 801263c:	f7ff fed6 	bl	80123ec <tcp_free>
      }
      return ERR_OK;
 8012640:	2300      	movs	r3, #0
 8012642:	e050      	b.n	80126e6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	7d1b      	ldrb	r3, [r3, #20]
 8012648:	2b02      	cmp	r3, #2
 801264a:	d03b      	beq.n	80126c4 <tcp_close_shutdown+0x174>
 801264c:	2b02      	cmp	r3, #2
 801264e:	dc44      	bgt.n	80126da <tcp_close_shutdown+0x18a>
 8012650:	2b00      	cmp	r3, #0
 8012652:	d002      	beq.n	801265a <tcp_close_shutdown+0x10a>
 8012654:	2b01      	cmp	r3, #1
 8012656:	d02a      	beq.n	80126ae <tcp_close_shutdown+0x15e>
 8012658:	e03f      	b.n	80126da <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	8adb      	ldrh	r3, [r3, #22]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d021      	beq.n	80126a6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8012662:	4b2a      	ldr	r3, [pc, #168]	; (801270c <tcp_close_shutdown+0x1bc>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	687a      	ldr	r2, [r7, #4]
 8012668:	429a      	cmp	r2, r3
 801266a:	d105      	bne.n	8012678 <tcp_close_shutdown+0x128>
 801266c:	4b27      	ldr	r3, [pc, #156]	; (801270c <tcp_close_shutdown+0x1bc>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	68db      	ldr	r3, [r3, #12]
 8012672:	4a26      	ldr	r2, [pc, #152]	; (801270c <tcp_close_shutdown+0x1bc>)
 8012674:	6013      	str	r3, [r2, #0]
 8012676:	e013      	b.n	80126a0 <tcp_close_shutdown+0x150>
 8012678:	4b24      	ldr	r3, [pc, #144]	; (801270c <tcp_close_shutdown+0x1bc>)
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	60bb      	str	r3, [r7, #8]
 801267e:	e00c      	b.n	801269a <tcp_close_shutdown+0x14a>
 8012680:	68bb      	ldr	r3, [r7, #8]
 8012682:	68db      	ldr	r3, [r3, #12]
 8012684:	687a      	ldr	r2, [r7, #4]
 8012686:	429a      	cmp	r2, r3
 8012688:	d104      	bne.n	8012694 <tcp_close_shutdown+0x144>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	68da      	ldr	r2, [r3, #12]
 801268e:	68bb      	ldr	r3, [r7, #8]
 8012690:	60da      	str	r2, [r3, #12]
 8012692:	e005      	b.n	80126a0 <tcp_close_shutdown+0x150>
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	68db      	ldr	r3, [r3, #12]
 8012698:	60bb      	str	r3, [r7, #8]
 801269a:	68bb      	ldr	r3, [r7, #8]
 801269c:	2b00      	cmp	r3, #0
 801269e:	d1ef      	bne.n	8012680 <tcp_close_shutdown+0x130>
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	2200      	movs	r2, #0
 80126a4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f7ff fea0 	bl	80123ec <tcp_free>
      break;
 80126ac:	e01a      	b.n	80126e4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80126ae:	6878      	ldr	r0, [r7, #4]
 80126b0:	f7ff ff14 	bl	80124dc <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80126b4:	6879      	ldr	r1, [r7, #4]
 80126b6:	4816      	ldr	r0, [pc, #88]	; (8012710 <tcp_close_shutdown+0x1c0>)
 80126b8:	f001 fb48 	bl	8013d4c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f7ff feb1 	bl	8012424 <tcp_free_listen>
      break;
 80126c2:	e00f      	b.n	80126e4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80126c4:	6879      	ldr	r1, [r7, #4]
 80126c6:	480e      	ldr	r0, [pc, #56]	; (8012700 <tcp_close_shutdown+0x1b0>)
 80126c8:	f001 fb40 	bl	8013d4c <tcp_pcb_remove>
 80126cc:	4b0d      	ldr	r3, [pc, #52]	; (8012704 <tcp_close_shutdown+0x1b4>)
 80126ce:	2201      	movs	r2, #1
 80126d0:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80126d2:	6878      	ldr	r0, [r7, #4]
 80126d4:	f7ff fe8a 	bl	80123ec <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80126d8:	e004      	b.n	80126e4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80126da:	6878      	ldr	r0, [r7, #4]
 80126dc:	f000 f81a 	bl	8012714 <tcp_close_shutdown_fin>
 80126e0:	4603      	mov	r3, r0
 80126e2:	e000      	b.n	80126e6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80126e4:	2300      	movs	r3, #0
}
 80126e6:	4618      	mov	r0, r3
 80126e8:	3710      	adds	r7, #16
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bdb0      	pop	{r4, r5, r7, pc}
 80126ee:	bf00      	nop
 80126f0:	0801d3f0 	.word	0x0801d3f0
 80126f4:	0801d4c4 	.word	0x0801d4c4
 80126f8:	0801d434 	.word	0x0801d434
 80126fc:	0801d4e4 	.word	0x0801d4e4
 8012700:	240082dc 	.word	0x240082dc
 8012704:	240082d8 	.word	0x240082d8
 8012708:	240082f0 	.word	0x240082f0
 801270c:	240082e8 	.word	0x240082e8
 8012710:	240082e4 	.word	0x240082e4

08012714 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8012714:	b580      	push	{r7, lr}
 8012716:	b084      	sub	sp, #16
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d106      	bne.n	8012730 <tcp_close_shutdown_fin+0x1c>
 8012722:	4b2e      	ldr	r3, [pc, #184]	; (80127dc <tcp_close_shutdown_fin+0xc8>)
 8012724:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8012728:	492d      	ldr	r1, [pc, #180]	; (80127e0 <tcp_close_shutdown_fin+0xcc>)
 801272a:	482e      	ldr	r0, [pc, #184]	; (80127e4 <tcp_close_shutdown_fin+0xd0>)
 801272c:	f008 ffd6 	bl	801b6dc <iprintf>

  switch (pcb->state) {
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	7d1b      	ldrb	r3, [r3, #20]
 8012734:	2b07      	cmp	r3, #7
 8012736:	d020      	beq.n	801277a <tcp_close_shutdown_fin+0x66>
 8012738:	2b07      	cmp	r3, #7
 801273a:	dc2b      	bgt.n	8012794 <tcp_close_shutdown_fin+0x80>
 801273c:	2b03      	cmp	r3, #3
 801273e:	d002      	beq.n	8012746 <tcp_close_shutdown_fin+0x32>
 8012740:	2b04      	cmp	r3, #4
 8012742:	d00d      	beq.n	8012760 <tcp_close_shutdown_fin+0x4c>
 8012744:	e026      	b.n	8012794 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f004 fdda 	bl	8017300 <tcp_send_fin>
 801274c:	4603      	mov	r3, r0
 801274e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d11f      	bne.n	8012798 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2205      	movs	r2, #5
 801275c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801275e:	e01b      	b.n	8012798 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f004 fdcd 	bl	8017300 <tcp_send_fin>
 8012766:	4603      	mov	r3, r0
 8012768:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801276a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801276e:	2b00      	cmp	r3, #0
 8012770:	d114      	bne.n	801279c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	2205      	movs	r2, #5
 8012776:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012778:	e010      	b.n	801279c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801277a:	6878      	ldr	r0, [r7, #4]
 801277c:	f004 fdc0 	bl	8017300 <tcp_send_fin>
 8012780:	4603      	mov	r3, r0
 8012782:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8012784:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012788:	2b00      	cmp	r3, #0
 801278a:	d109      	bne.n	80127a0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	2209      	movs	r2, #9
 8012790:	751a      	strb	r2, [r3, #20]
      }
      break;
 8012792:	e005      	b.n	80127a0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8012794:	2300      	movs	r3, #0
 8012796:	e01c      	b.n	80127d2 <tcp_close_shutdown_fin+0xbe>
      break;
 8012798:	bf00      	nop
 801279a:	e002      	b.n	80127a2 <tcp_close_shutdown_fin+0x8e>
      break;
 801279c:	bf00      	nop
 801279e:	e000      	b.n	80127a2 <tcp_close_shutdown_fin+0x8e>
      break;
 80127a0:	bf00      	nop
  }

  if (err == ERR_OK) {
 80127a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d103      	bne.n	80127b2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f004 fee6 	bl	801757c <tcp_output>
 80127b0:	e00d      	b.n	80127ce <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80127b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127ba:	d108      	bne.n	80127ce <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80127bc:	687b      	ldr	r3, [r7, #4]
 80127be:	8b5b      	ldrh	r3, [r3, #26]
 80127c0:	f043 0308 	orr.w	r3, r3, #8
 80127c4:	b29a      	uxth	r2, r3
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80127ca:	2300      	movs	r3, #0
 80127cc:	e001      	b.n	80127d2 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80127ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80127d2:	4618      	mov	r0, r3
 80127d4:	3710      	adds	r7, #16
 80127d6:	46bd      	mov	sp, r7
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	0801d3f0 	.word	0x0801d3f0
 80127e0:	0801d4a0 	.word	0x0801d4a0
 80127e4:	0801d434 	.word	0x0801d434

080127e8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80127e8:	b580      	push	{r7, lr}
 80127ea:	b082      	sub	sp, #8
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d109      	bne.n	801280a <tcp_close+0x22>
 80127f6:	4b0f      	ldr	r3, [pc, #60]	; (8012834 <tcp_close+0x4c>)
 80127f8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80127fc:	490e      	ldr	r1, [pc, #56]	; (8012838 <tcp_close+0x50>)
 80127fe:	480f      	ldr	r0, [pc, #60]	; (801283c <tcp_close+0x54>)
 8012800:	f008 ff6c 	bl	801b6dc <iprintf>
 8012804:	f06f 030f 	mvn.w	r3, #15
 8012808:	e00f      	b.n	801282a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	7d1b      	ldrb	r3, [r3, #20]
 801280e:	2b01      	cmp	r3, #1
 8012810:	d006      	beq.n	8012820 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8012812:	687b      	ldr	r3, [r7, #4]
 8012814:	8b5b      	ldrh	r3, [r3, #26]
 8012816:	f043 0310 	orr.w	r3, r3, #16
 801281a:	b29a      	uxth	r2, r3
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8012820:	2101      	movs	r1, #1
 8012822:	6878      	ldr	r0, [r7, #4]
 8012824:	f7ff fe94 	bl	8012550 <tcp_close_shutdown>
 8012828:	4603      	mov	r3, r0
}
 801282a:	4618      	mov	r0, r3
 801282c:	3708      	adds	r7, #8
 801282e:	46bd      	mov	sp, r7
 8012830:	bd80      	pop	{r7, pc}
 8012832:	bf00      	nop
 8012834:	0801d3f0 	.word	0x0801d3f0
 8012838:	0801d500 	.word	0x0801d500
 801283c:	0801d434 	.word	0x0801d434

08012840 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b08e      	sub	sp, #56	; 0x38
 8012844:	af04      	add	r7, sp, #16
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d107      	bne.n	8012860 <tcp_abandon+0x20>
 8012850:	4b52      	ldr	r3, [pc, #328]	; (801299c <tcp_abandon+0x15c>)
 8012852:	f240 223d 	movw	r2, #573	; 0x23d
 8012856:	4952      	ldr	r1, [pc, #328]	; (80129a0 <tcp_abandon+0x160>)
 8012858:	4852      	ldr	r0, [pc, #328]	; (80129a4 <tcp_abandon+0x164>)
 801285a:	f008 ff3f 	bl	801b6dc <iprintf>
 801285e:	e099      	b.n	8012994 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	7d1b      	ldrb	r3, [r3, #20]
 8012864:	2b01      	cmp	r3, #1
 8012866:	d106      	bne.n	8012876 <tcp_abandon+0x36>
 8012868:	4b4c      	ldr	r3, [pc, #304]	; (801299c <tcp_abandon+0x15c>)
 801286a:	f44f 7210 	mov.w	r2, #576	; 0x240
 801286e:	494e      	ldr	r1, [pc, #312]	; (80129a8 <tcp_abandon+0x168>)
 8012870:	484c      	ldr	r0, [pc, #304]	; (80129a4 <tcp_abandon+0x164>)
 8012872:	f008 ff33 	bl	801b6dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	7d1b      	ldrb	r3, [r3, #20]
 801287a:	2b0a      	cmp	r3, #10
 801287c:	d107      	bne.n	801288e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801287e:	6879      	ldr	r1, [r7, #4]
 8012880:	484a      	ldr	r0, [pc, #296]	; (80129ac <tcp_abandon+0x16c>)
 8012882:	f001 fa63 	bl	8013d4c <tcp_pcb_remove>
    tcp_free(pcb);
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff fdb0 	bl	80123ec <tcp_free>
 801288c:	e082      	b.n	8012994 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801288e:	2300      	movs	r3, #0
 8012890:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8012892:	2300      	movs	r3, #0
 8012894:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801289a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80128a8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	691b      	ldr	r3, [r3, #16]
 80128ae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	7d1b      	ldrb	r3, [r3, #20]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d126      	bne.n	8012906 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	8adb      	ldrh	r3, [r3, #22]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d02e      	beq.n	801291e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80128c0:	4b3b      	ldr	r3, [pc, #236]	; (80129b0 <tcp_abandon+0x170>)
 80128c2:	681b      	ldr	r3, [r3, #0]
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d105      	bne.n	80128d6 <tcp_abandon+0x96>
 80128ca:	4b39      	ldr	r3, [pc, #228]	; (80129b0 <tcp_abandon+0x170>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	68db      	ldr	r3, [r3, #12]
 80128d0:	4a37      	ldr	r2, [pc, #220]	; (80129b0 <tcp_abandon+0x170>)
 80128d2:	6013      	str	r3, [r2, #0]
 80128d4:	e013      	b.n	80128fe <tcp_abandon+0xbe>
 80128d6:	4b36      	ldr	r3, [pc, #216]	; (80129b0 <tcp_abandon+0x170>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	61fb      	str	r3, [r7, #28]
 80128dc:	e00c      	b.n	80128f8 <tcp_abandon+0xb8>
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	68db      	ldr	r3, [r3, #12]
 80128e2:	687a      	ldr	r2, [r7, #4]
 80128e4:	429a      	cmp	r2, r3
 80128e6:	d104      	bne.n	80128f2 <tcp_abandon+0xb2>
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	68da      	ldr	r2, [r3, #12]
 80128ec:	69fb      	ldr	r3, [r7, #28]
 80128ee:	60da      	str	r2, [r3, #12]
 80128f0:	e005      	b.n	80128fe <tcp_abandon+0xbe>
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	61fb      	str	r3, [r7, #28]
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d1ef      	bne.n	80128de <tcp_abandon+0x9e>
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	2200      	movs	r2, #0
 8012902:	60da      	str	r2, [r3, #12]
 8012904:	e00b      	b.n	801291e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8012906:	683b      	ldr	r3, [r7, #0]
 8012908:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	8adb      	ldrh	r3, [r3, #22]
 801290e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8012910:	6879      	ldr	r1, [r7, #4]
 8012912:	4828      	ldr	r0, [pc, #160]	; (80129b4 <tcp_abandon+0x174>)
 8012914:	f001 fa1a 	bl	8013d4c <tcp_pcb_remove>
 8012918:	4b27      	ldr	r3, [pc, #156]	; (80129b8 <tcp_abandon+0x178>)
 801291a:	2201      	movs	r2, #1
 801291c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012922:	2b00      	cmp	r3, #0
 8012924:	d004      	beq.n	8012930 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801292a:	4618      	mov	r0, r3
 801292c:	f000 fed6 	bl	80136dc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012934:	2b00      	cmp	r3, #0
 8012936:	d004      	beq.n	8012942 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801293c:	4618      	mov	r0, r3
 801293e:	f000 fecd 	bl	80136dc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012946:	2b00      	cmp	r3, #0
 8012948:	d004      	beq.n	8012954 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801294e:	4618      	mov	r0, r3
 8012950:	f000 fec4 	bl	80136dc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012956:	2b00      	cmp	r3, #0
 8012958:	d00e      	beq.n	8012978 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801295a:	6879      	ldr	r1, [r7, #4]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	3304      	adds	r3, #4
 8012960:	687a      	ldr	r2, [r7, #4]
 8012962:	8b12      	ldrh	r2, [r2, #24]
 8012964:	9202      	str	r2, [sp, #8]
 8012966:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012968:	9201      	str	r2, [sp, #4]
 801296a:	9300      	str	r3, [sp, #0]
 801296c:	460b      	mov	r3, r1
 801296e:	697a      	ldr	r2, [r7, #20]
 8012970:	69b9      	ldr	r1, [r7, #24]
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f005 fbb6 	bl	80180e4 <tcp_rst>
    }
    last_state = pcb->state;
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	7d1b      	ldrb	r3, [r3, #20]
 801297c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801297e:	6878      	ldr	r0, [r7, #4]
 8012980:	f7ff fd34 	bl	80123ec <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012984:	693b      	ldr	r3, [r7, #16]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d004      	beq.n	8012994 <tcp_abandon+0x154>
 801298a:	693b      	ldr	r3, [r7, #16]
 801298c:	f06f 010c 	mvn.w	r1, #12
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	4798      	blx	r3
  }
}
 8012994:	3728      	adds	r7, #40	; 0x28
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	0801d3f0 	.word	0x0801d3f0
 80129a0:	0801d534 	.word	0x0801d534
 80129a4:	0801d434 	.word	0x0801d434
 80129a8:	0801d550 	.word	0x0801d550
 80129ac:	240082ec 	.word	0x240082ec
 80129b0:	240082e8 	.word	0x240082e8
 80129b4:	240082dc 	.word	0x240082dc
 80129b8:	240082d8 	.word	0x240082d8

080129bc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b082      	sub	sp, #8
 80129c0:	af00      	add	r7, sp, #0
 80129c2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80129c4:	2101      	movs	r1, #1
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f7ff ff3a 	bl	8012840 <tcp_abandon>
}
 80129cc:	bf00      	nop
 80129ce:	3708      	adds	r7, #8
 80129d0:	46bd      	mov	sp, r7
 80129d2:	bd80      	pop	{r7, pc}

080129d4 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b088      	sub	sp, #32
 80129d8:	af00      	add	r7, sp, #0
 80129da:	60f8      	str	r0, [r7, #12]
 80129dc:	60b9      	str	r1, [r7, #8]
 80129de:	4613      	mov	r3, r2
 80129e0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80129e2:	2304      	movs	r3, #4
 80129e4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d101      	bne.n	80129f0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80129ec:	4b3e      	ldr	r3, [pc, #248]	; (8012ae8 <tcp_bind+0x114>)
 80129ee:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d109      	bne.n	8012a0a <tcp_bind+0x36>
 80129f6:	4b3d      	ldr	r3, [pc, #244]	; (8012aec <tcp_bind+0x118>)
 80129f8:	f240 22a9 	movw	r2, #681	; 0x2a9
 80129fc:	493c      	ldr	r1, [pc, #240]	; (8012af0 <tcp_bind+0x11c>)
 80129fe:	483d      	ldr	r0, [pc, #244]	; (8012af4 <tcp_bind+0x120>)
 8012a00:	f008 fe6c 	bl	801b6dc <iprintf>
 8012a04:	f06f 030f 	mvn.w	r3, #15
 8012a08:	e06a      	b.n	8012ae0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	7d1b      	ldrb	r3, [r3, #20]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d009      	beq.n	8012a26 <tcp_bind+0x52>
 8012a12:	4b36      	ldr	r3, [pc, #216]	; (8012aec <tcp_bind+0x118>)
 8012a14:	f240 22ab 	movw	r2, #683	; 0x2ab
 8012a18:	4937      	ldr	r1, [pc, #220]	; (8012af8 <tcp_bind+0x124>)
 8012a1a:	4836      	ldr	r0, [pc, #216]	; (8012af4 <tcp_bind+0x120>)
 8012a1c:	f008 fe5e 	bl	801b6dc <iprintf>
 8012a20:	f06f 0305 	mvn.w	r3, #5
 8012a24:	e05c      	b.n	8012ae0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8012a26:	88fb      	ldrh	r3, [r7, #6]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d109      	bne.n	8012a40 <tcp_bind+0x6c>
    port = tcp_new_port();
 8012a2c:	f000 f9f0 	bl	8012e10 <tcp_new_port>
 8012a30:	4603      	mov	r3, r0
 8012a32:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012a34:	88fb      	ldrh	r3, [r7, #6]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d135      	bne.n	8012aa6 <tcp_bind+0xd2>
      return ERR_BUF;
 8012a3a:	f06f 0301 	mvn.w	r3, #1
 8012a3e:	e04f      	b.n	8012ae0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012a40:	2300      	movs	r3, #0
 8012a42:	61fb      	str	r3, [r7, #28]
 8012a44:	e02b      	b.n	8012a9e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012a46:	4a2d      	ldr	r2, [pc, #180]	; (8012afc <tcp_bind+0x128>)
 8012a48:	69fb      	ldr	r3, [r7, #28]
 8012a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	61bb      	str	r3, [r7, #24]
 8012a52:	e01e      	b.n	8012a92 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8012a54:	69bb      	ldr	r3, [r7, #24]
 8012a56:	8adb      	ldrh	r3, [r3, #22]
 8012a58:	88fa      	ldrh	r2, [r7, #6]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d116      	bne.n	8012a8c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8012a5e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	d010      	beq.n	8012a86 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d00c      	beq.n	8012a86 <tcp_bind+0xb2>
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	2b00      	cmp	r3, #0
 8012a70:	d009      	beq.n	8012a86 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d005      	beq.n	8012a86 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	681a      	ldr	r2, [r3, #0]
 8012a7e:	68bb      	ldr	r3, [r7, #8]
 8012a80:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d102      	bne.n	8012a8c <tcp_bind+0xb8>
              return ERR_USE;
 8012a86:	f06f 0307 	mvn.w	r3, #7
 8012a8a:	e029      	b.n	8012ae0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012a8c:	69bb      	ldr	r3, [r7, #24]
 8012a8e:	68db      	ldr	r3, [r3, #12]
 8012a90:	61bb      	str	r3, [r7, #24]
 8012a92:	69bb      	ldr	r3, [r7, #24]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d1dd      	bne.n	8012a54 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8012a98:	69fb      	ldr	r3, [r7, #28]
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	61fb      	str	r3, [r7, #28]
 8012a9e:	69fa      	ldr	r2, [r7, #28]
 8012aa0:	697b      	ldr	r3, [r7, #20]
 8012aa2:	429a      	cmp	r2, r3
 8012aa4:	dbcf      	blt.n	8012a46 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8012aa6:	68bb      	ldr	r3, [r7, #8]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d00c      	beq.n	8012ac6 <tcp_bind+0xf2>
 8012aac:	68bb      	ldr	r3, [r7, #8]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d008      	beq.n	8012ac6 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012ab4:	68bb      	ldr	r3, [r7, #8]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d002      	beq.n	8012ac0 <tcp_bind+0xec>
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	681b      	ldr	r3, [r3, #0]
 8012abe:	e000      	b.n	8012ac2 <tcp_bind+0xee>
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	68fa      	ldr	r2, [r7, #12]
 8012ac4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	88fa      	ldrh	r2, [r7, #6]
 8012aca:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8012acc:	4b0c      	ldr	r3, [pc, #48]	; (8012b00 <tcp_bind+0x12c>)
 8012ace:	681a      	ldr	r2, [r3, #0]
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	60da      	str	r2, [r3, #12]
 8012ad4:	4a0a      	ldr	r2, [pc, #40]	; (8012b00 <tcp_bind+0x12c>)
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	6013      	str	r3, [r2, #0]
 8012ada:	f005 fcc5 	bl	8018468 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	3720      	adds	r7, #32
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	bd80      	pop	{r7, pc}
 8012ae8:	0801fd20 	.word	0x0801fd20
 8012aec:	0801d3f0 	.word	0x0801d3f0
 8012af0:	0801d584 	.word	0x0801d584
 8012af4:	0801d434 	.word	0x0801d434
 8012af8:	0801d59c 	.word	0x0801d59c
 8012afc:	0801fcf8 	.word	0x0801fcf8
 8012b00:	240082e8 	.word	0x240082e8

08012b04 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b084      	sub	sp, #16
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	60b9      	str	r1, [r7, #8]
 8012b0e:	4613      	mov	r3, r2
 8012b10:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8012b12:	68bb      	ldr	r3, [r7, #8]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d106      	bne.n	8012b26 <tcp_accept_null+0x22>
 8012b18:	4b07      	ldr	r3, [pc, #28]	; (8012b38 <tcp_accept_null+0x34>)
 8012b1a:	f240 320f 	movw	r2, #783	; 0x30f
 8012b1e:	4907      	ldr	r1, [pc, #28]	; (8012b3c <tcp_accept_null+0x38>)
 8012b20:	4807      	ldr	r0, [pc, #28]	; (8012b40 <tcp_accept_null+0x3c>)
 8012b22:	f008 fddb 	bl	801b6dc <iprintf>

  tcp_abort(pcb);
 8012b26:	68b8      	ldr	r0, [r7, #8]
 8012b28:	f7ff ff48 	bl	80129bc <tcp_abort>

  return ERR_ABRT;
 8012b2c:	f06f 030c 	mvn.w	r3, #12
}
 8012b30:	4618      	mov	r0, r3
 8012b32:	3710      	adds	r7, #16
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}
 8012b38:	0801d3f0 	.word	0x0801d3f0
 8012b3c:	0801d5c4 	.word	0x0801d5c4
 8012b40:	0801d434 	.word	0x0801d434

08012b44 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8012b44:	b580      	push	{r7, lr}
 8012b46:	b082      	sub	sp, #8
 8012b48:	af00      	add	r7, sp, #0
 8012b4a:	6078      	str	r0, [r7, #4]
 8012b4c:	460b      	mov	r3, r1
 8012b4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8012b50:	78fb      	ldrb	r3, [r7, #3]
 8012b52:	2200      	movs	r2, #0
 8012b54:	4619      	mov	r1, r3
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 f806 	bl	8012b68 <tcp_listen_with_backlog_and_err>
 8012b5c:	4603      	mov	r3, r0
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3708      	adds	r7, #8
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
	...

08012b68 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b088      	sub	sp, #32
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	60f8      	str	r0, [r7, #12]
 8012b70:	460b      	mov	r3, r1
 8012b72:	607a      	str	r2, [r7, #4]
 8012b74:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d109      	bne.n	8012b94 <tcp_listen_with_backlog_and_err+0x2c>
 8012b80:	4b47      	ldr	r3, [pc, #284]	; (8012ca0 <tcp_listen_with_backlog_and_err+0x138>)
 8012b82:	f240 3259 	movw	r2, #857	; 0x359
 8012b86:	4947      	ldr	r1, [pc, #284]	; (8012ca4 <tcp_listen_with_backlog_and_err+0x13c>)
 8012b88:	4847      	ldr	r0, [pc, #284]	; (8012ca8 <tcp_listen_with_backlog_and_err+0x140>)
 8012b8a:	f008 fda7 	bl	801b6dc <iprintf>
 8012b8e:	23f0      	movs	r3, #240	; 0xf0
 8012b90:	76fb      	strb	r3, [r7, #27]
 8012b92:	e079      	b.n	8012c88 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	7d1b      	ldrb	r3, [r3, #20]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d009      	beq.n	8012bb0 <tcp_listen_with_backlog_and_err+0x48>
 8012b9c:	4b40      	ldr	r3, [pc, #256]	; (8012ca0 <tcp_listen_with_backlog_and_err+0x138>)
 8012b9e:	f240 325a 	movw	r2, #858	; 0x35a
 8012ba2:	4942      	ldr	r1, [pc, #264]	; (8012cac <tcp_listen_with_backlog_and_err+0x144>)
 8012ba4:	4840      	ldr	r0, [pc, #256]	; (8012ca8 <tcp_listen_with_backlog_and_err+0x140>)
 8012ba6:	f008 fd99 	bl	801b6dc <iprintf>
 8012baa:	23f1      	movs	r3, #241	; 0xf1
 8012bac:	76fb      	strb	r3, [r7, #27]
 8012bae:	e06b      	b.n	8012c88 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	7d1b      	ldrb	r3, [r3, #20]
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d104      	bne.n	8012bc2 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8012bbc:	23f7      	movs	r3, #247	; 0xf7
 8012bbe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012bc0:	e062      	b.n	8012c88 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8012bc2:	2002      	movs	r0, #2
 8012bc4:	f7fe fa3c 	bl	8011040 <memp_malloc>
 8012bc8:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d102      	bne.n	8012bd6 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8012bd0:	23ff      	movs	r3, #255	; 0xff
 8012bd2:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012bd4:	e058      	b.n	8012c88 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	691a      	ldr	r2, [r3, #16]
 8012bda:	69fb      	ldr	r3, [r7, #28]
 8012bdc:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	8ada      	ldrh	r2, [r3, #22]
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	2201      	movs	r2, #1
 8012bea:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	7d5a      	ldrb	r2, [r3, #21]
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	7a5a      	ldrb	r2, [r3, #9]
 8012bf8:	69fb      	ldr	r3, [r7, #28]
 8012bfa:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	2200      	movs	r2, #0
 8012c00:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	7ada      	ldrb	r2, [r3, #11]
 8012c06:	69fb      	ldr	r3, [r7, #28]
 8012c08:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	7a9a      	ldrb	r2, [r3, #10]
 8012c0e:	69fb      	ldr	r3, [r7, #28]
 8012c10:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	69fb      	ldr	r3, [r7, #28]
 8012c18:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	8adb      	ldrh	r3, [r3, #22]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d021      	beq.n	8012c66 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8012c22:	4b23      	ldr	r3, [pc, #140]	; (8012cb0 <tcp_listen_with_backlog_and_err+0x148>)
 8012c24:	681b      	ldr	r3, [r3, #0]
 8012c26:	68fa      	ldr	r2, [r7, #12]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d105      	bne.n	8012c38 <tcp_listen_with_backlog_and_err+0xd0>
 8012c2c:	4b20      	ldr	r3, [pc, #128]	; (8012cb0 <tcp_listen_with_backlog_and_err+0x148>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	68db      	ldr	r3, [r3, #12]
 8012c32:	4a1f      	ldr	r2, [pc, #124]	; (8012cb0 <tcp_listen_with_backlog_and_err+0x148>)
 8012c34:	6013      	str	r3, [r2, #0]
 8012c36:	e013      	b.n	8012c60 <tcp_listen_with_backlog_and_err+0xf8>
 8012c38:	4b1d      	ldr	r3, [pc, #116]	; (8012cb0 <tcp_listen_with_backlog_and_err+0x148>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	617b      	str	r3, [r7, #20]
 8012c3e:	e00c      	b.n	8012c5a <tcp_listen_with_backlog_and_err+0xf2>
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	68db      	ldr	r3, [r3, #12]
 8012c44:	68fa      	ldr	r2, [r7, #12]
 8012c46:	429a      	cmp	r2, r3
 8012c48:	d104      	bne.n	8012c54 <tcp_listen_with_backlog_and_err+0xec>
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	68da      	ldr	r2, [r3, #12]
 8012c4e:	697b      	ldr	r3, [r7, #20]
 8012c50:	60da      	str	r2, [r3, #12]
 8012c52:	e005      	b.n	8012c60 <tcp_listen_with_backlog_and_err+0xf8>
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	68db      	ldr	r3, [r3, #12]
 8012c58:	617b      	str	r3, [r7, #20]
 8012c5a:	697b      	ldr	r3, [r7, #20]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d1ef      	bne.n	8012c40 <tcp_listen_with_backlog_and_err+0xd8>
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2200      	movs	r2, #0
 8012c64:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8012c66:	68f8      	ldr	r0, [r7, #12]
 8012c68:	f7ff fbc0 	bl	80123ec <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8012c6c:	69fb      	ldr	r3, [r7, #28]
 8012c6e:	4a11      	ldr	r2, [pc, #68]	; (8012cb4 <tcp_listen_with_backlog_and_err+0x14c>)
 8012c70:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8012c72:	4b11      	ldr	r3, [pc, #68]	; (8012cb8 <tcp_listen_with_backlog_and_err+0x150>)
 8012c74:	681a      	ldr	r2, [r3, #0]
 8012c76:	69fb      	ldr	r3, [r7, #28]
 8012c78:	60da      	str	r2, [r3, #12]
 8012c7a:	4a0f      	ldr	r2, [pc, #60]	; (8012cb8 <tcp_listen_with_backlog_and_err+0x150>)
 8012c7c:	69fb      	ldr	r3, [r7, #28]
 8012c7e:	6013      	str	r3, [r2, #0]
 8012c80:	f005 fbf2 	bl	8018468 <tcp_timer_needed>
  res = ERR_OK;
 8012c84:	2300      	movs	r3, #0
 8012c86:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d002      	beq.n	8012c94 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	7efa      	ldrb	r2, [r7, #27]
 8012c92:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8012c94:	69fb      	ldr	r3, [r7, #28]
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3720      	adds	r7, #32
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
 8012c9e:	bf00      	nop
 8012ca0:	0801d3f0 	.word	0x0801d3f0
 8012ca4:	0801d5e4 	.word	0x0801d5e4
 8012ca8:	0801d434 	.word	0x0801d434
 8012cac:	0801d614 	.word	0x0801d614
 8012cb0:	240082e8 	.word	0x240082e8
 8012cb4:	08012b05 	.word	0x08012b05
 8012cb8:	240082e4 	.word	0x240082e4

08012cbc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012cbc:	b580      	push	{r7, lr}
 8012cbe:	b084      	sub	sp, #16
 8012cc0:	af00      	add	r7, sp, #0
 8012cc2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d106      	bne.n	8012cd8 <tcp_update_rcv_ann_wnd+0x1c>
 8012cca:	4b25      	ldr	r3, [pc, #148]	; (8012d60 <tcp_update_rcv_ann_wnd+0xa4>)
 8012ccc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012cd0:	4924      	ldr	r1, [pc, #144]	; (8012d64 <tcp_update_rcv_ann_wnd+0xa8>)
 8012cd2:	4825      	ldr	r0, [pc, #148]	; (8012d68 <tcp_update_rcv_ann_wnd+0xac>)
 8012cd4:	f008 fd02 	bl	801b6dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cdc:	687a      	ldr	r2, [r7, #4]
 8012cde:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012ce0:	4413      	add	r3, r2
 8012ce2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8012cec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012cf0:	bf28      	it	cs
 8012cf2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012cf6:	b292      	uxth	r2, r2
 8012cf8:	4413      	add	r3, r2
 8012cfa:	68fa      	ldr	r2, [r7, #12]
 8012cfc:	1ad3      	subs	r3, r2, r3
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	db08      	blt.n	8012d14 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d0e:	68fa      	ldr	r2, [r7, #12]
 8012d10:	1ad3      	subs	r3, r2, r3
 8012d12:	e020      	b.n	8012d56 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d1c:	1ad3      	subs	r3, r2, r3
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	dd03      	ble.n	8012d2a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2200      	movs	r2, #0
 8012d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012d28:	e014      	b.n	8012d54 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d32:	1ad3      	subs	r3, r2, r3
 8012d34:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012d3c:	d306      	bcc.n	8012d4c <tcp_update_rcv_ann_wnd+0x90>
 8012d3e:	4b08      	ldr	r3, [pc, #32]	; (8012d60 <tcp_update_rcv_ann_wnd+0xa4>)
 8012d40:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012d44:	4909      	ldr	r1, [pc, #36]	; (8012d6c <tcp_update_rcv_ann_wnd+0xb0>)
 8012d46:	4808      	ldr	r0, [pc, #32]	; (8012d68 <tcp_update_rcv_ann_wnd+0xac>)
 8012d48:	f008 fcc8 	bl	801b6dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012d4c:	68bb      	ldr	r3, [r7, #8]
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012d54:	2300      	movs	r3, #0
  }
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3710      	adds	r7, #16
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	0801d3f0 	.word	0x0801d3f0
 8012d64:	0801d64c 	.word	0x0801d64c
 8012d68:	0801d434 	.word	0x0801d434
 8012d6c:	0801d670 	.word	0x0801d670

08012d70 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b084      	sub	sp, #16
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	460b      	mov	r3, r1
 8012d7a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	d107      	bne.n	8012d92 <tcp_recved+0x22>
 8012d82:	4b1f      	ldr	r3, [pc, #124]	; (8012e00 <tcp_recved+0x90>)
 8012d84:	f240 32cf 	movw	r2, #975	; 0x3cf
 8012d88:	491e      	ldr	r1, [pc, #120]	; (8012e04 <tcp_recved+0x94>)
 8012d8a:	481f      	ldr	r0, [pc, #124]	; (8012e08 <tcp_recved+0x98>)
 8012d8c:	f008 fca6 	bl	801b6dc <iprintf>
 8012d90:	e032      	b.n	8012df8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	7d1b      	ldrb	r3, [r3, #20]
 8012d96:	2b01      	cmp	r3, #1
 8012d98:	d106      	bne.n	8012da8 <tcp_recved+0x38>
 8012d9a:	4b19      	ldr	r3, [pc, #100]	; (8012e00 <tcp_recved+0x90>)
 8012d9c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8012da0:	491a      	ldr	r1, [pc, #104]	; (8012e0c <tcp_recved+0x9c>)
 8012da2:	4819      	ldr	r0, [pc, #100]	; (8012e08 <tcp_recved+0x98>)
 8012da4:	f008 fc9a 	bl	801b6dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012dac:	887b      	ldrh	r3, [r7, #2]
 8012dae:	4413      	add	r3, r2
 8012db0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8012db2:	89fb      	ldrh	r3, [r7, #14]
 8012db4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012db8:	d804      	bhi.n	8012dc4 <tcp_recved+0x54>
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dbe:	89fa      	ldrh	r2, [r7, #14]
 8012dc0:	429a      	cmp	r2, r3
 8012dc2:	d204      	bcs.n	8012dce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8012dca:	851a      	strh	r2, [r3, #40]	; 0x28
 8012dcc:	e002      	b.n	8012dd4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	89fa      	ldrh	r2, [r7, #14]
 8012dd2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f7ff ff71 	bl	8012cbc <tcp_update_rcv_ann_wnd>
 8012dda:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8012ddc:	68bb      	ldr	r3, [r7, #8]
 8012dde:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012de2:	d309      	bcc.n	8012df8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	8b5b      	ldrh	r3, [r3, #26]
 8012de8:	f043 0302 	orr.w	r3, r3, #2
 8012dec:	b29a      	uxth	r2, r3
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012df2:	6878      	ldr	r0, [r7, #4]
 8012df4:	f004 fbc2 	bl	801757c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012df8:	3710      	adds	r7, #16
 8012dfa:	46bd      	mov	sp, r7
 8012dfc:	bd80      	pop	{r7, pc}
 8012dfe:	bf00      	nop
 8012e00:	0801d3f0 	.word	0x0801d3f0
 8012e04:	0801d68c 	.word	0x0801d68c
 8012e08:	0801d434 	.word	0x0801d434
 8012e0c:	0801d6a4 	.word	0x0801d6a4

08012e10 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012e10:	b480      	push	{r7}
 8012e12:	b083      	sub	sp, #12
 8012e14:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012e16:	2300      	movs	r3, #0
 8012e18:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012e1a:	4b1e      	ldr	r3, [pc, #120]	; (8012e94 <tcp_new_port+0x84>)
 8012e1c:	881b      	ldrh	r3, [r3, #0]
 8012e1e:	3301      	adds	r3, #1
 8012e20:	b29a      	uxth	r2, r3
 8012e22:	4b1c      	ldr	r3, [pc, #112]	; (8012e94 <tcp_new_port+0x84>)
 8012e24:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8012e26:	4b1b      	ldr	r3, [pc, #108]	; (8012e94 <tcp_new_port+0x84>)
 8012e28:	881b      	ldrh	r3, [r3, #0]
 8012e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012e2e:	4293      	cmp	r3, r2
 8012e30:	d103      	bne.n	8012e3a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8012e32:	4b18      	ldr	r3, [pc, #96]	; (8012e94 <tcp_new_port+0x84>)
 8012e34:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012e38:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012e3a:	2300      	movs	r3, #0
 8012e3c:	71fb      	strb	r3, [r7, #7]
 8012e3e:	e01e      	b.n	8012e7e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012e40:	79fb      	ldrb	r3, [r7, #7]
 8012e42:	4a15      	ldr	r2, [pc, #84]	; (8012e98 <tcp_new_port+0x88>)
 8012e44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	603b      	str	r3, [r7, #0]
 8012e4c:	e011      	b.n	8012e72 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012e4e:	683b      	ldr	r3, [r7, #0]
 8012e50:	8ada      	ldrh	r2, [r3, #22]
 8012e52:	4b10      	ldr	r3, [pc, #64]	; (8012e94 <tcp_new_port+0x84>)
 8012e54:	881b      	ldrh	r3, [r3, #0]
 8012e56:	429a      	cmp	r2, r3
 8012e58:	d108      	bne.n	8012e6c <tcp_new_port+0x5c>
        n++;
 8012e5a:	88bb      	ldrh	r3, [r7, #4]
 8012e5c:	3301      	adds	r3, #1
 8012e5e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012e60:	88bb      	ldrh	r3, [r7, #4]
 8012e62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012e66:	d3d8      	bcc.n	8012e1a <tcp_new_port+0xa>
          return 0;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	e00d      	b.n	8012e88 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012e6c:	683b      	ldr	r3, [r7, #0]
 8012e6e:	68db      	ldr	r3, [r3, #12]
 8012e70:	603b      	str	r3, [r7, #0]
 8012e72:	683b      	ldr	r3, [r7, #0]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d1ea      	bne.n	8012e4e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012e78:	79fb      	ldrb	r3, [r7, #7]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	71fb      	strb	r3, [r7, #7]
 8012e7e:	79fb      	ldrb	r3, [r7, #7]
 8012e80:	2b03      	cmp	r3, #3
 8012e82:	d9dd      	bls.n	8012e40 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8012e84:	4b03      	ldr	r3, [pc, #12]	; (8012e94 <tcp_new_port+0x84>)
 8012e86:	881b      	ldrh	r3, [r3, #0]
}
 8012e88:	4618      	mov	r0, r3
 8012e8a:	370c      	adds	r7, #12
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e92:	4770      	bx	lr
 8012e94:	24000030 	.word	0x24000030
 8012e98:	0801fcf8 	.word	0x0801fcf8

08012e9c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012e9c:	b5b0      	push	{r4, r5, r7, lr}
 8012e9e:	b090      	sub	sp, #64	; 0x40
 8012ea0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8012ea8:	4b94      	ldr	r3, [pc, #592]	; (80130fc <tcp_slowtmr+0x260>)
 8012eaa:	681b      	ldr	r3, [r3, #0]
 8012eac:	3301      	adds	r3, #1
 8012eae:	4a93      	ldr	r2, [pc, #588]	; (80130fc <tcp_slowtmr+0x260>)
 8012eb0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8012eb2:	4b93      	ldr	r3, [pc, #588]	; (8013100 <tcp_slowtmr+0x264>)
 8012eb4:	781b      	ldrb	r3, [r3, #0]
 8012eb6:	3301      	adds	r3, #1
 8012eb8:	b2da      	uxtb	r2, r3
 8012eba:	4b91      	ldr	r3, [pc, #580]	; (8013100 <tcp_slowtmr+0x264>)
 8012ebc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012ebe:	2300      	movs	r3, #0
 8012ec0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8012ec2:	4b90      	ldr	r3, [pc, #576]	; (8013104 <tcp_slowtmr+0x268>)
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012ec8:	e29d      	b.n	8013406 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ecc:	7d1b      	ldrb	r3, [r3, #20]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d106      	bne.n	8012ee0 <tcp_slowtmr+0x44>
 8012ed2:	4b8d      	ldr	r3, [pc, #564]	; (8013108 <tcp_slowtmr+0x26c>)
 8012ed4:	f240 42be 	movw	r2, #1214	; 0x4be
 8012ed8:	498c      	ldr	r1, [pc, #560]	; (801310c <tcp_slowtmr+0x270>)
 8012eda:	488d      	ldr	r0, [pc, #564]	; (8013110 <tcp_slowtmr+0x274>)
 8012edc:	f008 fbfe 	bl	801b6dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee2:	7d1b      	ldrb	r3, [r3, #20]
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d106      	bne.n	8012ef6 <tcp_slowtmr+0x5a>
 8012ee8:	4b87      	ldr	r3, [pc, #540]	; (8013108 <tcp_slowtmr+0x26c>)
 8012eea:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012eee:	4989      	ldr	r1, [pc, #548]	; (8013114 <tcp_slowtmr+0x278>)
 8012ef0:	4887      	ldr	r0, [pc, #540]	; (8013110 <tcp_slowtmr+0x274>)
 8012ef2:	f008 fbf3 	bl	801b6dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef8:	7d1b      	ldrb	r3, [r3, #20]
 8012efa:	2b0a      	cmp	r3, #10
 8012efc:	d106      	bne.n	8012f0c <tcp_slowtmr+0x70>
 8012efe:	4b82      	ldr	r3, [pc, #520]	; (8013108 <tcp_slowtmr+0x26c>)
 8012f00:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8012f04:	4984      	ldr	r1, [pc, #528]	; (8013118 <tcp_slowtmr+0x27c>)
 8012f06:	4882      	ldr	r0, [pc, #520]	; (8013110 <tcp_slowtmr+0x274>)
 8012f08:	f008 fbe8 	bl	801b6dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f0e:	7f9a      	ldrb	r2, [r3, #30]
 8012f10:	4b7b      	ldr	r3, [pc, #492]	; (8013100 <tcp_slowtmr+0x264>)
 8012f12:	781b      	ldrb	r3, [r3, #0]
 8012f14:	429a      	cmp	r2, r3
 8012f16:	d105      	bne.n	8012f24 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1e:	68db      	ldr	r3, [r3, #12]
 8012f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8012f22:	e270      	b.n	8013406 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8012f24:	4b76      	ldr	r3, [pc, #472]	; (8013100 <tcp_slowtmr+0x264>)
 8012f26:	781a      	ldrb	r2, [r3, #0]
 8012f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8012f32:	2300      	movs	r3, #0
 8012f34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f3a:	7d1b      	ldrb	r3, [r3, #20]
 8012f3c:	2b02      	cmp	r3, #2
 8012f3e:	d10a      	bne.n	8012f56 <tcp_slowtmr+0xba>
 8012f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f46:	2b05      	cmp	r3, #5
 8012f48:	d905      	bls.n	8012f56 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012f4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f4e:	3301      	adds	r3, #1
 8012f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f54:	e11e      	b.n	8013194 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012f5c:	2b0b      	cmp	r3, #11
 8012f5e:	d905      	bls.n	8012f6c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012f60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012f64:	3301      	adds	r3, #1
 8012f66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012f6a:	e113      	b.n	8013194 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8012f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f6e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d075      	beq.n	8013062 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d006      	beq.n	8012f8c <tcp_slowtmr+0xf0>
 8012f7e:	4b62      	ldr	r3, [pc, #392]	; (8013108 <tcp_slowtmr+0x26c>)
 8012f80:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8012f84:	4965      	ldr	r1, [pc, #404]	; (801311c <tcp_slowtmr+0x280>)
 8012f86:	4862      	ldr	r0, [pc, #392]	; (8013110 <tcp_slowtmr+0x274>)
 8012f88:	f008 fba8 	bl	801b6dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8012f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d106      	bne.n	8012fa2 <tcp_slowtmr+0x106>
 8012f94:	4b5c      	ldr	r3, [pc, #368]	; (8013108 <tcp_slowtmr+0x26c>)
 8012f96:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8012f9a:	4961      	ldr	r1, [pc, #388]	; (8013120 <tcp_slowtmr+0x284>)
 8012f9c:	485c      	ldr	r0, [pc, #368]	; (8013110 <tcp_slowtmr+0x274>)
 8012f9e:	f008 fb9d 	bl	801b6dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8012fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fa4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8012fa8:	2b0b      	cmp	r3, #11
 8012faa:	d905      	bls.n	8012fb8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8012fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012fb0:	3301      	adds	r3, #1
 8012fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012fb6:	e0ed      	b.n	8013194 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fba:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012fbe:	3b01      	subs	r3, #1
 8012fc0:	4a58      	ldr	r2, [pc, #352]	; (8013124 <tcp_slowtmr+0x288>)
 8012fc2:	5cd3      	ldrb	r3, [r2, r3]
 8012fc4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fc8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012fcc:	7c7a      	ldrb	r2, [r7, #17]
 8012fce:	429a      	cmp	r2, r3
 8012fd0:	d907      	bls.n	8012fe2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8012fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fd4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012fd8:	3301      	adds	r3, #1
 8012fda:	b2da      	uxtb	r2, r3
 8012fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fde:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8012fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fe4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012fe8:	7c7a      	ldrb	r2, [r7, #17]
 8012fea:	429a      	cmp	r2, r3
 8012fec:	f200 80d2 	bhi.w	8013194 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8012ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ff6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d108      	bne.n	8013010 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012ffe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013000:	f005 f964 	bl	80182cc <tcp_zero_window_probe>
 8013004:	4603      	mov	r3, r0
 8013006:	2b00      	cmp	r3, #0
 8013008:	d014      	beq.n	8013034 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801300a:	2300      	movs	r3, #0
 801300c:	623b      	str	r3, [r7, #32]
 801300e:	e011      	b.n	8013034 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013012:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013016:	4619      	mov	r1, r3
 8013018:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801301a:	f004 f829 	bl	8017070 <tcp_split_unsent_seg>
 801301e:	4603      	mov	r3, r0
 8013020:	2b00      	cmp	r3, #0
 8013022:	d107      	bne.n	8013034 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8013024:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013026:	f004 faa9 	bl	801757c <tcp_output>
 801302a:	4603      	mov	r3, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	d101      	bne.n	8013034 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8013030:	2300      	movs	r3, #0
 8013032:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8013034:	6a3b      	ldr	r3, [r7, #32]
 8013036:	2b00      	cmp	r3, #0
 8013038:	f000 80ac 	beq.w	8013194 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801303c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801303e:	2200      	movs	r2, #0
 8013040:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013046:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801304a:	2b06      	cmp	r3, #6
 801304c:	f200 80a2 	bhi.w	8013194 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8013050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013052:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8013056:	3301      	adds	r3, #1
 8013058:	b2da      	uxtb	r2, r3
 801305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801305c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8013060:	e098      	b.n	8013194 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8013062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013064:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013068:	2b00      	cmp	r3, #0
 801306a:	db0f      	blt.n	801308c <tcp_slowtmr+0x1f0>
 801306c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801306e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013072:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013076:	4293      	cmp	r3, r2
 8013078:	d008      	beq.n	801308c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801307a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801307c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013080:	b29b      	uxth	r3, r3
 8013082:	3301      	adds	r3, #1
 8013084:	b29b      	uxth	r3, r3
 8013086:	b21a      	sxth	r2, r3
 8013088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801308c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801308e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8013092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013094:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8013098:	429a      	cmp	r2, r3
 801309a:	db7b      	blt.n	8013194 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801309c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801309e:	f004 fd5f 	bl	8017b60 <tcp_rexmit_rto_prepare>
 80130a2:	4603      	mov	r3, r0
 80130a4:	2b00      	cmp	r3, #0
 80130a6:	d007      	beq.n	80130b8 <tcp_slowtmr+0x21c>
 80130a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d171      	bne.n	8013194 <tcp_slowtmr+0x2f8>
 80130b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d06d      	beq.n	8013194 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80130b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ba:	7d1b      	ldrb	r3, [r3, #20]
 80130bc:	2b02      	cmp	r3, #2
 80130be:	d03a      	beq.n	8013136 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80130c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80130c6:	2b0c      	cmp	r3, #12
 80130c8:	bf28      	it	cs
 80130ca:	230c      	movcs	r3, #12
 80130cc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80130ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80130d4:	10db      	asrs	r3, r3, #3
 80130d6:	b21b      	sxth	r3, r3
 80130d8:	461a      	mov	r2, r3
 80130da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130dc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80130e0:	4413      	add	r3, r2
 80130e2:	7efa      	ldrb	r2, [r7, #27]
 80130e4:	4910      	ldr	r1, [pc, #64]	; (8013128 <tcp_slowtmr+0x28c>)
 80130e6:	5c8a      	ldrb	r2, [r1, r2]
 80130e8:	4093      	lsls	r3, r2
 80130ea:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80130f2:	4293      	cmp	r3, r2
 80130f4:	dc1a      	bgt.n	801312c <tcp_slowtmr+0x290>
 80130f6:	697b      	ldr	r3, [r7, #20]
 80130f8:	b21a      	sxth	r2, r3
 80130fa:	e019      	b.n	8013130 <tcp_slowtmr+0x294>
 80130fc:	240082e0 	.word	0x240082e0
 8013100:	24004afe 	.word	0x24004afe
 8013104:	240082dc 	.word	0x240082dc
 8013108:	0801d3f0 	.word	0x0801d3f0
 801310c:	0801d734 	.word	0x0801d734
 8013110:	0801d434 	.word	0x0801d434
 8013114:	0801d760 	.word	0x0801d760
 8013118:	0801d78c 	.word	0x0801d78c
 801311c:	0801d7bc 	.word	0x0801d7bc
 8013120:	0801d7f0 	.word	0x0801d7f0
 8013124:	0801fcf0 	.word	0x0801fcf0
 8013128:	0801fce0 	.word	0x0801fce0
 801312c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8013130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013132:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8013136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013138:	2200      	movs	r2, #0
 801313a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801313c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801313e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013144:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013148:	4293      	cmp	r3, r2
 801314a:	bf28      	it	cs
 801314c:	4613      	movcs	r3, r2
 801314e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013150:	8a7b      	ldrh	r3, [r7, #18]
 8013152:	085b      	lsrs	r3, r3, #1
 8013154:	b29a      	uxth	r2, r3
 8013156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013158:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801315c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801315e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013164:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013166:	005b      	lsls	r3, r3, #1
 8013168:	b29b      	uxth	r3, r3
 801316a:	429a      	cmp	r2, r3
 801316c:	d206      	bcs.n	801317c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801316e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013170:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013172:	005b      	lsls	r3, r3, #1
 8013174:	b29a      	uxth	r2, r3
 8013176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013178:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801317c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801317e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013182:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8013186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013188:	2200      	movs	r2, #0
 801318a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801318e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013190:	f004 fd56 	bl	8017c40 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8013194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013196:	7d1b      	ldrb	r3, [r3, #20]
 8013198:	2b06      	cmp	r3, #6
 801319a:	d111      	bne.n	80131c0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801319c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801319e:	8b5b      	ldrh	r3, [r3, #26]
 80131a0:	f003 0310 	and.w	r3, r3, #16
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d00b      	beq.n	80131c0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80131a8:	4b9c      	ldr	r3, [pc, #624]	; (801341c <tcp_slowtmr+0x580>)
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ae:	6a1b      	ldr	r3, [r3, #32]
 80131b0:	1ad3      	subs	r3, r2, r3
 80131b2:	2b28      	cmp	r3, #40	; 0x28
 80131b4:	d904      	bls.n	80131c0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80131b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131ba:	3301      	adds	r3, #1
 80131bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80131c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c2:	7a5b      	ldrb	r3, [r3, #9]
 80131c4:	f003 0308 	and.w	r3, r3, #8
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d04a      	beq.n	8013262 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80131cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131ce:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80131d0:	2b04      	cmp	r3, #4
 80131d2:	d003      	beq.n	80131dc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80131d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131d6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80131d8:	2b07      	cmp	r3, #7
 80131da:	d142      	bne.n	8013262 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80131dc:	4b8f      	ldr	r3, [pc, #572]	; (801341c <tcp_slowtmr+0x580>)
 80131de:	681a      	ldr	r2, [r3, #0]
 80131e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e2:	6a1b      	ldr	r3, [r3, #32]
 80131e4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80131e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131e8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80131ec:	4b8c      	ldr	r3, [pc, #560]	; (8013420 <tcp_slowtmr+0x584>)
 80131ee:	440b      	add	r3, r1
 80131f0:	498c      	ldr	r1, [pc, #560]	; (8013424 <tcp_slowtmr+0x588>)
 80131f2:	fba1 1303 	umull	r1, r3, r1, r3
 80131f6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d90a      	bls.n	8013212 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80131fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013200:	3301      	adds	r3, #1
 8013202:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8013206:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801320a:	3301      	adds	r3, #1
 801320c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013210:	e027      	b.n	8013262 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013212:	4b82      	ldr	r3, [pc, #520]	; (801341c <tcp_slowtmr+0x580>)
 8013214:	681a      	ldr	r2, [r3, #0]
 8013216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013218:	6a1b      	ldr	r3, [r3, #32]
 801321a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801321e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8013222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013224:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013228:	4618      	mov	r0, r3
 801322a:	4b7f      	ldr	r3, [pc, #508]	; (8013428 <tcp_slowtmr+0x58c>)
 801322c:	fb03 f300 	mul.w	r3, r3, r0
 8013230:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8013232:	497c      	ldr	r1, [pc, #496]	; (8013424 <tcp_slowtmr+0x588>)
 8013234:	fba1 1303 	umull	r1, r3, r1, r3
 8013238:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801323a:	429a      	cmp	r2, r3
 801323c:	d911      	bls.n	8013262 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801323e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013240:	f005 f804 	bl	801824c <tcp_keepalive>
 8013244:	4603      	mov	r3, r0
 8013246:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801324a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801324e:	2b00      	cmp	r3, #0
 8013250:	d107      	bne.n	8013262 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8013252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013254:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8013258:	3301      	adds	r3, #1
 801325a:	b2da      	uxtb	r2, r3
 801325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801325e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8013262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013266:	2b00      	cmp	r3, #0
 8013268:	d011      	beq.n	801328e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801326a:	4b6c      	ldr	r3, [pc, #432]	; (801341c <tcp_slowtmr+0x580>)
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013270:	6a1b      	ldr	r3, [r3, #32]
 8013272:	1ad2      	subs	r2, r2, r3
 8013274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013276:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801327a:	4619      	mov	r1, r3
 801327c:	460b      	mov	r3, r1
 801327e:	005b      	lsls	r3, r3, #1
 8013280:	440b      	add	r3, r1
 8013282:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8013284:	429a      	cmp	r2, r3
 8013286:	d302      	bcc.n	801328e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8013288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801328a:	f000 fec3 	bl	8014014 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801328e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013290:	7d1b      	ldrb	r3, [r3, #20]
 8013292:	2b03      	cmp	r3, #3
 8013294:	d10b      	bne.n	80132ae <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013296:	4b61      	ldr	r3, [pc, #388]	; (801341c <tcp_slowtmr+0x580>)
 8013298:	681a      	ldr	r2, [r3, #0]
 801329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801329c:	6a1b      	ldr	r3, [r3, #32]
 801329e:	1ad3      	subs	r3, r2, r3
 80132a0:	2b28      	cmp	r3, #40	; 0x28
 80132a2:	d904      	bls.n	80132ae <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80132a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132a8:	3301      	adds	r3, #1
 80132aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80132ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132b0:	7d1b      	ldrb	r3, [r3, #20]
 80132b2:	2b09      	cmp	r3, #9
 80132b4:	d10b      	bne.n	80132ce <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80132b6:	4b59      	ldr	r3, [pc, #356]	; (801341c <tcp_slowtmr+0x580>)
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132bc:	6a1b      	ldr	r3, [r3, #32]
 80132be:	1ad3      	subs	r3, r2, r3
 80132c0:	2bf0      	cmp	r3, #240	; 0xf0
 80132c2:	d904      	bls.n	80132ce <tcp_slowtmr+0x432>
        ++pcb_remove;
 80132c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132c8:	3301      	adds	r3, #1
 80132ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80132ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d060      	beq.n	8013398 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80132d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80132dc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80132de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80132e0:	f000 fce4 	bl	8013cac <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80132e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d010      	beq.n	801330c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80132ea:	4b50      	ldr	r3, [pc, #320]	; (801342c <tcp_slowtmr+0x590>)
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132f0:	429a      	cmp	r2, r3
 80132f2:	d106      	bne.n	8013302 <tcp_slowtmr+0x466>
 80132f4:	4b4e      	ldr	r3, [pc, #312]	; (8013430 <tcp_slowtmr+0x594>)
 80132f6:	f240 526d 	movw	r2, #1389	; 0x56d
 80132fa:	494e      	ldr	r1, [pc, #312]	; (8013434 <tcp_slowtmr+0x598>)
 80132fc:	484e      	ldr	r0, [pc, #312]	; (8013438 <tcp_slowtmr+0x59c>)
 80132fe:	f008 f9ed 	bl	801b6dc <iprintf>
        prev->next = pcb->next;
 8013302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013304:	68da      	ldr	r2, [r3, #12]
 8013306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013308:	60da      	str	r2, [r3, #12]
 801330a:	e00f      	b.n	801332c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801330c:	4b47      	ldr	r3, [pc, #284]	; (801342c <tcp_slowtmr+0x590>)
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013312:	429a      	cmp	r2, r3
 8013314:	d006      	beq.n	8013324 <tcp_slowtmr+0x488>
 8013316:	4b46      	ldr	r3, [pc, #280]	; (8013430 <tcp_slowtmr+0x594>)
 8013318:	f240 5271 	movw	r2, #1393	; 0x571
 801331c:	4947      	ldr	r1, [pc, #284]	; (801343c <tcp_slowtmr+0x5a0>)
 801331e:	4846      	ldr	r0, [pc, #280]	; (8013438 <tcp_slowtmr+0x59c>)
 8013320:	f008 f9dc 	bl	801b6dc <iprintf>
        tcp_active_pcbs = pcb->next;
 8013324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013326:	68db      	ldr	r3, [r3, #12]
 8013328:	4a40      	ldr	r2, [pc, #256]	; (801342c <tcp_slowtmr+0x590>)
 801332a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801332c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013330:	2b00      	cmp	r3, #0
 8013332:	d013      	beq.n	801335c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013336:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801333a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801333c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801333e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013340:	3304      	adds	r3, #4
 8013342:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013344:	8ad2      	ldrh	r2, [r2, #22]
 8013346:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013348:	8b09      	ldrh	r1, [r1, #24]
 801334a:	9102      	str	r1, [sp, #8]
 801334c:	9201      	str	r2, [sp, #4]
 801334e:	9300      	str	r3, [sp, #0]
 8013350:	462b      	mov	r3, r5
 8013352:	4622      	mov	r2, r4
 8013354:	4601      	mov	r1, r0
 8013356:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013358:	f004 fec4 	bl	80180e4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335e:	691b      	ldr	r3, [r3, #16]
 8013360:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013364:	7d1b      	ldrb	r3, [r3, #20]
 8013366:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801336a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801336e:	68db      	ldr	r3, [r3, #12]
 8013370:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8013372:	6838      	ldr	r0, [r7, #0]
 8013374:	f7ff f83a 	bl	80123ec <tcp_free>

      tcp_active_pcbs_changed = 0;
 8013378:	4b31      	ldr	r3, [pc, #196]	; (8013440 <tcp_slowtmr+0x5a4>)
 801337a:	2200      	movs	r2, #0
 801337c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d004      	beq.n	801338e <tcp_slowtmr+0x4f2>
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	f06f 010c 	mvn.w	r1, #12
 801338a:	68b8      	ldr	r0, [r7, #8]
 801338c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801338e:	4b2c      	ldr	r3, [pc, #176]	; (8013440 <tcp_slowtmr+0x5a4>)
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	2b00      	cmp	r3, #0
 8013394:	d037      	beq.n	8013406 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8013396:	e592      	b.n	8012ebe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8013398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801339c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80133a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a4:	7f1b      	ldrb	r3, [r3, #28]
 80133a6:	3301      	adds	r3, #1
 80133a8:	b2da      	uxtb	r2, r3
 80133aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ac:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80133ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b0:	7f1a      	ldrb	r2, [r3, #28]
 80133b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133b4:	7f5b      	ldrb	r3, [r3, #29]
 80133b6:	429a      	cmp	r2, r3
 80133b8:	d325      	bcc.n	8013406 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80133ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133bc:	2200      	movs	r2, #0
 80133be:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80133c0:	4b1f      	ldr	r3, [pc, #124]	; (8013440 <tcp_slowtmr+0x5a4>)
 80133c2:	2200      	movs	r2, #0
 80133c4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80133c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d00b      	beq.n	80133e8 <tcp_slowtmr+0x54c>
 80133d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80133d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80133d8:	6912      	ldr	r2, [r2, #16]
 80133da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80133dc:	4610      	mov	r0, r2
 80133de:	4798      	blx	r3
 80133e0:	4603      	mov	r3, r0
 80133e2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80133e6:	e002      	b.n	80133ee <tcp_slowtmr+0x552>
 80133e8:	2300      	movs	r3, #0
 80133ea:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80133ee:	4b14      	ldr	r3, [pc, #80]	; (8013440 <tcp_slowtmr+0x5a4>)
 80133f0:	781b      	ldrb	r3, [r3, #0]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d000      	beq.n	80133f8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80133f6:	e562      	b.n	8012ebe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80133f8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d102      	bne.n	8013406 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8013400:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013402:	f004 f8bb 	bl	801757c <tcp_output>
  while (pcb != NULL) {
 8013406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013408:	2b00      	cmp	r3, #0
 801340a:	f47f ad5e 	bne.w	8012eca <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801340e:	2300      	movs	r3, #0
 8013410:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8013412:	4b0c      	ldr	r3, [pc, #48]	; (8013444 <tcp_slowtmr+0x5a8>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8013418:	e069      	b.n	80134ee <tcp_slowtmr+0x652>
 801341a:	bf00      	nop
 801341c:	240082e0 	.word	0x240082e0
 8013420:	000a4cb8 	.word	0x000a4cb8
 8013424:	10624dd3 	.word	0x10624dd3
 8013428:	000124f8 	.word	0x000124f8
 801342c:	240082dc 	.word	0x240082dc
 8013430:	0801d3f0 	.word	0x0801d3f0
 8013434:	0801d828 	.word	0x0801d828
 8013438:	0801d434 	.word	0x0801d434
 801343c:	0801d854 	.word	0x0801d854
 8013440:	240082d8 	.word	0x240082d8
 8013444:	240082ec 	.word	0x240082ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344a:	7d1b      	ldrb	r3, [r3, #20]
 801344c:	2b0a      	cmp	r3, #10
 801344e:	d006      	beq.n	801345e <tcp_slowtmr+0x5c2>
 8013450:	4b2b      	ldr	r3, [pc, #172]	; (8013500 <tcp_slowtmr+0x664>)
 8013452:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8013456:	492b      	ldr	r1, [pc, #172]	; (8013504 <tcp_slowtmr+0x668>)
 8013458:	482b      	ldr	r0, [pc, #172]	; (8013508 <tcp_slowtmr+0x66c>)
 801345a:	f008 f93f 	bl	801b6dc <iprintf>
    pcb_remove = 0;
 801345e:	2300      	movs	r3, #0
 8013460:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013464:	4b29      	ldr	r3, [pc, #164]	; (801350c <tcp_slowtmr+0x670>)
 8013466:	681a      	ldr	r2, [r3, #0]
 8013468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346a:	6a1b      	ldr	r3, [r3, #32]
 801346c:	1ad3      	subs	r3, r2, r3
 801346e:	2bf0      	cmp	r3, #240	; 0xf0
 8013470:	d904      	bls.n	801347c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8013472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013476:	3301      	adds	r3, #1
 8013478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801347c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013480:	2b00      	cmp	r3, #0
 8013482:	d02f      	beq.n	80134e4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013486:	f000 fc11 	bl	8013cac <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348c:	2b00      	cmp	r3, #0
 801348e:	d010      	beq.n	80134b2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013490:	4b1f      	ldr	r3, [pc, #124]	; (8013510 <tcp_slowtmr+0x674>)
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013496:	429a      	cmp	r2, r3
 8013498:	d106      	bne.n	80134a8 <tcp_slowtmr+0x60c>
 801349a:	4b19      	ldr	r3, [pc, #100]	; (8013500 <tcp_slowtmr+0x664>)
 801349c:	f240 52af 	movw	r2, #1455	; 0x5af
 80134a0:	491c      	ldr	r1, [pc, #112]	; (8013514 <tcp_slowtmr+0x678>)
 80134a2:	4819      	ldr	r0, [pc, #100]	; (8013508 <tcp_slowtmr+0x66c>)
 80134a4:	f008 f91a 	bl	801b6dc <iprintf>
        prev->next = pcb->next;
 80134a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134aa:	68da      	ldr	r2, [r3, #12]
 80134ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134ae:	60da      	str	r2, [r3, #12]
 80134b0:	e00f      	b.n	80134d2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80134b2:	4b17      	ldr	r3, [pc, #92]	; (8013510 <tcp_slowtmr+0x674>)
 80134b4:	681b      	ldr	r3, [r3, #0]
 80134b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80134b8:	429a      	cmp	r2, r3
 80134ba:	d006      	beq.n	80134ca <tcp_slowtmr+0x62e>
 80134bc:	4b10      	ldr	r3, [pc, #64]	; (8013500 <tcp_slowtmr+0x664>)
 80134be:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80134c2:	4915      	ldr	r1, [pc, #84]	; (8013518 <tcp_slowtmr+0x67c>)
 80134c4:	4810      	ldr	r0, [pc, #64]	; (8013508 <tcp_slowtmr+0x66c>)
 80134c6:	f008 f909 	bl	801b6dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 80134ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134cc:	68db      	ldr	r3, [r3, #12]
 80134ce:	4a10      	ldr	r2, [pc, #64]	; (8013510 <tcp_slowtmr+0x674>)
 80134d0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80134d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80134d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d8:	68db      	ldr	r3, [r3, #12]
 80134da:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80134dc:	69f8      	ldr	r0, [r7, #28]
 80134de:	f7fe ff85 	bl	80123ec <tcp_free>
 80134e2:	e004      	b.n	80134ee <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80134e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134e6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80134e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ea:	68db      	ldr	r3, [r3, #12]
 80134ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80134ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d1a9      	bne.n	8013448 <tcp_slowtmr+0x5ac>
    }
  }
}
 80134f4:	bf00      	nop
 80134f6:	bf00      	nop
 80134f8:	3730      	adds	r7, #48	; 0x30
 80134fa:	46bd      	mov	sp, r7
 80134fc:	bdb0      	pop	{r4, r5, r7, pc}
 80134fe:	bf00      	nop
 8013500:	0801d3f0 	.word	0x0801d3f0
 8013504:	0801d880 	.word	0x0801d880
 8013508:	0801d434 	.word	0x0801d434
 801350c:	240082e0 	.word	0x240082e0
 8013510:	240082ec 	.word	0x240082ec
 8013514:	0801d8b0 	.word	0x0801d8b0
 8013518:	0801d8d8 	.word	0x0801d8d8

0801351c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013522:	4b2d      	ldr	r3, [pc, #180]	; (80135d8 <tcp_fasttmr+0xbc>)
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	3301      	adds	r3, #1
 8013528:	b2da      	uxtb	r2, r3
 801352a:	4b2b      	ldr	r3, [pc, #172]	; (80135d8 <tcp_fasttmr+0xbc>)
 801352c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801352e:	4b2b      	ldr	r3, [pc, #172]	; (80135dc <tcp_fasttmr+0xc0>)
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013534:	e048      	b.n	80135c8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	7f9a      	ldrb	r2, [r3, #30]
 801353a:	4b27      	ldr	r3, [pc, #156]	; (80135d8 <tcp_fasttmr+0xbc>)
 801353c:	781b      	ldrb	r3, [r3, #0]
 801353e:	429a      	cmp	r2, r3
 8013540:	d03f      	beq.n	80135c2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013542:	4b25      	ldr	r3, [pc, #148]	; (80135d8 <tcp_fasttmr+0xbc>)
 8013544:	781a      	ldrb	r2, [r3, #0]
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	8b5b      	ldrh	r3, [r3, #26]
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	2b00      	cmp	r3, #0
 8013554:	d010      	beq.n	8013578 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	8b5b      	ldrh	r3, [r3, #26]
 801355a:	f043 0302 	orr.w	r3, r3, #2
 801355e:	b29a      	uxth	r2, r3
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013564:	6878      	ldr	r0, [r7, #4]
 8013566:	f004 f809 	bl	801757c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	8b5b      	ldrh	r3, [r3, #26]
 801356e:	f023 0303 	bic.w	r3, r3, #3
 8013572:	b29a      	uxth	r2, r3
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	8b5b      	ldrh	r3, [r3, #26]
 801357c:	f003 0308 	and.w	r3, r3, #8
 8013580:	2b00      	cmp	r3, #0
 8013582:	d009      	beq.n	8013598 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013584:	687b      	ldr	r3, [r7, #4]
 8013586:	8b5b      	ldrh	r3, [r3, #26]
 8013588:	f023 0308 	bic.w	r3, r3, #8
 801358c:	b29a      	uxth	r2, r3
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013592:	6878      	ldr	r0, [r7, #4]
 8013594:	f7ff f8be 	bl	8012714 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	68db      	ldr	r3, [r3, #12]
 801359c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d00a      	beq.n	80135bc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80135a6:	4b0e      	ldr	r3, [pc, #56]	; (80135e0 <tcp_fasttmr+0xc4>)
 80135a8:	2200      	movs	r2, #0
 80135aa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80135ac:	6878      	ldr	r0, [r7, #4]
 80135ae:	f000 f819 	bl	80135e4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80135b2:	4b0b      	ldr	r3, [pc, #44]	; (80135e0 <tcp_fasttmr+0xc4>)
 80135b4:	781b      	ldrb	r3, [r3, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d000      	beq.n	80135bc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80135ba:	e7b8      	b.n	801352e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80135bc:	683b      	ldr	r3, [r7, #0]
 80135be:	607b      	str	r3, [r7, #4]
 80135c0:	e002      	b.n	80135c8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	68db      	ldr	r3, [r3, #12]
 80135c6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d1b3      	bne.n	8013536 <tcp_fasttmr+0x1a>
    }
  }
}
 80135ce:	bf00      	nop
 80135d0:	bf00      	nop
 80135d2:	3708      	adds	r7, #8
 80135d4:	46bd      	mov	sp, r7
 80135d6:	bd80      	pop	{r7, pc}
 80135d8:	24004afe 	.word	0x24004afe
 80135dc:	240082dc 	.word	0x240082dc
 80135e0:	240082d8 	.word	0x240082d8

080135e4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80135e4:	b590      	push	{r4, r7, lr}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d109      	bne.n	8013606 <tcp_process_refused_data+0x22>
 80135f2:	4b37      	ldr	r3, [pc, #220]	; (80136d0 <tcp_process_refused_data+0xec>)
 80135f4:	f240 6209 	movw	r2, #1545	; 0x609
 80135f8:	4936      	ldr	r1, [pc, #216]	; (80136d4 <tcp_process_refused_data+0xf0>)
 80135fa:	4837      	ldr	r0, [pc, #220]	; (80136d8 <tcp_process_refused_data+0xf4>)
 80135fc:	f008 f86e 	bl	801b6dc <iprintf>
 8013600:	f06f 030f 	mvn.w	r3, #15
 8013604:	e060      	b.n	80136c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801360a:	7b5b      	ldrb	r3, [r3, #13]
 801360c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013612:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013620:	2b00      	cmp	r3, #0
 8013622:	d00b      	beq.n	801363c <tcp_process_refused_data+0x58>
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6918      	ldr	r0, [r3, #16]
 801362e:	2300      	movs	r3, #0
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	6879      	ldr	r1, [r7, #4]
 8013634:	47a0      	blx	r4
 8013636:	4603      	mov	r3, r0
 8013638:	73fb      	strb	r3, [r7, #15]
 801363a:	e007      	b.n	801364c <tcp_process_refused_data+0x68>
 801363c:	2300      	movs	r3, #0
 801363e:	68ba      	ldr	r2, [r7, #8]
 8013640:	6879      	ldr	r1, [r7, #4]
 8013642:	2000      	movs	r0, #0
 8013644:	f000 f8c2 	bl	80137cc <tcp_recv_null>
 8013648:	4603      	mov	r3, r0
 801364a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801364c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d12a      	bne.n	80136aa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013654:	7bbb      	ldrb	r3, [r7, #14]
 8013656:	f003 0320 	and.w	r3, r3, #32
 801365a:	2b00      	cmp	r3, #0
 801365c:	d033      	beq.n	80136c6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013662:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013666:	d005      	beq.n	8013674 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801366c:	3301      	adds	r3, #1
 801366e:	b29a      	uxth	r2, r3
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801367a:	2b00      	cmp	r3, #0
 801367c:	d00b      	beq.n	8013696 <tcp_process_refused_data+0xb2>
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6918      	ldr	r0, [r3, #16]
 8013688:	2300      	movs	r3, #0
 801368a:	2200      	movs	r2, #0
 801368c:	6879      	ldr	r1, [r7, #4]
 801368e:	47a0      	blx	r4
 8013690:	4603      	mov	r3, r0
 8013692:	73fb      	strb	r3, [r7, #15]
 8013694:	e001      	b.n	801369a <tcp_process_refused_data+0xb6>
 8013696:	2300      	movs	r3, #0
 8013698:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801369a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801369e:	f113 0f0d 	cmn.w	r3, #13
 80136a2:	d110      	bne.n	80136c6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80136a4:	f06f 030c 	mvn.w	r3, #12
 80136a8:	e00e      	b.n	80136c8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80136aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136ae:	f113 0f0d 	cmn.w	r3, #13
 80136b2:	d102      	bne.n	80136ba <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80136b4:	f06f 030c 	mvn.w	r3, #12
 80136b8:	e006      	b.n	80136c8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80136ba:	687b      	ldr	r3, [r7, #4]
 80136bc:	68ba      	ldr	r2, [r7, #8]
 80136be:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80136c0:	f06f 0304 	mvn.w	r3, #4
 80136c4:	e000      	b.n	80136c8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80136c6:	2300      	movs	r3, #0
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3714      	adds	r7, #20
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd90      	pop	{r4, r7, pc}
 80136d0:	0801d3f0 	.word	0x0801d3f0
 80136d4:	0801d900 	.word	0x0801d900
 80136d8:	0801d434 	.word	0x0801d434

080136dc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80136dc:	b580      	push	{r7, lr}
 80136de:	b084      	sub	sp, #16
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80136e4:	e007      	b.n	80136f6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80136ec:	6878      	ldr	r0, [r7, #4]
 80136ee:	f000 f80a 	bl	8013706 <tcp_seg_free>
    seg = next;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d1f4      	bne.n	80136e6 <tcp_segs_free+0xa>
  }
}
 80136fc:	bf00      	nop
 80136fe:	bf00      	nop
 8013700:	3710      	adds	r7, #16
 8013702:	46bd      	mov	sp, r7
 8013704:	bd80      	pop	{r7, pc}

08013706 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013706:	b580      	push	{r7, lr}
 8013708:	b082      	sub	sp, #8
 801370a:	af00      	add	r7, sp, #0
 801370c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d00c      	beq.n	801372e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	685b      	ldr	r3, [r3, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d004      	beq.n	8013726 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	4618      	mov	r0, r3
 8013722:	f7fe fba7 	bl	8011e74 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013726:	6879      	ldr	r1, [r7, #4]
 8013728:	2003      	movs	r0, #3
 801372a:	f7fd fcff 	bl	801112c <memp_free>
  }
}
 801372e:	bf00      	nop
 8013730:	3708      	adds	r7, #8
 8013732:	46bd      	mov	sp, r7
 8013734:	bd80      	pop	{r7, pc}
	...

08013738 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8013738:	b580      	push	{r7, lr}
 801373a:	b082      	sub	sp, #8
 801373c:	af00      	add	r7, sp, #0
 801373e:	6078      	str	r0, [r7, #4]
 8013740:	460b      	mov	r3, r1
 8013742:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	2b00      	cmp	r3, #0
 8013748:	d107      	bne.n	801375a <tcp_setprio+0x22>
 801374a:	4b07      	ldr	r3, [pc, #28]	; (8013768 <tcp_setprio+0x30>)
 801374c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8013750:	4906      	ldr	r1, [pc, #24]	; (801376c <tcp_setprio+0x34>)
 8013752:	4807      	ldr	r0, [pc, #28]	; (8013770 <tcp_setprio+0x38>)
 8013754:	f007 ffc2 	bl	801b6dc <iprintf>
 8013758:	e002      	b.n	8013760 <tcp_setprio+0x28>

  pcb->prio = prio;
 801375a:	687b      	ldr	r3, [r7, #4]
 801375c:	78fa      	ldrb	r2, [r7, #3]
 801375e:	755a      	strb	r2, [r3, #21]
}
 8013760:	3708      	adds	r7, #8
 8013762:	46bd      	mov	sp, r7
 8013764:	bd80      	pop	{r7, pc}
 8013766:	bf00      	nop
 8013768:	0801d3f0 	.word	0x0801d3f0
 801376c:	0801d928 	.word	0x0801d928
 8013770:	0801d434 	.word	0x0801d434

08013774 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013774:	b580      	push	{r7, lr}
 8013776:	b084      	sub	sp, #16
 8013778:	af00      	add	r7, sp, #0
 801377a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d106      	bne.n	8013790 <tcp_seg_copy+0x1c>
 8013782:	4b0f      	ldr	r3, [pc, #60]	; (80137c0 <tcp_seg_copy+0x4c>)
 8013784:	f240 6282 	movw	r2, #1666	; 0x682
 8013788:	490e      	ldr	r1, [pc, #56]	; (80137c4 <tcp_seg_copy+0x50>)
 801378a:	480f      	ldr	r0, [pc, #60]	; (80137c8 <tcp_seg_copy+0x54>)
 801378c:	f007 ffa6 	bl	801b6dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013790:	2003      	movs	r0, #3
 8013792:	f7fd fc55 	bl	8011040 <memp_malloc>
 8013796:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d101      	bne.n	80137a2 <tcp_seg_copy+0x2e>
    return NULL;
 801379e:	2300      	movs	r3, #0
 80137a0:	e00a      	b.n	80137b8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80137a2:	2210      	movs	r2, #16
 80137a4:	6879      	ldr	r1, [r7, #4]
 80137a6:	68f8      	ldr	r0, [r7, #12]
 80137a8:	f007 ff27 	bl	801b5fa <memcpy>
  pbuf_ref(cseg->p);
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	685b      	ldr	r3, [r3, #4]
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fe fc05 	bl	8011fc0 <pbuf_ref>
  return cseg;
 80137b6:	68fb      	ldr	r3, [r7, #12]
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}
 80137c0:	0801d3f0 	.word	0x0801d3f0
 80137c4:	0801d944 	.word	0x0801d944
 80137c8:	0801d434 	.word	0x0801d434

080137cc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b084      	sub	sp, #16
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	60f8      	str	r0, [r7, #12]
 80137d4:	60b9      	str	r1, [r7, #8]
 80137d6:	607a      	str	r2, [r7, #4]
 80137d8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80137da:	68bb      	ldr	r3, [r7, #8]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d109      	bne.n	80137f4 <tcp_recv_null+0x28>
 80137e0:	4b12      	ldr	r3, [pc, #72]	; (801382c <tcp_recv_null+0x60>)
 80137e2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80137e6:	4912      	ldr	r1, [pc, #72]	; (8013830 <tcp_recv_null+0x64>)
 80137e8:	4812      	ldr	r0, [pc, #72]	; (8013834 <tcp_recv_null+0x68>)
 80137ea:	f007 ff77 	bl	801b6dc <iprintf>
 80137ee:	f06f 030f 	mvn.w	r3, #15
 80137f2:	e016      	b.n	8013822 <tcp_recv_null+0x56>

  if (p != NULL) {
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d009      	beq.n	801380e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	891b      	ldrh	r3, [r3, #8]
 80137fe:	4619      	mov	r1, r3
 8013800:	68b8      	ldr	r0, [r7, #8]
 8013802:	f7ff fab5 	bl	8012d70 <tcp_recved>
    pbuf_free(p);
 8013806:	6878      	ldr	r0, [r7, #4]
 8013808:	f7fe fb34 	bl	8011e74 <pbuf_free>
 801380c:	e008      	b.n	8013820 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801380e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d104      	bne.n	8013820 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013816:	68b8      	ldr	r0, [r7, #8]
 8013818:	f7fe ffe6 	bl	80127e8 <tcp_close>
 801381c:	4603      	mov	r3, r0
 801381e:	e000      	b.n	8013822 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013820:	2300      	movs	r3, #0
}
 8013822:	4618      	mov	r0, r3
 8013824:	3710      	adds	r7, #16
 8013826:	46bd      	mov	sp, r7
 8013828:	bd80      	pop	{r7, pc}
 801382a:	bf00      	nop
 801382c:	0801d3f0 	.word	0x0801d3f0
 8013830:	0801d960 	.word	0x0801d960
 8013834:	0801d434 	.word	0x0801d434

08013838 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b086      	sub	sp, #24
 801383c:	af00      	add	r7, sp, #0
 801383e:	4603      	mov	r3, r0
 8013840:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013846:	2b00      	cmp	r3, #0
 8013848:	db01      	blt.n	801384e <tcp_kill_prio+0x16>
 801384a:	79fb      	ldrb	r3, [r7, #7]
 801384c:	e000      	b.n	8013850 <tcp_kill_prio+0x18>
 801384e:	237f      	movs	r3, #127	; 0x7f
 8013850:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013852:	7afb      	ldrb	r3, [r7, #11]
 8013854:	2b00      	cmp	r3, #0
 8013856:	d034      	beq.n	80138c2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013858:	7afb      	ldrb	r3, [r7, #11]
 801385a:	3b01      	subs	r3, #1
 801385c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801385e:	2300      	movs	r3, #0
 8013860:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013862:	2300      	movs	r3, #0
 8013864:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013866:	4b19      	ldr	r3, [pc, #100]	; (80138cc <tcp_kill_prio+0x94>)
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	617b      	str	r3, [r7, #20]
 801386c:	e01f      	b.n	80138ae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801386e:	697b      	ldr	r3, [r7, #20]
 8013870:	7d5b      	ldrb	r3, [r3, #21]
 8013872:	7afa      	ldrb	r2, [r7, #11]
 8013874:	429a      	cmp	r2, r3
 8013876:	d80c      	bhi.n	8013892 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801387c:	7afa      	ldrb	r2, [r7, #11]
 801387e:	429a      	cmp	r2, r3
 8013880:	d112      	bne.n	80138a8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013882:	4b13      	ldr	r3, [pc, #76]	; (80138d0 <tcp_kill_prio+0x98>)
 8013884:	681a      	ldr	r2, [r3, #0]
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	6a1b      	ldr	r3, [r3, #32]
 801388a:	1ad3      	subs	r3, r2, r3
 801388c:	68fa      	ldr	r2, [r7, #12]
 801388e:	429a      	cmp	r2, r3
 8013890:	d80a      	bhi.n	80138a8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013892:	4b0f      	ldr	r3, [pc, #60]	; (80138d0 <tcp_kill_prio+0x98>)
 8013894:	681a      	ldr	r2, [r3, #0]
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	6a1b      	ldr	r3, [r3, #32]
 801389a:	1ad3      	subs	r3, r2, r3
 801389c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	7d5b      	ldrb	r3, [r3, #21]
 80138a6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138a8:	697b      	ldr	r3, [r7, #20]
 80138aa:	68db      	ldr	r3, [r3, #12]
 80138ac:	617b      	str	r3, [r7, #20]
 80138ae:	697b      	ldr	r3, [r7, #20]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d1dc      	bne.n	801386e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80138b4:	693b      	ldr	r3, [r7, #16]
 80138b6:	2b00      	cmp	r3, #0
 80138b8:	d004      	beq.n	80138c4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80138ba:	6938      	ldr	r0, [r7, #16]
 80138bc:	f7ff f87e 	bl	80129bc <tcp_abort>
 80138c0:	e000      	b.n	80138c4 <tcp_kill_prio+0x8c>
    return;
 80138c2:	bf00      	nop
  }
}
 80138c4:	3718      	adds	r7, #24
 80138c6:	46bd      	mov	sp, r7
 80138c8:	bd80      	pop	{r7, pc}
 80138ca:	bf00      	nop
 80138cc:	240082dc 	.word	0x240082dc
 80138d0:	240082e0 	.word	0x240082e0

080138d4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b086      	sub	sp, #24
 80138d8:	af00      	add	r7, sp, #0
 80138da:	4603      	mov	r3, r0
 80138dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80138de:	79fb      	ldrb	r3, [r7, #7]
 80138e0:	2b08      	cmp	r3, #8
 80138e2:	d009      	beq.n	80138f8 <tcp_kill_state+0x24>
 80138e4:	79fb      	ldrb	r3, [r7, #7]
 80138e6:	2b09      	cmp	r3, #9
 80138e8:	d006      	beq.n	80138f8 <tcp_kill_state+0x24>
 80138ea:	4b1a      	ldr	r3, [pc, #104]	; (8013954 <tcp_kill_state+0x80>)
 80138ec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80138f0:	4919      	ldr	r1, [pc, #100]	; (8013958 <tcp_kill_state+0x84>)
 80138f2:	481a      	ldr	r0, [pc, #104]	; (801395c <tcp_kill_state+0x88>)
 80138f4:	f007 fef2 	bl	801b6dc <iprintf>

  inactivity = 0;
 80138f8:	2300      	movs	r3, #0
 80138fa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80138fc:	2300      	movs	r3, #0
 80138fe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013900:	4b17      	ldr	r3, [pc, #92]	; (8013960 <tcp_kill_state+0x8c>)
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	617b      	str	r3, [r7, #20]
 8013906:	e017      	b.n	8013938 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013908:	697b      	ldr	r3, [r7, #20]
 801390a:	7d1b      	ldrb	r3, [r3, #20]
 801390c:	79fa      	ldrb	r2, [r7, #7]
 801390e:	429a      	cmp	r2, r3
 8013910:	d10f      	bne.n	8013932 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013912:	4b14      	ldr	r3, [pc, #80]	; (8013964 <tcp_kill_state+0x90>)
 8013914:	681a      	ldr	r2, [r3, #0]
 8013916:	697b      	ldr	r3, [r7, #20]
 8013918:	6a1b      	ldr	r3, [r3, #32]
 801391a:	1ad3      	subs	r3, r2, r3
 801391c:	68fa      	ldr	r2, [r7, #12]
 801391e:	429a      	cmp	r2, r3
 8013920:	d807      	bhi.n	8013932 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013922:	4b10      	ldr	r3, [pc, #64]	; (8013964 <tcp_kill_state+0x90>)
 8013924:	681a      	ldr	r2, [r3, #0]
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	6a1b      	ldr	r3, [r3, #32]
 801392a:	1ad3      	subs	r3, r2, r3
 801392c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801392e:	697b      	ldr	r3, [r7, #20]
 8013930:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	68db      	ldr	r3, [r3, #12]
 8013936:	617b      	str	r3, [r7, #20]
 8013938:	697b      	ldr	r3, [r7, #20]
 801393a:	2b00      	cmp	r3, #0
 801393c:	d1e4      	bne.n	8013908 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d003      	beq.n	801394c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013944:	2100      	movs	r1, #0
 8013946:	6938      	ldr	r0, [r7, #16]
 8013948:	f7fe ff7a 	bl	8012840 <tcp_abandon>
  }
}
 801394c:	bf00      	nop
 801394e:	3718      	adds	r7, #24
 8013950:	46bd      	mov	sp, r7
 8013952:	bd80      	pop	{r7, pc}
 8013954:	0801d3f0 	.word	0x0801d3f0
 8013958:	0801d97c 	.word	0x0801d97c
 801395c:	0801d434 	.word	0x0801d434
 8013960:	240082dc 	.word	0x240082dc
 8013964:	240082e0 	.word	0x240082e0

08013968 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013968:	b580      	push	{r7, lr}
 801396a:	b084      	sub	sp, #16
 801396c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801396e:	2300      	movs	r3, #0
 8013970:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013972:	2300      	movs	r3, #0
 8013974:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013976:	4b12      	ldr	r3, [pc, #72]	; (80139c0 <tcp_kill_timewait+0x58>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	60fb      	str	r3, [r7, #12]
 801397c:	e012      	b.n	80139a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801397e:	4b11      	ldr	r3, [pc, #68]	; (80139c4 <tcp_kill_timewait+0x5c>)
 8013980:	681a      	ldr	r2, [r3, #0]
 8013982:	68fb      	ldr	r3, [r7, #12]
 8013984:	6a1b      	ldr	r3, [r3, #32]
 8013986:	1ad3      	subs	r3, r2, r3
 8013988:	687a      	ldr	r2, [r7, #4]
 801398a:	429a      	cmp	r2, r3
 801398c:	d807      	bhi.n	801399e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801398e:	4b0d      	ldr	r3, [pc, #52]	; (80139c4 <tcp_kill_timewait+0x5c>)
 8013990:	681a      	ldr	r2, [r3, #0]
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	6a1b      	ldr	r3, [r3, #32]
 8013996:	1ad3      	subs	r3, r2, r3
 8013998:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801399a:	68fb      	ldr	r3, [r7, #12]
 801399c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801399e:	68fb      	ldr	r3, [r7, #12]
 80139a0:	68db      	ldr	r3, [r3, #12]
 80139a2:	60fb      	str	r3, [r7, #12]
 80139a4:	68fb      	ldr	r3, [r7, #12]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d1e9      	bne.n	801397e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80139aa:	68bb      	ldr	r3, [r7, #8]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d002      	beq.n	80139b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80139b0:	68b8      	ldr	r0, [r7, #8]
 80139b2:	f7ff f803 	bl	80129bc <tcp_abort>
  }
}
 80139b6:	bf00      	nop
 80139b8:	3710      	adds	r7, #16
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}
 80139be:	bf00      	nop
 80139c0:	240082ec 	.word	0x240082ec
 80139c4:	240082e0 	.word	0x240082e0

080139c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80139ce:	4b10      	ldr	r3, [pc, #64]	; (8013a10 <tcp_handle_closepend+0x48>)
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80139d4:	e014      	b.n	8013a00 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	68db      	ldr	r3, [r3, #12]
 80139da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	8b5b      	ldrh	r3, [r3, #26]
 80139e0:	f003 0308 	and.w	r3, r3, #8
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d009      	beq.n	80139fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80139e8:	687b      	ldr	r3, [r7, #4]
 80139ea:	8b5b      	ldrh	r3, [r3, #26]
 80139ec:	f023 0308 	bic.w	r3, r3, #8
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80139f6:	6878      	ldr	r0, [r7, #4]
 80139f8:	f7fe fe8c 	bl	8012714 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d1e7      	bne.n	80139d6 <tcp_handle_closepend+0xe>
  }
}
 8013a06:	bf00      	nop
 8013a08:	bf00      	nop
 8013a0a:	3708      	adds	r7, #8
 8013a0c:	46bd      	mov	sp, r7
 8013a0e:	bd80      	pop	{r7, pc}
 8013a10:	240082dc 	.word	0x240082dc

08013a14 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b084      	sub	sp, #16
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a1e:	2001      	movs	r0, #1
 8013a20:	f7fd fb0e 	bl	8011040 <memp_malloc>
 8013a24:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d126      	bne.n	8013a7a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8013a2c:	f7ff ffcc 	bl	80139c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013a30:	f7ff ff9a 	bl	8013968 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a34:	2001      	movs	r0, #1
 8013a36:	f7fd fb03 	bl	8011040 <memp_malloc>
 8013a3a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d11b      	bne.n	8013a7a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013a42:	2009      	movs	r0, #9
 8013a44:	f7ff ff46 	bl	80138d4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a48:	2001      	movs	r0, #1
 8013a4a:	f7fd faf9 	bl	8011040 <memp_malloc>
 8013a4e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d111      	bne.n	8013a7a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013a56:	2008      	movs	r0, #8
 8013a58:	f7ff ff3c 	bl	80138d4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a5c:	2001      	movs	r0, #1
 8013a5e:	f7fd faef 	bl	8011040 <memp_malloc>
 8013a62:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d107      	bne.n	8013a7a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8013a6a:	79fb      	ldrb	r3, [r7, #7]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f7ff fee3 	bl	8013838 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013a72:	2001      	movs	r0, #1
 8013a74:	f7fd fae4 	bl	8011040 <memp_malloc>
 8013a78:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8013a7a:	68fb      	ldr	r3, [r7, #12]
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d03f      	beq.n	8013b00 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013a80:	229c      	movs	r2, #156	; 0x9c
 8013a82:	2100      	movs	r1, #0
 8013a84:	68f8      	ldr	r0, [r7, #12]
 8013a86:	f007 fdc6 	bl	801b616 <memset>
    pcb->prio = prio;
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	79fa      	ldrb	r2, [r7, #7]
 8013a8e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013a90:	68fb      	ldr	r3, [r7, #12]
 8013a92:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013a96:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8013a9a:	68fb      	ldr	r3, [r7, #12]
 8013a9c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013aa2:	68fb      	ldr	r3, [r7, #12]
 8013aa4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8013aa6:	68fb      	ldr	r3, [r7, #12]
 8013aa8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	22ff      	movs	r2, #255	; 0xff
 8013aae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013ab0:	68fb      	ldr	r3, [r7, #12]
 8013ab2:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013ab6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
 8013aba:	2206      	movs	r2, #6
 8013abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2206      	movs	r2, #6
 8013ac4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013acc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013ace:	68fb      	ldr	r3, [r7, #12]
 8013ad0:	2201      	movs	r2, #1
 8013ad2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8013ad6:	4b0d      	ldr	r3, [pc, #52]	; (8013b0c <tcp_alloc+0xf8>)
 8013ad8:	681a      	ldr	r2, [r3, #0]
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013ade:	4b0c      	ldr	r3, [pc, #48]	; (8013b10 <tcp_alloc+0xfc>)
 8013ae0:	781a      	ldrb	r2, [r3, #0]
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013aec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	4a08      	ldr	r2, [pc, #32]	; (8013b14 <tcp_alloc+0x100>)
 8013af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013af8:	68fb      	ldr	r3, [r7, #12]
 8013afa:	4a07      	ldr	r2, [pc, #28]	; (8013b18 <tcp_alloc+0x104>)
 8013afc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013b00:	68fb      	ldr	r3, [r7, #12]
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3710      	adds	r7, #16
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	240082e0 	.word	0x240082e0
 8013b10:	24004afe 	.word	0x24004afe
 8013b14:	080137cd 	.word	0x080137cd
 8013b18:	006ddd00 	.word	0x006ddd00

08013b1c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8013b1c:	b580      	push	{r7, lr}
 8013b1e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8013b20:	2040      	movs	r0, #64	; 0x40
 8013b22:	f7ff ff77 	bl	8013a14 <tcp_alloc>
 8013b26:	4603      	mov	r3, r0
}
 8013b28:	4618      	mov	r0, r3
 8013b2a:	bd80      	pop	{r7, pc}

08013b2c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013b2c:	b480      	push	{r7}
 8013b2e:	b083      	sub	sp, #12
 8013b30:	af00      	add	r7, sp, #0
 8013b32:	6078      	str	r0, [r7, #4]
 8013b34:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d002      	beq.n	8013b42 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	683a      	ldr	r2, [r7, #0]
 8013b40:	611a      	str	r2, [r3, #16]
  }
}
 8013b42:	bf00      	nop
 8013b44:	370c      	adds	r7, #12
 8013b46:	46bd      	mov	sp, r7
 8013b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4c:	4770      	bx	lr
	...

08013b50 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013b50:	b580      	push	{r7, lr}
 8013b52:	b082      	sub	sp, #8
 8013b54:	af00      	add	r7, sp, #0
 8013b56:	6078      	str	r0, [r7, #4]
 8013b58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d00e      	beq.n	8013b7e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	7d1b      	ldrb	r3, [r3, #20]
 8013b64:	2b01      	cmp	r3, #1
 8013b66:	d106      	bne.n	8013b76 <tcp_recv+0x26>
 8013b68:	4b07      	ldr	r3, [pc, #28]	; (8013b88 <tcp_recv+0x38>)
 8013b6a:	f240 72df 	movw	r2, #2015	; 0x7df
 8013b6e:	4907      	ldr	r1, [pc, #28]	; (8013b8c <tcp_recv+0x3c>)
 8013b70:	4807      	ldr	r0, [pc, #28]	; (8013b90 <tcp_recv+0x40>)
 8013b72:	f007 fdb3 	bl	801b6dc <iprintf>
    pcb->recv = recv;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	683a      	ldr	r2, [r7, #0]
 8013b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8013b7e:	bf00      	nop
 8013b80:	3708      	adds	r7, #8
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	0801d3f0 	.word	0x0801d3f0
 8013b8c:	0801d98c 	.word	0x0801d98c
 8013b90:	0801d434 	.word	0x0801d434

08013b94 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
 8013b9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d00e      	beq.n	8013bc2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	7d1b      	ldrb	r3, [r3, #20]
 8013ba8:	2b01      	cmp	r3, #1
 8013baa:	d106      	bne.n	8013bba <tcp_sent+0x26>
 8013bac:	4b07      	ldr	r3, [pc, #28]	; (8013bcc <tcp_sent+0x38>)
 8013bae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8013bb2:	4907      	ldr	r1, [pc, #28]	; (8013bd0 <tcp_sent+0x3c>)
 8013bb4:	4807      	ldr	r0, [pc, #28]	; (8013bd4 <tcp_sent+0x40>)
 8013bb6:	f007 fd91 	bl	801b6dc <iprintf>
    pcb->sent = sent;
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	683a      	ldr	r2, [r7, #0]
 8013bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8013bc2:	bf00      	nop
 8013bc4:	3708      	adds	r7, #8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
 8013bca:	bf00      	nop
 8013bcc:	0801d3f0 	.word	0x0801d3f0
 8013bd0:	0801d9b4 	.word	0x0801d9b4
 8013bd4:	0801d434 	.word	0x0801d434

08013bd8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b082      	sub	sp, #8
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	6078      	str	r0, [r7, #4]
 8013be0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	2b00      	cmp	r3, #0
 8013be6:	d00e      	beq.n	8013c06 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	7d1b      	ldrb	r3, [r3, #20]
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d106      	bne.n	8013bfe <tcp_err+0x26>
 8013bf0:	4b07      	ldr	r3, [pc, #28]	; (8013c10 <tcp_err+0x38>)
 8013bf2:	f640 020d 	movw	r2, #2061	; 0x80d
 8013bf6:	4907      	ldr	r1, [pc, #28]	; (8013c14 <tcp_err+0x3c>)
 8013bf8:	4807      	ldr	r0, [pc, #28]	; (8013c18 <tcp_err+0x40>)
 8013bfa:	f007 fd6f 	bl	801b6dc <iprintf>
    pcb->errf = err;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	683a      	ldr	r2, [r7, #0]
 8013c02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013c06:	bf00      	nop
 8013c08:	3708      	adds	r7, #8
 8013c0a:	46bd      	mov	sp, r7
 8013c0c:	bd80      	pop	{r7, pc}
 8013c0e:	bf00      	nop
 8013c10:	0801d3f0 	.word	0x0801d3f0
 8013c14:	0801d9dc 	.word	0x0801d9dc
 8013c18:	0801d434 	.word	0x0801d434

08013c1c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013c1c:	b480      	push	{r7}
 8013c1e:	b085      	sub	sp, #20
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
 8013c24:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d008      	beq.n	8013c3e <tcp_accept+0x22>
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	7d1b      	ldrb	r3, [r3, #20]
 8013c30:	2b01      	cmp	r3, #1
 8013c32:	d104      	bne.n	8013c3e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	683a      	ldr	r2, [r7, #0]
 8013c3c:	619a      	str	r2, [r3, #24]
  }
}
 8013c3e:	bf00      	nop
 8013c40:	3714      	adds	r7, #20
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr
	...

08013c4c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013c4c:	b580      	push	{r7, lr}
 8013c4e:	b084      	sub	sp, #16
 8013c50:	af00      	add	r7, sp, #0
 8013c52:	60f8      	str	r0, [r7, #12]
 8013c54:	60b9      	str	r1, [r7, #8]
 8013c56:	4613      	mov	r3, r2
 8013c58:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	2b00      	cmp	r3, #0
 8013c5e:	d107      	bne.n	8013c70 <tcp_poll+0x24>
 8013c60:	4b0e      	ldr	r3, [pc, #56]	; (8013c9c <tcp_poll+0x50>)
 8013c62:	f640 023d 	movw	r2, #2109	; 0x83d
 8013c66:	490e      	ldr	r1, [pc, #56]	; (8013ca0 <tcp_poll+0x54>)
 8013c68:	480e      	ldr	r0, [pc, #56]	; (8013ca4 <tcp_poll+0x58>)
 8013c6a:	f007 fd37 	bl	801b6dc <iprintf>
 8013c6e:	e011      	b.n	8013c94 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	7d1b      	ldrb	r3, [r3, #20]
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d106      	bne.n	8013c86 <tcp_poll+0x3a>
 8013c78:	4b08      	ldr	r3, [pc, #32]	; (8013c9c <tcp_poll+0x50>)
 8013c7a:	f640 023e 	movw	r2, #2110	; 0x83e
 8013c7e:	490a      	ldr	r1, [pc, #40]	; (8013ca8 <tcp_poll+0x5c>)
 8013c80:	4808      	ldr	r0, [pc, #32]	; (8013ca4 <tcp_poll+0x58>)
 8013c82:	f007 fd2b 	bl	801b6dc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	68ba      	ldr	r2, [r7, #8]
 8013c8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	79fa      	ldrb	r2, [r7, #7]
 8013c92:	775a      	strb	r2, [r3, #29]
}
 8013c94:	3710      	adds	r7, #16
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	0801d3f0 	.word	0x0801d3f0
 8013ca0:	0801da04 	.word	0x0801da04
 8013ca4:	0801d434 	.word	0x0801d434
 8013ca8:	0801da1c 	.word	0x0801da1c

08013cac <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d107      	bne.n	8013cca <tcp_pcb_purge+0x1e>
 8013cba:	4b21      	ldr	r3, [pc, #132]	; (8013d40 <tcp_pcb_purge+0x94>)
 8013cbc:	f640 0251 	movw	r2, #2129	; 0x851
 8013cc0:	4920      	ldr	r1, [pc, #128]	; (8013d44 <tcp_pcb_purge+0x98>)
 8013cc2:	4821      	ldr	r0, [pc, #132]	; (8013d48 <tcp_pcb_purge+0x9c>)
 8013cc4:	f007 fd0a 	bl	801b6dc <iprintf>
 8013cc8:	e037      	b.n	8013d3a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	7d1b      	ldrb	r3, [r3, #20]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d033      	beq.n	8013d3a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013cd6:	2b0a      	cmp	r3, #10
 8013cd8:	d02f      	beq.n	8013d3a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8013cde:	2b01      	cmp	r3, #1
 8013ce0:	d02b      	beq.n	8013d3a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d007      	beq.n	8013cfa <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f7fe f8c0 	bl	8011e74 <pbuf_free>
      pcb->refused_data = NULL;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d002      	beq.n	8013d08 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f000 f986 	bl	8014014 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d0e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7ff fce1 	bl	80136dc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f7ff fcdc 	bl	80136dc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2200      	movs	r2, #0
 8013d28:	66da      	str	r2, [r3, #108]	; 0x6c
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	2200      	movs	r2, #0
 8013d36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013d3a:	3708      	adds	r7, #8
 8013d3c:	46bd      	mov	sp, r7
 8013d3e:	bd80      	pop	{r7, pc}
 8013d40:	0801d3f0 	.word	0x0801d3f0
 8013d44:	0801da3c 	.word	0x0801da3c
 8013d48:	0801d434 	.word	0x0801d434

08013d4c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b084      	sub	sp, #16
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
 8013d54:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d106      	bne.n	8013d6a <tcp_pcb_remove+0x1e>
 8013d5c:	4b3e      	ldr	r3, [pc, #248]	; (8013e58 <tcp_pcb_remove+0x10c>)
 8013d5e:	f640 0283 	movw	r2, #2179	; 0x883
 8013d62:	493e      	ldr	r1, [pc, #248]	; (8013e5c <tcp_pcb_remove+0x110>)
 8013d64:	483e      	ldr	r0, [pc, #248]	; (8013e60 <tcp_pcb_remove+0x114>)
 8013d66:	f007 fcb9 	bl	801b6dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d106      	bne.n	8013d7e <tcp_pcb_remove+0x32>
 8013d70:	4b39      	ldr	r3, [pc, #228]	; (8013e58 <tcp_pcb_remove+0x10c>)
 8013d72:	f640 0284 	movw	r2, #2180	; 0x884
 8013d76:	493b      	ldr	r1, [pc, #236]	; (8013e64 <tcp_pcb_remove+0x118>)
 8013d78:	4839      	ldr	r0, [pc, #228]	; (8013e60 <tcp_pcb_remove+0x114>)
 8013d7a:	f007 fcaf 	bl	801b6dc <iprintf>

  TCP_RMV(pcblist, pcb);
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	683a      	ldr	r2, [r7, #0]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d105      	bne.n	8013d94 <tcp_pcb_remove+0x48>
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	681b      	ldr	r3, [r3, #0]
 8013d8c:	68da      	ldr	r2, [r3, #12]
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	601a      	str	r2, [r3, #0]
 8013d92:	e013      	b.n	8013dbc <tcp_pcb_remove+0x70>
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	681b      	ldr	r3, [r3, #0]
 8013d98:	60fb      	str	r3, [r7, #12]
 8013d9a:	e00c      	b.n	8013db6 <tcp_pcb_remove+0x6a>
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	68db      	ldr	r3, [r3, #12]
 8013da0:	683a      	ldr	r2, [r7, #0]
 8013da2:	429a      	cmp	r2, r3
 8013da4:	d104      	bne.n	8013db0 <tcp_pcb_remove+0x64>
 8013da6:	683b      	ldr	r3, [r7, #0]
 8013da8:	68da      	ldr	r2, [r3, #12]
 8013daa:	68fb      	ldr	r3, [r7, #12]
 8013dac:	60da      	str	r2, [r3, #12]
 8013dae:	e005      	b.n	8013dbc <tcp_pcb_remove+0x70>
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	68db      	ldr	r3, [r3, #12]
 8013db4:	60fb      	str	r3, [r7, #12]
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d1ef      	bne.n	8013d9c <tcp_pcb_remove+0x50>
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	2200      	movs	r2, #0
 8013dc0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013dc2:	6838      	ldr	r0, [r7, #0]
 8013dc4:	f7ff ff72 	bl	8013cac <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	7d1b      	ldrb	r3, [r3, #20]
 8013dcc:	2b0a      	cmp	r3, #10
 8013dce:	d013      	beq.n	8013df8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8013dd0:	683b      	ldr	r3, [r7, #0]
 8013dd2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8013dd4:	2b01      	cmp	r3, #1
 8013dd6:	d00f      	beq.n	8013df8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8013dd8:	683b      	ldr	r3, [r7, #0]
 8013dda:	8b5b      	ldrh	r3, [r3, #26]
 8013ddc:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d009      	beq.n	8013df8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013de4:	683b      	ldr	r3, [r7, #0]
 8013de6:	8b5b      	ldrh	r3, [r3, #26]
 8013de8:	f043 0302 	orr.w	r3, r3, #2
 8013dec:	b29a      	uxth	r2, r3
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013df2:	6838      	ldr	r0, [r7, #0]
 8013df4:	f003 fbc2 	bl	801757c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013df8:	683b      	ldr	r3, [r7, #0]
 8013dfa:	7d1b      	ldrb	r3, [r3, #20]
 8013dfc:	2b01      	cmp	r3, #1
 8013dfe:	d020      	beq.n	8013e42 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013e00:	683b      	ldr	r3, [r7, #0]
 8013e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	d006      	beq.n	8013e16 <tcp_pcb_remove+0xca>
 8013e08:	4b13      	ldr	r3, [pc, #76]	; (8013e58 <tcp_pcb_remove+0x10c>)
 8013e0a:	f640 0293 	movw	r2, #2195	; 0x893
 8013e0e:	4916      	ldr	r1, [pc, #88]	; (8013e68 <tcp_pcb_remove+0x11c>)
 8013e10:	4813      	ldr	r0, [pc, #76]	; (8013e60 <tcp_pcb_remove+0x114>)
 8013e12:	f007 fc63 	bl	801b6dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013e16:	683b      	ldr	r3, [r7, #0]
 8013e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d006      	beq.n	8013e2c <tcp_pcb_remove+0xe0>
 8013e1e:	4b0e      	ldr	r3, [pc, #56]	; (8013e58 <tcp_pcb_remove+0x10c>)
 8013e20:	f640 0294 	movw	r2, #2196	; 0x894
 8013e24:	4911      	ldr	r1, [pc, #68]	; (8013e6c <tcp_pcb_remove+0x120>)
 8013e26:	480e      	ldr	r0, [pc, #56]	; (8013e60 <tcp_pcb_remove+0x114>)
 8013e28:	f007 fc58 	bl	801b6dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013e2c:	683b      	ldr	r3, [r7, #0]
 8013e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013e30:	2b00      	cmp	r3, #0
 8013e32:	d006      	beq.n	8013e42 <tcp_pcb_remove+0xf6>
 8013e34:	4b08      	ldr	r3, [pc, #32]	; (8013e58 <tcp_pcb_remove+0x10c>)
 8013e36:	f640 0296 	movw	r2, #2198	; 0x896
 8013e3a:	490d      	ldr	r1, [pc, #52]	; (8013e70 <tcp_pcb_remove+0x124>)
 8013e3c:	4808      	ldr	r0, [pc, #32]	; (8013e60 <tcp_pcb_remove+0x114>)
 8013e3e:	f007 fc4d 	bl	801b6dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	2200      	movs	r2, #0
 8013e46:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	2200      	movs	r2, #0
 8013e4c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013e4e:	bf00      	nop
 8013e50:	3710      	adds	r7, #16
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}
 8013e56:	bf00      	nop
 8013e58:	0801d3f0 	.word	0x0801d3f0
 8013e5c:	0801da58 	.word	0x0801da58
 8013e60:	0801d434 	.word	0x0801d434
 8013e64:	0801da74 	.word	0x0801da74
 8013e68:	0801da94 	.word	0x0801da94
 8013e6c:	0801daac 	.word	0x0801daac
 8013e70:	0801dac8 	.word	0x0801dac8

08013e74 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b082      	sub	sp, #8
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d106      	bne.n	8013e90 <tcp_next_iss+0x1c>
 8013e82:	4b0a      	ldr	r3, [pc, #40]	; (8013eac <tcp_next_iss+0x38>)
 8013e84:	f640 02af 	movw	r2, #2223	; 0x8af
 8013e88:	4909      	ldr	r1, [pc, #36]	; (8013eb0 <tcp_next_iss+0x3c>)
 8013e8a:	480a      	ldr	r0, [pc, #40]	; (8013eb4 <tcp_next_iss+0x40>)
 8013e8c:	f007 fc26 	bl	801b6dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013e90:	4b09      	ldr	r3, [pc, #36]	; (8013eb8 <tcp_next_iss+0x44>)
 8013e92:	681a      	ldr	r2, [r3, #0]
 8013e94:	4b09      	ldr	r3, [pc, #36]	; (8013ebc <tcp_next_iss+0x48>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	4413      	add	r3, r2
 8013e9a:	4a07      	ldr	r2, [pc, #28]	; (8013eb8 <tcp_next_iss+0x44>)
 8013e9c:	6013      	str	r3, [r2, #0]
  return iss;
 8013e9e:	4b06      	ldr	r3, [pc, #24]	; (8013eb8 <tcp_next_iss+0x44>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	3708      	adds	r7, #8
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	bd80      	pop	{r7, pc}
 8013eaa:	bf00      	nop
 8013eac:	0801d3f0 	.word	0x0801d3f0
 8013eb0:	0801dae0 	.word	0x0801dae0
 8013eb4:	0801d434 	.word	0x0801d434
 8013eb8:	24000034 	.word	0x24000034
 8013ebc:	240082e0 	.word	0x240082e0

08013ec0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013ec0:	b580      	push	{r7, lr}
 8013ec2:	b086      	sub	sp, #24
 8013ec4:	af00      	add	r7, sp, #0
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	60b9      	str	r1, [r7, #8]
 8013eca:	607a      	str	r2, [r7, #4]
 8013ecc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	d106      	bne.n	8013ee2 <tcp_eff_send_mss_netif+0x22>
 8013ed4:	4b14      	ldr	r3, [pc, #80]	; (8013f28 <tcp_eff_send_mss_netif+0x68>)
 8013ed6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8013eda:	4914      	ldr	r1, [pc, #80]	; (8013f2c <tcp_eff_send_mss_netif+0x6c>)
 8013edc:	4814      	ldr	r0, [pc, #80]	; (8013f30 <tcp_eff_send_mss_netif+0x70>)
 8013ede:	f007 fbfd 	bl	801b6dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d101      	bne.n	8013eec <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013ee8:	89fb      	ldrh	r3, [r7, #14]
 8013eea:	e019      	b.n	8013f20 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013eec:	68bb      	ldr	r3, [r7, #8]
 8013eee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013ef0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8013ef2:	8afb      	ldrh	r3, [r7, #22]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	d012      	beq.n	8013f1e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013ef8:	2328      	movs	r3, #40	; 0x28
 8013efa:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013efc:	8afa      	ldrh	r2, [r7, #22]
 8013efe:	8abb      	ldrh	r3, [r7, #20]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	d904      	bls.n	8013f0e <tcp_eff_send_mss_netif+0x4e>
 8013f04:	8afa      	ldrh	r2, [r7, #22]
 8013f06:	8abb      	ldrh	r3, [r7, #20]
 8013f08:	1ad3      	subs	r3, r2, r3
 8013f0a:	b29b      	uxth	r3, r3
 8013f0c:	e000      	b.n	8013f10 <tcp_eff_send_mss_netif+0x50>
 8013f0e:	2300      	movs	r3, #0
 8013f10:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8013f12:	8a7a      	ldrh	r2, [r7, #18]
 8013f14:	89fb      	ldrh	r3, [r7, #14]
 8013f16:	4293      	cmp	r3, r2
 8013f18:	bf28      	it	cs
 8013f1a:	4613      	movcs	r3, r2
 8013f1c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8013f1e:	89fb      	ldrh	r3, [r7, #14]
}
 8013f20:	4618      	mov	r0, r3
 8013f22:	3718      	adds	r7, #24
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}
 8013f28:	0801d3f0 	.word	0x0801d3f0
 8013f2c:	0801dafc 	.word	0x0801dafc
 8013f30:	0801d434 	.word	0x0801d434

08013f34 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013f34:	b580      	push	{r7, lr}
 8013f36:	b084      	sub	sp, #16
 8013f38:	af00      	add	r7, sp, #0
 8013f3a:	6078      	str	r0, [r7, #4]
 8013f3c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8013f3e:	683b      	ldr	r3, [r7, #0]
 8013f40:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d119      	bne.n	8013f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013f48:	4b10      	ldr	r3, [pc, #64]	; (8013f8c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013f4a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8013f4e:	4910      	ldr	r1, [pc, #64]	; (8013f90 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013f50:	4810      	ldr	r0, [pc, #64]	; (8013f94 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013f52:	f007 fbc3 	bl	801b6dc <iprintf>

  while (pcb != NULL) {
 8013f56:	e011      	b.n	8013f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013f58:	68fb      	ldr	r3, [r7, #12]
 8013f5a:	681a      	ldr	r2, [r3, #0]
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	429a      	cmp	r2, r3
 8013f62:	d108      	bne.n	8013f76 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013f64:	68fb      	ldr	r3, [r7, #12]
 8013f66:	68db      	ldr	r3, [r3, #12]
 8013f68:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	f7fe fd26 	bl	80129bc <tcp_abort>
      pcb = next;
 8013f70:	68bb      	ldr	r3, [r7, #8]
 8013f72:	60fb      	str	r3, [r7, #12]
 8013f74:	e002      	b.n	8013f7c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013f76:	68fb      	ldr	r3, [r7, #12]
 8013f78:	68db      	ldr	r3, [r3, #12]
 8013f7a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013f7c:	68fb      	ldr	r3, [r7, #12]
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d1ea      	bne.n	8013f58 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013f82:	bf00      	nop
 8013f84:	bf00      	nop
 8013f86:	3710      	adds	r7, #16
 8013f88:	46bd      	mov	sp, r7
 8013f8a:	bd80      	pop	{r7, pc}
 8013f8c:	0801d3f0 	.word	0x0801d3f0
 8013f90:	0801db24 	.word	0x0801db24
 8013f94:	0801d434 	.word	0x0801d434

08013f98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013f98:	b580      	push	{r7, lr}
 8013f9a:	b084      	sub	sp, #16
 8013f9c:	af00      	add	r7, sp, #0
 8013f9e:	6078      	str	r0, [r7, #4]
 8013fa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2b00      	cmp	r3, #0
 8013fa6:	d02a      	beq.n	8013ffe <tcp_netif_ip_addr_changed+0x66>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d026      	beq.n	8013ffe <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013fb0:	4b15      	ldr	r3, [pc, #84]	; (8014008 <tcp_netif_ip_addr_changed+0x70>)
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	4619      	mov	r1, r3
 8013fb6:	6878      	ldr	r0, [r7, #4]
 8013fb8:	f7ff ffbc 	bl	8013f34 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013fbc:	4b13      	ldr	r3, [pc, #76]	; (801400c <tcp_netif_ip_addr_changed+0x74>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4619      	mov	r1, r3
 8013fc2:	6878      	ldr	r0, [r7, #4]
 8013fc4:	f7ff ffb6 	bl	8013f34 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013fc8:	683b      	ldr	r3, [r7, #0]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d017      	beq.n	8013ffe <tcp_netif_ip_addr_changed+0x66>
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d013      	beq.n	8013ffe <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013fd6:	4b0e      	ldr	r3, [pc, #56]	; (8014010 <tcp_netif_ip_addr_changed+0x78>)
 8013fd8:	681b      	ldr	r3, [r3, #0]
 8013fda:	60fb      	str	r3, [r7, #12]
 8013fdc:	e00c      	b.n	8013ff8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	681a      	ldr	r2, [r3, #0]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	429a      	cmp	r2, r3
 8013fe8:	d103      	bne.n	8013ff2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013ff2:	68fb      	ldr	r3, [r7, #12]
 8013ff4:	68db      	ldr	r3, [r3, #12]
 8013ff6:	60fb      	str	r3, [r7, #12]
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d1ef      	bne.n	8013fde <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013ffe:	bf00      	nop
 8014000:	3710      	adds	r7, #16
 8014002:	46bd      	mov	sp, r7
 8014004:	bd80      	pop	{r7, pc}
 8014006:	bf00      	nop
 8014008:	240082dc 	.word	0x240082dc
 801400c:	240082e8 	.word	0x240082e8
 8014010:	240082e4 	.word	0x240082e4

08014014 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8014014:	b580      	push	{r7, lr}
 8014016:	b082      	sub	sp, #8
 8014018:	af00      	add	r7, sp, #0
 801401a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014020:	2b00      	cmp	r3, #0
 8014022:	d007      	beq.n	8014034 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014028:	4618      	mov	r0, r3
 801402a:	f7ff fb57 	bl	80136dc <tcp_segs_free>
    pcb->ooseq = NULL;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	2200      	movs	r2, #0
 8014032:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8014034:	bf00      	nop
 8014036:	3708      	adds	r7, #8
 8014038:	46bd      	mov	sp, r7
 801403a:	bd80      	pop	{r7, pc}

0801403c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801403c:	b590      	push	{r4, r7, lr}
 801403e:	b08d      	sub	sp, #52	; 0x34
 8014040:	af04      	add	r7, sp, #16
 8014042:	6078      	str	r0, [r7, #4]
 8014044:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d105      	bne.n	8014058 <tcp_input+0x1c>
 801404c:	4b9b      	ldr	r3, [pc, #620]	; (80142bc <tcp_input+0x280>)
 801404e:	2283      	movs	r2, #131	; 0x83
 8014050:	499b      	ldr	r1, [pc, #620]	; (80142c0 <tcp_input+0x284>)
 8014052:	489c      	ldr	r0, [pc, #624]	; (80142c4 <tcp_input+0x288>)
 8014054:	f007 fb42 	bl	801b6dc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	685b      	ldr	r3, [r3, #4]
 801405c:	4a9a      	ldr	r2, [pc, #616]	; (80142c8 <tcp_input+0x28c>)
 801405e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	895b      	ldrh	r3, [r3, #10]
 8014064:	2b13      	cmp	r3, #19
 8014066:	f240 83c4 	bls.w	80147f2 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801406a:	4b98      	ldr	r3, [pc, #608]	; (80142cc <tcp_input+0x290>)
 801406c:	695b      	ldr	r3, [r3, #20]
 801406e:	4a97      	ldr	r2, [pc, #604]	; (80142cc <tcp_input+0x290>)
 8014070:	6812      	ldr	r2, [r2, #0]
 8014072:	4611      	mov	r1, r2
 8014074:	4618      	mov	r0, r3
 8014076:	f006 f8c1 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 801407a:	4603      	mov	r3, r0
 801407c:	2b00      	cmp	r3, #0
 801407e:	f040 83ba 	bne.w	80147f6 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8014082:	4b92      	ldr	r3, [pc, #584]	; (80142cc <tcp_input+0x290>)
 8014084:	695b      	ldr	r3, [r3, #20]
 8014086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801408a:	2be0      	cmp	r3, #224	; 0xe0
 801408c:	f000 83b3 	beq.w	80147f6 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014090:	4b8d      	ldr	r3, [pc, #564]	; (80142c8 <tcp_input+0x28c>)
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	899b      	ldrh	r3, [r3, #12]
 8014096:	b29b      	uxth	r3, r3
 8014098:	4618      	mov	r0, r3
 801409a:	f7fc fa41 	bl	8010520 <lwip_htons>
 801409e:	4603      	mov	r3, r0
 80140a0:	0b1b      	lsrs	r3, r3, #12
 80140a2:	b29b      	uxth	r3, r3
 80140a4:	b2db      	uxtb	r3, r3
 80140a6:	009b      	lsls	r3, r3, #2
 80140a8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80140aa:	7cbb      	ldrb	r3, [r7, #18]
 80140ac:	2b13      	cmp	r3, #19
 80140ae:	f240 83a4 	bls.w	80147fa <tcp_input+0x7be>
 80140b2:	7cbb      	ldrb	r3, [r7, #18]
 80140b4:	b29a      	uxth	r2, r3
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	891b      	ldrh	r3, [r3, #8]
 80140ba:	429a      	cmp	r2, r3
 80140bc:	f200 839d 	bhi.w	80147fa <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80140c0:	7cbb      	ldrb	r3, [r7, #18]
 80140c2:	b29b      	uxth	r3, r3
 80140c4:	3b14      	subs	r3, #20
 80140c6:	b29a      	uxth	r2, r3
 80140c8:	4b81      	ldr	r3, [pc, #516]	; (80142d0 <tcp_input+0x294>)
 80140ca:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80140cc:	4b81      	ldr	r3, [pc, #516]	; (80142d4 <tcp_input+0x298>)
 80140ce:	2200      	movs	r2, #0
 80140d0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	895a      	ldrh	r2, [r3, #10]
 80140d6:	7cbb      	ldrb	r3, [r7, #18]
 80140d8:	b29b      	uxth	r3, r3
 80140da:	429a      	cmp	r2, r3
 80140dc:	d309      	bcc.n	80140f2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80140de:	4b7c      	ldr	r3, [pc, #496]	; (80142d0 <tcp_input+0x294>)
 80140e0:	881a      	ldrh	r2, [r3, #0]
 80140e2:	4b7d      	ldr	r3, [pc, #500]	; (80142d8 <tcp_input+0x29c>)
 80140e4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80140e6:	7cbb      	ldrb	r3, [r7, #18]
 80140e8:	4619      	mov	r1, r3
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f7fd fe3c 	bl	8011d68 <pbuf_remove_header>
 80140f0:	e04e      	b.n	8014190 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681b      	ldr	r3, [r3, #0]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d105      	bne.n	8014106 <tcp_input+0xca>
 80140fa:	4b70      	ldr	r3, [pc, #448]	; (80142bc <tcp_input+0x280>)
 80140fc:	22c2      	movs	r2, #194	; 0xc2
 80140fe:	4977      	ldr	r1, [pc, #476]	; (80142dc <tcp_input+0x2a0>)
 8014100:	4870      	ldr	r0, [pc, #448]	; (80142c4 <tcp_input+0x288>)
 8014102:	f007 faeb 	bl	801b6dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8014106:	2114      	movs	r1, #20
 8014108:	6878      	ldr	r0, [r7, #4]
 801410a:	f7fd fe2d 	bl	8011d68 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	895a      	ldrh	r2, [r3, #10]
 8014112:	4b71      	ldr	r3, [pc, #452]	; (80142d8 <tcp_input+0x29c>)
 8014114:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8014116:	4b6e      	ldr	r3, [pc, #440]	; (80142d0 <tcp_input+0x294>)
 8014118:	881a      	ldrh	r2, [r3, #0]
 801411a:	4b6f      	ldr	r3, [pc, #444]	; (80142d8 <tcp_input+0x29c>)
 801411c:	881b      	ldrh	r3, [r3, #0]
 801411e:	1ad3      	subs	r3, r2, r3
 8014120:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8014122:	4b6d      	ldr	r3, [pc, #436]	; (80142d8 <tcp_input+0x29c>)
 8014124:	881b      	ldrh	r3, [r3, #0]
 8014126:	4619      	mov	r1, r3
 8014128:	6878      	ldr	r0, [r7, #4]
 801412a:	f7fd fe1d 	bl	8011d68 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	895b      	ldrh	r3, [r3, #10]
 8014134:	8a3a      	ldrh	r2, [r7, #16]
 8014136:	429a      	cmp	r2, r3
 8014138:	f200 8361 	bhi.w	80147fe <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	685b      	ldr	r3, [r3, #4]
 8014142:	4a64      	ldr	r2, [pc, #400]	; (80142d4 <tcp_input+0x298>)
 8014144:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	681b      	ldr	r3, [r3, #0]
 801414a:	8a3a      	ldrh	r2, [r7, #16]
 801414c:	4611      	mov	r1, r2
 801414e:	4618      	mov	r0, r3
 8014150:	f7fd fe0a 	bl	8011d68 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	891a      	ldrh	r2, [r3, #8]
 8014158:	8a3b      	ldrh	r3, [r7, #16]
 801415a:	1ad3      	subs	r3, r2, r3
 801415c:	b29a      	uxth	r2, r3
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	895b      	ldrh	r3, [r3, #10]
 8014166:	2b00      	cmp	r3, #0
 8014168:	d005      	beq.n	8014176 <tcp_input+0x13a>
 801416a:	4b54      	ldr	r3, [pc, #336]	; (80142bc <tcp_input+0x280>)
 801416c:	22df      	movs	r2, #223	; 0xdf
 801416e:	495c      	ldr	r1, [pc, #368]	; (80142e0 <tcp_input+0x2a4>)
 8014170:	4854      	ldr	r0, [pc, #336]	; (80142c4 <tcp_input+0x288>)
 8014172:	f007 fab3 	bl	801b6dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	891a      	ldrh	r2, [r3, #8]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	891b      	ldrh	r3, [r3, #8]
 8014180:	429a      	cmp	r2, r3
 8014182:	d005      	beq.n	8014190 <tcp_input+0x154>
 8014184:	4b4d      	ldr	r3, [pc, #308]	; (80142bc <tcp_input+0x280>)
 8014186:	22e0      	movs	r2, #224	; 0xe0
 8014188:	4956      	ldr	r1, [pc, #344]	; (80142e4 <tcp_input+0x2a8>)
 801418a:	484e      	ldr	r0, [pc, #312]	; (80142c4 <tcp_input+0x288>)
 801418c:	f007 faa6 	bl	801b6dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014190:	4b4d      	ldr	r3, [pc, #308]	; (80142c8 <tcp_input+0x28c>)
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	881b      	ldrh	r3, [r3, #0]
 8014196:	b29b      	uxth	r3, r3
 8014198:	4a4b      	ldr	r2, [pc, #300]	; (80142c8 <tcp_input+0x28c>)
 801419a:	6814      	ldr	r4, [r2, #0]
 801419c:	4618      	mov	r0, r3
 801419e:	f7fc f9bf 	bl	8010520 <lwip_htons>
 80141a2:	4603      	mov	r3, r0
 80141a4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80141a6:	4b48      	ldr	r3, [pc, #288]	; (80142c8 <tcp_input+0x28c>)
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	885b      	ldrh	r3, [r3, #2]
 80141ac:	b29b      	uxth	r3, r3
 80141ae:	4a46      	ldr	r2, [pc, #280]	; (80142c8 <tcp_input+0x28c>)
 80141b0:	6814      	ldr	r4, [r2, #0]
 80141b2:	4618      	mov	r0, r3
 80141b4:	f7fc f9b4 	bl	8010520 <lwip_htons>
 80141b8:	4603      	mov	r3, r0
 80141ba:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80141bc:	4b42      	ldr	r3, [pc, #264]	; (80142c8 <tcp_input+0x28c>)
 80141be:	681b      	ldr	r3, [r3, #0]
 80141c0:	685b      	ldr	r3, [r3, #4]
 80141c2:	4a41      	ldr	r2, [pc, #260]	; (80142c8 <tcp_input+0x28c>)
 80141c4:	6814      	ldr	r4, [r2, #0]
 80141c6:	4618      	mov	r0, r3
 80141c8:	f7fc f9bf 	bl	801054a <lwip_htonl>
 80141cc:	4603      	mov	r3, r0
 80141ce:	6063      	str	r3, [r4, #4]
 80141d0:	6863      	ldr	r3, [r4, #4]
 80141d2:	4a45      	ldr	r2, [pc, #276]	; (80142e8 <tcp_input+0x2ac>)
 80141d4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80141d6:	4b3c      	ldr	r3, [pc, #240]	; (80142c8 <tcp_input+0x28c>)
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	689b      	ldr	r3, [r3, #8]
 80141dc:	4a3a      	ldr	r2, [pc, #232]	; (80142c8 <tcp_input+0x28c>)
 80141de:	6814      	ldr	r4, [r2, #0]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fc f9b2 	bl	801054a <lwip_htonl>
 80141e6:	4603      	mov	r3, r0
 80141e8:	60a3      	str	r3, [r4, #8]
 80141ea:	68a3      	ldr	r3, [r4, #8]
 80141ec:	4a3f      	ldr	r2, [pc, #252]	; (80142ec <tcp_input+0x2b0>)
 80141ee:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80141f0:	4b35      	ldr	r3, [pc, #212]	; (80142c8 <tcp_input+0x28c>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	89db      	ldrh	r3, [r3, #14]
 80141f6:	b29b      	uxth	r3, r3
 80141f8:	4a33      	ldr	r2, [pc, #204]	; (80142c8 <tcp_input+0x28c>)
 80141fa:	6814      	ldr	r4, [r2, #0]
 80141fc:	4618      	mov	r0, r3
 80141fe:	f7fc f98f 	bl	8010520 <lwip_htons>
 8014202:	4603      	mov	r3, r0
 8014204:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8014206:	4b30      	ldr	r3, [pc, #192]	; (80142c8 <tcp_input+0x28c>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	899b      	ldrh	r3, [r3, #12]
 801420c:	b29b      	uxth	r3, r3
 801420e:	4618      	mov	r0, r3
 8014210:	f7fc f986 	bl	8010520 <lwip_htons>
 8014214:	4603      	mov	r3, r0
 8014216:	b2db      	uxtb	r3, r3
 8014218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801421c:	b2da      	uxtb	r2, r3
 801421e:	4b34      	ldr	r3, [pc, #208]	; (80142f0 <tcp_input+0x2b4>)
 8014220:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	891a      	ldrh	r2, [r3, #8]
 8014226:	4b33      	ldr	r3, [pc, #204]	; (80142f4 <tcp_input+0x2b8>)
 8014228:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801422a:	4b31      	ldr	r3, [pc, #196]	; (80142f0 <tcp_input+0x2b4>)
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	f003 0303 	and.w	r3, r3, #3
 8014232:	2b00      	cmp	r3, #0
 8014234:	d00c      	beq.n	8014250 <tcp_input+0x214>
    tcplen++;
 8014236:	4b2f      	ldr	r3, [pc, #188]	; (80142f4 <tcp_input+0x2b8>)
 8014238:	881b      	ldrh	r3, [r3, #0]
 801423a:	3301      	adds	r3, #1
 801423c:	b29a      	uxth	r2, r3
 801423e:	4b2d      	ldr	r3, [pc, #180]	; (80142f4 <tcp_input+0x2b8>)
 8014240:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	891a      	ldrh	r2, [r3, #8]
 8014246:	4b2b      	ldr	r3, [pc, #172]	; (80142f4 <tcp_input+0x2b8>)
 8014248:	881b      	ldrh	r3, [r3, #0]
 801424a:	429a      	cmp	r2, r3
 801424c:	f200 82d9 	bhi.w	8014802 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8014250:	2300      	movs	r3, #0
 8014252:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014254:	4b28      	ldr	r3, [pc, #160]	; (80142f8 <tcp_input+0x2bc>)
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	61fb      	str	r3, [r7, #28]
 801425a:	e09d      	b.n	8014398 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	7d1b      	ldrb	r3, [r3, #20]
 8014260:	2b00      	cmp	r3, #0
 8014262:	d105      	bne.n	8014270 <tcp_input+0x234>
 8014264:	4b15      	ldr	r3, [pc, #84]	; (80142bc <tcp_input+0x280>)
 8014266:	22fb      	movs	r2, #251	; 0xfb
 8014268:	4924      	ldr	r1, [pc, #144]	; (80142fc <tcp_input+0x2c0>)
 801426a:	4816      	ldr	r0, [pc, #88]	; (80142c4 <tcp_input+0x288>)
 801426c:	f007 fa36 	bl	801b6dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	7d1b      	ldrb	r3, [r3, #20]
 8014274:	2b0a      	cmp	r3, #10
 8014276:	d105      	bne.n	8014284 <tcp_input+0x248>
 8014278:	4b10      	ldr	r3, [pc, #64]	; (80142bc <tcp_input+0x280>)
 801427a:	22fc      	movs	r2, #252	; 0xfc
 801427c:	4920      	ldr	r1, [pc, #128]	; (8014300 <tcp_input+0x2c4>)
 801427e:	4811      	ldr	r0, [pc, #68]	; (80142c4 <tcp_input+0x288>)
 8014280:	f007 fa2c 	bl	801b6dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	7d1b      	ldrb	r3, [r3, #20]
 8014288:	2b01      	cmp	r3, #1
 801428a:	d105      	bne.n	8014298 <tcp_input+0x25c>
 801428c:	4b0b      	ldr	r3, [pc, #44]	; (80142bc <tcp_input+0x280>)
 801428e:	22fd      	movs	r2, #253	; 0xfd
 8014290:	491c      	ldr	r1, [pc, #112]	; (8014304 <tcp_input+0x2c8>)
 8014292:	480c      	ldr	r0, [pc, #48]	; (80142c4 <tcp_input+0x288>)
 8014294:	f007 fa22 	bl	801b6dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014298:	69fb      	ldr	r3, [r7, #28]
 801429a:	7a1b      	ldrb	r3, [r3, #8]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d033      	beq.n	8014308 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80142a0:	69fb      	ldr	r3, [r7, #28]
 80142a2:	7a1a      	ldrb	r2, [r3, #8]
 80142a4:	4b09      	ldr	r3, [pc, #36]	; (80142cc <tcp_input+0x290>)
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80142ac:	3301      	adds	r3, #1
 80142ae:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80142b0:	429a      	cmp	r2, r3
 80142b2:	d029      	beq.n	8014308 <tcp_input+0x2cc>
      prev = pcb;
 80142b4:	69fb      	ldr	r3, [r7, #28]
 80142b6:	61bb      	str	r3, [r7, #24]
      continue;
 80142b8:	e06b      	b.n	8014392 <tcp_input+0x356>
 80142ba:	bf00      	nop
 80142bc:	0801db58 	.word	0x0801db58
 80142c0:	0801db8c 	.word	0x0801db8c
 80142c4:	0801dba4 	.word	0x0801dba4
 80142c8:	24004b10 	.word	0x24004b10
 80142cc:	2400521c 	.word	0x2400521c
 80142d0:	24004b14 	.word	0x24004b14
 80142d4:	24004b18 	.word	0x24004b18
 80142d8:	24004b16 	.word	0x24004b16
 80142dc:	0801dbcc 	.word	0x0801dbcc
 80142e0:	0801dbdc 	.word	0x0801dbdc
 80142e4:	0801dbe8 	.word	0x0801dbe8
 80142e8:	24004b20 	.word	0x24004b20
 80142ec:	24004b24 	.word	0x24004b24
 80142f0:	24004b2c 	.word	0x24004b2c
 80142f4:	24004b2a 	.word	0x24004b2a
 80142f8:	240082dc 	.word	0x240082dc
 80142fc:	0801dc08 	.word	0x0801dc08
 8014300:	0801dc30 	.word	0x0801dc30
 8014304:	0801dc5c 	.word	0x0801dc5c
    }

    if (pcb->remote_port == tcphdr->src &&
 8014308:	69fb      	ldr	r3, [r7, #28]
 801430a:	8b1a      	ldrh	r2, [r3, #24]
 801430c:	4b94      	ldr	r3, [pc, #592]	; (8014560 <tcp_input+0x524>)
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	881b      	ldrh	r3, [r3, #0]
 8014312:	b29b      	uxth	r3, r3
 8014314:	429a      	cmp	r2, r3
 8014316:	d13a      	bne.n	801438e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014318:	69fb      	ldr	r3, [r7, #28]
 801431a:	8ada      	ldrh	r2, [r3, #22]
 801431c:	4b90      	ldr	r3, [pc, #576]	; (8014560 <tcp_input+0x524>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	885b      	ldrh	r3, [r3, #2]
 8014322:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8014324:	429a      	cmp	r2, r3
 8014326:	d132      	bne.n	801438e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	685a      	ldr	r2, [r3, #4]
 801432c:	4b8d      	ldr	r3, [pc, #564]	; (8014564 <tcp_input+0x528>)
 801432e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8014330:	429a      	cmp	r2, r3
 8014332:	d12c      	bne.n	801438e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014334:	69fb      	ldr	r3, [r7, #28]
 8014336:	681a      	ldr	r2, [r3, #0]
 8014338:	4b8a      	ldr	r3, [pc, #552]	; (8014564 <tcp_input+0x528>)
 801433a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801433c:	429a      	cmp	r2, r3
 801433e:	d126      	bne.n	801438e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8014340:	69fb      	ldr	r3, [r7, #28]
 8014342:	68db      	ldr	r3, [r3, #12]
 8014344:	69fa      	ldr	r2, [r7, #28]
 8014346:	429a      	cmp	r2, r3
 8014348:	d106      	bne.n	8014358 <tcp_input+0x31c>
 801434a:	4b87      	ldr	r3, [pc, #540]	; (8014568 <tcp_input+0x52c>)
 801434c:	f240 120d 	movw	r2, #269	; 0x10d
 8014350:	4986      	ldr	r1, [pc, #536]	; (801456c <tcp_input+0x530>)
 8014352:	4887      	ldr	r0, [pc, #540]	; (8014570 <tcp_input+0x534>)
 8014354:	f007 f9c2 	bl	801b6dc <iprintf>
      if (prev != NULL) {
 8014358:	69bb      	ldr	r3, [r7, #24]
 801435a:	2b00      	cmp	r3, #0
 801435c:	d00a      	beq.n	8014374 <tcp_input+0x338>
        prev->next = pcb->next;
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	68da      	ldr	r2, [r3, #12]
 8014362:	69bb      	ldr	r3, [r7, #24]
 8014364:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8014366:	4b83      	ldr	r3, [pc, #524]	; (8014574 <tcp_input+0x538>)
 8014368:	681a      	ldr	r2, [r3, #0]
 801436a:	69fb      	ldr	r3, [r7, #28]
 801436c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801436e:	4a81      	ldr	r2, [pc, #516]	; (8014574 <tcp_input+0x538>)
 8014370:	69fb      	ldr	r3, [r7, #28]
 8014372:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8014374:	69fb      	ldr	r3, [r7, #28]
 8014376:	68db      	ldr	r3, [r3, #12]
 8014378:	69fa      	ldr	r2, [r7, #28]
 801437a:	429a      	cmp	r2, r3
 801437c:	d111      	bne.n	80143a2 <tcp_input+0x366>
 801437e:	4b7a      	ldr	r3, [pc, #488]	; (8014568 <tcp_input+0x52c>)
 8014380:	f240 1215 	movw	r2, #277	; 0x115
 8014384:	497c      	ldr	r1, [pc, #496]	; (8014578 <tcp_input+0x53c>)
 8014386:	487a      	ldr	r0, [pc, #488]	; (8014570 <tcp_input+0x534>)
 8014388:	f007 f9a8 	bl	801b6dc <iprintf>
      break;
 801438c:	e009      	b.n	80143a2 <tcp_input+0x366>
    }
    prev = pcb;
 801438e:	69fb      	ldr	r3, [r7, #28]
 8014390:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014392:	69fb      	ldr	r3, [r7, #28]
 8014394:	68db      	ldr	r3, [r3, #12]
 8014396:	61fb      	str	r3, [r7, #28]
 8014398:	69fb      	ldr	r3, [r7, #28]
 801439a:	2b00      	cmp	r3, #0
 801439c:	f47f af5e 	bne.w	801425c <tcp_input+0x220>
 80143a0:	e000      	b.n	80143a4 <tcp_input+0x368>
      break;
 80143a2:	bf00      	nop
  }

  if (pcb == NULL) {
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	2b00      	cmp	r3, #0
 80143a8:	f040 8095 	bne.w	80144d6 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80143ac:	4b73      	ldr	r3, [pc, #460]	; (801457c <tcp_input+0x540>)
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	61fb      	str	r3, [r7, #28]
 80143b2:	e03f      	b.n	8014434 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	7d1b      	ldrb	r3, [r3, #20]
 80143b8:	2b0a      	cmp	r3, #10
 80143ba:	d006      	beq.n	80143ca <tcp_input+0x38e>
 80143bc:	4b6a      	ldr	r3, [pc, #424]	; (8014568 <tcp_input+0x52c>)
 80143be:	f240 121f 	movw	r2, #287	; 0x11f
 80143c2:	496f      	ldr	r1, [pc, #444]	; (8014580 <tcp_input+0x544>)
 80143c4:	486a      	ldr	r0, [pc, #424]	; (8014570 <tcp_input+0x534>)
 80143c6:	f007 f989 	bl	801b6dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80143ca:	69fb      	ldr	r3, [r7, #28]
 80143cc:	7a1b      	ldrb	r3, [r3, #8]
 80143ce:	2b00      	cmp	r3, #0
 80143d0:	d009      	beq.n	80143e6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	7a1a      	ldrb	r2, [r3, #8]
 80143d6:	4b63      	ldr	r3, [pc, #396]	; (8014564 <tcp_input+0x528>)
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80143de:	3301      	adds	r3, #1
 80143e0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80143e2:	429a      	cmp	r2, r3
 80143e4:	d122      	bne.n	801442c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80143e6:	69fb      	ldr	r3, [r7, #28]
 80143e8:	8b1a      	ldrh	r2, [r3, #24]
 80143ea:	4b5d      	ldr	r3, [pc, #372]	; (8014560 <tcp_input+0x524>)
 80143ec:	681b      	ldr	r3, [r3, #0]
 80143ee:	881b      	ldrh	r3, [r3, #0]
 80143f0:	b29b      	uxth	r3, r3
 80143f2:	429a      	cmp	r2, r3
 80143f4:	d11b      	bne.n	801442e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	8ada      	ldrh	r2, [r3, #22]
 80143fa:	4b59      	ldr	r3, [pc, #356]	; (8014560 <tcp_input+0x524>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	885b      	ldrh	r3, [r3, #2]
 8014400:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8014402:	429a      	cmp	r2, r3
 8014404:	d113      	bne.n	801442e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014406:	69fb      	ldr	r3, [r7, #28]
 8014408:	685a      	ldr	r2, [r3, #4]
 801440a:	4b56      	ldr	r3, [pc, #344]	; (8014564 <tcp_input+0x528>)
 801440c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801440e:	429a      	cmp	r2, r3
 8014410:	d10d      	bne.n	801442e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8014412:	69fb      	ldr	r3, [r7, #28]
 8014414:	681a      	ldr	r2, [r3, #0]
 8014416:	4b53      	ldr	r3, [pc, #332]	; (8014564 <tcp_input+0x528>)
 8014418:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801441a:	429a      	cmp	r2, r3
 801441c:	d107      	bne.n	801442e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801441e:	69f8      	ldr	r0, [r7, #28]
 8014420:	f000 fb54 	bl	8014acc <tcp_timewait_input>
        }
        pbuf_free(p);
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f7fd fd25 	bl	8011e74 <pbuf_free>
        return;
 801442a:	e1f0      	b.n	801480e <tcp_input+0x7d2>
        continue;
 801442c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801442e:	69fb      	ldr	r3, [r7, #28]
 8014430:	68db      	ldr	r3, [r3, #12]
 8014432:	61fb      	str	r3, [r7, #28]
 8014434:	69fb      	ldr	r3, [r7, #28]
 8014436:	2b00      	cmp	r3, #0
 8014438:	d1bc      	bne.n	80143b4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801443a:	2300      	movs	r3, #0
 801443c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801443e:	4b51      	ldr	r3, [pc, #324]	; (8014584 <tcp_input+0x548>)
 8014440:	681b      	ldr	r3, [r3, #0]
 8014442:	617b      	str	r3, [r7, #20]
 8014444:	e02a      	b.n	801449c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	7a1b      	ldrb	r3, [r3, #8]
 801444a:	2b00      	cmp	r3, #0
 801444c:	d00c      	beq.n	8014468 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801444e:	697b      	ldr	r3, [r7, #20]
 8014450:	7a1a      	ldrb	r2, [r3, #8]
 8014452:	4b44      	ldr	r3, [pc, #272]	; (8014564 <tcp_input+0x528>)
 8014454:	685b      	ldr	r3, [r3, #4]
 8014456:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801445a:	3301      	adds	r3, #1
 801445c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801445e:	429a      	cmp	r2, r3
 8014460:	d002      	beq.n	8014468 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	61bb      	str	r3, [r7, #24]
        continue;
 8014466:	e016      	b.n	8014496 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8014468:	697b      	ldr	r3, [r7, #20]
 801446a:	8ada      	ldrh	r2, [r3, #22]
 801446c:	4b3c      	ldr	r3, [pc, #240]	; (8014560 <tcp_input+0x524>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	885b      	ldrh	r3, [r3, #2]
 8014472:	b29b      	uxth	r3, r3
 8014474:	429a      	cmp	r2, r3
 8014476:	d10c      	bne.n	8014492 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	681a      	ldr	r2, [r3, #0]
 801447c:	4b39      	ldr	r3, [pc, #228]	; (8014564 <tcp_input+0x528>)
 801447e:	695b      	ldr	r3, [r3, #20]
 8014480:	429a      	cmp	r2, r3
 8014482:	d00f      	beq.n	80144a4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8014484:	697b      	ldr	r3, [r7, #20]
 8014486:	2b00      	cmp	r3, #0
 8014488:	d00d      	beq.n	80144a6 <tcp_input+0x46a>
 801448a:	697b      	ldr	r3, [r7, #20]
 801448c:	681b      	ldr	r3, [r3, #0]
 801448e:	2b00      	cmp	r3, #0
 8014490:	d009      	beq.n	80144a6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014492:	697b      	ldr	r3, [r7, #20]
 8014494:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014496:	697b      	ldr	r3, [r7, #20]
 8014498:	68db      	ldr	r3, [r3, #12]
 801449a:	617b      	str	r3, [r7, #20]
 801449c:	697b      	ldr	r3, [r7, #20]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d1d1      	bne.n	8014446 <tcp_input+0x40a>
 80144a2:	e000      	b.n	80144a6 <tcp_input+0x46a>
            break;
 80144a4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80144a6:	697b      	ldr	r3, [r7, #20]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d014      	beq.n	80144d6 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80144ac:	69bb      	ldr	r3, [r7, #24]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d00a      	beq.n	80144c8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80144b2:	697b      	ldr	r3, [r7, #20]
 80144b4:	68da      	ldr	r2, [r3, #12]
 80144b6:	69bb      	ldr	r3, [r7, #24]
 80144b8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80144ba:	4b32      	ldr	r3, [pc, #200]	; (8014584 <tcp_input+0x548>)
 80144bc:	681a      	ldr	r2, [r3, #0]
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80144c2:	4a30      	ldr	r2, [pc, #192]	; (8014584 <tcp_input+0x548>)
 80144c4:	697b      	ldr	r3, [r7, #20]
 80144c6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80144c8:	6978      	ldr	r0, [r7, #20]
 80144ca:	f000 fa01 	bl	80148d0 <tcp_listen_input>
      }
      pbuf_free(p);
 80144ce:	6878      	ldr	r0, [r7, #4]
 80144d0:	f7fd fcd0 	bl	8011e74 <pbuf_free>
      return;
 80144d4:	e19b      	b.n	801480e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80144d6:	69fb      	ldr	r3, [r7, #28]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	f000 8160 	beq.w	801479e <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80144de:	4b2a      	ldr	r3, [pc, #168]	; (8014588 <tcp_input+0x54c>)
 80144e0:	2200      	movs	r2, #0
 80144e2:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	891a      	ldrh	r2, [r3, #8]
 80144e8:	4b27      	ldr	r3, [pc, #156]	; (8014588 <tcp_input+0x54c>)
 80144ea:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80144ec:	4a26      	ldr	r2, [pc, #152]	; (8014588 <tcp_input+0x54c>)
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80144f2:	4b1b      	ldr	r3, [pc, #108]	; (8014560 <tcp_input+0x524>)
 80144f4:	681b      	ldr	r3, [r3, #0]
 80144f6:	4a24      	ldr	r2, [pc, #144]	; (8014588 <tcp_input+0x54c>)
 80144f8:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80144fa:	4b24      	ldr	r3, [pc, #144]	; (801458c <tcp_input+0x550>)
 80144fc:	2200      	movs	r2, #0
 80144fe:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014500:	4b23      	ldr	r3, [pc, #140]	; (8014590 <tcp_input+0x554>)
 8014502:	2200      	movs	r2, #0
 8014504:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014506:	4b23      	ldr	r3, [pc, #140]	; (8014594 <tcp_input+0x558>)
 8014508:	2200      	movs	r2, #0
 801450a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801450c:	4b22      	ldr	r3, [pc, #136]	; (8014598 <tcp_input+0x55c>)
 801450e:	781b      	ldrb	r3, [r3, #0]
 8014510:	f003 0308 	and.w	r3, r3, #8
 8014514:	2b00      	cmp	r3, #0
 8014516:	d006      	beq.n	8014526 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	7b5b      	ldrb	r3, [r3, #13]
 801451c:	f043 0301 	orr.w	r3, r3, #1
 8014520:	b2da      	uxtb	r2, r3
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014526:	69fb      	ldr	r3, [r7, #28]
 8014528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801452a:	2b00      	cmp	r3, #0
 801452c:	d038      	beq.n	80145a0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801452e:	69f8      	ldr	r0, [r7, #28]
 8014530:	f7ff f858 	bl	80135e4 <tcp_process_refused_data>
 8014534:	4603      	mov	r3, r0
 8014536:	f113 0f0d 	cmn.w	r3, #13
 801453a:	d007      	beq.n	801454c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801453c:	69fb      	ldr	r3, [r7, #28]
 801453e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014540:	2b00      	cmp	r3, #0
 8014542:	d02d      	beq.n	80145a0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014544:	4b15      	ldr	r3, [pc, #84]	; (801459c <tcp_input+0x560>)
 8014546:	881b      	ldrh	r3, [r3, #0]
 8014548:	2b00      	cmp	r3, #0
 801454a:	d029      	beq.n	80145a0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801454c:	69fb      	ldr	r3, [r7, #28]
 801454e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8014550:	2b00      	cmp	r3, #0
 8014552:	f040 8104 	bne.w	801475e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014556:	69f8      	ldr	r0, [r7, #28]
 8014558:	f003 fe16 	bl	8018188 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801455c:	e0ff      	b.n	801475e <tcp_input+0x722>
 801455e:	bf00      	nop
 8014560:	24004b10 	.word	0x24004b10
 8014564:	2400521c 	.word	0x2400521c
 8014568:	0801db58 	.word	0x0801db58
 801456c:	0801dc84 	.word	0x0801dc84
 8014570:	0801dba4 	.word	0x0801dba4
 8014574:	240082dc 	.word	0x240082dc
 8014578:	0801dcb0 	.word	0x0801dcb0
 801457c:	240082ec 	.word	0x240082ec
 8014580:	0801dcdc 	.word	0x0801dcdc
 8014584:	240082e4 	.word	0x240082e4
 8014588:	24004b00 	.word	0x24004b00
 801458c:	24004b30 	.word	0x24004b30
 8014590:	24004b2d 	.word	0x24004b2d
 8014594:	24004b28 	.word	0x24004b28
 8014598:	24004b2c 	.word	0x24004b2c
 801459c:	24004b2a 	.word	0x24004b2a
      }
    }
    tcp_input_pcb = pcb;
 80145a0:	4a9c      	ldr	r2, [pc, #624]	; (8014814 <tcp_input+0x7d8>)
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80145a6:	69f8      	ldr	r0, [r7, #28]
 80145a8:	f000 fb0a 	bl	8014bc0 <tcp_process>
 80145ac:	4603      	mov	r3, r0
 80145ae:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80145b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80145b4:	f113 0f0d 	cmn.w	r3, #13
 80145b8:	f000 80d3 	beq.w	8014762 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 80145bc:	4b96      	ldr	r3, [pc, #600]	; (8014818 <tcp_input+0x7dc>)
 80145be:	781b      	ldrb	r3, [r3, #0]
 80145c0:	f003 0308 	and.w	r3, r3, #8
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d015      	beq.n	80145f4 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80145c8:	69fb      	ldr	r3, [r7, #28]
 80145ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d008      	beq.n	80145e4 <tcp_input+0x5a8>
 80145d2:	69fb      	ldr	r3, [r7, #28]
 80145d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145d8:	69fa      	ldr	r2, [r7, #28]
 80145da:	6912      	ldr	r2, [r2, #16]
 80145dc:	f06f 010d 	mvn.w	r1, #13
 80145e0:	4610      	mov	r0, r2
 80145e2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80145e4:	69f9      	ldr	r1, [r7, #28]
 80145e6:	488d      	ldr	r0, [pc, #564]	; (801481c <tcp_input+0x7e0>)
 80145e8:	f7ff fbb0 	bl	8013d4c <tcp_pcb_remove>
        tcp_free(pcb);
 80145ec:	69f8      	ldr	r0, [r7, #28]
 80145ee:	f7fd fefd 	bl	80123ec <tcp_free>
 80145f2:	e0c1      	b.n	8014778 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80145f4:	2300      	movs	r3, #0
 80145f6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80145f8:	4b89      	ldr	r3, [pc, #548]	; (8014820 <tcp_input+0x7e4>)
 80145fa:	881b      	ldrh	r3, [r3, #0]
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d01d      	beq.n	801463c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014600:	4b87      	ldr	r3, [pc, #540]	; (8014820 <tcp_input+0x7e4>)
 8014602:	881b      	ldrh	r3, [r3, #0]
 8014604:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014606:	69fb      	ldr	r3, [r7, #28]
 8014608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801460c:	2b00      	cmp	r3, #0
 801460e:	d00a      	beq.n	8014626 <tcp_input+0x5ea>
 8014610:	69fb      	ldr	r3, [r7, #28]
 8014612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8014616:	69fa      	ldr	r2, [r7, #28]
 8014618:	6910      	ldr	r0, [r2, #16]
 801461a:	89fa      	ldrh	r2, [r7, #14]
 801461c:	69f9      	ldr	r1, [r7, #28]
 801461e:	4798      	blx	r3
 8014620:	4603      	mov	r3, r0
 8014622:	74fb      	strb	r3, [r7, #19]
 8014624:	e001      	b.n	801462a <tcp_input+0x5ee>
 8014626:	2300      	movs	r3, #0
 8014628:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801462a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801462e:	f113 0f0d 	cmn.w	r3, #13
 8014632:	f000 8098 	beq.w	8014766 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014636:	4b7a      	ldr	r3, [pc, #488]	; (8014820 <tcp_input+0x7e4>)
 8014638:	2200      	movs	r2, #0
 801463a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801463c:	69f8      	ldr	r0, [r7, #28]
 801463e:	f000 f907 	bl	8014850 <tcp_input_delayed_close>
 8014642:	4603      	mov	r3, r0
 8014644:	2b00      	cmp	r3, #0
 8014646:	f040 8090 	bne.w	801476a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801464a:	4b76      	ldr	r3, [pc, #472]	; (8014824 <tcp_input+0x7e8>)
 801464c:	681b      	ldr	r3, [r3, #0]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d041      	beq.n	80146d6 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014652:	69fb      	ldr	r3, [r7, #28]
 8014654:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014656:	2b00      	cmp	r3, #0
 8014658:	d006      	beq.n	8014668 <tcp_input+0x62c>
 801465a:	4b73      	ldr	r3, [pc, #460]	; (8014828 <tcp_input+0x7ec>)
 801465c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8014660:	4972      	ldr	r1, [pc, #456]	; (801482c <tcp_input+0x7f0>)
 8014662:	4873      	ldr	r0, [pc, #460]	; (8014830 <tcp_input+0x7f4>)
 8014664:	f007 f83a 	bl	801b6dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014668:	69fb      	ldr	r3, [r7, #28]
 801466a:	8b5b      	ldrh	r3, [r3, #26]
 801466c:	f003 0310 	and.w	r3, r3, #16
 8014670:	2b00      	cmp	r3, #0
 8014672:	d008      	beq.n	8014686 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014674:	4b6b      	ldr	r3, [pc, #428]	; (8014824 <tcp_input+0x7e8>)
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	4618      	mov	r0, r3
 801467a:	f7fd fbfb 	bl	8011e74 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801467e:	69f8      	ldr	r0, [r7, #28]
 8014680:	f7fe f99c 	bl	80129bc <tcp_abort>
            goto aborted;
 8014684:	e078      	b.n	8014778 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014686:	69fb      	ldr	r3, [r7, #28]
 8014688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801468c:	2b00      	cmp	r3, #0
 801468e:	d00c      	beq.n	80146aa <tcp_input+0x66e>
 8014690:	69fb      	ldr	r3, [r7, #28]
 8014692:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	6918      	ldr	r0, [r3, #16]
 801469a:	4b62      	ldr	r3, [pc, #392]	; (8014824 <tcp_input+0x7e8>)
 801469c:	681a      	ldr	r2, [r3, #0]
 801469e:	2300      	movs	r3, #0
 80146a0:	69f9      	ldr	r1, [r7, #28]
 80146a2:	47a0      	blx	r4
 80146a4:	4603      	mov	r3, r0
 80146a6:	74fb      	strb	r3, [r7, #19]
 80146a8:	e008      	b.n	80146bc <tcp_input+0x680>
 80146aa:	4b5e      	ldr	r3, [pc, #376]	; (8014824 <tcp_input+0x7e8>)
 80146ac:	681a      	ldr	r2, [r3, #0]
 80146ae:	2300      	movs	r3, #0
 80146b0:	69f9      	ldr	r1, [r7, #28]
 80146b2:	2000      	movs	r0, #0
 80146b4:	f7ff f88a 	bl	80137cc <tcp_recv_null>
 80146b8:	4603      	mov	r3, r0
 80146ba:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80146bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146c0:	f113 0f0d 	cmn.w	r3, #13
 80146c4:	d053      	beq.n	801476e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80146c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d003      	beq.n	80146d6 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80146ce:	4b55      	ldr	r3, [pc, #340]	; (8014824 <tcp_input+0x7e8>)
 80146d0:	681a      	ldr	r2, [r3, #0]
 80146d2:	69fb      	ldr	r3, [r7, #28]
 80146d4:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80146d6:	4b50      	ldr	r3, [pc, #320]	; (8014818 <tcp_input+0x7dc>)
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	f003 0320 	and.w	r3, r3, #32
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d030      	beq.n	8014744 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80146e2:	69fb      	ldr	r3, [r7, #28]
 80146e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d009      	beq.n	80146fe <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80146ea:	69fb      	ldr	r3, [r7, #28]
 80146ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146ee:	7b5a      	ldrb	r2, [r3, #13]
 80146f0:	69fb      	ldr	r3, [r7, #28]
 80146f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80146f4:	f042 0220 	orr.w	r2, r2, #32
 80146f8:	b2d2      	uxtb	r2, r2
 80146fa:	735a      	strb	r2, [r3, #13]
 80146fc:	e022      	b.n	8014744 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80146fe:	69fb      	ldr	r3, [r7, #28]
 8014700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014702:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014706:	d005      	beq.n	8014714 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8014708:	69fb      	ldr	r3, [r7, #28]
 801470a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801470c:	3301      	adds	r3, #1
 801470e:	b29a      	uxth	r2, r3
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014714:	69fb      	ldr	r3, [r7, #28]
 8014716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801471a:	2b00      	cmp	r3, #0
 801471c:	d00b      	beq.n	8014736 <tcp_input+0x6fa>
 801471e:	69fb      	ldr	r3, [r7, #28]
 8014720:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014724:	69fb      	ldr	r3, [r7, #28]
 8014726:	6918      	ldr	r0, [r3, #16]
 8014728:	2300      	movs	r3, #0
 801472a:	2200      	movs	r2, #0
 801472c:	69f9      	ldr	r1, [r7, #28]
 801472e:	47a0      	blx	r4
 8014730:	4603      	mov	r3, r0
 8014732:	74fb      	strb	r3, [r7, #19]
 8014734:	e001      	b.n	801473a <tcp_input+0x6fe>
 8014736:	2300      	movs	r3, #0
 8014738:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801473a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801473e:	f113 0f0d 	cmn.w	r3, #13
 8014742:	d016      	beq.n	8014772 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014744:	4b33      	ldr	r3, [pc, #204]	; (8014814 <tcp_input+0x7d8>)
 8014746:	2200      	movs	r2, #0
 8014748:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801474a:	69f8      	ldr	r0, [r7, #28]
 801474c:	f000 f880 	bl	8014850 <tcp_input_delayed_close>
 8014750:	4603      	mov	r3, r0
 8014752:	2b00      	cmp	r3, #0
 8014754:	d10f      	bne.n	8014776 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014756:	69f8      	ldr	r0, [r7, #28]
 8014758:	f002 ff10 	bl	801757c <tcp_output>
 801475c:	e00c      	b.n	8014778 <tcp_input+0x73c>
        goto aborted;
 801475e:	bf00      	nop
 8014760:	e00a      	b.n	8014778 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014762:	bf00      	nop
 8014764:	e008      	b.n	8014778 <tcp_input+0x73c>
              goto aborted;
 8014766:	bf00      	nop
 8014768:	e006      	b.n	8014778 <tcp_input+0x73c>
          goto aborted;
 801476a:	bf00      	nop
 801476c:	e004      	b.n	8014778 <tcp_input+0x73c>
            goto aborted;
 801476e:	bf00      	nop
 8014770:	e002      	b.n	8014778 <tcp_input+0x73c>
              goto aborted;
 8014772:	bf00      	nop
 8014774:	e000      	b.n	8014778 <tcp_input+0x73c>
          goto aborted;
 8014776:	bf00      	nop
    tcp_input_pcb = NULL;
 8014778:	4b26      	ldr	r3, [pc, #152]	; (8014814 <tcp_input+0x7d8>)
 801477a:	2200      	movs	r2, #0
 801477c:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801477e:	4b29      	ldr	r3, [pc, #164]	; (8014824 <tcp_input+0x7e8>)
 8014780:	2200      	movs	r2, #0
 8014782:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014784:	4b2b      	ldr	r3, [pc, #172]	; (8014834 <tcp_input+0x7f8>)
 8014786:	685b      	ldr	r3, [r3, #4]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d03f      	beq.n	801480c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 801478c:	4b29      	ldr	r3, [pc, #164]	; (8014834 <tcp_input+0x7f8>)
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	4618      	mov	r0, r3
 8014792:	f7fd fb6f 	bl	8011e74 <pbuf_free>
      inseg.p = NULL;
 8014796:	4b27      	ldr	r3, [pc, #156]	; (8014834 <tcp_input+0x7f8>)
 8014798:	2200      	movs	r2, #0
 801479a:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801479c:	e036      	b.n	801480c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801479e:	4b26      	ldr	r3, [pc, #152]	; (8014838 <tcp_input+0x7fc>)
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	899b      	ldrh	r3, [r3, #12]
 80147a4:	b29b      	uxth	r3, r3
 80147a6:	4618      	mov	r0, r3
 80147a8:	f7fb feba 	bl	8010520 <lwip_htons>
 80147ac:	4603      	mov	r3, r0
 80147ae:	b2db      	uxtb	r3, r3
 80147b0:	f003 0304 	and.w	r3, r3, #4
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d118      	bne.n	80147ea <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80147b8:	4b20      	ldr	r3, [pc, #128]	; (801483c <tcp_input+0x800>)
 80147ba:	6819      	ldr	r1, [r3, #0]
 80147bc:	4b20      	ldr	r3, [pc, #128]	; (8014840 <tcp_input+0x804>)
 80147be:	881b      	ldrh	r3, [r3, #0]
 80147c0:	461a      	mov	r2, r3
 80147c2:	4b20      	ldr	r3, [pc, #128]	; (8014844 <tcp_input+0x808>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80147c8:	4b1b      	ldr	r3, [pc, #108]	; (8014838 <tcp_input+0x7fc>)
 80147ca:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80147cc:	885b      	ldrh	r3, [r3, #2]
 80147ce:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80147d0:	4a19      	ldr	r2, [pc, #100]	; (8014838 <tcp_input+0x7fc>)
 80147d2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80147d4:	8812      	ldrh	r2, [r2, #0]
 80147d6:	b292      	uxth	r2, r2
 80147d8:	9202      	str	r2, [sp, #8]
 80147da:	9301      	str	r3, [sp, #4]
 80147dc:	4b1a      	ldr	r3, [pc, #104]	; (8014848 <tcp_input+0x80c>)
 80147de:	9300      	str	r3, [sp, #0]
 80147e0:	4b1a      	ldr	r3, [pc, #104]	; (801484c <tcp_input+0x810>)
 80147e2:	4602      	mov	r2, r0
 80147e4:	2000      	movs	r0, #0
 80147e6:	f003 fc7d 	bl	80180e4 <tcp_rst>
    pbuf_free(p);
 80147ea:	6878      	ldr	r0, [r7, #4]
 80147ec:	f7fd fb42 	bl	8011e74 <pbuf_free>
  return;
 80147f0:	e00c      	b.n	801480c <tcp_input+0x7d0>
    goto dropped;
 80147f2:	bf00      	nop
 80147f4:	e006      	b.n	8014804 <tcp_input+0x7c8>
    goto dropped;
 80147f6:	bf00      	nop
 80147f8:	e004      	b.n	8014804 <tcp_input+0x7c8>
    goto dropped;
 80147fa:	bf00      	nop
 80147fc:	e002      	b.n	8014804 <tcp_input+0x7c8>
      goto dropped;
 80147fe:	bf00      	nop
 8014800:	e000      	b.n	8014804 <tcp_input+0x7c8>
      goto dropped;
 8014802:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014804:	6878      	ldr	r0, [r7, #4]
 8014806:	f7fd fb35 	bl	8011e74 <pbuf_free>
 801480a:	e000      	b.n	801480e <tcp_input+0x7d2>
  return;
 801480c:	bf00      	nop
}
 801480e:	3724      	adds	r7, #36	; 0x24
 8014810:	46bd      	mov	sp, r7
 8014812:	bd90      	pop	{r4, r7, pc}
 8014814:	240082f0 	.word	0x240082f0
 8014818:	24004b2d 	.word	0x24004b2d
 801481c:	240082dc 	.word	0x240082dc
 8014820:	24004b28 	.word	0x24004b28
 8014824:	24004b30 	.word	0x24004b30
 8014828:	0801db58 	.word	0x0801db58
 801482c:	0801dd0c 	.word	0x0801dd0c
 8014830:	0801dba4 	.word	0x0801dba4
 8014834:	24004b00 	.word	0x24004b00
 8014838:	24004b10 	.word	0x24004b10
 801483c:	24004b24 	.word	0x24004b24
 8014840:	24004b2a 	.word	0x24004b2a
 8014844:	24004b20 	.word	0x24004b20
 8014848:	2400522c 	.word	0x2400522c
 801484c:	24005230 	.word	0x24005230

08014850 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b082      	sub	sp, #8
 8014854:	af00      	add	r7, sp, #0
 8014856:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d106      	bne.n	801486c <tcp_input_delayed_close+0x1c>
 801485e:	4b17      	ldr	r3, [pc, #92]	; (80148bc <tcp_input_delayed_close+0x6c>)
 8014860:	f240 225a 	movw	r2, #602	; 0x25a
 8014864:	4916      	ldr	r1, [pc, #88]	; (80148c0 <tcp_input_delayed_close+0x70>)
 8014866:	4817      	ldr	r0, [pc, #92]	; (80148c4 <tcp_input_delayed_close+0x74>)
 8014868:	f006 ff38 	bl	801b6dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 801486c:	4b16      	ldr	r3, [pc, #88]	; (80148c8 <tcp_input_delayed_close+0x78>)
 801486e:	781b      	ldrb	r3, [r3, #0]
 8014870:	f003 0310 	and.w	r3, r3, #16
 8014874:	2b00      	cmp	r3, #0
 8014876:	d01c      	beq.n	80148b2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	8b5b      	ldrh	r3, [r3, #26]
 801487c:	f003 0310 	and.w	r3, r3, #16
 8014880:	2b00      	cmp	r3, #0
 8014882:	d10d      	bne.n	80148a0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801488a:	2b00      	cmp	r3, #0
 801488c:	d008      	beq.n	80148a0 <tcp_input_delayed_close+0x50>
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014894:	687a      	ldr	r2, [r7, #4]
 8014896:	6912      	ldr	r2, [r2, #16]
 8014898:	f06f 010e 	mvn.w	r1, #14
 801489c:	4610      	mov	r0, r2
 801489e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80148a0:	6879      	ldr	r1, [r7, #4]
 80148a2:	480a      	ldr	r0, [pc, #40]	; (80148cc <tcp_input_delayed_close+0x7c>)
 80148a4:	f7ff fa52 	bl	8013d4c <tcp_pcb_remove>
    tcp_free(pcb);
 80148a8:	6878      	ldr	r0, [r7, #4]
 80148aa:	f7fd fd9f 	bl	80123ec <tcp_free>
    return 1;
 80148ae:	2301      	movs	r3, #1
 80148b0:	e000      	b.n	80148b4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80148b2:	2300      	movs	r3, #0
}
 80148b4:	4618      	mov	r0, r3
 80148b6:	3708      	adds	r7, #8
 80148b8:	46bd      	mov	sp, r7
 80148ba:	bd80      	pop	{r7, pc}
 80148bc:	0801db58 	.word	0x0801db58
 80148c0:	0801dd28 	.word	0x0801dd28
 80148c4:	0801dba4 	.word	0x0801dba4
 80148c8:	24004b2d 	.word	0x24004b2d
 80148cc:	240082dc 	.word	0x240082dc

080148d0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80148d0:	b590      	push	{r4, r7, lr}
 80148d2:	b08b      	sub	sp, #44	; 0x2c
 80148d4:	af04      	add	r7, sp, #16
 80148d6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80148d8:	4b6f      	ldr	r3, [pc, #444]	; (8014a98 <tcp_listen_input+0x1c8>)
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	f003 0304 	and.w	r3, r3, #4
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	f040 80d2 	bne.w	8014a8a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d106      	bne.n	80148fa <tcp_listen_input+0x2a>
 80148ec:	4b6b      	ldr	r3, [pc, #428]	; (8014a9c <tcp_listen_input+0x1cc>)
 80148ee:	f240 2281 	movw	r2, #641	; 0x281
 80148f2:	496b      	ldr	r1, [pc, #428]	; (8014aa0 <tcp_listen_input+0x1d0>)
 80148f4:	486b      	ldr	r0, [pc, #428]	; (8014aa4 <tcp_listen_input+0x1d4>)
 80148f6:	f006 fef1 	bl	801b6dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80148fa:	4b67      	ldr	r3, [pc, #412]	; (8014a98 <tcp_listen_input+0x1c8>)
 80148fc:	781b      	ldrb	r3, [r3, #0]
 80148fe:	f003 0310 	and.w	r3, r3, #16
 8014902:	2b00      	cmp	r3, #0
 8014904:	d019      	beq.n	801493a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014906:	4b68      	ldr	r3, [pc, #416]	; (8014aa8 <tcp_listen_input+0x1d8>)
 8014908:	6819      	ldr	r1, [r3, #0]
 801490a:	4b68      	ldr	r3, [pc, #416]	; (8014aac <tcp_listen_input+0x1dc>)
 801490c:	881b      	ldrh	r3, [r3, #0]
 801490e:	461a      	mov	r2, r3
 8014910:	4b67      	ldr	r3, [pc, #412]	; (8014ab0 <tcp_listen_input+0x1e0>)
 8014912:	681b      	ldr	r3, [r3, #0]
 8014914:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014916:	4b67      	ldr	r3, [pc, #412]	; (8014ab4 <tcp_listen_input+0x1e4>)
 8014918:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801491a:	885b      	ldrh	r3, [r3, #2]
 801491c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801491e:	4a65      	ldr	r2, [pc, #404]	; (8014ab4 <tcp_listen_input+0x1e4>)
 8014920:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014922:	8812      	ldrh	r2, [r2, #0]
 8014924:	b292      	uxth	r2, r2
 8014926:	9202      	str	r2, [sp, #8]
 8014928:	9301      	str	r3, [sp, #4]
 801492a:	4b63      	ldr	r3, [pc, #396]	; (8014ab8 <tcp_listen_input+0x1e8>)
 801492c:	9300      	str	r3, [sp, #0]
 801492e:	4b63      	ldr	r3, [pc, #396]	; (8014abc <tcp_listen_input+0x1ec>)
 8014930:	4602      	mov	r2, r0
 8014932:	6878      	ldr	r0, [r7, #4]
 8014934:	f003 fbd6 	bl	80180e4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014938:	e0a9      	b.n	8014a8e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801493a:	4b57      	ldr	r3, [pc, #348]	; (8014a98 <tcp_listen_input+0x1c8>)
 801493c:	781b      	ldrb	r3, [r3, #0]
 801493e:	f003 0302 	and.w	r3, r3, #2
 8014942:	2b00      	cmp	r3, #0
 8014944:	f000 80a3 	beq.w	8014a8e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	7d5b      	ldrb	r3, [r3, #21]
 801494c:	4618      	mov	r0, r3
 801494e:	f7ff f861 	bl	8013a14 <tcp_alloc>
 8014952:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014954:	697b      	ldr	r3, [r7, #20]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d111      	bne.n	801497e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	699b      	ldr	r3, [r3, #24]
 801495e:	2b00      	cmp	r3, #0
 8014960:	d00a      	beq.n	8014978 <tcp_listen_input+0xa8>
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	699b      	ldr	r3, [r3, #24]
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	6910      	ldr	r0, [r2, #16]
 801496a:	f04f 32ff 	mov.w	r2, #4294967295
 801496e:	2100      	movs	r1, #0
 8014970:	4798      	blx	r3
 8014972:	4603      	mov	r3, r0
 8014974:	73bb      	strb	r3, [r7, #14]
      return;
 8014976:	e08b      	b.n	8014a90 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014978:	23f0      	movs	r3, #240	; 0xf0
 801497a:	73bb      	strb	r3, [r7, #14]
      return;
 801497c:	e088      	b.n	8014a90 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801497e:	4b50      	ldr	r3, [pc, #320]	; (8014ac0 <tcp_listen_input+0x1f0>)
 8014980:	695a      	ldr	r2, [r3, #20]
 8014982:	697b      	ldr	r3, [r7, #20]
 8014984:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014986:	4b4e      	ldr	r3, [pc, #312]	; (8014ac0 <tcp_listen_input+0x1f0>)
 8014988:	691a      	ldr	r2, [r3, #16]
 801498a:	697b      	ldr	r3, [r7, #20]
 801498c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	8ada      	ldrh	r2, [r3, #22]
 8014992:	697b      	ldr	r3, [r7, #20]
 8014994:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014996:	4b47      	ldr	r3, [pc, #284]	; (8014ab4 <tcp_listen_input+0x1e4>)
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	881b      	ldrh	r3, [r3, #0]
 801499c:	b29a      	uxth	r2, r3
 801499e:	697b      	ldr	r3, [r7, #20]
 80149a0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80149a2:	697b      	ldr	r3, [r7, #20]
 80149a4:	2203      	movs	r2, #3
 80149a6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80149a8:	4b41      	ldr	r3, [pc, #260]	; (8014ab0 <tcp_listen_input+0x1e0>)
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	1c5a      	adds	r2, r3, #1
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80149b2:	697b      	ldr	r3, [r7, #20]
 80149b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80149b6:	697b      	ldr	r3, [r7, #20]
 80149b8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80149ba:	6978      	ldr	r0, [r7, #20]
 80149bc:	f7ff fa5a 	bl	8013e74 <tcp_next_iss>
 80149c0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	693a      	ldr	r2, [r7, #16]
 80149c6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80149c8:	697b      	ldr	r3, [r7, #20]
 80149ca:	693a      	ldr	r2, [r7, #16]
 80149cc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80149ce:	697b      	ldr	r3, [r7, #20]
 80149d0:	693a      	ldr	r2, [r7, #16]
 80149d2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80149d4:	697b      	ldr	r3, [r7, #20]
 80149d6:	693a      	ldr	r2, [r7, #16]
 80149d8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80149da:	4b35      	ldr	r3, [pc, #212]	; (8014ab0 <tcp_listen_input+0x1e0>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	1e5a      	subs	r2, r3, #1
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	691a      	ldr	r2, [r3, #16]
 80149e8:	697b      	ldr	r3, [r7, #20]
 80149ea:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80149ec:	697b      	ldr	r3, [r7, #20]
 80149ee:	687a      	ldr	r2, [r7, #4]
 80149f0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80149f2:	687b      	ldr	r3, [r7, #4]
 80149f4:	7a5b      	ldrb	r3, [r3, #9]
 80149f6:	f003 030c 	and.w	r3, r3, #12
 80149fa:	b2da      	uxtb	r2, r3
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	7a1a      	ldrb	r2, [r3, #8]
 8014a04:	697b      	ldr	r3, [r7, #20]
 8014a06:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014a08:	4b2e      	ldr	r3, [pc, #184]	; (8014ac4 <tcp_listen_input+0x1f4>)
 8014a0a:	681a      	ldr	r2, [r3, #0]
 8014a0c:	697b      	ldr	r3, [r7, #20]
 8014a0e:	60da      	str	r2, [r3, #12]
 8014a10:	4a2c      	ldr	r2, [pc, #176]	; (8014ac4 <tcp_listen_input+0x1f4>)
 8014a12:	697b      	ldr	r3, [r7, #20]
 8014a14:	6013      	str	r3, [r2, #0]
 8014a16:	f003 fd27 	bl	8018468 <tcp_timer_needed>
 8014a1a:	4b2b      	ldr	r3, [pc, #172]	; (8014ac8 <tcp_listen_input+0x1f8>)
 8014a1c:	2201      	movs	r2, #1
 8014a1e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014a20:	6978      	ldr	r0, [r7, #20]
 8014a22:	f001 fd8d 	bl	8016540 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014a26:	4b23      	ldr	r3, [pc, #140]	; (8014ab4 <tcp_listen_input+0x1e4>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	89db      	ldrh	r3, [r3, #14]
 8014a2c:	b29a      	uxth	r2, r3
 8014a2e:	697b      	ldr	r3, [r7, #20]
 8014a30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014a34:	697b      	ldr	r3, [r7, #20]
 8014a36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014a40:	697b      	ldr	r3, [r7, #20]
 8014a42:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	3304      	adds	r3, #4
 8014a48:	4618      	mov	r0, r3
 8014a4a:	f005 f941 	bl	8019cd0 <ip4_route>
 8014a4e:	4601      	mov	r1, r0
 8014a50:	697b      	ldr	r3, [r7, #20]
 8014a52:	3304      	adds	r3, #4
 8014a54:	461a      	mov	r2, r3
 8014a56:	4620      	mov	r0, r4
 8014a58:	f7ff fa32 	bl	8013ec0 <tcp_eff_send_mss_netif>
 8014a5c:	4603      	mov	r3, r0
 8014a5e:	461a      	mov	r2, r3
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014a64:	2112      	movs	r1, #18
 8014a66:	6978      	ldr	r0, [r7, #20]
 8014a68:	f002 fc9a 	bl	80173a0 <tcp_enqueue_flags>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d004      	beq.n	8014a82 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014a78:	2100      	movs	r1, #0
 8014a7a:	6978      	ldr	r0, [r7, #20]
 8014a7c:	f7fd fee0 	bl	8012840 <tcp_abandon>
      return;
 8014a80:	e006      	b.n	8014a90 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014a82:	6978      	ldr	r0, [r7, #20]
 8014a84:	f002 fd7a 	bl	801757c <tcp_output>
  return;
 8014a88:	e001      	b.n	8014a8e <tcp_listen_input+0x1be>
    return;
 8014a8a:	bf00      	nop
 8014a8c:	e000      	b.n	8014a90 <tcp_listen_input+0x1c0>
  return;
 8014a8e:	bf00      	nop
}
 8014a90:	371c      	adds	r7, #28
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd90      	pop	{r4, r7, pc}
 8014a96:	bf00      	nop
 8014a98:	24004b2c 	.word	0x24004b2c
 8014a9c:	0801db58 	.word	0x0801db58
 8014aa0:	0801dd50 	.word	0x0801dd50
 8014aa4:	0801dba4 	.word	0x0801dba4
 8014aa8:	24004b24 	.word	0x24004b24
 8014aac:	24004b2a 	.word	0x24004b2a
 8014ab0:	24004b20 	.word	0x24004b20
 8014ab4:	24004b10 	.word	0x24004b10
 8014ab8:	2400522c 	.word	0x2400522c
 8014abc:	24005230 	.word	0x24005230
 8014ac0:	2400521c 	.word	0x2400521c
 8014ac4:	240082dc 	.word	0x240082dc
 8014ac8:	240082d8 	.word	0x240082d8

08014acc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af04      	add	r7, sp, #16
 8014ad2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014ad4:	4b2f      	ldr	r3, [pc, #188]	; (8014b94 <tcp_timewait_input+0xc8>)
 8014ad6:	781b      	ldrb	r3, [r3, #0]
 8014ad8:	f003 0304 	and.w	r3, r3, #4
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d153      	bne.n	8014b88 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d106      	bne.n	8014af4 <tcp_timewait_input+0x28>
 8014ae6:	4b2c      	ldr	r3, [pc, #176]	; (8014b98 <tcp_timewait_input+0xcc>)
 8014ae8:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014aec:	492b      	ldr	r1, [pc, #172]	; (8014b9c <tcp_timewait_input+0xd0>)
 8014aee:	482c      	ldr	r0, [pc, #176]	; (8014ba0 <tcp_timewait_input+0xd4>)
 8014af0:	f006 fdf4 	bl	801b6dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014af4:	4b27      	ldr	r3, [pc, #156]	; (8014b94 <tcp_timewait_input+0xc8>)
 8014af6:	781b      	ldrb	r3, [r3, #0]
 8014af8:	f003 0302 	and.w	r3, r3, #2
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d02a      	beq.n	8014b56 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8014b00:	4b28      	ldr	r3, [pc, #160]	; (8014ba4 <tcp_timewait_input+0xd8>)
 8014b02:	681a      	ldr	r2, [r3, #0]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b08:	1ad3      	subs	r3, r2, r3
 8014b0a:	2b00      	cmp	r3, #0
 8014b0c:	db2d      	blt.n	8014b6a <tcp_timewait_input+0x9e>
 8014b0e:	4b25      	ldr	r3, [pc, #148]	; (8014ba4 <tcp_timewait_input+0xd8>)
 8014b10:	681a      	ldr	r2, [r3, #0]
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b16:	6879      	ldr	r1, [r7, #4]
 8014b18:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b1a:	440b      	add	r3, r1
 8014b1c:	1ad3      	subs	r3, r2, r3
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	dc23      	bgt.n	8014b6a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b22:	4b21      	ldr	r3, [pc, #132]	; (8014ba8 <tcp_timewait_input+0xdc>)
 8014b24:	6819      	ldr	r1, [r3, #0]
 8014b26:	4b21      	ldr	r3, [pc, #132]	; (8014bac <tcp_timewait_input+0xe0>)
 8014b28:	881b      	ldrh	r3, [r3, #0]
 8014b2a:	461a      	mov	r2, r3
 8014b2c:	4b1d      	ldr	r3, [pc, #116]	; (8014ba4 <tcp_timewait_input+0xd8>)
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b32:	4b1f      	ldr	r3, [pc, #124]	; (8014bb0 <tcp_timewait_input+0xe4>)
 8014b34:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b36:	885b      	ldrh	r3, [r3, #2]
 8014b38:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014b3a:	4a1d      	ldr	r2, [pc, #116]	; (8014bb0 <tcp_timewait_input+0xe4>)
 8014b3c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014b3e:	8812      	ldrh	r2, [r2, #0]
 8014b40:	b292      	uxth	r2, r2
 8014b42:	9202      	str	r2, [sp, #8]
 8014b44:	9301      	str	r3, [sp, #4]
 8014b46:	4b1b      	ldr	r3, [pc, #108]	; (8014bb4 <tcp_timewait_input+0xe8>)
 8014b48:	9300      	str	r3, [sp, #0]
 8014b4a:	4b1b      	ldr	r3, [pc, #108]	; (8014bb8 <tcp_timewait_input+0xec>)
 8014b4c:	4602      	mov	r2, r0
 8014b4e:	6878      	ldr	r0, [r7, #4]
 8014b50:	f003 fac8 	bl	80180e4 <tcp_rst>
      return;
 8014b54:	e01b      	b.n	8014b8e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014b56:	4b0f      	ldr	r3, [pc, #60]	; (8014b94 <tcp_timewait_input+0xc8>)
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	f003 0301 	and.w	r3, r3, #1
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d003      	beq.n	8014b6a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014b62:	4b16      	ldr	r3, [pc, #88]	; (8014bbc <tcp_timewait_input+0xf0>)
 8014b64:	681a      	ldr	r2, [r3, #0]
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8014b6a:	4b10      	ldr	r3, [pc, #64]	; (8014bac <tcp_timewait_input+0xe0>)
 8014b6c:	881b      	ldrh	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d00c      	beq.n	8014b8c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	8b5b      	ldrh	r3, [r3, #26]
 8014b76:	f043 0302 	orr.w	r3, r3, #2
 8014b7a:	b29a      	uxth	r2, r3
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014b80:	6878      	ldr	r0, [r7, #4]
 8014b82:	f002 fcfb 	bl	801757c <tcp_output>
  }
  return;
 8014b86:	e001      	b.n	8014b8c <tcp_timewait_input+0xc0>
    return;
 8014b88:	bf00      	nop
 8014b8a:	e000      	b.n	8014b8e <tcp_timewait_input+0xc2>
  return;
 8014b8c:	bf00      	nop
}
 8014b8e:	3708      	adds	r7, #8
 8014b90:	46bd      	mov	sp, r7
 8014b92:	bd80      	pop	{r7, pc}
 8014b94:	24004b2c 	.word	0x24004b2c
 8014b98:	0801db58 	.word	0x0801db58
 8014b9c:	0801dd70 	.word	0x0801dd70
 8014ba0:	0801dba4 	.word	0x0801dba4
 8014ba4:	24004b20 	.word	0x24004b20
 8014ba8:	24004b24 	.word	0x24004b24
 8014bac:	24004b2a 	.word	0x24004b2a
 8014bb0:	24004b10 	.word	0x24004b10
 8014bb4:	2400522c 	.word	0x2400522c
 8014bb8:	24005230 	.word	0x24005230
 8014bbc:	240082e0 	.word	0x240082e0

08014bc0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014bc0:	b590      	push	{r4, r7, lr}
 8014bc2:	b08d      	sub	sp, #52	; 0x34
 8014bc4:	af04      	add	r7, sp, #16
 8014bc6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d106      	bne.n	8014be4 <tcp_process+0x24>
 8014bd6:	4ba5      	ldr	r3, [pc, #660]	; (8014e6c <tcp_process+0x2ac>)
 8014bd8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8014bdc:	49a4      	ldr	r1, [pc, #656]	; (8014e70 <tcp_process+0x2b0>)
 8014bde:	48a5      	ldr	r0, [pc, #660]	; (8014e74 <tcp_process+0x2b4>)
 8014be0:	f006 fd7c 	bl	801b6dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8014be4:	4ba4      	ldr	r3, [pc, #656]	; (8014e78 <tcp_process+0x2b8>)
 8014be6:	781b      	ldrb	r3, [r3, #0]
 8014be8:	f003 0304 	and.w	r3, r3, #4
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d04e      	beq.n	8014c8e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014bf0:	687b      	ldr	r3, [r7, #4]
 8014bf2:	7d1b      	ldrb	r3, [r3, #20]
 8014bf4:	2b02      	cmp	r3, #2
 8014bf6:	d108      	bne.n	8014c0a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014bfc:	4b9f      	ldr	r3, [pc, #636]	; (8014e7c <tcp_process+0x2bc>)
 8014bfe:	681b      	ldr	r3, [r3, #0]
 8014c00:	429a      	cmp	r2, r3
 8014c02:	d123      	bne.n	8014c4c <tcp_process+0x8c>
        acceptable = 1;
 8014c04:	2301      	movs	r3, #1
 8014c06:	76fb      	strb	r3, [r7, #27]
 8014c08:	e020      	b.n	8014c4c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014c0a:	687b      	ldr	r3, [r7, #4]
 8014c0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014c0e:	4b9c      	ldr	r3, [pc, #624]	; (8014e80 <tcp_process+0x2c0>)
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	429a      	cmp	r2, r3
 8014c14:	d102      	bne.n	8014c1c <tcp_process+0x5c>
        acceptable = 1;
 8014c16:	2301      	movs	r3, #1
 8014c18:	76fb      	strb	r3, [r7, #27]
 8014c1a:	e017      	b.n	8014c4c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014c1c:	4b98      	ldr	r3, [pc, #608]	; (8014e80 <tcp_process+0x2c0>)
 8014c1e:	681a      	ldr	r2, [r3, #0]
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c24:	1ad3      	subs	r3, r2, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	db10      	blt.n	8014c4c <tcp_process+0x8c>
 8014c2a:	4b95      	ldr	r3, [pc, #596]	; (8014e80 <tcp_process+0x2c0>)
 8014c2c:	681a      	ldr	r2, [r3, #0]
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c32:	6879      	ldr	r1, [r7, #4]
 8014c34:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c36:	440b      	add	r3, r1
 8014c38:	1ad3      	subs	r3, r2, r3
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	dc06      	bgt.n	8014c4c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	8b5b      	ldrh	r3, [r3, #26]
 8014c42:	f043 0302 	orr.w	r3, r3, #2
 8014c46:	b29a      	uxth	r2, r3
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014c4c:	7efb      	ldrb	r3, [r7, #27]
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d01b      	beq.n	8014c8a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	7d1b      	ldrb	r3, [r3, #20]
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	d106      	bne.n	8014c68 <tcp_process+0xa8>
 8014c5a:	4b84      	ldr	r3, [pc, #528]	; (8014e6c <tcp_process+0x2ac>)
 8014c5c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014c60:	4988      	ldr	r1, [pc, #544]	; (8014e84 <tcp_process+0x2c4>)
 8014c62:	4884      	ldr	r0, [pc, #528]	; (8014e74 <tcp_process+0x2b4>)
 8014c64:	f006 fd3a 	bl	801b6dc <iprintf>
      recv_flags |= TF_RESET;
 8014c68:	4b87      	ldr	r3, [pc, #540]	; (8014e88 <tcp_process+0x2c8>)
 8014c6a:	781b      	ldrb	r3, [r3, #0]
 8014c6c:	f043 0308 	orr.w	r3, r3, #8
 8014c70:	b2da      	uxtb	r2, r3
 8014c72:	4b85      	ldr	r3, [pc, #532]	; (8014e88 <tcp_process+0x2c8>)
 8014c74:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	8b5b      	ldrh	r3, [r3, #26]
 8014c7a:	f023 0301 	bic.w	r3, r3, #1
 8014c7e:	b29a      	uxth	r2, r3
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014c84:	f06f 030d 	mvn.w	r3, #13
 8014c88:	e37a      	b.n	8015380 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8014c8a:	2300      	movs	r3, #0
 8014c8c:	e378      	b.n	8015380 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014c8e:	4b7a      	ldr	r3, [pc, #488]	; (8014e78 <tcp_process+0x2b8>)
 8014c90:	781b      	ldrb	r3, [r3, #0]
 8014c92:	f003 0302 	and.w	r3, r3, #2
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d010      	beq.n	8014cbc <tcp_process+0xfc>
 8014c9a:	687b      	ldr	r3, [r7, #4]
 8014c9c:	7d1b      	ldrb	r3, [r3, #20]
 8014c9e:	2b02      	cmp	r3, #2
 8014ca0:	d00c      	beq.n	8014cbc <tcp_process+0xfc>
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	7d1b      	ldrb	r3, [r3, #20]
 8014ca6:	2b03      	cmp	r3, #3
 8014ca8:	d008      	beq.n	8014cbc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	8b5b      	ldrh	r3, [r3, #26]
 8014cae:	f043 0302 	orr.w	r3, r3, #2
 8014cb2:	b29a      	uxth	r2, r3
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8014cb8:	2300      	movs	r3, #0
 8014cba:	e361      	b.n	8015380 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	8b5b      	ldrh	r3, [r3, #26]
 8014cc0:	f003 0310 	and.w	r3, r3, #16
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d103      	bne.n	8014cd0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014cc8:	4b70      	ldr	r3, [pc, #448]	; (8014e8c <tcp_process+0x2cc>)
 8014cca:	681a      	ldr	r2, [r3, #0]
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	2200      	movs	r2, #0
 8014cd4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	f001 fc2d 	bl	8016540 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	7d1b      	ldrb	r3, [r3, #20]
 8014cea:	3b02      	subs	r3, #2
 8014cec:	2b07      	cmp	r3, #7
 8014cee:	f200 8337 	bhi.w	8015360 <tcp_process+0x7a0>
 8014cf2:	a201      	add	r2, pc, #4	; (adr r2, 8014cf8 <tcp_process+0x138>)
 8014cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014cf8:	08014d19 	.word	0x08014d19
 8014cfc:	08014f49 	.word	0x08014f49
 8014d00:	080150c1 	.word	0x080150c1
 8014d04:	080150eb 	.word	0x080150eb
 8014d08:	0801520f 	.word	0x0801520f
 8014d0c:	080150c1 	.word	0x080150c1
 8014d10:	0801529b 	.word	0x0801529b
 8014d14:	0801532b 	.word	0x0801532b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014d18:	4b57      	ldr	r3, [pc, #348]	; (8014e78 <tcp_process+0x2b8>)
 8014d1a:	781b      	ldrb	r3, [r3, #0]
 8014d1c:	f003 0310 	and.w	r3, r3, #16
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	f000 80e4 	beq.w	8014eee <tcp_process+0x32e>
 8014d26:	4b54      	ldr	r3, [pc, #336]	; (8014e78 <tcp_process+0x2b8>)
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	f003 0302 	and.w	r3, r3, #2
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f000 80dd 	beq.w	8014eee <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d38:	1c5a      	adds	r2, r3, #1
 8014d3a:	4b50      	ldr	r3, [pc, #320]	; (8014e7c <tcp_process+0x2bc>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	f040 80d5 	bne.w	8014eee <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014d44:	4b4e      	ldr	r3, [pc, #312]	; (8014e80 <tcp_process+0x2c0>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	1c5a      	adds	r2, r3, #1
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8014d56:	4b49      	ldr	r3, [pc, #292]	; (8014e7c <tcp_process+0x2bc>)
 8014d58:	681a      	ldr	r2, [r3, #0]
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014d5e:	4b4c      	ldr	r3, [pc, #304]	; (8014e90 <tcp_process+0x2d0>)
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	89db      	ldrh	r3, [r3, #14]
 8014d64:	b29a      	uxth	r2, r3
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014d78:	4b41      	ldr	r3, [pc, #260]	; (8014e80 <tcp_process+0x2c0>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	1e5a      	subs	r2, r3, #1
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2204      	movs	r2, #4
 8014d86:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	3304      	adds	r3, #4
 8014d90:	4618      	mov	r0, r3
 8014d92:	f004 ff9d 	bl	8019cd0 <ip4_route>
 8014d96:	4601      	mov	r1, r0
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	3304      	adds	r3, #4
 8014d9c:	461a      	mov	r2, r3
 8014d9e:	4620      	mov	r0, r4
 8014da0:	f7ff f88e 	bl	8013ec0 <tcp_eff_send_mss_netif>
 8014da4:	4603      	mov	r3, r0
 8014da6:	461a      	mov	r2, r3
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014db0:	009a      	lsls	r2, r3, #2
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014db6:	005b      	lsls	r3, r3, #1
 8014db8:	f241 111c 	movw	r1, #4380	; 0x111c
 8014dbc:	428b      	cmp	r3, r1
 8014dbe:	bf38      	it	cc
 8014dc0:	460b      	movcc	r3, r1
 8014dc2:	429a      	cmp	r2, r3
 8014dc4:	d204      	bcs.n	8014dd0 <tcp_process+0x210>
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	b29b      	uxth	r3, r3
 8014dce:	e00d      	b.n	8014dec <tcp_process+0x22c>
 8014dd0:	687b      	ldr	r3, [r7, #4]
 8014dd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dd4:	005b      	lsls	r3, r3, #1
 8014dd6:	f241 121c 	movw	r2, #4380	; 0x111c
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	d904      	bls.n	8014de8 <tcp_process+0x228>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014de2:	005b      	lsls	r3, r3, #1
 8014de4:	b29b      	uxth	r3, r3
 8014de6:	e001      	b.n	8014dec <tcp_process+0x22c>
 8014de8:	f241 131c 	movw	r3, #4380	; 0x111c
 8014dec:	687a      	ldr	r2, [r7, #4]
 8014dee:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d106      	bne.n	8014e0a <tcp_process+0x24a>
 8014dfc:	4b1b      	ldr	r3, [pc, #108]	; (8014e6c <tcp_process+0x2ac>)
 8014dfe:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8014e02:	4924      	ldr	r1, [pc, #144]	; (8014e94 <tcp_process+0x2d4>)
 8014e04:	481b      	ldr	r0, [pc, #108]	; (8014e74 <tcp_process+0x2b4>)
 8014e06:	f006 fc69 	bl	801b6dc <iprintf>
        --pcb->snd_queuelen;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014e10:	3b01      	subs	r3, #1
 8014e12:	b29a      	uxth	r2, r3
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e1e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d111      	bne.n	8014e4a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e2a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014e2c:	69fb      	ldr	r3, [r7, #28]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d106      	bne.n	8014e40 <tcp_process+0x280>
 8014e32:	4b0e      	ldr	r3, [pc, #56]	; (8014e6c <tcp_process+0x2ac>)
 8014e34:	f44f 725d 	mov.w	r2, #884	; 0x374
 8014e38:	4917      	ldr	r1, [pc, #92]	; (8014e98 <tcp_process+0x2d8>)
 8014e3a:	480e      	ldr	r0, [pc, #56]	; (8014e74 <tcp_process+0x2b4>)
 8014e3c:	f006 fc4e 	bl	801b6dc <iprintf>
          pcb->unsent = rseg->next;
 8014e40:	69fb      	ldr	r3, [r7, #28]
 8014e42:	681a      	ldr	r2, [r3, #0]
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	66da      	str	r2, [r3, #108]	; 0x6c
 8014e48:	e003      	b.n	8014e52 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8014e4a:	69fb      	ldr	r3, [r7, #28]
 8014e4c:	681a      	ldr	r2, [r3, #0]
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014e52:	69f8      	ldr	r0, [r7, #28]
 8014e54:	f7fe fc57 	bl	8013706 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d11d      	bne.n	8014e9c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e66:	861a      	strh	r2, [r3, #48]	; 0x30
 8014e68:	e01f      	b.n	8014eaa <tcp_process+0x2ea>
 8014e6a:	bf00      	nop
 8014e6c:	0801db58 	.word	0x0801db58
 8014e70:	0801dd90 	.word	0x0801dd90
 8014e74:	0801dba4 	.word	0x0801dba4
 8014e78:	24004b2c 	.word	0x24004b2c
 8014e7c:	24004b24 	.word	0x24004b24
 8014e80:	24004b20 	.word	0x24004b20
 8014e84:	0801ddac 	.word	0x0801ddac
 8014e88:	24004b2d 	.word	0x24004b2d
 8014e8c:	240082e0 	.word	0x240082e0
 8014e90:	24004b10 	.word	0x24004b10
 8014e94:	0801ddcc 	.word	0x0801ddcc
 8014e98:	0801dde4 	.word	0x0801dde4
        } else {
          pcb->rtime = 0;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	2200      	movs	r2, #0
 8014ea6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d00a      	beq.n	8014eca <tcp_process+0x30a>
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014eba:	687a      	ldr	r2, [r7, #4]
 8014ebc:	6910      	ldr	r0, [r2, #16]
 8014ebe:	2200      	movs	r2, #0
 8014ec0:	6879      	ldr	r1, [r7, #4]
 8014ec2:	4798      	blx	r3
 8014ec4:	4603      	mov	r3, r0
 8014ec6:	76bb      	strb	r3, [r7, #26]
 8014ec8:	e001      	b.n	8014ece <tcp_process+0x30e>
 8014eca:	2300      	movs	r3, #0
 8014ecc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8014ece:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014ed2:	f113 0f0d 	cmn.w	r3, #13
 8014ed6:	d102      	bne.n	8014ede <tcp_process+0x31e>
          return ERR_ABRT;
 8014ed8:	f06f 030c 	mvn.w	r3, #12
 8014edc:	e250      	b.n	8015380 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	8b5b      	ldrh	r3, [r3, #26]
 8014ee2:	f043 0302 	orr.w	r3, r3, #2
 8014ee6:	b29a      	uxth	r2, r3
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8014eec:	e23a      	b.n	8015364 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8014eee:	4b9d      	ldr	r3, [pc, #628]	; (8015164 <tcp_process+0x5a4>)
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	f003 0310 	and.w	r3, r3, #16
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	f000 8234 	beq.w	8015364 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014efc:	4b9a      	ldr	r3, [pc, #616]	; (8015168 <tcp_process+0x5a8>)
 8014efe:	6819      	ldr	r1, [r3, #0]
 8014f00:	4b9a      	ldr	r3, [pc, #616]	; (801516c <tcp_process+0x5ac>)
 8014f02:	881b      	ldrh	r3, [r3, #0]
 8014f04:	461a      	mov	r2, r3
 8014f06:	4b9a      	ldr	r3, [pc, #616]	; (8015170 <tcp_process+0x5b0>)
 8014f08:	681b      	ldr	r3, [r3, #0]
 8014f0a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f0c:	4b99      	ldr	r3, [pc, #612]	; (8015174 <tcp_process+0x5b4>)
 8014f0e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f10:	885b      	ldrh	r3, [r3, #2]
 8014f12:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014f14:	4a97      	ldr	r2, [pc, #604]	; (8015174 <tcp_process+0x5b4>)
 8014f16:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014f18:	8812      	ldrh	r2, [r2, #0]
 8014f1a:	b292      	uxth	r2, r2
 8014f1c:	9202      	str	r2, [sp, #8]
 8014f1e:	9301      	str	r3, [sp, #4]
 8014f20:	4b95      	ldr	r3, [pc, #596]	; (8015178 <tcp_process+0x5b8>)
 8014f22:	9300      	str	r3, [sp, #0]
 8014f24:	4b95      	ldr	r3, [pc, #596]	; (801517c <tcp_process+0x5bc>)
 8014f26:	4602      	mov	r2, r0
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f003 f8db 	bl	80180e4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014f34:	2b05      	cmp	r3, #5
 8014f36:	f200 8215 	bhi.w	8015364 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014f40:	6878      	ldr	r0, [r7, #4]
 8014f42:	f002 fea5 	bl	8017c90 <tcp_rexmit_rto>
      break;
 8014f46:	e20d      	b.n	8015364 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014f48:	4b86      	ldr	r3, [pc, #536]	; (8015164 <tcp_process+0x5a4>)
 8014f4a:	781b      	ldrb	r3, [r3, #0]
 8014f4c:	f003 0310 	and.w	r3, r3, #16
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	f000 80a1 	beq.w	8015098 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014f56:	4b84      	ldr	r3, [pc, #528]	; (8015168 <tcp_process+0x5a8>)
 8014f58:	681a      	ldr	r2, [r3, #0]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	3b01      	subs	r3, #1
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	db7e      	blt.n	8015064 <tcp_process+0x4a4>
 8014f66:	4b80      	ldr	r3, [pc, #512]	; (8015168 <tcp_process+0x5a8>)
 8014f68:	681a      	ldr	r2, [r3, #0]
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f6e:	1ad3      	subs	r3, r2, r3
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	dc77      	bgt.n	8015064 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2204      	movs	r2, #4
 8014f78:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d102      	bne.n	8014f88 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014f82:	23fa      	movs	r3, #250	; 0xfa
 8014f84:	76bb      	strb	r3, [r7, #26]
 8014f86:	e01d      	b.n	8014fc4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014f8c:	699b      	ldr	r3, [r3, #24]
 8014f8e:	2b00      	cmp	r3, #0
 8014f90:	d106      	bne.n	8014fa0 <tcp_process+0x3e0>
 8014f92:	4b7b      	ldr	r3, [pc, #492]	; (8015180 <tcp_process+0x5c0>)
 8014f94:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8014f98:	497a      	ldr	r1, [pc, #488]	; (8015184 <tcp_process+0x5c4>)
 8014f9a:	487b      	ldr	r0, [pc, #492]	; (8015188 <tcp_process+0x5c8>)
 8014f9c:	f006 fb9e 	bl	801b6dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014fa4:	699b      	ldr	r3, [r3, #24]
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d00a      	beq.n	8014fc0 <tcp_process+0x400>
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014fae:	699b      	ldr	r3, [r3, #24]
 8014fb0:	687a      	ldr	r2, [r7, #4]
 8014fb2:	6910      	ldr	r0, [r2, #16]
 8014fb4:	2200      	movs	r2, #0
 8014fb6:	6879      	ldr	r1, [r7, #4]
 8014fb8:	4798      	blx	r3
 8014fba:	4603      	mov	r3, r0
 8014fbc:	76bb      	strb	r3, [r7, #26]
 8014fbe:	e001      	b.n	8014fc4 <tcp_process+0x404>
 8014fc0:	23f0      	movs	r3, #240	; 0xf0
 8014fc2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014fc4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d00a      	beq.n	8014fe2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8014fcc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8014fd0:	f113 0f0d 	cmn.w	r3, #13
 8014fd4:	d002      	beq.n	8014fdc <tcp_process+0x41c>
              tcp_abort(pcb);
 8014fd6:	6878      	ldr	r0, [r7, #4]
 8014fd8:	f7fd fcf0 	bl	80129bc <tcp_abort>
            }
            return ERR_ABRT;
 8014fdc:	f06f 030c 	mvn.w	r3, #12
 8014fe0:	e1ce      	b.n	8015380 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014fe2:	6878      	ldr	r0, [r7, #4]
 8014fe4:	f000 fae0 	bl	80155a8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014fe8:	4b68      	ldr	r3, [pc, #416]	; (801518c <tcp_process+0x5cc>)
 8014fea:	881b      	ldrh	r3, [r3, #0]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d005      	beq.n	8014ffc <tcp_process+0x43c>
            recv_acked--;
 8014ff0:	4b66      	ldr	r3, [pc, #408]	; (801518c <tcp_process+0x5cc>)
 8014ff2:	881b      	ldrh	r3, [r3, #0]
 8014ff4:	3b01      	subs	r3, #1
 8014ff6:	b29a      	uxth	r2, r3
 8014ff8:	4b64      	ldr	r3, [pc, #400]	; (801518c <tcp_process+0x5cc>)
 8014ffa:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014ffc:	687b      	ldr	r3, [r7, #4]
 8014ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015000:	009a      	lsls	r2, r3, #2
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015006:	005b      	lsls	r3, r3, #1
 8015008:	f241 111c 	movw	r1, #4380	; 0x111c
 801500c:	428b      	cmp	r3, r1
 801500e:	bf38      	it	cc
 8015010:	460b      	movcc	r3, r1
 8015012:	429a      	cmp	r2, r3
 8015014:	d204      	bcs.n	8015020 <tcp_process+0x460>
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801501a:	009b      	lsls	r3, r3, #2
 801501c:	b29b      	uxth	r3, r3
 801501e:	e00d      	b.n	801503c <tcp_process+0x47c>
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015024:	005b      	lsls	r3, r3, #1
 8015026:	f241 121c 	movw	r2, #4380	; 0x111c
 801502a:	4293      	cmp	r3, r2
 801502c:	d904      	bls.n	8015038 <tcp_process+0x478>
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015032:	005b      	lsls	r3, r3, #1
 8015034:	b29b      	uxth	r3, r3
 8015036:	e001      	b.n	801503c <tcp_process+0x47c>
 8015038:	f241 131c 	movw	r3, #4380	; 0x111c
 801503c:	687a      	ldr	r2, [r7, #4]
 801503e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8015042:	4b53      	ldr	r3, [pc, #332]	; (8015190 <tcp_process+0x5d0>)
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	f003 0320 	and.w	r3, r3, #32
 801504a:	2b00      	cmp	r3, #0
 801504c:	d037      	beq.n	80150be <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	8b5b      	ldrh	r3, [r3, #26]
 8015052:	f043 0302 	orr.w	r3, r3, #2
 8015056:	b29a      	uxth	r2, r3
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2207      	movs	r2, #7
 8015060:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8015062:	e02c      	b.n	80150be <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015064:	4b40      	ldr	r3, [pc, #256]	; (8015168 <tcp_process+0x5a8>)
 8015066:	6819      	ldr	r1, [r3, #0]
 8015068:	4b40      	ldr	r3, [pc, #256]	; (801516c <tcp_process+0x5ac>)
 801506a:	881b      	ldrh	r3, [r3, #0]
 801506c:	461a      	mov	r2, r3
 801506e:	4b40      	ldr	r3, [pc, #256]	; (8015170 <tcp_process+0x5b0>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015074:	4b3f      	ldr	r3, [pc, #252]	; (8015174 <tcp_process+0x5b4>)
 8015076:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015078:	885b      	ldrh	r3, [r3, #2]
 801507a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801507c:	4a3d      	ldr	r2, [pc, #244]	; (8015174 <tcp_process+0x5b4>)
 801507e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015080:	8812      	ldrh	r2, [r2, #0]
 8015082:	b292      	uxth	r2, r2
 8015084:	9202      	str	r2, [sp, #8]
 8015086:	9301      	str	r3, [sp, #4]
 8015088:	4b3b      	ldr	r3, [pc, #236]	; (8015178 <tcp_process+0x5b8>)
 801508a:	9300      	str	r3, [sp, #0]
 801508c:	4b3b      	ldr	r3, [pc, #236]	; (801517c <tcp_process+0x5bc>)
 801508e:	4602      	mov	r2, r0
 8015090:	6878      	ldr	r0, [r7, #4]
 8015092:	f003 f827 	bl	80180e4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015096:	e167      	b.n	8015368 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015098:	4b32      	ldr	r3, [pc, #200]	; (8015164 <tcp_process+0x5a4>)
 801509a:	781b      	ldrb	r3, [r3, #0]
 801509c:	f003 0302 	and.w	r3, r3, #2
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	f000 8161 	beq.w	8015368 <tcp_process+0x7a8>
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150aa:	1e5a      	subs	r2, r3, #1
 80150ac:	4b30      	ldr	r3, [pc, #192]	; (8015170 <tcp_process+0x5b0>)
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	f040 8159 	bne.w	8015368 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80150b6:	6878      	ldr	r0, [r7, #4]
 80150b8:	f002 fe0c 	bl	8017cd4 <tcp_rexmit>
      break;
 80150bc:	e154      	b.n	8015368 <tcp_process+0x7a8>
 80150be:	e153      	b.n	8015368 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80150c0:	6878      	ldr	r0, [r7, #4]
 80150c2:	f000 fa71 	bl	80155a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80150c6:	4b32      	ldr	r3, [pc, #200]	; (8015190 <tcp_process+0x5d0>)
 80150c8:	781b      	ldrb	r3, [r3, #0]
 80150ca:	f003 0320 	and.w	r3, r3, #32
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	f000 814c 	beq.w	801536c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	8b5b      	ldrh	r3, [r3, #26]
 80150d8:	f043 0302 	orr.w	r3, r3, #2
 80150dc:	b29a      	uxth	r2, r3
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	2207      	movs	r2, #7
 80150e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80150e8:	e140      	b.n	801536c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80150ea:	6878      	ldr	r0, [r7, #4]
 80150ec:	f000 fa5c 	bl	80155a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80150f0:	4b27      	ldr	r3, [pc, #156]	; (8015190 <tcp_process+0x5d0>)
 80150f2:	781b      	ldrb	r3, [r3, #0]
 80150f4:	f003 0320 	and.w	r3, r3, #32
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d071      	beq.n	80151e0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80150fc:	4b19      	ldr	r3, [pc, #100]	; (8015164 <tcp_process+0x5a4>)
 80150fe:	781b      	ldrb	r3, [r3, #0]
 8015100:	f003 0310 	and.w	r3, r3, #16
 8015104:	2b00      	cmp	r3, #0
 8015106:	d060      	beq.n	80151ca <tcp_process+0x60a>
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801510c:	4b16      	ldr	r3, [pc, #88]	; (8015168 <tcp_process+0x5a8>)
 801510e:	681b      	ldr	r3, [r3, #0]
 8015110:	429a      	cmp	r2, r3
 8015112:	d15a      	bne.n	80151ca <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015118:	2b00      	cmp	r3, #0
 801511a:	d156      	bne.n	80151ca <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	8b5b      	ldrh	r3, [r3, #26]
 8015120:	f043 0302 	orr.w	r3, r3, #2
 8015124:	b29a      	uxth	r2, r3
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801512a:	6878      	ldr	r0, [r7, #4]
 801512c:	f7fe fdbe 	bl	8013cac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8015130:	4b18      	ldr	r3, [pc, #96]	; (8015194 <tcp_process+0x5d4>)
 8015132:	681b      	ldr	r3, [r3, #0]
 8015134:	687a      	ldr	r2, [r7, #4]
 8015136:	429a      	cmp	r2, r3
 8015138:	d105      	bne.n	8015146 <tcp_process+0x586>
 801513a:	4b16      	ldr	r3, [pc, #88]	; (8015194 <tcp_process+0x5d4>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	68db      	ldr	r3, [r3, #12]
 8015140:	4a14      	ldr	r2, [pc, #80]	; (8015194 <tcp_process+0x5d4>)
 8015142:	6013      	str	r3, [r2, #0]
 8015144:	e02e      	b.n	80151a4 <tcp_process+0x5e4>
 8015146:	4b13      	ldr	r3, [pc, #76]	; (8015194 <tcp_process+0x5d4>)
 8015148:	681b      	ldr	r3, [r3, #0]
 801514a:	617b      	str	r3, [r7, #20]
 801514c:	e027      	b.n	801519e <tcp_process+0x5de>
 801514e:	697b      	ldr	r3, [r7, #20]
 8015150:	68db      	ldr	r3, [r3, #12]
 8015152:	687a      	ldr	r2, [r7, #4]
 8015154:	429a      	cmp	r2, r3
 8015156:	d11f      	bne.n	8015198 <tcp_process+0x5d8>
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	68da      	ldr	r2, [r3, #12]
 801515c:	697b      	ldr	r3, [r7, #20]
 801515e:	60da      	str	r2, [r3, #12]
 8015160:	e020      	b.n	80151a4 <tcp_process+0x5e4>
 8015162:	bf00      	nop
 8015164:	24004b2c 	.word	0x24004b2c
 8015168:	24004b24 	.word	0x24004b24
 801516c:	24004b2a 	.word	0x24004b2a
 8015170:	24004b20 	.word	0x24004b20
 8015174:	24004b10 	.word	0x24004b10
 8015178:	2400522c 	.word	0x2400522c
 801517c:	24005230 	.word	0x24005230
 8015180:	0801db58 	.word	0x0801db58
 8015184:	0801ddf8 	.word	0x0801ddf8
 8015188:	0801dba4 	.word	0x0801dba4
 801518c:	24004b28 	.word	0x24004b28
 8015190:	24004b2d 	.word	0x24004b2d
 8015194:	240082dc 	.word	0x240082dc
 8015198:	697b      	ldr	r3, [r7, #20]
 801519a:	68db      	ldr	r3, [r3, #12]
 801519c:	617b      	str	r3, [r7, #20]
 801519e:	697b      	ldr	r3, [r7, #20]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d1d4      	bne.n	801514e <tcp_process+0x58e>
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2200      	movs	r2, #0
 80151a8:	60da      	str	r2, [r3, #12]
 80151aa:	4b77      	ldr	r3, [pc, #476]	; (8015388 <tcp_process+0x7c8>)
 80151ac:	2201      	movs	r2, #1
 80151ae:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80151b0:	687b      	ldr	r3, [r7, #4]
 80151b2:	220a      	movs	r2, #10
 80151b4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80151b6:	4b75      	ldr	r3, [pc, #468]	; (801538c <tcp_process+0x7cc>)
 80151b8:	681a      	ldr	r2, [r3, #0]
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	60da      	str	r2, [r3, #12]
 80151be:	4a73      	ldr	r2, [pc, #460]	; (801538c <tcp_process+0x7cc>)
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	6013      	str	r3, [r2, #0]
 80151c4:	f003 f950 	bl	8018468 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80151c8:	e0d2      	b.n	8015370 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	8b5b      	ldrh	r3, [r3, #26]
 80151ce:	f043 0302 	orr.w	r3, r3, #2
 80151d2:	b29a      	uxth	r2, r3
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	2208      	movs	r2, #8
 80151dc:	751a      	strb	r2, [r3, #20]
      break;
 80151de:	e0c7      	b.n	8015370 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80151e0:	4b6b      	ldr	r3, [pc, #428]	; (8015390 <tcp_process+0x7d0>)
 80151e2:	781b      	ldrb	r3, [r3, #0]
 80151e4:	f003 0310 	and.w	r3, r3, #16
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	f000 80c1 	beq.w	8015370 <tcp_process+0x7b0>
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80151f2:	4b68      	ldr	r3, [pc, #416]	; (8015394 <tcp_process+0x7d4>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	f040 80ba 	bne.w	8015370 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015200:	2b00      	cmp	r3, #0
 8015202:	f040 80b5 	bne.w	8015370 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	2206      	movs	r2, #6
 801520a:	751a      	strb	r2, [r3, #20]
      break;
 801520c:	e0b0      	b.n	8015370 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801520e:	6878      	ldr	r0, [r7, #4]
 8015210:	f000 f9ca 	bl	80155a8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015214:	4b60      	ldr	r3, [pc, #384]	; (8015398 <tcp_process+0x7d8>)
 8015216:	781b      	ldrb	r3, [r3, #0]
 8015218:	f003 0320 	and.w	r3, r3, #32
 801521c:	2b00      	cmp	r3, #0
 801521e:	f000 80a9 	beq.w	8015374 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	8b5b      	ldrh	r3, [r3, #26]
 8015226:	f043 0302 	orr.w	r3, r3, #2
 801522a:	b29a      	uxth	r2, r3
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8015230:	6878      	ldr	r0, [r7, #4]
 8015232:	f7fe fd3b 	bl	8013cac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015236:	4b59      	ldr	r3, [pc, #356]	; (801539c <tcp_process+0x7dc>)
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	687a      	ldr	r2, [r7, #4]
 801523c:	429a      	cmp	r2, r3
 801523e:	d105      	bne.n	801524c <tcp_process+0x68c>
 8015240:	4b56      	ldr	r3, [pc, #344]	; (801539c <tcp_process+0x7dc>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	4a55      	ldr	r2, [pc, #340]	; (801539c <tcp_process+0x7dc>)
 8015248:	6013      	str	r3, [r2, #0]
 801524a:	e013      	b.n	8015274 <tcp_process+0x6b4>
 801524c:	4b53      	ldr	r3, [pc, #332]	; (801539c <tcp_process+0x7dc>)
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	613b      	str	r3, [r7, #16]
 8015252:	e00c      	b.n	801526e <tcp_process+0x6ae>
 8015254:	693b      	ldr	r3, [r7, #16]
 8015256:	68db      	ldr	r3, [r3, #12]
 8015258:	687a      	ldr	r2, [r7, #4]
 801525a:	429a      	cmp	r2, r3
 801525c:	d104      	bne.n	8015268 <tcp_process+0x6a8>
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	68da      	ldr	r2, [r3, #12]
 8015262:	693b      	ldr	r3, [r7, #16]
 8015264:	60da      	str	r2, [r3, #12]
 8015266:	e005      	b.n	8015274 <tcp_process+0x6b4>
 8015268:	693b      	ldr	r3, [r7, #16]
 801526a:	68db      	ldr	r3, [r3, #12]
 801526c:	613b      	str	r3, [r7, #16]
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d1ef      	bne.n	8015254 <tcp_process+0x694>
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	2200      	movs	r2, #0
 8015278:	60da      	str	r2, [r3, #12]
 801527a:	4b43      	ldr	r3, [pc, #268]	; (8015388 <tcp_process+0x7c8>)
 801527c:	2201      	movs	r2, #1
 801527e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	220a      	movs	r2, #10
 8015284:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015286:	4b41      	ldr	r3, [pc, #260]	; (801538c <tcp_process+0x7cc>)
 8015288:	681a      	ldr	r2, [r3, #0]
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	60da      	str	r2, [r3, #12]
 801528e:	4a3f      	ldr	r2, [pc, #252]	; (801538c <tcp_process+0x7cc>)
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6013      	str	r3, [r2, #0]
 8015294:	f003 f8e8 	bl	8018468 <tcp_timer_needed>
      }
      break;
 8015298:	e06c      	b.n	8015374 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	f000 f984 	bl	80155a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80152a0:	4b3b      	ldr	r3, [pc, #236]	; (8015390 <tcp_process+0x7d0>)
 80152a2:	781b      	ldrb	r3, [r3, #0]
 80152a4:	f003 0310 	and.w	r3, r3, #16
 80152a8:	2b00      	cmp	r3, #0
 80152aa:	d065      	beq.n	8015378 <tcp_process+0x7b8>
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80152b0:	4b38      	ldr	r3, [pc, #224]	; (8015394 <tcp_process+0x7d4>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d15f      	bne.n	8015378 <tcp_process+0x7b8>
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152bc:	2b00      	cmp	r3, #0
 80152be:	d15b      	bne.n	8015378 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80152c0:	6878      	ldr	r0, [r7, #4]
 80152c2:	f7fe fcf3 	bl	8013cac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80152c6:	4b35      	ldr	r3, [pc, #212]	; (801539c <tcp_process+0x7dc>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	687a      	ldr	r2, [r7, #4]
 80152cc:	429a      	cmp	r2, r3
 80152ce:	d105      	bne.n	80152dc <tcp_process+0x71c>
 80152d0:	4b32      	ldr	r3, [pc, #200]	; (801539c <tcp_process+0x7dc>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	4a31      	ldr	r2, [pc, #196]	; (801539c <tcp_process+0x7dc>)
 80152d8:	6013      	str	r3, [r2, #0]
 80152da:	e013      	b.n	8015304 <tcp_process+0x744>
 80152dc:	4b2f      	ldr	r3, [pc, #188]	; (801539c <tcp_process+0x7dc>)
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	60fb      	str	r3, [r7, #12]
 80152e2:	e00c      	b.n	80152fe <tcp_process+0x73e>
 80152e4:	68fb      	ldr	r3, [r7, #12]
 80152e6:	68db      	ldr	r3, [r3, #12]
 80152e8:	687a      	ldr	r2, [r7, #4]
 80152ea:	429a      	cmp	r2, r3
 80152ec:	d104      	bne.n	80152f8 <tcp_process+0x738>
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	68da      	ldr	r2, [r3, #12]
 80152f2:	68fb      	ldr	r3, [r7, #12]
 80152f4:	60da      	str	r2, [r3, #12]
 80152f6:	e005      	b.n	8015304 <tcp_process+0x744>
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	68db      	ldr	r3, [r3, #12]
 80152fc:	60fb      	str	r3, [r7, #12]
 80152fe:	68fb      	ldr	r3, [r7, #12]
 8015300:	2b00      	cmp	r3, #0
 8015302:	d1ef      	bne.n	80152e4 <tcp_process+0x724>
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	2200      	movs	r2, #0
 8015308:	60da      	str	r2, [r3, #12]
 801530a:	4b1f      	ldr	r3, [pc, #124]	; (8015388 <tcp_process+0x7c8>)
 801530c:	2201      	movs	r2, #1
 801530e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	220a      	movs	r2, #10
 8015314:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015316:	4b1d      	ldr	r3, [pc, #116]	; (801538c <tcp_process+0x7cc>)
 8015318:	681a      	ldr	r2, [r3, #0]
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	60da      	str	r2, [r3, #12]
 801531e:	4a1b      	ldr	r2, [pc, #108]	; (801538c <tcp_process+0x7cc>)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6013      	str	r3, [r2, #0]
 8015324:	f003 f8a0 	bl	8018468 <tcp_timer_needed>
      }
      break;
 8015328:	e026      	b.n	8015378 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801532a:	6878      	ldr	r0, [r7, #4]
 801532c:	f000 f93c 	bl	80155a8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8015330:	4b17      	ldr	r3, [pc, #92]	; (8015390 <tcp_process+0x7d0>)
 8015332:	781b      	ldrb	r3, [r3, #0]
 8015334:	f003 0310 	and.w	r3, r3, #16
 8015338:	2b00      	cmp	r3, #0
 801533a:	d01f      	beq.n	801537c <tcp_process+0x7bc>
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015340:	4b14      	ldr	r3, [pc, #80]	; (8015394 <tcp_process+0x7d4>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	429a      	cmp	r2, r3
 8015346:	d119      	bne.n	801537c <tcp_process+0x7bc>
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801534c:	2b00      	cmp	r3, #0
 801534e:	d115      	bne.n	801537c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8015350:	4b11      	ldr	r3, [pc, #68]	; (8015398 <tcp_process+0x7d8>)
 8015352:	781b      	ldrb	r3, [r3, #0]
 8015354:	f043 0310 	orr.w	r3, r3, #16
 8015358:	b2da      	uxtb	r2, r3
 801535a:	4b0f      	ldr	r3, [pc, #60]	; (8015398 <tcp_process+0x7d8>)
 801535c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801535e:	e00d      	b.n	801537c <tcp_process+0x7bc>
    default:
      break;
 8015360:	bf00      	nop
 8015362:	e00c      	b.n	801537e <tcp_process+0x7be>
      break;
 8015364:	bf00      	nop
 8015366:	e00a      	b.n	801537e <tcp_process+0x7be>
      break;
 8015368:	bf00      	nop
 801536a:	e008      	b.n	801537e <tcp_process+0x7be>
      break;
 801536c:	bf00      	nop
 801536e:	e006      	b.n	801537e <tcp_process+0x7be>
      break;
 8015370:	bf00      	nop
 8015372:	e004      	b.n	801537e <tcp_process+0x7be>
      break;
 8015374:	bf00      	nop
 8015376:	e002      	b.n	801537e <tcp_process+0x7be>
      break;
 8015378:	bf00      	nop
 801537a:	e000      	b.n	801537e <tcp_process+0x7be>
      break;
 801537c:	bf00      	nop
  }
  return ERR_OK;
 801537e:	2300      	movs	r3, #0
}
 8015380:	4618      	mov	r0, r3
 8015382:	3724      	adds	r7, #36	; 0x24
 8015384:	46bd      	mov	sp, r7
 8015386:	bd90      	pop	{r4, r7, pc}
 8015388:	240082d8 	.word	0x240082d8
 801538c:	240082ec 	.word	0x240082ec
 8015390:	24004b2c 	.word	0x24004b2c
 8015394:	24004b24 	.word	0x24004b24
 8015398:	24004b2d 	.word	0x24004b2d
 801539c:	240082dc 	.word	0x240082dc

080153a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80153a0:	b590      	push	{r4, r7, lr}
 80153a2:	b085      	sub	sp, #20
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d106      	bne.n	80153be <tcp_oos_insert_segment+0x1e>
 80153b0:	4b3b      	ldr	r3, [pc, #236]	; (80154a0 <tcp_oos_insert_segment+0x100>)
 80153b2:	f240 421f 	movw	r2, #1055	; 0x41f
 80153b6:	493b      	ldr	r1, [pc, #236]	; (80154a4 <tcp_oos_insert_segment+0x104>)
 80153b8:	483b      	ldr	r0, [pc, #236]	; (80154a8 <tcp_oos_insert_segment+0x108>)
 80153ba:	f006 f98f 	bl	801b6dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	68db      	ldr	r3, [r3, #12]
 80153c2:	899b      	ldrh	r3, [r3, #12]
 80153c4:	b29b      	uxth	r3, r3
 80153c6:	4618      	mov	r0, r3
 80153c8:	f7fb f8aa 	bl	8010520 <lwip_htons>
 80153cc:	4603      	mov	r3, r0
 80153ce:	b2db      	uxtb	r3, r3
 80153d0:	f003 0301 	and.w	r3, r3, #1
 80153d4:	2b00      	cmp	r3, #0
 80153d6:	d028      	beq.n	801542a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80153d8:	6838      	ldr	r0, [r7, #0]
 80153da:	f7fe f97f 	bl	80136dc <tcp_segs_free>
    next = NULL;
 80153de:	2300      	movs	r3, #0
 80153e0:	603b      	str	r3, [r7, #0]
 80153e2:	e056      	b.n	8015492 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80153e4:	683b      	ldr	r3, [r7, #0]
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	899b      	ldrh	r3, [r3, #12]
 80153ea:	b29b      	uxth	r3, r3
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7fb f897 	bl	8010520 <lwip_htons>
 80153f2:	4603      	mov	r3, r0
 80153f4:	b2db      	uxtb	r3, r3
 80153f6:	f003 0301 	and.w	r3, r3, #1
 80153fa:	2b00      	cmp	r3, #0
 80153fc:	d00d      	beq.n	801541a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80153fe:	687b      	ldr	r3, [r7, #4]
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	899b      	ldrh	r3, [r3, #12]
 8015404:	b29c      	uxth	r4, r3
 8015406:	2001      	movs	r0, #1
 8015408:	f7fb f88a 	bl	8010520 <lwip_htons>
 801540c:	4603      	mov	r3, r0
 801540e:	461a      	mov	r2, r3
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	68db      	ldr	r3, [r3, #12]
 8015414:	4322      	orrs	r2, r4
 8015416:	b292      	uxth	r2, r2
 8015418:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801541e:	683b      	ldr	r3, [r7, #0]
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8015424:	68f8      	ldr	r0, [r7, #12]
 8015426:	f7fe f96e 	bl	8013706 <tcp_seg_free>
    while (next &&
 801542a:	683b      	ldr	r3, [r7, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d00e      	beq.n	801544e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	891b      	ldrh	r3, [r3, #8]
 8015434:	461a      	mov	r2, r3
 8015436:	4b1d      	ldr	r3, [pc, #116]	; (80154ac <tcp_oos_insert_segment+0x10c>)
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	441a      	add	r2, r3
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	68db      	ldr	r3, [r3, #12]
 8015440:	685b      	ldr	r3, [r3, #4]
 8015442:	6839      	ldr	r1, [r7, #0]
 8015444:	8909      	ldrh	r1, [r1, #8]
 8015446:	440b      	add	r3, r1
 8015448:	1ad3      	subs	r3, r2, r3
    while (next &&
 801544a:	2b00      	cmp	r3, #0
 801544c:	daca      	bge.n	80153e4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d01e      	beq.n	8015492 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	891b      	ldrh	r3, [r3, #8]
 8015458:	461a      	mov	r2, r3
 801545a:	4b14      	ldr	r3, [pc, #80]	; (80154ac <tcp_oos_insert_segment+0x10c>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	441a      	add	r2, r3
 8015460:	683b      	ldr	r3, [r7, #0]
 8015462:	68db      	ldr	r3, [r3, #12]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	1ad3      	subs	r3, r2, r3
    if (next &&
 8015468:	2b00      	cmp	r3, #0
 801546a:	dd12      	ble.n	8015492 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	68db      	ldr	r3, [r3, #12]
 8015470:	685b      	ldr	r3, [r3, #4]
 8015472:	b29a      	uxth	r2, r3
 8015474:	4b0d      	ldr	r3, [pc, #52]	; (80154ac <tcp_oos_insert_segment+0x10c>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	b29b      	uxth	r3, r3
 801547a:	1ad3      	subs	r3, r2, r3
 801547c:	b29a      	uxth	r2, r3
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	685a      	ldr	r2, [r3, #4]
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	891b      	ldrh	r3, [r3, #8]
 801548a:	4619      	mov	r1, r3
 801548c:	4610      	mov	r0, r2
 801548e:	f7fc fb6b 	bl	8011b68 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	683a      	ldr	r2, [r7, #0]
 8015496:	601a      	str	r2, [r3, #0]
}
 8015498:	bf00      	nop
 801549a:	3714      	adds	r7, #20
 801549c:	46bd      	mov	sp, r7
 801549e:	bd90      	pop	{r4, r7, pc}
 80154a0:	0801db58 	.word	0x0801db58
 80154a4:	0801de18 	.word	0x0801de18
 80154a8:	0801dba4 	.word	0x0801dba4
 80154ac:	24004b20 	.word	0x24004b20

080154b0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80154b0:	b5b0      	push	{r4, r5, r7, lr}
 80154b2:	b086      	sub	sp, #24
 80154b4:	af00      	add	r7, sp, #0
 80154b6:	60f8      	str	r0, [r7, #12]
 80154b8:	60b9      	str	r1, [r7, #8]
 80154ba:	607a      	str	r2, [r7, #4]
 80154bc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80154be:	e03e      	b.n	801553e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80154c0:	68bb      	ldr	r3, [r7, #8]
 80154c2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	685b      	ldr	r3, [r3, #4]
 80154ce:	4618      	mov	r0, r3
 80154d0:	f7fc fd5e 	bl	8011f90 <pbuf_clen>
 80154d4:	4603      	mov	r3, r0
 80154d6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80154de:	8a7a      	ldrh	r2, [r7, #18]
 80154e0:	429a      	cmp	r2, r3
 80154e2:	d906      	bls.n	80154f2 <tcp_free_acked_segments+0x42>
 80154e4:	4b2a      	ldr	r3, [pc, #168]	; (8015590 <tcp_free_acked_segments+0xe0>)
 80154e6:	f240 4257 	movw	r2, #1111	; 0x457
 80154ea:	492a      	ldr	r1, [pc, #168]	; (8015594 <tcp_free_acked_segments+0xe4>)
 80154ec:	482a      	ldr	r0, [pc, #168]	; (8015598 <tcp_free_acked_segments+0xe8>)
 80154ee:	f006 f8f5 	bl	801b6dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80154f2:	68fb      	ldr	r3, [r7, #12]
 80154f4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80154f8:	8a7b      	ldrh	r3, [r7, #18]
 80154fa:	1ad3      	subs	r3, r2, r3
 80154fc:	b29a      	uxth	r2, r3
 80154fe:	68fb      	ldr	r3, [r7, #12]
 8015500:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015504:	697b      	ldr	r3, [r7, #20]
 8015506:	891a      	ldrh	r2, [r3, #8]
 8015508:	4b24      	ldr	r3, [pc, #144]	; (801559c <tcp_free_acked_segments+0xec>)
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	4413      	add	r3, r2
 801550e:	b29a      	uxth	r2, r3
 8015510:	4b22      	ldr	r3, [pc, #136]	; (801559c <tcp_free_acked_segments+0xec>)
 8015512:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015514:	6978      	ldr	r0, [r7, #20]
 8015516:	f7fe f8f6 	bl	8013706 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015520:	2b00      	cmp	r3, #0
 8015522:	d00c      	beq.n	801553e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015524:	68bb      	ldr	r3, [r7, #8]
 8015526:	2b00      	cmp	r3, #0
 8015528:	d109      	bne.n	801553e <tcp_free_acked_segments+0x8e>
 801552a:	683b      	ldr	r3, [r7, #0]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d106      	bne.n	801553e <tcp_free_acked_segments+0x8e>
 8015530:	4b17      	ldr	r3, [pc, #92]	; (8015590 <tcp_free_acked_segments+0xe0>)
 8015532:	f240 4261 	movw	r2, #1121	; 0x461
 8015536:	491a      	ldr	r1, [pc, #104]	; (80155a0 <tcp_free_acked_segments+0xf0>)
 8015538:	4817      	ldr	r0, [pc, #92]	; (8015598 <tcp_free_acked_segments+0xe8>)
 801553a:	f006 f8cf 	bl	801b6dc <iprintf>
  while (seg_list != NULL &&
 801553e:	68bb      	ldr	r3, [r7, #8]
 8015540:	2b00      	cmp	r3, #0
 8015542:	d020      	beq.n	8015586 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015544:	68bb      	ldr	r3, [r7, #8]
 8015546:	68db      	ldr	r3, [r3, #12]
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	4618      	mov	r0, r3
 801554c:	f7fa fffd 	bl	801054a <lwip_htonl>
 8015550:	4604      	mov	r4, r0
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	891b      	ldrh	r3, [r3, #8]
 8015556:	461d      	mov	r5, r3
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	899b      	ldrh	r3, [r3, #12]
 801555e:	b29b      	uxth	r3, r3
 8015560:	4618      	mov	r0, r3
 8015562:	f7fa ffdd 	bl	8010520 <lwip_htons>
 8015566:	4603      	mov	r3, r0
 8015568:	b2db      	uxtb	r3, r3
 801556a:	f003 0303 	and.w	r3, r3, #3
 801556e:	2b00      	cmp	r3, #0
 8015570:	d001      	beq.n	8015576 <tcp_free_acked_segments+0xc6>
 8015572:	2301      	movs	r3, #1
 8015574:	e000      	b.n	8015578 <tcp_free_acked_segments+0xc8>
 8015576:	2300      	movs	r3, #0
 8015578:	442b      	add	r3, r5
 801557a:	18e2      	adds	r2, r4, r3
 801557c:	4b09      	ldr	r3, [pc, #36]	; (80155a4 <tcp_free_acked_segments+0xf4>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015582:	2b00      	cmp	r3, #0
 8015584:	dd9c      	ble.n	80154c0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015586:	68bb      	ldr	r3, [r7, #8]
}
 8015588:	4618      	mov	r0, r3
 801558a:	3718      	adds	r7, #24
 801558c:	46bd      	mov	sp, r7
 801558e:	bdb0      	pop	{r4, r5, r7, pc}
 8015590:	0801db58 	.word	0x0801db58
 8015594:	0801de40 	.word	0x0801de40
 8015598:	0801dba4 	.word	0x0801dba4
 801559c:	24004b28 	.word	0x24004b28
 80155a0:	0801de68 	.word	0x0801de68
 80155a4:	24004b24 	.word	0x24004b24

080155a8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80155a8:	b5b0      	push	{r4, r5, r7, lr}
 80155aa:	b094      	sub	sp, #80	; 0x50
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80155b0:	2300      	movs	r3, #0
 80155b2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2b00      	cmp	r3, #0
 80155b8:	d106      	bne.n	80155c8 <tcp_receive+0x20>
 80155ba:	4ba6      	ldr	r3, [pc, #664]	; (8015854 <tcp_receive+0x2ac>)
 80155bc:	f240 427b 	movw	r2, #1147	; 0x47b
 80155c0:	49a5      	ldr	r1, [pc, #660]	; (8015858 <tcp_receive+0x2b0>)
 80155c2:	48a6      	ldr	r0, [pc, #664]	; (801585c <tcp_receive+0x2b4>)
 80155c4:	f006 f88a 	bl	801b6dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	7d1b      	ldrb	r3, [r3, #20]
 80155cc:	2b03      	cmp	r3, #3
 80155ce:	d806      	bhi.n	80155de <tcp_receive+0x36>
 80155d0:	4ba0      	ldr	r3, [pc, #640]	; (8015854 <tcp_receive+0x2ac>)
 80155d2:	f240 427c 	movw	r2, #1148	; 0x47c
 80155d6:	49a2      	ldr	r1, [pc, #648]	; (8015860 <tcp_receive+0x2b8>)
 80155d8:	48a0      	ldr	r0, [pc, #640]	; (801585c <tcp_receive+0x2b4>)
 80155da:	f006 f87f 	bl	801b6dc <iprintf>

  if (flags & TCP_ACK) {
 80155de:	4ba1      	ldr	r3, [pc, #644]	; (8015864 <tcp_receive+0x2bc>)
 80155e0:	781b      	ldrb	r3, [r3, #0]
 80155e2:	f003 0310 	and.w	r3, r3, #16
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	f000 8263 	beq.w	8015ab2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80155f2:	461a      	mov	r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80155f8:	4413      	add	r3, r2
 80155fa:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8015600:	4b99      	ldr	r3, [pc, #612]	; (8015868 <tcp_receive+0x2c0>)
 8015602:	681b      	ldr	r3, [r3, #0]
 8015604:	1ad3      	subs	r3, r2, r3
 8015606:	2b00      	cmp	r3, #0
 8015608:	db1b      	blt.n	8015642 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801560e:	4b96      	ldr	r3, [pc, #600]	; (8015868 <tcp_receive+0x2c0>)
 8015610:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015612:	429a      	cmp	r2, r3
 8015614:	d106      	bne.n	8015624 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801561a:	4b94      	ldr	r3, [pc, #592]	; (801586c <tcp_receive+0x2c4>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	1ad3      	subs	r3, r2, r3
 8015620:	2b00      	cmp	r3, #0
 8015622:	db0e      	blt.n	8015642 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8015628:	4b90      	ldr	r3, [pc, #576]	; (801586c <tcp_receive+0x2c4>)
 801562a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801562c:	429a      	cmp	r2, r3
 801562e:	d125      	bne.n	801567c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015630:	4b8f      	ldr	r3, [pc, #572]	; (8015870 <tcp_receive+0x2c8>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	89db      	ldrh	r3, [r3, #14]
 8015636:	b29a      	uxth	r2, r3
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801563e:	429a      	cmp	r2, r3
 8015640:	d91c      	bls.n	801567c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015642:	4b8b      	ldr	r3, [pc, #556]	; (8015870 <tcp_receive+0x2c8>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	89db      	ldrh	r3, [r3, #14]
 8015648:	b29a      	uxth	r2, r3
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801565c:	429a      	cmp	r2, r3
 801565e:	d205      	bcs.n	801566c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801566c:	4b7e      	ldr	r3, [pc, #504]	; (8015868 <tcp_receive+0x2c0>)
 801566e:	681a      	ldr	r2, [r3, #0]
 8015670:	687b      	ldr	r3, [r7, #4]
 8015672:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8015674:	4b7d      	ldr	r3, [pc, #500]	; (801586c <tcp_receive+0x2c4>)
 8015676:	681a      	ldr	r2, [r3, #0]
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801567c:	4b7b      	ldr	r3, [pc, #492]	; (801586c <tcp_receive+0x2c4>)
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015684:	1ad3      	subs	r3, r2, r3
 8015686:	2b00      	cmp	r3, #0
 8015688:	dc58      	bgt.n	801573c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801568a:	4b7a      	ldr	r3, [pc, #488]	; (8015874 <tcp_receive+0x2cc>)
 801568c:	881b      	ldrh	r3, [r3, #0]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d14b      	bne.n	801572a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015696:	687a      	ldr	r2, [r7, #4]
 8015698:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801569c:	4413      	add	r3, r2
 801569e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d142      	bne.n	801572a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	db3d      	blt.n	801572a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80156b2:	4b6e      	ldr	r3, [pc, #440]	; (801586c <tcp_receive+0x2c4>)
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d137      	bne.n	801572a <tcp_receive+0x182>
              found_dupack = 1;
 80156ba:	2301      	movs	r3, #1
 80156bc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80156c4:	2bff      	cmp	r3, #255	; 0xff
 80156c6:	d007      	beq.n	80156d8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80156ce:	3301      	adds	r3, #1
 80156d0:	b2da      	uxtb	r2, r3
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80156de:	2b03      	cmp	r3, #3
 80156e0:	d91b      	bls.n	801571a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80156ec:	4413      	add	r3, r2
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d30a      	bcc.n	8015710 <tcp_receive+0x168>
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015704:	4413      	add	r3, r2
 8015706:	b29a      	uxth	r2, r3
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801570e:	e004      	b.n	801571a <tcp_receive+0x172>
 8015710:	687b      	ldr	r3, [r7, #4]
 8015712:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8015720:	2b02      	cmp	r3, #2
 8015722:	d902      	bls.n	801572a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015724:	6878      	ldr	r0, [r7, #4]
 8015726:	f002 fb41 	bl	8017dac <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801572a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801572c:	2b00      	cmp	r3, #0
 801572e:	f040 8160 	bne.w	80159f2 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	2200      	movs	r2, #0
 8015736:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801573a:	e15a      	b.n	80159f2 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801573c:	4b4b      	ldr	r3, [pc, #300]	; (801586c <tcp_receive+0x2c4>)
 801573e:	681a      	ldr	r2, [r3, #0]
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015744:	1ad3      	subs	r3, r2, r3
 8015746:	3b01      	subs	r3, #1
 8015748:	2b00      	cmp	r3, #0
 801574a:	f2c0 814d 	blt.w	80159e8 <tcp_receive+0x440>
 801574e:	4b47      	ldr	r3, [pc, #284]	; (801586c <tcp_receive+0x2c4>)
 8015750:	681a      	ldr	r2, [r3, #0]
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015756:	1ad3      	subs	r3, r2, r3
 8015758:	2b00      	cmp	r3, #0
 801575a:	f300 8145 	bgt.w	80159e8 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	8b5b      	ldrh	r3, [r3, #26]
 8015762:	f003 0304 	and.w	r3, r3, #4
 8015766:	2b00      	cmp	r3, #0
 8015768:	d010      	beq.n	801578c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	8b5b      	ldrh	r3, [r3, #26]
 801576e:	f023 0304 	bic.w	r3, r3, #4
 8015772:	b29a      	uxth	r2, r3
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2200      	movs	r2, #0
 8015788:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2200      	movs	r2, #0
 8015790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015794:	687b      	ldr	r3, [r7, #4]
 8015796:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801579a:	10db      	asrs	r3, r3, #3
 801579c:	b21b      	sxth	r3, r3
 801579e:	b29a      	uxth	r2, r3
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80157a6:	b29b      	uxth	r3, r3
 80157a8:	4413      	add	r3, r2
 80157aa:	b29b      	uxth	r3, r3
 80157ac:	b21a      	sxth	r2, r3
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80157b4:	4b2d      	ldr	r3, [pc, #180]	; (801586c <tcp_receive+0x2c4>)
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	b29a      	uxth	r2, r3
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80157be:	b29b      	uxth	r3, r3
 80157c0:	1ad3      	subs	r3, r2, r3
 80157c2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2200      	movs	r2, #0
 80157c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80157cc:	4b27      	ldr	r3, [pc, #156]	; (801586c <tcp_receive+0x2c4>)
 80157ce:	681a      	ldr	r2, [r3, #0]
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	7d1b      	ldrb	r3, [r3, #20]
 80157d8:	2b03      	cmp	r3, #3
 80157da:	f240 8096 	bls.w	801590a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80157ea:	429a      	cmp	r2, r3
 80157ec:	d244      	bcs.n	8015878 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80157ee:	687b      	ldr	r3, [r7, #4]
 80157f0:	8b5b      	ldrh	r3, [r3, #26]
 80157f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d001      	beq.n	80157fe <tcp_receive+0x256>
 80157fa:	2301      	movs	r3, #1
 80157fc:	e000      	b.n	8015800 <tcp_receive+0x258>
 80157fe:	2302      	movs	r3, #2
 8015800:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015804:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8015808:	b29a      	uxth	r2, r3
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801580e:	fb12 f303 	smulbb	r3, r2, r3
 8015812:	b29b      	uxth	r3, r3
 8015814:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8015816:	4293      	cmp	r3, r2
 8015818:	bf28      	it	cs
 801581a:	4613      	movcs	r3, r2
 801581c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015824:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015826:	4413      	add	r3, r2
 8015828:	b29a      	uxth	r2, r3
 801582a:	687b      	ldr	r3, [r7, #4]
 801582c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8015830:	429a      	cmp	r2, r3
 8015832:	d309      	bcc.n	8015848 <tcp_receive+0x2a0>
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801583a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801583c:	4413      	add	r3, r2
 801583e:	b29a      	uxth	r2, r3
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015846:	e060      	b.n	801590a <tcp_receive+0x362>
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801584e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8015852:	e05a      	b.n	801590a <tcp_receive+0x362>
 8015854:	0801db58 	.word	0x0801db58
 8015858:	0801de88 	.word	0x0801de88
 801585c:	0801dba4 	.word	0x0801dba4
 8015860:	0801dea4 	.word	0x0801dea4
 8015864:	24004b2c 	.word	0x24004b2c
 8015868:	24004b20 	.word	0x24004b20
 801586c:	24004b24 	.word	0x24004b24
 8015870:	24004b10 	.word	0x24004b10
 8015874:	24004b2a 	.word	0x24004b2a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015878:	687b      	ldr	r3, [r7, #4]
 801587a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801587e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015880:	4413      	add	r3, r2
 8015882:	b29a      	uxth	r2, r3
 8015884:	687b      	ldr	r3, [r7, #4]
 8015886:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801588a:	429a      	cmp	r2, r3
 801588c:	d309      	bcc.n	80158a2 <tcp_receive+0x2fa>
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8015894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8015896:	4413      	add	r3, r2
 8015898:	b29a      	uxth	r2, r3
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80158a0:	e004      	b.n	80158ac <tcp_receive+0x304>
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80158a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80158b8:	429a      	cmp	r2, r3
 80158ba:	d326      	bcc.n	801590a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80158c2:	687b      	ldr	r3, [r7, #4]
 80158c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80158c8:	1ad3      	subs	r3, r2, r3
 80158ca:	b29a      	uxth	r2, r3
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158dc:	4413      	add	r3, r2
 80158de:	b29a      	uxth	r2, r3
 80158e0:	687b      	ldr	r3, [r7, #4]
 80158e2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80158e6:	429a      	cmp	r2, r3
 80158e8:	d30a      	bcc.n	8015900 <tcp_receive+0x358>
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80158f4:	4413      	add	r3, r2
 80158f6:	b29a      	uxth	r2, r3
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80158fe:	e004      	b.n	801590a <tcp_receive+0x362>
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015906:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801590e:	687b      	ldr	r3, [r7, #4]
 8015910:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015912:	4a98      	ldr	r2, [pc, #608]	; (8015b74 <tcp_receive+0x5cc>)
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f7ff fdcb 	bl	80154b0 <tcp_free_acked_segments>
 801591a:	4602      	mov	r2, r0
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015928:	4a93      	ldr	r2, [pc, #588]	; (8015b78 <tcp_receive+0x5d0>)
 801592a:	6878      	ldr	r0, [r7, #4]
 801592c:	f7ff fdc0 	bl	80154b0 <tcp_free_acked_segments>
 8015930:	4602      	mov	r2, r0
 8015932:	687b      	ldr	r3, [r7, #4]
 8015934:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801593a:	2b00      	cmp	r3, #0
 801593c:	d104      	bne.n	8015948 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015944:	861a      	strh	r2, [r3, #48]	; 0x30
 8015946:	e002      	b.n	801594e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2200      	movs	r2, #0
 801594c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	2200      	movs	r2, #0
 8015952:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015958:	2b00      	cmp	r3, #0
 801595a:	d103      	bne.n	8015964 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	2200      	movs	r2, #0
 8015960:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801596a:	4b84      	ldr	r3, [pc, #528]	; (8015b7c <tcp_receive+0x5d4>)
 801596c:	881b      	ldrh	r3, [r3, #0]
 801596e:	4413      	add	r3, r2
 8015970:	b29a      	uxth	r2, r3
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	8b5b      	ldrh	r3, [r3, #26]
 801597c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015980:	2b00      	cmp	r3, #0
 8015982:	d035      	beq.n	80159f0 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015988:	2b00      	cmp	r3, #0
 801598a:	d118      	bne.n	80159be <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015990:	2b00      	cmp	r3, #0
 8015992:	d00c      	beq.n	80159ae <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015998:	687b      	ldr	r3, [r7, #4]
 801599a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801599c:	68db      	ldr	r3, [r3, #12]
 801599e:	685b      	ldr	r3, [r3, #4]
 80159a0:	4618      	mov	r0, r3
 80159a2:	f7fa fdd2 	bl	801054a <lwip_htonl>
 80159a6:	4603      	mov	r3, r0
 80159a8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	dc20      	bgt.n	80159f0 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	8b5b      	ldrh	r3, [r3, #26]
 80159b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80159b6:	b29a      	uxth	r2, r3
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80159bc:	e018      	b.n	80159f0 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159c6:	68db      	ldr	r3, [r3, #12]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7fa fdbd 	bl	801054a <lwip_htonl>
 80159d0:	4603      	mov	r3, r0
 80159d2:	1ae3      	subs	r3, r4, r3
 80159d4:	2b00      	cmp	r3, #0
 80159d6:	dc0b      	bgt.n	80159f0 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	8b5b      	ldrh	r3, [r3, #26]
 80159dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80159e0:	b29a      	uxth	r2, r3
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80159e6:	e003      	b.n	80159f0 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80159e8:	6878      	ldr	r0, [r7, #4]
 80159ea:	f002 fbcd 	bl	8018188 <tcp_send_empty_ack>
 80159ee:	e000      	b.n	80159f2 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80159f0:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d05b      	beq.n	8015ab2 <tcp_receive+0x50a>
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80159fe:	4b60      	ldr	r3, [pc, #384]	; (8015b80 <tcp_receive+0x5d8>)
 8015a00:	681b      	ldr	r3, [r3, #0]
 8015a02:	1ad3      	subs	r3, r2, r3
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	da54      	bge.n	8015ab2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015a08:	4b5e      	ldr	r3, [pc, #376]	; (8015b84 <tcp_receive+0x5dc>)
 8015a0a:	681b      	ldr	r3, [r3, #0]
 8015a0c:	b29a      	uxth	r2, r3
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a12:	b29b      	uxth	r3, r3
 8015a14:	1ad3      	subs	r3, r2, r3
 8015a16:	b29b      	uxth	r3, r3
 8015a18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015a1c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015a20:	687b      	ldr	r3, [r7, #4]
 8015a22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a26:	10db      	asrs	r3, r3, #3
 8015a28:	b21b      	sxth	r3, r3
 8015a2a:	b29b      	uxth	r3, r3
 8015a2c:	1ad3      	subs	r3, r2, r3
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a3a:	b29a      	uxth	r2, r3
 8015a3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015a40:	4413      	add	r3, r2
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	b21a      	sxth	r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015a4a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	da05      	bge.n	8015a5e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8015a52:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015a56:	425b      	negs	r3, r3
 8015a58:	b29b      	uxth	r3, r3
 8015a5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015a5e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a68:	109b      	asrs	r3, r3, #2
 8015a6a:	b21b      	sxth	r3, r3
 8015a6c:	b29b      	uxth	r3, r3
 8015a6e:	1ad3      	subs	r3, r2, r3
 8015a70:	b29b      	uxth	r3, r3
 8015a72:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a7c:	b29a      	uxth	r2, r3
 8015a7e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015a82:	4413      	add	r3, r2
 8015a84:	b29b      	uxth	r3, r3
 8015a86:	b21a      	sxth	r2, r3
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015a92:	10db      	asrs	r3, r3, #3
 8015a94:	b21b      	sxth	r3, r3
 8015a96:	b29a      	uxth	r2, r3
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015a9e:	b29b      	uxth	r3, r3
 8015aa0:	4413      	add	r3, r2
 8015aa2:	b29b      	uxth	r3, r3
 8015aa4:	b21a      	sxth	r2, r3
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	2200      	movs	r2, #0
 8015ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015ab2:	4b35      	ldr	r3, [pc, #212]	; (8015b88 <tcp_receive+0x5e0>)
 8015ab4:	881b      	ldrh	r3, [r3, #0]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	f000 84e1 	beq.w	801647e <tcp_receive+0xed6>
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	7d1b      	ldrb	r3, [r3, #20]
 8015ac0:	2b06      	cmp	r3, #6
 8015ac2:	f200 84dc 	bhi.w	801647e <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015aca:	4b30      	ldr	r3, [pc, #192]	; (8015b8c <tcp_receive+0x5e4>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	1ad3      	subs	r3, r2, r3
 8015ad0:	3b01      	subs	r3, #1
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	f2c0 808e 	blt.w	8015bf4 <tcp_receive+0x64c>
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015adc:	4b2a      	ldr	r3, [pc, #168]	; (8015b88 <tcp_receive+0x5e0>)
 8015ade:	881b      	ldrh	r3, [r3, #0]
 8015ae0:	4619      	mov	r1, r3
 8015ae2:	4b2a      	ldr	r3, [pc, #168]	; (8015b8c <tcp_receive+0x5e4>)
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	440b      	add	r3, r1
 8015ae8:	1ad3      	subs	r3, r2, r3
 8015aea:	3301      	adds	r3, #1
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	f300 8081 	bgt.w	8015bf4 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8015af2:	4b27      	ldr	r3, [pc, #156]	; (8015b90 <tcp_receive+0x5e8>)
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015afc:	4b23      	ldr	r3, [pc, #140]	; (8015b8c <tcp_receive+0x5e4>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	1ad3      	subs	r3, r2, r3
 8015b02:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8015b04:	4b22      	ldr	r3, [pc, #136]	; (8015b90 <tcp_receive+0x5e8>)
 8015b06:	685b      	ldr	r3, [r3, #4]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d106      	bne.n	8015b1a <tcp_receive+0x572>
 8015b0c:	4b21      	ldr	r3, [pc, #132]	; (8015b94 <tcp_receive+0x5ec>)
 8015b0e:	f240 5294 	movw	r2, #1428	; 0x594
 8015b12:	4921      	ldr	r1, [pc, #132]	; (8015b98 <tcp_receive+0x5f0>)
 8015b14:	4821      	ldr	r0, [pc, #132]	; (8015b9c <tcp_receive+0x5f4>)
 8015b16:	f005 fde1 	bl	801b6dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8015b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b1c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015b20:	4293      	cmp	r3, r2
 8015b22:	d906      	bls.n	8015b32 <tcp_receive+0x58a>
 8015b24:	4b1b      	ldr	r3, [pc, #108]	; (8015b94 <tcp_receive+0x5ec>)
 8015b26:	f240 5295 	movw	r2, #1429	; 0x595
 8015b2a:	491d      	ldr	r1, [pc, #116]	; (8015ba0 <tcp_receive+0x5f8>)
 8015b2c:	481b      	ldr	r0, [pc, #108]	; (8015b9c <tcp_receive+0x5f4>)
 8015b2e:	f005 fdd5 	bl	801b6dc <iprintf>
      off = (u16_t)off32;
 8015b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b34:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8015b38:	4b15      	ldr	r3, [pc, #84]	; (8015b90 <tcp_receive+0x5e8>)
 8015b3a:	685b      	ldr	r3, [r3, #4]
 8015b3c:	891b      	ldrh	r3, [r3, #8]
 8015b3e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015b42:	429a      	cmp	r2, r3
 8015b44:	d906      	bls.n	8015b54 <tcp_receive+0x5ac>
 8015b46:	4b13      	ldr	r3, [pc, #76]	; (8015b94 <tcp_receive+0x5ec>)
 8015b48:	f240 5297 	movw	r2, #1431	; 0x597
 8015b4c:	4915      	ldr	r1, [pc, #84]	; (8015ba4 <tcp_receive+0x5fc>)
 8015b4e:	4813      	ldr	r0, [pc, #76]	; (8015b9c <tcp_receive+0x5f4>)
 8015b50:	f005 fdc4 	bl	801b6dc <iprintf>
      inseg.len -= off;
 8015b54:	4b0e      	ldr	r3, [pc, #56]	; (8015b90 <tcp_receive+0x5e8>)
 8015b56:	891a      	ldrh	r2, [r3, #8]
 8015b58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b5c:	1ad3      	subs	r3, r2, r3
 8015b5e:	b29a      	uxth	r2, r3
 8015b60:	4b0b      	ldr	r3, [pc, #44]	; (8015b90 <tcp_receive+0x5e8>)
 8015b62:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015b64:	4b0a      	ldr	r3, [pc, #40]	; (8015b90 <tcp_receive+0x5e8>)
 8015b66:	685b      	ldr	r3, [r3, #4]
 8015b68:	891a      	ldrh	r2, [r3, #8]
 8015b6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015b6e:	1ad3      	subs	r3, r2, r3
 8015b70:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015b72:	e029      	b.n	8015bc8 <tcp_receive+0x620>
 8015b74:	0801dec0 	.word	0x0801dec0
 8015b78:	0801dec8 	.word	0x0801dec8
 8015b7c:	24004b28 	.word	0x24004b28
 8015b80:	24004b24 	.word	0x24004b24
 8015b84:	240082e0 	.word	0x240082e0
 8015b88:	24004b2a 	.word	0x24004b2a
 8015b8c:	24004b20 	.word	0x24004b20
 8015b90:	24004b00 	.word	0x24004b00
 8015b94:	0801db58 	.word	0x0801db58
 8015b98:	0801ded0 	.word	0x0801ded0
 8015b9c:	0801dba4 	.word	0x0801dba4
 8015ba0:	0801dee0 	.word	0x0801dee0
 8015ba4:	0801def0 	.word	0x0801def0
        off -= p->len;
 8015ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015baa:	895b      	ldrh	r3, [r3, #10]
 8015bac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015bb0:	1ad3      	subs	r3, r2, r3
 8015bb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8015bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bb8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015bba:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bbe:	2200      	movs	r2, #0
 8015bc0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8015bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8015bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015bca:	895b      	ldrh	r3, [r3, #10]
 8015bcc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015bd0:	429a      	cmp	r2, r3
 8015bd2:	d8e9      	bhi.n	8015ba8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8015bd4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015bd8:	4619      	mov	r1, r3
 8015bda:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015bdc:	f7fc f8c4 	bl	8011d68 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015be4:	4a91      	ldr	r2, [pc, #580]	; (8015e2c <tcp_receive+0x884>)
 8015be6:	6013      	str	r3, [r2, #0]
 8015be8:	4b91      	ldr	r3, [pc, #580]	; (8015e30 <tcp_receive+0x888>)
 8015bea:	68db      	ldr	r3, [r3, #12]
 8015bec:	4a8f      	ldr	r2, [pc, #572]	; (8015e2c <tcp_receive+0x884>)
 8015bee:	6812      	ldr	r2, [r2, #0]
 8015bf0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8015bf2:	e00d      	b.n	8015c10 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8015bf4:	4b8d      	ldr	r3, [pc, #564]	; (8015e2c <tcp_receive+0x884>)
 8015bf6:	681a      	ldr	r2, [r3, #0]
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bfc:	1ad3      	subs	r3, r2, r3
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	da06      	bge.n	8015c10 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	8b5b      	ldrh	r3, [r3, #26]
 8015c06:	f043 0302 	orr.w	r3, r3, #2
 8015c0a:	b29a      	uxth	r2, r3
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015c10:	4b86      	ldr	r3, [pc, #536]	; (8015e2c <tcp_receive+0x884>)
 8015c12:	681a      	ldr	r2, [r3, #0]
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c18:	1ad3      	subs	r3, r2, r3
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	f2c0 842a 	blt.w	8016474 <tcp_receive+0xecc>
 8015c20:	4b82      	ldr	r3, [pc, #520]	; (8015e2c <tcp_receive+0x884>)
 8015c22:	681a      	ldr	r2, [r3, #0]
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c28:	6879      	ldr	r1, [r7, #4]
 8015c2a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c2c:	440b      	add	r3, r1
 8015c2e:	1ad3      	subs	r3, r2, r3
 8015c30:	3301      	adds	r3, #1
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	f300 841e 	bgt.w	8016474 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015c3c:	4b7b      	ldr	r3, [pc, #492]	; (8015e2c <tcp_receive+0x884>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	429a      	cmp	r2, r3
 8015c42:	f040 829a 	bne.w	801617a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015c46:	4b7a      	ldr	r3, [pc, #488]	; (8015e30 <tcp_receive+0x888>)
 8015c48:	891c      	ldrh	r4, [r3, #8]
 8015c4a:	4b79      	ldr	r3, [pc, #484]	; (8015e30 <tcp_receive+0x888>)
 8015c4c:	68db      	ldr	r3, [r3, #12]
 8015c4e:	899b      	ldrh	r3, [r3, #12]
 8015c50:	b29b      	uxth	r3, r3
 8015c52:	4618      	mov	r0, r3
 8015c54:	f7fa fc64 	bl	8010520 <lwip_htons>
 8015c58:	4603      	mov	r3, r0
 8015c5a:	b2db      	uxtb	r3, r3
 8015c5c:	f003 0303 	and.w	r3, r3, #3
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d001      	beq.n	8015c68 <tcp_receive+0x6c0>
 8015c64:	2301      	movs	r3, #1
 8015c66:	e000      	b.n	8015c6a <tcp_receive+0x6c2>
 8015c68:	2300      	movs	r3, #0
 8015c6a:	4423      	add	r3, r4
 8015c6c:	b29a      	uxth	r2, r3
 8015c6e:	4b71      	ldr	r3, [pc, #452]	; (8015e34 <tcp_receive+0x88c>)
 8015c70:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015c76:	4b6f      	ldr	r3, [pc, #444]	; (8015e34 <tcp_receive+0x88c>)
 8015c78:	881b      	ldrh	r3, [r3, #0]
 8015c7a:	429a      	cmp	r2, r3
 8015c7c:	d275      	bcs.n	8015d6a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015c7e:	4b6c      	ldr	r3, [pc, #432]	; (8015e30 <tcp_receive+0x888>)
 8015c80:	68db      	ldr	r3, [r3, #12]
 8015c82:	899b      	ldrh	r3, [r3, #12]
 8015c84:	b29b      	uxth	r3, r3
 8015c86:	4618      	mov	r0, r3
 8015c88:	f7fa fc4a 	bl	8010520 <lwip_htons>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	f003 0301 	and.w	r3, r3, #1
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d01f      	beq.n	8015cd8 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015c98:	4b65      	ldr	r3, [pc, #404]	; (8015e30 <tcp_receive+0x888>)
 8015c9a:	68db      	ldr	r3, [r3, #12]
 8015c9c:	899b      	ldrh	r3, [r3, #12]
 8015c9e:	b29b      	uxth	r3, r3
 8015ca0:	b21b      	sxth	r3, r3
 8015ca2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015ca6:	b21c      	sxth	r4, r3
 8015ca8:	4b61      	ldr	r3, [pc, #388]	; (8015e30 <tcp_receive+0x888>)
 8015caa:	68db      	ldr	r3, [r3, #12]
 8015cac:	899b      	ldrh	r3, [r3, #12]
 8015cae:	b29b      	uxth	r3, r3
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7fa fc35 	bl	8010520 <lwip_htons>
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	b2db      	uxtb	r3, r3
 8015cba:	b29b      	uxth	r3, r3
 8015cbc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015cc0:	b29b      	uxth	r3, r3
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7fa fc2c 	bl	8010520 <lwip_htons>
 8015cc8:	4603      	mov	r3, r0
 8015cca:	b21b      	sxth	r3, r3
 8015ccc:	4323      	orrs	r3, r4
 8015cce:	b21a      	sxth	r2, r3
 8015cd0:	4b57      	ldr	r3, [pc, #348]	; (8015e30 <tcp_receive+0x888>)
 8015cd2:	68db      	ldr	r3, [r3, #12]
 8015cd4:	b292      	uxth	r2, r2
 8015cd6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8015cd8:	687b      	ldr	r3, [r7, #4]
 8015cda:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015cdc:	4b54      	ldr	r3, [pc, #336]	; (8015e30 <tcp_receive+0x888>)
 8015cde:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015ce0:	4b53      	ldr	r3, [pc, #332]	; (8015e30 <tcp_receive+0x888>)
 8015ce2:	68db      	ldr	r3, [r3, #12]
 8015ce4:	899b      	ldrh	r3, [r3, #12]
 8015ce6:	b29b      	uxth	r3, r3
 8015ce8:	4618      	mov	r0, r3
 8015cea:	f7fa fc19 	bl	8010520 <lwip_htons>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	b2db      	uxtb	r3, r3
 8015cf2:	f003 0302 	and.w	r3, r3, #2
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d005      	beq.n	8015d06 <tcp_receive+0x75e>
            inseg.len -= 1;
 8015cfa:	4b4d      	ldr	r3, [pc, #308]	; (8015e30 <tcp_receive+0x888>)
 8015cfc:	891b      	ldrh	r3, [r3, #8]
 8015cfe:	3b01      	subs	r3, #1
 8015d00:	b29a      	uxth	r2, r3
 8015d02:	4b4b      	ldr	r3, [pc, #300]	; (8015e30 <tcp_receive+0x888>)
 8015d04:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8015d06:	4b4a      	ldr	r3, [pc, #296]	; (8015e30 <tcp_receive+0x888>)
 8015d08:	685b      	ldr	r3, [r3, #4]
 8015d0a:	4a49      	ldr	r2, [pc, #292]	; (8015e30 <tcp_receive+0x888>)
 8015d0c:	8912      	ldrh	r2, [r2, #8]
 8015d0e:	4611      	mov	r1, r2
 8015d10:	4618      	mov	r0, r3
 8015d12:	f7fb ff29 	bl	8011b68 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015d16:	4b46      	ldr	r3, [pc, #280]	; (8015e30 <tcp_receive+0x888>)
 8015d18:	891c      	ldrh	r4, [r3, #8]
 8015d1a:	4b45      	ldr	r3, [pc, #276]	; (8015e30 <tcp_receive+0x888>)
 8015d1c:	68db      	ldr	r3, [r3, #12]
 8015d1e:	899b      	ldrh	r3, [r3, #12]
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7fa fbfc 	bl	8010520 <lwip_htons>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	b2db      	uxtb	r3, r3
 8015d2c:	f003 0303 	and.w	r3, r3, #3
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d001      	beq.n	8015d38 <tcp_receive+0x790>
 8015d34:	2301      	movs	r3, #1
 8015d36:	e000      	b.n	8015d3a <tcp_receive+0x792>
 8015d38:	2300      	movs	r3, #0
 8015d3a:	4423      	add	r3, r4
 8015d3c:	b29a      	uxth	r2, r3
 8015d3e:	4b3d      	ldr	r3, [pc, #244]	; (8015e34 <tcp_receive+0x88c>)
 8015d40:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015d42:	4b3c      	ldr	r3, [pc, #240]	; (8015e34 <tcp_receive+0x88c>)
 8015d44:	881b      	ldrh	r3, [r3, #0]
 8015d46:	461a      	mov	r2, r3
 8015d48:	4b38      	ldr	r3, [pc, #224]	; (8015e2c <tcp_receive+0x884>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	441a      	add	r2, r3
 8015d4e:	687b      	ldr	r3, [r7, #4]
 8015d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d52:	6879      	ldr	r1, [r7, #4]
 8015d54:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015d56:	440b      	add	r3, r1
 8015d58:	429a      	cmp	r2, r3
 8015d5a:	d006      	beq.n	8015d6a <tcp_receive+0x7c2>
 8015d5c:	4b36      	ldr	r3, [pc, #216]	; (8015e38 <tcp_receive+0x890>)
 8015d5e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8015d62:	4936      	ldr	r1, [pc, #216]	; (8015e3c <tcp_receive+0x894>)
 8015d64:	4836      	ldr	r0, [pc, #216]	; (8015e40 <tcp_receive+0x898>)
 8015d66:	f005 fcb9 	bl	801b6dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	f000 80e7 	beq.w	8015f42 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015d74:	4b2e      	ldr	r3, [pc, #184]	; (8015e30 <tcp_receive+0x888>)
 8015d76:	68db      	ldr	r3, [r3, #12]
 8015d78:	899b      	ldrh	r3, [r3, #12]
 8015d7a:	b29b      	uxth	r3, r3
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7fa fbcf 	bl	8010520 <lwip_htons>
 8015d82:	4603      	mov	r3, r0
 8015d84:	b2db      	uxtb	r3, r3
 8015d86:	f003 0301 	and.w	r3, r3, #1
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d010      	beq.n	8015db0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015d8e:	e00a      	b.n	8015da6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d94:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015da0:	68f8      	ldr	r0, [r7, #12]
 8015da2:	f7fd fcb0 	bl	8013706 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d1f0      	bne.n	8015d90 <tcp_receive+0x7e8>
 8015dae:	e0c8      	b.n	8015f42 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015db0:	687b      	ldr	r3, [r7, #4]
 8015db2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015db4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015db6:	e052      	b.n	8015e5e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015dba:	68db      	ldr	r3, [r3, #12]
 8015dbc:	899b      	ldrh	r3, [r3, #12]
 8015dbe:	b29b      	uxth	r3, r3
 8015dc0:	4618      	mov	r0, r3
 8015dc2:	f7fa fbad 	bl	8010520 <lwip_htons>
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	b2db      	uxtb	r3, r3
 8015dca:	f003 0301 	and.w	r3, r3, #1
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d03d      	beq.n	8015e4e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8015dd2:	4b17      	ldr	r3, [pc, #92]	; (8015e30 <tcp_receive+0x888>)
 8015dd4:	68db      	ldr	r3, [r3, #12]
 8015dd6:	899b      	ldrh	r3, [r3, #12]
 8015dd8:	b29b      	uxth	r3, r3
 8015dda:	4618      	mov	r0, r3
 8015ddc:	f7fa fba0 	bl	8010520 <lwip_htons>
 8015de0:	4603      	mov	r3, r0
 8015de2:	b2db      	uxtb	r3, r3
 8015de4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d130      	bne.n	8015e4e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8015dec:	4b10      	ldr	r3, [pc, #64]	; (8015e30 <tcp_receive+0x888>)
 8015dee:	68db      	ldr	r3, [r3, #12]
 8015df0:	899b      	ldrh	r3, [r3, #12]
 8015df2:	b29c      	uxth	r4, r3
 8015df4:	2001      	movs	r0, #1
 8015df6:	f7fa fb93 	bl	8010520 <lwip_htons>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	4b0c      	ldr	r3, [pc, #48]	; (8015e30 <tcp_receive+0x888>)
 8015e00:	68db      	ldr	r3, [r3, #12]
 8015e02:	4322      	orrs	r2, r4
 8015e04:	b292      	uxth	r2, r2
 8015e06:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8015e08:	4b09      	ldr	r3, [pc, #36]	; (8015e30 <tcp_receive+0x888>)
 8015e0a:	891c      	ldrh	r4, [r3, #8]
 8015e0c:	4b08      	ldr	r3, [pc, #32]	; (8015e30 <tcp_receive+0x888>)
 8015e0e:	68db      	ldr	r3, [r3, #12]
 8015e10:	899b      	ldrh	r3, [r3, #12]
 8015e12:	b29b      	uxth	r3, r3
 8015e14:	4618      	mov	r0, r3
 8015e16:	f7fa fb83 	bl	8010520 <lwip_htons>
 8015e1a:	4603      	mov	r3, r0
 8015e1c:	b2db      	uxtb	r3, r3
 8015e1e:	f003 0303 	and.w	r3, r3, #3
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d00e      	beq.n	8015e44 <tcp_receive+0x89c>
 8015e26:	2301      	movs	r3, #1
 8015e28:	e00d      	b.n	8015e46 <tcp_receive+0x89e>
 8015e2a:	bf00      	nop
 8015e2c:	24004b20 	.word	0x24004b20
 8015e30:	24004b00 	.word	0x24004b00
 8015e34:	24004b2a 	.word	0x24004b2a
 8015e38:	0801db58 	.word	0x0801db58
 8015e3c:	0801df00 	.word	0x0801df00
 8015e40:	0801dba4 	.word	0x0801dba4
 8015e44:	2300      	movs	r3, #0
 8015e46:	4423      	add	r3, r4
 8015e48:	b29a      	uxth	r2, r3
 8015e4a:	4b98      	ldr	r3, [pc, #608]	; (80160ac <tcp_receive+0xb04>)
 8015e4c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015e4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e50:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015e58:	6938      	ldr	r0, [r7, #16]
 8015e5a:	f7fd fc54 	bl	8013706 <tcp_seg_free>
            while (next &&
 8015e5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d00e      	beq.n	8015e82 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015e64:	4b91      	ldr	r3, [pc, #580]	; (80160ac <tcp_receive+0xb04>)
 8015e66:	881b      	ldrh	r3, [r3, #0]
 8015e68:	461a      	mov	r2, r3
 8015e6a:	4b91      	ldr	r3, [pc, #580]	; (80160b0 <tcp_receive+0xb08>)
 8015e6c:	681b      	ldr	r3, [r3, #0]
 8015e6e:	441a      	add	r2, r3
 8015e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	685b      	ldr	r3, [r3, #4]
 8015e76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015e78:	8909      	ldrh	r1, [r1, #8]
 8015e7a:	440b      	add	r3, r1
 8015e7c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	da9a      	bge.n	8015db8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015e82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d059      	beq.n	8015f3c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015e88:	4b88      	ldr	r3, [pc, #544]	; (80160ac <tcp_receive+0xb04>)
 8015e8a:	881b      	ldrh	r3, [r3, #0]
 8015e8c:	461a      	mov	r2, r3
 8015e8e:	4b88      	ldr	r3, [pc, #544]	; (80160b0 <tcp_receive+0xb08>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	441a      	add	r2, r3
 8015e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015e96:	68db      	ldr	r3, [r3, #12]
 8015e98:	685b      	ldr	r3, [r3, #4]
 8015e9a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	dd4d      	ble.n	8015f3c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015ea2:	68db      	ldr	r3, [r3, #12]
 8015ea4:	685b      	ldr	r3, [r3, #4]
 8015ea6:	b29a      	uxth	r2, r3
 8015ea8:	4b81      	ldr	r3, [pc, #516]	; (80160b0 <tcp_receive+0xb08>)
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	b29b      	uxth	r3, r3
 8015eae:	1ad3      	subs	r3, r2, r3
 8015eb0:	b29a      	uxth	r2, r3
 8015eb2:	4b80      	ldr	r3, [pc, #512]	; (80160b4 <tcp_receive+0xb0c>)
 8015eb4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8015eb6:	4b7f      	ldr	r3, [pc, #508]	; (80160b4 <tcp_receive+0xb0c>)
 8015eb8:	68db      	ldr	r3, [r3, #12]
 8015eba:	899b      	ldrh	r3, [r3, #12]
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	f7fa fb2e 	bl	8010520 <lwip_htons>
 8015ec4:	4603      	mov	r3, r0
 8015ec6:	b2db      	uxtb	r3, r3
 8015ec8:	f003 0302 	and.w	r3, r3, #2
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	d005      	beq.n	8015edc <tcp_receive+0x934>
                inseg.len -= 1;
 8015ed0:	4b78      	ldr	r3, [pc, #480]	; (80160b4 <tcp_receive+0xb0c>)
 8015ed2:	891b      	ldrh	r3, [r3, #8]
 8015ed4:	3b01      	subs	r3, #1
 8015ed6:	b29a      	uxth	r2, r3
 8015ed8:	4b76      	ldr	r3, [pc, #472]	; (80160b4 <tcp_receive+0xb0c>)
 8015eda:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8015edc:	4b75      	ldr	r3, [pc, #468]	; (80160b4 <tcp_receive+0xb0c>)
 8015ede:	685b      	ldr	r3, [r3, #4]
 8015ee0:	4a74      	ldr	r2, [pc, #464]	; (80160b4 <tcp_receive+0xb0c>)
 8015ee2:	8912      	ldrh	r2, [r2, #8]
 8015ee4:	4611      	mov	r1, r2
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f7fb fe3e 	bl	8011b68 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8015eec:	4b71      	ldr	r3, [pc, #452]	; (80160b4 <tcp_receive+0xb0c>)
 8015eee:	891c      	ldrh	r4, [r3, #8]
 8015ef0:	4b70      	ldr	r3, [pc, #448]	; (80160b4 <tcp_receive+0xb0c>)
 8015ef2:	68db      	ldr	r3, [r3, #12]
 8015ef4:	899b      	ldrh	r3, [r3, #12]
 8015ef6:	b29b      	uxth	r3, r3
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f7fa fb11 	bl	8010520 <lwip_htons>
 8015efe:	4603      	mov	r3, r0
 8015f00:	b2db      	uxtb	r3, r3
 8015f02:	f003 0303 	and.w	r3, r3, #3
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d001      	beq.n	8015f0e <tcp_receive+0x966>
 8015f0a:	2301      	movs	r3, #1
 8015f0c:	e000      	b.n	8015f10 <tcp_receive+0x968>
 8015f0e:	2300      	movs	r3, #0
 8015f10:	4423      	add	r3, r4
 8015f12:	b29a      	uxth	r2, r3
 8015f14:	4b65      	ldr	r3, [pc, #404]	; (80160ac <tcp_receive+0xb04>)
 8015f16:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015f18:	4b64      	ldr	r3, [pc, #400]	; (80160ac <tcp_receive+0xb04>)
 8015f1a:	881b      	ldrh	r3, [r3, #0]
 8015f1c:	461a      	mov	r2, r3
 8015f1e:	4b64      	ldr	r3, [pc, #400]	; (80160b0 <tcp_receive+0xb08>)
 8015f20:	681b      	ldr	r3, [r3, #0]
 8015f22:	441a      	add	r2, r3
 8015f24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015f26:	68db      	ldr	r3, [r3, #12]
 8015f28:	685b      	ldr	r3, [r3, #4]
 8015f2a:	429a      	cmp	r2, r3
 8015f2c:	d006      	beq.n	8015f3c <tcp_receive+0x994>
 8015f2e:	4b62      	ldr	r3, [pc, #392]	; (80160b8 <tcp_receive+0xb10>)
 8015f30:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8015f34:	4961      	ldr	r1, [pc, #388]	; (80160bc <tcp_receive+0xb14>)
 8015f36:	4862      	ldr	r0, [pc, #392]	; (80160c0 <tcp_receive+0xb18>)
 8015f38:	f005 fbd0 	bl	801b6dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015f40:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015f42:	4b5a      	ldr	r3, [pc, #360]	; (80160ac <tcp_receive+0xb04>)
 8015f44:	881b      	ldrh	r3, [r3, #0]
 8015f46:	461a      	mov	r2, r3
 8015f48:	4b59      	ldr	r3, [pc, #356]	; (80160b0 <tcp_receive+0xb08>)
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	441a      	add	r2, r3
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f56:	4b55      	ldr	r3, [pc, #340]	; (80160ac <tcp_receive+0xb04>)
 8015f58:	881b      	ldrh	r3, [r3, #0]
 8015f5a:	429a      	cmp	r2, r3
 8015f5c:	d206      	bcs.n	8015f6c <tcp_receive+0x9c4>
 8015f5e:	4b56      	ldr	r3, [pc, #344]	; (80160b8 <tcp_receive+0xb10>)
 8015f60:	f240 6207 	movw	r2, #1543	; 0x607
 8015f64:	4957      	ldr	r1, [pc, #348]	; (80160c4 <tcp_receive+0xb1c>)
 8015f66:	4856      	ldr	r0, [pc, #344]	; (80160c0 <tcp_receive+0xb18>)
 8015f68:	f005 fbb8 	bl	801b6dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015f70:	4b4e      	ldr	r3, [pc, #312]	; (80160ac <tcp_receive+0xb04>)
 8015f72:	881b      	ldrh	r3, [r3, #0]
 8015f74:	1ad3      	subs	r3, r2, r3
 8015f76:	b29a      	uxth	r2, r3
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015f7c:	6878      	ldr	r0, [r7, #4]
 8015f7e:	f7fc fe9d 	bl	8012cbc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015f82:	4b4c      	ldr	r3, [pc, #304]	; (80160b4 <tcp_receive+0xb0c>)
 8015f84:	685b      	ldr	r3, [r3, #4]
 8015f86:	891b      	ldrh	r3, [r3, #8]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d006      	beq.n	8015f9a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8015f8c:	4b49      	ldr	r3, [pc, #292]	; (80160b4 <tcp_receive+0xb0c>)
 8015f8e:	685b      	ldr	r3, [r3, #4]
 8015f90:	4a4d      	ldr	r2, [pc, #308]	; (80160c8 <tcp_receive+0xb20>)
 8015f92:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015f94:	4b47      	ldr	r3, [pc, #284]	; (80160b4 <tcp_receive+0xb0c>)
 8015f96:	2200      	movs	r2, #0
 8015f98:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015f9a:	4b46      	ldr	r3, [pc, #280]	; (80160b4 <tcp_receive+0xb0c>)
 8015f9c:	68db      	ldr	r3, [r3, #12]
 8015f9e:	899b      	ldrh	r3, [r3, #12]
 8015fa0:	b29b      	uxth	r3, r3
 8015fa2:	4618      	mov	r0, r3
 8015fa4:	f7fa fabc 	bl	8010520 <lwip_htons>
 8015fa8:	4603      	mov	r3, r0
 8015faa:	b2db      	uxtb	r3, r3
 8015fac:	f003 0301 	and.w	r3, r3, #1
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	f000 80b8 	beq.w	8016126 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015fb6:	4b45      	ldr	r3, [pc, #276]	; (80160cc <tcp_receive+0xb24>)
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	f043 0320 	orr.w	r3, r3, #32
 8015fbe:	b2da      	uxtb	r2, r3
 8015fc0:	4b42      	ldr	r3, [pc, #264]	; (80160cc <tcp_receive+0xb24>)
 8015fc2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015fc4:	e0af      	b.n	8016126 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fca:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015fd0:	68db      	ldr	r3, [r3, #12]
 8015fd2:	685b      	ldr	r3, [r3, #4]
 8015fd4:	4a36      	ldr	r2, [pc, #216]	; (80160b0 <tcp_receive+0xb08>)
 8015fd6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015fd8:	68bb      	ldr	r3, [r7, #8]
 8015fda:	891b      	ldrh	r3, [r3, #8]
 8015fdc:	461c      	mov	r4, r3
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	68db      	ldr	r3, [r3, #12]
 8015fe2:	899b      	ldrh	r3, [r3, #12]
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7fa fa9a 	bl	8010520 <lwip_htons>
 8015fec:	4603      	mov	r3, r0
 8015fee:	b2db      	uxtb	r3, r3
 8015ff0:	f003 0303 	and.w	r3, r3, #3
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d001      	beq.n	8015ffc <tcp_receive+0xa54>
 8015ff8:	2301      	movs	r3, #1
 8015ffa:	e000      	b.n	8015ffe <tcp_receive+0xa56>
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	191a      	adds	r2, r3, r4
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016004:	441a      	add	r2, r3
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801600e:	461c      	mov	r4, r3
 8016010:	68bb      	ldr	r3, [r7, #8]
 8016012:	891b      	ldrh	r3, [r3, #8]
 8016014:	461d      	mov	r5, r3
 8016016:	68bb      	ldr	r3, [r7, #8]
 8016018:	68db      	ldr	r3, [r3, #12]
 801601a:	899b      	ldrh	r3, [r3, #12]
 801601c:	b29b      	uxth	r3, r3
 801601e:	4618      	mov	r0, r3
 8016020:	f7fa fa7e 	bl	8010520 <lwip_htons>
 8016024:	4603      	mov	r3, r0
 8016026:	b2db      	uxtb	r3, r3
 8016028:	f003 0303 	and.w	r3, r3, #3
 801602c:	2b00      	cmp	r3, #0
 801602e:	d001      	beq.n	8016034 <tcp_receive+0xa8c>
 8016030:	2301      	movs	r3, #1
 8016032:	e000      	b.n	8016036 <tcp_receive+0xa8e>
 8016034:	2300      	movs	r3, #0
 8016036:	442b      	add	r3, r5
 8016038:	429c      	cmp	r4, r3
 801603a:	d206      	bcs.n	801604a <tcp_receive+0xaa2>
 801603c:	4b1e      	ldr	r3, [pc, #120]	; (80160b8 <tcp_receive+0xb10>)
 801603e:	f240 622b 	movw	r2, #1579	; 0x62b
 8016042:	4923      	ldr	r1, [pc, #140]	; (80160d0 <tcp_receive+0xb28>)
 8016044:	481e      	ldr	r0, [pc, #120]	; (80160c0 <tcp_receive+0xb18>)
 8016046:	f005 fb49 	bl	801b6dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801604a:	68bb      	ldr	r3, [r7, #8]
 801604c:	891b      	ldrh	r3, [r3, #8]
 801604e:	461c      	mov	r4, r3
 8016050:	68bb      	ldr	r3, [r7, #8]
 8016052:	68db      	ldr	r3, [r3, #12]
 8016054:	899b      	ldrh	r3, [r3, #12]
 8016056:	b29b      	uxth	r3, r3
 8016058:	4618      	mov	r0, r3
 801605a:	f7fa fa61 	bl	8010520 <lwip_htons>
 801605e:	4603      	mov	r3, r0
 8016060:	b2db      	uxtb	r3, r3
 8016062:	f003 0303 	and.w	r3, r3, #3
 8016066:	2b00      	cmp	r3, #0
 8016068:	d001      	beq.n	801606e <tcp_receive+0xac6>
 801606a:	2301      	movs	r3, #1
 801606c:	e000      	b.n	8016070 <tcp_receive+0xac8>
 801606e:	2300      	movs	r3, #0
 8016070:	1919      	adds	r1, r3, r4
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016076:	b28b      	uxth	r3, r1
 8016078:	1ad3      	subs	r3, r2, r3
 801607a:	b29a      	uxth	r2, r3
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8016080:	6878      	ldr	r0, [r7, #4]
 8016082:	f7fc fe1b 	bl	8012cbc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016086:	68bb      	ldr	r3, [r7, #8]
 8016088:	685b      	ldr	r3, [r3, #4]
 801608a:	891b      	ldrh	r3, [r3, #8]
 801608c:	2b00      	cmp	r3, #0
 801608e:	d028      	beq.n	80160e2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8016090:	4b0d      	ldr	r3, [pc, #52]	; (80160c8 <tcp_receive+0xb20>)
 8016092:	681b      	ldr	r3, [r3, #0]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d01d      	beq.n	80160d4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016098:	4b0b      	ldr	r3, [pc, #44]	; (80160c8 <tcp_receive+0xb20>)
 801609a:	681a      	ldr	r2, [r3, #0]
 801609c:	68bb      	ldr	r3, [r7, #8]
 801609e:	685b      	ldr	r3, [r3, #4]
 80160a0:	4619      	mov	r1, r3
 80160a2:	4610      	mov	r0, r2
 80160a4:	f7fb ffb4 	bl	8012010 <pbuf_cat>
 80160a8:	e018      	b.n	80160dc <tcp_receive+0xb34>
 80160aa:	bf00      	nop
 80160ac:	24004b2a 	.word	0x24004b2a
 80160b0:	24004b20 	.word	0x24004b20
 80160b4:	24004b00 	.word	0x24004b00
 80160b8:	0801db58 	.word	0x0801db58
 80160bc:	0801df38 	.word	0x0801df38
 80160c0:	0801dba4 	.word	0x0801dba4
 80160c4:	0801df74 	.word	0x0801df74
 80160c8:	24004b30 	.word	0x24004b30
 80160cc:	24004b2d 	.word	0x24004b2d
 80160d0:	0801df94 	.word	0x0801df94
            } else {
              recv_data = cseg->p;
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	685b      	ldr	r3, [r3, #4]
 80160d8:	4a70      	ldr	r2, [pc, #448]	; (801629c <tcp_receive+0xcf4>)
 80160da:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	2200      	movs	r2, #0
 80160e0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	68db      	ldr	r3, [r3, #12]
 80160e6:	899b      	ldrh	r3, [r3, #12]
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	4618      	mov	r0, r3
 80160ec:	f7fa fa18 	bl	8010520 <lwip_htons>
 80160f0:	4603      	mov	r3, r0
 80160f2:	b2db      	uxtb	r3, r3
 80160f4:	f003 0301 	and.w	r3, r3, #1
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d00d      	beq.n	8016118 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80160fc:	4b68      	ldr	r3, [pc, #416]	; (80162a0 <tcp_receive+0xcf8>)
 80160fe:	781b      	ldrb	r3, [r3, #0]
 8016100:	f043 0320 	orr.w	r3, r3, #32
 8016104:	b2da      	uxtb	r2, r3
 8016106:	4b66      	ldr	r3, [pc, #408]	; (80162a0 <tcp_receive+0xcf8>)
 8016108:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	7d1b      	ldrb	r3, [r3, #20]
 801610e:	2b04      	cmp	r3, #4
 8016110:	d102      	bne.n	8016118 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8016112:	687b      	ldr	r3, [r7, #4]
 8016114:	2207      	movs	r2, #7
 8016116:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016118:	68bb      	ldr	r3, [r7, #8]
 801611a:	681a      	ldr	r2, [r3, #0]
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8016120:	68b8      	ldr	r0, [r7, #8]
 8016122:	f7fd faf0 	bl	8013706 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801612a:	2b00      	cmp	r3, #0
 801612c:	d008      	beq.n	8016140 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016132:	68db      	ldr	r3, [r3, #12]
 8016134:	685a      	ldr	r2, [r3, #4]
 8016136:	687b      	ldr	r3, [r7, #4]
 8016138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801613a:	429a      	cmp	r2, r3
 801613c:	f43f af43 	beq.w	8015fc6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8016140:	687b      	ldr	r3, [r7, #4]
 8016142:	8b5b      	ldrh	r3, [r3, #26]
 8016144:	f003 0301 	and.w	r3, r3, #1
 8016148:	2b00      	cmp	r3, #0
 801614a:	d00e      	beq.n	801616a <tcp_receive+0xbc2>
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	8b5b      	ldrh	r3, [r3, #26]
 8016150:	f023 0301 	bic.w	r3, r3, #1
 8016154:	b29a      	uxth	r2, r3
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	835a      	strh	r2, [r3, #26]
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	8b5b      	ldrh	r3, [r3, #26]
 801615e:	f043 0302 	orr.w	r3, r3, #2
 8016162:	b29a      	uxth	r2, r3
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016168:	e188      	b.n	801647c <tcp_receive+0xed4>
        tcp_ack(pcb);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	8b5b      	ldrh	r3, [r3, #26]
 801616e:	f043 0301 	orr.w	r3, r3, #1
 8016172:	b29a      	uxth	r2, r3
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8016178:	e180      	b.n	801647c <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801617e:	2b00      	cmp	r3, #0
 8016180:	d106      	bne.n	8016190 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8016182:	4848      	ldr	r0, [pc, #288]	; (80162a4 <tcp_receive+0xcfc>)
 8016184:	f7fd faf6 	bl	8013774 <tcp_seg_copy>
 8016188:	4602      	mov	r2, r0
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	675a      	str	r2, [r3, #116]	; 0x74
 801618e:	e16d      	b.n	801646c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8016190:	2300      	movs	r3, #0
 8016192:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016198:	63bb      	str	r3, [r7, #56]	; 0x38
 801619a:	e157      	b.n	801644c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 801619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801619e:	68db      	ldr	r3, [r3, #12]
 80161a0:	685a      	ldr	r2, [r3, #4]
 80161a2:	4b41      	ldr	r3, [pc, #260]	; (80162a8 <tcp_receive+0xd00>)
 80161a4:	681b      	ldr	r3, [r3, #0]
 80161a6:	429a      	cmp	r2, r3
 80161a8:	d11d      	bne.n	80161e6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80161aa:	4b3e      	ldr	r3, [pc, #248]	; (80162a4 <tcp_receive+0xcfc>)
 80161ac:	891a      	ldrh	r2, [r3, #8]
 80161ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161b0:	891b      	ldrh	r3, [r3, #8]
 80161b2:	429a      	cmp	r2, r3
 80161b4:	f240 814f 	bls.w	8016456 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80161b8:	483a      	ldr	r0, [pc, #232]	; (80162a4 <tcp_receive+0xcfc>)
 80161ba:	f7fd fadb 	bl	8013774 <tcp_seg_copy>
 80161be:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80161c0:	697b      	ldr	r3, [r7, #20]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	f000 8149 	beq.w	801645a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80161c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d003      	beq.n	80161d6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80161ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161d0:	697a      	ldr	r2, [r7, #20]
 80161d2:	601a      	str	r2, [r3, #0]
 80161d4:	e002      	b.n	80161dc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	697a      	ldr	r2, [r7, #20]
 80161da:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80161dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80161de:	6978      	ldr	r0, [r7, #20]
 80161e0:	f7ff f8de 	bl	80153a0 <tcp_oos_insert_segment>
                }
                break;
 80161e4:	e139      	b.n	801645a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80161e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d117      	bne.n	801621c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80161ec:	4b2e      	ldr	r3, [pc, #184]	; (80162a8 <tcp_receive+0xd00>)
 80161ee:	681a      	ldr	r2, [r3, #0]
 80161f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80161f2:	68db      	ldr	r3, [r3, #12]
 80161f4:	685b      	ldr	r3, [r3, #4]
 80161f6:	1ad3      	subs	r3, r2, r3
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	da57      	bge.n	80162ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80161fc:	4829      	ldr	r0, [pc, #164]	; (80162a4 <tcp_receive+0xcfc>)
 80161fe:	f7fd fab9 	bl	8013774 <tcp_seg_copy>
 8016202:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016204:	69bb      	ldr	r3, [r7, #24]
 8016206:	2b00      	cmp	r3, #0
 8016208:	f000 8129 	beq.w	801645e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	69ba      	ldr	r2, [r7, #24]
 8016210:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8016212:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016214:	69b8      	ldr	r0, [r7, #24]
 8016216:	f7ff f8c3 	bl	80153a0 <tcp_oos_insert_segment>
                  }
                  break;
 801621a:	e120      	b.n	801645e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801621c:	4b22      	ldr	r3, [pc, #136]	; (80162a8 <tcp_receive+0xd00>)
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016222:	68db      	ldr	r3, [r3, #12]
 8016224:	685b      	ldr	r3, [r3, #4]
 8016226:	1ad3      	subs	r3, r2, r3
 8016228:	3b01      	subs	r3, #1
 801622a:	2b00      	cmp	r3, #0
 801622c:	db3e      	blt.n	80162ac <tcp_receive+0xd04>
 801622e:	4b1e      	ldr	r3, [pc, #120]	; (80162a8 <tcp_receive+0xd00>)
 8016230:	681a      	ldr	r2, [r3, #0]
 8016232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016234:	68db      	ldr	r3, [r3, #12]
 8016236:	685b      	ldr	r3, [r3, #4]
 8016238:	1ad3      	subs	r3, r2, r3
 801623a:	3301      	adds	r3, #1
 801623c:	2b00      	cmp	r3, #0
 801623e:	dc35      	bgt.n	80162ac <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016240:	4818      	ldr	r0, [pc, #96]	; (80162a4 <tcp_receive+0xcfc>)
 8016242:	f7fd fa97 	bl	8013774 <tcp_seg_copy>
 8016246:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8016248:	69fb      	ldr	r3, [r7, #28]
 801624a:	2b00      	cmp	r3, #0
 801624c:	f000 8109 	beq.w	8016462 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8016250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016252:	68db      	ldr	r3, [r3, #12]
 8016254:	685b      	ldr	r3, [r3, #4]
 8016256:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016258:	8912      	ldrh	r2, [r2, #8]
 801625a:	441a      	add	r2, r3
 801625c:	4b12      	ldr	r3, [pc, #72]	; (80162a8 <tcp_receive+0xd00>)
 801625e:	681b      	ldr	r3, [r3, #0]
 8016260:	1ad3      	subs	r3, r2, r3
 8016262:	2b00      	cmp	r3, #0
 8016264:	dd12      	ble.n	801628c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8016266:	4b10      	ldr	r3, [pc, #64]	; (80162a8 <tcp_receive+0xd00>)
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	b29a      	uxth	r2, r3
 801626c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801626e:	68db      	ldr	r3, [r3, #12]
 8016270:	685b      	ldr	r3, [r3, #4]
 8016272:	b29b      	uxth	r3, r3
 8016274:	1ad3      	subs	r3, r2, r3
 8016276:	b29a      	uxth	r2, r3
 8016278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801627a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801627c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801627e:	685a      	ldr	r2, [r3, #4]
 8016280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016282:	891b      	ldrh	r3, [r3, #8]
 8016284:	4619      	mov	r1, r3
 8016286:	4610      	mov	r0, r2
 8016288:	f7fb fc6e 	bl	8011b68 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801628c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801628e:	69fa      	ldr	r2, [r7, #28]
 8016290:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8016292:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8016294:	69f8      	ldr	r0, [r7, #28]
 8016296:	f7ff f883 	bl	80153a0 <tcp_oos_insert_segment>
                  }
                  break;
 801629a:	e0e2      	b.n	8016462 <tcp_receive+0xeba>
 801629c:	24004b30 	.word	0x24004b30
 80162a0:	24004b2d 	.word	0x24004b2d
 80162a4:	24004b00 	.word	0x24004b00
 80162a8:	24004b20 	.word	0x24004b20
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80162ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ae:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80162b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	f040 80c6 	bne.w	8016446 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80162ba:	4b80      	ldr	r3, [pc, #512]	; (80164bc <tcp_receive+0xf14>)
 80162bc:	681a      	ldr	r2, [r3, #0]
 80162be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162c0:	68db      	ldr	r3, [r3, #12]
 80162c2:	685b      	ldr	r3, [r3, #4]
 80162c4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	f340 80bd 	ble.w	8016446 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80162cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162ce:	68db      	ldr	r3, [r3, #12]
 80162d0:	899b      	ldrh	r3, [r3, #12]
 80162d2:	b29b      	uxth	r3, r3
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7fa f923 	bl	8010520 <lwip_htons>
 80162da:	4603      	mov	r3, r0
 80162dc:	b2db      	uxtb	r3, r3
 80162de:	f003 0301 	and.w	r3, r3, #1
 80162e2:	2b00      	cmp	r3, #0
 80162e4:	f040 80bf 	bne.w	8016466 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80162e8:	4875      	ldr	r0, [pc, #468]	; (80164c0 <tcp_receive+0xf18>)
 80162ea:	f7fd fa43 	bl	8013774 <tcp_seg_copy>
 80162ee:	4602      	mov	r2, r0
 80162f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80162f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	f000 80b6 	beq.w	801646a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80162fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016300:	68db      	ldr	r3, [r3, #12]
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016306:	8912      	ldrh	r2, [r2, #8]
 8016308:	441a      	add	r2, r3
 801630a:	4b6c      	ldr	r3, [pc, #432]	; (80164bc <tcp_receive+0xf14>)
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	1ad3      	subs	r3, r2, r3
 8016310:	2b00      	cmp	r3, #0
 8016312:	dd12      	ble.n	801633a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016314:	4b69      	ldr	r3, [pc, #420]	; (80164bc <tcp_receive+0xf14>)
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	b29a      	uxth	r2, r3
 801631a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801631c:	68db      	ldr	r3, [r3, #12]
 801631e:	685b      	ldr	r3, [r3, #4]
 8016320:	b29b      	uxth	r3, r3
 8016322:	1ad3      	subs	r3, r2, r3
 8016324:	b29a      	uxth	r2, r3
 8016326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016328:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801632a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801632c:	685a      	ldr	r2, [r3, #4]
 801632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016330:	891b      	ldrh	r3, [r3, #8]
 8016332:	4619      	mov	r1, r3
 8016334:	4610      	mov	r0, r2
 8016336:	f7fb fc17 	bl	8011b68 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801633a:	4b62      	ldr	r3, [pc, #392]	; (80164c4 <tcp_receive+0xf1c>)
 801633c:	881b      	ldrh	r3, [r3, #0]
 801633e:	461a      	mov	r2, r3
 8016340:	4b5e      	ldr	r3, [pc, #376]	; (80164bc <tcp_receive+0xf14>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	441a      	add	r2, r3
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801634a:	6879      	ldr	r1, [r7, #4]
 801634c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801634e:	440b      	add	r3, r1
 8016350:	1ad3      	subs	r3, r2, r3
 8016352:	2b00      	cmp	r3, #0
 8016354:	f340 8089 	ble.w	801646a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8016358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	899b      	ldrh	r3, [r3, #12]
 8016360:	b29b      	uxth	r3, r3
 8016362:	4618      	mov	r0, r3
 8016364:	f7fa f8dc 	bl	8010520 <lwip_htons>
 8016368:	4603      	mov	r3, r0
 801636a:	b2db      	uxtb	r3, r3
 801636c:	f003 0301 	and.w	r3, r3, #1
 8016370:	2b00      	cmp	r3, #0
 8016372:	d022      	beq.n	80163ba <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8016374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	899b      	ldrh	r3, [r3, #12]
 801637c:	b29b      	uxth	r3, r3
 801637e:	b21b      	sxth	r3, r3
 8016380:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016384:	b21c      	sxth	r4, r3
 8016386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016388:	681b      	ldr	r3, [r3, #0]
 801638a:	68db      	ldr	r3, [r3, #12]
 801638c:	899b      	ldrh	r3, [r3, #12]
 801638e:	b29b      	uxth	r3, r3
 8016390:	4618      	mov	r0, r3
 8016392:	f7fa f8c5 	bl	8010520 <lwip_htons>
 8016396:	4603      	mov	r3, r0
 8016398:	b2db      	uxtb	r3, r3
 801639a:	b29b      	uxth	r3, r3
 801639c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80163a0:	b29b      	uxth	r3, r3
 80163a2:	4618      	mov	r0, r3
 80163a4:	f7fa f8bc 	bl	8010520 <lwip_htons>
 80163a8:	4603      	mov	r3, r0
 80163aa:	b21b      	sxth	r3, r3
 80163ac:	4323      	orrs	r3, r4
 80163ae:	b21a      	sxth	r2, r3
 80163b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	68db      	ldr	r3, [r3, #12]
 80163b6:	b292      	uxth	r2, r2
 80163b8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163be:	b29a      	uxth	r2, r3
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80163c4:	4413      	add	r3, r2
 80163c6:	b299      	uxth	r1, r3
 80163c8:	4b3c      	ldr	r3, [pc, #240]	; (80164bc <tcp_receive+0xf14>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	b29a      	uxth	r2, r3
 80163ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	1a8a      	subs	r2, r1, r2
 80163d4:	b292      	uxth	r2, r2
 80163d6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80163d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163da:	681b      	ldr	r3, [r3, #0]
 80163dc:	685a      	ldr	r2, [r3, #4]
 80163de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	891b      	ldrh	r3, [r3, #8]
 80163e4:	4619      	mov	r1, r3
 80163e6:	4610      	mov	r0, r2
 80163e8:	f7fb fbbe 	bl	8011b68 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80163ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	891c      	ldrh	r4, [r3, #8]
 80163f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	68db      	ldr	r3, [r3, #12]
 80163f8:	899b      	ldrh	r3, [r3, #12]
 80163fa:	b29b      	uxth	r3, r3
 80163fc:	4618      	mov	r0, r3
 80163fe:	f7fa f88f 	bl	8010520 <lwip_htons>
 8016402:	4603      	mov	r3, r0
 8016404:	b2db      	uxtb	r3, r3
 8016406:	f003 0303 	and.w	r3, r3, #3
 801640a:	2b00      	cmp	r3, #0
 801640c:	d001      	beq.n	8016412 <tcp_receive+0xe6a>
 801640e:	2301      	movs	r3, #1
 8016410:	e000      	b.n	8016414 <tcp_receive+0xe6c>
 8016412:	2300      	movs	r3, #0
 8016414:	4423      	add	r3, r4
 8016416:	b29a      	uxth	r2, r3
 8016418:	4b2a      	ldr	r3, [pc, #168]	; (80164c4 <tcp_receive+0xf1c>)
 801641a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801641c:	4b29      	ldr	r3, [pc, #164]	; (80164c4 <tcp_receive+0xf1c>)
 801641e:	881b      	ldrh	r3, [r3, #0]
 8016420:	461a      	mov	r2, r3
 8016422:	4b26      	ldr	r3, [pc, #152]	; (80164bc <tcp_receive+0xf14>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	441a      	add	r2, r3
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801642c:	6879      	ldr	r1, [r7, #4]
 801642e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016430:	440b      	add	r3, r1
 8016432:	429a      	cmp	r2, r3
 8016434:	d019      	beq.n	801646a <tcp_receive+0xec2>
 8016436:	4b24      	ldr	r3, [pc, #144]	; (80164c8 <tcp_receive+0xf20>)
 8016438:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801643c:	4923      	ldr	r1, [pc, #140]	; (80164cc <tcp_receive+0xf24>)
 801643e:	4824      	ldr	r0, [pc, #144]	; (80164d0 <tcp_receive+0xf28>)
 8016440:	f005 f94c 	bl	801b6dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8016444:	e011      	b.n	801646a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	63bb      	str	r3, [r7, #56]	; 0x38
 801644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801644e:	2b00      	cmp	r3, #0
 8016450:	f47f aea4 	bne.w	801619c <tcp_receive+0xbf4>
 8016454:	e00a      	b.n	801646c <tcp_receive+0xec4>
                break;
 8016456:	bf00      	nop
 8016458:	e008      	b.n	801646c <tcp_receive+0xec4>
                break;
 801645a:	bf00      	nop
 801645c:	e006      	b.n	801646c <tcp_receive+0xec4>
                  break;
 801645e:	bf00      	nop
 8016460:	e004      	b.n	801646c <tcp_receive+0xec4>
                  break;
 8016462:	bf00      	nop
 8016464:	e002      	b.n	801646c <tcp_receive+0xec4>
                  break;
 8016466:	bf00      	nop
 8016468:	e000      	b.n	801646c <tcp_receive+0xec4>
                break;
 801646a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f001 fe8b 	bl	8018188 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8016472:	e003      	b.n	801647c <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8016474:	6878      	ldr	r0, [r7, #4]
 8016476:	f001 fe87 	bl	8018188 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801647a:	e01a      	b.n	80164b2 <tcp_receive+0xf0a>
 801647c:	e019      	b.n	80164b2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801647e:	4b0f      	ldr	r3, [pc, #60]	; (80164bc <tcp_receive+0xf14>)
 8016480:	681a      	ldr	r2, [r3, #0]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016486:	1ad3      	subs	r3, r2, r3
 8016488:	2b00      	cmp	r3, #0
 801648a:	db0a      	blt.n	80164a2 <tcp_receive+0xefa>
 801648c:	4b0b      	ldr	r3, [pc, #44]	; (80164bc <tcp_receive+0xf14>)
 801648e:	681a      	ldr	r2, [r3, #0]
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016494:	6879      	ldr	r1, [r7, #4]
 8016496:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016498:	440b      	add	r3, r1
 801649a:	1ad3      	subs	r3, r2, r3
 801649c:	3301      	adds	r3, #1
 801649e:	2b00      	cmp	r3, #0
 80164a0:	dd07      	ble.n	80164b2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	8b5b      	ldrh	r3, [r3, #26]
 80164a6:	f043 0302 	orr.w	r3, r3, #2
 80164aa:	b29a      	uxth	r2, r3
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80164b0:	e7ff      	b.n	80164b2 <tcp_receive+0xf0a>
 80164b2:	bf00      	nop
 80164b4:	3750      	adds	r7, #80	; 0x50
 80164b6:	46bd      	mov	sp, r7
 80164b8:	bdb0      	pop	{r4, r5, r7, pc}
 80164ba:	bf00      	nop
 80164bc:	24004b20 	.word	0x24004b20
 80164c0:	24004b00 	.word	0x24004b00
 80164c4:	24004b2a 	.word	0x24004b2a
 80164c8:	0801db58 	.word	0x0801db58
 80164cc:	0801df00 	.word	0x0801df00
 80164d0:	0801dba4 	.word	0x0801dba4

080164d4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80164d4:	b480      	push	{r7}
 80164d6:	b083      	sub	sp, #12
 80164d8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80164da:	4b15      	ldr	r3, [pc, #84]	; (8016530 <tcp_get_next_optbyte+0x5c>)
 80164dc:	881b      	ldrh	r3, [r3, #0]
 80164de:	1c5a      	adds	r2, r3, #1
 80164e0:	b291      	uxth	r1, r2
 80164e2:	4a13      	ldr	r2, [pc, #76]	; (8016530 <tcp_get_next_optbyte+0x5c>)
 80164e4:	8011      	strh	r1, [r2, #0]
 80164e6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80164e8:	4b12      	ldr	r3, [pc, #72]	; (8016534 <tcp_get_next_optbyte+0x60>)
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d004      	beq.n	80164fa <tcp_get_next_optbyte+0x26>
 80164f0:	4b11      	ldr	r3, [pc, #68]	; (8016538 <tcp_get_next_optbyte+0x64>)
 80164f2:	881b      	ldrh	r3, [r3, #0]
 80164f4:	88fa      	ldrh	r2, [r7, #6]
 80164f6:	429a      	cmp	r2, r3
 80164f8:	d208      	bcs.n	801650c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80164fa:	4b10      	ldr	r3, [pc, #64]	; (801653c <tcp_get_next_optbyte+0x68>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	3314      	adds	r3, #20
 8016500:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016502:	88fb      	ldrh	r3, [r7, #6]
 8016504:	683a      	ldr	r2, [r7, #0]
 8016506:	4413      	add	r3, r2
 8016508:	781b      	ldrb	r3, [r3, #0]
 801650a:	e00b      	b.n	8016524 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801650c:	88fb      	ldrh	r3, [r7, #6]
 801650e:	b2da      	uxtb	r2, r3
 8016510:	4b09      	ldr	r3, [pc, #36]	; (8016538 <tcp_get_next_optbyte+0x64>)
 8016512:	881b      	ldrh	r3, [r3, #0]
 8016514:	b2db      	uxtb	r3, r3
 8016516:	1ad3      	subs	r3, r2, r3
 8016518:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801651a:	4b06      	ldr	r3, [pc, #24]	; (8016534 <tcp_get_next_optbyte+0x60>)
 801651c:	681a      	ldr	r2, [r3, #0]
 801651e:	797b      	ldrb	r3, [r7, #5]
 8016520:	4413      	add	r3, r2
 8016522:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016524:	4618      	mov	r0, r3
 8016526:	370c      	adds	r7, #12
 8016528:	46bd      	mov	sp, r7
 801652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801652e:	4770      	bx	lr
 8016530:	24004b1c 	.word	0x24004b1c
 8016534:	24004b18 	.word	0x24004b18
 8016538:	24004b16 	.word	0x24004b16
 801653c:	24004b10 	.word	0x24004b10

08016540 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016540:	b580      	push	{r7, lr}
 8016542:	b084      	sub	sp, #16
 8016544:	af00      	add	r7, sp, #0
 8016546:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d106      	bne.n	801655c <tcp_parseopt+0x1c>
 801654e:	4b32      	ldr	r3, [pc, #200]	; (8016618 <tcp_parseopt+0xd8>)
 8016550:	f240 727d 	movw	r2, #1917	; 0x77d
 8016554:	4931      	ldr	r1, [pc, #196]	; (801661c <tcp_parseopt+0xdc>)
 8016556:	4832      	ldr	r0, [pc, #200]	; (8016620 <tcp_parseopt+0xe0>)
 8016558:	f005 f8c0 	bl	801b6dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801655c:	4b31      	ldr	r3, [pc, #196]	; (8016624 <tcp_parseopt+0xe4>)
 801655e:	881b      	ldrh	r3, [r3, #0]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d055      	beq.n	8016610 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016564:	4b30      	ldr	r3, [pc, #192]	; (8016628 <tcp_parseopt+0xe8>)
 8016566:	2200      	movs	r2, #0
 8016568:	801a      	strh	r2, [r3, #0]
 801656a:	e045      	b.n	80165f8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801656c:	f7ff ffb2 	bl	80164d4 <tcp_get_next_optbyte>
 8016570:	4603      	mov	r3, r0
 8016572:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016574:	7bfb      	ldrb	r3, [r7, #15]
 8016576:	2b02      	cmp	r3, #2
 8016578:	d006      	beq.n	8016588 <tcp_parseopt+0x48>
 801657a:	2b02      	cmp	r3, #2
 801657c:	dc2b      	bgt.n	80165d6 <tcp_parseopt+0x96>
 801657e:	2b00      	cmp	r3, #0
 8016580:	d041      	beq.n	8016606 <tcp_parseopt+0xc6>
 8016582:	2b01      	cmp	r3, #1
 8016584:	d127      	bne.n	80165d6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8016586:	e037      	b.n	80165f8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016588:	f7ff ffa4 	bl	80164d4 <tcp_get_next_optbyte>
 801658c:	4603      	mov	r3, r0
 801658e:	2b04      	cmp	r3, #4
 8016590:	d13b      	bne.n	801660a <tcp_parseopt+0xca>
 8016592:	4b25      	ldr	r3, [pc, #148]	; (8016628 <tcp_parseopt+0xe8>)
 8016594:	881b      	ldrh	r3, [r3, #0]
 8016596:	3301      	adds	r3, #1
 8016598:	4a22      	ldr	r2, [pc, #136]	; (8016624 <tcp_parseopt+0xe4>)
 801659a:	8812      	ldrh	r2, [r2, #0]
 801659c:	4293      	cmp	r3, r2
 801659e:	da34      	bge.n	801660a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80165a0:	f7ff ff98 	bl	80164d4 <tcp_get_next_optbyte>
 80165a4:	4603      	mov	r3, r0
 80165a6:	b29b      	uxth	r3, r3
 80165a8:	021b      	lsls	r3, r3, #8
 80165aa:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80165ac:	f7ff ff92 	bl	80164d4 <tcp_get_next_optbyte>
 80165b0:	4603      	mov	r3, r0
 80165b2:	b29a      	uxth	r2, r3
 80165b4:	89bb      	ldrh	r3, [r7, #12]
 80165b6:	4313      	orrs	r3, r2
 80165b8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80165ba:	89bb      	ldrh	r3, [r7, #12]
 80165bc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80165c0:	d804      	bhi.n	80165cc <tcp_parseopt+0x8c>
 80165c2:	89bb      	ldrh	r3, [r7, #12]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d001      	beq.n	80165cc <tcp_parseopt+0x8c>
 80165c8:	89ba      	ldrh	r2, [r7, #12]
 80165ca:	e001      	b.n	80165d0 <tcp_parseopt+0x90>
 80165cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80165d4:	e010      	b.n	80165f8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80165d6:	f7ff ff7d 	bl	80164d4 <tcp_get_next_optbyte>
 80165da:	4603      	mov	r3, r0
 80165dc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80165de:	7afb      	ldrb	r3, [r7, #11]
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d914      	bls.n	801660e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80165e4:	7afb      	ldrb	r3, [r7, #11]
 80165e6:	b29a      	uxth	r2, r3
 80165e8:	4b0f      	ldr	r3, [pc, #60]	; (8016628 <tcp_parseopt+0xe8>)
 80165ea:	881b      	ldrh	r3, [r3, #0]
 80165ec:	4413      	add	r3, r2
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	3b02      	subs	r3, #2
 80165f2:	b29a      	uxth	r2, r3
 80165f4:	4b0c      	ldr	r3, [pc, #48]	; (8016628 <tcp_parseopt+0xe8>)
 80165f6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80165f8:	4b0b      	ldr	r3, [pc, #44]	; (8016628 <tcp_parseopt+0xe8>)
 80165fa:	881a      	ldrh	r2, [r3, #0]
 80165fc:	4b09      	ldr	r3, [pc, #36]	; (8016624 <tcp_parseopt+0xe4>)
 80165fe:	881b      	ldrh	r3, [r3, #0]
 8016600:	429a      	cmp	r2, r3
 8016602:	d3b3      	bcc.n	801656c <tcp_parseopt+0x2c>
 8016604:	e004      	b.n	8016610 <tcp_parseopt+0xd0>
          return;
 8016606:	bf00      	nop
 8016608:	e002      	b.n	8016610 <tcp_parseopt+0xd0>
            return;
 801660a:	bf00      	nop
 801660c:	e000      	b.n	8016610 <tcp_parseopt+0xd0>
            return;
 801660e:	bf00      	nop
      }
    }
  }
}
 8016610:	3710      	adds	r7, #16
 8016612:	46bd      	mov	sp, r7
 8016614:	bd80      	pop	{r7, pc}
 8016616:	bf00      	nop
 8016618:	0801db58 	.word	0x0801db58
 801661c:	0801dfbc 	.word	0x0801dfbc
 8016620:	0801dba4 	.word	0x0801dba4
 8016624:	24004b14 	.word	0x24004b14
 8016628:	24004b1c 	.word	0x24004b1c

0801662c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801662c:	b480      	push	{r7}
 801662e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016630:	4b05      	ldr	r3, [pc, #20]	; (8016648 <tcp_trigger_input_pcb_close+0x1c>)
 8016632:	781b      	ldrb	r3, [r3, #0]
 8016634:	f043 0310 	orr.w	r3, r3, #16
 8016638:	b2da      	uxtb	r2, r3
 801663a:	4b03      	ldr	r3, [pc, #12]	; (8016648 <tcp_trigger_input_pcb_close+0x1c>)
 801663c:	701a      	strb	r2, [r3, #0]
}
 801663e:	bf00      	nop
 8016640:	46bd      	mov	sp, r7
 8016642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016646:	4770      	bx	lr
 8016648:	24004b2d 	.word	0x24004b2d

0801664c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b084      	sub	sp, #16
 8016650:	af00      	add	r7, sp, #0
 8016652:	60f8      	str	r0, [r7, #12]
 8016654:	60b9      	str	r1, [r7, #8]
 8016656:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016658:	68fb      	ldr	r3, [r7, #12]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d00a      	beq.n	8016674 <tcp_route+0x28>
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	7a1b      	ldrb	r3, [r3, #8]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d006      	beq.n	8016674 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016666:	68fb      	ldr	r3, [r7, #12]
 8016668:	7a1b      	ldrb	r3, [r3, #8]
 801666a:	4618      	mov	r0, r3
 801666c:	f7fb f874 	bl	8011758 <netif_get_by_index>
 8016670:	4603      	mov	r3, r0
 8016672:	e003      	b.n	801667c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016674:	6878      	ldr	r0, [r7, #4]
 8016676:	f003 fb2b 	bl	8019cd0 <ip4_route>
 801667a:	4603      	mov	r3, r0
  }
}
 801667c:	4618      	mov	r0, r3
 801667e:	3710      	adds	r7, #16
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}

08016684 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016684:	b590      	push	{r4, r7, lr}
 8016686:	b087      	sub	sp, #28
 8016688:	af00      	add	r7, sp, #0
 801668a:	60f8      	str	r0, [r7, #12]
 801668c:	60b9      	str	r1, [r7, #8]
 801668e:	603b      	str	r3, [r7, #0]
 8016690:	4613      	mov	r3, r2
 8016692:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d105      	bne.n	80166a6 <tcp_create_segment+0x22>
 801669a:	4b44      	ldr	r3, [pc, #272]	; (80167ac <tcp_create_segment+0x128>)
 801669c:	22a3      	movs	r2, #163	; 0xa3
 801669e:	4944      	ldr	r1, [pc, #272]	; (80167b0 <tcp_create_segment+0x12c>)
 80166a0:	4844      	ldr	r0, [pc, #272]	; (80167b4 <tcp_create_segment+0x130>)
 80166a2:	f005 f81b 	bl	801b6dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d105      	bne.n	80166b8 <tcp_create_segment+0x34>
 80166ac:	4b3f      	ldr	r3, [pc, #252]	; (80167ac <tcp_create_segment+0x128>)
 80166ae:	22a4      	movs	r2, #164	; 0xa4
 80166b0:	4941      	ldr	r1, [pc, #260]	; (80167b8 <tcp_create_segment+0x134>)
 80166b2:	4840      	ldr	r0, [pc, #256]	; (80167b4 <tcp_create_segment+0x130>)
 80166b4:	f005 f812 	bl	801b6dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80166b8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80166bc:	009b      	lsls	r3, r3, #2
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	f003 0304 	and.w	r3, r3, #4
 80166c4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80166c6:	2003      	movs	r0, #3
 80166c8:	f7fa fcba 	bl	8011040 <memp_malloc>
 80166cc:	6138      	str	r0, [r7, #16]
 80166ce:	693b      	ldr	r3, [r7, #16]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d104      	bne.n	80166de <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80166d4:	68b8      	ldr	r0, [r7, #8]
 80166d6:	f7fb fbcd 	bl	8011e74 <pbuf_free>
    return NULL;
 80166da:	2300      	movs	r3, #0
 80166dc:	e061      	b.n	80167a2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80166de:	693b      	ldr	r3, [r7, #16]
 80166e0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80166e4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80166e6:	693b      	ldr	r3, [r7, #16]
 80166e8:	2200      	movs	r2, #0
 80166ea:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80166ec:	693b      	ldr	r3, [r7, #16]
 80166ee:	68ba      	ldr	r2, [r7, #8]
 80166f0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80166f2:	68bb      	ldr	r3, [r7, #8]
 80166f4:	891a      	ldrh	r2, [r3, #8]
 80166f6:	7dfb      	ldrb	r3, [r7, #23]
 80166f8:	b29b      	uxth	r3, r3
 80166fa:	429a      	cmp	r2, r3
 80166fc:	d205      	bcs.n	801670a <tcp_create_segment+0x86>
 80166fe:	4b2b      	ldr	r3, [pc, #172]	; (80167ac <tcp_create_segment+0x128>)
 8016700:	22b0      	movs	r2, #176	; 0xb0
 8016702:	492e      	ldr	r1, [pc, #184]	; (80167bc <tcp_create_segment+0x138>)
 8016704:	482b      	ldr	r0, [pc, #172]	; (80167b4 <tcp_create_segment+0x130>)
 8016706:	f004 ffe9 	bl	801b6dc <iprintf>
  seg->len = p->tot_len - optlen;
 801670a:	68bb      	ldr	r3, [r7, #8]
 801670c:	891a      	ldrh	r2, [r3, #8]
 801670e:	7dfb      	ldrb	r3, [r7, #23]
 8016710:	b29b      	uxth	r3, r3
 8016712:	1ad3      	subs	r3, r2, r3
 8016714:	b29a      	uxth	r2, r3
 8016716:	693b      	ldr	r3, [r7, #16]
 8016718:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801671a:	2114      	movs	r1, #20
 801671c:	68b8      	ldr	r0, [r7, #8]
 801671e:	f7fb fb13 	bl	8011d48 <pbuf_add_header>
 8016722:	4603      	mov	r3, r0
 8016724:	2b00      	cmp	r3, #0
 8016726:	d004      	beq.n	8016732 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016728:	6938      	ldr	r0, [r7, #16]
 801672a:	f7fc ffec 	bl	8013706 <tcp_seg_free>
    return NULL;
 801672e:	2300      	movs	r3, #0
 8016730:	e037      	b.n	80167a2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016732:	693b      	ldr	r3, [r7, #16]
 8016734:	685b      	ldr	r3, [r3, #4]
 8016736:	685a      	ldr	r2, [r3, #4]
 8016738:	693b      	ldr	r3, [r7, #16]
 801673a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	8ada      	ldrh	r2, [r3, #22]
 8016740:	693b      	ldr	r3, [r7, #16]
 8016742:	68dc      	ldr	r4, [r3, #12]
 8016744:	4610      	mov	r0, r2
 8016746:	f7f9 feeb 	bl	8010520 <lwip_htons>
 801674a:	4603      	mov	r3, r0
 801674c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801674e:	68fb      	ldr	r3, [r7, #12]
 8016750:	8b1a      	ldrh	r2, [r3, #24]
 8016752:	693b      	ldr	r3, [r7, #16]
 8016754:	68dc      	ldr	r4, [r3, #12]
 8016756:	4610      	mov	r0, r2
 8016758:	f7f9 fee2 	bl	8010520 <lwip_htons>
 801675c:	4603      	mov	r3, r0
 801675e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016760:	693b      	ldr	r3, [r7, #16]
 8016762:	68dc      	ldr	r4, [r3, #12]
 8016764:	6838      	ldr	r0, [r7, #0]
 8016766:	f7f9 fef0 	bl	801054a <lwip_htonl>
 801676a:	4603      	mov	r3, r0
 801676c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801676e:	7dfb      	ldrb	r3, [r7, #23]
 8016770:	089b      	lsrs	r3, r3, #2
 8016772:	b2db      	uxtb	r3, r3
 8016774:	b29b      	uxth	r3, r3
 8016776:	3305      	adds	r3, #5
 8016778:	b29b      	uxth	r3, r3
 801677a:	031b      	lsls	r3, r3, #12
 801677c:	b29a      	uxth	r2, r3
 801677e:	79fb      	ldrb	r3, [r7, #7]
 8016780:	b29b      	uxth	r3, r3
 8016782:	4313      	orrs	r3, r2
 8016784:	b29a      	uxth	r2, r3
 8016786:	693b      	ldr	r3, [r7, #16]
 8016788:	68dc      	ldr	r4, [r3, #12]
 801678a:	4610      	mov	r0, r2
 801678c:	f7f9 fec8 	bl	8010520 <lwip_htons>
 8016790:	4603      	mov	r3, r0
 8016792:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016794:	693b      	ldr	r3, [r7, #16]
 8016796:	68db      	ldr	r3, [r3, #12]
 8016798:	2200      	movs	r2, #0
 801679a:	749a      	strb	r2, [r3, #18]
 801679c:	2200      	movs	r2, #0
 801679e:	74da      	strb	r2, [r3, #19]
  return seg;
 80167a0:	693b      	ldr	r3, [r7, #16]
}
 80167a2:	4618      	mov	r0, r3
 80167a4:	371c      	adds	r7, #28
 80167a6:	46bd      	mov	sp, r7
 80167a8:	bd90      	pop	{r4, r7, pc}
 80167aa:	bf00      	nop
 80167ac:	0801dfd8 	.word	0x0801dfd8
 80167b0:	0801e00c 	.word	0x0801e00c
 80167b4:	0801e02c 	.word	0x0801e02c
 80167b8:	0801e054 	.word	0x0801e054
 80167bc:	0801e078 	.word	0x0801e078

080167c0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b086      	sub	sp, #24
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	607b      	str	r3, [r7, #4]
 80167c8:	4603      	mov	r3, r0
 80167ca:	73fb      	strb	r3, [r7, #15]
 80167cc:	460b      	mov	r3, r1
 80167ce:	81bb      	strh	r3, [r7, #12]
 80167d0:	4613      	mov	r3, r2
 80167d2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80167d4:	89bb      	ldrh	r3, [r7, #12]
 80167d6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d105      	bne.n	80167ea <tcp_pbuf_prealloc+0x2a>
 80167de:	4b30      	ldr	r3, [pc, #192]	; (80168a0 <tcp_pbuf_prealloc+0xe0>)
 80167e0:	22e8      	movs	r2, #232	; 0xe8
 80167e2:	4930      	ldr	r1, [pc, #192]	; (80168a4 <tcp_pbuf_prealloc+0xe4>)
 80167e4:	4830      	ldr	r0, [pc, #192]	; (80168a8 <tcp_pbuf_prealloc+0xe8>)
 80167e6:	f004 ff79 	bl	801b6dc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 80167ea:	6a3b      	ldr	r3, [r7, #32]
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d105      	bne.n	80167fc <tcp_pbuf_prealloc+0x3c>
 80167f0:	4b2b      	ldr	r3, [pc, #172]	; (80168a0 <tcp_pbuf_prealloc+0xe0>)
 80167f2:	22e9      	movs	r2, #233	; 0xe9
 80167f4:	492d      	ldr	r1, [pc, #180]	; (80168ac <tcp_pbuf_prealloc+0xec>)
 80167f6:	482c      	ldr	r0, [pc, #176]	; (80168a8 <tcp_pbuf_prealloc+0xe8>)
 80167f8:	f004 ff70 	bl	801b6dc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80167fc:	89ba      	ldrh	r2, [r7, #12]
 80167fe:	897b      	ldrh	r3, [r7, #10]
 8016800:	429a      	cmp	r2, r3
 8016802:	d221      	bcs.n	8016848 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016804:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016808:	f003 0302 	and.w	r3, r3, #2
 801680c:	2b00      	cmp	r3, #0
 801680e:	d111      	bne.n	8016834 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8016810:	6a3b      	ldr	r3, [r7, #32]
 8016812:	8b5b      	ldrh	r3, [r3, #26]
 8016814:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8016818:	2b00      	cmp	r3, #0
 801681a:	d115      	bne.n	8016848 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801681c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016820:	2b00      	cmp	r3, #0
 8016822:	d007      	beq.n	8016834 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8016824:	6a3b      	ldr	r3, [r7, #32]
 8016826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8016828:	2b00      	cmp	r3, #0
 801682a:	d103      	bne.n	8016834 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801682c:	6a3b      	ldr	r3, [r7, #32]
 801682e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8016830:	2b00      	cmp	r3, #0
 8016832:	d009      	beq.n	8016848 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8016834:	89bb      	ldrh	r3, [r7, #12]
 8016836:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801683a:	f023 0203 	bic.w	r2, r3, #3
 801683e:	897b      	ldrh	r3, [r7, #10]
 8016840:	4293      	cmp	r3, r2
 8016842:	bf28      	it	cs
 8016844:	4613      	movcs	r3, r2
 8016846:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8016848:	8af9      	ldrh	r1, [r7, #22]
 801684a:	7bfb      	ldrb	r3, [r7, #15]
 801684c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016850:	4618      	mov	r0, r3
 8016852:	f7fb f82b 	bl	80118ac <pbuf_alloc>
 8016856:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	2b00      	cmp	r3, #0
 801685c:	d101      	bne.n	8016862 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801685e:	2300      	movs	r3, #0
 8016860:	e019      	b.n	8016896 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d006      	beq.n	8016878 <tcp_pbuf_prealloc+0xb8>
 801686a:	4b0d      	ldr	r3, [pc, #52]	; (80168a0 <tcp_pbuf_prealloc+0xe0>)
 801686c:	f240 120b 	movw	r2, #267	; 0x10b
 8016870:	490f      	ldr	r1, [pc, #60]	; (80168b0 <tcp_pbuf_prealloc+0xf0>)
 8016872:	480d      	ldr	r0, [pc, #52]	; (80168a8 <tcp_pbuf_prealloc+0xe8>)
 8016874:	f004 ff32 	bl	801b6dc <iprintf>
  *oversize = p->len - length;
 8016878:	693b      	ldr	r3, [r7, #16]
 801687a:	895a      	ldrh	r2, [r3, #10]
 801687c:	89bb      	ldrh	r3, [r7, #12]
 801687e:	1ad3      	subs	r3, r2, r3
 8016880:	b29a      	uxth	r2, r3
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8016886:	693b      	ldr	r3, [r7, #16]
 8016888:	89ba      	ldrh	r2, [r7, #12]
 801688a:	811a      	strh	r2, [r3, #8]
 801688c:	693b      	ldr	r3, [r7, #16]
 801688e:	891a      	ldrh	r2, [r3, #8]
 8016890:	693b      	ldr	r3, [r7, #16]
 8016892:	815a      	strh	r2, [r3, #10]
  return p;
 8016894:	693b      	ldr	r3, [r7, #16]
}
 8016896:	4618      	mov	r0, r3
 8016898:	3718      	adds	r7, #24
 801689a:	46bd      	mov	sp, r7
 801689c:	bd80      	pop	{r7, pc}
 801689e:	bf00      	nop
 80168a0:	0801dfd8 	.word	0x0801dfd8
 80168a4:	0801e090 	.word	0x0801e090
 80168a8:	0801e02c 	.word	0x0801e02c
 80168ac:	0801e0b4 	.word	0x0801e0b4
 80168b0:	0801e0d4 	.word	0x0801e0d4

080168b4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b082      	sub	sp, #8
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
 80168bc:	460b      	mov	r3, r1
 80168be:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d106      	bne.n	80168d4 <tcp_write_checks+0x20>
 80168c6:	4b33      	ldr	r3, [pc, #204]	; (8016994 <tcp_write_checks+0xe0>)
 80168c8:	f240 1233 	movw	r2, #307	; 0x133
 80168cc:	4932      	ldr	r1, [pc, #200]	; (8016998 <tcp_write_checks+0xe4>)
 80168ce:	4833      	ldr	r0, [pc, #204]	; (801699c <tcp_write_checks+0xe8>)
 80168d0:	f004 ff04 	bl	801b6dc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	7d1b      	ldrb	r3, [r3, #20]
 80168d8:	2b04      	cmp	r3, #4
 80168da:	d00e      	beq.n	80168fa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 80168e0:	2b07      	cmp	r3, #7
 80168e2:	d00a      	beq.n	80168fa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 80168e8:	2b02      	cmp	r3, #2
 80168ea:	d006      	beq.n	80168fa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 80168f0:	2b03      	cmp	r3, #3
 80168f2:	d002      	beq.n	80168fa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 80168f4:	f06f 030a 	mvn.w	r3, #10
 80168f8:	e048      	b.n	801698c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 80168fa:	887b      	ldrh	r3, [r7, #2]
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d101      	bne.n	8016904 <tcp_write_checks+0x50>
    return ERR_OK;
 8016900:	2300      	movs	r3, #0
 8016902:	e043      	b.n	801698c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801690a:	887a      	ldrh	r2, [r7, #2]
 801690c:	429a      	cmp	r2, r3
 801690e:	d909      	bls.n	8016924 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	8b5b      	ldrh	r3, [r3, #26]
 8016914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016918:	b29a      	uxth	r2, r3
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801691e:	f04f 33ff 	mov.w	r3, #4294967295
 8016922:	e033      	b.n	801698c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801692a:	2b08      	cmp	r3, #8
 801692c:	d909      	bls.n	8016942 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	8b5b      	ldrh	r3, [r3, #26]
 8016932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016936:	b29a      	uxth	r2, r3
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801693c:	f04f 33ff 	mov.w	r3, #4294967295
 8016940:	e024      	b.n	801698c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016948:	2b00      	cmp	r3, #0
 801694a:	d00f      	beq.n	801696c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016950:	2b00      	cmp	r3, #0
 8016952:	d11a      	bne.n	801698a <tcp_write_checks+0xd6>
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016958:	2b00      	cmp	r3, #0
 801695a:	d116      	bne.n	801698a <tcp_write_checks+0xd6>
 801695c:	4b0d      	ldr	r3, [pc, #52]	; (8016994 <tcp_write_checks+0xe0>)
 801695e:	f240 1255 	movw	r2, #341	; 0x155
 8016962:	490f      	ldr	r1, [pc, #60]	; (80169a0 <tcp_write_checks+0xec>)
 8016964:	480d      	ldr	r0, [pc, #52]	; (801699c <tcp_write_checks+0xe8>)
 8016966:	f004 feb9 	bl	801b6dc <iprintf>
 801696a:	e00e      	b.n	801698a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016970:	2b00      	cmp	r3, #0
 8016972:	d103      	bne.n	801697c <tcp_write_checks+0xc8>
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016978:	2b00      	cmp	r3, #0
 801697a:	d006      	beq.n	801698a <tcp_write_checks+0xd6>
 801697c:	4b05      	ldr	r3, [pc, #20]	; (8016994 <tcp_write_checks+0xe0>)
 801697e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8016982:	4908      	ldr	r1, [pc, #32]	; (80169a4 <tcp_write_checks+0xf0>)
 8016984:	4805      	ldr	r0, [pc, #20]	; (801699c <tcp_write_checks+0xe8>)
 8016986:	f004 fea9 	bl	801b6dc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801698a:	2300      	movs	r3, #0
}
 801698c:	4618      	mov	r0, r3
 801698e:	3708      	adds	r7, #8
 8016990:	46bd      	mov	sp, r7
 8016992:	bd80      	pop	{r7, pc}
 8016994:	0801dfd8 	.word	0x0801dfd8
 8016998:	0801e0e8 	.word	0x0801e0e8
 801699c:	0801e02c 	.word	0x0801e02c
 80169a0:	0801e108 	.word	0x0801e108
 80169a4:	0801e144 	.word	0x0801e144

080169a8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80169a8:	b590      	push	{r4, r7, lr}
 80169aa:	b09b      	sub	sp, #108	; 0x6c
 80169ac:	af04      	add	r7, sp, #16
 80169ae:	60f8      	str	r0, [r7, #12]
 80169b0:	60b9      	str	r1, [r7, #8]
 80169b2:	4611      	mov	r1, r2
 80169b4:	461a      	mov	r2, r3
 80169b6:	460b      	mov	r3, r1
 80169b8:	80fb      	strh	r3, [r7, #6]
 80169ba:	4613      	mov	r3, r2
 80169bc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80169be:	2300      	movs	r3, #0
 80169c0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80169c2:	2300      	movs	r3, #0
 80169c4:	653b      	str	r3, [r7, #80]	; 0x50
 80169c6:	2300      	movs	r3, #0
 80169c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80169ca:	2300      	movs	r3, #0
 80169cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80169ce:	2300      	movs	r3, #0
 80169d0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80169d2:	2300      	movs	r3, #0
 80169d4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80169d8:	2300      	movs	r3, #0
 80169da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80169de:	2300      	movs	r3, #0
 80169e0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80169e2:	2300      	movs	r3, #0
 80169e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80169e6:	2300      	movs	r3, #0
 80169e8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80169ea:	68fb      	ldr	r3, [r7, #12]
 80169ec:	2b00      	cmp	r3, #0
 80169ee:	d109      	bne.n	8016a04 <tcp_write+0x5c>
 80169f0:	4ba4      	ldr	r3, [pc, #656]	; (8016c84 <tcp_write+0x2dc>)
 80169f2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80169f6:	49a4      	ldr	r1, [pc, #656]	; (8016c88 <tcp_write+0x2e0>)
 80169f8:	48a4      	ldr	r0, [pc, #656]	; (8016c8c <tcp_write+0x2e4>)
 80169fa:	f004 fe6f 	bl	801b6dc <iprintf>
 80169fe:	f06f 030f 	mvn.w	r3, #15
 8016a02:	e32a      	b.n	801705a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016a0a:	085b      	lsrs	r3, r3, #1
 8016a0c:	b29a      	uxth	r2, r3
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a12:	4293      	cmp	r3, r2
 8016a14:	bf28      	it	cs
 8016a16:	4613      	movcs	r3, r2
 8016a18:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d102      	bne.n	8016a26 <tcp_write+0x7e>
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a24:	e000      	b.n	8016a28 <tcp_write+0x80>
 8016a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016a28:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016a2a:	68bb      	ldr	r3, [r7, #8]
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d109      	bne.n	8016a44 <tcp_write+0x9c>
 8016a30:	4b94      	ldr	r3, [pc, #592]	; (8016c84 <tcp_write+0x2dc>)
 8016a32:	f240 12ad 	movw	r2, #429	; 0x1ad
 8016a36:	4996      	ldr	r1, [pc, #600]	; (8016c90 <tcp_write+0x2e8>)
 8016a38:	4894      	ldr	r0, [pc, #592]	; (8016c8c <tcp_write+0x2e4>)
 8016a3a:	f004 fe4f 	bl	801b6dc <iprintf>
 8016a3e:	f06f 030f 	mvn.w	r3, #15
 8016a42:	e30a      	b.n	801705a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8016a44:	88fb      	ldrh	r3, [r7, #6]
 8016a46:	4619      	mov	r1, r3
 8016a48:	68f8      	ldr	r0, [r7, #12]
 8016a4a:	f7ff ff33 	bl	80168b4 <tcp_write_checks>
 8016a4e:	4603      	mov	r3, r0
 8016a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8016a54:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d002      	beq.n	8016a62 <tcp_write+0xba>
    return err;
 8016a5c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016a60:	e2fb      	b.n	801705a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8016a62:	68fb      	ldr	r3, [r7, #12]
 8016a64:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016a68:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	f000 80f6 	beq.w	8016c68 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016a7c:	68fb      	ldr	r3, [r7, #12]
 8016a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a80:	653b      	str	r3, [r7, #80]	; 0x50
 8016a82:	e002      	b.n	8016a8a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8016a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a8c:	681b      	ldr	r3, [r3, #0]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d1f8      	bne.n	8016a84 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8016a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a94:	7a9b      	ldrb	r3, [r3, #10]
 8016a96:	009b      	lsls	r3, r3, #2
 8016a98:	b29b      	uxth	r3, r3
 8016a9a:	f003 0304 	and.w	r3, r3, #4
 8016a9e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016aa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016aa4:	891b      	ldrh	r3, [r3, #8]
 8016aa6:	4619      	mov	r1, r3
 8016aa8:	8c3b      	ldrh	r3, [r7, #32]
 8016aaa:	440b      	add	r3, r1
 8016aac:	429a      	cmp	r2, r3
 8016aae:	da06      	bge.n	8016abe <tcp_write+0x116>
 8016ab0:	4b74      	ldr	r3, [pc, #464]	; (8016c84 <tcp_write+0x2dc>)
 8016ab2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016ab6:	4977      	ldr	r1, [pc, #476]	; (8016c94 <tcp_write+0x2ec>)
 8016ab8:	4874      	ldr	r0, [pc, #464]	; (8016c8c <tcp_write+0x2e4>)
 8016aba:	f004 fe0f 	bl	801b6dc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016abe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ac0:	891a      	ldrh	r2, [r3, #8]
 8016ac2:	8c3b      	ldrh	r3, [r7, #32]
 8016ac4:	4413      	add	r3, r2
 8016ac6:	b29b      	uxth	r3, r3
 8016ac8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016aca:	1ad3      	subs	r3, r2, r3
 8016acc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016ace:	68fb      	ldr	r3, [r7, #12]
 8016ad0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016ad4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016ad6:	8a7b      	ldrh	r3, [r7, #18]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d026      	beq.n	8016b2a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8016adc:	8a7b      	ldrh	r3, [r7, #18]
 8016ade:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016ae0:	429a      	cmp	r2, r3
 8016ae2:	d206      	bcs.n	8016af2 <tcp_write+0x14a>
 8016ae4:	4b67      	ldr	r3, [pc, #412]	; (8016c84 <tcp_write+0x2dc>)
 8016ae6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8016aea:	496b      	ldr	r1, [pc, #428]	; (8016c98 <tcp_write+0x2f0>)
 8016aec:	4867      	ldr	r0, [pc, #412]	; (8016c8c <tcp_write+0x2e4>)
 8016aee:	f004 fdf5 	bl	801b6dc <iprintf>
      seg = last_unsent;
 8016af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016af4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016af6:	8a7b      	ldrh	r3, [r7, #18]
 8016af8:	88fa      	ldrh	r2, [r7, #6]
 8016afa:	4293      	cmp	r3, r2
 8016afc:	bf28      	it	cs
 8016afe:	4613      	movcs	r3, r2
 8016b00:	b29b      	uxth	r3, r3
 8016b02:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016b04:	4293      	cmp	r3, r2
 8016b06:	bf28      	it	cs
 8016b08:	4613      	movcs	r3, r2
 8016b0a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016b0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b12:	4413      	add	r3, r2
 8016b14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8016b18:	8a7a      	ldrh	r2, [r7, #18]
 8016b1a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b1c:	1ad3      	subs	r3, r2, r3
 8016b1e:	b29b      	uxth	r3, r3
 8016b20:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016b22:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016b24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016b26:	1ad3      	subs	r3, r2, r3
 8016b28:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016b2a:	8a7b      	ldrh	r3, [r7, #18]
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	d00b      	beq.n	8016b48 <tcp_write+0x1a0>
 8016b30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b34:	88fb      	ldrh	r3, [r7, #6]
 8016b36:	429a      	cmp	r2, r3
 8016b38:	d006      	beq.n	8016b48 <tcp_write+0x1a0>
 8016b3a:	4b52      	ldr	r3, [pc, #328]	; (8016c84 <tcp_write+0x2dc>)
 8016b3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016b40:	4956      	ldr	r1, [pc, #344]	; (8016c9c <tcp_write+0x2f4>)
 8016b42:	4852      	ldr	r0, [pc, #328]	; (8016c8c <tcp_write+0x2e4>)
 8016b44:	f004 fdca 	bl	801b6dc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016b48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016b4c:	88fb      	ldrh	r3, [r7, #6]
 8016b4e:	429a      	cmp	r2, r3
 8016b50:	f080 8167 	bcs.w	8016e22 <tcp_write+0x47a>
 8016b54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	f000 8163 	beq.w	8016e22 <tcp_write+0x47a>
 8016b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b5e:	891b      	ldrh	r3, [r3, #8]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	f000 815e 	beq.w	8016e22 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8016b66:	88fa      	ldrh	r2, [r7, #6]
 8016b68:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016b6c:	1ad2      	subs	r2, r2, r3
 8016b6e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016b70:	4293      	cmp	r3, r2
 8016b72:	bfa8      	it	ge
 8016b74:	4613      	movge	r3, r2
 8016b76:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016b78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016b7a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016b7c:	797b      	ldrb	r3, [r7, #5]
 8016b7e:	f003 0301 	and.w	r3, r3, #1
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d027      	beq.n	8016bd6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8016b86:	f107 0012 	add.w	r0, r7, #18
 8016b8a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016b8c:	8bf9      	ldrh	r1, [r7, #30]
 8016b8e:	2301      	movs	r3, #1
 8016b90:	9302      	str	r3, [sp, #8]
 8016b92:	797b      	ldrb	r3, [r7, #5]
 8016b94:	9301      	str	r3, [sp, #4]
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	9300      	str	r3, [sp, #0]
 8016b9a:	4603      	mov	r3, r0
 8016b9c:	2000      	movs	r0, #0
 8016b9e:	f7ff fe0f 	bl	80167c0 <tcp_pbuf_prealloc>
 8016ba2:	6578      	str	r0, [r7, #84]	; 0x54
 8016ba4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	f000 8225 	beq.w	8016ff6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016bac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016bae:	6858      	ldr	r0, [r3, #4]
 8016bb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016bb4:	68ba      	ldr	r2, [r7, #8]
 8016bb6:	4413      	add	r3, r2
 8016bb8:	8bfa      	ldrh	r2, [r7, #30]
 8016bba:	4619      	mov	r1, r3
 8016bbc:	f004 fd1d 	bl	801b5fa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016bc0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016bc2:	f7fb f9e5 	bl	8011f90 <pbuf_clen>
 8016bc6:	4603      	mov	r3, r0
 8016bc8:	461a      	mov	r2, r3
 8016bca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016bce:	4413      	add	r3, r2
 8016bd0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016bd4:	e041      	b.n	8016c5a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8016bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016bd8:	685b      	ldr	r3, [r3, #4]
 8016bda:	637b      	str	r3, [r7, #52]	; 0x34
 8016bdc:	e002      	b.n	8016be4 <tcp_write+0x23c>
 8016bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016be0:	681b      	ldr	r3, [r3, #0]
 8016be2:	637b      	str	r3, [r7, #52]	; 0x34
 8016be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d1f8      	bne.n	8016bde <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bee:	7b1b      	ldrb	r3, [r3, #12]
 8016bf0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d115      	bne.n	8016c24 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016bfe:	8952      	ldrh	r2, [r2, #10]
 8016c00:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8016c02:	68ba      	ldr	r2, [r7, #8]
 8016c04:	429a      	cmp	r2, r3
 8016c06:	d10d      	bne.n	8016c24 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016c08:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d006      	beq.n	8016c1e <tcp_write+0x276>
 8016c10:	4b1c      	ldr	r3, [pc, #112]	; (8016c84 <tcp_write+0x2dc>)
 8016c12:	f240 2231 	movw	r2, #561	; 0x231
 8016c16:	4922      	ldr	r1, [pc, #136]	; (8016ca0 <tcp_write+0x2f8>)
 8016c18:	481c      	ldr	r0, [pc, #112]	; (8016c8c <tcp_write+0x2e4>)
 8016c1a:	f004 fd5f 	bl	801b6dc <iprintf>
          extendlen = seglen;
 8016c1e:	8bfb      	ldrh	r3, [r7, #30]
 8016c20:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016c22:	e01a      	b.n	8016c5a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016c24:	8bfb      	ldrh	r3, [r7, #30]
 8016c26:	2201      	movs	r2, #1
 8016c28:	4619      	mov	r1, r3
 8016c2a:	2000      	movs	r0, #0
 8016c2c:	f7fa fe3e 	bl	80118ac <pbuf_alloc>
 8016c30:	6578      	str	r0, [r7, #84]	; 0x54
 8016c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	f000 81e0 	beq.w	8016ffa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016c3a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c3e:	68ba      	ldr	r2, [r7, #8]
 8016c40:	441a      	add	r2, r3
 8016c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016c44:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016c46:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016c48:	f7fb f9a2 	bl	8011f90 <pbuf_clen>
 8016c4c:	4603      	mov	r3, r0
 8016c4e:	461a      	mov	r2, r3
 8016c50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016c54:	4413      	add	r3, r2
 8016c56:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016c5a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c5e:	8bfb      	ldrh	r3, [r7, #30]
 8016c60:	4413      	add	r3, r2
 8016c62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8016c66:	e0dc      	b.n	8016e22 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016c6e:	2b00      	cmp	r3, #0
 8016c70:	f000 80d7 	beq.w	8016e22 <tcp_write+0x47a>
 8016c74:	4b03      	ldr	r3, [pc, #12]	; (8016c84 <tcp_write+0x2dc>)
 8016c76:	f240 224a 	movw	r2, #586	; 0x24a
 8016c7a:	490a      	ldr	r1, [pc, #40]	; (8016ca4 <tcp_write+0x2fc>)
 8016c7c:	4803      	ldr	r0, [pc, #12]	; (8016c8c <tcp_write+0x2e4>)
 8016c7e:	f004 fd2d 	bl	801b6dc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8016c82:	e0ce      	b.n	8016e22 <tcp_write+0x47a>
 8016c84:	0801dfd8 	.word	0x0801dfd8
 8016c88:	0801e178 	.word	0x0801e178
 8016c8c:	0801e02c 	.word	0x0801e02c
 8016c90:	0801e190 	.word	0x0801e190
 8016c94:	0801e1c4 	.word	0x0801e1c4
 8016c98:	0801e1dc 	.word	0x0801e1dc
 8016c9c:	0801e1fc 	.word	0x0801e1fc
 8016ca0:	0801e21c 	.word	0x0801e21c
 8016ca4:	0801e248 	.word	0x0801e248
    struct pbuf *p;
    u16_t left = len - pos;
 8016ca8:	88fa      	ldrh	r2, [r7, #6]
 8016caa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016cae:	1ad3      	subs	r3, r2, r3
 8016cb0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8016cb2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016cb6:	b29b      	uxth	r3, r3
 8016cb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016cba:	1ad3      	subs	r3, r2, r3
 8016cbc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016cbe:	8b7a      	ldrh	r2, [r7, #26]
 8016cc0:	8bbb      	ldrh	r3, [r7, #28]
 8016cc2:	4293      	cmp	r3, r2
 8016cc4:	bf28      	it	cs
 8016cc6:	4613      	movcs	r3, r2
 8016cc8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016cca:	797b      	ldrb	r3, [r7, #5]
 8016ccc:	f003 0301 	and.w	r3, r3, #1
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d036      	beq.n	8016d42 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016cd4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016cd8:	b29a      	uxth	r2, r3
 8016cda:	8b3b      	ldrh	r3, [r7, #24]
 8016cdc:	4413      	add	r3, r2
 8016cde:	b299      	uxth	r1, r3
 8016ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ce2:	2b00      	cmp	r3, #0
 8016ce4:	bf0c      	ite	eq
 8016ce6:	2301      	moveq	r3, #1
 8016ce8:	2300      	movne	r3, #0
 8016cea:	b2db      	uxtb	r3, r3
 8016cec:	f107 0012 	add.w	r0, r7, #18
 8016cf0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016cf2:	9302      	str	r3, [sp, #8]
 8016cf4:	797b      	ldrb	r3, [r7, #5]
 8016cf6:	9301      	str	r3, [sp, #4]
 8016cf8:	68fb      	ldr	r3, [r7, #12]
 8016cfa:	9300      	str	r3, [sp, #0]
 8016cfc:	4603      	mov	r3, r0
 8016cfe:	2036      	movs	r0, #54	; 0x36
 8016d00:	f7ff fd5e 	bl	80167c0 <tcp_pbuf_prealloc>
 8016d04:	6338      	str	r0, [r7, #48]	; 0x30
 8016d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d08:	2b00      	cmp	r3, #0
 8016d0a:	f000 8178 	beq.w	8016ffe <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8016d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d10:	895b      	ldrh	r3, [r3, #10]
 8016d12:	8b3a      	ldrh	r2, [r7, #24]
 8016d14:	429a      	cmp	r2, r3
 8016d16:	d906      	bls.n	8016d26 <tcp_write+0x37e>
 8016d18:	4b8c      	ldr	r3, [pc, #560]	; (8016f4c <tcp_write+0x5a4>)
 8016d1a:	f240 2266 	movw	r2, #614	; 0x266
 8016d1e:	498c      	ldr	r1, [pc, #560]	; (8016f50 <tcp_write+0x5a8>)
 8016d20:	488c      	ldr	r0, [pc, #560]	; (8016f54 <tcp_write+0x5ac>)
 8016d22:	f004 fcdb 	bl	801b6dc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8016d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d28:	685a      	ldr	r2, [r3, #4]
 8016d2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016d2e:	18d0      	adds	r0, r2, r3
 8016d30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d34:	68ba      	ldr	r2, [r7, #8]
 8016d36:	4413      	add	r3, r2
 8016d38:	8b3a      	ldrh	r2, [r7, #24]
 8016d3a:	4619      	mov	r1, r3
 8016d3c:	f004 fc5d 	bl	801b5fa <memcpy>
 8016d40:	e02f      	b.n	8016da2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8016d42:	8a7b      	ldrh	r3, [r7, #18]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d006      	beq.n	8016d56 <tcp_write+0x3ae>
 8016d48:	4b80      	ldr	r3, [pc, #512]	; (8016f4c <tcp_write+0x5a4>)
 8016d4a:	f240 2271 	movw	r2, #625	; 0x271
 8016d4e:	4982      	ldr	r1, [pc, #520]	; (8016f58 <tcp_write+0x5b0>)
 8016d50:	4880      	ldr	r0, [pc, #512]	; (8016f54 <tcp_write+0x5ac>)
 8016d52:	f004 fcc3 	bl	801b6dc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8016d56:	8b3b      	ldrh	r3, [r7, #24]
 8016d58:	2201      	movs	r2, #1
 8016d5a:	4619      	mov	r1, r3
 8016d5c:	2036      	movs	r0, #54	; 0x36
 8016d5e:	f7fa fda5 	bl	80118ac <pbuf_alloc>
 8016d62:	6178      	str	r0, [r7, #20]
 8016d64:	697b      	ldr	r3, [r7, #20]
 8016d66:	2b00      	cmp	r3, #0
 8016d68:	f000 814b 	beq.w	8017002 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016d6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d70:	68ba      	ldr	r2, [r7, #8]
 8016d72:	441a      	add	r2, r3
 8016d74:	697b      	ldr	r3, [r7, #20]
 8016d76:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016d78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016d7c:	b29b      	uxth	r3, r3
 8016d7e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016d82:	4619      	mov	r1, r3
 8016d84:	2036      	movs	r0, #54	; 0x36
 8016d86:	f7fa fd91 	bl	80118ac <pbuf_alloc>
 8016d8a:	6338      	str	r0, [r7, #48]	; 0x30
 8016d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d103      	bne.n	8016d9a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8016d92:	6978      	ldr	r0, [r7, #20]
 8016d94:	f7fb f86e 	bl	8011e74 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016d98:	e136      	b.n	8017008 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016d9a:	6979      	ldr	r1, [r7, #20]
 8016d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016d9e:	f7fb f937 	bl	8012010 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8016da2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016da4:	f7fb f8f4 	bl	8011f90 <pbuf_clen>
 8016da8:	4603      	mov	r3, r0
 8016daa:	461a      	mov	r2, r3
 8016dac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016db0:	4413      	add	r3, r2
 8016db2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8016db6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016dba:	2b09      	cmp	r3, #9
 8016dbc:	d903      	bls.n	8016dc6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016dbe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016dc0:	f7fb f858 	bl	8011e74 <pbuf_free>
      goto memerr;
 8016dc4:	e120      	b.n	8017008 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016dca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016dce:	441a      	add	r2, r3
 8016dd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016dd4:	9300      	str	r3, [sp, #0]
 8016dd6:	4613      	mov	r3, r2
 8016dd8:	2200      	movs	r2, #0
 8016dda:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016ddc:	68f8      	ldr	r0, [r7, #12]
 8016dde:	f7ff fc51 	bl	8016684 <tcp_create_segment>
 8016de2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8016de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	f000 810d 	beq.w	8017006 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	d102      	bne.n	8016df8 <tcp_write+0x450>
      queue = seg;
 8016df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016df4:	647b      	str	r3, [r7, #68]	; 0x44
 8016df6:	e00c      	b.n	8016e12 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d106      	bne.n	8016e0c <tcp_write+0x464>
 8016dfe:	4b53      	ldr	r3, [pc, #332]	; (8016f4c <tcp_write+0x5a4>)
 8016e00:	f240 22ab 	movw	r2, #683	; 0x2ab
 8016e04:	4955      	ldr	r1, [pc, #340]	; (8016f5c <tcp_write+0x5b4>)
 8016e06:	4853      	ldr	r0, [pc, #332]	; (8016f54 <tcp_write+0x5ac>)
 8016e08:	f004 fc68 	bl	801b6dc <iprintf>
      prev_seg->next = seg;
 8016e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016e0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016e10:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016e14:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8016e16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e1a:	8b3b      	ldrh	r3, [r7, #24]
 8016e1c:	4413      	add	r3, r2
 8016e1e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016e22:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016e26:	88fb      	ldrh	r3, [r7, #6]
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	f4ff af3d 	bcc.w	8016ca8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016e2e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d02c      	beq.n	8016e8e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8016e34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e36:	685b      	ldr	r3, [r3, #4]
 8016e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e3a:	e01e      	b.n	8016e7a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e3e:	891a      	ldrh	r2, [r3, #8]
 8016e40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e42:	4413      	add	r3, r2
 8016e44:	b29a      	uxth	r2, r3
 8016e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e48:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d110      	bne.n	8016e74 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8016e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e54:	685b      	ldr	r3, [r3, #4]
 8016e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016e58:	8952      	ldrh	r2, [r2, #10]
 8016e5a:	4413      	add	r3, r2
 8016e5c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016e5e:	68b9      	ldr	r1, [r7, #8]
 8016e60:	4618      	mov	r0, r3
 8016e62:	f004 fbca 	bl	801b5fa <memcpy>
        p->len += oversize_used;
 8016e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e68:	895a      	ldrh	r2, [r3, #10]
 8016e6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e6c:	4413      	add	r3, r2
 8016e6e:	b29a      	uxth	r2, r3
 8016e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e72:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8016e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d1dd      	bne.n	8016e3c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e82:	891a      	ldrh	r2, [r3, #8]
 8016e84:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016e86:	4413      	add	r3, r2
 8016e88:	b29a      	uxth	r2, r3
 8016e8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e8c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016e8e:	8a7a      	ldrh	r2, [r7, #18]
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8016e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d018      	beq.n	8016ece <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016e9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d106      	bne.n	8016eb0 <tcp_write+0x508>
 8016ea2:	4b2a      	ldr	r3, [pc, #168]	; (8016f4c <tcp_write+0x5a4>)
 8016ea4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016ea8:	492d      	ldr	r1, [pc, #180]	; (8016f60 <tcp_write+0x5b8>)
 8016eaa:	482a      	ldr	r0, [pc, #168]	; (8016f54 <tcp_write+0x5ac>)
 8016eac:	f004 fc16 	bl	801b6dc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016eb2:	685b      	ldr	r3, [r3, #4]
 8016eb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fb f8aa 	bl	8012010 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ebe:	891a      	ldrh	r2, [r3, #8]
 8016ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016ec2:	891b      	ldrh	r3, [r3, #8]
 8016ec4:	4413      	add	r3, r2
 8016ec6:	b29a      	uxth	r2, r3
 8016ec8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016eca:	811a      	strh	r2, [r3, #8]
 8016ecc:	e037      	b.n	8016f3e <tcp_write+0x596>
  } else if (extendlen > 0) {
 8016ece:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d034      	beq.n	8016f3e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8016ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d003      	beq.n	8016ee2 <tcp_write+0x53a>
 8016eda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016edc:	685b      	ldr	r3, [r3, #4]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d106      	bne.n	8016ef0 <tcp_write+0x548>
 8016ee2:	4b1a      	ldr	r3, [pc, #104]	; (8016f4c <tcp_write+0x5a4>)
 8016ee4:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016ee8:	491e      	ldr	r1, [pc, #120]	; (8016f64 <tcp_write+0x5bc>)
 8016eea:	481a      	ldr	r0, [pc, #104]	; (8016f54 <tcp_write+0x5ac>)
 8016eec:	f004 fbf6 	bl	801b6dc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016ef2:	685b      	ldr	r3, [r3, #4]
 8016ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8016ef6:	e009      	b.n	8016f0c <tcp_write+0x564>
      p->tot_len += extendlen;
 8016ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efa:	891a      	ldrh	r2, [r3, #8]
 8016efc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016efe:	4413      	add	r3, r2
 8016f00:	b29a      	uxth	r2, r3
 8016f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f04:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8016f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f0e:	681b      	ldr	r3, [r3, #0]
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d1f1      	bne.n	8016ef8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8016f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f16:	891a      	ldrh	r2, [r3, #8]
 8016f18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f1a:	4413      	add	r3, r2
 8016f1c:	b29a      	uxth	r2, r3
 8016f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f20:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f24:	895a      	ldrh	r2, [r3, #10]
 8016f26:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f28:	4413      	add	r3, r2
 8016f2a:	b29a      	uxth	r2, r3
 8016f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f2e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016f30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f32:	891a      	ldrh	r2, [r3, #8]
 8016f34:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016f36:	4413      	add	r3, r2
 8016f38:	b29a      	uxth	r2, r3
 8016f3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f3c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016f3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d111      	bne.n	8016f68 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f48:	66da      	str	r2, [r3, #108]	; 0x6c
 8016f4a:	e010      	b.n	8016f6e <tcp_write+0x5c6>
 8016f4c:	0801dfd8 	.word	0x0801dfd8
 8016f50:	0801e278 	.word	0x0801e278
 8016f54:	0801e02c 	.word	0x0801e02c
 8016f58:	0801e2b8 	.word	0x0801e2b8
 8016f5c:	0801e2c8 	.word	0x0801e2c8
 8016f60:	0801e2dc 	.word	0x0801e2dc
 8016f64:	0801e314 	.word	0x0801e314
  } else {
    last_unsent->next = queue;
 8016f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016f6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016f6c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016f6e:	68fb      	ldr	r3, [r7, #12]
 8016f70:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8016f72:	88fb      	ldrh	r3, [r7, #6]
 8016f74:	441a      	add	r2, r3
 8016f76:	68fb      	ldr	r3, [r7, #12]
 8016f78:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016f7a:	68fb      	ldr	r3, [r7, #12]
 8016f7c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016f80:	88fb      	ldrh	r3, [r7, #6]
 8016f82:	1ad3      	subs	r3, r2, r3
 8016f84:	b29a      	uxth	r2, r3
 8016f86:	68fb      	ldr	r3, [r7, #12]
 8016f88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016f8c:	68fb      	ldr	r3, [r7, #12]
 8016f8e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016f92:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d00e      	beq.n	8016fbe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016fa0:	68fb      	ldr	r3, [r7, #12]
 8016fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	d10a      	bne.n	8016fbe <tcp_write+0x616>
 8016fa8:	68fb      	ldr	r3, [r7, #12]
 8016faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	d106      	bne.n	8016fbe <tcp_write+0x616>
 8016fb0:	4b2c      	ldr	r3, [pc, #176]	; (8017064 <tcp_write+0x6bc>)
 8016fb2:	f240 3212 	movw	r2, #786	; 0x312
 8016fb6:	492c      	ldr	r1, [pc, #176]	; (8017068 <tcp_write+0x6c0>)
 8016fb8:	482c      	ldr	r0, [pc, #176]	; (801706c <tcp_write+0x6c4>)
 8016fba:	f004 fb8f 	bl	801b6dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d016      	beq.n	8016ff2 <tcp_write+0x64a>
 8016fc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fc6:	68db      	ldr	r3, [r3, #12]
 8016fc8:	2b00      	cmp	r3, #0
 8016fca:	d012      	beq.n	8016ff2 <tcp_write+0x64a>
 8016fcc:	797b      	ldrb	r3, [r7, #5]
 8016fce:	f003 0302 	and.w	r3, r3, #2
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d10d      	bne.n	8016ff2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8016fd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fd8:	68db      	ldr	r3, [r3, #12]
 8016fda:	899b      	ldrh	r3, [r3, #12]
 8016fdc:	b29c      	uxth	r4, r3
 8016fde:	2008      	movs	r0, #8
 8016fe0:	f7f9 fa9e 	bl	8010520 <lwip_htons>
 8016fe4:	4603      	mov	r3, r0
 8016fe6:	461a      	mov	r2, r3
 8016fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016fea:	68db      	ldr	r3, [r3, #12]
 8016fec:	4322      	orrs	r2, r4
 8016fee:	b292      	uxth	r2, r2
 8016ff0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8016ff2:	2300      	movs	r3, #0
 8016ff4:	e031      	b.n	801705a <tcp_write+0x6b2>
          goto memerr;
 8016ff6:	bf00      	nop
 8016ff8:	e006      	b.n	8017008 <tcp_write+0x660>
            goto memerr;
 8016ffa:	bf00      	nop
 8016ffc:	e004      	b.n	8017008 <tcp_write+0x660>
        goto memerr;
 8016ffe:	bf00      	nop
 8017000:	e002      	b.n	8017008 <tcp_write+0x660>
        goto memerr;
 8017002:	bf00      	nop
 8017004:	e000      	b.n	8017008 <tcp_write+0x660>
      goto memerr;
 8017006:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	8b5b      	ldrh	r3, [r3, #26]
 801700c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017010:	b29a      	uxth	r2, r3
 8017012:	68fb      	ldr	r3, [r7, #12]
 8017014:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8017016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017018:	2b00      	cmp	r3, #0
 801701a:	d002      	beq.n	8017022 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801701c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801701e:	f7fa ff29 	bl	8011e74 <pbuf_free>
  }
  if (queue != NULL) {
 8017022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017024:	2b00      	cmp	r3, #0
 8017026:	d002      	beq.n	801702e <tcp_write+0x686>
    tcp_segs_free(queue);
 8017028:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801702a:	f7fc fb57 	bl	80136dc <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801702e:	68fb      	ldr	r3, [r7, #12]
 8017030:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017034:	2b00      	cmp	r3, #0
 8017036:	d00e      	beq.n	8017056 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801703c:	2b00      	cmp	r3, #0
 801703e:	d10a      	bne.n	8017056 <tcp_write+0x6ae>
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017044:	2b00      	cmp	r3, #0
 8017046:	d106      	bne.n	8017056 <tcp_write+0x6ae>
 8017048:	4b06      	ldr	r3, [pc, #24]	; (8017064 <tcp_write+0x6bc>)
 801704a:	f240 3227 	movw	r2, #807	; 0x327
 801704e:	4906      	ldr	r1, [pc, #24]	; (8017068 <tcp_write+0x6c0>)
 8017050:	4806      	ldr	r0, [pc, #24]	; (801706c <tcp_write+0x6c4>)
 8017052:	f004 fb43 	bl	801b6dc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8017056:	f04f 33ff 	mov.w	r3, #4294967295
}
 801705a:	4618      	mov	r0, r3
 801705c:	375c      	adds	r7, #92	; 0x5c
 801705e:	46bd      	mov	sp, r7
 8017060:	bd90      	pop	{r4, r7, pc}
 8017062:	bf00      	nop
 8017064:	0801dfd8 	.word	0x0801dfd8
 8017068:	0801e34c 	.word	0x0801e34c
 801706c:	0801e02c 	.word	0x0801e02c

08017070 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8017070:	b590      	push	{r4, r7, lr}
 8017072:	b08b      	sub	sp, #44	; 0x2c
 8017074:	af02      	add	r7, sp, #8
 8017076:	6078      	str	r0, [r7, #4]
 8017078:	460b      	mov	r3, r1
 801707a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801707c:	2300      	movs	r3, #0
 801707e:	61fb      	str	r3, [r7, #28]
 8017080:	2300      	movs	r3, #0
 8017082:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8017084:	2300      	movs	r3, #0
 8017086:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d106      	bne.n	801709c <tcp_split_unsent_seg+0x2c>
 801708e:	4b95      	ldr	r3, [pc, #596]	; (80172e4 <tcp_split_unsent_seg+0x274>)
 8017090:	f240 324b 	movw	r2, #843	; 0x34b
 8017094:	4994      	ldr	r1, [pc, #592]	; (80172e8 <tcp_split_unsent_seg+0x278>)
 8017096:	4895      	ldr	r0, [pc, #596]	; (80172ec <tcp_split_unsent_seg+0x27c>)
 8017098:	f004 fb20 	bl	801b6dc <iprintf>

  useg = pcb->unsent;
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170a0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80170a2:	697b      	ldr	r3, [r7, #20]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d102      	bne.n	80170ae <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80170a8:	f04f 33ff 	mov.w	r3, #4294967295
 80170ac:	e116      	b.n	80172dc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80170ae:	887b      	ldrh	r3, [r7, #2]
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d109      	bne.n	80170c8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80170b4:	4b8b      	ldr	r3, [pc, #556]	; (80172e4 <tcp_split_unsent_seg+0x274>)
 80170b6:	f240 3253 	movw	r2, #851	; 0x353
 80170ba:	498d      	ldr	r1, [pc, #564]	; (80172f0 <tcp_split_unsent_seg+0x280>)
 80170bc:	488b      	ldr	r0, [pc, #556]	; (80172ec <tcp_split_unsent_seg+0x27c>)
 80170be:	f004 fb0d 	bl	801b6dc <iprintf>
    return ERR_VAL;
 80170c2:	f06f 0305 	mvn.w	r3, #5
 80170c6:	e109      	b.n	80172dc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80170c8:	697b      	ldr	r3, [r7, #20]
 80170ca:	891b      	ldrh	r3, [r3, #8]
 80170cc:	887a      	ldrh	r2, [r7, #2]
 80170ce:	429a      	cmp	r2, r3
 80170d0:	d301      	bcc.n	80170d6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80170d2:	2300      	movs	r3, #0
 80170d4:	e102      	b.n	80172dc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80170da:	887a      	ldrh	r2, [r7, #2]
 80170dc:	429a      	cmp	r2, r3
 80170de:	d906      	bls.n	80170ee <tcp_split_unsent_seg+0x7e>
 80170e0:	4b80      	ldr	r3, [pc, #512]	; (80172e4 <tcp_split_unsent_seg+0x274>)
 80170e2:	f240 325b 	movw	r2, #859	; 0x35b
 80170e6:	4983      	ldr	r1, [pc, #524]	; (80172f4 <tcp_split_unsent_seg+0x284>)
 80170e8:	4880      	ldr	r0, [pc, #512]	; (80172ec <tcp_split_unsent_seg+0x27c>)
 80170ea:	f004 faf7 	bl	801b6dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80170ee:	697b      	ldr	r3, [r7, #20]
 80170f0:	891b      	ldrh	r3, [r3, #8]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d106      	bne.n	8017104 <tcp_split_unsent_seg+0x94>
 80170f6:	4b7b      	ldr	r3, [pc, #492]	; (80172e4 <tcp_split_unsent_seg+0x274>)
 80170f8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80170fc:	497e      	ldr	r1, [pc, #504]	; (80172f8 <tcp_split_unsent_seg+0x288>)
 80170fe:	487b      	ldr	r0, [pc, #492]	; (80172ec <tcp_split_unsent_seg+0x27c>)
 8017100:	f004 faec 	bl	801b6dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017104:	697b      	ldr	r3, [r7, #20]
 8017106:	7a9b      	ldrb	r3, [r3, #10]
 8017108:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801710a:	7bfb      	ldrb	r3, [r7, #15]
 801710c:	009b      	lsls	r3, r3, #2
 801710e:	b2db      	uxtb	r3, r3
 8017110:	f003 0304 	and.w	r3, r3, #4
 8017114:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017116:	697b      	ldr	r3, [r7, #20]
 8017118:	891a      	ldrh	r2, [r3, #8]
 801711a:	887b      	ldrh	r3, [r7, #2]
 801711c:	1ad3      	subs	r3, r2, r3
 801711e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8017120:	7bbb      	ldrb	r3, [r7, #14]
 8017122:	b29a      	uxth	r2, r3
 8017124:	89bb      	ldrh	r3, [r7, #12]
 8017126:	4413      	add	r3, r2
 8017128:	b29b      	uxth	r3, r3
 801712a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801712e:	4619      	mov	r1, r3
 8017130:	2036      	movs	r0, #54	; 0x36
 8017132:	f7fa fbbb 	bl	80118ac <pbuf_alloc>
 8017136:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017138:	693b      	ldr	r3, [r7, #16]
 801713a:	2b00      	cmp	r3, #0
 801713c:	f000 80b7 	beq.w	80172ae <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8017140:	697b      	ldr	r3, [r7, #20]
 8017142:	685b      	ldr	r3, [r3, #4]
 8017144:	891a      	ldrh	r2, [r3, #8]
 8017146:	697b      	ldr	r3, [r7, #20]
 8017148:	891b      	ldrh	r3, [r3, #8]
 801714a:	1ad3      	subs	r3, r2, r3
 801714c:	b29a      	uxth	r2, r3
 801714e:	887b      	ldrh	r3, [r7, #2]
 8017150:	4413      	add	r3, r2
 8017152:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8017154:	697b      	ldr	r3, [r7, #20]
 8017156:	6858      	ldr	r0, [r3, #4]
 8017158:	693b      	ldr	r3, [r7, #16]
 801715a:	685a      	ldr	r2, [r3, #4]
 801715c:	7bbb      	ldrb	r3, [r7, #14]
 801715e:	18d1      	adds	r1, r2, r3
 8017160:	897b      	ldrh	r3, [r7, #10]
 8017162:	89ba      	ldrh	r2, [r7, #12]
 8017164:	f7fb f88c 	bl	8012280 <pbuf_copy_partial>
 8017168:	4603      	mov	r3, r0
 801716a:	461a      	mov	r2, r3
 801716c:	89bb      	ldrh	r3, [r7, #12]
 801716e:	4293      	cmp	r3, r2
 8017170:	f040 809f 	bne.w	80172b2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8017174:	697b      	ldr	r3, [r7, #20]
 8017176:	68db      	ldr	r3, [r3, #12]
 8017178:	899b      	ldrh	r3, [r3, #12]
 801717a:	b29b      	uxth	r3, r3
 801717c:	4618      	mov	r0, r3
 801717e:	f7f9 f9cf 	bl	8010520 <lwip_htons>
 8017182:	4603      	mov	r3, r0
 8017184:	b2db      	uxtb	r3, r3
 8017186:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801718a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801718c:	2300      	movs	r3, #0
 801718e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8017190:	7efb      	ldrb	r3, [r7, #27]
 8017192:	f003 0308 	and.w	r3, r3, #8
 8017196:	2b00      	cmp	r3, #0
 8017198:	d007      	beq.n	80171aa <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801719a:	7efb      	ldrb	r3, [r7, #27]
 801719c:	f023 0308 	bic.w	r3, r3, #8
 80171a0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80171a2:	7ebb      	ldrb	r3, [r7, #26]
 80171a4:	f043 0308 	orr.w	r3, r3, #8
 80171a8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80171aa:	7efb      	ldrb	r3, [r7, #27]
 80171ac:	f003 0301 	and.w	r3, r3, #1
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d007      	beq.n	80171c4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80171b4:	7efb      	ldrb	r3, [r7, #27]
 80171b6:	f023 0301 	bic.w	r3, r3, #1
 80171ba:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80171bc:	7ebb      	ldrb	r3, [r7, #26]
 80171be:	f043 0301 	orr.w	r3, r3, #1
 80171c2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	685b      	ldr	r3, [r3, #4]
 80171ca:	4618      	mov	r0, r3
 80171cc:	f7f9 f9bd 	bl	801054a <lwip_htonl>
 80171d0:	4602      	mov	r2, r0
 80171d2:	887b      	ldrh	r3, [r7, #2]
 80171d4:	18d1      	adds	r1, r2, r3
 80171d6:	7eba      	ldrb	r2, [r7, #26]
 80171d8:	7bfb      	ldrb	r3, [r7, #15]
 80171da:	9300      	str	r3, [sp, #0]
 80171dc:	460b      	mov	r3, r1
 80171de:	6939      	ldr	r1, [r7, #16]
 80171e0:	6878      	ldr	r0, [r7, #4]
 80171e2:	f7ff fa4f 	bl	8016684 <tcp_create_segment>
 80171e6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80171e8:	69fb      	ldr	r3, [r7, #28]
 80171ea:	2b00      	cmp	r3, #0
 80171ec:	d063      	beq.n	80172b6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80171ee:	697b      	ldr	r3, [r7, #20]
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	4618      	mov	r0, r3
 80171f4:	f7fa fecc 	bl	8011f90 <pbuf_clen>
 80171f8:	4603      	mov	r3, r0
 80171fa:	461a      	mov	r2, r3
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017202:	1a9b      	subs	r3, r3, r2
 8017204:	b29a      	uxth	r2, r3
 8017206:	687b      	ldr	r3, [r7, #4]
 8017208:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801720c:	697b      	ldr	r3, [r7, #20]
 801720e:	6858      	ldr	r0, [r3, #4]
 8017210:	697b      	ldr	r3, [r7, #20]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	891a      	ldrh	r2, [r3, #8]
 8017216:	89bb      	ldrh	r3, [r7, #12]
 8017218:	1ad3      	subs	r3, r2, r3
 801721a:	b29b      	uxth	r3, r3
 801721c:	4619      	mov	r1, r3
 801721e:	f7fa fca3 	bl	8011b68 <pbuf_realloc>
  useg->len -= remainder;
 8017222:	697b      	ldr	r3, [r7, #20]
 8017224:	891a      	ldrh	r2, [r3, #8]
 8017226:	89bb      	ldrh	r3, [r7, #12]
 8017228:	1ad3      	subs	r3, r2, r3
 801722a:	b29a      	uxth	r2, r3
 801722c:	697b      	ldr	r3, [r7, #20]
 801722e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017230:	697b      	ldr	r3, [r7, #20]
 8017232:	68db      	ldr	r3, [r3, #12]
 8017234:	899b      	ldrh	r3, [r3, #12]
 8017236:	b29c      	uxth	r4, r3
 8017238:	7efb      	ldrb	r3, [r7, #27]
 801723a:	b29b      	uxth	r3, r3
 801723c:	4618      	mov	r0, r3
 801723e:	f7f9 f96f 	bl	8010520 <lwip_htons>
 8017242:	4603      	mov	r3, r0
 8017244:	461a      	mov	r2, r3
 8017246:	697b      	ldr	r3, [r7, #20]
 8017248:	68db      	ldr	r3, [r3, #12]
 801724a:	4322      	orrs	r2, r4
 801724c:	b292      	uxth	r2, r2
 801724e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017250:	697b      	ldr	r3, [r7, #20]
 8017252:	685b      	ldr	r3, [r3, #4]
 8017254:	4618      	mov	r0, r3
 8017256:	f7fa fe9b 	bl	8011f90 <pbuf_clen>
 801725a:	4603      	mov	r3, r0
 801725c:	461a      	mov	r2, r3
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017264:	4413      	add	r3, r2
 8017266:	b29a      	uxth	r2, r3
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801726e:	69fb      	ldr	r3, [r7, #28]
 8017270:	685b      	ldr	r3, [r3, #4]
 8017272:	4618      	mov	r0, r3
 8017274:	f7fa fe8c 	bl	8011f90 <pbuf_clen>
 8017278:	4603      	mov	r3, r0
 801727a:	461a      	mov	r2, r3
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017282:	4413      	add	r3, r2
 8017284:	b29a      	uxth	r2, r3
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801728c:	697b      	ldr	r3, [r7, #20]
 801728e:	681a      	ldr	r2, [r3, #0]
 8017290:	69fb      	ldr	r3, [r7, #28]
 8017292:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017294:	697b      	ldr	r3, [r7, #20]
 8017296:	69fa      	ldr	r2, [r7, #28]
 8017298:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801729a:	69fb      	ldr	r3, [r7, #28]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d103      	bne.n	80172aa <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	2200      	movs	r2, #0
 80172a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80172aa:	2300      	movs	r3, #0
 80172ac:	e016      	b.n	80172dc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80172ae:	bf00      	nop
 80172b0:	e002      	b.n	80172b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80172b2:	bf00      	nop
 80172b4:	e000      	b.n	80172b8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80172b6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80172b8:	69fb      	ldr	r3, [r7, #28]
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d006      	beq.n	80172cc <tcp_split_unsent_seg+0x25c>
 80172be:	4b09      	ldr	r3, [pc, #36]	; (80172e4 <tcp_split_unsent_seg+0x274>)
 80172c0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80172c4:	490d      	ldr	r1, [pc, #52]	; (80172fc <tcp_split_unsent_seg+0x28c>)
 80172c6:	4809      	ldr	r0, [pc, #36]	; (80172ec <tcp_split_unsent_seg+0x27c>)
 80172c8:	f004 fa08 	bl	801b6dc <iprintf>
  if (p != NULL) {
 80172cc:	693b      	ldr	r3, [r7, #16]
 80172ce:	2b00      	cmp	r3, #0
 80172d0:	d002      	beq.n	80172d8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80172d2:	6938      	ldr	r0, [r7, #16]
 80172d4:	f7fa fdce 	bl	8011e74 <pbuf_free>
  }

  return ERR_MEM;
 80172d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80172dc:	4618      	mov	r0, r3
 80172de:	3724      	adds	r7, #36	; 0x24
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd90      	pop	{r4, r7, pc}
 80172e4:	0801dfd8 	.word	0x0801dfd8
 80172e8:	0801e36c 	.word	0x0801e36c
 80172ec:	0801e02c 	.word	0x0801e02c
 80172f0:	0801e390 	.word	0x0801e390
 80172f4:	0801e3b4 	.word	0x0801e3b4
 80172f8:	0801e3c4 	.word	0x0801e3c4
 80172fc:	0801e3d4 	.word	0x0801e3d4

08017300 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017300:	b590      	push	{r4, r7, lr}
 8017302:	b085      	sub	sp, #20
 8017304:	af00      	add	r7, sp, #0
 8017306:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2b00      	cmp	r3, #0
 801730c:	d106      	bne.n	801731c <tcp_send_fin+0x1c>
 801730e:	4b21      	ldr	r3, [pc, #132]	; (8017394 <tcp_send_fin+0x94>)
 8017310:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017314:	4920      	ldr	r1, [pc, #128]	; (8017398 <tcp_send_fin+0x98>)
 8017316:	4821      	ldr	r0, [pc, #132]	; (801739c <tcp_send_fin+0x9c>)
 8017318:	f004 f9e0 	bl	801b6dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017320:	2b00      	cmp	r3, #0
 8017322:	d02e      	beq.n	8017382 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017328:	60fb      	str	r3, [r7, #12]
 801732a:	e002      	b.n	8017332 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017332:	68fb      	ldr	r3, [r7, #12]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	2b00      	cmp	r3, #0
 8017338:	d1f8      	bne.n	801732c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	68db      	ldr	r3, [r3, #12]
 801733e:	899b      	ldrh	r3, [r3, #12]
 8017340:	b29b      	uxth	r3, r3
 8017342:	4618      	mov	r0, r3
 8017344:	f7f9 f8ec 	bl	8010520 <lwip_htons>
 8017348:	4603      	mov	r3, r0
 801734a:	b2db      	uxtb	r3, r3
 801734c:	f003 0307 	and.w	r3, r3, #7
 8017350:	2b00      	cmp	r3, #0
 8017352:	d116      	bne.n	8017382 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	68db      	ldr	r3, [r3, #12]
 8017358:	899b      	ldrh	r3, [r3, #12]
 801735a:	b29c      	uxth	r4, r3
 801735c:	2001      	movs	r0, #1
 801735e:	f7f9 f8df 	bl	8010520 <lwip_htons>
 8017362:	4603      	mov	r3, r0
 8017364:	461a      	mov	r2, r3
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	68db      	ldr	r3, [r3, #12]
 801736a:	4322      	orrs	r2, r4
 801736c:	b292      	uxth	r2, r2
 801736e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	8b5b      	ldrh	r3, [r3, #26]
 8017374:	f043 0320 	orr.w	r3, r3, #32
 8017378:	b29a      	uxth	r2, r3
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801737e:	2300      	movs	r3, #0
 8017380:	e004      	b.n	801738c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017382:	2101      	movs	r1, #1
 8017384:	6878      	ldr	r0, [r7, #4]
 8017386:	f000 f80b 	bl	80173a0 <tcp_enqueue_flags>
 801738a:	4603      	mov	r3, r0
}
 801738c:	4618      	mov	r0, r3
 801738e:	3714      	adds	r7, #20
 8017390:	46bd      	mov	sp, r7
 8017392:	bd90      	pop	{r4, r7, pc}
 8017394:	0801dfd8 	.word	0x0801dfd8
 8017398:	0801e3e0 	.word	0x0801e3e0
 801739c:	0801e02c 	.word	0x0801e02c

080173a0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b08a      	sub	sp, #40	; 0x28
 80173a4:	af02      	add	r7, sp, #8
 80173a6:	6078      	str	r0, [r7, #4]
 80173a8:	460b      	mov	r3, r1
 80173aa:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80173ac:	2300      	movs	r3, #0
 80173ae:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80173b0:	2300      	movs	r3, #0
 80173b2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80173b4:	78fb      	ldrb	r3, [r7, #3]
 80173b6:	f003 0303 	and.w	r3, r3, #3
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d106      	bne.n	80173cc <tcp_enqueue_flags+0x2c>
 80173be:	4b67      	ldr	r3, [pc, #412]	; (801755c <tcp_enqueue_flags+0x1bc>)
 80173c0:	f240 4211 	movw	r2, #1041	; 0x411
 80173c4:	4966      	ldr	r1, [pc, #408]	; (8017560 <tcp_enqueue_flags+0x1c0>)
 80173c6:	4867      	ldr	r0, [pc, #412]	; (8017564 <tcp_enqueue_flags+0x1c4>)
 80173c8:	f004 f988 	bl	801b6dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d106      	bne.n	80173e0 <tcp_enqueue_flags+0x40>
 80173d2:	4b62      	ldr	r3, [pc, #392]	; (801755c <tcp_enqueue_flags+0x1bc>)
 80173d4:	f240 4213 	movw	r2, #1043	; 0x413
 80173d8:	4963      	ldr	r1, [pc, #396]	; (8017568 <tcp_enqueue_flags+0x1c8>)
 80173da:	4862      	ldr	r0, [pc, #392]	; (8017564 <tcp_enqueue_flags+0x1c4>)
 80173dc:	f004 f97e 	bl	801b6dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80173e0:	78fb      	ldrb	r3, [r7, #3]
 80173e2:	f003 0302 	and.w	r3, r3, #2
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d001      	beq.n	80173ee <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80173ea:	2301      	movs	r3, #1
 80173ec:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80173ee:	7ffb      	ldrb	r3, [r7, #31]
 80173f0:	009b      	lsls	r3, r3, #2
 80173f2:	b2db      	uxtb	r3, r3
 80173f4:	f003 0304 	and.w	r3, r3, #4
 80173f8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80173fa:	7dfb      	ldrb	r3, [r7, #23]
 80173fc:	b29b      	uxth	r3, r3
 80173fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017402:	4619      	mov	r1, r3
 8017404:	2036      	movs	r0, #54	; 0x36
 8017406:	f7fa fa51 	bl	80118ac <pbuf_alloc>
 801740a:	6138      	str	r0, [r7, #16]
 801740c:	693b      	ldr	r3, [r7, #16]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d109      	bne.n	8017426 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	8b5b      	ldrh	r3, [r3, #26]
 8017416:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801741a:	b29a      	uxth	r2, r3
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017420:	f04f 33ff 	mov.w	r3, #4294967295
 8017424:	e095      	b.n	8017552 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017426:	693b      	ldr	r3, [r7, #16]
 8017428:	895a      	ldrh	r2, [r3, #10]
 801742a:	7dfb      	ldrb	r3, [r7, #23]
 801742c:	b29b      	uxth	r3, r3
 801742e:	429a      	cmp	r2, r3
 8017430:	d206      	bcs.n	8017440 <tcp_enqueue_flags+0xa0>
 8017432:	4b4a      	ldr	r3, [pc, #296]	; (801755c <tcp_enqueue_flags+0x1bc>)
 8017434:	f240 4239 	movw	r2, #1081	; 0x439
 8017438:	494c      	ldr	r1, [pc, #304]	; (801756c <tcp_enqueue_flags+0x1cc>)
 801743a:	484a      	ldr	r0, [pc, #296]	; (8017564 <tcp_enqueue_flags+0x1c4>)
 801743c:	f004 f94e 	bl	801b6dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017444:	78fa      	ldrb	r2, [r7, #3]
 8017446:	7ffb      	ldrb	r3, [r7, #31]
 8017448:	9300      	str	r3, [sp, #0]
 801744a:	460b      	mov	r3, r1
 801744c:	6939      	ldr	r1, [r7, #16]
 801744e:	6878      	ldr	r0, [r7, #4]
 8017450:	f7ff f918 	bl	8016684 <tcp_create_segment>
 8017454:	60f8      	str	r0, [r7, #12]
 8017456:	68fb      	ldr	r3, [r7, #12]
 8017458:	2b00      	cmp	r3, #0
 801745a:	d109      	bne.n	8017470 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	8b5b      	ldrh	r3, [r3, #26]
 8017460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017464:	b29a      	uxth	r2, r3
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801746a:	f04f 33ff 	mov.w	r3, #4294967295
 801746e:	e070      	b.n	8017552 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	68db      	ldr	r3, [r3, #12]
 8017474:	f003 0303 	and.w	r3, r3, #3
 8017478:	2b00      	cmp	r3, #0
 801747a:	d006      	beq.n	801748a <tcp_enqueue_flags+0xea>
 801747c:	4b37      	ldr	r3, [pc, #220]	; (801755c <tcp_enqueue_flags+0x1bc>)
 801747e:	f240 4242 	movw	r2, #1090	; 0x442
 8017482:	493b      	ldr	r1, [pc, #236]	; (8017570 <tcp_enqueue_flags+0x1d0>)
 8017484:	4837      	ldr	r0, [pc, #220]	; (8017564 <tcp_enqueue_flags+0x1c4>)
 8017486:	f004 f929 	bl	801b6dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801748a:	68fb      	ldr	r3, [r7, #12]
 801748c:	891b      	ldrh	r3, [r3, #8]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d006      	beq.n	80174a0 <tcp_enqueue_flags+0x100>
 8017492:	4b32      	ldr	r3, [pc, #200]	; (801755c <tcp_enqueue_flags+0x1bc>)
 8017494:	f240 4243 	movw	r2, #1091	; 0x443
 8017498:	4936      	ldr	r1, [pc, #216]	; (8017574 <tcp_enqueue_flags+0x1d4>)
 801749a:	4832      	ldr	r0, [pc, #200]	; (8017564 <tcp_enqueue_flags+0x1c4>)
 801749c:	f004 f91e 	bl	801b6dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d103      	bne.n	80174b0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80174a8:	687b      	ldr	r3, [r7, #4]
 80174aa:	68fa      	ldr	r2, [r7, #12]
 80174ac:	66da      	str	r2, [r3, #108]	; 0x6c
 80174ae:	e00d      	b.n	80174cc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80174b0:	687b      	ldr	r3, [r7, #4]
 80174b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174b4:	61bb      	str	r3, [r7, #24]
 80174b6:	e002      	b.n	80174be <tcp_enqueue_flags+0x11e>
 80174b8:	69bb      	ldr	r3, [r7, #24]
 80174ba:	681b      	ldr	r3, [r3, #0]
 80174bc:	61bb      	str	r3, [r7, #24]
 80174be:	69bb      	ldr	r3, [r7, #24]
 80174c0:	681b      	ldr	r3, [r3, #0]
 80174c2:	2b00      	cmp	r3, #0
 80174c4:	d1f8      	bne.n	80174b8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80174c6:	69bb      	ldr	r3, [r7, #24]
 80174c8:	68fa      	ldr	r2, [r7, #12]
 80174ca:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2200      	movs	r2, #0
 80174d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80174d4:	78fb      	ldrb	r3, [r7, #3]
 80174d6:	f003 0302 	and.w	r3, r3, #2
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d104      	bne.n	80174e8 <tcp_enqueue_flags+0x148>
 80174de:	78fb      	ldrb	r3, [r7, #3]
 80174e0:	f003 0301 	and.w	r3, r3, #1
 80174e4:	2b00      	cmp	r3, #0
 80174e6:	d004      	beq.n	80174f2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80174ec:	1c5a      	adds	r2, r3, #1
 80174ee:	687b      	ldr	r3, [r7, #4]
 80174f0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80174f2:	78fb      	ldrb	r3, [r7, #3]
 80174f4:	f003 0301 	and.w	r3, r3, #1
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	d006      	beq.n	801750a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	8b5b      	ldrh	r3, [r3, #26]
 8017500:	f043 0320 	orr.w	r3, r3, #32
 8017504:	b29a      	uxth	r2, r3
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	685b      	ldr	r3, [r3, #4]
 801750e:	4618      	mov	r0, r3
 8017510:	f7fa fd3e 	bl	8011f90 <pbuf_clen>
 8017514:	4603      	mov	r3, r0
 8017516:	461a      	mov	r2, r3
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801751e:	4413      	add	r3, r2
 8017520:	b29a      	uxth	r2, r3
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801752e:	2b00      	cmp	r3, #0
 8017530:	d00e      	beq.n	8017550 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017536:	2b00      	cmp	r3, #0
 8017538:	d10a      	bne.n	8017550 <tcp_enqueue_flags+0x1b0>
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801753e:	2b00      	cmp	r3, #0
 8017540:	d106      	bne.n	8017550 <tcp_enqueue_flags+0x1b0>
 8017542:	4b06      	ldr	r3, [pc, #24]	; (801755c <tcp_enqueue_flags+0x1bc>)
 8017544:	f240 4265 	movw	r2, #1125	; 0x465
 8017548:	490b      	ldr	r1, [pc, #44]	; (8017578 <tcp_enqueue_flags+0x1d8>)
 801754a:	4806      	ldr	r0, [pc, #24]	; (8017564 <tcp_enqueue_flags+0x1c4>)
 801754c:	f004 f8c6 	bl	801b6dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017550:	2300      	movs	r3, #0
}
 8017552:	4618      	mov	r0, r3
 8017554:	3720      	adds	r7, #32
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}
 801755a:	bf00      	nop
 801755c:	0801dfd8 	.word	0x0801dfd8
 8017560:	0801e3fc 	.word	0x0801e3fc
 8017564:	0801e02c 	.word	0x0801e02c
 8017568:	0801e454 	.word	0x0801e454
 801756c:	0801e474 	.word	0x0801e474
 8017570:	0801e4b0 	.word	0x0801e4b0
 8017574:	0801e4c8 	.word	0x0801e4c8
 8017578:	0801e4f4 	.word	0x0801e4f4

0801757c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801757c:	b5b0      	push	{r4, r5, r7, lr}
 801757e:	b08a      	sub	sp, #40	; 0x28
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d106      	bne.n	8017598 <tcp_output+0x1c>
 801758a:	4b9e      	ldr	r3, [pc, #632]	; (8017804 <tcp_output+0x288>)
 801758c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017590:	499d      	ldr	r1, [pc, #628]	; (8017808 <tcp_output+0x28c>)
 8017592:	489e      	ldr	r0, [pc, #632]	; (801780c <tcp_output+0x290>)
 8017594:	f004 f8a2 	bl	801b6dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	7d1b      	ldrb	r3, [r3, #20]
 801759c:	2b01      	cmp	r3, #1
 801759e:	d106      	bne.n	80175ae <tcp_output+0x32>
 80175a0:	4b98      	ldr	r3, [pc, #608]	; (8017804 <tcp_output+0x288>)
 80175a2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80175a6:	499a      	ldr	r1, [pc, #616]	; (8017810 <tcp_output+0x294>)
 80175a8:	4898      	ldr	r0, [pc, #608]	; (801780c <tcp_output+0x290>)
 80175aa:	f004 f897 	bl	801b6dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80175ae:	4b99      	ldr	r3, [pc, #612]	; (8017814 <tcp_output+0x298>)
 80175b0:	681b      	ldr	r3, [r3, #0]
 80175b2:	687a      	ldr	r2, [r7, #4]
 80175b4:	429a      	cmp	r2, r3
 80175b6:	d101      	bne.n	80175bc <tcp_output+0x40>
    return ERR_OK;
 80175b8:	2300      	movs	r3, #0
 80175ba:	e1ce      	b.n	801795a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80175c8:	4293      	cmp	r3, r2
 80175ca:	bf28      	it	cs
 80175cc:	4613      	movcs	r3, r2
 80175ce:	b29b      	uxth	r3, r3
 80175d0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80175d6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80175d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80175da:	2b00      	cmp	r3, #0
 80175dc:	d10b      	bne.n	80175f6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	8b5b      	ldrh	r3, [r3, #26]
 80175e2:	f003 0302 	and.w	r3, r3, #2
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	f000 81aa 	beq.w	8017940 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80175ec:	6878      	ldr	r0, [r7, #4]
 80175ee:	f000 fdcb 	bl	8018188 <tcp_send_empty_ack>
 80175f2:	4603      	mov	r3, r0
 80175f4:	e1b1      	b.n	801795a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80175f6:	6879      	ldr	r1, [r7, #4]
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	3304      	adds	r3, #4
 80175fc:	461a      	mov	r2, r3
 80175fe:	6878      	ldr	r0, [r7, #4]
 8017600:	f7ff f824 	bl	801664c <tcp_route>
 8017604:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017606:	697b      	ldr	r3, [r7, #20]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d102      	bne.n	8017612 <tcp_output+0x96>
    return ERR_RTE;
 801760c:	f06f 0303 	mvn.w	r3, #3
 8017610:	e1a3      	b.n	801795a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	2b00      	cmp	r3, #0
 8017616:	d003      	beq.n	8017620 <tcp_output+0xa4>
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d111      	bne.n	8017644 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017620:	697b      	ldr	r3, [r7, #20]
 8017622:	2b00      	cmp	r3, #0
 8017624:	d002      	beq.n	801762c <tcp_output+0xb0>
 8017626:	697b      	ldr	r3, [r7, #20]
 8017628:	3304      	adds	r3, #4
 801762a:	e000      	b.n	801762e <tcp_output+0xb2>
 801762c:	2300      	movs	r3, #0
 801762e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017630:	693b      	ldr	r3, [r7, #16]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d102      	bne.n	801763c <tcp_output+0xc0>
      return ERR_RTE;
 8017636:	f06f 0303 	mvn.w	r3, #3
 801763a:	e18e      	b.n	801795a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	681a      	ldr	r2, [r3, #0]
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017646:	68db      	ldr	r3, [r3, #12]
 8017648:	685b      	ldr	r3, [r3, #4]
 801764a:	4618      	mov	r0, r3
 801764c:	f7f8 ff7d 	bl	801054a <lwip_htonl>
 8017650:	4602      	mov	r2, r0
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017656:	1ad3      	subs	r3, r2, r3
 8017658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801765a:	8912      	ldrh	r2, [r2, #8]
 801765c:	4413      	add	r3, r2
 801765e:	69ba      	ldr	r2, [r7, #24]
 8017660:	429a      	cmp	r2, r3
 8017662:	d227      	bcs.n	80176b4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801766a:	461a      	mov	r2, r3
 801766c:	69bb      	ldr	r3, [r7, #24]
 801766e:	4293      	cmp	r3, r2
 8017670:	d114      	bne.n	801769c <tcp_output+0x120>
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017676:	2b00      	cmp	r3, #0
 8017678:	d110      	bne.n	801769c <tcp_output+0x120>
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017680:	2b00      	cmp	r3, #0
 8017682:	d10b      	bne.n	801769c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	2200      	movs	r2, #0
 8017688:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2201      	movs	r2, #1
 8017690:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2200      	movs	r2, #0
 8017698:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	8b5b      	ldrh	r3, [r3, #26]
 80176a0:	f003 0302 	and.w	r3, r3, #2
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	f000 814d 	beq.w	8017944 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80176aa:	6878      	ldr	r0, [r7, #4]
 80176ac:	f000 fd6c 	bl	8018188 <tcp_send_empty_ack>
 80176b0:	4603      	mov	r3, r0
 80176b2:	e152      	b.n	801795a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	2200      	movs	r2, #0
 80176b8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80176c0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80176c2:	6a3b      	ldr	r3, [r7, #32]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	f000 811c 	beq.w	8017902 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80176ca:	e002      	b.n	80176d2 <tcp_output+0x156>
 80176cc:	6a3b      	ldr	r3, [r7, #32]
 80176ce:	681b      	ldr	r3, [r3, #0]
 80176d0:	623b      	str	r3, [r7, #32]
 80176d2:	6a3b      	ldr	r3, [r7, #32]
 80176d4:	681b      	ldr	r3, [r3, #0]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d1f8      	bne.n	80176cc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80176da:	e112      	b.n	8017902 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80176dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176de:	68db      	ldr	r3, [r3, #12]
 80176e0:	899b      	ldrh	r3, [r3, #12]
 80176e2:	b29b      	uxth	r3, r3
 80176e4:	4618      	mov	r0, r3
 80176e6:	f7f8 ff1b 	bl	8010520 <lwip_htons>
 80176ea:	4603      	mov	r3, r0
 80176ec:	b2db      	uxtb	r3, r3
 80176ee:	f003 0304 	and.w	r3, r3, #4
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d006      	beq.n	8017704 <tcp_output+0x188>
 80176f6:	4b43      	ldr	r3, [pc, #268]	; (8017804 <tcp_output+0x288>)
 80176f8:	f240 5236 	movw	r2, #1334	; 0x536
 80176fc:	4946      	ldr	r1, [pc, #280]	; (8017818 <tcp_output+0x29c>)
 80176fe:	4843      	ldr	r0, [pc, #268]	; (801780c <tcp_output+0x290>)
 8017700:	f003 ffec 	bl	801b6dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017708:	2b00      	cmp	r3, #0
 801770a:	d01f      	beq.n	801774c <tcp_output+0x1d0>
 801770c:	687b      	ldr	r3, [r7, #4]
 801770e:	8b5b      	ldrh	r3, [r3, #26]
 8017710:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017714:	2b00      	cmp	r3, #0
 8017716:	d119      	bne.n	801774c <tcp_output+0x1d0>
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801771c:	2b00      	cmp	r3, #0
 801771e:	d00b      	beq.n	8017738 <tcp_output+0x1bc>
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017724:	681b      	ldr	r3, [r3, #0]
 8017726:	2b00      	cmp	r3, #0
 8017728:	d110      	bne.n	801774c <tcp_output+0x1d0>
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801772e:	891a      	ldrh	r2, [r3, #8]
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017734:	429a      	cmp	r2, r3
 8017736:	d209      	bcs.n	801774c <tcp_output+0x1d0>
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801773e:	2b00      	cmp	r3, #0
 8017740:	d004      	beq.n	801774c <tcp_output+0x1d0>
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017748:	2b08      	cmp	r3, #8
 801774a:	d901      	bls.n	8017750 <tcp_output+0x1d4>
 801774c:	2301      	movs	r3, #1
 801774e:	e000      	b.n	8017752 <tcp_output+0x1d6>
 8017750:	2300      	movs	r3, #0
 8017752:	2b00      	cmp	r3, #0
 8017754:	d106      	bne.n	8017764 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	8b5b      	ldrh	r3, [r3, #26]
 801775a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801775e:	2b00      	cmp	r3, #0
 8017760:	f000 80e4 	beq.w	801792c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	7d1b      	ldrb	r3, [r3, #20]
 8017768:	2b02      	cmp	r3, #2
 801776a:	d00d      	beq.n	8017788 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801776e:	68db      	ldr	r3, [r3, #12]
 8017770:	899b      	ldrh	r3, [r3, #12]
 8017772:	b29c      	uxth	r4, r3
 8017774:	2010      	movs	r0, #16
 8017776:	f7f8 fed3 	bl	8010520 <lwip_htons>
 801777a:	4603      	mov	r3, r0
 801777c:	461a      	mov	r2, r3
 801777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017780:	68db      	ldr	r3, [r3, #12]
 8017782:	4322      	orrs	r2, r4
 8017784:	b292      	uxth	r2, r2
 8017786:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017788:	697a      	ldr	r2, [r7, #20]
 801778a:	6879      	ldr	r1, [r7, #4]
 801778c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801778e:	f000 f909 	bl	80179a4 <tcp_output_segment>
 8017792:	4603      	mov	r3, r0
 8017794:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8017796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801779a:	2b00      	cmp	r3, #0
 801779c:	d009      	beq.n	80177b2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	8b5b      	ldrh	r3, [r3, #26]
 80177a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80177a6:	b29a      	uxth	r2, r3
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	835a      	strh	r2, [r3, #26]
      return err;
 80177ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177b0:	e0d3      	b.n	801795a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80177b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b4:	681a      	ldr	r2, [r3, #0]
 80177b6:	687b      	ldr	r3, [r7, #4]
 80177b8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	7d1b      	ldrb	r3, [r3, #20]
 80177be:	2b02      	cmp	r3, #2
 80177c0:	d006      	beq.n	80177d0 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	8b5b      	ldrh	r3, [r3, #26]
 80177c6:	f023 0303 	bic.w	r3, r3, #3
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80177d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177d2:	68db      	ldr	r3, [r3, #12]
 80177d4:	685b      	ldr	r3, [r3, #4]
 80177d6:	4618      	mov	r0, r3
 80177d8:	f7f8 feb7 	bl	801054a <lwip_htonl>
 80177dc:	4604      	mov	r4, r0
 80177de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e0:	891b      	ldrh	r3, [r3, #8]
 80177e2:	461d      	mov	r5, r3
 80177e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177e6:	68db      	ldr	r3, [r3, #12]
 80177e8:	899b      	ldrh	r3, [r3, #12]
 80177ea:	b29b      	uxth	r3, r3
 80177ec:	4618      	mov	r0, r3
 80177ee:	f7f8 fe97 	bl	8010520 <lwip_htons>
 80177f2:	4603      	mov	r3, r0
 80177f4:	b2db      	uxtb	r3, r3
 80177f6:	f003 0303 	and.w	r3, r3, #3
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d00e      	beq.n	801781c <tcp_output+0x2a0>
 80177fe:	2301      	movs	r3, #1
 8017800:	e00d      	b.n	801781e <tcp_output+0x2a2>
 8017802:	bf00      	nop
 8017804:	0801dfd8 	.word	0x0801dfd8
 8017808:	0801e51c 	.word	0x0801e51c
 801780c:	0801e02c 	.word	0x0801e02c
 8017810:	0801e534 	.word	0x0801e534
 8017814:	240082f0 	.word	0x240082f0
 8017818:	0801e55c 	.word	0x0801e55c
 801781c:	2300      	movs	r3, #0
 801781e:	442b      	add	r3, r5
 8017820:	4423      	add	r3, r4
 8017822:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017828:	68bb      	ldr	r3, [r7, #8]
 801782a:	1ad3      	subs	r3, r2, r3
 801782c:	2b00      	cmp	r3, #0
 801782e:	da02      	bge.n	8017836 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	68ba      	ldr	r2, [r7, #8]
 8017834:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8017836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017838:	891b      	ldrh	r3, [r3, #8]
 801783a:	461c      	mov	r4, r3
 801783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801783e:	68db      	ldr	r3, [r3, #12]
 8017840:	899b      	ldrh	r3, [r3, #12]
 8017842:	b29b      	uxth	r3, r3
 8017844:	4618      	mov	r0, r3
 8017846:	f7f8 fe6b 	bl	8010520 <lwip_htons>
 801784a:	4603      	mov	r3, r0
 801784c:	b2db      	uxtb	r3, r3
 801784e:	f003 0303 	and.w	r3, r3, #3
 8017852:	2b00      	cmp	r3, #0
 8017854:	d001      	beq.n	801785a <tcp_output+0x2de>
 8017856:	2301      	movs	r3, #1
 8017858:	e000      	b.n	801785c <tcp_output+0x2e0>
 801785a:	2300      	movs	r3, #0
 801785c:	4423      	add	r3, r4
 801785e:	2b00      	cmp	r3, #0
 8017860:	d049      	beq.n	80178f6 <tcp_output+0x37a>
      seg->next = NULL;
 8017862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017864:	2200      	movs	r2, #0
 8017866:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801786c:	2b00      	cmp	r3, #0
 801786e:	d105      	bne.n	801787c <tcp_output+0x300>
        pcb->unacked = seg;
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017874:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8017876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017878:	623b      	str	r3, [r7, #32]
 801787a:	e03f      	b.n	80178fc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801787e:	68db      	ldr	r3, [r3, #12]
 8017880:	685b      	ldr	r3, [r3, #4]
 8017882:	4618      	mov	r0, r3
 8017884:	f7f8 fe61 	bl	801054a <lwip_htonl>
 8017888:	4604      	mov	r4, r0
 801788a:	6a3b      	ldr	r3, [r7, #32]
 801788c:	68db      	ldr	r3, [r3, #12]
 801788e:	685b      	ldr	r3, [r3, #4]
 8017890:	4618      	mov	r0, r3
 8017892:	f7f8 fe5a 	bl	801054a <lwip_htonl>
 8017896:	4603      	mov	r3, r0
 8017898:	1ae3      	subs	r3, r4, r3
 801789a:	2b00      	cmp	r3, #0
 801789c:	da24      	bge.n	80178e8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	3370      	adds	r3, #112	; 0x70
 80178a2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80178a4:	e002      	b.n	80178ac <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80178a6:	69fb      	ldr	r3, [r7, #28]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80178ac:	69fb      	ldr	r3, [r7, #28]
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	2b00      	cmp	r3, #0
 80178b2:	d011      	beq.n	80178d8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80178b4:	69fb      	ldr	r3, [r7, #28]
 80178b6:	681b      	ldr	r3, [r3, #0]
 80178b8:	68db      	ldr	r3, [r3, #12]
 80178ba:	685b      	ldr	r3, [r3, #4]
 80178bc:	4618      	mov	r0, r3
 80178be:	f7f8 fe44 	bl	801054a <lwip_htonl>
 80178c2:	4604      	mov	r4, r0
 80178c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	685b      	ldr	r3, [r3, #4]
 80178ca:	4618      	mov	r0, r3
 80178cc:	f7f8 fe3d 	bl	801054a <lwip_htonl>
 80178d0:	4603      	mov	r3, r0
 80178d2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	dbe6      	blt.n	80178a6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80178d8:	69fb      	ldr	r3, [r7, #28]
 80178da:	681a      	ldr	r2, [r3, #0]
 80178dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80178de:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80178e0:	69fb      	ldr	r3, [r7, #28]
 80178e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178e4:	601a      	str	r2, [r3, #0]
 80178e6:	e009      	b.n	80178fc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80178e8:	6a3b      	ldr	r3, [r7, #32]
 80178ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80178ec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80178ee:	6a3b      	ldr	r3, [r7, #32]
 80178f0:	681b      	ldr	r3, [r3, #0]
 80178f2:	623b      	str	r3, [r7, #32]
 80178f4:	e002      	b.n	80178fc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80178f6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80178f8:	f7fb ff05 	bl	8013706 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017900:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8017902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017904:	2b00      	cmp	r3, #0
 8017906:	d012      	beq.n	801792e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8017908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801790a:	68db      	ldr	r3, [r3, #12]
 801790c:	685b      	ldr	r3, [r3, #4]
 801790e:	4618      	mov	r0, r3
 8017910:	f7f8 fe1b 	bl	801054a <lwip_htonl>
 8017914:	4602      	mov	r2, r0
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801791a:	1ad3      	subs	r3, r2, r3
 801791c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801791e:	8912      	ldrh	r2, [r2, #8]
 8017920:	4413      	add	r3, r2
  while (seg != NULL &&
 8017922:	69ba      	ldr	r2, [r7, #24]
 8017924:	429a      	cmp	r2, r3
 8017926:	f4bf aed9 	bcs.w	80176dc <tcp_output+0x160>
 801792a:	e000      	b.n	801792e <tcp_output+0x3b2>
      break;
 801792c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017932:	2b00      	cmp	r3, #0
 8017934:	d108      	bne.n	8017948 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	2200      	movs	r2, #0
 801793a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801793e:	e004      	b.n	801794a <tcp_output+0x3ce>
    goto output_done;
 8017940:	bf00      	nop
 8017942:	e002      	b.n	801794a <tcp_output+0x3ce>
    goto output_done;
 8017944:	bf00      	nop
 8017946:	e000      	b.n	801794a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017948:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	8b5b      	ldrh	r3, [r3, #26]
 801794e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017952:	b29a      	uxth	r2, r3
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017958:	2300      	movs	r3, #0
}
 801795a:	4618      	mov	r0, r3
 801795c:	3728      	adds	r7, #40	; 0x28
 801795e:	46bd      	mov	sp, r7
 8017960:	bdb0      	pop	{r4, r5, r7, pc}
 8017962:	bf00      	nop

08017964 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017964:	b580      	push	{r7, lr}
 8017966:	b082      	sub	sp, #8
 8017968:	af00      	add	r7, sp, #0
 801796a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	2b00      	cmp	r3, #0
 8017970:	d106      	bne.n	8017980 <tcp_output_segment_busy+0x1c>
 8017972:	4b09      	ldr	r3, [pc, #36]	; (8017998 <tcp_output_segment_busy+0x34>)
 8017974:	f240 529a 	movw	r2, #1434	; 0x59a
 8017978:	4908      	ldr	r1, [pc, #32]	; (801799c <tcp_output_segment_busy+0x38>)
 801797a:	4809      	ldr	r0, [pc, #36]	; (80179a0 <tcp_output_segment_busy+0x3c>)
 801797c:	f003 feae 	bl	801b6dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	685b      	ldr	r3, [r3, #4]
 8017984:	7b9b      	ldrb	r3, [r3, #14]
 8017986:	2b01      	cmp	r3, #1
 8017988:	d001      	beq.n	801798e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801798a:	2301      	movs	r3, #1
 801798c:	e000      	b.n	8017990 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801798e:	2300      	movs	r3, #0
}
 8017990:	4618      	mov	r0, r3
 8017992:	3708      	adds	r7, #8
 8017994:	46bd      	mov	sp, r7
 8017996:	bd80      	pop	{r7, pc}
 8017998:	0801dfd8 	.word	0x0801dfd8
 801799c:	0801e574 	.word	0x0801e574
 80179a0:	0801e02c 	.word	0x0801e02c

080179a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80179a4:	b5b0      	push	{r4, r5, r7, lr}
 80179a6:	b08c      	sub	sp, #48	; 0x30
 80179a8:	af04      	add	r7, sp, #16
 80179aa:	60f8      	str	r0, [r7, #12]
 80179ac:	60b9      	str	r1, [r7, #8]
 80179ae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80179b0:	68fb      	ldr	r3, [r7, #12]
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	d106      	bne.n	80179c4 <tcp_output_segment+0x20>
 80179b6:	4b63      	ldr	r3, [pc, #396]	; (8017b44 <tcp_output_segment+0x1a0>)
 80179b8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80179bc:	4962      	ldr	r1, [pc, #392]	; (8017b48 <tcp_output_segment+0x1a4>)
 80179be:	4863      	ldr	r0, [pc, #396]	; (8017b4c <tcp_output_segment+0x1a8>)
 80179c0:	f003 fe8c 	bl	801b6dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80179c4:	68bb      	ldr	r3, [r7, #8]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d106      	bne.n	80179d8 <tcp_output_segment+0x34>
 80179ca:	4b5e      	ldr	r3, [pc, #376]	; (8017b44 <tcp_output_segment+0x1a0>)
 80179cc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80179d0:	495f      	ldr	r1, [pc, #380]	; (8017b50 <tcp_output_segment+0x1ac>)
 80179d2:	485e      	ldr	r0, [pc, #376]	; (8017b4c <tcp_output_segment+0x1a8>)
 80179d4:	f003 fe82 	bl	801b6dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d106      	bne.n	80179ec <tcp_output_segment+0x48>
 80179de:	4b59      	ldr	r3, [pc, #356]	; (8017b44 <tcp_output_segment+0x1a0>)
 80179e0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80179e4:	495b      	ldr	r1, [pc, #364]	; (8017b54 <tcp_output_segment+0x1b0>)
 80179e6:	4859      	ldr	r0, [pc, #356]	; (8017b4c <tcp_output_segment+0x1a8>)
 80179e8:	f003 fe78 	bl	801b6dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80179ec:	68f8      	ldr	r0, [r7, #12]
 80179ee:	f7ff ffb9 	bl	8017964 <tcp_output_segment_busy>
 80179f2:	4603      	mov	r3, r0
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d001      	beq.n	80179fc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80179f8:	2300      	movs	r3, #0
 80179fa:	e09f      	b.n	8017b3c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80179fc:	68bb      	ldr	r3, [r7, #8]
 80179fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017a00:	68fb      	ldr	r3, [r7, #12]
 8017a02:	68dc      	ldr	r4, [r3, #12]
 8017a04:	4610      	mov	r0, r2
 8017a06:	f7f8 fda0 	bl	801054a <lwip_htonl>
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8017a0e:	68bb      	ldr	r3, [r7, #8]
 8017a10:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8017a12:	68fb      	ldr	r3, [r7, #12]
 8017a14:	68dc      	ldr	r4, [r3, #12]
 8017a16:	4610      	mov	r0, r2
 8017a18:	f7f8 fd82 	bl	8010520 <lwip_htons>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017a20:	68bb      	ldr	r3, [r7, #8]
 8017a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a24:	68ba      	ldr	r2, [r7, #8]
 8017a26:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017a28:	441a      	add	r2, r3
 8017a2a:	68bb      	ldr	r3, [r7, #8]
 8017a2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	68db      	ldr	r3, [r3, #12]
 8017a32:	3314      	adds	r3, #20
 8017a34:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8017a36:	68fb      	ldr	r3, [r7, #12]
 8017a38:	7a9b      	ldrb	r3, [r3, #10]
 8017a3a:	f003 0301 	and.w	r3, r3, #1
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d015      	beq.n	8017a6e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017a42:	68bb      	ldr	r3, [r7, #8]
 8017a44:	3304      	adds	r3, #4
 8017a46:	461a      	mov	r2, r3
 8017a48:	6879      	ldr	r1, [r7, #4]
 8017a4a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8017a4e:	f7fc fa37 	bl	8013ec0 <tcp_eff_send_mss_netif>
 8017a52:	4603      	mov	r3, r0
 8017a54:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8017a56:	8b7b      	ldrh	r3, [r7, #26]
 8017a58:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017a5c:	4618      	mov	r0, r3
 8017a5e:	f7f8 fd74 	bl	801054a <lwip_htonl>
 8017a62:	4602      	mov	r2, r0
 8017a64:	69fb      	ldr	r3, [r7, #28]
 8017a66:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017a68:	69fb      	ldr	r3, [r7, #28]
 8017a6a:	3304      	adds	r3, #4
 8017a6c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017a6e:	68bb      	ldr	r3, [r7, #8]
 8017a70:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	da02      	bge.n	8017a7e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017a78:	68bb      	ldr	r3, [r7, #8]
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017a7e:	68bb      	ldr	r3, [r7, #8]
 8017a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017a82:	2b00      	cmp	r3, #0
 8017a84:	d10c      	bne.n	8017aa0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8017a86:	4b34      	ldr	r3, [pc, #208]	; (8017b58 <tcp_output_segment+0x1b4>)
 8017a88:	681a      	ldr	r2, [r3, #0]
 8017a8a:	68bb      	ldr	r3, [r7, #8]
 8017a8c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	68db      	ldr	r3, [r3, #12]
 8017a92:	685b      	ldr	r3, [r3, #4]
 8017a94:	4618      	mov	r0, r3
 8017a96:	f7f8 fd58 	bl	801054a <lwip_htonl>
 8017a9a:	4602      	mov	r2, r0
 8017a9c:	68bb      	ldr	r3, [r7, #8]
 8017a9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	68da      	ldr	r2, [r3, #12]
 8017aa4:	68fb      	ldr	r3, [r7, #12]
 8017aa6:	685b      	ldr	r3, [r3, #4]
 8017aa8:	685b      	ldr	r3, [r3, #4]
 8017aaa:	1ad3      	subs	r3, r2, r3
 8017aac:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017aae:	68fb      	ldr	r3, [r7, #12]
 8017ab0:	685b      	ldr	r3, [r3, #4]
 8017ab2:	8959      	ldrh	r1, [r3, #10]
 8017ab4:	68fb      	ldr	r3, [r7, #12]
 8017ab6:	685b      	ldr	r3, [r3, #4]
 8017ab8:	8b3a      	ldrh	r2, [r7, #24]
 8017aba:	1a8a      	subs	r2, r1, r2
 8017abc:	b292      	uxth	r2, r2
 8017abe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017ac0:	68fb      	ldr	r3, [r7, #12]
 8017ac2:	685b      	ldr	r3, [r3, #4]
 8017ac4:	8919      	ldrh	r1, [r3, #8]
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	685b      	ldr	r3, [r3, #4]
 8017aca:	8b3a      	ldrh	r2, [r7, #24]
 8017acc:	1a8a      	subs	r2, r1, r2
 8017ace:	b292      	uxth	r2, r2
 8017ad0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017ad2:	68fb      	ldr	r3, [r7, #12]
 8017ad4:	685b      	ldr	r3, [r3, #4]
 8017ad6:	68fa      	ldr	r2, [r7, #12]
 8017ad8:	68d2      	ldr	r2, [r2, #12]
 8017ada:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8017adc:	68fb      	ldr	r3, [r7, #12]
 8017ade:	68db      	ldr	r3, [r3, #12]
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	741a      	strb	r2, [r3, #16]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8017ae8:	68fb      	ldr	r3, [r7, #12]
 8017aea:	68db      	ldr	r3, [r3, #12]
 8017aec:	f103 0214 	add.w	r2, r3, #20
 8017af0:	68fb      	ldr	r3, [r7, #12]
 8017af2:	7a9b      	ldrb	r3, [r3, #10]
 8017af4:	009b      	lsls	r3, r3, #2
 8017af6:	f003 0304 	and.w	r3, r3, #4
 8017afa:	4413      	add	r3, r2
 8017afc:	69fa      	ldr	r2, [r7, #28]
 8017afe:	429a      	cmp	r2, r3
 8017b00:	d006      	beq.n	8017b10 <tcp_output_segment+0x16c>
 8017b02:	4b10      	ldr	r3, [pc, #64]	; (8017b44 <tcp_output_segment+0x1a0>)
 8017b04:	f240 621c 	movw	r2, #1564	; 0x61c
 8017b08:	4914      	ldr	r1, [pc, #80]	; (8017b5c <tcp_output_segment+0x1b8>)
 8017b0a:	4810      	ldr	r0, [pc, #64]	; (8017b4c <tcp_output_segment+0x1a8>)
 8017b0c:	f003 fde6 	bl	801b6dc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	6858      	ldr	r0, [r3, #4]
 8017b14:	68b9      	ldr	r1, [r7, #8]
 8017b16:	68bb      	ldr	r3, [r7, #8]
 8017b18:	1d1c      	adds	r4, r3, #4
 8017b1a:	68bb      	ldr	r3, [r7, #8]
 8017b1c:	7add      	ldrb	r5, [r3, #11]
 8017b1e:	68bb      	ldr	r3, [r7, #8]
 8017b20:	7a9b      	ldrb	r3, [r3, #10]
 8017b22:	687a      	ldr	r2, [r7, #4]
 8017b24:	9202      	str	r2, [sp, #8]
 8017b26:	2206      	movs	r2, #6
 8017b28:	9201      	str	r2, [sp, #4]
 8017b2a:	9300      	str	r3, [sp, #0]
 8017b2c:	462b      	mov	r3, r5
 8017b2e:	4622      	mov	r2, r4
 8017b30:	f002 fa8c 	bl	801a04c <ip4_output_if>
 8017b34:	4603      	mov	r3, r0
 8017b36:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3720      	adds	r7, #32
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bdb0      	pop	{r4, r5, r7, pc}
 8017b44:	0801dfd8 	.word	0x0801dfd8
 8017b48:	0801e59c 	.word	0x0801e59c
 8017b4c:	0801e02c 	.word	0x0801e02c
 8017b50:	0801e5bc 	.word	0x0801e5bc
 8017b54:	0801e5dc 	.word	0x0801e5dc
 8017b58:	240082e0 	.word	0x240082e0
 8017b5c:	0801e600 	.word	0x0801e600

08017b60 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017b60:	b5b0      	push	{r4, r5, r7, lr}
 8017b62:	b084      	sub	sp, #16
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	2b00      	cmp	r3, #0
 8017b6c:	d106      	bne.n	8017b7c <tcp_rexmit_rto_prepare+0x1c>
 8017b6e:	4b31      	ldr	r3, [pc, #196]	; (8017c34 <tcp_rexmit_rto_prepare+0xd4>)
 8017b70:	f240 6263 	movw	r2, #1635	; 0x663
 8017b74:	4930      	ldr	r1, [pc, #192]	; (8017c38 <tcp_rexmit_rto_prepare+0xd8>)
 8017b76:	4831      	ldr	r0, [pc, #196]	; (8017c3c <tcp_rexmit_rto_prepare+0xdc>)
 8017b78:	f003 fdb0 	bl	801b6dc <iprintf>

  if (pcb->unacked == NULL) {
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d102      	bne.n	8017b8a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017b84:	f06f 0305 	mvn.w	r3, #5
 8017b88:	e050      	b.n	8017c2c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017b8a:	687b      	ldr	r3, [r7, #4]
 8017b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b8e:	60fb      	str	r3, [r7, #12]
 8017b90:	e00b      	b.n	8017baa <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8017b92:	68f8      	ldr	r0, [r7, #12]
 8017b94:	f7ff fee6 	bl	8017964 <tcp_output_segment_busy>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	2b00      	cmp	r3, #0
 8017b9c:	d002      	beq.n	8017ba4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017b9e:	f06f 0305 	mvn.w	r3, #5
 8017ba2:	e043      	b.n	8017c2c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	681b      	ldr	r3, [r3, #0]
 8017ba8:	60fb      	str	r3, [r7, #12]
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	d1ef      	bne.n	8017b92 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8017bb2:	68f8      	ldr	r0, [r7, #12]
 8017bb4:	f7ff fed6 	bl	8017964 <tcp_output_segment_busy>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	2b00      	cmp	r3, #0
 8017bbc:	d002      	beq.n	8017bc4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017bbe:	f06f 0305 	mvn.w	r3, #5
 8017bc2:	e033      	b.n	8017c2c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8017bc8:	68fb      	ldr	r3, [r7, #12]
 8017bca:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017bcc:	687b      	ldr	r3, [r7, #4]
 8017bce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	2200      	movs	r2, #0
 8017bd8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8017bda:	687b      	ldr	r3, [r7, #4]
 8017bdc:	8b5b      	ldrh	r3, [r3, #26]
 8017bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8017be2:	b29a      	uxth	r2, r3
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8017be8:	68fb      	ldr	r3, [r7, #12]
 8017bea:	68db      	ldr	r3, [r3, #12]
 8017bec:	685b      	ldr	r3, [r3, #4]
 8017bee:	4618      	mov	r0, r3
 8017bf0:	f7f8 fcab 	bl	801054a <lwip_htonl>
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	891b      	ldrh	r3, [r3, #8]
 8017bfa:	461d      	mov	r5, r3
 8017bfc:	68fb      	ldr	r3, [r7, #12]
 8017bfe:	68db      	ldr	r3, [r3, #12]
 8017c00:	899b      	ldrh	r3, [r3, #12]
 8017c02:	b29b      	uxth	r3, r3
 8017c04:	4618      	mov	r0, r3
 8017c06:	f7f8 fc8b 	bl	8010520 <lwip_htons>
 8017c0a:	4603      	mov	r3, r0
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	f003 0303 	and.w	r3, r3, #3
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d001      	beq.n	8017c1a <tcp_rexmit_rto_prepare+0xba>
 8017c16:	2301      	movs	r3, #1
 8017c18:	e000      	b.n	8017c1c <tcp_rexmit_rto_prepare+0xbc>
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	442b      	add	r3, r5
 8017c1e:	18e2      	adds	r2, r4, r3
 8017c20:	687b      	ldr	r3, [r7, #4]
 8017c22:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	2200      	movs	r2, #0
 8017c28:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017c2a:	2300      	movs	r3, #0
}
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	3710      	adds	r7, #16
 8017c30:	46bd      	mov	sp, r7
 8017c32:	bdb0      	pop	{r4, r5, r7, pc}
 8017c34:	0801dfd8 	.word	0x0801dfd8
 8017c38:	0801e614 	.word	0x0801e614
 8017c3c:	0801e02c 	.word	0x0801e02c

08017c40 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b082      	sub	sp, #8
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017c48:	687b      	ldr	r3, [r7, #4]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d106      	bne.n	8017c5c <tcp_rexmit_rto_commit+0x1c>
 8017c4e:	4b0d      	ldr	r3, [pc, #52]	; (8017c84 <tcp_rexmit_rto_commit+0x44>)
 8017c50:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017c54:	490c      	ldr	r1, [pc, #48]	; (8017c88 <tcp_rexmit_rto_commit+0x48>)
 8017c56:	480d      	ldr	r0, [pc, #52]	; (8017c8c <tcp_rexmit_rto_commit+0x4c>)
 8017c58:	f003 fd40 	bl	801b6dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017c5c:	687b      	ldr	r3, [r7, #4]
 8017c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017c62:	2bff      	cmp	r3, #255	; 0xff
 8017c64:	d007      	beq.n	8017c76 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017c6c:	3301      	adds	r3, #1
 8017c6e:	b2da      	uxtb	r2, r3
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017c76:	6878      	ldr	r0, [r7, #4]
 8017c78:	f7ff fc80 	bl	801757c <tcp_output>
}
 8017c7c:	bf00      	nop
 8017c7e:	3708      	adds	r7, #8
 8017c80:	46bd      	mov	sp, r7
 8017c82:	bd80      	pop	{r7, pc}
 8017c84:	0801dfd8 	.word	0x0801dfd8
 8017c88:	0801e638 	.word	0x0801e638
 8017c8c:	0801e02c 	.word	0x0801e02c

08017c90 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017c90:	b580      	push	{r7, lr}
 8017c92:	b082      	sub	sp, #8
 8017c94:	af00      	add	r7, sp, #0
 8017c96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d106      	bne.n	8017cac <tcp_rexmit_rto+0x1c>
 8017c9e:	4b0a      	ldr	r3, [pc, #40]	; (8017cc8 <tcp_rexmit_rto+0x38>)
 8017ca0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017ca4:	4909      	ldr	r1, [pc, #36]	; (8017ccc <tcp_rexmit_rto+0x3c>)
 8017ca6:	480a      	ldr	r0, [pc, #40]	; (8017cd0 <tcp_rexmit_rto+0x40>)
 8017ca8:	f003 fd18 	bl	801b6dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017cac:	6878      	ldr	r0, [r7, #4]
 8017cae:	f7ff ff57 	bl	8017b60 <tcp_rexmit_rto_prepare>
 8017cb2:	4603      	mov	r3, r0
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d102      	bne.n	8017cbe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017cb8:	6878      	ldr	r0, [r7, #4]
 8017cba:	f7ff ffc1 	bl	8017c40 <tcp_rexmit_rto_commit>
  }
}
 8017cbe:	bf00      	nop
 8017cc0:	3708      	adds	r7, #8
 8017cc2:	46bd      	mov	sp, r7
 8017cc4:	bd80      	pop	{r7, pc}
 8017cc6:	bf00      	nop
 8017cc8:	0801dfd8 	.word	0x0801dfd8
 8017ccc:	0801e65c 	.word	0x0801e65c
 8017cd0:	0801e02c 	.word	0x0801e02c

08017cd4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8017cd4:	b590      	push	{r4, r7, lr}
 8017cd6:	b085      	sub	sp, #20
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d106      	bne.n	8017cf0 <tcp_rexmit+0x1c>
 8017ce2:	4b2f      	ldr	r3, [pc, #188]	; (8017da0 <tcp_rexmit+0xcc>)
 8017ce4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8017ce8:	492e      	ldr	r1, [pc, #184]	; (8017da4 <tcp_rexmit+0xd0>)
 8017cea:	482f      	ldr	r0, [pc, #188]	; (8017da8 <tcp_rexmit+0xd4>)
 8017cec:	f003 fcf6 	bl	801b6dc <iprintf>

  if (pcb->unacked == NULL) {
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d102      	bne.n	8017cfe <tcp_rexmit+0x2a>
    return ERR_VAL;
 8017cf8:	f06f 0305 	mvn.w	r3, #5
 8017cfc:	e04c      	b.n	8017d98 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017d02:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8017d04:	68b8      	ldr	r0, [r7, #8]
 8017d06:	f7ff fe2d 	bl	8017964 <tcp_output_segment_busy>
 8017d0a:	4603      	mov	r3, r0
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	d002      	beq.n	8017d16 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8017d10:	f06f 0305 	mvn.w	r3, #5
 8017d14:	e040      	b.n	8017d98 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017d16:	68bb      	ldr	r3, [r7, #8]
 8017d18:	681a      	ldr	r2, [r3, #0]
 8017d1a:	687b      	ldr	r3, [r7, #4]
 8017d1c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	336c      	adds	r3, #108	; 0x6c
 8017d22:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017d24:	e002      	b.n	8017d2c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017d26:	68fb      	ldr	r3, [r7, #12]
 8017d28:	681b      	ldr	r3, [r3, #0]
 8017d2a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d011      	beq.n	8017d58 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017d34:	68fb      	ldr	r3, [r7, #12]
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	68db      	ldr	r3, [r3, #12]
 8017d3a:	685b      	ldr	r3, [r3, #4]
 8017d3c:	4618      	mov	r0, r3
 8017d3e:	f7f8 fc04 	bl	801054a <lwip_htonl>
 8017d42:	4604      	mov	r4, r0
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	68db      	ldr	r3, [r3, #12]
 8017d48:	685b      	ldr	r3, [r3, #4]
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	f7f8 fbfd 	bl	801054a <lwip_htonl>
 8017d50:	4603      	mov	r3, r0
 8017d52:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	dbe6      	blt.n	8017d26 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017d58:	68fb      	ldr	r3, [r7, #12]
 8017d5a:	681a      	ldr	r2, [r3, #0]
 8017d5c:	68bb      	ldr	r3, [r7, #8]
 8017d5e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	68ba      	ldr	r2, [r7, #8]
 8017d64:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017d66:	68bb      	ldr	r3, [r7, #8]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	2b00      	cmp	r3, #0
 8017d6c:	d103      	bne.n	8017d76 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	2200      	movs	r2, #0
 8017d72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d7c:	2bff      	cmp	r3, #255	; 0xff
 8017d7e:	d007      	beq.n	8017d90 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017d86:	3301      	adds	r3, #1
 8017d88:	b2da      	uxtb	r2, r3
 8017d8a:	687b      	ldr	r3, [r7, #4]
 8017d8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	2200      	movs	r2, #0
 8017d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017d96:	2300      	movs	r3, #0
}
 8017d98:	4618      	mov	r0, r3
 8017d9a:	3714      	adds	r7, #20
 8017d9c:	46bd      	mov	sp, r7
 8017d9e:	bd90      	pop	{r4, r7, pc}
 8017da0:	0801dfd8 	.word	0x0801dfd8
 8017da4:	0801e678 	.word	0x0801e678
 8017da8:	0801e02c 	.word	0x0801e02c

08017dac <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017dac:	b580      	push	{r7, lr}
 8017dae:	b082      	sub	sp, #8
 8017db0:	af00      	add	r7, sp, #0
 8017db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d106      	bne.n	8017dc8 <tcp_rexmit_fast+0x1c>
 8017dba:	4b2a      	ldr	r3, [pc, #168]	; (8017e64 <tcp_rexmit_fast+0xb8>)
 8017dbc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8017dc0:	4929      	ldr	r1, [pc, #164]	; (8017e68 <tcp_rexmit_fast+0xbc>)
 8017dc2:	482a      	ldr	r0, [pc, #168]	; (8017e6c <tcp_rexmit_fast+0xc0>)
 8017dc4:	f003 fc8a 	bl	801b6dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d045      	beq.n	8017e5c <tcp_rexmit_fast+0xb0>
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	8b5b      	ldrh	r3, [r3, #26]
 8017dd4:	f003 0304 	and.w	r3, r3, #4
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d13f      	bne.n	8017e5c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f7ff ff79 	bl	8017cd4 <tcp_rexmit>
 8017de2:	4603      	mov	r3, r0
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	d139      	bne.n	8017e5c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017df4:	4293      	cmp	r3, r2
 8017df6:	bf28      	it	cs
 8017df8:	4613      	movcs	r3, r2
 8017dfa:	b29b      	uxth	r3, r3
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	da00      	bge.n	8017e02 <tcp_rexmit_fast+0x56>
 8017e00:	3301      	adds	r3, #1
 8017e02:	105b      	asrs	r3, r3, #1
 8017e04:	b29a      	uxth	r2, r3
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017e12:	461a      	mov	r2, r3
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e18:	005b      	lsls	r3, r3, #1
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	d206      	bcs.n	8017e2c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e22:	005b      	lsls	r3, r3, #1
 8017e24:	b29a      	uxth	r2, r3
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e36:	4619      	mov	r1, r3
 8017e38:	0049      	lsls	r1, r1, #1
 8017e3a:	440b      	add	r3, r1
 8017e3c:	b29b      	uxth	r3, r3
 8017e3e:	4413      	add	r3, r2
 8017e40:	b29a      	uxth	r2, r3
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	8b5b      	ldrh	r3, [r3, #26]
 8017e4c:	f043 0304 	orr.w	r3, r3, #4
 8017e50:	b29a      	uxth	r2, r3
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	2200      	movs	r2, #0
 8017e5a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017e5c:	bf00      	nop
 8017e5e:	3708      	adds	r7, #8
 8017e60:	46bd      	mov	sp, r7
 8017e62:	bd80      	pop	{r7, pc}
 8017e64:	0801dfd8 	.word	0x0801dfd8
 8017e68:	0801e690 	.word	0x0801e690
 8017e6c:	0801e02c 	.word	0x0801e02c

08017e70 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017e70:	b580      	push	{r7, lr}
 8017e72:	b086      	sub	sp, #24
 8017e74:	af00      	add	r7, sp, #0
 8017e76:	60f8      	str	r0, [r7, #12]
 8017e78:	607b      	str	r3, [r7, #4]
 8017e7a:	460b      	mov	r3, r1
 8017e7c:	817b      	strh	r3, [r7, #10]
 8017e7e:	4613      	mov	r3, r2
 8017e80:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017e82:	897a      	ldrh	r2, [r7, #10]
 8017e84:	893b      	ldrh	r3, [r7, #8]
 8017e86:	4413      	add	r3, r2
 8017e88:	b29b      	uxth	r3, r3
 8017e8a:	3314      	adds	r3, #20
 8017e8c:	b29b      	uxth	r3, r3
 8017e8e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e92:	4619      	mov	r1, r3
 8017e94:	2022      	movs	r0, #34	; 0x22
 8017e96:	f7f9 fd09 	bl	80118ac <pbuf_alloc>
 8017e9a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017e9c:	697b      	ldr	r3, [r7, #20]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d04d      	beq.n	8017f3e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017ea2:	897b      	ldrh	r3, [r7, #10]
 8017ea4:	3313      	adds	r3, #19
 8017ea6:	697a      	ldr	r2, [r7, #20]
 8017ea8:	8952      	ldrh	r2, [r2, #10]
 8017eaa:	4293      	cmp	r3, r2
 8017eac:	db06      	blt.n	8017ebc <tcp_output_alloc_header_common+0x4c>
 8017eae:	4b26      	ldr	r3, [pc, #152]	; (8017f48 <tcp_output_alloc_header_common+0xd8>)
 8017eb0:	f240 7223 	movw	r2, #1827	; 0x723
 8017eb4:	4925      	ldr	r1, [pc, #148]	; (8017f4c <tcp_output_alloc_header_common+0xdc>)
 8017eb6:	4826      	ldr	r0, [pc, #152]	; (8017f50 <tcp_output_alloc_header_common+0xe0>)
 8017eb8:	f003 fc10 	bl	801b6dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017ebc:	697b      	ldr	r3, [r7, #20]
 8017ebe:	685b      	ldr	r3, [r3, #4]
 8017ec0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017ec2:	8c3b      	ldrh	r3, [r7, #32]
 8017ec4:	4618      	mov	r0, r3
 8017ec6:	f7f8 fb2b 	bl	8010520 <lwip_htons>
 8017eca:	4603      	mov	r3, r0
 8017ecc:	461a      	mov	r2, r3
 8017ece:	693b      	ldr	r3, [r7, #16]
 8017ed0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017ed4:	4618      	mov	r0, r3
 8017ed6:	f7f8 fb23 	bl	8010520 <lwip_htons>
 8017eda:	4603      	mov	r3, r0
 8017edc:	461a      	mov	r2, r3
 8017ede:	693b      	ldr	r3, [r7, #16]
 8017ee0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017ee2:	693b      	ldr	r3, [r7, #16]
 8017ee4:	687a      	ldr	r2, [r7, #4]
 8017ee6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017ee8:	68f8      	ldr	r0, [r7, #12]
 8017eea:	f7f8 fb2e 	bl	801054a <lwip_htonl>
 8017eee:	4602      	mov	r2, r0
 8017ef0:	693b      	ldr	r3, [r7, #16]
 8017ef2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017ef4:	897b      	ldrh	r3, [r7, #10]
 8017ef6:	089b      	lsrs	r3, r3, #2
 8017ef8:	b29b      	uxth	r3, r3
 8017efa:	3305      	adds	r3, #5
 8017efc:	b29b      	uxth	r3, r3
 8017efe:	031b      	lsls	r3, r3, #12
 8017f00:	b29a      	uxth	r2, r3
 8017f02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017f06:	b29b      	uxth	r3, r3
 8017f08:	4313      	orrs	r3, r2
 8017f0a:	b29b      	uxth	r3, r3
 8017f0c:	4618      	mov	r0, r3
 8017f0e:	f7f8 fb07 	bl	8010520 <lwip_htons>
 8017f12:	4603      	mov	r3, r0
 8017f14:	461a      	mov	r2, r3
 8017f16:	693b      	ldr	r3, [r7, #16]
 8017f18:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017f1a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017f1c:	4618      	mov	r0, r3
 8017f1e:	f7f8 faff 	bl	8010520 <lwip_htons>
 8017f22:	4603      	mov	r3, r0
 8017f24:	461a      	mov	r2, r3
 8017f26:	693b      	ldr	r3, [r7, #16]
 8017f28:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017f2a:	693b      	ldr	r3, [r7, #16]
 8017f2c:	2200      	movs	r2, #0
 8017f2e:	741a      	strb	r2, [r3, #16]
 8017f30:	2200      	movs	r2, #0
 8017f32:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017f34:	693b      	ldr	r3, [r7, #16]
 8017f36:	2200      	movs	r2, #0
 8017f38:	749a      	strb	r2, [r3, #18]
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017f3e:	697b      	ldr	r3, [r7, #20]
}
 8017f40:	4618      	mov	r0, r3
 8017f42:	3718      	adds	r7, #24
 8017f44:	46bd      	mov	sp, r7
 8017f46:	bd80      	pop	{r7, pc}
 8017f48:	0801dfd8 	.word	0x0801dfd8
 8017f4c:	0801e6b0 	.word	0x0801e6b0
 8017f50:	0801e02c 	.word	0x0801e02c

08017f54 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017f54:	b5b0      	push	{r4, r5, r7, lr}
 8017f56:	b08a      	sub	sp, #40	; 0x28
 8017f58:	af04      	add	r7, sp, #16
 8017f5a:	60f8      	str	r0, [r7, #12]
 8017f5c:	607b      	str	r3, [r7, #4]
 8017f5e:	460b      	mov	r3, r1
 8017f60:	817b      	strh	r3, [r7, #10]
 8017f62:	4613      	mov	r3, r2
 8017f64:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d106      	bne.n	8017f7a <tcp_output_alloc_header+0x26>
 8017f6c:	4b15      	ldr	r3, [pc, #84]	; (8017fc4 <tcp_output_alloc_header+0x70>)
 8017f6e:	f240 7242 	movw	r2, #1858	; 0x742
 8017f72:	4915      	ldr	r1, [pc, #84]	; (8017fc8 <tcp_output_alloc_header+0x74>)
 8017f74:	4815      	ldr	r0, [pc, #84]	; (8017fcc <tcp_output_alloc_header+0x78>)
 8017f76:	f003 fbb1 	bl	801b6dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	8adb      	ldrh	r3, [r3, #22]
 8017f82:	68fa      	ldr	r2, [r7, #12]
 8017f84:	8b12      	ldrh	r2, [r2, #24]
 8017f86:	68f9      	ldr	r1, [r7, #12]
 8017f88:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017f8a:	893d      	ldrh	r5, [r7, #8]
 8017f8c:	897c      	ldrh	r4, [r7, #10]
 8017f8e:	9103      	str	r1, [sp, #12]
 8017f90:	2110      	movs	r1, #16
 8017f92:	9102      	str	r1, [sp, #8]
 8017f94:	9201      	str	r2, [sp, #4]
 8017f96:	9300      	str	r3, [sp, #0]
 8017f98:	687b      	ldr	r3, [r7, #4]
 8017f9a:	462a      	mov	r2, r5
 8017f9c:	4621      	mov	r1, r4
 8017f9e:	f7ff ff67 	bl	8017e70 <tcp_output_alloc_header_common>
 8017fa2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017fa4:	697b      	ldr	r3, [r7, #20]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d006      	beq.n	8017fb8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017fae:	68fa      	ldr	r2, [r7, #12]
 8017fb0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017fb2:	441a      	add	r2, r3
 8017fb4:	68fb      	ldr	r3, [r7, #12]
 8017fb6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017fb8:	697b      	ldr	r3, [r7, #20]
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3718      	adds	r7, #24
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	0801dfd8 	.word	0x0801dfd8
 8017fc8:	0801e6e0 	.word	0x0801e6e0
 8017fcc:	0801e02c 	.word	0x0801e02c

08017fd0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017fd0:	b580      	push	{r7, lr}
 8017fd2:	b088      	sub	sp, #32
 8017fd4:	af00      	add	r7, sp, #0
 8017fd6:	60f8      	str	r0, [r7, #12]
 8017fd8:	60b9      	str	r1, [r7, #8]
 8017fda:	4611      	mov	r1, r2
 8017fdc:	461a      	mov	r2, r3
 8017fde:	460b      	mov	r3, r1
 8017fe0:	71fb      	strb	r3, [r7, #7]
 8017fe2:	4613      	mov	r3, r2
 8017fe4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017fea:	68bb      	ldr	r3, [r7, #8]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d106      	bne.n	8017ffe <tcp_output_fill_options+0x2e>
 8017ff0:	4b13      	ldr	r3, [pc, #76]	; (8018040 <tcp_output_fill_options+0x70>)
 8017ff2:	f240 7256 	movw	r2, #1878	; 0x756
 8017ff6:	4913      	ldr	r1, [pc, #76]	; (8018044 <tcp_output_fill_options+0x74>)
 8017ff8:	4813      	ldr	r0, [pc, #76]	; (8018048 <tcp_output_fill_options+0x78>)
 8017ffa:	f003 fb6f 	bl	801b6dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017ffe:	68bb      	ldr	r3, [r7, #8]
 8018000:	685b      	ldr	r3, [r3, #4]
 8018002:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018004:	69bb      	ldr	r3, [r7, #24]
 8018006:	3314      	adds	r3, #20
 8018008:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801800a:	69bb      	ldr	r3, [r7, #24]
 801800c:	f103 0214 	add.w	r2, r3, #20
 8018010:	8bfb      	ldrh	r3, [r7, #30]
 8018012:	009b      	lsls	r3, r3, #2
 8018014:	4619      	mov	r1, r3
 8018016:	79fb      	ldrb	r3, [r7, #7]
 8018018:	009b      	lsls	r3, r3, #2
 801801a:	f003 0304 	and.w	r3, r3, #4
 801801e:	440b      	add	r3, r1
 8018020:	4413      	add	r3, r2
 8018022:	697a      	ldr	r2, [r7, #20]
 8018024:	429a      	cmp	r2, r3
 8018026:	d006      	beq.n	8018036 <tcp_output_fill_options+0x66>
 8018028:	4b05      	ldr	r3, [pc, #20]	; (8018040 <tcp_output_fill_options+0x70>)
 801802a:	f240 7275 	movw	r2, #1909	; 0x775
 801802e:	4907      	ldr	r1, [pc, #28]	; (801804c <tcp_output_fill_options+0x7c>)
 8018030:	4805      	ldr	r0, [pc, #20]	; (8018048 <tcp_output_fill_options+0x78>)
 8018032:	f003 fb53 	bl	801b6dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8018036:	bf00      	nop
 8018038:	3720      	adds	r7, #32
 801803a:	46bd      	mov	sp, r7
 801803c:	bd80      	pop	{r7, pc}
 801803e:	bf00      	nop
 8018040:	0801dfd8 	.word	0x0801dfd8
 8018044:	0801e708 	.word	0x0801e708
 8018048:	0801e02c 	.word	0x0801e02c
 801804c:	0801e600 	.word	0x0801e600

08018050 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8018050:	b580      	push	{r7, lr}
 8018052:	b08a      	sub	sp, #40	; 0x28
 8018054:	af04      	add	r7, sp, #16
 8018056:	60f8      	str	r0, [r7, #12]
 8018058:	60b9      	str	r1, [r7, #8]
 801805a:	607a      	str	r2, [r7, #4]
 801805c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801805e:	68bb      	ldr	r3, [r7, #8]
 8018060:	2b00      	cmp	r3, #0
 8018062:	d106      	bne.n	8018072 <tcp_output_control_segment+0x22>
 8018064:	4b1c      	ldr	r3, [pc, #112]	; (80180d8 <tcp_output_control_segment+0x88>)
 8018066:	f240 7287 	movw	r2, #1927	; 0x787
 801806a:	491c      	ldr	r1, [pc, #112]	; (80180dc <tcp_output_control_segment+0x8c>)
 801806c:	481c      	ldr	r0, [pc, #112]	; (80180e0 <tcp_output_control_segment+0x90>)
 801806e:	f003 fb35 	bl	801b6dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 8018072:	683a      	ldr	r2, [r7, #0]
 8018074:	6879      	ldr	r1, [r7, #4]
 8018076:	68f8      	ldr	r0, [r7, #12]
 8018078:	f7fe fae8 	bl	801664c <tcp_route>
 801807c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d102      	bne.n	801808a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8018084:	23fc      	movs	r3, #252	; 0xfc
 8018086:	75fb      	strb	r3, [r7, #23]
 8018088:	e01c      	b.n	80180c4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801808a:	68fb      	ldr	r3, [r7, #12]
 801808c:	2b00      	cmp	r3, #0
 801808e:	d006      	beq.n	801809e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8018090:	68fb      	ldr	r3, [r7, #12]
 8018092:	7adb      	ldrb	r3, [r3, #11]
 8018094:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	7a9b      	ldrb	r3, [r3, #10]
 801809a:	757b      	strb	r3, [r7, #21]
 801809c:	e003      	b.n	80180a6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801809e:	23ff      	movs	r3, #255	; 0xff
 80180a0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80180a2:	2300      	movs	r3, #0
 80180a4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80180a6:	7dba      	ldrb	r2, [r7, #22]
 80180a8:	693b      	ldr	r3, [r7, #16]
 80180aa:	9302      	str	r3, [sp, #8]
 80180ac:	2306      	movs	r3, #6
 80180ae:	9301      	str	r3, [sp, #4]
 80180b0:	7d7b      	ldrb	r3, [r7, #21]
 80180b2:	9300      	str	r3, [sp, #0]
 80180b4:	4613      	mov	r3, r2
 80180b6:	683a      	ldr	r2, [r7, #0]
 80180b8:	6879      	ldr	r1, [r7, #4]
 80180ba:	68b8      	ldr	r0, [r7, #8]
 80180bc:	f001 ffc6 	bl	801a04c <ip4_output_if>
 80180c0:	4603      	mov	r3, r0
 80180c2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80180c4:	68b8      	ldr	r0, [r7, #8]
 80180c6:	f7f9 fed5 	bl	8011e74 <pbuf_free>
  return err;
 80180ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	3718      	adds	r7, #24
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd80      	pop	{r7, pc}
 80180d6:	bf00      	nop
 80180d8:	0801dfd8 	.word	0x0801dfd8
 80180dc:	0801e730 	.word	0x0801e730
 80180e0:	0801e02c 	.word	0x0801e02c

080180e4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80180e4:	b590      	push	{r4, r7, lr}
 80180e6:	b08b      	sub	sp, #44	; 0x2c
 80180e8:	af04      	add	r7, sp, #16
 80180ea:	60f8      	str	r0, [r7, #12]
 80180ec:	60b9      	str	r1, [r7, #8]
 80180ee:	607a      	str	r2, [r7, #4]
 80180f0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d106      	bne.n	8018106 <tcp_rst+0x22>
 80180f8:	4b1f      	ldr	r3, [pc, #124]	; (8018178 <tcp_rst+0x94>)
 80180fa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80180fe:	491f      	ldr	r1, [pc, #124]	; (801817c <tcp_rst+0x98>)
 8018100:	481f      	ldr	r0, [pc, #124]	; (8018180 <tcp_rst+0x9c>)
 8018102:	f003 faeb 	bl	801b6dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018108:	2b00      	cmp	r3, #0
 801810a:	d106      	bne.n	801811a <tcp_rst+0x36>
 801810c:	4b1a      	ldr	r3, [pc, #104]	; (8018178 <tcp_rst+0x94>)
 801810e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8018112:	491c      	ldr	r1, [pc, #112]	; (8018184 <tcp_rst+0xa0>)
 8018114:	481a      	ldr	r0, [pc, #104]	; (8018180 <tcp_rst+0x9c>)
 8018116:	f003 fae1 	bl	801b6dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801811a:	2300      	movs	r3, #0
 801811c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801811e:	f246 0308 	movw	r3, #24584	; 0x6008
 8018122:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018124:	7dfb      	ldrb	r3, [r7, #23]
 8018126:	b29c      	uxth	r4, r3
 8018128:	68b8      	ldr	r0, [r7, #8]
 801812a:	f7f8 fa0e 	bl	801054a <lwip_htonl>
 801812e:	4602      	mov	r2, r0
 8018130:	8abb      	ldrh	r3, [r7, #20]
 8018132:	9303      	str	r3, [sp, #12]
 8018134:	2314      	movs	r3, #20
 8018136:	9302      	str	r3, [sp, #8]
 8018138:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801813a:	9301      	str	r3, [sp, #4]
 801813c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801813e:	9300      	str	r3, [sp, #0]
 8018140:	4613      	mov	r3, r2
 8018142:	2200      	movs	r2, #0
 8018144:	4621      	mov	r1, r4
 8018146:	6878      	ldr	r0, [r7, #4]
 8018148:	f7ff fe92 	bl	8017e70 <tcp_output_alloc_header_common>
 801814c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801814e:	693b      	ldr	r3, [r7, #16]
 8018150:	2b00      	cmp	r3, #0
 8018152:	d00c      	beq.n	801816e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018154:	7dfb      	ldrb	r3, [r7, #23]
 8018156:	2200      	movs	r2, #0
 8018158:	6939      	ldr	r1, [r7, #16]
 801815a:	68f8      	ldr	r0, [r7, #12]
 801815c:	f7ff ff38 	bl	8017fd0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8018160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018162:	683a      	ldr	r2, [r7, #0]
 8018164:	6939      	ldr	r1, [r7, #16]
 8018166:	68f8      	ldr	r0, [r7, #12]
 8018168:	f7ff ff72 	bl	8018050 <tcp_output_control_segment>
 801816c:	e000      	b.n	8018170 <tcp_rst+0x8c>
    return;
 801816e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8018170:	371c      	adds	r7, #28
 8018172:	46bd      	mov	sp, r7
 8018174:	bd90      	pop	{r4, r7, pc}
 8018176:	bf00      	nop
 8018178:	0801dfd8 	.word	0x0801dfd8
 801817c:	0801e75c 	.word	0x0801e75c
 8018180:	0801e02c 	.word	0x0801e02c
 8018184:	0801e778 	.word	0x0801e778

08018188 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8018188:	b590      	push	{r4, r7, lr}
 801818a:	b087      	sub	sp, #28
 801818c:	af00      	add	r7, sp, #0
 801818e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8018190:	2300      	movs	r3, #0
 8018192:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018194:	2300      	movs	r3, #0
 8018196:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d106      	bne.n	80181ac <tcp_send_empty_ack+0x24>
 801819e:	4b28      	ldr	r3, [pc, #160]	; (8018240 <tcp_send_empty_ack+0xb8>)
 80181a0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80181a4:	4927      	ldr	r1, [pc, #156]	; (8018244 <tcp_send_empty_ack+0xbc>)
 80181a6:	4828      	ldr	r0, [pc, #160]	; (8018248 <tcp_send_empty_ack+0xc0>)
 80181a8:	f003 fa98 	bl	801b6dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80181ac:	7dfb      	ldrb	r3, [r7, #23]
 80181ae:	009b      	lsls	r3, r3, #2
 80181b0:	b2db      	uxtb	r3, r3
 80181b2:	f003 0304 	and.w	r3, r3, #4
 80181b6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80181b8:	7d7b      	ldrb	r3, [r7, #21]
 80181ba:	b29c      	uxth	r4, r3
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80181c0:	4618      	mov	r0, r3
 80181c2:	f7f8 f9c2 	bl	801054a <lwip_htonl>
 80181c6:	4603      	mov	r3, r0
 80181c8:	2200      	movs	r2, #0
 80181ca:	4621      	mov	r1, r4
 80181cc:	6878      	ldr	r0, [r7, #4]
 80181ce:	f7ff fec1 	bl	8017f54 <tcp_output_alloc_header>
 80181d2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80181d4:	693b      	ldr	r3, [r7, #16]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d109      	bne.n	80181ee <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	8b5b      	ldrh	r3, [r3, #26]
 80181de:	f043 0303 	orr.w	r3, r3, #3
 80181e2:	b29a      	uxth	r2, r3
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80181e8:	f06f 0301 	mvn.w	r3, #1
 80181ec:	e023      	b.n	8018236 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80181ee:	7dbb      	ldrb	r3, [r7, #22]
 80181f0:	7dfa      	ldrb	r2, [r7, #23]
 80181f2:	6939      	ldr	r1, [r7, #16]
 80181f4:	6878      	ldr	r0, [r7, #4]
 80181f6:	f7ff feeb 	bl	8017fd0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80181fa:	687a      	ldr	r2, [r7, #4]
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	3304      	adds	r3, #4
 8018200:	6939      	ldr	r1, [r7, #16]
 8018202:	6878      	ldr	r0, [r7, #4]
 8018204:	f7ff ff24 	bl	8018050 <tcp_output_control_segment>
 8018208:	4603      	mov	r3, r0
 801820a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801820c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018210:	2b00      	cmp	r3, #0
 8018212:	d007      	beq.n	8018224 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	8b5b      	ldrh	r3, [r3, #26]
 8018218:	f043 0303 	orr.w	r3, r3, #3
 801821c:	b29a      	uxth	r2, r3
 801821e:	687b      	ldr	r3, [r7, #4]
 8018220:	835a      	strh	r2, [r3, #26]
 8018222:	e006      	b.n	8018232 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	8b5b      	ldrh	r3, [r3, #26]
 8018228:	f023 0303 	bic.w	r3, r3, #3
 801822c:	b29a      	uxth	r2, r3
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018232:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018236:	4618      	mov	r0, r3
 8018238:	371c      	adds	r7, #28
 801823a:	46bd      	mov	sp, r7
 801823c:	bd90      	pop	{r4, r7, pc}
 801823e:	bf00      	nop
 8018240:	0801dfd8 	.word	0x0801dfd8
 8018244:	0801e794 	.word	0x0801e794
 8018248:	0801e02c 	.word	0x0801e02c

0801824c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801824c:	b590      	push	{r4, r7, lr}
 801824e:	b087      	sub	sp, #28
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018254:	2300      	movs	r3, #0
 8018256:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d106      	bne.n	801826c <tcp_keepalive+0x20>
 801825e:	4b18      	ldr	r3, [pc, #96]	; (80182c0 <tcp_keepalive+0x74>)
 8018260:	f640 0224 	movw	r2, #2084	; 0x824
 8018264:	4917      	ldr	r1, [pc, #92]	; (80182c4 <tcp_keepalive+0x78>)
 8018266:	4818      	ldr	r0, [pc, #96]	; (80182c8 <tcp_keepalive+0x7c>)
 8018268:	f003 fa38 	bl	801b6dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801826c:	7dfb      	ldrb	r3, [r7, #23]
 801826e:	b29c      	uxth	r4, r3
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018274:	3b01      	subs	r3, #1
 8018276:	4618      	mov	r0, r3
 8018278:	f7f8 f967 	bl	801054a <lwip_htonl>
 801827c:	4603      	mov	r3, r0
 801827e:	2200      	movs	r2, #0
 8018280:	4621      	mov	r1, r4
 8018282:	6878      	ldr	r0, [r7, #4]
 8018284:	f7ff fe66 	bl	8017f54 <tcp_output_alloc_header>
 8018288:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801828a:	693b      	ldr	r3, [r7, #16]
 801828c:	2b00      	cmp	r3, #0
 801828e:	d102      	bne.n	8018296 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018290:	f04f 33ff 	mov.w	r3, #4294967295
 8018294:	e010      	b.n	80182b8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018296:	7dfb      	ldrb	r3, [r7, #23]
 8018298:	2200      	movs	r2, #0
 801829a:	6939      	ldr	r1, [r7, #16]
 801829c:	6878      	ldr	r0, [r7, #4]
 801829e:	f7ff fe97 	bl	8017fd0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80182a2:	687a      	ldr	r2, [r7, #4]
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	3304      	adds	r3, #4
 80182a8:	6939      	ldr	r1, [r7, #16]
 80182aa:	6878      	ldr	r0, [r7, #4]
 80182ac:	f7ff fed0 	bl	8018050 <tcp_output_control_segment>
 80182b0:	4603      	mov	r3, r0
 80182b2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80182b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80182b8:	4618      	mov	r0, r3
 80182ba:	371c      	adds	r7, #28
 80182bc:	46bd      	mov	sp, r7
 80182be:	bd90      	pop	{r4, r7, pc}
 80182c0:	0801dfd8 	.word	0x0801dfd8
 80182c4:	0801e7b4 	.word	0x0801e7b4
 80182c8:	0801e02c 	.word	0x0801e02c

080182cc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80182cc:	b590      	push	{r4, r7, lr}
 80182ce:	b08b      	sub	sp, #44	; 0x2c
 80182d0:	af00      	add	r7, sp, #0
 80182d2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80182d4:	2300      	movs	r3, #0
 80182d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	2b00      	cmp	r3, #0
 80182de:	d106      	bne.n	80182ee <tcp_zero_window_probe+0x22>
 80182e0:	4b4c      	ldr	r3, [pc, #304]	; (8018414 <tcp_zero_window_probe+0x148>)
 80182e2:	f640 024f 	movw	r2, #2127	; 0x84f
 80182e6:	494c      	ldr	r1, [pc, #304]	; (8018418 <tcp_zero_window_probe+0x14c>)
 80182e8:	484c      	ldr	r0, [pc, #304]	; (801841c <tcp_zero_window_probe+0x150>)
 80182ea:	f003 f9f7 	bl	801b6dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80182f2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80182f4:	6a3b      	ldr	r3, [r7, #32]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d101      	bne.n	80182fe <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80182fa:	2300      	movs	r3, #0
 80182fc:	e086      	b.n	801840c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018304:	2bff      	cmp	r3, #255	; 0xff
 8018306:	d007      	beq.n	8018318 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801830e:	3301      	adds	r3, #1
 8018310:	b2da      	uxtb	r2, r3
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018318:	6a3b      	ldr	r3, [r7, #32]
 801831a:	68db      	ldr	r3, [r3, #12]
 801831c:	899b      	ldrh	r3, [r3, #12]
 801831e:	b29b      	uxth	r3, r3
 8018320:	4618      	mov	r0, r3
 8018322:	f7f8 f8fd 	bl	8010520 <lwip_htons>
 8018326:	4603      	mov	r3, r0
 8018328:	b2db      	uxtb	r3, r3
 801832a:	f003 0301 	and.w	r3, r3, #1
 801832e:	2b00      	cmp	r3, #0
 8018330:	d005      	beq.n	801833e <tcp_zero_window_probe+0x72>
 8018332:	6a3b      	ldr	r3, [r7, #32]
 8018334:	891b      	ldrh	r3, [r3, #8]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d101      	bne.n	801833e <tcp_zero_window_probe+0x72>
 801833a:	2301      	movs	r3, #1
 801833c:	e000      	b.n	8018340 <tcp_zero_window_probe+0x74>
 801833e:	2300      	movs	r3, #0
 8018340:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018342:	7ffb      	ldrb	r3, [r7, #31]
 8018344:	2b00      	cmp	r3, #0
 8018346:	bf0c      	ite	eq
 8018348:	2301      	moveq	r3, #1
 801834a:	2300      	movne	r3, #0
 801834c:	b2db      	uxtb	r3, r3
 801834e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018350:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018354:	b299      	uxth	r1, r3
 8018356:	6a3b      	ldr	r3, [r7, #32]
 8018358:	68db      	ldr	r3, [r3, #12]
 801835a:	685b      	ldr	r3, [r3, #4]
 801835c:	8bba      	ldrh	r2, [r7, #28]
 801835e:	6878      	ldr	r0, [r7, #4]
 8018360:	f7ff fdf8 	bl	8017f54 <tcp_output_alloc_header>
 8018364:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018366:	69bb      	ldr	r3, [r7, #24]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d102      	bne.n	8018372 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801836c:	f04f 33ff 	mov.w	r3, #4294967295
 8018370:	e04c      	b.n	801840c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018372:	69bb      	ldr	r3, [r7, #24]
 8018374:	685b      	ldr	r3, [r3, #4]
 8018376:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018378:	7ffb      	ldrb	r3, [r7, #31]
 801837a:	2b00      	cmp	r3, #0
 801837c:	d011      	beq.n	80183a2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801837e:	697b      	ldr	r3, [r7, #20]
 8018380:	899b      	ldrh	r3, [r3, #12]
 8018382:	b29b      	uxth	r3, r3
 8018384:	b21b      	sxth	r3, r3
 8018386:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801838a:	b21c      	sxth	r4, r3
 801838c:	2011      	movs	r0, #17
 801838e:	f7f8 f8c7 	bl	8010520 <lwip_htons>
 8018392:	4603      	mov	r3, r0
 8018394:	b21b      	sxth	r3, r3
 8018396:	4323      	orrs	r3, r4
 8018398:	b21b      	sxth	r3, r3
 801839a:	b29a      	uxth	r2, r3
 801839c:	697b      	ldr	r3, [r7, #20]
 801839e:	819a      	strh	r2, [r3, #12]
 80183a0:	e010      	b.n	80183c4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80183a2:	69bb      	ldr	r3, [r7, #24]
 80183a4:	685b      	ldr	r3, [r3, #4]
 80183a6:	3314      	adds	r3, #20
 80183a8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80183aa:	6a3b      	ldr	r3, [r7, #32]
 80183ac:	6858      	ldr	r0, [r3, #4]
 80183ae:	6a3b      	ldr	r3, [r7, #32]
 80183b0:	685b      	ldr	r3, [r3, #4]
 80183b2:	891a      	ldrh	r2, [r3, #8]
 80183b4:	6a3b      	ldr	r3, [r7, #32]
 80183b6:	891b      	ldrh	r3, [r3, #8]
 80183b8:	1ad3      	subs	r3, r2, r3
 80183ba:	b29b      	uxth	r3, r3
 80183bc:	2201      	movs	r2, #1
 80183be:	6939      	ldr	r1, [r7, #16]
 80183c0:	f7f9 ff5e 	bl	8012280 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80183c4:	6a3b      	ldr	r3, [r7, #32]
 80183c6:	68db      	ldr	r3, [r3, #12]
 80183c8:	685b      	ldr	r3, [r3, #4]
 80183ca:	4618      	mov	r0, r3
 80183cc:	f7f8 f8bd 	bl	801054a <lwip_htonl>
 80183d0:	4603      	mov	r3, r0
 80183d2:	3301      	adds	r3, #1
 80183d4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80183da:	68fb      	ldr	r3, [r7, #12]
 80183dc:	1ad3      	subs	r3, r2, r3
 80183de:	2b00      	cmp	r3, #0
 80183e0:	da02      	bge.n	80183e8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80183e2:	687b      	ldr	r3, [r7, #4]
 80183e4:	68fa      	ldr	r2, [r7, #12]
 80183e6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80183e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80183ec:	2200      	movs	r2, #0
 80183ee:	69b9      	ldr	r1, [r7, #24]
 80183f0:	6878      	ldr	r0, [r7, #4]
 80183f2:	f7ff fded 	bl	8017fd0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80183f6:	687a      	ldr	r2, [r7, #4]
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	3304      	adds	r3, #4
 80183fc:	69b9      	ldr	r1, [r7, #24]
 80183fe:	6878      	ldr	r0, [r7, #4]
 8018400:	f7ff fe26 	bl	8018050 <tcp_output_control_segment>
 8018404:	4603      	mov	r3, r0
 8018406:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018408:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801840c:	4618      	mov	r0, r3
 801840e:	372c      	adds	r7, #44	; 0x2c
 8018410:	46bd      	mov	sp, r7
 8018412:	bd90      	pop	{r4, r7, pc}
 8018414:	0801dfd8 	.word	0x0801dfd8
 8018418:	0801e7d0 	.word	0x0801e7d0
 801841c:	0801e02c 	.word	0x0801e02c

08018420 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b082      	sub	sp, #8
 8018424:	af00      	add	r7, sp, #0
 8018426:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018428:	f7fa f818 	bl	801245c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801842c:	4b0a      	ldr	r3, [pc, #40]	; (8018458 <tcpip_tcp_timer+0x38>)
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	2b00      	cmp	r3, #0
 8018432:	d103      	bne.n	801843c <tcpip_tcp_timer+0x1c>
 8018434:	4b09      	ldr	r3, [pc, #36]	; (801845c <tcpip_tcp_timer+0x3c>)
 8018436:	681b      	ldr	r3, [r3, #0]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d005      	beq.n	8018448 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801843c:	2200      	movs	r2, #0
 801843e:	4908      	ldr	r1, [pc, #32]	; (8018460 <tcpip_tcp_timer+0x40>)
 8018440:	20fa      	movs	r0, #250	; 0xfa
 8018442:	f000 f8f3 	bl	801862c <sys_timeout>
 8018446:	e003      	b.n	8018450 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018448:	4b06      	ldr	r3, [pc, #24]	; (8018464 <tcpip_tcp_timer+0x44>)
 801844a:	2200      	movs	r2, #0
 801844c:	601a      	str	r2, [r3, #0]
  }
}
 801844e:	bf00      	nop
 8018450:	bf00      	nop
 8018452:	3708      	adds	r7, #8
 8018454:	46bd      	mov	sp, r7
 8018456:	bd80      	pop	{r7, pc}
 8018458:	240082dc 	.word	0x240082dc
 801845c:	240082ec 	.word	0x240082ec
 8018460:	08018421 	.word	0x08018421
 8018464:	24004b3c 	.word	0x24004b3c

08018468 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018468:	b580      	push	{r7, lr}
 801846a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801846c:	4b0a      	ldr	r3, [pc, #40]	; (8018498 <tcp_timer_needed+0x30>)
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	2b00      	cmp	r3, #0
 8018472:	d10f      	bne.n	8018494 <tcp_timer_needed+0x2c>
 8018474:	4b09      	ldr	r3, [pc, #36]	; (801849c <tcp_timer_needed+0x34>)
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	2b00      	cmp	r3, #0
 801847a:	d103      	bne.n	8018484 <tcp_timer_needed+0x1c>
 801847c:	4b08      	ldr	r3, [pc, #32]	; (80184a0 <tcp_timer_needed+0x38>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d007      	beq.n	8018494 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018484:	4b04      	ldr	r3, [pc, #16]	; (8018498 <tcp_timer_needed+0x30>)
 8018486:	2201      	movs	r2, #1
 8018488:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801848a:	2200      	movs	r2, #0
 801848c:	4905      	ldr	r1, [pc, #20]	; (80184a4 <tcp_timer_needed+0x3c>)
 801848e:	20fa      	movs	r0, #250	; 0xfa
 8018490:	f000 f8cc 	bl	801862c <sys_timeout>
  }
}
 8018494:	bf00      	nop
 8018496:	bd80      	pop	{r7, pc}
 8018498:	24004b3c 	.word	0x24004b3c
 801849c:	240082dc 	.word	0x240082dc
 80184a0:	240082ec 	.word	0x240082ec
 80184a4:	08018421 	.word	0x08018421

080184a8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80184a8:	b580      	push	{r7, lr}
 80184aa:	b086      	sub	sp, #24
 80184ac:	af00      	add	r7, sp, #0
 80184ae:	60f8      	str	r0, [r7, #12]
 80184b0:	60b9      	str	r1, [r7, #8]
 80184b2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80184b4:	200a      	movs	r0, #10
 80184b6:	f7f8 fdc3 	bl	8011040 <memp_malloc>
 80184ba:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80184bc:	693b      	ldr	r3, [r7, #16]
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d109      	bne.n	80184d6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80184c2:	693b      	ldr	r3, [r7, #16]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d151      	bne.n	801856c <sys_timeout_abs+0xc4>
 80184c8:	4b2a      	ldr	r3, [pc, #168]	; (8018574 <sys_timeout_abs+0xcc>)
 80184ca:	22be      	movs	r2, #190	; 0xbe
 80184cc:	492a      	ldr	r1, [pc, #168]	; (8018578 <sys_timeout_abs+0xd0>)
 80184ce:	482b      	ldr	r0, [pc, #172]	; (801857c <sys_timeout_abs+0xd4>)
 80184d0:	f003 f904 	bl	801b6dc <iprintf>
    return;
 80184d4:	e04a      	b.n	801856c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80184d6:	693b      	ldr	r3, [r7, #16]
 80184d8:	2200      	movs	r2, #0
 80184da:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80184dc:	693b      	ldr	r3, [r7, #16]
 80184de:	68ba      	ldr	r2, [r7, #8]
 80184e0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80184e2:	693b      	ldr	r3, [r7, #16]
 80184e4:	687a      	ldr	r2, [r7, #4]
 80184e6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80184e8:	693b      	ldr	r3, [r7, #16]
 80184ea:	68fa      	ldr	r2, [r7, #12]
 80184ec:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80184ee:	4b24      	ldr	r3, [pc, #144]	; (8018580 <sys_timeout_abs+0xd8>)
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	d103      	bne.n	80184fe <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80184f6:	4a22      	ldr	r2, [pc, #136]	; (8018580 <sys_timeout_abs+0xd8>)
 80184f8:	693b      	ldr	r3, [r7, #16]
 80184fa:	6013      	str	r3, [r2, #0]
    return;
 80184fc:	e037      	b.n	801856e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80184fe:	693b      	ldr	r3, [r7, #16]
 8018500:	685a      	ldr	r2, [r3, #4]
 8018502:	4b1f      	ldr	r3, [pc, #124]	; (8018580 <sys_timeout_abs+0xd8>)
 8018504:	681b      	ldr	r3, [r3, #0]
 8018506:	685b      	ldr	r3, [r3, #4]
 8018508:	1ad3      	subs	r3, r2, r3
 801850a:	0fdb      	lsrs	r3, r3, #31
 801850c:	f003 0301 	and.w	r3, r3, #1
 8018510:	b2db      	uxtb	r3, r3
 8018512:	2b00      	cmp	r3, #0
 8018514:	d007      	beq.n	8018526 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018516:	4b1a      	ldr	r3, [pc, #104]	; (8018580 <sys_timeout_abs+0xd8>)
 8018518:	681a      	ldr	r2, [r3, #0]
 801851a:	693b      	ldr	r3, [r7, #16]
 801851c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801851e:	4a18      	ldr	r2, [pc, #96]	; (8018580 <sys_timeout_abs+0xd8>)
 8018520:	693b      	ldr	r3, [r7, #16]
 8018522:	6013      	str	r3, [r2, #0]
 8018524:	e023      	b.n	801856e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018526:	4b16      	ldr	r3, [pc, #88]	; (8018580 <sys_timeout_abs+0xd8>)
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	617b      	str	r3, [r7, #20]
 801852c:	e01a      	b.n	8018564 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801852e:	697b      	ldr	r3, [r7, #20]
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d00b      	beq.n	801854e <sys_timeout_abs+0xa6>
 8018536:	693b      	ldr	r3, [r7, #16]
 8018538:	685a      	ldr	r2, [r3, #4]
 801853a:	697b      	ldr	r3, [r7, #20]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	685b      	ldr	r3, [r3, #4]
 8018540:	1ad3      	subs	r3, r2, r3
 8018542:	0fdb      	lsrs	r3, r3, #31
 8018544:	f003 0301 	and.w	r3, r3, #1
 8018548:	b2db      	uxtb	r3, r3
 801854a:	2b00      	cmp	r3, #0
 801854c:	d007      	beq.n	801855e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801854e:	697b      	ldr	r3, [r7, #20]
 8018550:	681a      	ldr	r2, [r3, #0]
 8018552:	693b      	ldr	r3, [r7, #16]
 8018554:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018556:	697b      	ldr	r3, [r7, #20]
 8018558:	693a      	ldr	r2, [r7, #16]
 801855a:	601a      	str	r2, [r3, #0]
        break;
 801855c:	e007      	b.n	801856e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801855e:	697b      	ldr	r3, [r7, #20]
 8018560:	681b      	ldr	r3, [r3, #0]
 8018562:	617b      	str	r3, [r7, #20]
 8018564:	697b      	ldr	r3, [r7, #20]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d1e1      	bne.n	801852e <sys_timeout_abs+0x86>
 801856a:	e000      	b.n	801856e <sys_timeout_abs+0xc6>
    return;
 801856c:	bf00      	nop
      }
    }
  }
}
 801856e:	3718      	adds	r7, #24
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}
 8018574:	0801e7f4 	.word	0x0801e7f4
 8018578:	0801e828 	.word	0x0801e828
 801857c:	0801e868 	.word	0x0801e868
 8018580:	24004b34 	.word	0x24004b34

08018584 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018584:	b580      	push	{r7, lr}
 8018586:	b086      	sub	sp, #24
 8018588:	af00      	add	r7, sp, #0
 801858a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801858c:	687b      	ldr	r3, [r7, #4]
 801858e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018590:	697b      	ldr	r3, [r7, #20]
 8018592:	685b      	ldr	r3, [r3, #4]
 8018594:	4798      	blx	r3

  now = sys_now();
 8018596:	f7f3 fcf5 	bl	800bf84 <sys_now>
 801859a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801859c:	697b      	ldr	r3, [r7, #20]
 801859e:	681a      	ldr	r2, [r3, #0]
 80185a0:	4b0f      	ldr	r3, [pc, #60]	; (80185e0 <lwip_cyclic_timer+0x5c>)
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	4413      	add	r3, r2
 80185a6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80185a8:	68fa      	ldr	r2, [r7, #12]
 80185aa:	693b      	ldr	r3, [r7, #16]
 80185ac:	1ad3      	subs	r3, r2, r3
 80185ae:	0fdb      	lsrs	r3, r3, #31
 80185b0:	f003 0301 	and.w	r3, r3, #1
 80185b4:	b2db      	uxtb	r3, r3
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	d009      	beq.n	80185ce <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80185ba:	697b      	ldr	r3, [r7, #20]
 80185bc:	681a      	ldr	r2, [r3, #0]
 80185be:	693b      	ldr	r3, [r7, #16]
 80185c0:	4413      	add	r3, r2
 80185c2:	687a      	ldr	r2, [r7, #4]
 80185c4:	4907      	ldr	r1, [pc, #28]	; (80185e4 <lwip_cyclic_timer+0x60>)
 80185c6:	4618      	mov	r0, r3
 80185c8:	f7ff ff6e 	bl	80184a8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80185cc:	e004      	b.n	80185d8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80185ce:	687a      	ldr	r2, [r7, #4]
 80185d0:	4904      	ldr	r1, [pc, #16]	; (80185e4 <lwip_cyclic_timer+0x60>)
 80185d2:	68f8      	ldr	r0, [r7, #12]
 80185d4:	f7ff ff68 	bl	80184a8 <sys_timeout_abs>
}
 80185d8:	bf00      	nop
 80185da:	3718      	adds	r7, #24
 80185dc:	46bd      	mov	sp, r7
 80185de:	bd80      	pop	{r7, pc}
 80185e0:	24004b38 	.word	0x24004b38
 80185e4:	08018585 	.word	0x08018585

080185e8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b082      	sub	sp, #8
 80185ec:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80185ee:	2301      	movs	r3, #1
 80185f0:	607b      	str	r3, [r7, #4]
 80185f2:	e00e      	b.n	8018612 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80185f4:	4a0b      	ldr	r2, [pc, #44]	; (8018624 <sys_timeouts_init+0x3c>)
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	00db      	lsls	r3, r3, #3
 8018600:	4a08      	ldr	r2, [pc, #32]	; (8018624 <sys_timeouts_init+0x3c>)
 8018602:	4413      	add	r3, r2
 8018604:	461a      	mov	r2, r3
 8018606:	4908      	ldr	r1, [pc, #32]	; (8018628 <sys_timeouts_init+0x40>)
 8018608:	f000 f810 	bl	801862c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	3301      	adds	r3, #1
 8018610:	607b      	str	r3, [r7, #4]
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2b02      	cmp	r3, #2
 8018616:	d9ed      	bls.n	80185f4 <sys_timeouts_init+0xc>
  }
}
 8018618:	bf00      	nop
 801861a:	bf00      	nop
 801861c:	3708      	adds	r7, #8
 801861e:	46bd      	mov	sp, r7
 8018620:	bd80      	pop	{r7, pc}
 8018622:	bf00      	nop
 8018624:	0801fd08 	.word	0x0801fd08
 8018628:	08018585 	.word	0x08018585

0801862c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801862c:	b580      	push	{r7, lr}
 801862e:	b086      	sub	sp, #24
 8018630:	af00      	add	r7, sp, #0
 8018632:	60f8      	str	r0, [r7, #12]
 8018634:	60b9      	str	r1, [r7, #8]
 8018636:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801863e:	d306      	bcc.n	801864e <sys_timeout+0x22>
 8018640:	4b0a      	ldr	r3, [pc, #40]	; (801866c <sys_timeout+0x40>)
 8018642:	f240 1229 	movw	r2, #297	; 0x129
 8018646:	490a      	ldr	r1, [pc, #40]	; (8018670 <sys_timeout+0x44>)
 8018648:	480a      	ldr	r0, [pc, #40]	; (8018674 <sys_timeout+0x48>)
 801864a:	f003 f847 	bl	801b6dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801864e:	f7f3 fc99 	bl	800bf84 <sys_now>
 8018652:	4602      	mov	r2, r0
 8018654:	68fb      	ldr	r3, [r7, #12]
 8018656:	4413      	add	r3, r2
 8018658:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801865a:	687a      	ldr	r2, [r7, #4]
 801865c:	68b9      	ldr	r1, [r7, #8]
 801865e:	6978      	ldr	r0, [r7, #20]
 8018660:	f7ff ff22 	bl	80184a8 <sys_timeout_abs>
#endif
}
 8018664:	bf00      	nop
 8018666:	3718      	adds	r7, #24
 8018668:	46bd      	mov	sp, r7
 801866a:	bd80      	pop	{r7, pc}
 801866c:	0801e7f4 	.word	0x0801e7f4
 8018670:	0801e890 	.word	0x0801e890
 8018674:	0801e868 	.word	0x0801e868

08018678 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018678:	b580      	push	{r7, lr}
 801867a:	b084      	sub	sp, #16
 801867c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801867e:	f7f3 fc81 	bl	800bf84 <sys_now>
 8018682:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018684:	4b17      	ldr	r3, [pc, #92]	; (80186e4 <sys_check_timeouts+0x6c>)
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801868a:	68bb      	ldr	r3, [r7, #8]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d022      	beq.n	80186d6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018690:	68bb      	ldr	r3, [r7, #8]
 8018692:	685b      	ldr	r3, [r3, #4]
 8018694:	68fa      	ldr	r2, [r7, #12]
 8018696:	1ad3      	subs	r3, r2, r3
 8018698:	0fdb      	lsrs	r3, r3, #31
 801869a:	f003 0301 	and.w	r3, r3, #1
 801869e:	b2db      	uxtb	r3, r3
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d11a      	bne.n	80186da <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	4a0e      	ldr	r2, [pc, #56]	; (80186e4 <sys_check_timeouts+0x6c>)
 80186aa:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80186ac:	68bb      	ldr	r3, [r7, #8]
 80186ae:	689b      	ldr	r3, [r3, #8]
 80186b0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80186b2:	68bb      	ldr	r3, [r7, #8]
 80186b4:	68db      	ldr	r3, [r3, #12]
 80186b6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80186b8:	68bb      	ldr	r3, [r7, #8]
 80186ba:	685b      	ldr	r3, [r3, #4]
 80186bc:	4a0a      	ldr	r2, [pc, #40]	; (80186e8 <sys_check_timeouts+0x70>)
 80186be:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80186c0:	68b9      	ldr	r1, [r7, #8]
 80186c2:	200a      	movs	r0, #10
 80186c4:	f7f8 fd32 	bl	801112c <memp_free>
    if (handler != NULL) {
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	2b00      	cmp	r3, #0
 80186cc:	d0da      	beq.n	8018684 <sys_check_timeouts+0xc>
      handler(arg);
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	6838      	ldr	r0, [r7, #0]
 80186d2:	4798      	blx	r3
  do {
 80186d4:	e7d6      	b.n	8018684 <sys_check_timeouts+0xc>
      return;
 80186d6:	bf00      	nop
 80186d8:	e000      	b.n	80186dc <sys_check_timeouts+0x64>
      return;
 80186da:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80186dc:	3710      	adds	r7, #16
 80186de:	46bd      	mov	sp, r7
 80186e0:	bd80      	pop	{r7, pc}
 80186e2:	bf00      	nop
 80186e4:	24004b34 	.word	0x24004b34
 80186e8:	24004b38 	.word	0x24004b38

080186ec <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b082      	sub	sp, #8
 80186f0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80186f2:	4b16      	ldr	r3, [pc, #88]	; (801874c <sys_timeouts_sleeptime+0x60>)
 80186f4:	681b      	ldr	r3, [r3, #0]
 80186f6:	2b00      	cmp	r3, #0
 80186f8:	d102      	bne.n	8018700 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80186fa:	f04f 33ff 	mov.w	r3, #4294967295
 80186fe:	e020      	b.n	8018742 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018700:	f7f3 fc40 	bl	800bf84 <sys_now>
 8018704:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018706:	4b11      	ldr	r3, [pc, #68]	; (801874c <sys_timeouts_sleeptime+0x60>)
 8018708:	681b      	ldr	r3, [r3, #0]
 801870a:	685a      	ldr	r2, [r3, #4]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	1ad3      	subs	r3, r2, r3
 8018710:	0fdb      	lsrs	r3, r3, #31
 8018712:	f003 0301 	and.w	r3, r3, #1
 8018716:	b2db      	uxtb	r3, r3
 8018718:	2b00      	cmp	r3, #0
 801871a:	d001      	beq.n	8018720 <sys_timeouts_sleeptime+0x34>
    return 0;
 801871c:	2300      	movs	r3, #0
 801871e:	e010      	b.n	8018742 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018720:	4b0a      	ldr	r3, [pc, #40]	; (801874c <sys_timeouts_sleeptime+0x60>)
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	685a      	ldr	r2, [r3, #4]
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	1ad3      	subs	r3, r2, r3
 801872a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801872c:	683b      	ldr	r3, [r7, #0]
 801872e:	2b00      	cmp	r3, #0
 8018730:	da06      	bge.n	8018740 <sys_timeouts_sleeptime+0x54>
 8018732:	4b07      	ldr	r3, [pc, #28]	; (8018750 <sys_timeouts_sleeptime+0x64>)
 8018734:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8018738:	4906      	ldr	r1, [pc, #24]	; (8018754 <sys_timeouts_sleeptime+0x68>)
 801873a:	4807      	ldr	r0, [pc, #28]	; (8018758 <sys_timeouts_sleeptime+0x6c>)
 801873c:	f002 ffce 	bl	801b6dc <iprintf>
    return ret;
 8018740:	683b      	ldr	r3, [r7, #0]
  }
}
 8018742:	4618      	mov	r0, r3
 8018744:	3708      	adds	r7, #8
 8018746:	46bd      	mov	sp, r7
 8018748:	bd80      	pop	{r7, pc}
 801874a:	bf00      	nop
 801874c:	24004b34 	.word	0x24004b34
 8018750:	0801e7f4 	.word	0x0801e7f4
 8018754:	0801e8c8 	.word	0x0801e8c8
 8018758:	0801e868 	.word	0x0801e868

0801875c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801875c:	b580      	push	{r7, lr}
 801875e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018760:	f002 ffd4 	bl	801b70c <rand>
 8018764:	4603      	mov	r3, r0
 8018766:	b29b      	uxth	r3, r3
 8018768:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801876c:	b29b      	uxth	r3, r3
 801876e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018772:	b29a      	uxth	r2, r3
 8018774:	4b01      	ldr	r3, [pc, #4]	; (801877c <udp_init+0x20>)
 8018776:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018778:	bf00      	nop
 801877a:	bd80      	pop	{r7, pc}
 801877c:	24000038 	.word	0x24000038

08018780 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8018780:	b580      	push	{r7, lr}
 8018782:	b084      	sub	sp, #16
 8018784:	af00      	add	r7, sp, #0
 8018786:	60f8      	str	r0, [r7, #12]
 8018788:	60b9      	str	r1, [r7, #8]
 801878a:	4613      	mov	r3, r2
 801878c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801878e:	68fb      	ldr	r3, [r7, #12]
 8018790:	2b00      	cmp	r3, #0
 8018792:	d105      	bne.n	80187a0 <udp_input_local_match+0x20>
 8018794:	4b27      	ldr	r3, [pc, #156]	; (8018834 <udp_input_local_match+0xb4>)
 8018796:	2287      	movs	r2, #135	; 0x87
 8018798:	4927      	ldr	r1, [pc, #156]	; (8018838 <udp_input_local_match+0xb8>)
 801879a:	4828      	ldr	r0, [pc, #160]	; (801883c <udp_input_local_match+0xbc>)
 801879c:	f002 ff9e 	bl	801b6dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80187a0:	68bb      	ldr	r3, [r7, #8]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d105      	bne.n	80187b2 <udp_input_local_match+0x32>
 80187a6:	4b23      	ldr	r3, [pc, #140]	; (8018834 <udp_input_local_match+0xb4>)
 80187a8:	2288      	movs	r2, #136	; 0x88
 80187aa:	4925      	ldr	r1, [pc, #148]	; (8018840 <udp_input_local_match+0xc0>)
 80187ac:	4823      	ldr	r0, [pc, #140]	; (801883c <udp_input_local_match+0xbc>)
 80187ae:	f002 ff95 	bl	801b6dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	7a1b      	ldrb	r3, [r3, #8]
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d00b      	beq.n	80187d2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80187ba:	68fb      	ldr	r3, [r7, #12]
 80187bc:	7a1a      	ldrb	r2, [r3, #8]
 80187be:	4b21      	ldr	r3, [pc, #132]	; (8018844 <udp_input_local_match+0xc4>)
 80187c0:	685b      	ldr	r3, [r3, #4]
 80187c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80187c6:	3301      	adds	r3, #1
 80187c8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80187ca:	429a      	cmp	r2, r3
 80187cc:	d001      	beq.n	80187d2 <udp_input_local_match+0x52>
    return 0;
 80187ce:	2300      	movs	r3, #0
 80187d0:	e02b      	b.n	801882a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80187d2:	79fb      	ldrb	r3, [r7, #7]
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	d018      	beq.n	801880a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80187d8:	68fb      	ldr	r3, [r7, #12]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d013      	beq.n	8018806 <udp_input_local_match+0x86>
 80187de:	68fb      	ldr	r3, [r7, #12]
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d00f      	beq.n	8018806 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80187e6:	4b17      	ldr	r3, [pc, #92]	; (8018844 <udp_input_local_match+0xc4>)
 80187e8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80187ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80187ee:	d00a      	beq.n	8018806 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80187f0:	68fb      	ldr	r3, [r7, #12]
 80187f2:	681a      	ldr	r2, [r3, #0]
 80187f4:	4b13      	ldr	r3, [pc, #76]	; (8018844 <udp_input_local_match+0xc4>)
 80187f6:	695b      	ldr	r3, [r3, #20]
 80187f8:	405a      	eors	r2, r3
 80187fa:	68bb      	ldr	r3, [r7, #8]
 80187fc:	3308      	adds	r3, #8
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018802:	2b00      	cmp	r3, #0
 8018804:	d110      	bne.n	8018828 <udp_input_local_match+0xa8>
          return 1;
 8018806:	2301      	movs	r3, #1
 8018808:	e00f      	b.n	801882a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801880a:	68fb      	ldr	r3, [r7, #12]
 801880c:	2b00      	cmp	r3, #0
 801880e:	d009      	beq.n	8018824 <udp_input_local_match+0xa4>
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d005      	beq.n	8018824 <udp_input_local_match+0xa4>
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	681a      	ldr	r2, [r3, #0]
 801881c:	4b09      	ldr	r3, [pc, #36]	; (8018844 <udp_input_local_match+0xc4>)
 801881e:	695b      	ldr	r3, [r3, #20]
 8018820:	429a      	cmp	r2, r3
 8018822:	d101      	bne.n	8018828 <udp_input_local_match+0xa8>
        return 1;
 8018824:	2301      	movs	r3, #1
 8018826:	e000      	b.n	801882a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8018828:	2300      	movs	r3, #0
}
 801882a:	4618      	mov	r0, r3
 801882c:	3710      	adds	r7, #16
 801882e:	46bd      	mov	sp, r7
 8018830:	bd80      	pop	{r7, pc}
 8018832:	bf00      	nop
 8018834:	0801e8dc 	.word	0x0801e8dc
 8018838:	0801e90c 	.word	0x0801e90c
 801883c:	0801e930 	.word	0x0801e930
 8018840:	0801e958 	.word	0x0801e958
 8018844:	2400521c 	.word	0x2400521c

08018848 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8018848:	b590      	push	{r4, r7, lr}
 801884a:	b08d      	sub	sp, #52	; 0x34
 801884c:	af02      	add	r7, sp, #8
 801884e:	6078      	str	r0, [r7, #4]
 8018850:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018852:	2300      	movs	r3, #0
 8018854:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8018856:	687b      	ldr	r3, [r7, #4]
 8018858:	2b00      	cmp	r3, #0
 801885a:	d105      	bne.n	8018868 <udp_input+0x20>
 801885c:	4b7c      	ldr	r3, [pc, #496]	; (8018a50 <udp_input+0x208>)
 801885e:	22cf      	movs	r2, #207	; 0xcf
 8018860:	497c      	ldr	r1, [pc, #496]	; (8018a54 <udp_input+0x20c>)
 8018862:	487d      	ldr	r0, [pc, #500]	; (8018a58 <udp_input+0x210>)
 8018864:	f002 ff3a 	bl	801b6dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d105      	bne.n	801887a <udp_input+0x32>
 801886e:	4b78      	ldr	r3, [pc, #480]	; (8018a50 <udp_input+0x208>)
 8018870:	22d0      	movs	r2, #208	; 0xd0
 8018872:	497a      	ldr	r1, [pc, #488]	; (8018a5c <udp_input+0x214>)
 8018874:	4878      	ldr	r0, [pc, #480]	; (8018a58 <udp_input+0x210>)
 8018876:	f002 ff31 	bl	801b6dc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	895b      	ldrh	r3, [r3, #10]
 801887e:	2b07      	cmp	r3, #7
 8018880:	d803      	bhi.n	801888a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8018882:	6878      	ldr	r0, [r7, #4]
 8018884:	f7f9 faf6 	bl	8011e74 <pbuf_free>
    goto end;
 8018888:	e0de      	b.n	8018a48 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	685b      	ldr	r3, [r3, #4]
 801888e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8018890:	4b73      	ldr	r3, [pc, #460]	; (8018a60 <udp_input+0x218>)
 8018892:	695b      	ldr	r3, [r3, #20]
 8018894:	4a72      	ldr	r2, [pc, #456]	; (8018a60 <udp_input+0x218>)
 8018896:	6812      	ldr	r2, [r2, #0]
 8018898:	4611      	mov	r1, r2
 801889a:	4618      	mov	r0, r3
 801889c:	f001 fcae 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 80188a0:	4603      	mov	r3, r0
 80188a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80188a4:	697b      	ldr	r3, [r7, #20]
 80188a6:	881b      	ldrh	r3, [r3, #0]
 80188a8:	b29b      	uxth	r3, r3
 80188aa:	4618      	mov	r0, r3
 80188ac:	f7f7 fe38 	bl	8010520 <lwip_htons>
 80188b0:	4603      	mov	r3, r0
 80188b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80188b4:	697b      	ldr	r3, [r7, #20]
 80188b6:	885b      	ldrh	r3, [r3, #2]
 80188b8:	b29b      	uxth	r3, r3
 80188ba:	4618      	mov	r0, r3
 80188bc:	f7f7 fe30 	bl	8010520 <lwip_htons>
 80188c0:	4603      	mov	r3, r0
 80188c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80188c4:	2300      	movs	r3, #0
 80188c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80188c8:	2300      	movs	r3, #0
 80188ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80188cc:	2300      	movs	r3, #0
 80188ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80188d0:	4b64      	ldr	r3, [pc, #400]	; (8018a64 <udp_input+0x21c>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	627b      	str	r3, [r7, #36]	; 0x24
 80188d6:	e054      	b.n	8018982 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80188d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188da:	8a5b      	ldrh	r3, [r3, #18]
 80188dc:	89fa      	ldrh	r2, [r7, #14]
 80188de:	429a      	cmp	r2, r3
 80188e0:	d14a      	bne.n	8018978 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80188e2:	7cfb      	ldrb	r3, [r7, #19]
 80188e4:	461a      	mov	r2, r3
 80188e6:	6839      	ldr	r1, [r7, #0]
 80188e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80188ea:	f7ff ff49 	bl	8018780 <udp_input_local_match>
 80188ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d041      	beq.n	8018978 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80188f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f6:	7c1b      	ldrb	r3, [r3, #16]
 80188f8:	f003 0304 	and.w	r3, r3, #4
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	d11d      	bne.n	801893c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018900:	69fb      	ldr	r3, [r7, #28]
 8018902:	2b00      	cmp	r3, #0
 8018904:	d102      	bne.n	801890c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8018906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018908:	61fb      	str	r3, [r7, #28]
 801890a:	e017      	b.n	801893c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801890c:	7cfb      	ldrb	r3, [r7, #19]
 801890e:	2b00      	cmp	r3, #0
 8018910:	d014      	beq.n	801893c <udp_input+0xf4>
 8018912:	4b53      	ldr	r3, [pc, #332]	; (8018a60 <udp_input+0x218>)
 8018914:	695b      	ldr	r3, [r3, #20]
 8018916:	f1b3 3fff 	cmp.w	r3, #4294967295
 801891a:	d10f      	bne.n	801893c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801891c:	69fb      	ldr	r3, [r7, #28]
 801891e:	681a      	ldr	r2, [r3, #0]
 8018920:	683b      	ldr	r3, [r7, #0]
 8018922:	3304      	adds	r3, #4
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	429a      	cmp	r2, r3
 8018928:	d008      	beq.n	801893c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801892a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801892c:	681a      	ldr	r2, [r3, #0]
 801892e:	683b      	ldr	r3, [r7, #0]
 8018930:	3304      	adds	r3, #4
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	429a      	cmp	r2, r3
 8018936:	d101      	bne.n	801893c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8018938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801893a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801893c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801893e:	8a9b      	ldrh	r3, [r3, #20]
 8018940:	8a3a      	ldrh	r2, [r7, #16]
 8018942:	429a      	cmp	r2, r3
 8018944:	d118      	bne.n	8018978 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018948:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801894a:	2b00      	cmp	r3, #0
 801894c:	d005      	beq.n	801895a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801894e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018950:	685a      	ldr	r2, [r3, #4]
 8018952:	4b43      	ldr	r3, [pc, #268]	; (8018a60 <udp_input+0x218>)
 8018954:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8018956:	429a      	cmp	r2, r3
 8018958:	d10e      	bne.n	8018978 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801895a:	6a3b      	ldr	r3, [r7, #32]
 801895c:	2b00      	cmp	r3, #0
 801895e:	d014      	beq.n	801898a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018962:	68da      	ldr	r2, [r3, #12]
 8018964:	6a3b      	ldr	r3, [r7, #32]
 8018966:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8018968:	4b3e      	ldr	r3, [pc, #248]	; (8018a64 <udp_input+0x21c>)
 801896a:	681a      	ldr	r2, [r3, #0]
 801896c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801896e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8018970:	4a3c      	ldr	r2, [pc, #240]	; (8018a64 <udp_input+0x21c>)
 8018972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018974:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8018976:	e008      	b.n	801898a <udp_input+0x142>
      }
    }

    prev = pcb;
 8018978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801897a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801897e:	68db      	ldr	r3, [r3, #12]
 8018980:	627b      	str	r3, [r7, #36]	; 0x24
 8018982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018984:	2b00      	cmp	r3, #0
 8018986:	d1a7      	bne.n	80188d8 <udp_input+0x90>
 8018988:	e000      	b.n	801898c <udp_input+0x144>
        break;
 801898a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801898c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801898e:	2b00      	cmp	r3, #0
 8018990:	d101      	bne.n	8018996 <udp_input+0x14e>
    pcb = uncon_pcb;
 8018992:	69fb      	ldr	r3, [r7, #28]
 8018994:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8018996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018998:	2b00      	cmp	r3, #0
 801899a:	d002      	beq.n	80189a2 <udp_input+0x15a>
    for_us = 1;
 801899c:	2301      	movs	r3, #1
 801899e:	76fb      	strb	r3, [r7, #27]
 80189a0:	e00a      	b.n	80189b8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80189a2:	683b      	ldr	r3, [r7, #0]
 80189a4:	3304      	adds	r3, #4
 80189a6:	681a      	ldr	r2, [r3, #0]
 80189a8:	4b2d      	ldr	r3, [pc, #180]	; (8018a60 <udp_input+0x218>)
 80189aa:	695b      	ldr	r3, [r3, #20]
 80189ac:	429a      	cmp	r2, r3
 80189ae:	bf0c      	ite	eq
 80189b0:	2301      	moveq	r3, #1
 80189b2:	2300      	movne	r3, #0
 80189b4:	b2db      	uxtb	r3, r3
 80189b6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80189b8:	7efb      	ldrb	r3, [r7, #27]
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d041      	beq.n	8018a42 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80189be:	2108      	movs	r1, #8
 80189c0:	6878      	ldr	r0, [r7, #4]
 80189c2:	f7f9 f9d1 	bl	8011d68 <pbuf_remove_header>
 80189c6:	4603      	mov	r3, r0
 80189c8:	2b00      	cmp	r3, #0
 80189ca:	d00a      	beq.n	80189e2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80189cc:	4b20      	ldr	r3, [pc, #128]	; (8018a50 <udp_input+0x208>)
 80189ce:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80189d2:	4925      	ldr	r1, [pc, #148]	; (8018a68 <udp_input+0x220>)
 80189d4:	4820      	ldr	r0, [pc, #128]	; (8018a58 <udp_input+0x210>)
 80189d6:	f002 fe81 	bl	801b6dc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80189da:	6878      	ldr	r0, [r7, #4]
 80189dc:	f7f9 fa4a 	bl	8011e74 <pbuf_free>
      goto end;
 80189e0:	e032      	b.n	8018a48 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80189e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d012      	beq.n	8018a0e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80189e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ea:	699b      	ldr	r3, [r3, #24]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d00a      	beq.n	8018a06 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80189f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f2:	699c      	ldr	r4, [r3, #24]
 80189f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f6:	69d8      	ldr	r0, [r3, #28]
 80189f8:	8a3b      	ldrh	r3, [r7, #16]
 80189fa:	9300      	str	r3, [sp, #0]
 80189fc:	4b1b      	ldr	r3, [pc, #108]	; (8018a6c <udp_input+0x224>)
 80189fe:	687a      	ldr	r2, [r7, #4]
 8018a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018a02:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018a04:	e021      	b.n	8018a4a <udp_input+0x202>
        pbuf_free(p);
 8018a06:	6878      	ldr	r0, [r7, #4]
 8018a08:	f7f9 fa34 	bl	8011e74 <pbuf_free>
        goto end;
 8018a0c:	e01c      	b.n	8018a48 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018a0e:	7cfb      	ldrb	r3, [r7, #19]
 8018a10:	2b00      	cmp	r3, #0
 8018a12:	d112      	bne.n	8018a3a <udp_input+0x1f2>
 8018a14:	4b12      	ldr	r3, [pc, #72]	; (8018a60 <udp_input+0x218>)
 8018a16:	695b      	ldr	r3, [r3, #20]
 8018a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018a1c:	2be0      	cmp	r3, #224	; 0xe0
 8018a1e:	d00c      	beq.n	8018a3a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018a20:	4b0f      	ldr	r3, [pc, #60]	; (8018a60 <udp_input+0x218>)
 8018a22:	899b      	ldrh	r3, [r3, #12]
 8018a24:	3308      	adds	r3, #8
 8018a26:	b29b      	uxth	r3, r3
 8018a28:	b21b      	sxth	r3, r3
 8018a2a:	4619      	mov	r1, r3
 8018a2c:	6878      	ldr	r0, [r7, #4]
 8018a2e:	f7f9 fa0e 	bl	8011e4e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018a32:	2103      	movs	r1, #3
 8018a34:	6878      	ldr	r0, [r7, #4]
 8018a36:	f001 f8b7 	bl	8019ba8 <icmp_dest_unreach>
      pbuf_free(p);
 8018a3a:	6878      	ldr	r0, [r7, #4]
 8018a3c:	f7f9 fa1a 	bl	8011e74 <pbuf_free>
  return;
 8018a40:	e003      	b.n	8018a4a <udp_input+0x202>
    pbuf_free(p);
 8018a42:	6878      	ldr	r0, [r7, #4]
 8018a44:	f7f9 fa16 	bl	8011e74 <pbuf_free>
  return;
 8018a48:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8018a4a:	372c      	adds	r7, #44	; 0x2c
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bd90      	pop	{r4, r7, pc}
 8018a50:	0801e8dc 	.word	0x0801e8dc
 8018a54:	0801e980 	.word	0x0801e980
 8018a58:	0801e930 	.word	0x0801e930
 8018a5c:	0801e998 	.word	0x0801e998
 8018a60:	2400521c 	.word	0x2400521c
 8018a64:	240082f4 	.word	0x240082f4
 8018a68:	0801e9b4 	.word	0x0801e9b4
 8018a6c:	2400522c 	.word	0x2400522c

08018a70 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018a70:	b480      	push	{r7}
 8018a72:	b085      	sub	sp, #20
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	6078      	str	r0, [r7, #4]
 8018a78:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d01e      	beq.n	8018abe <udp_netif_ip_addr_changed+0x4e>
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	d01a      	beq.n	8018abe <udp_netif_ip_addr_changed+0x4e>
 8018a88:	683b      	ldr	r3, [r7, #0]
 8018a8a:	2b00      	cmp	r3, #0
 8018a8c:	d017      	beq.n	8018abe <udp_netif_ip_addr_changed+0x4e>
 8018a8e:	683b      	ldr	r3, [r7, #0]
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	2b00      	cmp	r3, #0
 8018a94:	d013      	beq.n	8018abe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018a96:	4b0d      	ldr	r3, [pc, #52]	; (8018acc <udp_netif_ip_addr_changed+0x5c>)
 8018a98:	681b      	ldr	r3, [r3, #0]
 8018a9a:	60fb      	str	r3, [r7, #12]
 8018a9c:	e00c      	b.n	8018ab8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	681a      	ldr	r2, [r3, #0]
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	429a      	cmp	r2, r3
 8018aa8:	d103      	bne.n	8018ab2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018aaa:	683b      	ldr	r3, [r7, #0]
 8018aac:	681a      	ldr	r2, [r3, #0]
 8018aae:	68fb      	ldr	r3, [r7, #12]
 8018ab0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	68db      	ldr	r3, [r3, #12]
 8018ab6:	60fb      	str	r3, [r7, #12]
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d1ef      	bne.n	8018a9e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018abe:	bf00      	nop
 8018ac0:	3714      	adds	r7, #20
 8018ac2:	46bd      	mov	sp, r7
 8018ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ac8:	4770      	bx	lr
 8018aca:	bf00      	nop
 8018acc:	240082f4 	.word	0x240082f4

08018ad0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018ad0:	b580      	push	{r7, lr}
 8018ad2:	b082      	sub	sp, #8
 8018ad4:	af00      	add	r7, sp, #0
 8018ad6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018ad8:	4915      	ldr	r1, [pc, #84]	; (8018b30 <etharp_free_entry+0x60>)
 8018ada:	687a      	ldr	r2, [r7, #4]
 8018adc:	4613      	mov	r3, r2
 8018ade:	005b      	lsls	r3, r3, #1
 8018ae0:	4413      	add	r3, r2
 8018ae2:	00db      	lsls	r3, r3, #3
 8018ae4:	440b      	add	r3, r1
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	2b00      	cmp	r3, #0
 8018aea:	d013      	beq.n	8018b14 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018aec:	4910      	ldr	r1, [pc, #64]	; (8018b30 <etharp_free_entry+0x60>)
 8018aee:	687a      	ldr	r2, [r7, #4]
 8018af0:	4613      	mov	r3, r2
 8018af2:	005b      	lsls	r3, r3, #1
 8018af4:	4413      	add	r3, r2
 8018af6:	00db      	lsls	r3, r3, #3
 8018af8:	440b      	add	r3, r1
 8018afa:	681b      	ldr	r3, [r3, #0]
 8018afc:	4618      	mov	r0, r3
 8018afe:	f7f9 f9b9 	bl	8011e74 <pbuf_free>
    arp_table[i].q = NULL;
 8018b02:	490b      	ldr	r1, [pc, #44]	; (8018b30 <etharp_free_entry+0x60>)
 8018b04:	687a      	ldr	r2, [r7, #4]
 8018b06:	4613      	mov	r3, r2
 8018b08:	005b      	lsls	r3, r3, #1
 8018b0a:	4413      	add	r3, r2
 8018b0c:	00db      	lsls	r3, r3, #3
 8018b0e:	440b      	add	r3, r1
 8018b10:	2200      	movs	r2, #0
 8018b12:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8018b14:	4906      	ldr	r1, [pc, #24]	; (8018b30 <etharp_free_entry+0x60>)
 8018b16:	687a      	ldr	r2, [r7, #4]
 8018b18:	4613      	mov	r3, r2
 8018b1a:	005b      	lsls	r3, r3, #1
 8018b1c:	4413      	add	r3, r2
 8018b1e:	00db      	lsls	r3, r3, #3
 8018b20:	440b      	add	r3, r1
 8018b22:	3314      	adds	r3, #20
 8018b24:	2200      	movs	r2, #0
 8018b26:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8018b28:	bf00      	nop
 8018b2a:	3708      	adds	r7, #8
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}
 8018b30:	24004b40 	.word	0x24004b40

08018b34 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8018b34:	b580      	push	{r7, lr}
 8018b36:	b082      	sub	sp, #8
 8018b38:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018b3a:	2300      	movs	r3, #0
 8018b3c:	607b      	str	r3, [r7, #4]
 8018b3e:	e096      	b.n	8018c6e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8018b40:	494f      	ldr	r1, [pc, #316]	; (8018c80 <etharp_tmr+0x14c>)
 8018b42:	687a      	ldr	r2, [r7, #4]
 8018b44:	4613      	mov	r3, r2
 8018b46:	005b      	lsls	r3, r3, #1
 8018b48:	4413      	add	r3, r2
 8018b4a:	00db      	lsls	r3, r3, #3
 8018b4c:	440b      	add	r3, r1
 8018b4e:	3314      	adds	r3, #20
 8018b50:	781b      	ldrb	r3, [r3, #0]
 8018b52:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8018b54:	78fb      	ldrb	r3, [r7, #3]
 8018b56:	2b00      	cmp	r3, #0
 8018b58:	f000 8086 	beq.w	8018c68 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8018b5c:	4948      	ldr	r1, [pc, #288]	; (8018c80 <etharp_tmr+0x14c>)
 8018b5e:	687a      	ldr	r2, [r7, #4]
 8018b60:	4613      	mov	r3, r2
 8018b62:	005b      	lsls	r3, r3, #1
 8018b64:	4413      	add	r3, r2
 8018b66:	00db      	lsls	r3, r3, #3
 8018b68:	440b      	add	r3, r1
 8018b6a:	3312      	adds	r3, #18
 8018b6c:	881b      	ldrh	r3, [r3, #0]
 8018b6e:	3301      	adds	r3, #1
 8018b70:	b298      	uxth	r0, r3
 8018b72:	4943      	ldr	r1, [pc, #268]	; (8018c80 <etharp_tmr+0x14c>)
 8018b74:	687a      	ldr	r2, [r7, #4]
 8018b76:	4613      	mov	r3, r2
 8018b78:	005b      	lsls	r3, r3, #1
 8018b7a:	4413      	add	r3, r2
 8018b7c:	00db      	lsls	r3, r3, #3
 8018b7e:	440b      	add	r3, r1
 8018b80:	3312      	adds	r3, #18
 8018b82:	4602      	mov	r2, r0
 8018b84:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018b86:	493e      	ldr	r1, [pc, #248]	; (8018c80 <etharp_tmr+0x14c>)
 8018b88:	687a      	ldr	r2, [r7, #4]
 8018b8a:	4613      	mov	r3, r2
 8018b8c:	005b      	lsls	r3, r3, #1
 8018b8e:	4413      	add	r3, r2
 8018b90:	00db      	lsls	r3, r3, #3
 8018b92:	440b      	add	r3, r1
 8018b94:	3312      	adds	r3, #18
 8018b96:	881b      	ldrh	r3, [r3, #0]
 8018b98:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018b9c:	d215      	bcs.n	8018bca <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018b9e:	4938      	ldr	r1, [pc, #224]	; (8018c80 <etharp_tmr+0x14c>)
 8018ba0:	687a      	ldr	r2, [r7, #4]
 8018ba2:	4613      	mov	r3, r2
 8018ba4:	005b      	lsls	r3, r3, #1
 8018ba6:	4413      	add	r3, r2
 8018ba8:	00db      	lsls	r3, r3, #3
 8018baa:	440b      	add	r3, r1
 8018bac:	3314      	adds	r3, #20
 8018bae:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018bb0:	2b01      	cmp	r3, #1
 8018bb2:	d10e      	bne.n	8018bd2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8018bb4:	4932      	ldr	r1, [pc, #200]	; (8018c80 <etharp_tmr+0x14c>)
 8018bb6:	687a      	ldr	r2, [r7, #4]
 8018bb8:	4613      	mov	r3, r2
 8018bba:	005b      	lsls	r3, r3, #1
 8018bbc:	4413      	add	r3, r2
 8018bbe:	00db      	lsls	r3, r3, #3
 8018bc0:	440b      	add	r3, r1
 8018bc2:	3312      	adds	r3, #18
 8018bc4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018bc6:	2b04      	cmp	r3, #4
 8018bc8:	d903      	bls.n	8018bd2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f7ff ff80 	bl	8018ad0 <etharp_free_entry>
 8018bd0:	e04a      	b.n	8018c68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8018bd2:	492b      	ldr	r1, [pc, #172]	; (8018c80 <etharp_tmr+0x14c>)
 8018bd4:	687a      	ldr	r2, [r7, #4]
 8018bd6:	4613      	mov	r3, r2
 8018bd8:	005b      	lsls	r3, r3, #1
 8018bda:	4413      	add	r3, r2
 8018bdc:	00db      	lsls	r3, r3, #3
 8018bde:	440b      	add	r3, r1
 8018be0:	3314      	adds	r3, #20
 8018be2:	781b      	ldrb	r3, [r3, #0]
 8018be4:	2b03      	cmp	r3, #3
 8018be6:	d10a      	bne.n	8018bfe <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018be8:	4925      	ldr	r1, [pc, #148]	; (8018c80 <etharp_tmr+0x14c>)
 8018bea:	687a      	ldr	r2, [r7, #4]
 8018bec:	4613      	mov	r3, r2
 8018bee:	005b      	lsls	r3, r3, #1
 8018bf0:	4413      	add	r3, r2
 8018bf2:	00db      	lsls	r3, r3, #3
 8018bf4:	440b      	add	r3, r1
 8018bf6:	3314      	adds	r3, #20
 8018bf8:	2204      	movs	r2, #4
 8018bfa:	701a      	strb	r2, [r3, #0]
 8018bfc:	e034      	b.n	8018c68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018bfe:	4920      	ldr	r1, [pc, #128]	; (8018c80 <etharp_tmr+0x14c>)
 8018c00:	687a      	ldr	r2, [r7, #4]
 8018c02:	4613      	mov	r3, r2
 8018c04:	005b      	lsls	r3, r3, #1
 8018c06:	4413      	add	r3, r2
 8018c08:	00db      	lsls	r3, r3, #3
 8018c0a:	440b      	add	r3, r1
 8018c0c:	3314      	adds	r3, #20
 8018c0e:	781b      	ldrb	r3, [r3, #0]
 8018c10:	2b04      	cmp	r3, #4
 8018c12:	d10a      	bne.n	8018c2a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8018c14:	491a      	ldr	r1, [pc, #104]	; (8018c80 <etharp_tmr+0x14c>)
 8018c16:	687a      	ldr	r2, [r7, #4]
 8018c18:	4613      	mov	r3, r2
 8018c1a:	005b      	lsls	r3, r3, #1
 8018c1c:	4413      	add	r3, r2
 8018c1e:	00db      	lsls	r3, r3, #3
 8018c20:	440b      	add	r3, r1
 8018c22:	3314      	adds	r3, #20
 8018c24:	2202      	movs	r2, #2
 8018c26:	701a      	strb	r2, [r3, #0]
 8018c28:	e01e      	b.n	8018c68 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018c2a:	4915      	ldr	r1, [pc, #84]	; (8018c80 <etharp_tmr+0x14c>)
 8018c2c:	687a      	ldr	r2, [r7, #4]
 8018c2e:	4613      	mov	r3, r2
 8018c30:	005b      	lsls	r3, r3, #1
 8018c32:	4413      	add	r3, r2
 8018c34:	00db      	lsls	r3, r3, #3
 8018c36:	440b      	add	r3, r1
 8018c38:	3314      	adds	r3, #20
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	2b01      	cmp	r3, #1
 8018c3e:	d113      	bne.n	8018c68 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8018c40:	490f      	ldr	r1, [pc, #60]	; (8018c80 <etharp_tmr+0x14c>)
 8018c42:	687a      	ldr	r2, [r7, #4]
 8018c44:	4613      	mov	r3, r2
 8018c46:	005b      	lsls	r3, r3, #1
 8018c48:	4413      	add	r3, r2
 8018c4a:	00db      	lsls	r3, r3, #3
 8018c4c:	440b      	add	r3, r1
 8018c4e:	3308      	adds	r3, #8
 8018c50:	6818      	ldr	r0, [r3, #0]
 8018c52:	687a      	ldr	r2, [r7, #4]
 8018c54:	4613      	mov	r3, r2
 8018c56:	005b      	lsls	r3, r3, #1
 8018c58:	4413      	add	r3, r2
 8018c5a:	00db      	lsls	r3, r3, #3
 8018c5c:	4a08      	ldr	r2, [pc, #32]	; (8018c80 <etharp_tmr+0x14c>)
 8018c5e:	4413      	add	r3, r2
 8018c60:	3304      	adds	r3, #4
 8018c62:	4619      	mov	r1, r3
 8018c64:	f000 fe6e 	bl	8019944 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	3301      	adds	r3, #1
 8018c6c:	607b      	str	r3, [r7, #4]
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	2b09      	cmp	r3, #9
 8018c72:	f77f af65 	ble.w	8018b40 <etharp_tmr+0xc>
      }
    }
  }
}
 8018c76:	bf00      	nop
 8018c78:	bf00      	nop
 8018c7a:	3708      	adds	r7, #8
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd80      	pop	{r7, pc}
 8018c80:	24004b40 	.word	0x24004b40

08018c84 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8018c84:	b580      	push	{r7, lr}
 8018c86:	b08a      	sub	sp, #40	; 0x28
 8018c88:	af00      	add	r7, sp, #0
 8018c8a:	60f8      	str	r0, [r7, #12]
 8018c8c:	460b      	mov	r3, r1
 8018c8e:	607a      	str	r2, [r7, #4]
 8018c90:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8018c92:	230a      	movs	r3, #10
 8018c94:	84fb      	strh	r3, [r7, #38]	; 0x26
 8018c96:	230a      	movs	r3, #10
 8018c98:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018c9a:	230a      	movs	r3, #10
 8018c9c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018c9e:	2300      	movs	r3, #0
 8018ca0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8018ca2:	230a      	movs	r3, #10
 8018ca4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8018ca6:	2300      	movs	r3, #0
 8018ca8:	83bb      	strh	r3, [r7, #28]
 8018caa:	2300      	movs	r3, #0
 8018cac:	837b      	strh	r3, [r7, #26]
 8018cae:	2300      	movs	r3, #0
 8018cb0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018cb2:	2300      	movs	r3, #0
 8018cb4:	843b      	strh	r3, [r7, #32]
 8018cb6:	e0ae      	b.n	8018e16 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018cb8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018cbc:	49a6      	ldr	r1, [pc, #664]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018cbe:	4613      	mov	r3, r2
 8018cc0:	005b      	lsls	r3, r3, #1
 8018cc2:	4413      	add	r3, r2
 8018cc4:	00db      	lsls	r3, r3, #3
 8018cc6:	440b      	add	r3, r1
 8018cc8:	3314      	adds	r3, #20
 8018cca:	781b      	ldrb	r3, [r3, #0]
 8018ccc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018cce:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018cd2:	2b0a      	cmp	r3, #10
 8018cd4:	d105      	bne.n	8018ce2 <etharp_find_entry+0x5e>
 8018cd6:	7dfb      	ldrb	r3, [r7, #23]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d102      	bne.n	8018ce2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018cdc:	8c3b      	ldrh	r3, [r7, #32]
 8018cde:	847b      	strh	r3, [r7, #34]	; 0x22
 8018ce0:	e095      	b.n	8018e0e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8018ce2:	7dfb      	ldrb	r3, [r7, #23]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	f000 8092 	beq.w	8018e0e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018cea:	7dfb      	ldrb	r3, [r7, #23]
 8018cec:	2b01      	cmp	r3, #1
 8018cee:	d009      	beq.n	8018d04 <etharp_find_entry+0x80>
 8018cf0:	7dfb      	ldrb	r3, [r7, #23]
 8018cf2:	2b01      	cmp	r3, #1
 8018cf4:	d806      	bhi.n	8018d04 <etharp_find_entry+0x80>
 8018cf6:	4b99      	ldr	r3, [pc, #612]	; (8018f5c <etharp_find_entry+0x2d8>)
 8018cf8:	f240 1223 	movw	r2, #291	; 0x123
 8018cfc:	4998      	ldr	r1, [pc, #608]	; (8018f60 <etharp_find_entry+0x2dc>)
 8018cfe:	4899      	ldr	r0, [pc, #612]	; (8018f64 <etharp_find_entry+0x2e0>)
 8018d00:	f002 fcec 	bl	801b6dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	2b00      	cmp	r3, #0
 8018d08:	d020      	beq.n	8018d4c <etharp_find_entry+0xc8>
 8018d0a:	68fb      	ldr	r3, [r7, #12]
 8018d0c:	6819      	ldr	r1, [r3, #0]
 8018d0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d12:	4891      	ldr	r0, [pc, #580]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018d14:	4613      	mov	r3, r2
 8018d16:	005b      	lsls	r3, r3, #1
 8018d18:	4413      	add	r3, r2
 8018d1a:	00db      	lsls	r3, r3, #3
 8018d1c:	4403      	add	r3, r0
 8018d1e:	3304      	adds	r3, #4
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	4299      	cmp	r1, r3
 8018d24:	d112      	bne.n	8018d4c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d00c      	beq.n	8018d46 <etharp_find_entry+0xc2>
 8018d2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d30:	4989      	ldr	r1, [pc, #548]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018d32:	4613      	mov	r3, r2
 8018d34:	005b      	lsls	r3, r3, #1
 8018d36:	4413      	add	r3, r2
 8018d38:	00db      	lsls	r3, r3, #3
 8018d3a:	440b      	add	r3, r1
 8018d3c:	3308      	adds	r3, #8
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	687a      	ldr	r2, [r7, #4]
 8018d42:	429a      	cmp	r2, r3
 8018d44:	d102      	bne.n	8018d4c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8018d46:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018d4a:	e100      	b.n	8018f4e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8018d4c:	7dfb      	ldrb	r3, [r7, #23]
 8018d4e:	2b01      	cmp	r3, #1
 8018d50:	d140      	bne.n	8018dd4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8018d52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d56:	4980      	ldr	r1, [pc, #512]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018d58:	4613      	mov	r3, r2
 8018d5a:	005b      	lsls	r3, r3, #1
 8018d5c:	4413      	add	r3, r2
 8018d5e:	00db      	lsls	r3, r3, #3
 8018d60:	440b      	add	r3, r1
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d01a      	beq.n	8018d9e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8018d68:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d6c:	497a      	ldr	r1, [pc, #488]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018d6e:	4613      	mov	r3, r2
 8018d70:	005b      	lsls	r3, r3, #1
 8018d72:	4413      	add	r3, r2
 8018d74:	00db      	lsls	r3, r3, #3
 8018d76:	440b      	add	r3, r1
 8018d78:	3312      	adds	r3, #18
 8018d7a:	881b      	ldrh	r3, [r3, #0]
 8018d7c:	8bba      	ldrh	r2, [r7, #28]
 8018d7e:	429a      	cmp	r2, r3
 8018d80:	d845      	bhi.n	8018e0e <etharp_find_entry+0x18a>
            old_queue = i;
 8018d82:	8c3b      	ldrh	r3, [r7, #32]
 8018d84:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8018d86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018d8a:	4973      	ldr	r1, [pc, #460]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018d8c:	4613      	mov	r3, r2
 8018d8e:	005b      	lsls	r3, r3, #1
 8018d90:	4413      	add	r3, r2
 8018d92:	00db      	lsls	r3, r3, #3
 8018d94:	440b      	add	r3, r1
 8018d96:	3312      	adds	r3, #18
 8018d98:	881b      	ldrh	r3, [r3, #0]
 8018d9a:	83bb      	strh	r3, [r7, #28]
 8018d9c:	e037      	b.n	8018e0e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018d9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018da2:	496d      	ldr	r1, [pc, #436]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018da4:	4613      	mov	r3, r2
 8018da6:	005b      	lsls	r3, r3, #1
 8018da8:	4413      	add	r3, r2
 8018daa:	00db      	lsls	r3, r3, #3
 8018dac:	440b      	add	r3, r1
 8018dae:	3312      	adds	r3, #18
 8018db0:	881b      	ldrh	r3, [r3, #0]
 8018db2:	8b7a      	ldrh	r2, [r7, #26]
 8018db4:	429a      	cmp	r2, r3
 8018db6:	d82a      	bhi.n	8018e0e <etharp_find_entry+0x18a>
            old_pending = i;
 8018db8:	8c3b      	ldrh	r3, [r7, #32]
 8018dba:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018dbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018dc0:	4965      	ldr	r1, [pc, #404]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018dc2:	4613      	mov	r3, r2
 8018dc4:	005b      	lsls	r3, r3, #1
 8018dc6:	4413      	add	r3, r2
 8018dc8:	00db      	lsls	r3, r3, #3
 8018dca:	440b      	add	r3, r1
 8018dcc:	3312      	adds	r3, #18
 8018dce:	881b      	ldrh	r3, [r3, #0]
 8018dd0:	837b      	strh	r3, [r7, #26]
 8018dd2:	e01c      	b.n	8018e0e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8018dd4:	7dfb      	ldrb	r3, [r7, #23]
 8018dd6:	2b01      	cmp	r3, #1
 8018dd8:	d919      	bls.n	8018e0e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018dda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018dde:	495e      	ldr	r1, [pc, #376]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018de0:	4613      	mov	r3, r2
 8018de2:	005b      	lsls	r3, r3, #1
 8018de4:	4413      	add	r3, r2
 8018de6:	00db      	lsls	r3, r3, #3
 8018de8:	440b      	add	r3, r1
 8018dea:	3312      	adds	r3, #18
 8018dec:	881b      	ldrh	r3, [r3, #0]
 8018dee:	8b3a      	ldrh	r2, [r7, #24]
 8018df0:	429a      	cmp	r2, r3
 8018df2:	d80c      	bhi.n	8018e0e <etharp_find_entry+0x18a>
            old_stable = i;
 8018df4:	8c3b      	ldrh	r3, [r7, #32]
 8018df6:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018df8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018dfc:	4956      	ldr	r1, [pc, #344]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018dfe:	4613      	mov	r3, r2
 8018e00:	005b      	lsls	r3, r3, #1
 8018e02:	4413      	add	r3, r2
 8018e04:	00db      	lsls	r3, r3, #3
 8018e06:	440b      	add	r3, r1
 8018e08:	3312      	adds	r3, #18
 8018e0a:	881b      	ldrh	r3, [r3, #0]
 8018e0c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018e0e:	8c3b      	ldrh	r3, [r7, #32]
 8018e10:	3301      	adds	r3, #1
 8018e12:	b29b      	uxth	r3, r3
 8018e14:	843b      	strh	r3, [r7, #32]
 8018e16:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018e1a:	2b09      	cmp	r3, #9
 8018e1c:	f77f af4c 	ble.w	8018cb8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018e20:	7afb      	ldrb	r3, [r7, #11]
 8018e22:	f003 0302 	and.w	r3, r3, #2
 8018e26:	2b00      	cmp	r3, #0
 8018e28:	d108      	bne.n	8018e3c <etharp_find_entry+0x1b8>
 8018e2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018e2e:	2b0a      	cmp	r3, #10
 8018e30:	d107      	bne.n	8018e42 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8018e32:	7afb      	ldrb	r3, [r7, #11]
 8018e34:	f003 0301 	and.w	r3, r3, #1
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d102      	bne.n	8018e42 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8018e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8018e40:	e085      	b.n	8018f4e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8018e42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8018e46:	2b09      	cmp	r3, #9
 8018e48:	dc02      	bgt.n	8018e50 <etharp_find_entry+0x1cc>
    i = empty;
 8018e4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018e4c:	843b      	strh	r3, [r7, #32]
 8018e4e:	e039      	b.n	8018ec4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8018e50:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8018e54:	2b09      	cmp	r3, #9
 8018e56:	dc14      	bgt.n	8018e82 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8018e58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e5a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8018e5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018e60:	493d      	ldr	r1, [pc, #244]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018e62:	4613      	mov	r3, r2
 8018e64:	005b      	lsls	r3, r3, #1
 8018e66:	4413      	add	r3, r2
 8018e68:	00db      	lsls	r3, r3, #3
 8018e6a:	440b      	add	r3, r1
 8018e6c:	681b      	ldr	r3, [r3, #0]
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	d018      	beq.n	8018ea4 <etharp_find_entry+0x220>
 8018e72:	4b3a      	ldr	r3, [pc, #232]	; (8018f5c <etharp_find_entry+0x2d8>)
 8018e74:	f240 126d 	movw	r2, #365	; 0x16d
 8018e78:	493b      	ldr	r1, [pc, #236]	; (8018f68 <etharp_find_entry+0x2e4>)
 8018e7a:	483a      	ldr	r0, [pc, #232]	; (8018f64 <etharp_find_entry+0x2e0>)
 8018e7c:	f002 fc2e 	bl	801b6dc <iprintf>
 8018e80:	e010      	b.n	8018ea4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8018e82:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8018e86:	2b09      	cmp	r3, #9
 8018e88:	dc02      	bgt.n	8018e90 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018e8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018e8c:	843b      	strh	r3, [r7, #32]
 8018e8e:	e009      	b.n	8018ea4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018e90:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8018e94:	2b09      	cmp	r3, #9
 8018e96:	dc02      	bgt.n	8018e9e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018e98:	8bfb      	ldrh	r3, [r7, #30]
 8018e9a:	843b      	strh	r3, [r7, #32]
 8018e9c:	e002      	b.n	8018ea4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8018ea2:	e054      	b.n	8018f4e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018ea4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018ea8:	2b09      	cmp	r3, #9
 8018eaa:	dd06      	ble.n	8018eba <etharp_find_entry+0x236>
 8018eac:	4b2b      	ldr	r3, [pc, #172]	; (8018f5c <etharp_find_entry+0x2d8>)
 8018eae:	f240 127f 	movw	r2, #383	; 0x17f
 8018eb2:	492e      	ldr	r1, [pc, #184]	; (8018f6c <etharp_find_entry+0x2e8>)
 8018eb4:	482b      	ldr	r0, [pc, #172]	; (8018f64 <etharp_find_entry+0x2e0>)
 8018eb6:	f002 fc11 	bl	801b6dc <iprintf>
    etharp_free_entry(i);
 8018eba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7ff fe06 	bl	8018ad0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8018ec4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018ec8:	2b09      	cmp	r3, #9
 8018eca:	dd06      	ble.n	8018eda <etharp_find_entry+0x256>
 8018ecc:	4b23      	ldr	r3, [pc, #140]	; (8018f5c <etharp_find_entry+0x2d8>)
 8018ece:	f240 1283 	movw	r2, #387	; 0x183
 8018ed2:	4926      	ldr	r1, [pc, #152]	; (8018f6c <etharp_find_entry+0x2e8>)
 8018ed4:	4823      	ldr	r0, [pc, #140]	; (8018f64 <etharp_find_entry+0x2e0>)
 8018ed6:	f002 fc01 	bl	801b6dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018eda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018ede:	491e      	ldr	r1, [pc, #120]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018ee0:	4613      	mov	r3, r2
 8018ee2:	005b      	lsls	r3, r3, #1
 8018ee4:	4413      	add	r3, r2
 8018ee6:	00db      	lsls	r3, r3, #3
 8018ee8:	440b      	add	r3, r1
 8018eea:	3314      	adds	r3, #20
 8018eec:	781b      	ldrb	r3, [r3, #0]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d006      	beq.n	8018f00 <etharp_find_entry+0x27c>
 8018ef2:	4b1a      	ldr	r3, [pc, #104]	; (8018f5c <etharp_find_entry+0x2d8>)
 8018ef4:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018ef8:	491d      	ldr	r1, [pc, #116]	; (8018f70 <etharp_find_entry+0x2ec>)
 8018efa:	481a      	ldr	r0, [pc, #104]	; (8018f64 <etharp_find_entry+0x2e0>)
 8018efc:	f002 fbee 	bl	801b6dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018f00:	68fb      	ldr	r3, [r7, #12]
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	d00b      	beq.n	8018f1e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8018f06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	6819      	ldr	r1, [r3, #0]
 8018f0e:	4812      	ldr	r0, [pc, #72]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018f10:	4613      	mov	r3, r2
 8018f12:	005b      	lsls	r3, r3, #1
 8018f14:	4413      	add	r3, r2
 8018f16:	00db      	lsls	r3, r3, #3
 8018f18:	4403      	add	r3, r0
 8018f1a:	3304      	adds	r3, #4
 8018f1c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018f1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018f22:	490d      	ldr	r1, [pc, #52]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018f24:	4613      	mov	r3, r2
 8018f26:	005b      	lsls	r3, r3, #1
 8018f28:	4413      	add	r3, r2
 8018f2a:	00db      	lsls	r3, r3, #3
 8018f2c:	440b      	add	r3, r1
 8018f2e:	3312      	adds	r3, #18
 8018f30:	2200      	movs	r2, #0
 8018f32:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8018f34:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018f38:	4907      	ldr	r1, [pc, #28]	; (8018f58 <etharp_find_entry+0x2d4>)
 8018f3a:	4613      	mov	r3, r2
 8018f3c:	005b      	lsls	r3, r3, #1
 8018f3e:	4413      	add	r3, r2
 8018f40:	00db      	lsls	r3, r3, #3
 8018f42:	440b      	add	r3, r1
 8018f44:	3308      	adds	r3, #8
 8018f46:	687a      	ldr	r2, [r7, #4]
 8018f48:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8018f4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8018f4e:	4618      	mov	r0, r3
 8018f50:	3728      	adds	r7, #40	; 0x28
 8018f52:	46bd      	mov	sp, r7
 8018f54:	bd80      	pop	{r7, pc}
 8018f56:	bf00      	nop
 8018f58:	24004b40 	.word	0x24004b40
 8018f5c:	0801ec40 	.word	0x0801ec40
 8018f60:	0801ec78 	.word	0x0801ec78
 8018f64:	0801ecb8 	.word	0x0801ecb8
 8018f68:	0801ece0 	.word	0x0801ece0
 8018f6c:	0801ecf8 	.word	0x0801ecf8
 8018f70:	0801ed0c 	.word	0x0801ed0c

08018f74 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b088      	sub	sp, #32
 8018f78:	af02      	add	r7, sp, #8
 8018f7a:	60f8      	str	r0, [r7, #12]
 8018f7c:	60b9      	str	r1, [r7, #8]
 8018f7e:	607a      	str	r2, [r7, #4]
 8018f80:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018f88:	2b06      	cmp	r3, #6
 8018f8a:	d006      	beq.n	8018f9a <etharp_update_arp_entry+0x26>
 8018f8c:	4b48      	ldr	r3, [pc, #288]	; (80190b0 <etharp_update_arp_entry+0x13c>)
 8018f8e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8018f92:	4948      	ldr	r1, [pc, #288]	; (80190b4 <etharp_update_arp_entry+0x140>)
 8018f94:	4848      	ldr	r0, [pc, #288]	; (80190b8 <etharp_update_arp_entry+0x144>)
 8018f96:	f002 fba1 	bl	801b6dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018f9a:	68bb      	ldr	r3, [r7, #8]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d012      	beq.n	8018fc6 <etharp_update_arp_entry+0x52>
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	681b      	ldr	r3, [r3, #0]
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	d00e      	beq.n	8018fc6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018fa8:	68bb      	ldr	r3, [r7, #8]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	68f9      	ldr	r1, [r7, #12]
 8018fae:	4618      	mov	r0, r3
 8018fb0:	f001 f924 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 8018fb4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d105      	bne.n	8018fc6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018fba:	68bb      	ldr	r3, [r7, #8]
 8018fbc:	681b      	ldr	r3, [r3, #0]
 8018fbe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018fc2:	2be0      	cmp	r3, #224	; 0xe0
 8018fc4:	d102      	bne.n	8018fcc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018fc6:	f06f 030f 	mvn.w	r3, #15
 8018fca:	e06c      	b.n	80190a6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018fcc:	78fb      	ldrb	r3, [r7, #3]
 8018fce:	68fa      	ldr	r2, [r7, #12]
 8018fd0:	4619      	mov	r1, r3
 8018fd2:	68b8      	ldr	r0, [r7, #8]
 8018fd4:	f7ff fe56 	bl	8018c84 <etharp_find_entry>
 8018fd8:	4603      	mov	r3, r0
 8018fda:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018fdc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018fe0:	2b00      	cmp	r3, #0
 8018fe2:	da02      	bge.n	8018fea <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8018fe4:	8afb      	ldrh	r3, [r7, #22]
 8018fe6:	b25b      	sxtb	r3, r3
 8018fe8:	e05d      	b.n	80190a6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018fea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018fee:	4933      	ldr	r1, [pc, #204]	; (80190bc <etharp_update_arp_entry+0x148>)
 8018ff0:	4613      	mov	r3, r2
 8018ff2:	005b      	lsls	r3, r3, #1
 8018ff4:	4413      	add	r3, r2
 8018ff6:	00db      	lsls	r3, r3, #3
 8018ff8:	440b      	add	r3, r1
 8018ffa:	3314      	adds	r3, #20
 8018ffc:	2202      	movs	r2, #2
 8018ffe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019000:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019004:	492d      	ldr	r1, [pc, #180]	; (80190bc <etharp_update_arp_entry+0x148>)
 8019006:	4613      	mov	r3, r2
 8019008:	005b      	lsls	r3, r3, #1
 801900a:	4413      	add	r3, r2
 801900c:	00db      	lsls	r3, r3, #3
 801900e:	440b      	add	r3, r1
 8019010:	3308      	adds	r3, #8
 8019012:	68fa      	ldr	r2, [r7, #12]
 8019014:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019016:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801901a:	4613      	mov	r3, r2
 801901c:	005b      	lsls	r3, r3, #1
 801901e:	4413      	add	r3, r2
 8019020:	00db      	lsls	r3, r3, #3
 8019022:	3308      	adds	r3, #8
 8019024:	4a25      	ldr	r2, [pc, #148]	; (80190bc <etharp_update_arp_entry+0x148>)
 8019026:	4413      	add	r3, r2
 8019028:	3304      	adds	r3, #4
 801902a:	2206      	movs	r2, #6
 801902c:	6879      	ldr	r1, [r7, #4]
 801902e:	4618      	mov	r0, r3
 8019030:	f002 fae3 	bl	801b5fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019034:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019038:	4920      	ldr	r1, [pc, #128]	; (80190bc <etharp_update_arp_entry+0x148>)
 801903a:	4613      	mov	r3, r2
 801903c:	005b      	lsls	r3, r3, #1
 801903e:	4413      	add	r3, r2
 8019040:	00db      	lsls	r3, r3, #3
 8019042:	440b      	add	r3, r1
 8019044:	3312      	adds	r3, #18
 8019046:	2200      	movs	r2, #0
 8019048:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801904a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801904e:	491b      	ldr	r1, [pc, #108]	; (80190bc <etharp_update_arp_entry+0x148>)
 8019050:	4613      	mov	r3, r2
 8019052:	005b      	lsls	r3, r3, #1
 8019054:	4413      	add	r3, r2
 8019056:	00db      	lsls	r3, r3, #3
 8019058:	440b      	add	r3, r1
 801905a:	681b      	ldr	r3, [r3, #0]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d021      	beq.n	80190a4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019060:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019064:	4915      	ldr	r1, [pc, #84]	; (80190bc <etharp_update_arp_entry+0x148>)
 8019066:	4613      	mov	r3, r2
 8019068:	005b      	lsls	r3, r3, #1
 801906a:	4413      	add	r3, r2
 801906c:	00db      	lsls	r3, r3, #3
 801906e:	440b      	add	r3, r1
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019074:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019078:	4910      	ldr	r1, [pc, #64]	; (80190bc <etharp_update_arp_entry+0x148>)
 801907a:	4613      	mov	r3, r2
 801907c:	005b      	lsls	r3, r3, #1
 801907e:	4413      	add	r3, r2
 8019080:	00db      	lsls	r3, r3, #3
 8019082:	440b      	add	r3, r1
 8019084:	2200      	movs	r2, #0
 8019086:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801908e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019092:	9300      	str	r3, [sp, #0]
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	6939      	ldr	r1, [r7, #16]
 8019098:	68f8      	ldr	r0, [r7, #12]
 801909a:	f002 f849 	bl	801b130 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801909e:	6938      	ldr	r0, [r7, #16]
 80190a0:	f7f8 fee8 	bl	8011e74 <pbuf_free>
  }
  return ERR_OK;
 80190a4:	2300      	movs	r3, #0
}
 80190a6:	4618      	mov	r0, r3
 80190a8:	3718      	adds	r7, #24
 80190aa:	46bd      	mov	sp, r7
 80190ac:	bd80      	pop	{r7, pc}
 80190ae:	bf00      	nop
 80190b0:	0801ec40 	.word	0x0801ec40
 80190b4:	0801ed38 	.word	0x0801ed38
 80190b8:	0801ecb8 	.word	0x0801ecb8
 80190bc:	24004b40 	.word	0x24004b40

080190c0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80190c0:	b580      	push	{r7, lr}
 80190c2:	b084      	sub	sp, #16
 80190c4:	af00      	add	r7, sp, #0
 80190c6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80190c8:	2300      	movs	r3, #0
 80190ca:	60fb      	str	r3, [r7, #12]
 80190cc:	e01e      	b.n	801910c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80190ce:	4913      	ldr	r1, [pc, #76]	; (801911c <etharp_cleanup_netif+0x5c>)
 80190d0:	68fa      	ldr	r2, [r7, #12]
 80190d2:	4613      	mov	r3, r2
 80190d4:	005b      	lsls	r3, r3, #1
 80190d6:	4413      	add	r3, r2
 80190d8:	00db      	lsls	r3, r3, #3
 80190da:	440b      	add	r3, r1
 80190dc:	3314      	adds	r3, #20
 80190de:	781b      	ldrb	r3, [r3, #0]
 80190e0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80190e2:	7afb      	ldrb	r3, [r7, #11]
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d00e      	beq.n	8019106 <etharp_cleanup_netif+0x46>
 80190e8:	490c      	ldr	r1, [pc, #48]	; (801911c <etharp_cleanup_netif+0x5c>)
 80190ea:	68fa      	ldr	r2, [r7, #12]
 80190ec:	4613      	mov	r3, r2
 80190ee:	005b      	lsls	r3, r3, #1
 80190f0:	4413      	add	r3, r2
 80190f2:	00db      	lsls	r3, r3, #3
 80190f4:	440b      	add	r3, r1
 80190f6:	3308      	adds	r3, #8
 80190f8:	681b      	ldr	r3, [r3, #0]
 80190fa:	687a      	ldr	r2, [r7, #4]
 80190fc:	429a      	cmp	r2, r3
 80190fe:	d102      	bne.n	8019106 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019100:	68f8      	ldr	r0, [r7, #12]
 8019102:	f7ff fce5 	bl	8018ad0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	3301      	adds	r3, #1
 801910a:	60fb      	str	r3, [r7, #12]
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	2b09      	cmp	r3, #9
 8019110:	dddd      	ble.n	80190ce <etharp_cleanup_netif+0xe>
    }
  }
}
 8019112:	bf00      	nop
 8019114:	bf00      	nop
 8019116:	3710      	adds	r7, #16
 8019118:	46bd      	mov	sp, r7
 801911a:	bd80      	pop	{r7, pc}
 801911c:	24004b40 	.word	0x24004b40

08019120 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019120:	b5b0      	push	{r4, r5, r7, lr}
 8019122:	b08a      	sub	sp, #40	; 0x28
 8019124:	af04      	add	r7, sp, #16
 8019126:	6078      	str	r0, [r7, #4]
 8019128:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801912a:	683b      	ldr	r3, [r7, #0]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d107      	bne.n	8019140 <etharp_input+0x20>
 8019130:	4b3d      	ldr	r3, [pc, #244]	; (8019228 <etharp_input+0x108>)
 8019132:	f240 228a 	movw	r2, #650	; 0x28a
 8019136:	493d      	ldr	r1, [pc, #244]	; (801922c <etharp_input+0x10c>)
 8019138:	483d      	ldr	r0, [pc, #244]	; (8019230 <etharp_input+0x110>)
 801913a:	f002 facf 	bl	801b6dc <iprintf>
 801913e:	e06f      	b.n	8019220 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	685b      	ldr	r3, [r3, #4]
 8019144:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019146:	693b      	ldr	r3, [r7, #16]
 8019148:	881b      	ldrh	r3, [r3, #0]
 801914a:	b29b      	uxth	r3, r3
 801914c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019150:	d10c      	bne.n	801916c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019152:	693b      	ldr	r3, [r7, #16]
 8019154:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019156:	2b06      	cmp	r3, #6
 8019158:	d108      	bne.n	801916c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801915a:	693b      	ldr	r3, [r7, #16]
 801915c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801915e:	2b04      	cmp	r3, #4
 8019160:	d104      	bne.n	801916c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019162:	693b      	ldr	r3, [r7, #16]
 8019164:	885b      	ldrh	r3, [r3, #2]
 8019166:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019168:	2b08      	cmp	r3, #8
 801916a:	d003      	beq.n	8019174 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801916c:	6878      	ldr	r0, [r7, #4]
 801916e:	f7f8 fe81 	bl	8011e74 <pbuf_free>
    return;
 8019172:	e055      	b.n	8019220 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019174:	693b      	ldr	r3, [r7, #16]
 8019176:	330e      	adds	r3, #14
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801917c:	693b      	ldr	r3, [r7, #16]
 801917e:	3318      	adds	r3, #24
 8019180:	681b      	ldr	r3, [r3, #0]
 8019182:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019184:	683b      	ldr	r3, [r7, #0]
 8019186:	3304      	adds	r3, #4
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d102      	bne.n	8019194 <etharp_input+0x74>
    for_us = 0;
 801918e:	2300      	movs	r3, #0
 8019190:	75fb      	strb	r3, [r7, #23]
 8019192:	e009      	b.n	80191a8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019194:	68ba      	ldr	r2, [r7, #8]
 8019196:	683b      	ldr	r3, [r7, #0]
 8019198:	3304      	adds	r3, #4
 801919a:	681b      	ldr	r3, [r3, #0]
 801919c:	429a      	cmp	r2, r3
 801919e:	bf0c      	ite	eq
 80191a0:	2301      	moveq	r3, #1
 80191a2:	2300      	movne	r3, #0
 80191a4:	b2db      	uxtb	r3, r3
 80191a6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80191a8:	693b      	ldr	r3, [r7, #16]
 80191aa:	f103 0208 	add.w	r2, r3, #8
 80191ae:	7dfb      	ldrb	r3, [r7, #23]
 80191b0:	2b00      	cmp	r3, #0
 80191b2:	d001      	beq.n	80191b8 <etharp_input+0x98>
 80191b4:	2301      	movs	r3, #1
 80191b6:	e000      	b.n	80191ba <etharp_input+0x9a>
 80191b8:	2302      	movs	r3, #2
 80191ba:	f107 010c 	add.w	r1, r7, #12
 80191be:	6838      	ldr	r0, [r7, #0]
 80191c0:	f7ff fed8 	bl	8018f74 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80191c4:	693b      	ldr	r3, [r7, #16]
 80191c6:	88db      	ldrh	r3, [r3, #6]
 80191c8:	b29b      	uxth	r3, r3
 80191ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80191ce:	d003      	beq.n	80191d8 <etharp_input+0xb8>
 80191d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80191d4:	d01e      	beq.n	8019214 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80191d6:	e020      	b.n	801921a <etharp_input+0xfa>
      if (for_us) {
 80191d8:	7dfb      	ldrb	r3, [r7, #23]
 80191da:	2b00      	cmp	r3, #0
 80191dc:	d01c      	beq.n	8019218 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80191de:	683b      	ldr	r3, [r7, #0]
 80191e0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80191e4:	693b      	ldr	r3, [r7, #16]
 80191e6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80191f0:	683b      	ldr	r3, [r7, #0]
 80191f2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80191f4:	693a      	ldr	r2, [r7, #16]
 80191f6:	3208      	adds	r2, #8
        etharp_raw(netif,
 80191f8:	2102      	movs	r1, #2
 80191fa:	9103      	str	r1, [sp, #12]
 80191fc:	f107 010c 	add.w	r1, r7, #12
 8019200:	9102      	str	r1, [sp, #8]
 8019202:	9201      	str	r2, [sp, #4]
 8019204:	9300      	str	r3, [sp, #0]
 8019206:	462b      	mov	r3, r5
 8019208:	4622      	mov	r2, r4
 801920a:	4601      	mov	r1, r0
 801920c:	6838      	ldr	r0, [r7, #0]
 801920e:	f000 faeb 	bl	80197e8 <etharp_raw>
      break;
 8019212:	e001      	b.n	8019218 <etharp_input+0xf8>
      break;
 8019214:	bf00      	nop
 8019216:	e000      	b.n	801921a <etharp_input+0xfa>
      break;
 8019218:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801921a:	6878      	ldr	r0, [r7, #4]
 801921c:	f7f8 fe2a 	bl	8011e74 <pbuf_free>
}
 8019220:	3718      	adds	r7, #24
 8019222:	46bd      	mov	sp, r7
 8019224:	bdb0      	pop	{r4, r5, r7, pc}
 8019226:	bf00      	nop
 8019228:	0801ec40 	.word	0x0801ec40
 801922c:	0801ed90 	.word	0x0801ed90
 8019230:	0801ecb8 	.word	0x0801ecb8

08019234 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b086      	sub	sp, #24
 8019238:	af02      	add	r7, sp, #8
 801923a:	60f8      	str	r0, [r7, #12]
 801923c:	60b9      	str	r1, [r7, #8]
 801923e:	4613      	mov	r3, r2
 8019240:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8019242:	79fa      	ldrb	r2, [r7, #7]
 8019244:	4944      	ldr	r1, [pc, #272]	; (8019358 <etharp_output_to_arp_index+0x124>)
 8019246:	4613      	mov	r3, r2
 8019248:	005b      	lsls	r3, r3, #1
 801924a:	4413      	add	r3, r2
 801924c:	00db      	lsls	r3, r3, #3
 801924e:	440b      	add	r3, r1
 8019250:	3314      	adds	r3, #20
 8019252:	781b      	ldrb	r3, [r3, #0]
 8019254:	2b01      	cmp	r3, #1
 8019256:	d806      	bhi.n	8019266 <etharp_output_to_arp_index+0x32>
 8019258:	4b40      	ldr	r3, [pc, #256]	; (801935c <etharp_output_to_arp_index+0x128>)
 801925a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801925e:	4940      	ldr	r1, [pc, #256]	; (8019360 <etharp_output_to_arp_index+0x12c>)
 8019260:	4840      	ldr	r0, [pc, #256]	; (8019364 <etharp_output_to_arp_index+0x130>)
 8019262:	f002 fa3b 	bl	801b6dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8019266:	79fa      	ldrb	r2, [r7, #7]
 8019268:	493b      	ldr	r1, [pc, #236]	; (8019358 <etharp_output_to_arp_index+0x124>)
 801926a:	4613      	mov	r3, r2
 801926c:	005b      	lsls	r3, r3, #1
 801926e:	4413      	add	r3, r2
 8019270:	00db      	lsls	r3, r3, #3
 8019272:	440b      	add	r3, r1
 8019274:	3314      	adds	r3, #20
 8019276:	781b      	ldrb	r3, [r3, #0]
 8019278:	2b02      	cmp	r3, #2
 801927a:	d153      	bne.n	8019324 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801927c:	79fa      	ldrb	r2, [r7, #7]
 801927e:	4936      	ldr	r1, [pc, #216]	; (8019358 <etharp_output_to_arp_index+0x124>)
 8019280:	4613      	mov	r3, r2
 8019282:	005b      	lsls	r3, r3, #1
 8019284:	4413      	add	r3, r2
 8019286:	00db      	lsls	r3, r3, #3
 8019288:	440b      	add	r3, r1
 801928a:	3312      	adds	r3, #18
 801928c:	881b      	ldrh	r3, [r3, #0]
 801928e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8019292:	d919      	bls.n	80192c8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8019294:	79fa      	ldrb	r2, [r7, #7]
 8019296:	4613      	mov	r3, r2
 8019298:	005b      	lsls	r3, r3, #1
 801929a:	4413      	add	r3, r2
 801929c:	00db      	lsls	r3, r3, #3
 801929e:	4a2e      	ldr	r2, [pc, #184]	; (8019358 <etharp_output_to_arp_index+0x124>)
 80192a0:	4413      	add	r3, r2
 80192a2:	3304      	adds	r3, #4
 80192a4:	4619      	mov	r1, r3
 80192a6:	68f8      	ldr	r0, [r7, #12]
 80192a8:	f000 fb4c 	bl	8019944 <etharp_request>
 80192ac:	4603      	mov	r3, r0
 80192ae:	2b00      	cmp	r3, #0
 80192b0:	d138      	bne.n	8019324 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80192b2:	79fa      	ldrb	r2, [r7, #7]
 80192b4:	4928      	ldr	r1, [pc, #160]	; (8019358 <etharp_output_to_arp_index+0x124>)
 80192b6:	4613      	mov	r3, r2
 80192b8:	005b      	lsls	r3, r3, #1
 80192ba:	4413      	add	r3, r2
 80192bc:	00db      	lsls	r3, r3, #3
 80192be:	440b      	add	r3, r1
 80192c0:	3314      	adds	r3, #20
 80192c2:	2203      	movs	r2, #3
 80192c4:	701a      	strb	r2, [r3, #0]
 80192c6:	e02d      	b.n	8019324 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80192c8:	79fa      	ldrb	r2, [r7, #7]
 80192ca:	4923      	ldr	r1, [pc, #140]	; (8019358 <etharp_output_to_arp_index+0x124>)
 80192cc:	4613      	mov	r3, r2
 80192ce:	005b      	lsls	r3, r3, #1
 80192d0:	4413      	add	r3, r2
 80192d2:	00db      	lsls	r3, r3, #3
 80192d4:	440b      	add	r3, r1
 80192d6:	3312      	adds	r3, #18
 80192d8:	881b      	ldrh	r3, [r3, #0]
 80192da:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80192de:	d321      	bcc.n	8019324 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80192e0:	79fa      	ldrb	r2, [r7, #7]
 80192e2:	4613      	mov	r3, r2
 80192e4:	005b      	lsls	r3, r3, #1
 80192e6:	4413      	add	r3, r2
 80192e8:	00db      	lsls	r3, r3, #3
 80192ea:	4a1b      	ldr	r2, [pc, #108]	; (8019358 <etharp_output_to_arp_index+0x124>)
 80192ec:	4413      	add	r3, r2
 80192ee:	1d19      	adds	r1, r3, #4
 80192f0:	79fa      	ldrb	r2, [r7, #7]
 80192f2:	4613      	mov	r3, r2
 80192f4:	005b      	lsls	r3, r3, #1
 80192f6:	4413      	add	r3, r2
 80192f8:	00db      	lsls	r3, r3, #3
 80192fa:	3308      	adds	r3, #8
 80192fc:	4a16      	ldr	r2, [pc, #88]	; (8019358 <etharp_output_to_arp_index+0x124>)
 80192fe:	4413      	add	r3, r2
 8019300:	3304      	adds	r3, #4
 8019302:	461a      	mov	r2, r3
 8019304:	68f8      	ldr	r0, [r7, #12]
 8019306:	f000 fafb 	bl	8019900 <etharp_request_dst>
 801930a:	4603      	mov	r3, r0
 801930c:	2b00      	cmp	r3, #0
 801930e:	d109      	bne.n	8019324 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8019310:	79fa      	ldrb	r2, [r7, #7]
 8019312:	4911      	ldr	r1, [pc, #68]	; (8019358 <etharp_output_to_arp_index+0x124>)
 8019314:	4613      	mov	r3, r2
 8019316:	005b      	lsls	r3, r3, #1
 8019318:	4413      	add	r3, r2
 801931a:	00db      	lsls	r3, r3, #3
 801931c:	440b      	add	r3, r1
 801931e:	3314      	adds	r3, #20
 8019320:	2203      	movs	r2, #3
 8019322:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8019324:	68fb      	ldr	r3, [r7, #12]
 8019326:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801932a:	79fa      	ldrb	r2, [r7, #7]
 801932c:	4613      	mov	r3, r2
 801932e:	005b      	lsls	r3, r3, #1
 8019330:	4413      	add	r3, r2
 8019332:	00db      	lsls	r3, r3, #3
 8019334:	3308      	adds	r3, #8
 8019336:	4a08      	ldr	r2, [pc, #32]	; (8019358 <etharp_output_to_arp_index+0x124>)
 8019338:	4413      	add	r3, r2
 801933a:	3304      	adds	r3, #4
 801933c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8019340:	9200      	str	r2, [sp, #0]
 8019342:	460a      	mov	r2, r1
 8019344:	68b9      	ldr	r1, [r7, #8]
 8019346:	68f8      	ldr	r0, [r7, #12]
 8019348:	f001 fef2 	bl	801b130 <ethernet_output>
 801934c:	4603      	mov	r3, r0
}
 801934e:	4618      	mov	r0, r3
 8019350:	3710      	adds	r7, #16
 8019352:	46bd      	mov	sp, r7
 8019354:	bd80      	pop	{r7, pc}
 8019356:	bf00      	nop
 8019358:	24004b40 	.word	0x24004b40
 801935c:	0801ec40 	.word	0x0801ec40
 8019360:	0801edb0 	.word	0x0801edb0
 8019364:	0801ecb8 	.word	0x0801ecb8

08019368 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8019368:	b580      	push	{r7, lr}
 801936a:	b08a      	sub	sp, #40	; 0x28
 801936c:	af02      	add	r7, sp, #8
 801936e:	60f8      	str	r0, [r7, #12]
 8019370:	60b9      	str	r1, [r7, #8]
 8019372:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	2b00      	cmp	r3, #0
 801937c:	d106      	bne.n	801938c <etharp_output+0x24>
 801937e:	4b73      	ldr	r3, [pc, #460]	; (801954c <etharp_output+0x1e4>)
 8019380:	f240 321e 	movw	r2, #798	; 0x31e
 8019384:	4972      	ldr	r1, [pc, #456]	; (8019550 <etharp_output+0x1e8>)
 8019386:	4873      	ldr	r0, [pc, #460]	; (8019554 <etharp_output+0x1ec>)
 8019388:	f002 f9a8 	bl	801b6dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801938c:	68bb      	ldr	r3, [r7, #8]
 801938e:	2b00      	cmp	r3, #0
 8019390:	d106      	bne.n	80193a0 <etharp_output+0x38>
 8019392:	4b6e      	ldr	r3, [pc, #440]	; (801954c <etharp_output+0x1e4>)
 8019394:	f240 321f 	movw	r2, #799	; 0x31f
 8019398:	496f      	ldr	r1, [pc, #444]	; (8019558 <etharp_output+0x1f0>)
 801939a:	486e      	ldr	r0, [pc, #440]	; (8019554 <etharp_output+0x1ec>)
 801939c:	f002 f99e 	bl	801b6dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	2b00      	cmp	r3, #0
 80193a4:	d106      	bne.n	80193b4 <etharp_output+0x4c>
 80193a6:	4b69      	ldr	r3, [pc, #420]	; (801954c <etharp_output+0x1e4>)
 80193a8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80193ac:	496b      	ldr	r1, [pc, #428]	; (801955c <etharp_output+0x1f4>)
 80193ae:	4869      	ldr	r0, [pc, #420]	; (8019554 <etharp_output+0x1ec>)
 80193b0:	f002 f994 	bl	801b6dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80193b4:	687b      	ldr	r3, [r7, #4]
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	68f9      	ldr	r1, [r7, #12]
 80193ba:	4618      	mov	r0, r3
 80193bc:	f000 ff1e 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 80193c0:	4603      	mov	r3, r0
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d002      	beq.n	80193cc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80193c6:	4b66      	ldr	r3, [pc, #408]	; (8019560 <etharp_output+0x1f8>)
 80193c8:	61fb      	str	r3, [r7, #28]
 80193ca:	e0af      	b.n	801952c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80193d4:	2be0      	cmp	r3, #224	; 0xe0
 80193d6:	d118      	bne.n	801940a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80193d8:	2301      	movs	r3, #1
 80193da:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80193dc:	2300      	movs	r3, #0
 80193de:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80193e0:	235e      	movs	r3, #94	; 0x5e
 80193e2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80193e4:	687b      	ldr	r3, [r7, #4]
 80193e6:	3301      	adds	r3, #1
 80193e8:	781b      	ldrb	r3, [r3, #0]
 80193ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80193ee:	b2db      	uxtb	r3, r3
 80193f0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	3302      	adds	r3, #2
 80193f6:	781b      	ldrb	r3, [r3, #0]
 80193f8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	3303      	adds	r3, #3
 80193fe:	781b      	ldrb	r3, [r3, #0]
 8019400:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8019402:	f107 0310 	add.w	r3, r7, #16
 8019406:	61fb      	str	r3, [r7, #28]
 8019408:	e090      	b.n	801952c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681a      	ldr	r2, [r3, #0]
 801940e:	68fb      	ldr	r3, [r7, #12]
 8019410:	3304      	adds	r3, #4
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	405a      	eors	r2, r3
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	3308      	adds	r3, #8
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	4013      	ands	r3, r2
 801941e:	2b00      	cmp	r3, #0
 8019420:	d012      	beq.n	8019448 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	681b      	ldr	r3, [r3, #0]
 8019426:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8019428:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801942c:	4293      	cmp	r3, r2
 801942e:	d00b      	beq.n	8019448 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	330c      	adds	r3, #12
 8019434:	681b      	ldr	r3, [r3, #0]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d003      	beq.n	8019442 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	330c      	adds	r3, #12
 801943e:	61bb      	str	r3, [r7, #24]
 8019440:	e002      	b.n	8019448 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8019442:	f06f 0303 	mvn.w	r3, #3
 8019446:	e07d      	b.n	8019544 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019448:	4b46      	ldr	r3, [pc, #280]	; (8019564 <etharp_output+0x1fc>)
 801944a:	781b      	ldrb	r3, [r3, #0]
 801944c:	4619      	mov	r1, r3
 801944e:	4a46      	ldr	r2, [pc, #280]	; (8019568 <etharp_output+0x200>)
 8019450:	460b      	mov	r3, r1
 8019452:	005b      	lsls	r3, r3, #1
 8019454:	440b      	add	r3, r1
 8019456:	00db      	lsls	r3, r3, #3
 8019458:	4413      	add	r3, r2
 801945a:	3314      	adds	r3, #20
 801945c:	781b      	ldrb	r3, [r3, #0]
 801945e:	2b01      	cmp	r3, #1
 8019460:	d925      	bls.n	80194ae <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019462:	4b40      	ldr	r3, [pc, #256]	; (8019564 <etharp_output+0x1fc>)
 8019464:	781b      	ldrb	r3, [r3, #0]
 8019466:	4619      	mov	r1, r3
 8019468:	4a3f      	ldr	r2, [pc, #252]	; (8019568 <etharp_output+0x200>)
 801946a:	460b      	mov	r3, r1
 801946c:	005b      	lsls	r3, r3, #1
 801946e:	440b      	add	r3, r1
 8019470:	00db      	lsls	r3, r3, #3
 8019472:	4413      	add	r3, r2
 8019474:	3308      	adds	r3, #8
 8019476:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8019478:	68fa      	ldr	r2, [r7, #12]
 801947a:	429a      	cmp	r2, r3
 801947c:	d117      	bne.n	80194ae <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	681a      	ldr	r2, [r3, #0]
 8019482:	4b38      	ldr	r3, [pc, #224]	; (8019564 <etharp_output+0x1fc>)
 8019484:	781b      	ldrb	r3, [r3, #0]
 8019486:	4618      	mov	r0, r3
 8019488:	4937      	ldr	r1, [pc, #220]	; (8019568 <etharp_output+0x200>)
 801948a:	4603      	mov	r3, r0
 801948c:	005b      	lsls	r3, r3, #1
 801948e:	4403      	add	r3, r0
 8019490:	00db      	lsls	r3, r3, #3
 8019492:	440b      	add	r3, r1
 8019494:	3304      	adds	r3, #4
 8019496:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8019498:	429a      	cmp	r2, r3
 801949a:	d108      	bne.n	80194ae <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801949c:	4b31      	ldr	r3, [pc, #196]	; (8019564 <etharp_output+0x1fc>)
 801949e:	781b      	ldrb	r3, [r3, #0]
 80194a0:	461a      	mov	r2, r3
 80194a2:	68b9      	ldr	r1, [r7, #8]
 80194a4:	68f8      	ldr	r0, [r7, #12]
 80194a6:	f7ff fec5 	bl	8019234 <etharp_output_to_arp_index>
 80194aa:	4603      	mov	r3, r0
 80194ac:	e04a      	b.n	8019544 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80194ae:	2300      	movs	r3, #0
 80194b0:	75fb      	strb	r3, [r7, #23]
 80194b2:	e031      	b.n	8019518 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80194b4:	7dfa      	ldrb	r2, [r7, #23]
 80194b6:	492c      	ldr	r1, [pc, #176]	; (8019568 <etharp_output+0x200>)
 80194b8:	4613      	mov	r3, r2
 80194ba:	005b      	lsls	r3, r3, #1
 80194bc:	4413      	add	r3, r2
 80194be:	00db      	lsls	r3, r3, #3
 80194c0:	440b      	add	r3, r1
 80194c2:	3314      	adds	r3, #20
 80194c4:	781b      	ldrb	r3, [r3, #0]
 80194c6:	2b01      	cmp	r3, #1
 80194c8:	d923      	bls.n	8019512 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80194ca:	7dfa      	ldrb	r2, [r7, #23]
 80194cc:	4926      	ldr	r1, [pc, #152]	; (8019568 <etharp_output+0x200>)
 80194ce:	4613      	mov	r3, r2
 80194d0:	005b      	lsls	r3, r3, #1
 80194d2:	4413      	add	r3, r2
 80194d4:	00db      	lsls	r3, r3, #3
 80194d6:	440b      	add	r3, r1
 80194d8:	3308      	adds	r3, #8
 80194da:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80194dc:	68fa      	ldr	r2, [r7, #12]
 80194de:	429a      	cmp	r2, r3
 80194e0:	d117      	bne.n	8019512 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80194e2:	69bb      	ldr	r3, [r7, #24]
 80194e4:	6819      	ldr	r1, [r3, #0]
 80194e6:	7dfa      	ldrb	r2, [r7, #23]
 80194e8:	481f      	ldr	r0, [pc, #124]	; (8019568 <etharp_output+0x200>)
 80194ea:	4613      	mov	r3, r2
 80194ec:	005b      	lsls	r3, r3, #1
 80194ee:	4413      	add	r3, r2
 80194f0:	00db      	lsls	r3, r3, #3
 80194f2:	4403      	add	r3, r0
 80194f4:	3304      	adds	r3, #4
 80194f6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80194f8:	4299      	cmp	r1, r3
 80194fa:	d10a      	bne.n	8019512 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80194fc:	4a19      	ldr	r2, [pc, #100]	; (8019564 <etharp_output+0x1fc>)
 80194fe:	7dfb      	ldrb	r3, [r7, #23]
 8019500:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8019502:	7dfb      	ldrb	r3, [r7, #23]
 8019504:	461a      	mov	r2, r3
 8019506:	68b9      	ldr	r1, [r7, #8]
 8019508:	68f8      	ldr	r0, [r7, #12]
 801950a:	f7ff fe93 	bl	8019234 <etharp_output_to_arp_index>
 801950e:	4603      	mov	r3, r0
 8019510:	e018      	b.n	8019544 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8019512:	7dfb      	ldrb	r3, [r7, #23]
 8019514:	3301      	adds	r3, #1
 8019516:	75fb      	strb	r3, [r7, #23]
 8019518:	7dfb      	ldrb	r3, [r7, #23]
 801951a:	2b09      	cmp	r3, #9
 801951c:	d9ca      	bls.n	80194b4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801951e:	68ba      	ldr	r2, [r7, #8]
 8019520:	69b9      	ldr	r1, [r7, #24]
 8019522:	68f8      	ldr	r0, [r7, #12]
 8019524:	f000 f822 	bl	801956c <etharp_query>
 8019528:	4603      	mov	r3, r0
 801952a:	e00b      	b.n	8019544 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019532:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019536:	9300      	str	r3, [sp, #0]
 8019538:	69fb      	ldr	r3, [r7, #28]
 801953a:	68b9      	ldr	r1, [r7, #8]
 801953c:	68f8      	ldr	r0, [r7, #12]
 801953e:	f001 fdf7 	bl	801b130 <ethernet_output>
 8019542:	4603      	mov	r3, r0
}
 8019544:	4618      	mov	r0, r3
 8019546:	3720      	adds	r7, #32
 8019548:	46bd      	mov	sp, r7
 801954a:	bd80      	pop	{r7, pc}
 801954c:	0801ec40 	.word	0x0801ec40
 8019550:	0801ed90 	.word	0x0801ed90
 8019554:	0801ecb8 	.word	0x0801ecb8
 8019558:	0801ede0 	.word	0x0801ede0
 801955c:	0801ed80 	.word	0x0801ed80
 8019560:	0801fd24 	.word	0x0801fd24
 8019564:	24004c30 	.word	0x24004c30
 8019568:	24004b40 	.word	0x24004b40

0801956c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801956c:	b580      	push	{r7, lr}
 801956e:	b08c      	sub	sp, #48	; 0x30
 8019570:	af02      	add	r7, sp, #8
 8019572:	60f8      	str	r0, [r7, #12]
 8019574:	60b9      	str	r1, [r7, #8]
 8019576:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	3326      	adds	r3, #38	; 0x26
 801957c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801957e:	23ff      	movs	r3, #255	; 0xff
 8019580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8019584:	2300      	movs	r3, #0
 8019586:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8019588:	68bb      	ldr	r3, [r7, #8]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	68f9      	ldr	r1, [r7, #12]
 801958e:	4618      	mov	r0, r3
 8019590:	f000 fe34 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 8019594:	4603      	mov	r3, r0
 8019596:	2b00      	cmp	r3, #0
 8019598:	d10c      	bne.n	80195b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801959a:	68bb      	ldr	r3, [r7, #8]
 801959c:	681b      	ldr	r3, [r3, #0]
 801959e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80195a2:	2be0      	cmp	r3, #224	; 0xe0
 80195a4:	d006      	beq.n	80195b4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80195a6:	68bb      	ldr	r3, [r7, #8]
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d003      	beq.n	80195b4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80195ac:	68bb      	ldr	r3, [r7, #8]
 80195ae:	681b      	ldr	r3, [r3, #0]
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d102      	bne.n	80195ba <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80195b4:	f06f 030f 	mvn.w	r3, #15
 80195b8:	e101      	b.n	80197be <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80195ba:	68fa      	ldr	r2, [r7, #12]
 80195bc:	2101      	movs	r1, #1
 80195be:	68b8      	ldr	r0, [r7, #8]
 80195c0:	f7ff fb60 	bl	8018c84 <etharp_find_entry>
 80195c4:	4603      	mov	r3, r0
 80195c6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80195c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	da02      	bge.n	80195d6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80195d0:	8a7b      	ldrh	r3, [r7, #18]
 80195d2:	b25b      	sxtb	r3, r3
 80195d4:	e0f3      	b.n	80197be <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80195d6:	8a7b      	ldrh	r3, [r7, #18]
 80195d8:	2b7e      	cmp	r3, #126	; 0x7e
 80195da:	d906      	bls.n	80195ea <etharp_query+0x7e>
 80195dc:	4b7a      	ldr	r3, [pc, #488]	; (80197c8 <etharp_query+0x25c>)
 80195de:	f240 32c1 	movw	r2, #961	; 0x3c1
 80195e2:	497a      	ldr	r1, [pc, #488]	; (80197cc <etharp_query+0x260>)
 80195e4:	487a      	ldr	r0, [pc, #488]	; (80197d0 <etharp_query+0x264>)
 80195e6:	f002 f879 	bl	801b6dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 80195ea:	8a7b      	ldrh	r3, [r7, #18]
 80195ec:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80195ee:	7c7a      	ldrb	r2, [r7, #17]
 80195f0:	4978      	ldr	r1, [pc, #480]	; (80197d4 <etharp_query+0x268>)
 80195f2:	4613      	mov	r3, r2
 80195f4:	005b      	lsls	r3, r3, #1
 80195f6:	4413      	add	r3, r2
 80195f8:	00db      	lsls	r3, r3, #3
 80195fa:	440b      	add	r3, r1
 80195fc:	3314      	adds	r3, #20
 80195fe:	781b      	ldrb	r3, [r3, #0]
 8019600:	2b00      	cmp	r3, #0
 8019602:	d115      	bne.n	8019630 <etharp_query+0xc4>
    is_new_entry = 1;
 8019604:	2301      	movs	r3, #1
 8019606:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8019608:	7c7a      	ldrb	r2, [r7, #17]
 801960a:	4972      	ldr	r1, [pc, #456]	; (80197d4 <etharp_query+0x268>)
 801960c:	4613      	mov	r3, r2
 801960e:	005b      	lsls	r3, r3, #1
 8019610:	4413      	add	r3, r2
 8019612:	00db      	lsls	r3, r3, #3
 8019614:	440b      	add	r3, r1
 8019616:	3314      	adds	r3, #20
 8019618:	2201      	movs	r2, #1
 801961a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801961c:	7c7a      	ldrb	r2, [r7, #17]
 801961e:	496d      	ldr	r1, [pc, #436]	; (80197d4 <etharp_query+0x268>)
 8019620:	4613      	mov	r3, r2
 8019622:	005b      	lsls	r3, r3, #1
 8019624:	4413      	add	r3, r2
 8019626:	00db      	lsls	r3, r3, #3
 8019628:	440b      	add	r3, r1
 801962a:	3308      	adds	r3, #8
 801962c:	68fa      	ldr	r2, [r7, #12]
 801962e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8019630:	7c7a      	ldrb	r2, [r7, #17]
 8019632:	4968      	ldr	r1, [pc, #416]	; (80197d4 <etharp_query+0x268>)
 8019634:	4613      	mov	r3, r2
 8019636:	005b      	lsls	r3, r3, #1
 8019638:	4413      	add	r3, r2
 801963a:	00db      	lsls	r3, r3, #3
 801963c:	440b      	add	r3, r1
 801963e:	3314      	adds	r3, #20
 8019640:	781b      	ldrb	r3, [r3, #0]
 8019642:	2b01      	cmp	r3, #1
 8019644:	d011      	beq.n	801966a <etharp_query+0xfe>
 8019646:	7c7a      	ldrb	r2, [r7, #17]
 8019648:	4962      	ldr	r1, [pc, #392]	; (80197d4 <etharp_query+0x268>)
 801964a:	4613      	mov	r3, r2
 801964c:	005b      	lsls	r3, r3, #1
 801964e:	4413      	add	r3, r2
 8019650:	00db      	lsls	r3, r3, #3
 8019652:	440b      	add	r3, r1
 8019654:	3314      	adds	r3, #20
 8019656:	781b      	ldrb	r3, [r3, #0]
 8019658:	2b01      	cmp	r3, #1
 801965a:	d806      	bhi.n	801966a <etharp_query+0xfe>
 801965c:	4b5a      	ldr	r3, [pc, #360]	; (80197c8 <etharp_query+0x25c>)
 801965e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8019662:	495d      	ldr	r1, [pc, #372]	; (80197d8 <etharp_query+0x26c>)
 8019664:	485a      	ldr	r0, [pc, #360]	; (80197d0 <etharp_query+0x264>)
 8019666:	f002 f839 	bl	801b6dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801966a:	6a3b      	ldr	r3, [r7, #32]
 801966c:	2b00      	cmp	r3, #0
 801966e:	d102      	bne.n	8019676 <etharp_query+0x10a>
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	2b00      	cmp	r3, #0
 8019674:	d10c      	bne.n	8019690 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8019676:	68b9      	ldr	r1, [r7, #8]
 8019678:	68f8      	ldr	r0, [r7, #12]
 801967a:	f000 f963 	bl	8019944 <etharp_request>
 801967e:	4603      	mov	r3, r0
 8019680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	2b00      	cmp	r3, #0
 8019688:	d102      	bne.n	8019690 <etharp_query+0x124>
      return result;
 801968a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801968e:	e096      	b.n	80197be <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d106      	bne.n	80196a4 <etharp_query+0x138>
 8019696:	4b4c      	ldr	r3, [pc, #304]	; (80197c8 <etharp_query+0x25c>)
 8019698:	f240 32e1 	movw	r2, #993	; 0x3e1
 801969c:	494f      	ldr	r1, [pc, #316]	; (80197dc <etharp_query+0x270>)
 801969e:	484c      	ldr	r0, [pc, #304]	; (80197d0 <etharp_query+0x264>)
 80196a0:	f002 f81c 	bl	801b6dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80196a4:	7c7a      	ldrb	r2, [r7, #17]
 80196a6:	494b      	ldr	r1, [pc, #300]	; (80197d4 <etharp_query+0x268>)
 80196a8:	4613      	mov	r3, r2
 80196aa:	005b      	lsls	r3, r3, #1
 80196ac:	4413      	add	r3, r2
 80196ae:	00db      	lsls	r3, r3, #3
 80196b0:	440b      	add	r3, r1
 80196b2:	3314      	adds	r3, #20
 80196b4:	781b      	ldrb	r3, [r3, #0]
 80196b6:	2b01      	cmp	r3, #1
 80196b8:	d917      	bls.n	80196ea <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80196ba:	4a49      	ldr	r2, [pc, #292]	; (80197e0 <etharp_query+0x274>)
 80196bc:	7c7b      	ldrb	r3, [r7, #17]
 80196be:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80196c0:	7c7a      	ldrb	r2, [r7, #17]
 80196c2:	4613      	mov	r3, r2
 80196c4:	005b      	lsls	r3, r3, #1
 80196c6:	4413      	add	r3, r2
 80196c8:	00db      	lsls	r3, r3, #3
 80196ca:	3308      	adds	r3, #8
 80196cc:	4a41      	ldr	r2, [pc, #260]	; (80197d4 <etharp_query+0x268>)
 80196ce:	4413      	add	r3, r2
 80196d0:	3304      	adds	r3, #4
 80196d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80196d6:	9200      	str	r2, [sp, #0]
 80196d8:	697a      	ldr	r2, [r7, #20]
 80196da:	6879      	ldr	r1, [r7, #4]
 80196dc:	68f8      	ldr	r0, [r7, #12]
 80196de:	f001 fd27 	bl	801b130 <ethernet_output>
 80196e2:	4603      	mov	r3, r0
 80196e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80196e8:	e067      	b.n	80197ba <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80196ea:	7c7a      	ldrb	r2, [r7, #17]
 80196ec:	4939      	ldr	r1, [pc, #228]	; (80197d4 <etharp_query+0x268>)
 80196ee:	4613      	mov	r3, r2
 80196f0:	005b      	lsls	r3, r3, #1
 80196f2:	4413      	add	r3, r2
 80196f4:	00db      	lsls	r3, r3, #3
 80196f6:	440b      	add	r3, r1
 80196f8:	3314      	adds	r3, #20
 80196fa:	781b      	ldrb	r3, [r3, #0]
 80196fc:	2b01      	cmp	r3, #1
 80196fe:	d15c      	bne.n	80197ba <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8019700:	2300      	movs	r3, #0
 8019702:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019708:	e01c      	b.n	8019744 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801970a:	69fb      	ldr	r3, [r7, #28]
 801970c:	895a      	ldrh	r2, [r3, #10]
 801970e:	69fb      	ldr	r3, [r7, #28]
 8019710:	891b      	ldrh	r3, [r3, #8]
 8019712:	429a      	cmp	r2, r3
 8019714:	d10a      	bne.n	801972c <etharp_query+0x1c0>
 8019716:	69fb      	ldr	r3, [r7, #28]
 8019718:	681b      	ldr	r3, [r3, #0]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d006      	beq.n	801972c <etharp_query+0x1c0>
 801971e:	4b2a      	ldr	r3, [pc, #168]	; (80197c8 <etharp_query+0x25c>)
 8019720:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8019724:	492f      	ldr	r1, [pc, #188]	; (80197e4 <etharp_query+0x278>)
 8019726:	482a      	ldr	r0, [pc, #168]	; (80197d0 <etharp_query+0x264>)
 8019728:	f001 ffd8 	bl	801b6dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801972c:	69fb      	ldr	r3, [r7, #28]
 801972e:	7b1b      	ldrb	r3, [r3, #12]
 8019730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019734:	2b00      	cmp	r3, #0
 8019736:	d002      	beq.n	801973e <etharp_query+0x1d2>
        copy_needed = 1;
 8019738:	2301      	movs	r3, #1
 801973a:	61bb      	str	r3, [r7, #24]
        break;
 801973c:	e005      	b.n	801974a <etharp_query+0x1de>
      }
      p = p->next;
 801973e:	69fb      	ldr	r3, [r7, #28]
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	61fb      	str	r3, [r7, #28]
    while (p) {
 8019744:	69fb      	ldr	r3, [r7, #28]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d1df      	bne.n	801970a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801974a:	69bb      	ldr	r3, [r7, #24]
 801974c:	2b00      	cmp	r3, #0
 801974e:	d007      	beq.n	8019760 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8019750:	687a      	ldr	r2, [r7, #4]
 8019752:	f44f 7120 	mov.w	r1, #640	; 0x280
 8019756:	200e      	movs	r0, #14
 8019758:	f7f8 fe04 	bl	8012364 <pbuf_clone>
 801975c:	61f8      	str	r0, [r7, #28]
 801975e:	e004      	b.n	801976a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8019760:	687b      	ldr	r3, [r7, #4]
 8019762:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8019764:	69f8      	ldr	r0, [r7, #28]
 8019766:	f7f8 fc2b 	bl	8011fc0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801976a:	69fb      	ldr	r3, [r7, #28]
 801976c:	2b00      	cmp	r3, #0
 801976e:	d021      	beq.n	80197b4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8019770:	7c7a      	ldrb	r2, [r7, #17]
 8019772:	4918      	ldr	r1, [pc, #96]	; (80197d4 <etharp_query+0x268>)
 8019774:	4613      	mov	r3, r2
 8019776:	005b      	lsls	r3, r3, #1
 8019778:	4413      	add	r3, r2
 801977a:	00db      	lsls	r3, r3, #3
 801977c:	440b      	add	r3, r1
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d00a      	beq.n	801979a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8019784:	7c7a      	ldrb	r2, [r7, #17]
 8019786:	4913      	ldr	r1, [pc, #76]	; (80197d4 <etharp_query+0x268>)
 8019788:	4613      	mov	r3, r2
 801978a:	005b      	lsls	r3, r3, #1
 801978c:	4413      	add	r3, r2
 801978e:	00db      	lsls	r3, r3, #3
 8019790:	440b      	add	r3, r1
 8019792:	681b      	ldr	r3, [r3, #0]
 8019794:	4618      	mov	r0, r3
 8019796:	f7f8 fb6d 	bl	8011e74 <pbuf_free>
      }
      arp_table[i].q = p;
 801979a:	7c7a      	ldrb	r2, [r7, #17]
 801979c:	490d      	ldr	r1, [pc, #52]	; (80197d4 <etharp_query+0x268>)
 801979e:	4613      	mov	r3, r2
 80197a0:	005b      	lsls	r3, r3, #1
 80197a2:	4413      	add	r3, r2
 80197a4:	00db      	lsls	r3, r3, #3
 80197a6:	440b      	add	r3, r1
 80197a8:	69fa      	ldr	r2, [r7, #28]
 80197aa:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80197ac:	2300      	movs	r3, #0
 80197ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80197b2:	e002      	b.n	80197ba <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80197b4:	23ff      	movs	r3, #255	; 0xff
 80197b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80197ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80197be:	4618      	mov	r0, r3
 80197c0:	3728      	adds	r7, #40	; 0x28
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bd80      	pop	{r7, pc}
 80197c6:	bf00      	nop
 80197c8:	0801ec40 	.word	0x0801ec40
 80197cc:	0801edec 	.word	0x0801edec
 80197d0:	0801ecb8 	.word	0x0801ecb8
 80197d4:	24004b40 	.word	0x24004b40
 80197d8:	0801edfc 	.word	0x0801edfc
 80197dc:	0801ede0 	.word	0x0801ede0
 80197e0:	24004c30 	.word	0x24004c30
 80197e4:	0801ee24 	.word	0x0801ee24

080197e8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b08a      	sub	sp, #40	; 0x28
 80197ec:	af02      	add	r7, sp, #8
 80197ee:	60f8      	str	r0, [r7, #12]
 80197f0:	60b9      	str	r1, [r7, #8]
 80197f2:	607a      	str	r2, [r7, #4]
 80197f4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80197f6:	2300      	movs	r3, #0
 80197f8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80197fa:	68fb      	ldr	r3, [r7, #12]
 80197fc:	2b00      	cmp	r3, #0
 80197fe:	d106      	bne.n	801980e <etharp_raw+0x26>
 8019800:	4b3a      	ldr	r3, [pc, #232]	; (80198ec <etharp_raw+0x104>)
 8019802:	f240 4257 	movw	r2, #1111	; 0x457
 8019806:	493a      	ldr	r1, [pc, #232]	; (80198f0 <etharp_raw+0x108>)
 8019808:	483a      	ldr	r0, [pc, #232]	; (80198f4 <etharp_raw+0x10c>)
 801980a:	f001 ff67 	bl	801b6dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801980e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019812:	211c      	movs	r1, #28
 8019814:	200e      	movs	r0, #14
 8019816:	f7f8 f849 	bl	80118ac <pbuf_alloc>
 801981a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801981c:	69bb      	ldr	r3, [r7, #24]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d102      	bne.n	8019828 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8019822:	f04f 33ff 	mov.w	r3, #4294967295
 8019826:	e05d      	b.n	80198e4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8019828:	69bb      	ldr	r3, [r7, #24]
 801982a:	895b      	ldrh	r3, [r3, #10]
 801982c:	2b1b      	cmp	r3, #27
 801982e:	d806      	bhi.n	801983e <etharp_raw+0x56>
 8019830:	4b2e      	ldr	r3, [pc, #184]	; (80198ec <etharp_raw+0x104>)
 8019832:	f240 4262 	movw	r2, #1122	; 0x462
 8019836:	4930      	ldr	r1, [pc, #192]	; (80198f8 <etharp_raw+0x110>)
 8019838:	482e      	ldr	r0, [pc, #184]	; (80198f4 <etharp_raw+0x10c>)
 801983a:	f001 ff4f 	bl	801b6dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801983e:	69bb      	ldr	r3, [r7, #24]
 8019840:	685b      	ldr	r3, [r3, #4]
 8019842:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8019844:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019846:	4618      	mov	r0, r3
 8019848:	f7f6 fe6a 	bl	8010520 <lwip_htons>
 801984c:	4603      	mov	r3, r0
 801984e:	461a      	mov	r2, r3
 8019850:	697b      	ldr	r3, [r7, #20]
 8019852:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8019854:	68fb      	ldr	r3, [r7, #12]
 8019856:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801985a:	2b06      	cmp	r3, #6
 801985c:	d006      	beq.n	801986c <etharp_raw+0x84>
 801985e:	4b23      	ldr	r3, [pc, #140]	; (80198ec <etharp_raw+0x104>)
 8019860:	f240 4269 	movw	r2, #1129	; 0x469
 8019864:	4925      	ldr	r1, [pc, #148]	; (80198fc <etharp_raw+0x114>)
 8019866:	4823      	ldr	r0, [pc, #140]	; (80198f4 <etharp_raw+0x10c>)
 8019868:	f001 ff38 	bl	801b6dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801986c:	697b      	ldr	r3, [r7, #20]
 801986e:	3308      	adds	r3, #8
 8019870:	2206      	movs	r2, #6
 8019872:	6839      	ldr	r1, [r7, #0]
 8019874:	4618      	mov	r0, r3
 8019876:	f001 fec0 	bl	801b5fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801987a:	697b      	ldr	r3, [r7, #20]
 801987c:	3312      	adds	r3, #18
 801987e:	2206      	movs	r2, #6
 8019880:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019882:	4618      	mov	r0, r3
 8019884:	f001 feb9 	bl	801b5fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8019888:	697b      	ldr	r3, [r7, #20]
 801988a:	330e      	adds	r3, #14
 801988c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801988e:	6812      	ldr	r2, [r2, #0]
 8019890:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8019892:	697b      	ldr	r3, [r7, #20]
 8019894:	3318      	adds	r3, #24
 8019896:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019898:	6812      	ldr	r2, [r2, #0]
 801989a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801989c:	697b      	ldr	r3, [r7, #20]
 801989e:	2200      	movs	r2, #0
 80198a0:	701a      	strb	r2, [r3, #0]
 80198a2:	2200      	movs	r2, #0
 80198a4:	f042 0201 	orr.w	r2, r2, #1
 80198a8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80198aa:	697b      	ldr	r3, [r7, #20]
 80198ac:	2200      	movs	r2, #0
 80198ae:	f042 0208 	orr.w	r2, r2, #8
 80198b2:	709a      	strb	r2, [r3, #2]
 80198b4:	2200      	movs	r2, #0
 80198b6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80198b8:	697b      	ldr	r3, [r7, #20]
 80198ba:	2206      	movs	r2, #6
 80198bc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80198be:	697b      	ldr	r3, [r7, #20]
 80198c0:	2204      	movs	r2, #4
 80198c2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80198c4:	f640 0306 	movw	r3, #2054	; 0x806
 80198c8:	9300      	str	r3, [sp, #0]
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	68ba      	ldr	r2, [r7, #8]
 80198ce:	69b9      	ldr	r1, [r7, #24]
 80198d0:	68f8      	ldr	r0, [r7, #12]
 80198d2:	f001 fc2d 	bl	801b130 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80198d6:	69b8      	ldr	r0, [r7, #24]
 80198d8:	f7f8 facc 	bl	8011e74 <pbuf_free>
  p = NULL;
 80198dc:	2300      	movs	r3, #0
 80198de:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80198e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80198e4:	4618      	mov	r0, r3
 80198e6:	3720      	adds	r7, #32
 80198e8:	46bd      	mov	sp, r7
 80198ea:	bd80      	pop	{r7, pc}
 80198ec:	0801ec40 	.word	0x0801ec40
 80198f0:	0801ed90 	.word	0x0801ed90
 80198f4:	0801ecb8 	.word	0x0801ecb8
 80198f8:	0801ee40 	.word	0x0801ee40
 80198fc:	0801ee74 	.word	0x0801ee74

08019900 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8019900:	b580      	push	{r7, lr}
 8019902:	b088      	sub	sp, #32
 8019904:	af04      	add	r7, sp, #16
 8019906:	60f8      	str	r0, [r7, #12]
 8019908:	60b9      	str	r1, [r7, #8]
 801990a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801990c:	68fb      	ldr	r3, [r7, #12]
 801990e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8019912:	68fb      	ldr	r3, [r7, #12]
 8019914:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8019918:	68fb      	ldr	r3, [r7, #12]
 801991a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801991c:	2201      	movs	r2, #1
 801991e:	9203      	str	r2, [sp, #12]
 8019920:	68ba      	ldr	r2, [r7, #8]
 8019922:	9202      	str	r2, [sp, #8]
 8019924:	4a06      	ldr	r2, [pc, #24]	; (8019940 <etharp_request_dst+0x40>)
 8019926:	9201      	str	r2, [sp, #4]
 8019928:	9300      	str	r3, [sp, #0]
 801992a:	4603      	mov	r3, r0
 801992c:	687a      	ldr	r2, [r7, #4]
 801992e:	68f8      	ldr	r0, [r7, #12]
 8019930:	f7ff ff5a 	bl	80197e8 <etharp_raw>
 8019934:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8019936:	4618      	mov	r0, r3
 8019938:	3710      	adds	r7, #16
 801993a:	46bd      	mov	sp, r7
 801993c:	bd80      	pop	{r7, pc}
 801993e:	bf00      	nop
 8019940:	0801fd2c 	.word	0x0801fd2c

08019944 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8019944:	b580      	push	{r7, lr}
 8019946:	b082      	sub	sp, #8
 8019948:	af00      	add	r7, sp, #0
 801994a:	6078      	str	r0, [r7, #4]
 801994c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801994e:	4a05      	ldr	r2, [pc, #20]	; (8019964 <etharp_request+0x20>)
 8019950:	6839      	ldr	r1, [r7, #0]
 8019952:	6878      	ldr	r0, [r7, #4]
 8019954:	f7ff ffd4 	bl	8019900 <etharp_request_dst>
 8019958:	4603      	mov	r3, r0
}
 801995a:	4618      	mov	r0, r3
 801995c:	3708      	adds	r7, #8
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}
 8019962:	bf00      	nop
 8019964:	0801fd24 	.word	0x0801fd24

08019968 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b08e      	sub	sp, #56	; 0x38
 801996c:	af04      	add	r7, sp, #16
 801996e:	6078      	str	r0, [r7, #4]
 8019970:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8019972:	4b87      	ldr	r3, [pc, #540]	; (8019b90 <icmp_input+0x228>)
 8019974:	689b      	ldr	r3, [r3, #8]
 8019976:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8019978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801997a:	781b      	ldrb	r3, [r3, #0]
 801997c:	f003 030f 	and.w	r3, r3, #15
 8019980:	b2db      	uxtb	r3, r3
 8019982:	009b      	lsls	r3, r3, #2
 8019984:	b2db      	uxtb	r3, r3
 8019986:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019988:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801998a:	2b13      	cmp	r3, #19
 801998c:	f240 80e8 	bls.w	8019b60 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	895b      	ldrh	r3, [r3, #10]
 8019994:	2b03      	cmp	r3, #3
 8019996:	f240 80e5 	bls.w	8019b64 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	685b      	ldr	r3, [r3, #4]
 801999e:	781b      	ldrb	r3, [r3, #0]
 80199a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80199a4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80199a8:	2b00      	cmp	r3, #0
 80199aa:	f000 80d2 	beq.w	8019b52 <icmp_input+0x1ea>
 80199ae:	2b08      	cmp	r3, #8
 80199b0:	f040 80d2 	bne.w	8019b58 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80199b4:	4b77      	ldr	r3, [pc, #476]	; (8019b94 <icmp_input+0x22c>)
 80199b6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80199b8:	4b75      	ldr	r3, [pc, #468]	; (8019b90 <icmp_input+0x228>)
 80199ba:	695b      	ldr	r3, [r3, #20]
 80199bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80199c0:	2be0      	cmp	r3, #224	; 0xe0
 80199c2:	f000 80d6 	beq.w	8019b72 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80199c6:	4b72      	ldr	r3, [pc, #456]	; (8019b90 <icmp_input+0x228>)
 80199c8:	695b      	ldr	r3, [r3, #20]
 80199ca:	4a71      	ldr	r2, [pc, #452]	; (8019b90 <icmp_input+0x228>)
 80199cc:	6812      	ldr	r2, [r2, #0]
 80199ce:	4611      	mov	r1, r2
 80199d0:	4618      	mov	r0, r3
 80199d2:	f000 fc13 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 80199d6:	4603      	mov	r3, r0
 80199d8:	2b00      	cmp	r3, #0
 80199da:	f040 80cc 	bne.w	8019b76 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	891b      	ldrh	r3, [r3, #8]
 80199e2:	2b07      	cmp	r3, #7
 80199e4:	f240 80c0 	bls.w	8019b68 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 80199e8:	6878      	ldr	r0, [r7, #4]
 80199ea:	f7f6 fe36 	bl	801065a <inet_chksum_pbuf>
 80199ee:	4603      	mov	r3, r0
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d003      	beq.n	80199fc <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 80199f4:	6878      	ldr	r0, [r7, #4]
 80199f6:	f7f8 fa3d 	bl	8011e74 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 80199fa:	e0c5      	b.n	8019b88 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80199fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80199fe:	330e      	adds	r3, #14
 8019a00:	4619      	mov	r1, r3
 8019a02:	6878      	ldr	r0, [r7, #4]
 8019a04:	f7f8 f9a0 	bl	8011d48 <pbuf_add_header>
 8019a08:	4603      	mov	r3, r0
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d04b      	beq.n	8019aa6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	891a      	ldrh	r2, [r3, #8]
 8019a12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a14:	4413      	add	r3, r2
 8019a16:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019a18:	687b      	ldr	r3, [r7, #4]
 8019a1a:	891b      	ldrh	r3, [r3, #8]
 8019a1c:	8b7a      	ldrh	r2, [r7, #26]
 8019a1e:	429a      	cmp	r2, r3
 8019a20:	f0c0 80ab 	bcc.w	8019b7a <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8019a24:	8b7b      	ldrh	r3, [r7, #26]
 8019a26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a2a:	4619      	mov	r1, r3
 8019a2c:	200e      	movs	r0, #14
 8019a2e:	f7f7 ff3d 	bl	80118ac <pbuf_alloc>
 8019a32:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8019a34:	697b      	ldr	r3, [r7, #20]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	f000 80a1 	beq.w	8019b7e <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8019a3c:	697b      	ldr	r3, [r7, #20]
 8019a3e:	895b      	ldrh	r3, [r3, #10]
 8019a40:	461a      	mov	r2, r3
 8019a42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a44:	3308      	adds	r3, #8
 8019a46:	429a      	cmp	r2, r3
 8019a48:	d203      	bcs.n	8019a52 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8019a4a:	6978      	ldr	r0, [r7, #20]
 8019a4c:	f7f8 fa12 	bl	8011e74 <pbuf_free>
          goto icmperr;
 8019a50:	e096      	b.n	8019b80 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8019a52:	697b      	ldr	r3, [r7, #20]
 8019a54:	685b      	ldr	r3, [r3, #4]
 8019a56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8019a58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019a5a:	4618      	mov	r0, r3
 8019a5c:	f001 fdcd 	bl	801b5fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8019a60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019a62:	4619      	mov	r1, r3
 8019a64:	6978      	ldr	r0, [r7, #20]
 8019a66:	f7f8 f97f 	bl	8011d68 <pbuf_remove_header>
 8019a6a:	4603      	mov	r3, r0
 8019a6c:	2b00      	cmp	r3, #0
 8019a6e:	d009      	beq.n	8019a84 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8019a70:	4b49      	ldr	r3, [pc, #292]	; (8019b98 <icmp_input+0x230>)
 8019a72:	22b6      	movs	r2, #182	; 0xb6
 8019a74:	4949      	ldr	r1, [pc, #292]	; (8019b9c <icmp_input+0x234>)
 8019a76:	484a      	ldr	r0, [pc, #296]	; (8019ba0 <icmp_input+0x238>)
 8019a78:	f001 fe30 	bl	801b6dc <iprintf>
          pbuf_free(r);
 8019a7c:	6978      	ldr	r0, [r7, #20]
 8019a7e:	f7f8 f9f9 	bl	8011e74 <pbuf_free>
          goto icmperr;
 8019a82:	e07d      	b.n	8019b80 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8019a84:	6879      	ldr	r1, [r7, #4]
 8019a86:	6978      	ldr	r0, [r7, #20]
 8019a88:	f7f8 fb28 	bl	80120dc <pbuf_copy>
 8019a8c:	4603      	mov	r3, r0
 8019a8e:	2b00      	cmp	r3, #0
 8019a90:	d003      	beq.n	8019a9a <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8019a92:	6978      	ldr	r0, [r7, #20]
 8019a94:	f7f8 f9ee 	bl	8011e74 <pbuf_free>
          goto icmperr;
 8019a98:	e072      	b.n	8019b80 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8019a9a:	6878      	ldr	r0, [r7, #4]
 8019a9c:	f7f8 f9ea 	bl	8011e74 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019aa0:	697b      	ldr	r3, [r7, #20]
 8019aa2:	607b      	str	r3, [r7, #4]
 8019aa4:	e00f      	b.n	8019ac6 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019aa6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019aa8:	330e      	adds	r3, #14
 8019aaa:	4619      	mov	r1, r3
 8019aac:	6878      	ldr	r0, [r7, #4]
 8019aae:	f7f8 f95b 	bl	8011d68 <pbuf_remove_header>
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d006      	beq.n	8019ac6 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019ab8:	4b37      	ldr	r3, [pc, #220]	; (8019b98 <icmp_input+0x230>)
 8019aba:	22c7      	movs	r2, #199	; 0xc7
 8019abc:	4939      	ldr	r1, [pc, #228]	; (8019ba4 <icmp_input+0x23c>)
 8019abe:	4838      	ldr	r0, [pc, #224]	; (8019ba0 <icmp_input+0x238>)
 8019ac0:	f001 fe0c 	bl	801b6dc <iprintf>
          goto icmperr;
 8019ac4:	e05c      	b.n	8019b80 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	685b      	ldr	r3, [r3, #4]
 8019aca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019acc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019ace:	4619      	mov	r1, r3
 8019ad0:	6878      	ldr	r0, [r7, #4]
 8019ad2:	f7f8 f939 	bl	8011d48 <pbuf_add_header>
 8019ad6:	4603      	mov	r3, r0
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d13c      	bne.n	8019b56 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	685b      	ldr	r3, [r3, #4]
 8019ae0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8019ae2:	69fb      	ldr	r3, [r7, #28]
 8019ae4:	681a      	ldr	r2, [r3, #0]
 8019ae6:	68fb      	ldr	r3, [r7, #12]
 8019ae8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019aea:	4b29      	ldr	r3, [pc, #164]	; (8019b90 <icmp_input+0x228>)
 8019aec:	691a      	ldr	r2, [r3, #16]
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	2200      	movs	r2, #0
 8019af6:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019af8:	693b      	ldr	r3, [r7, #16]
 8019afa:	885b      	ldrh	r3, [r3, #2]
 8019afc:	b29b      	uxth	r3, r3
 8019afe:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019b02:	4293      	cmp	r3, r2
 8019b04:	d907      	bls.n	8019b16 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8019b06:	693b      	ldr	r3, [r7, #16]
 8019b08:	885b      	ldrh	r3, [r3, #2]
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	3309      	adds	r3, #9
 8019b0e:	b29a      	uxth	r2, r3
 8019b10:	693b      	ldr	r3, [r7, #16]
 8019b12:	805a      	strh	r2, [r3, #2]
 8019b14:	e006      	b.n	8019b24 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8019b16:	693b      	ldr	r3, [r7, #16]
 8019b18:	885b      	ldrh	r3, [r3, #2]
 8019b1a:	b29b      	uxth	r3, r3
 8019b1c:	3308      	adds	r3, #8
 8019b1e:	b29a      	uxth	r2, r3
 8019b20:	693b      	ldr	r3, [r7, #16]
 8019b22:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8019b24:	68fb      	ldr	r3, [r7, #12]
 8019b26:	22ff      	movs	r2, #255	; 0xff
 8019b28:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	2200      	movs	r2, #0
 8019b2e:	729a      	strb	r2, [r3, #10]
 8019b30:	2200      	movs	r2, #0
 8019b32:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8019b34:	683b      	ldr	r3, [r7, #0]
 8019b36:	9302      	str	r3, [sp, #8]
 8019b38:	2301      	movs	r3, #1
 8019b3a:	9301      	str	r3, [sp, #4]
 8019b3c:	2300      	movs	r3, #0
 8019b3e:	9300      	str	r3, [sp, #0]
 8019b40:	23ff      	movs	r3, #255	; 0xff
 8019b42:	2200      	movs	r2, #0
 8019b44:	69f9      	ldr	r1, [r7, #28]
 8019b46:	6878      	ldr	r0, [r7, #4]
 8019b48:	f000 fa80 	bl	801a04c <ip4_output_if>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8019b50:	e001      	b.n	8019b56 <icmp_input+0x1ee>
      break;
 8019b52:	bf00      	nop
 8019b54:	e000      	b.n	8019b58 <icmp_input+0x1f0>
      break;
 8019b56:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8019b58:	6878      	ldr	r0, [r7, #4]
 8019b5a:	f7f8 f98b 	bl	8011e74 <pbuf_free>
  return;
 8019b5e:	e013      	b.n	8019b88 <icmp_input+0x220>
    goto lenerr;
 8019b60:	bf00      	nop
 8019b62:	e002      	b.n	8019b6a <icmp_input+0x202>
    goto lenerr;
 8019b64:	bf00      	nop
 8019b66:	e000      	b.n	8019b6a <icmp_input+0x202>
        goto lenerr;
 8019b68:	bf00      	nop
lenerr:
  pbuf_free(p);
 8019b6a:	6878      	ldr	r0, [r7, #4]
 8019b6c:	f7f8 f982 	bl	8011e74 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019b70:	e00a      	b.n	8019b88 <icmp_input+0x220>
        goto icmperr;
 8019b72:	bf00      	nop
 8019b74:	e004      	b.n	8019b80 <icmp_input+0x218>
        goto icmperr;
 8019b76:	bf00      	nop
 8019b78:	e002      	b.n	8019b80 <icmp_input+0x218>
          goto icmperr;
 8019b7a:	bf00      	nop
 8019b7c:	e000      	b.n	8019b80 <icmp_input+0x218>
          goto icmperr;
 8019b7e:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8019b80:	6878      	ldr	r0, [r7, #4]
 8019b82:	f7f8 f977 	bl	8011e74 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8019b86:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019b88:	3728      	adds	r7, #40	; 0x28
 8019b8a:	46bd      	mov	sp, r7
 8019b8c:	bd80      	pop	{r7, pc}
 8019b8e:	bf00      	nop
 8019b90:	2400521c 	.word	0x2400521c
 8019b94:	24005230 	.word	0x24005230
 8019b98:	0801eeb8 	.word	0x0801eeb8
 8019b9c:	0801eef0 	.word	0x0801eef0
 8019ba0:	0801ef28 	.word	0x0801ef28
 8019ba4:	0801ef50 	.word	0x0801ef50

08019ba8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b082      	sub	sp, #8
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	6078      	str	r0, [r7, #4]
 8019bb0:	460b      	mov	r3, r1
 8019bb2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8019bb4:	78fb      	ldrb	r3, [r7, #3]
 8019bb6:	461a      	mov	r2, r3
 8019bb8:	2103      	movs	r1, #3
 8019bba:	6878      	ldr	r0, [r7, #4]
 8019bbc:	f000 f814 	bl	8019be8 <icmp_send_response>
}
 8019bc0:	bf00      	nop
 8019bc2:	3708      	adds	r7, #8
 8019bc4:	46bd      	mov	sp, r7
 8019bc6:	bd80      	pop	{r7, pc}

08019bc8 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019bc8:	b580      	push	{r7, lr}
 8019bca:	b082      	sub	sp, #8
 8019bcc:	af00      	add	r7, sp, #0
 8019bce:	6078      	str	r0, [r7, #4]
 8019bd0:	460b      	mov	r3, r1
 8019bd2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8019bd4:	78fb      	ldrb	r3, [r7, #3]
 8019bd6:	461a      	mov	r2, r3
 8019bd8:	210b      	movs	r1, #11
 8019bda:	6878      	ldr	r0, [r7, #4]
 8019bdc:	f000 f804 	bl	8019be8 <icmp_send_response>
}
 8019be0:	bf00      	nop
 8019be2:	3708      	adds	r7, #8
 8019be4:	46bd      	mov	sp, r7
 8019be6:	bd80      	pop	{r7, pc}

08019be8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019be8:	b580      	push	{r7, lr}
 8019bea:	b08c      	sub	sp, #48	; 0x30
 8019bec:	af04      	add	r7, sp, #16
 8019bee:	6078      	str	r0, [r7, #4]
 8019bf0:	460b      	mov	r3, r1
 8019bf2:	70fb      	strb	r3, [r7, #3]
 8019bf4:	4613      	mov	r3, r2
 8019bf6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019bf8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019bfc:	2124      	movs	r1, #36	; 0x24
 8019bfe:	2022      	movs	r0, #34	; 0x22
 8019c00:	f7f7 fe54 	bl	80118ac <pbuf_alloc>
 8019c04:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8019c06:	69fb      	ldr	r3, [r7, #28]
 8019c08:	2b00      	cmp	r3, #0
 8019c0a:	d056      	beq.n	8019cba <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019c0c:	69fb      	ldr	r3, [r7, #28]
 8019c0e:	895b      	ldrh	r3, [r3, #10]
 8019c10:	2b23      	cmp	r3, #35	; 0x23
 8019c12:	d806      	bhi.n	8019c22 <icmp_send_response+0x3a>
 8019c14:	4b2b      	ldr	r3, [pc, #172]	; (8019cc4 <icmp_send_response+0xdc>)
 8019c16:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019c1a:	492b      	ldr	r1, [pc, #172]	; (8019cc8 <icmp_send_response+0xe0>)
 8019c1c:	482b      	ldr	r0, [pc, #172]	; (8019ccc <icmp_send_response+0xe4>)
 8019c1e:	f001 fd5d 	bl	801b6dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	685b      	ldr	r3, [r3, #4]
 8019c26:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8019c28:	69fb      	ldr	r3, [r7, #28]
 8019c2a:	685b      	ldr	r3, [r3, #4]
 8019c2c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8019c2e:	697b      	ldr	r3, [r7, #20]
 8019c30:	78fa      	ldrb	r2, [r7, #3]
 8019c32:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	78ba      	ldrb	r2, [r7, #2]
 8019c38:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8019c3a:	697b      	ldr	r3, [r7, #20]
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	711a      	strb	r2, [r3, #4]
 8019c40:	2200      	movs	r2, #0
 8019c42:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8019c44:	697b      	ldr	r3, [r7, #20]
 8019c46:	2200      	movs	r2, #0
 8019c48:	719a      	strb	r2, [r3, #6]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8019c4e:	69fb      	ldr	r3, [r7, #28]
 8019c50:	685b      	ldr	r3, [r3, #4]
 8019c52:	f103 0008 	add.w	r0, r3, #8
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	685b      	ldr	r3, [r3, #4]
 8019c5a:	221c      	movs	r2, #28
 8019c5c:	4619      	mov	r1, r3
 8019c5e:	f001 fccc 	bl	801b5fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8019c62:	69bb      	ldr	r3, [r7, #24]
 8019c64:	68db      	ldr	r3, [r3, #12]
 8019c66:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8019c68:	f107 030c 	add.w	r3, r7, #12
 8019c6c:	4618      	mov	r0, r3
 8019c6e:	f000 f82f 	bl	8019cd0 <ip4_route>
 8019c72:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8019c74:	693b      	ldr	r3, [r7, #16]
 8019c76:	2b00      	cmp	r3, #0
 8019c78:	d01b      	beq.n	8019cb2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8019c7a:	697b      	ldr	r3, [r7, #20]
 8019c7c:	2200      	movs	r2, #0
 8019c7e:	709a      	strb	r2, [r3, #2]
 8019c80:	2200      	movs	r2, #0
 8019c82:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8019c84:	69fb      	ldr	r3, [r7, #28]
 8019c86:	895b      	ldrh	r3, [r3, #10]
 8019c88:	4619      	mov	r1, r3
 8019c8a:	6978      	ldr	r0, [r7, #20]
 8019c8c:	f7f6 fcd3 	bl	8010636 <inet_chksum>
 8019c90:	4603      	mov	r3, r0
 8019c92:	461a      	mov	r2, r3
 8019c94:	697b      	ldr	r3, [r7, #20]
 8019c96:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019c98:	f107 020c 	add.w	r2, r7, #12
 8019c9c:	693b      	ldr	r3, [r7, #16]
 8019c9e:	9302      	str	r3, [sp, #8]
 8019ca0:	2301      	movs	r3, #1
 8019ca2:	9301      	str	r3, [sp, #4]
 8019ca4:	2300      	movs	r3, #0
 8019ca6:	9300      	str	r3, [sp, #0]
 8019ca8:	23ff      	movs	r3, #255	; 0xff
 8019caa:	2100      	movs	r1, #0
 8019cac:	69f8      	ldr	r0, [r7, #28]
 8019cae:	f000 f9cd 	bl	801a04c <ip4_output_if>
  }
  pbuf_free(q);
 8019cb2:	69f8      	ldr	r0, [r7, #28]
 8019cb4:	f7f8 f8de 	bl	8011e74 <pbuf_free>
 8019cb8:	e000      	b.n	8019cbc <icmp_send_response+0xd4>
    return;
 8019cba:	bf00      	nop
}
 8019cbc:	3720      	adds	r7, #32
 8019cbe:	46bd      	mov	sp, r7
 8019cc0:	bd80      	pop	{r7, pc}
 8019cc2:	bf00      	nop
 8019cc4:	0801eeb8 	.word	0x0801eeb8
 8019cc8:	0801ef84 	.word	0x0801ef84
 8019ccc:	0801ef28 	.word	0x0801ef28

08019cd0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019cd0:	b480      	push	{r7}
 8019cd2:	b085      	sub	sp, #20
 8019cd4:	af00      	add	r7, sp, #0
 8019cd6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019cd8:	4b33      	ldr	r3, [pc, #204]	; (8019da8 <ip4_route+0xd8>)
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	60fb      	str	r3, [r7, #12]
 8019cde:	e036      	b.n	8019d4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019ce6:	f003 0301 	and.w	r3, r3, #1
 8019cea:	b2db      	uxtb	r3, r3
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d02b      	beq.n	8019d48 <ip4_route+0x78>
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019cf6:	089b      	lsrs	r3, r3, #2
 8019cf8:	f003 0301 	and.w	r3, r3, #1
 8019cfc:	b2db      	uxtb	r3, r3
 8019cfe:	2b00      	cmp	r3, #0
 8019d00:	d022      	beq.n	8019d48 <ip4_route+0x78>
 8019d02:	68fb      	ldr	r3, [r7, #12]
 8019d04:	3304      	adds	r3, #4
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d01d      	beq.n	8019d48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	681a      	ldr	r2, [r3, #0]
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	3304      	adds	r3, #4
 8019d14:	681b      	ldr	r3, [r3, #0]
 8019d16:	405a      	eors	r2, r3
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	3308      	adds	r3, #8
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	4013      	ands	r3, r2
 8019d20:	2b00      	cmp	r3, #0
 8019d22:	d101      	bne.n	8019d28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8019d24:	68fb      	ldr	r3, [r7, #12]
 8019d26:	e038      	b.n	8019d9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019d2e:	f003 0302 	and.w	r3, r3, #2
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d108      	bne.n	8019d48 <ip4_route+0x78>
 8019d36:	687b      	ldr	r3, [r7, #4]
 8019d38:	681a      	ldr	r2, [r3, #0]
 8019d3a:	68fb      	ldr	r3, [r7, #12]
 8019d3c:	330c      	adds	r3, #12
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	429a      	cmp	r2, r3
 8019d42:	d101      	bne.n	8019d48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	e028      	b.n	8019d9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8019d48:	68fb      	ldr	r3, [r7, #12]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	60fb      	str	r3, [r7, #12]
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d1c5      	bne.n	8019ce0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019d54:	4b15      	ldr	r3, [pc, #84]	; (8019dac <ip4_route+0xdc>)
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d01a      	beq.n	8019d92 <ip4_route+0xc2>
 8019d5c:	4b13      	ldr	r3, [pc, #76]	; (8019dac <ip4_route+0xdc>)
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019d64:	f003 0301 	and.w	r3, r3, #1
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d012      	beq.n	8019d92 <ip4_route+0xc2>
 8019d6c:	4b0f      	ldr	r3, [pc, #60]	; (8019dac <ip4_route+0xdc>)
 8019d6e:	681b      	ldr	r3, [r3, #0]
 8019d70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019d74:	f003 0304 	and.w	r3, r3, #4
 8019d78:	2b00      	cmp	r3, #0
 8019d7a:	d00a      	beq.n	8019d92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019d7c:	4b0b      	ldr	r3, [pc, #44]	; (8019dac <ip4_route+0xdc>)
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	3304      	adds	r3, #4
 8019d82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d004      	beq.n	8019d92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	b2db      	uxtb	r3, r3
 8019d8e:	2b7f      	cmp	r3, #127	; 0x7f
 8019d90:	d101      	bne.n	8019d96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8019d92:	2300      	movs	r3, #0
 8019d94:	e001      	b.n	8019d9a <ip4_route+0xca>
  }

  return netif_default;
 8019d96:	4b05      	ldr	r3, [pc, #20]	; (8019dac <ip4_route+0xdc>)
 8019d98:	681b      	ldr	r3, [r3, #0]
}
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	3714      	adds	r7, #20
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019da4:	4770      	bx	lr
 8019da6:	bf00      	nop
 8019da8:	240082cc 	.word	0x240082cc
 8019dac:	240082d0 	.word	0x240082d0

08019db0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b082      	sub	sp, #8
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019dbe:	f003 0301 	and.w	r3, r3, #1
 8019dc2:	b2db      	uxtb	r3, r3
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d016      	beq.n	8019df6 <ip4_input_accept+0x46>
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	3304      	adds	r3, #4
 8019dcc:	681b      	ldr	r3, [r3, #0]
 8019dce:	2b00      	cmp	r3, #0
 8019dd0:	d011      	beq.n	8019df6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019dd2:	4b0b      	ldr	r3, [pc, #44]	; (8019e00 <ip4_input_accept+0x50>)
 8019dd4:	695a      	ldr	r2, [r3, #20]
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	3304      	adds	r3, #4
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	429a      	cmp	r2, r3
 8019dde:	d008      	beq.n	8019df2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019de0:	4b07      	ldr	r3, [pc, #28]	; (8019e00 <ip4_input_accept+0x50>)
 8019de2:	695b      	ldr	r3, [r3, #20]
 8019de4:	6879      	ldr	r1, [r7, #4]
 8019de6:	4618      	mov	r0, r3
 8019de8:	f000 fa08 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 8019dec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d001      	beq.n	8019df6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8019df2:	2301      	movs	r3, #1
 8019df4:	e000      	b.n	8019df8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8019df6:	2300      	movs	r3, #0
}
 8019df8:	4618      	mov	r0, r3
 8019dfa:	3708      	adds	r7, #8
 8019dfc:	46bd      	mov	sp, r7
 8019dfe:	bd80      	pop	{r7, pc}
 8019e00:	2400521c 	.word	0x2400521c

08019e04 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8019e04:	b580      	push	{r7, lr}
 8019e06:	b086      	sub	sp, #24
 8019e08:	af00      	add	r7, sp, #0
 8019e0a:	6078      	str	r0, [r7, #4]
 8019e0c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	685b      	ldr	r3, [r3, #4]
 8019e12:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8019e14:	697b      	ldr	r3, [r7, #20]
 8019e16:	781b      	ldrb	r3, [r3, #0]
 8019e18:	091b      	lsrs	r3, r3, #4
 8019e1a:	b2db      	uxtb	r3, r3
 8019e1c:	2b04      	cmp	r3, #4
 8019e1e:	d004      	beq.n	8019e2a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019e20:	6878      	ldr	r0, [r7, #4]
 8019e22:	f7f8 f827 	bl	8011e74 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8019e26:	2300      	movs	r3, #0
 8019e28:	e107      	b.n	801a03a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8019e2a:	697b      	ldr	r3, [r7, #20]
 8019e2c:	781b      	ldrb	r3, [r3, #0]
 8019e2e:	f003 030f 	and.w	r3, r3, #15
 8019e32:	b2db      	uxtb	r3, r3
 8019e34:	009b      	lsls	r3, r3, #2
 8019e36:	b2db      	uxtb	r3, r3
 8019e38:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8019e3a:	697b      	ldr	r3, [r7, #20]
 8019e3c:	885b      	ldrh	r3, [r3, #2]
 8019e3e:	b29b      	uxth	r3, r3
 8019e40:	4618      	mov	r0, r3
 8019e42:	f7f6 fb6d 	bl	8010520 <lwip_htons>
 8019e46:	4603      	mov	r3, r0
 8019e48:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	891b      	ldrh	r3, [r3, #8]
 8019e4e:	89ba      	ldrh	r2, [r7, #12]
 8019e50:	429a      	cmp	r2, r3
 8019e52:	d204      	bcs.n	8019e5e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8019e54:	89bb      	ldrh	r3, [r7, #12]
 8019e56:	4619      	mov	r1, r3
 8019e58:	6878      	ldr	r0, [r7, #4]
 8019e5a:	f7f7 fe85 	bl	8011b68 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	895b      	ldrh	r3, [r3, #10]
 8019e62:	89fa      	ldrh	r2, [r7, #14]
 8019e64:	429a      	cmp	r2, r3
 8019e66:	d807      	bhi.n	8019e78 <ip4_input+0x74>
 8019e68:	687b      	ldr	r3, [r7, #4]
 8019e6a:	891b      	ldrh	r3, [r3, #8]
 8019e6c:	89ba      	ldrh	r2, [r7, #12]
 8019e6e:	429a      	cmp	r2, r3
 8019e70:	d802      	bhi.n	8019e78 <ip4_input+0x74>
 8019e72:	89fb      	ldrh	r3, [r7, #14]
 8019e74:	2b13      	cmp	r3, #19
 8019e76:	d804      	bhi.n	8019e82 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8019e78:	6878      	ldr	r0, [r7, #4]
 8019e7a:	f7f7 fffb 	bl	8011e74 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8019e7e:	2300      	movs	r3, #0
 8019e80:	e0db      	b.n	801a03a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8019e82:	697b      	ldr	r3, [r7, #20]
 8019e84:	691b      	ldr	r3, [r3, #16]
 8019e86:	4a6f      	ldr	r2, [pc, #444]	; (801a044 <ip4_input+0x240>)
 8019e88:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019e8a:	697b      	ldr	r3, [r7, #20]
 8019e8c:	68db      	ldr	r3, [r3, #12]
 8019e8e:	4a6d      	ldr	r2, [pc, #436]	; (801a044 <ip4_input+0x240>)
 8019e90:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019e92:	4b6c      	ldr	r3, [pc, #432]	; (801a044 <ip4_input+0x240>)
 8019e94:	695b      	ldr	r3, [r3, #20]
 8019e96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019e9a:	2be0      	cmp	r3, #224	; 0xe0
 8019e9c:	d112      	bne.n	8019ec4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019e9e:	683b      	ldr	r3, [r7, #0]
 8019ea0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019ea4:	f003 0301 	and.w	r3, r3, #1
 8019ea8:	b2db      	uxtb	r3, r3
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d007      	beq.n	8019ebe <ip4_input+0xba>
 8019eae:	683b      	ldr	r3, [r7, #0]
 8019eb0:	3304      	adds	r3, #4
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d002      	beq.n	8019ebe <ip4_input+0xba>
      netif = inp;
 8019eb8:	683b      	ldr	r3, [r7, #0]
 8019eba:	613b      	str	r3, [r7, #16]
 8019ebc:	e02a      	b.n	8019f14 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	613b      	str	r3, [r7, #16]
 8019ec2:	e027      	b.n	8019f14 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8019ec4:	6838      	ldr	r0, [r7, #0]
 8019ec6:	f7ff ff73 	bl	8019db0 <ip4_input_accept>
 8019eca:	4603      	mov	r3, r0
 8019ecc:	2b00      	cmp	r3, #0
 8019ece:	d002      	beq.n	8019ed6 <ip4_input+0xd2>
      netif = inp;
 8019ed0:	683b      	ldr	r3, [r7, #0]
 8019ed2:	613b      	str	r3, [r7, #16]
 8019ed4:	e01e      	b.n	8019f14 <ip4_input+0x110>
    } else {
      netif = NULL;
 8019ed6:	2300      	movs	r3, #0
 8019ed8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019eda:	4b5a      	ldr	r3, [pc, #360]	; (801a044 <ip4_input+0x240>)
 8019edc:	695b      	ldr	r3, [r3, #20]
 8019ede:	b2db      	uxtb	r3, r3
 8019ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8019ee2:	d017      	beq.n	8019f14 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8019ee4:	4b58      	ldr	r3, [pc, #352]	; (801a048 <ip4_input+0x244>)
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	613b      	str	r3, [r7, #16]
 8019eea:	e00e      	b.n	8019f0a <ip4_input+0x106>
          if (netif == inp) {
 8019eec:	693a      	ldr	r2, [r7, #16]
 8019eee:	683b      	ldr	r3, [r7, #0]
 8019ef0:	429a      	cmp	r2, r3
 8019ef2:	d006      	beq.n	8019f02 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8019ef4:	6938      	ldr	r0, [r7, #16]
 8019ef6:	f7ff ff5b 	bl	8019db0 <ip4_input_accept>
 8019efa:	4603      	mov	r3, r0
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d108      	bne.n	8019f12 <ip4_input+0x10e>
 8019f00:	e000      	b.n	8019f04 <ip4_input+0x100>
            continue;
 8019f02:	bf00      	nop
        NETIF_FOREACH(netif) {
 8019f04:	693b      	ldr	r3, [r7, #16]
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	613b      	str	r3, [r7, #16]
 8019f0a:	693b      	ldr	r3, [r7, #16]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d1ed      	bne.n	8019eec <ip4_input+0xe8>
 8019f10:	e000      	b.n	8019f14 <ip4_input+0x110>
            break;
 8019f12:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019f14:	4b4b      	ldr	r3, [pc, #300]	; (801a044 <ip4_input+0x240>)
 8019f16:	691b      	ldr	r3, [r3, #16]
 8019f18:	6839      	ldr	r1, [r7, #0]
 8019f1a:	4618      	mov	r0, r3
 8019f1c:	f000 f96e 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 8019f20:	4603      	mov	r3, r0
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d105      	bne.n	8019f32 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8019f26:	4b47      	ldr	r3, [pc, #284]	; (801a044 <ip4_input+0x240>)
 8019f28:	691b      	ldr	r3, [r3, #16]
 8019f2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8019f2e:	2be0      	cmp	r3, #224	; 0xe0
 8019f30:	d104      	bne.n	8019f3c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8019f32:	6878      	ldr	r0, [r7, #4]
 8019f34:	f7f7 ff9e 	bl	8011e74 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8019f38:	2300      	movs	r3, #0
 8019f3a:	e07e      	b.n	801a03a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8019f3c:	693b      	ldr	r3, [r7, #16]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d104      	bne.n	8019f4c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8019f42:	6878      	ldr	r0, [r7, #4]
 8019f44:	f7f7 ff96 	bl	8011e74 <pbuf_free>
    return ERR_OK;
 8019f48:	2300      	movs	r3, #0
 8019f4a:	e076      	b.n	801a03a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8019f4c:	697b      	ldr	r3, [r7, #20]
 8019f4e:	88db      	ldrh	r3, [r3, #6]
 8019f50:	b29b      	uxth	r3, r3
 8019f52:	461a      	mov	r2, r3
 8019f54:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8019f58:	4013      	ands	r3, r2
 8019f5a:	2b00      	cmp	r3, #0
 8019f5c:	d00b      	beq.n	8019f76 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8019f5e:	6878      	ldr	r0, [r7, #4]
 8019f60:	f000 fd24 	bl	801a9ac <ip4_reass>
 8019f64:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	2b00      	cmp	r3, #0
 8019f6a:	d101      	bne.n	8019f70 <ip4_input+0x16c>
      return ERR_OK;
 8019f6c:	2300      	movs	r3, #0
 8019f6e:	e064      	b.n	801a03a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	685b      	ldr	r3, [r3, #4]
 8019f74:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8019f76:	4a33      	ldr	r2, [pc, #204]	; (801a044 <ip4_input+0x240>)
 8019f78:	693b      	ldr	r3, [r7, #16]
 8019f7a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8019f7c:	4a31      	ldr	r2, [pc, #196]	; (801a044 <ip4_input+0x240>)
 8019f7e:	683b      	ldr	r3, [r7, #0]
 8019f80:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8019f82:	4a30      	ldr	r2, [pc, #192]	; (801a044 <ip4_input+0x240>)
 8019f84:	697b      	ldr	r3, [r7, #20]
 8019f86:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019f88:	697b      	ldr	r3, [r7, #20]
 8019f8a:	781b      	ldrb	r3, [r3, #0]
 8019f8c:	f003 030f 	and.w	r3, r3, #15
 8019f90:	b2db      	uxtb	r3, r3
 8019f92:	009b      	lsls	r3, r3, #2
 8019f94:	b2db      	uxtb	r3, r3
 8019f96:	b29a      	uxth	r2, r3
 8019f98:	4b2a      	ldr	r3, [pc, #168]	; (801a044 <ip4_input+0x240>)
 8019f9a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019f9c:	89fb      	ldrh	r3, [r7, #14]
 8019f9e:	4619      	mov	r1, r3
 8019fa0:	6878      	ldr	r0, [r7, #4]
 8019fa2:	f7f7 fee1 	bl	8011d68 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8019fa6:	697b      	ldr	r3, [r7, #20]
 8019fa8:	7a5b      	ldrb	r3, [r3, #9]
 8019faa:	2b11      	cmp	r3, #17
 8019fac:	d006      	beq.n	8019fbc <ip4_input+0x1b8>
 8019fae:	2b11      	cmp	r3, #17
 8019fb0:	dc13      	bgt.n	8019fda <ip4_input+0x1d6>
 8019fb2:	2b01      	cmp	r3, #1
 8019fb4:	d00c      	beq.n	8019fd0 <ip4_input+0x1cc>
 8019fb6:	2b06      	cmp	r3, #6
 8019fb8:	d005      	beq.n	8019fc6 <ip4_input+0x1c2>
 8019fba:	e00e      	b.n	8019fda <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019fbc:	6839      	ldr	r1, [r7, #0]
 8019fbe:	6878      	ldr	r0, [r7, #4]
 8019fc0:	f7fe fc42 	bl	8018848 <udp_input>
        break;
 8019fc4:	e026      	b.n	801a014 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8019fc6:	6839      	ldr	r1, [r7, #0]
 8019fc8:	6878      	ldr	r0, [r7, #4]
 8019fca:	f7fa f837 	bl	801403c <tcp_input>
        break;
 8019fce:	e021      	b.n	801a014 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019fd0:	6839      	ldr	r1, [r7, #0]
 8019fd2:	6878      	ldr	r0, [r7, #4]
 8019fd4:	f7ff fcc8 	bl	8019968 <icmp_input>
        break;
 8019fd8:	e01c      	b.n	801a014 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019fda:	4b1a      	ldr	r3, [pc, #104]	; (801a044 <ip4_input+0x240>)
 8019fdc:	695b      	ldr	r3, [r3, #20]
 8019fde:	6939      	ldr	r1, [r7, #16]
 8019fe0:	4618      	mov	r0, r3
 8019fe2:	f000 f90b 	bl	801a1fc <ip4_addr_isbroadcast_u32>
 8019fe6:	4603      	mov	r3, r0
 8019fe8:	2b00      	cmp	r3, #0
 8019fea:	d10f      	bne.n	801a00c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019fec:	4b15      	ldr	r3, [pc, #84]	; (801a044 <ip4_input+0x240>)
 8019fee:	695b      	ldr	r3, [r3, #20]
 8019ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019ff4:	2be0      	cmp	r3, #224	; 0xe0
 8019ff6:	d009      	beq.n	801a00c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019ff8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019ffc:	4619      	mov	r1, r3
 8019ffe:	6878      	ldr	r0, [r7, #4]
 801a000:	f7f7 ff25 	bl	8011e4e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801a004:	2102      	movs	r1, #2
 801a006:	6878      	ldr	r0, [r7, #4]
 801a008:	f7ff fdce 	bl	8019ba8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801a00c:	6878      	ldr	r0, [r7, #4]
 801a00e:	f7f7 ff31 	bl	8011e74 <pbuf_free>
        break;
 801a012:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801a014:	4b0b      	ldr	r3, [pc, #44]	; (801a044 <ip4_input+0x240>)
 801a016:	2200      	movs	r2, #0
 801a018:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801a01a:	4b0a      	ldr	r3, [pc, #40]	; (801a044 <ip4_input+0x240>)
 801a01c:	2200      	movs	r2, #0
 801a01e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801a020:	4b08      	ldr	r3, [pc, #32]	; (801a044 <ip4_input+0x240>)
 801a022:	2200      	movs	r2, #0
 801a024:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801a026:	4b07      	ldr	r3, [pc, #28]	; (801a044 <ip4_input+0x240>)
 801a028:	2200      	movs	r2, #0
 801a02a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801a02c:	4b05      	ldr	r3, [pc, #20]	; (801a044 <ip4_input+0x240>)
 801a02e:	2200      	movs	r2, #0
 801a030:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801a032:	4b04      	ldr	r3, [pc, #16]	; (801a044 <ip4_input+0x240>)
 801a034:	2200      	movs	r2, #0
 801a036:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801a038:	2300      	movs	r3, #0
}
 801a03a:	4618      	mov	r0, r3
 801a03c:	3718      	adds	r7, #24
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}
 801a042:	bf00      	nop
 801a044:	2400521c 	.word	0x2400521c
 801a048:	240082cc 	.word	0x240082cc

0801a04c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801a04c:	b580      	push	{r7, lr}
 801a04e:	b08a      	sub	sp, #40	; 0x28
 801a050:	af04      	add	r7, sp, #16
 801a052:	60f8      	str	r0, [r7, #12]
 801a054:	60b9      	str	r1, [r7, #8]
 801a056:	607a      	str	r2, [r7, #4]
 801a058:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801a05a:	68bb      	ldr	r3, [r7, #8]
 801a05c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2b00      	cmp	r3, #0
 801a062:	d009      	beq.n	801a078 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	2b00      	cmp	r3, #0
 801a068:	d003      	beq.n	801a072 <ip4_output_if+0x26>
 801a06a:	68bb      	ldr	r3, [r7, #8]
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d102      	bne.n	801a078 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801a072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a074:	3304      	adds	r3, #4
 801a076:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801a078:	78fa      	ldrb	r2, [r7, #3]
 801a07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a07c:	9302      	str	r3, [sp, #8]
 801a07e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801a082:	9301      	str	r3, [sp, #4]
 801a084:	f897 3020 	ldrb.w	r3, [r7, #32]
 801a088:	9300      	str	r3, [sp, #0]
 801a08a:	4613      	mov	r3, r2
 801a08c:	687a      	ldr	r2, [r7, #4]
 801a08e:	6979      	ldr	r1, [r7, #20]
 801a090:	68f8      	ldr	r0, [r7, #12]
 801a092:	f000 f805 	bl	801a0a0 <ip4_output_if_src>
 801a096:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801a098:	4618      	mov	r0, r3
 801a09a:	3718      	adds	r7, #24
 801a09c:	46bd      	mov	sp, r7
 801a09e:	bd80      	pop	{r7, pc}

0801a0a0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801a0a0:	b580      	push	{r7, lr}
 801a0a2:	b088      	sub	sp, #32
 801a0a4:	af00      	add	r7, sp, #0
 801a0a6:	60f8      	str	r0, [r7, #12]
 801a0a8:	60b9      	str	r1, [r7, #8]
 801a0aa:	607a      	str	r2, [r7, #4]
 801a0ac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	7b9b      	ldrb	r3, [r3, #14]
 801a0b2:	2b01      	cmp	r3, #1
 801a0b4:	d006      	beq.n	801a0c4 <ip4_output_if_src+0x24>
 801a0b6:	4b4b      	ldr	r3, [pc, #300]	; (801a1e4 <ip4_output_if_src+0x144>)
 801a0b8:	f44f 7255 	mov.w	r2, #852	; 0x354
 801a0bc:	494a      	ldr	r1, [pc, #296]	; (801a1e8 <ip4_output_if_src+0x148>)
 801a0be:	484b      	ldr	r0, [pc, #300]	; (801a1ec <ip4_output_if_src+0x14c>)
 801a0c0:	f001 fb0c 	bl	801b6dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d060      	beq.n	801a18c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801a0ca:	2314      	movs	r3, #20
 801a0cc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801a0ce:	2114      	movs	r1, #20
 801a0d0:	68f8      	ldr	r0, [r7, #12]
 801a0d2:	f7f7 fe39 	bl	8011d48 <pbuf_add_header>
 801a0d6:	4603      	mov	r3, r0
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d002      	beq.n	801a0e2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a0dc:	f06f 0301 	mvn.w	r3, #1
 801a0e0:	e07c      	b.n	801a1dc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	685b      	ldr	r3, [r3, #4]
 801a0e6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801a0e8:	68fb      	ldr	r3, [r7, #12]
 801a0ea:	895b      	ldrh	r3, [r3, #10]
 801a0ec:	2b13      	cmp	r3, #19
 801a0ee:	d806      	bhi.n	801a0fe <ip4_output_if_src+0x5e>
 801a0f0:	4b3c      	ldr	r3, [pc, #240]	; (801a1e4 <ip4_output_if_src+0x144>)
 801a0f2:	f44f 7262 	mov.w	r2, #904	; 0x388
 801a0f6:	493e      	ldr	r1, [pc, #248]	; (801a1f0 <ip4_output_if_src+0x150>)
 801a0f8:	483c      	ldr	r0, [pc, #240]	; (801a1ec <ip4_output_if_src+0x14c>)
 801a0fa:	f001 faef 	bl	801b6dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801a0fe:	69fb      	ldr	r3, [r7, #28]
 801a100:	78fa      	ldrb	r2, [r7, #3]
 801a102:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801a104:	69fb      	ldr	r3, [r7, #28]
 801a106:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801a10a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	681a      	ldr	r2, [r3, #0]
 801a110:	69fb      	ldr	r3, [r7, #28]
 801a112:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801a114:	8b7b      	ldrh	r3, [r7, #26]
 801a116:	089b      	lsrs	r3, r3, #2
 801a118:	b29b      	uxth	r3, r3
 801a11a:	b2db      	uxtb	r3, r3
 801a11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a120:	b2da      	uxtb	r2, r3
 801a122:	69fb      	ldr	r3, [r7, #28]
 801a124:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801a126:	69fb      	ldr	r3, [r7, #28]
 801a128:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801a12c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	891b      	ldrh	r3, [r3, #8]
 801a132:	4618      	mov	r0, r3
 801a134:	f7f6 f9f4 	bl	8010520 <lwip_htons>
 801a138:	4603      	mov	r3, r0
 801a13a:	461a      	mov	r2, r3
 801a13c:	69fb      	ldr	r3, [r7, #28]
 801a13e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801a140:	69fb      	ldr	r3, [r7, #28]
 801a142:	2200      	movs	r2, #0
 801a144:	719a      	strb	r2, [r3, #6]
 801a146:	2200      	movs	r2, #0
 801a148:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801a14a:	4b2a      	ldr	r3, [pc, #168]	; (801a1f4 <ip4_output_if_src+0x154>)
 801a14c:	881b      	ldrh	r3, [r3, #0]
 801a14e:	4618      	mov	r0, r3
 801a150:	f7f6 f9e6 	bl	8010520 <lwip_htons>
 801a154:	4603      	mov	r3, r0
 801a156:	461a      	mov	r2, r3
 801a158:	69fb      	ldr	r3, [r7, #28]
 801a15a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801a15c:	4b25      	ldr	r3, [pc, #148]	; (801a1f4 <ip4_output_if_src+0x154>)
 801a15e:	881b      	ldrh	r3, [r3, #0]
 801a160:	3301      	adds	r3, #1
 801a162:	b29a      	uxth	r2, r3
 801a164:	4b23      	ldr	r3, [pc, #140]	; (801a1f4 <ip4_output_if_src+0x154>)
 801a166:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801a168:	68bb      	ldr	r3, [r7, #8]
 801a16a:	2b00      	cmp	r3, #0
 801a16c:	d104      	bne.n	801a178 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801a16e:	4b22      	ldr	r3, [pc, #136]	; (801a1f8 <ip4_output_if_src+0x158>)
 801a170:	681a      	ldr	r2, [r3, #0]
 801a172:	69fb      	ldr	r3, [r7, #28]
 801a174:	60da      	str	r2, [r3, #12]
 801a176:	e003      	b.n	801a180 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801a178:	68bb      	ldr	r3, [r7, #8]
 801a17a:	681a      	ldr	r2, [r3, #0]
 801a17c:	69fb      	ldr	r3, [r7, #28]
 801a17e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801a180:	69fb      	ldr	r3, [r7, #28]
 801a182:	2200      	movs	r2, #0
 801a184:	729a      	strb	r2, [r3, #10]
 801a186:	2200      	movs	r2, #0
 801a188:	72da      	strb	r2, [r3, #11]
 801a18a:	e00f      	b.n	801a1ac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801a18c:	68fb      	ldr	r3, [r7, #12]
 801a18e:	895b      	ldrh	r3, [r3, #10]
 801a190:	2b13      	cmp	r3, #19
 801a192:	d802      	bhi.n	801a19a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801a194:	f06f 0301 	mvn.w	r3, #1
 801a198:	e020      	b.n	801a1dc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801a19a:	68fb      	ldr	r3, [r7, #12]
 801a19c:	685b      	ldr	r3, [r3, #4]
 801a19e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801a1a0:	69fb      	ldr	r3, [r7, #28]
 801a1a2:	691b      	ldr	r3, [r3, #16]
 801a1a4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801a1a6:	f107 0314 	add.w	r3, r7, #20
 801a1aa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801a1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d00c      	beq.n	801a1ce <ip4_output_if_src+0x12e>
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	891a      	ldrh	r2, [r3, #8]
 801a1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a1bc:	429a      	cmp	r2, r3
 801a1be:	d906      	bls.n	801a1ce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801a1c0:	687a      	ldr	r2, [r7, #4]
 801a1c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a1c4:	68f8      	ldr	r0, [r7, #12]
 801a1c6:	f000 fddf 	bl	801ad88 <ip4_frag>
 801a1ca:	4603      	mov	r3, r0
 801a1cc:	e006      	b.n	801a1dc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1d0:	695b      	ldr	r3, [r3, #20]
 801a1d2:	687a      	ldr	r2, [r7, #4]
 801a1d4:	68f9      	ldr	r1, [r7, #12]
 801a1d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a1d8:	4798      	blx	r3
 801a1da:	4603      	mov	r3, r0
}
 801a1dc:	4618      	mov	r0, r3
 801a1de:	3720      	adds	r7, #32
 801a1e0:	46bd      	mov	sp, r7
 801a1e2:	bd80      	pop	{r7, pc}
 801a1e4:	0801efb0 	.word	0x0801efb0
 801a1e8:	0801efe4 	.word	0x0801efe4
 801a1ec:	0801eff0 	.word	0x0801eff0
 801a1f0:	0801f018 	.word	0x0801f018
 801a1f4:	24004c32 	.word	0x24004c32
 801a1f8:	0801fd20 	.word	0x0801fd20

0801a1fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801a1fc:	b480      	push	{r7}
 801a1fe:	b085      	sub	sp, #20
 801a200:	af00      	add	r7, sp, #0
 801a202:	6078      	str	r0, [r7, #4]
 801a204:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801a206:	687b      	ldr	r3, [r7, #4]
 801a208:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a210:	d002      	beq.n	801a218 <ip4_addr_isbroadcast_u32+0x1c>
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d101      	bne.n	801a21c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801a218:	2301      	movs	r3, #1
 801a21a:	e02a      	b.n	801a272 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801a21c:	683b      	ldr	r3, [r7, #0]
 801a21e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a222:	f003 0302 	and.w	r3, r3, #2
 801a226:	2b00      	cmp	r3, #0
 801a228:	d101      	bne.n	801a22e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801a22a:	2300      	movs	r3, #0
 801a22c:	e021      	b.n	801a272 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801a22e:	683b      	ldr	r3, [r7, #0]
 801a230:	3304      	adds	r3, #4
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	687a      	ldr	r2, [r7, #4]
 801a236:	429a      	cmp	r2, r3
 801a238:	d101      	bne.n	801a23e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801a23a:	2300      	movs	r3, #0
 801a23c:	e019      	b.n	801a272 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801a23e:	68fa      	ldr	r2, [r7, #12]
 801a240:	683b      	ldr	r3, [r7, #0]
 801a242:	3304      	adds	r3, #4
 801a244:	681b      	ldr	r3, [r3, #0]
 801a246:	405a      	eors	r2, r3
 801a248:	683b      	ldr	r3, [r7, #0]
 801a24a:	3308      	adds	r3, #8
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	4013      	ands	r3, r2
 801a250:	2b00      	cmp	r3, #0
 801a252:	d10d      	bne.n	801a270 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a254:	683b      	ldr	r3, [r7, #0]
 801a256:	3308      	adds	r3, #8
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	43da      	mvns	r2, r3
 801a25c:	687b      	ldr	r3, [r7, #4]
 801a25e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801a260:	683b      	ldr	r3, [r7, #0]
 801a262:	3308      	adds	r3, #8
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801a268:	429a      	cmp	r2, r3
 801a26a:	d101      	bne.n	801a270 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801a26c:	2301      	movs	r3, #1
 801a26e:	e000      	b.n	801a272 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801a270:	2300      	movs	r3, #0
  }
}
 801a272:	4618      	mov	r0, r3
 801a274:	3714      	adds	r7, #20
 801a276:	46bd      	mov	sp, r7
 801a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a27c:	4770      	bx	lr
	...

0801a280 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 801a280:	b580      	push	{r7, lr}
 801a282:	b082      	sub	sp, #8
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 801a288:	2210      	movs	r2, #16
 801a28a:	4904      	ldr	r1, [pc, #16]	; (801a29c <ip4addr_ntoa+0x1c>)
 801a28c:	6878      	ldr	r0, [r7, #4]
 801a28e:	f000 f807 	bl	801a2a0 <ip4addr_ntoa_r>
 801a292:	4603      	mov	r3, r0
}
 801a294:	4618      	mov	r0, r3
 801a296:	3708      	adds	r7, #8
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}
 801a29c:	24004c34 	.word	0x24004c34

0801a2a0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 801a2a0:	b480      	push	{r7}
 801a2a2:	b08d      	sub	sp, #52	; 0x34
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	60f8      	str	r0, [r7, #12]
 801a2a8:	60b9      	str	r1, [r7, #8]
 801a2aa:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 801a2ac:	2300      	movs	r3, #0
 801a2ae:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 801a2b0:	68fb      	ldr	r3, [r7, #12]
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801a2b6:	68bb      	ldr	r3, [r7, #8]
 801a2b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 801a2ba:	f107 0318 	add.w	r3, r7, #24
 801a2be:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801a2c0:	2300      	movs	r3, #0
 801a2c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a2c6:	e059      	b.n	801a37c <ip4addr_ntoa_r+0xdc>
    i = 0;
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801a2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2d0:	781a      	ldrb	r2, [r3, #0]
 801a2d2:	4b33      	ldr	r3, [pc, #204]	; (801a3a0 <ip4addr_ntoa_r+0x100>)
 801a2d4:	fba3 1302 	umull	r1, r3, r3, r2
 801a2d8:	08d9      	lsrs	r1, r3, #3
 801a2da:	460b      	mov	r3, r1
 801a2dc:	009b      	lsls	r3, r3, #2
 801a2de:	440b      	add	r3, r1
 801a2e0:	005b      	lsls	r3, r3, #1
 801a2e2:	1ad3      	subs	r3, r2, r3
 801a2e4:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801a2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2e8:	781b      	ldrb	r3, [r3, #0]
 801a2ea:	4a2d      	ldr	r2, [pc, #180]	; (801a3a0 <ip4addr_ntoa_r+0x100>)
 801a2ec:	fba2 2303 	umull	r2, r3, r2, r3
 801a2f0:	08db      	lsrs	r3, r3, #3
 801a2f2:	b2da      	uxtb	r2, r3
 801a2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a2f6:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 801a2f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a2fc:	1c5a      	adds	r2, r3, #1
 801a2fe:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801a302:	4619      	mov	r1, r3
 801a304:	7ffb      	ldrb	r3, [r7, #31]
 801a306:	3330      	adds	r3, #48	; 0x30
 801a308:	b2da      	uxtb	r2, r3
 801a30a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801a30e:	440b      	add	r3, r1
 801a310:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a316:	781b      	ldrb	r3, [r3, #0]
 801a318:	2b00      	cmp	r3, #0
 801a31a:	d1d8      	bne.n	801a2ce <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801a31c:	e012      	b.n	801a344 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801a31e:	6a3b      	ldr	r3, [r7, #32]
 801a320:	1c5a      	adds	r2, r3, #1
 801a322:	623a      	str	r2, [r7, #32]
 801a324:	687a      	ldr	r2, [r7, #4]
 801a326:	429a      	cmp	r2, r3
 801a328:	dc01      	bgt.n	801a32e <ip4addr_ntoa_r+0x8e>
        return NULL;
 801a32a:	2300      	movs	r3, #0
 801a32c:	e031      	b.n	801a392 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801a32e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a334:	1c59      	adds	r1, r3, #1
 801a336:	62f9      	str	r1, [r7, #44]	; 0x2c
 801a338:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801a33c:	440a      	add	r2, r1
 801a33e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 801a342:	701a      	strb	r2, [r3, #0]
    while (i--) {
 801a344:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a348:	1e5a      	subs	r2, r3, #1
 801a34a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d1e5      	bne.n	801a31e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 801a352:	6a3b      	ldr	r3, [r7, #32]
 801a354:	1c5a      	adds	r2, r3, #1
 801a356:	623a      	str	r2, [r7, #32]
 801a358:	687a      	ldr	r2, [r7, #4]
 801a35a:	429a      	cmp	r2, r3
 801a35c:	dc01      	bgt.n	801a362 <ip4addr_ntoa_r+0xc2>
      return NULL;
 801a35e:	2300      	movs	r3, #0
 801a360:	e017      	b.n	801a392 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 801a362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a364:	1c5a      	adds	r2, r3, #1
 801a366:	62fa      	str	r2, [r7, #44]	; 0x2c
 801a368:	222e      	movs	r2, #46	; 0x2e
 801a36a:	701a      	strb	r2, [r3, #0]
    ap++;
 801a36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a36e:	3301      	adds	r3, #1
 801a370:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 801a372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a376:	3301      	adds	r3, #1
 801a378:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a380:	2b03      	cmp	r3, #3
 801a382:	d9a1      	bls.n	801a2c8 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 801a384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a386:	3b01      	subs	r3, #1
 801a388:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a38a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a38c:	2200      	movs	r2, #0
 801a38e:	701a      	strb	r2, [r3, #0]
  return buf;
 801a390:	68bb      	ldr	r3, [r7, #8]
}
 801a392:	4618      	mov	r0, r3
 801a394:	3734      	adds	r7, #52	; 0x34
 801a396:	46bd      	mov	sp, r7
 801a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a39c:	4770      	bx	lr
 801a39e:	bf00      	nop
 801a3a0:	cccccccd 	.word	0xcccccccd

0801a3a4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801a3a4:	b580      	push	{r7, lr}
 801a3a6:	b084      	sub	sp, #16
 801a3a8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801a3aa:	2300      	movs	r3, #0
 801a3ac:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801a3ae:	4b12      	ldr	r3, [pc, #72]	; (801a3f8 <ip_reass_tmr+0x54>)
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801a3b4:	e018      	b.n	801a3e8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	7fdb      	ldrb	r3, [r3, #31]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d00b      	beq.n	801a3d6 <ip_reass_tmr+0x32>
      r->timer--;
 801a3be:	68fb      	ldr	r3, [r7, #12]
 801a3c0:	7fdb      	ldrb	r3, [r3, #31]
 801a3c2:	3b01      	subs	r3, #1
 801a3c4:	b2da      	uxtb	r2, r3
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801a3ca:	68fb      	ldr	r3, [r7, #12]
 801a3cc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	60fb      	str	r3, [r7, #12]
 801a3d4:	e008      	b.n	801a3e8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801a3e0:	68b9      	ldr	r1, [r7, #8]
 801a3e2:	6878      	ldr	r0, [r7, #4]
 801a3e4:	f000 f80a 	bl	801a3fc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d1e3      	bne.n	801a3b6 <ip_reass_tmr+0x12>
    }
  }
}
 801a3ee:	bf00      	nop
 801a3f0:	bf00      	nop
 801a3f2:	3710      	adds	r7, #16
 801a3f4:	46bd      	mov	sp, r7
 801a3f6:	bd80      	pop	{r7, pc}
 801a3f8:	24004c44 	.word	0x24004c44

0801a3fc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a3fc:	b580      	push	{r7, lr}
 801a3fe:	b088      	sub	sp, #32
 801a400:	af00      	add	r7, sp, #0
 801a402:	6078      	str	r0, [r7, #4]
 801a404:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801a406:	2300      	movs	r3, #0
 801a408:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801a40a:	683a      	ldr	r2, [r7, #0]
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	429a      	cmp	r2, r3
 801a410:	d105      	bne.n	801a41e <ip_reass_free_complete_datagram+0x22>
 801a412:	4b45      	ldr	r3, [pc, #276]	; (801a528 <ip_reass_free_complete_datagram+0x12c>)
 801a414:	22ab      	movs	r2, #171	; 0xab
 801a416:	4945      	ldr	r1, [pc, #276]	; (801a52c <ip_reass_free_complete_datagram+0x130>)
 801a418:	4845      	ldr	r0, [pc, #276]	; (801a530 <ip_reass_free_complete_datagram+0x134>)
 801a41a:	f001 f95f 	bl	801b6dc <iprintf>
  if (prev != NULL) {
 801a41e:	683b      	ldr	r3, [r7, #0]
 801a420:	2b00      	cmp	r3, #0
 801a422:	d00a      	beq.n	801a43a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801a424:	683b      	ldr	r3, [r7, #0]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	687a      	ldr	r2, [r7, #4]
 801a42a:	429a      	cmp	r2, r3
 801a42c:	d005      	beq.n	801a43a <ip_reass_free_complete_datagram+0x3e>
 801a42e:	4b3e      	ldr	r3, [pc, #248]	; (801a528 <ip_reass_free_complete_datagram+0x12c>)
 801a430:	22ad      	movs	r2, #173	; 0xad
 801a432:	4940      	ldr	r1, [pc, #256]	; (801a534 <ip_reass_free_complete_datagram+0x138>)
 801a434:	483e      	ldr	r0, [pc, #248]	; (801a530 <ip_reass_free_complete_datagram+0x134>)
 801a436:	f001 f951 	bl	801b6dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	685b      	ldr	r3, [r3, #4]
 801a43e:	685b      	ldr	r3, [r3, #4]
 801a440:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801a442:	697b      	ldr	r3, [r7, #20]
 801a444:	889b      	ldrh	r3, [r3, #4]
 801a446:	b29b      	uxth	r3, r3
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d12a      	bne.n	801a4a2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	685b      	ldr	r3, [r3, #4]
 801a450:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801a452:	697b      	ldr	r3, [r7, #20]
 801a454:	681a      	ldr	r2, [r3, #0]
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801a45a:	69bb      	ldr	r3, [r7, #24]
 801a45c:	6858      	ldr	r0, [r3, #4]
 801a45e:	687b      	ldr	r3, [r7, #4]
 801a460:	3308      	adds	r3, #8
 801a462:	2214      	movs	r2, #20
 801a464:	4619      	mov	r1, r3
 801a466:	f001 f8c8 	bl	801b5fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801a46a:	2101      	movs	r1, #1
 801a46c:	69b8      	ldr	r0, [r7, #24]
 801a46e:	f7ff fbab 	bl	8019bc8 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801a472:	69b8      	ldr	r0, [r7, #24]
 801a474:	f7f7 fd8c 	bl	8011f90 <pbuf_clen>
 801a478:	4603      	mov	r3, r0
 801a47a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a47c:	8bfa      	ldrh	r2, [r7, #30]
 801a47e:	8a7b      	ldrh	r3, [r7, #18]
 801a480:	4413      	add	r3, r2
 801a482:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a486:	db05      	blt.n	801a494 <ip_reass_free_complete_datagram+0x98>
 801a488:	4b27      	ldr	r3, [pc, #156]	; (801a528 <ip_reass_free_complete_datagram+0x12c>)
 801a48a:	22bc      	movs	r2, #188	; 0xbc
 801a48c:	492a      	ldr	r1, [pc, #168]	; (801a538 <ip_reass_free_complete_datagram+0x13c>)
 801a48e:	4828      	ldr	r0, [pc, #160]	; (801a530 <ip_reass_free_complete_datagram+0x134>)
 801a490:	f001 f924 	bl	801b6dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a494:	8bfa      	ldrh	r2, [r7, #30]
 801a496:	8a7b      	ldrh	r3, [r7, #18]
 801a498:	4413      	add	r3, r2
 801a49a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801a49c:	69b8      	ldr	r0, [r7, #24]
 801a49e:	f7f7 fce9 	bl	8011e74 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	685b      	ldr	r3, [r3, #4]
 801a4a6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801a4a8:	e01f      	b.n	801a4ea <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801a4aa:	69bb      	ldr	r3, [r7, #24]
 801a4ac:	685b      	ldr	r3, [r3, #4]
 801a4ae:	617b      	str	r3, [r7, #20]
    pcur = p;
 801a4b0:	69bb      	ldr	r3, [r7, #24]
 801a4b2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801a4b4:	697b      	ldr	r3, [r7, #20]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801a4ba:	68f8      	ldr	r0, [r7, #12]
 801a4bc:	f7f7 fd68 	bl	8011f90 <pbuf_clen>
 801a4c0:	4603      	mov	r3, r0
 801a4c2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801a4c4:	8bfa      	ldrh	r2, [r7, #30]
 801a4c6:	8a7b      	ldrh	r3, [r7, #18]
 801a4c8:	4413      	add	r3, r2
 801a4ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a4ce:	db05      	blt.n	801a4dc <ip_reass_free_complete_datagram+0xe0>
 801a4d0:	4b15      	ldr	r3, [pc, #84]	; (801a528 <ip_reass_free_complete_datagram+0x12c>)
 801a4d2:	22cc      	movs	r2, #204	; 0xcc
 801a4d4:	4918      	ldr	r1, [pc, #96]	; (801a538 <ip_reass_free_complete_datagram+0x13c>)
 801a4d6:	4816      	ldr	r0, [pc, #88]	; (801a530 <ip_reass_free_complete_datagram+0x134>)
 801a4d8:	f001 f900 	bl	801b6dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801a4dc:	8bfa      	ldrh	r2, [r7, #30]
 801a4de:	8a7b      	ldrh	r3, [r7, #18]
 801a4e0:	4413      	add	r3, r2
 801a4e2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801a4e4:	68f8      	ldr	r0, [r7, #12]
 801a4e6:	f7f7 fcc5 	bl	8011e74 <pbuf_free>
  while (p != NULL) {
 801a4ea:	69bb      	ldr	r3, [r7, #24]
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d1dc      	bne.n	801a4aa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801a4f0:	6839      	ldr	r1, [r7, #0]
 801a4f2:	6878      	ldr	r0, [r7, #4]
 801a4f4:	f000 f8c2 	bl	801a67c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801a4f8:	4b10      	ldr	r3, [pc, #64]	; (801a53c <ip_reass_free_complete_datagram+0x140>)
 801a4fa:	881b      	ldrh	r3, [r3, #0]
 801a4fc:	8bfa      	ldrh	r2, [r7, #30]
 801a4fe:	429a      	cmp	r2, r3
 801a500:	d905      	bls.n	801a50e <ip_reass_free_complete_datagram+0x112>
 801a502:	4b09      	ldr	r3, [pc, #36]	; (801a528 <ip_reass_free_complete_datagram+0x12c>)
 801a504:	22d2      	movs	r2, #210	; 0xd2
 801a506:	490e      	ldr	r1, [pc, #56]	; (801a540 <ip_reass_free_complete_datagram+0x144>)
 801a508:	4809      	ldr	r0, [pc, #36]	; (801a530 <ip_reass_free_complete_datagram+0x134>)
 801a50a:	f001 f8e7 	bl	801b6dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801a50e:	4b0b      	ldr	r3, [pc, #44]	; (801a53c <ip_reass_free_complete_datagram+0x140>)
 801a510:	881a      	ldrh	r2, [r3, #0]
 801a512:	8bfb      	ldrh	r3, [r7, #30]
 801a514:	1ad3      	subs	r3, r2, r3
 801a516:	b29a      	uxth	r2, r3
 801a518:	4b08      	ldr	r3, [pc, #32]	; (801a53c <ip_reass_free_complete_datagram+0x140>)
 801a51a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801a51c:	8bfb      	ldrh	r3, [r7, #30]
}
 801a51e:	4618      	mov	r0, r3
 801a520:	3720      	adds	r7, #32
 801a522:	46bd      	mov	sp, r7
 801a524:	bd80      	pop	{r7, pc}
 801a526:	bf00      	nop
 801a528:	0801f048 	.word	0x0801f048
 801a52c:	0801f084 	.word	0x0801f084
 801a530:	0801f090 	.word	0x0801f090
 801a534:	0801f0b8 	.word	0x0801f0b8
 801a538:	0801f0cc 	.word	0x0801f0cc
 801a53c:	24004c48 	.word	0x24004c48
 801a540:	0801f0ec 	.word	0x0801f0ec

0801a544 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801a544:	b580      	push	{r7, lr}
 801a546:	b08a      	sub	sp, #40	; 0x28
 801a548:	af00      	add	r7, sp, #0
 801a54a:	6078      	str	r0, [r7, #4]
 801a54c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801a54e:	2300      	movs	r3, #0
 801a550:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801a552:	2300      	movs	r3, #0
 801a554:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801a556:	2300      	movs	r3, #0
 801a558:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801a55a:	2300      	movs	r3, #0
 801a55c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801a55e:	2300      	movs	r3, #0
 801a560:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801a562:	4b28      	ldr	r3, [pc, #160]	; (801a604 <ip_reass_remove_oldest_datagram+0xc0>)
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a568:	e030      	b.n	801a5cc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a56c:	695a      	ldr	r2, [r3, #20]
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	68db      	ldr	r3, [r3, #12]
 801a572:	429a      	cmp	r2, r3
 801a574:	d10c      	bne.n	801a590 <ip_reass_remove_oldest_datagram+0x4c>
 801a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a578:	699a      	ldr	r2, [r3, #24]
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	691b      	ldr	r3, [r3, #16]
 801a57e:	429a      	cmp	r2, r3
 801a580:	d106      	bne.n	801a590 <ip_reass_remove_oldest_datagram+0x4c>
 801a582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a584:	899a      	ldrh	r2, [r3, #12]
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	889b      	ldrh	r3, [r3, #4]
 801a58a:	b29b      	uxth	r3, r3
 801a58c:	429a      	cmp	r2, r3
 801a58e:	d014      	beq.n	801a5ba <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801a590:	693b      	ldr	r3, [r7, #16]
 801a592:	3301      	adds	r3, #1
 801a594:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801a596:	6a3b      	ldr	r3, [r7, #32]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d104      	bne.n	801a5a6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a59e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a5a0:	69fb      	ldr	r3, [r7, #28]
 801a5a2:	61bb      	str	r3, [r7, #24]
 801a5a4:	e009      	b.n	801a5ba <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801a5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5a8:	7fda      	ldrb	r2, [r3, #31]
 801a5aa:	6a3b      	ldr	r3, [r7, #32]
 801a5ac:	7fdb      	ldrb	r3, [r3, #31]
 801a5ae:	429a      	cmp	r2, r3
 801a5b0:	d803      	bhi.n	801a5ba <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801a5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5b4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801a5b6:	69fb      	ldr	r3, [r7, #28]
 801a5b8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801a5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5bc:	681b      	ldr	r3, [r3, #0]
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d001      	beq.n	801a5c6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801a5c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801a5cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d1cb      	bne.n	801a56a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801a5d2:	6a3b      	ldr	r3, [r7, #32]
 801a5d4:	2b00      	cmp	r3, #0
 801a5d6:	d008      	beq.n	801a5ea <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801a5d8:	69b9      	ldr	r1, [r7, #24]
 801a5da:	6a38      	ldr	r0, [r7, #32]
 801a5dc:	f7ff ff0e 	bl	801a3fc <ip_reass_free_complete_datagram>
 801a5e0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801a5e2:	697a      	ldr	r2, [r7, #20]
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	4413      	add	r3, r2
 801a5e8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801a5ea:	697a      	ldr	r2, [r7, #20]
 801a5ec:	683b      	ldr	r3, [r7, #0]
 801a5ee:	429a      	cmp	r2, r3
 801a5f0:	da02      	bge.n	801a5f8 <ip_reass_remove_oldest_datagram+0xb4>
 801a5f2:	693b      	ldr	r3, [r7, #16]
 801a5f4:	2b01      	cmp	r3, #1
 801a5f6:	dcac      	bgt.n	801a552 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801a5f8:	697b      	ldr	r3, [r7, #20]
}
 801a5fa:	4618      	mov	r0, r3
 801a5fc:	3728      	adds	r7, #40	; 0x28
 801a5fe:	46bd      	mov	sp, r7
 801a600:	bd80      	pop	{r7, pc}
 801a602:	bf00      	nop
 801a604:	24004c44 	.word	0x24004c44

0801a608 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b084      	sub	sp, #16
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	6078      	str	r0, [r7, #4]
 801a610:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a612:	2004      	movs	r0, #4
 801a614:	f7f6 fd14 	bl	8011040 <memp_malloc>
 801a618:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801a61a:	68fb      	ldr	r3, [r7, #12]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d110      	bne.n	801a642 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801a620:	6839      	ldr	r1, [r7, #0]
 801a622:	6878      	ldr	r0, [r7, #4]
 801a624:	f7ff ff8e 	bl	801a544 <ip_reass_remove_oldest_datagram>
 801a628:	4602      	mov	r2, r0
 801a62a:	683b      	ldr	r3, [r7, #0]
 801a62c:	4293      	cmp	r3, r2
 801a62e:	dc03      	bgt.n	801a638 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801a630:	2004      	movs	r0, #4
 801a632:	f7f6 fd05 	bl	8011040 <memp_malloc>
 801a636:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	2b00      	cmp	r3, #0
 801a63c:	d101      	bne.n	801a642 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801a63e:	2300      	movs	r3, #0
 801a640:	e016      	b.n	801a670 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801a642:	2220      	movs	r2, #32
 801a644:	2100      	movs	r1, #0
 801a646:	68f8      	ldr	r0, [r7, #12]
 801a648:	f000 ffe5 	bl	801b616 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801a64c:	68fb      	ldr	r3, [r7, #12]
 801a64e:	220f      	movs	r2, #15
 801a650:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801a652:	4b09      	ldr	r3, [pc, #36]	; (801a678 <ip_reass_enqueue_new_datagram+0x70>)
 801a654:	681a      	ldr	r2, [r3, #0]
 801a656:	68fb      	ldr	r3, [r7, #12]
 801a658:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801a65a:	4a07      	ldr	r2, [pc, #28]	; (801a678 <ip_reass_enqueue_new_datagram+0x70>)
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801a660:	68fb      	ldr	r3, [r7, #12]
 801a662:	3308      	adds	r3, #8
 801a664:	2214      	movs	r2, #20
 801a666:	6879      	ldr	r1, [r7, #4]
 801a668:	4618      	mov	r0, r3
 801a66a:	f000 ffc6 	bl	801b5fa <memcpy>
  return ipr;
 801a66e:	68fb      	ldr	r3, [r7, #12]
}
 801a670:	4618      	mov	r0, r3
 801a672:	3710      	adds	r7, #16
 801a674:	46bd      	mov	sp, r7
 801a676:	bd80      	pop	{r7, pc}
 801a678:	24004c44 	.word	0x24004c44

0801a67c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801a67c:	b580      	push	{r7, lr}
 801a67e:	b082      	sub	sp, #8
 801a680:	af00      	add	r7, sp, #0
 801a682:	6078      	str	r0, [r7, #4]
 801a684:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801a686:	4b10      	ldr	r3, [pc, #64]	; (801a6c8 <ip_reass_dequeue_datagram+0x4c>)
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	687a      	ldr	r2, [r7, #4]
 801a68c:	429a      	cmp	r2, r3
 801a68e:	d104      	bne.n	801a69a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	681b      	ldr	r3, [r3, #0]
 801a694:	4a0c      	ldr	r2, [pc, #48]	; (801a6c8 <ip_reass_dequeue_datagram+0x4c>)
 801a696:	6013      	str	r3, [r2, #0]
 801a698:	e00d      	b.n	801a6b6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801a69a:	683b      	ldr	r3, [r7, #0]
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	d106      	bne.n	801a6ae <ip_reass_dequeue_datagram+0x32>
 801a6a0:	4b0a      	ldr	r3, [pc, #40]	; (801a6cc <ip_reass_dequeue_datagram+0x50>)
 801a6a2:	f240 1245 	movw	r2, #325	; 0x145
 801a6a6:	490a      	ldr	r1, [pc, #40]	; (801a6d0 <ip_reass_dequeue_datagram+0x54>)
 801a6a8:	480a      	ldr	r0, [pc, #40]	; (801a6d4 <ip_reass_dequeue_datagram+0x58>)
 801a6aa:	f001 f817 	bl	801b6dc <iprintf>
    prev->next = ipr->next;
 801a6ae:	687b      	ldr	r3, [r7, #4]
 801a6b0:	681a      	ldr	r2, [r3, #0]
 801a6b2:	683b      	ldr	r3, [r7, #0]
 801a6b4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801a6b6:	6879      	ldr	r1, [r7, #4]
 801a6b8:	2004      	movs	r0, #4
 801a6ba:	f7f6 fd37 	bl	801112c <memp_free>
}
 801a6be:	bf00      	nop
 801a6c0:	3708      	adds	r7, #8
 801a6c2:	46bd      	mov	sp, r7
 801a6c4:	bd80      	pop	{r7, pc}
 801a6c6:	bf00      	nop
 801a6c8:	24004c44 	.word	0x24004c44
 801a6cc:	0801f048 	.word	0x0801f048
 801a6d0:	0801f110 	.word	0x0801f110
 801a6d4:	0801f090 	.word	0x0801f090

0801a6d8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801a6d8:	b580      	push	{r7, lr}
 801a6da:	b08c      	sub	sp, #48	; 0x30
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	60f8      	str	r0, [r7, #12]
 801a6e0:	60b9      	str	r1, [r7, #8]
 801a6e2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801a6e4:	2300      	movs	r3, #0
 801a6e6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801a6e8:	2301      	movs	r3, #1
 801a6ea:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801a6ec:	68bb      	ldr	r3, [r7, #8]
 801a6ee:	685b      	ldr	r3, [r3, #4]
 801a6f0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a6f2:	69fb      	ldr	r3, [r7, #28]
 801a6f4:	885b      	ldrh	r3, [r3, #2]
 801a6f6:	b29b      	uxth	r3, r3
 801a6f8:	4618      	mov	r0, r3
 801a6fa:	f7f5 ff11 	bl	8010520 <lwip_htons>
 801a6fe:	4603      	mov	r3, r0
 801a700:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801a702:	69fb      	ldr	r3, [r7, #28]
 801a704:	781b      	ldrb	r3, [r3, #0]
 801a706:	f003 030f 	and.w	r3, r3, #15
 801a70a:	b2db      	uxtb	r3, r3
 801a70c:	009b      	lsls	r3, r3, #2
 801a70e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801a710:	7e7b      	ldrb	r3, [r7, #25]
 801a712:	b29b      	uxth	r3, r3
 801a714:	8b7a      	ldrh	r2, [r7, #26]
 801a716:	429a      	cmp	r2, r3
 801a718:	d202      	bcs.n	801a720 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a71a:	f04f 33ff 	mov.w	r3, #4294967295
 801a71e:	e135      	b.n	801a98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801a720:	7e7b      	ldrb	r3, [r7, #25]
 801a722:	b29b      	uxth	r3, r3
 801a724:	8b7a      	ldrh	r2, [r7, #26]
 801a726:	1ad3      	subs	r3, r2, r3
 801a728:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801a72a:	69fb      	ldr	r3, [r7, #28]
 801a72c:	88db      	ldrh	r3, [r3, #6]
 801a72e:	b29b      	uxth	r3, r3
 801a730:	4618      	mov	r0, r3
 801a732:	f7f5 fef5 	bl	8010520 <lwip_htons>
 801a736:	4603      	mov	r3, r0
 801a738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a73c:	b29b      	uxth	r3, r3
 801a73e:	00db      	lsls	r3, r3, #3
 801a740:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801a742:	68bb      	ldr	r3, [r7, #8]
 801a744:	685b      	ldr	r3, [r3, #4]
 801a746:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801a748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a74a:	2200      	movs	r2, #0
 801a74c:	701a      	strb	r2, [r3, #0]
 801a74e:	2200      	movs	r2, #0
 801a750:	705a      	strb	r2, [r3, #1]
 801a752:	2200      	movs	r2, #0
 801a754:	709a      	strb	r2, [r3, #2]
 801a756:	2200      	movs	r2, #0
 801a758:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801a75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a75c:	8afa      	ldrh	r2, [r7, #22]
 801a75e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801a760:	8afa      	ldrh	r2, [r7, #22]
 801a762:	8b7b      	ldrh	r3, [r7, #26]
 801a764:	4413      	add	r3, r2
 801a766:	b29a      	uxth	r2, r3
 801a768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a76a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801a76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a76e:	88db      	ldrh	r3, [r3, #6]
 801a770:	b29b      	uxth	r3, r3
 801a772:	8afa      	ldrh	r2, [r7, #22]
 801a774:	429a      	cmp	r2, r3
 801a776:	d902      	bls.n	801a77e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a778:	f04f 33ff 	mov.w	r3, #4294967295
 801a77c:	e106      	b.n	801a98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801a77e:	68fb      	ldr	r3, [r7, #12]
 801a780:	685b      	ldr	r3, [r3, #4]
 801a782:	627b      	str	r3, [r7, #36]	; 0x24
 801a784:	e068      	b.n	801a858 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801a786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a788:	685b      	ldr	r3, [r3, #4]
 801a78a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801a78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a78e:	889b      	ldrh	r3, [r3, #4]
 801a790:	b29a      	uxth	r2, r3
 801a792:	693b      	ldr	r3, [r7, #16]
 801a794:	889b      	ldrh	r3, [r3, #4]
 801a796:	b29b      	uxth	r3, r3
 801a798:	429a      	cmp	r2, r3
 801a79a:	d235      	bcs.n	801a808 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801a79c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a79e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a7a0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801a7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7a4:	2b00      	cmp	r3, #0
 801a7a6:	d020      	beq.n	801a7ea <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801a7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7aa:	889b      	ldrh	r3, [r3, #4]
 801a7ac:	b29a      	uxth	r2, r3
 801a7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7b0:	88db      	ldrh	r3, [r3, #6]
 801a7b2:	b29b      	uxth	r3, r3
 801a7b4:	429a      	cmp	r2, r3
 801a7b6:	d307      	bcc.n	801a7c8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801a7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ba:	88db      	ldrh	r3, [r3, #6]
 801a7bc:	b29a      	uxth	r2, r3
 801a7be:	693b      	ldr	r3, [r7, #16]
 801a7c0:	889b      	ldrh	r3, [r3, #4]
 801a7c2:	b29b      	uxth	r3, r3
 801a7c4:	429a      	cmp	r2, r3
 801a7c6:	d902      	bls.n	801a7ce <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a7c8:	f04f 33ff 	mov.w	r3, #4294967295
 801a7cc:	e0de      	b.n	801a98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801a7ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d0:	68ba      	ldr	r2, [r7, #8]
 801a7d2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801a7d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a7d6:	88db      	ldrh	r3, [r3, #6]
 801a7d8:	b29a      	uxth	r2, r3
 801a7da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7dc:	889b      	ldrh	r3, [r3, #4]
 801a7de:	b29b      	uxth	r3, r3
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	d03d      	beq.n	801a860 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a7e4:	2300      	movs	r3, #0
 801a7e6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801a7e8:	e03a      	b.n	801a860 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a7ec:	88db      	ldrh	r3, [r3, #6]
 801a7ee:	b29a      	uxth	r2, r3
 801a7f0:	693b      	ldr	r3, [r7, #16]
 801a7f2:	889b      	ldrh	r3, [r3, #4]
 801a7f4:	b29b      	uxth	r3, r3
 801a7f6:	429a      	cmp	r2, r3
 801a7f8:	d902      	bls.n	801a800 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a7fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a7fe:	e0c5      	b.n	801a98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801a800:	68fb      	ldr	r3, [r7, #12]
 801a802:	68ba      	ldr	r2, [r7, #8]
 801a804:	605a      	str	r2, [r3, #4]
      break;
 801a806:	e02b      	b.n	801a860 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801a808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a80a:	889b      	ldrh	r3, [r3, #4]
 801a80c:	b29a      	uxth	r2, r3
 801a80e:	693b      	ldr	r3, [r7, #16]
 801a810:	889b      	ldrh	r3, [r3, #4]
 801a812:	b29b      	uxth	r3, r3
 801a814:	429a      	cmp	r2, r3
 801a816:	d102      	bne.n	801a81e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a818:	f04f 33ff 	mov.w	r3, #4294967295
 801a81c:	e0b6      	b.n	801a98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a820:	889b      	ldrh	r3, [r3, #4]
 801a822:	b29a      	uxth	r2, r3
 801a824:	693b      	ldr	r3, [r7, #16]
 801a826:	88db      	ldrh	r3, [r3, #6]
 801a828:	b29b      	uxth	r3, r3
 801a82a:	429a      	cmp	r2, r3
 801a82c:	d202      	bcs.n	801a834 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801a82e:	f04f 33ff 	mov.w	r3, #4294967295
 801a832:	e0ab      	b.n	801a98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801a834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a836:	2b00      	cmp	r3, #0
 801a838:	d009      	beq.n	801a84e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801a83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a83c:	88db      	ldrh	r3, [r3, #6]
 801a83e:	b29a      	uxth	r2, r3
 801a840:	693b      	ldr	r3, [r7, #16]
 801a842:	889b      	ldrh	r3, [r3, #4]
 801a844:	b29b      	uxth	r3, r3
 801a846:	429a      	cmp	r2, r3
 801a848:	d001      	beq.n	801a84e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801a84a:	2300      	movs	r3, #0
 801a84c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801a84e:	693b      	ldr	r3, [r7, #16]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801a854:	693b      	ldr	r3, [r7, #16]
 801a856:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801a858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a85a:	2b00      	cmp	r3, #0
 801a85c:	d193      	bne.n	801a786 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801a85e:	e000      	b.n	801a862 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801a860:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801a862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a864:	2b00      	cmp	r3, #0
 801a866:	d12d      	bne.n	801a8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801a868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a86a:	2b00      	cmp	r3, #0
 801a86c:	d01c      	beq.n	801a8a8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801a86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a870:	88db      	ldrh	r3, [r3, #6]
 801a872:	b29a      	uxth	r2, r3
 801a874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a876:	889b      	ldrh	r3, [r3, #4]
 801a878:	b29b      	uxth	r3, r3
 801a87a:	429a      	cmp	r2, r3
 801a87c:	d906      	bls.n	801a88c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801a87e:	4b45      	ldr	r3, [pc, #276]	; (801a994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a880:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801a884:	4944      	ldr	r1, [pc, #272]	; (801a998 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801a886:	4845      	ldr	r0, [pc, #276]	; (801a99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a888:	f000 ff28 	bl	801b6dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801a88c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a88e:	68ba      	ldr	r2, [r7, #8]
 801a890:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a894:	88db      	ldrh	r3, [r3, #6]
 801a896:	b29a      	uxth	r2, r3
 801a898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a89a:	889b      	ldrh	r3, [r3, #4]
 801a89c:	b29b      	uxth	r3, r3
 801a89e:	429a      	cmp	r2, r3
 801a8a0:	d010      	beq.n	801a8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801a8a2:	2300      	movs	r3, #0
 801a8a4:	623b      	str	r3, [r7, #32]
 801a8a6:	e00d      	b.n	801a8c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801a8a8:	68fb      	ldr	r3, [r7, #12]
 801a8aa:	685b      	ldr	r3, [r3, #4]
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	d006      	beq.n	801a8be <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801a8b0:	4b38      	ldr	r3, [pc, #224]	; (801a994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a8b2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801a8b6:	493a      	ldr	r1, [pc, #232]	; (801a9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801a8b8:	4838      	ldr	r0, [pc, #224]	; (801a99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a8ba:	f000 ff0f 	bl	801b6dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	68ba      	ldr	r2, [r7, #8]
 801a8c2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d105      	bne.n	801a8d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801a8ca:	68fb      	ldr	r3, [r7, #12]
 801a8cc:	7f9b      	ldrb	r3, [r3, #30]
 801a8ce:	f003 0301 	and.w	r3, r3, #1
 801a8d2:	2b00      	cmp	r3, #0
 801a8d4:	d059      	beq.n	801a98a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801a8d6:	6a3b      	ldr	r3, [r7, #32]
 801a8d8:	2b00      	cmp	r3, #0
 801a8da:	d04f      	beq.n	801a97c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801a8dc:	68fb      	ldr	r3, [r7, #12]
 801a8de:	685b      	ldr	r3, [r3, #4]
 801a8e0:	2b00      	cmp	r3, #0
 801a8e2:	d006      	beq.n	801a8f2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801a8e4:	68fb      	ldr	r3, [r7, #12]
 801a8e6:	685b      	ldr	r3, [r3, #4]
 801a8e8:	685b      	ldr	r3, [r3, #4]
 801a8ea:	889b      	ldrh	r3, [r3, #4]
 801a8ec:	b29b      	uxth	r3, r3
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d002      	beq.n	801a8f8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	623b      	str	r3, [r7, #32]
 801a8f6:	e041      	b.n	801a97c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801a8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8fa:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801a8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a902:	e012      	b.n	801a92a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801a904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a906:	685b      	ldr	r3, [r3, #4]
 801a908:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801a90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a90c:	88db      	ldrh	r3, [r3, #6]
 801a90e:	b29a      	uxth	r2, r3
 801a910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a912:	889b      	ldrh	r3, [r3, #4]
 801a914:	b29b      	uxth	r3, r3
 801a916:	429a      	cmp	r2, r3
 801a918:	d002      	beq.n	801a920 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801a91a:	2300      	movs	r3, #0
 801a91c:	623b      	str	r3, [r7, #32]
            break;
 801a91e:	e007      	b.n	801a930 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a922:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801a924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801a92a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d1e9      	bne.n	801a904 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801a930:	6a3b      	ldr	r3, [r7, #32]
 801a932:	2b00      	cmp	r3, #0
 801a934:	d022      	beq.n	801a97c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801a936:	68fb      	ldr	r3, [r7, #12]
 801a938:	685b      	ldr	r3, [r3, #4]
 801a93a:	2b00      	cmp	r3, #0
 801a93c:	d106      	bne.n	801a94c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801a93e:	4b15      	ldr	r3, [pc, #84]	; (801a994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a940:	f240 12df 	movw	r2, #479	; 0x1df
 801a944:	4917      	ldr	r1, [pc, #92]	; (801a9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a946:	4815      	ldr	r0, [pc, #84]	; (801a99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a948:	f000 fec8 	bl	801b6dc <iprintf>
          LWIP_ASSERT("sanity check",
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	685b      	ldr	r3, [r3, #4]
 801a950:	685b      	ldr	r3, [r3, #4]
 801a952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a954:	429a      	cmp	r2, r3
 801a956:	d106      	bne.n	801a966 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801a958:	4b0e      	ldr	r3, [pc, #56]	; (801a994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a95a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801a95e:	4911      	ldr	r1, [pc, #68]	; (801a9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801a960:	480e      	ldr	r0, [pc, #56]	; (801a99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a962:	f000 febb 	bl	801b6dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d006      	beq.n	801a97c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801a96e:	4b09      	ldr	r3, [pc, #36]	; (801a994 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801a970:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801a974:	490c      	ldr	r1, [pc, #48]	; (801a9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801a976:	4809      	ldr	r0, [pc, #36]	; (801a99c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801a978:	f000 feb0 	bl	801b6dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801a97c:	6a3b      	ldr	r3, [r7, #32]
 801a97e:	2b00      	cmp	r3, #0
 801a980:	bf14      	ite	ne
 801a982:	2301      	movne	r3, #1
 801a984:	2300      	moveq	r3, #0
 801a986:	b2db      	uxtb	r3, r3
 801a988:	e000      	b.n	801a98c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801a98a:	2300      	movs	r3, #0
}
 801a98c:	4618      	mov	r0, r3
 801a98e:	3730      	adds	r7, #48	; 0x30
 801a990:	46bd      	mov	sp, r7
 801a992:	bd80      	pop	{r7, pc}
 801a994:	0801f048 	.word	0x0801f048
 801a998:	0801f12c 	.word	0x0801f12c
 801a99c:	0801f090 	.word	0x0801f090
 801a9a0:	0801f14c 	.word	0x0801f14c
 801a9a4:	0801f184 	.word	0x0801f184
 801a9a8:	0801f194 	.word	0x0801f194

0801a9ac <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a9ac:	b580      	push	{r7, lr}
 801a9ae:	b08e      	sub	sp, #56	; 0x38
 801a9b0:	af00      	add	r7, sp, #0
 801a9b2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	685b      	ldr	r3, [r3, #4]
 801a9b8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a9ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9bc:	781b      	ldrb	r3, [r3, #0]
 801a9be:	f003 030f 	and.w	r3, r3, #15
 801a9c2:	b2db      	uxtb	r3, r3
 801a9c4:	009b      	lsls	r3, r3, #2
 801a9c6:	b2db      	uxtb	r3, r3
 801a9c8:	2b14      	cmp	r3, #20
 801a9ca:	f040 8167 	bne.w	801ac9c <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9d0:	88db      	ldrh	r3, [r3, #6]
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	4618      	mov	r0, r3
 801a9d6:	f7f5 fda3 	bl	8010520 <lwip_htons>
 801a9da:	4603      	mov	r3, r0
 801a9dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a9e0:	b29b      	uxth	r3, r3
 801a9e2:	00db      	lsls	r3, r3, #3
 801a9e4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9e8:	885b      	ldrh	r3, [r3, #2]
 801a9ea:	b29b      	uxth	r3, r3
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	f7f5 fd97 	bl	8010520 <lwip_htons>
 801a9f2:	4603      	mov	r3, r0
 801a9f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a9f8:	781b      	ldrb	r3, [r3, #0]
 801a9fa:	f003 030f 	and.w	r3, r3, #15
 801a9fe:	b2db      	uxtb	r3, r3
 801aa00:	009b      	lsls	r3, r3, #2
 801aa02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801aa06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aa0a:	b29b      	uxth	r3, r3
 801aa0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aa0e:	429a      	cmp	r2, r3
 801aa10:	f0c0 8146 	bcc.w	801aca0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801aa14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801aa18:	b29b      	uxth	r3, r3
 801aa1a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801aa1c:	1ad3      	subs	r3, r2, r3
 801aa1e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801aa20:	6878      	ldr	r0, [r7, #4]
 801aa22:	f7f7 fab5 	bl	8011f90 <pbuf_clen>
 801aa26:	4603      	mov	r3, r0
 801aa28:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801aa2a:	4b9f      	ldr	r3, [pc, #636]	; (801aca8 <ip4_reass+0x2fc>)
 801aa2c:	881b      	ldrh	r3, [r3, #0]
 801aa2e:	461a      	mov	r2, r3
 801aa30:	8c3b      	ldrh	r3, [r7, #32]
 801aa32:	4413      	add	r3, r2
 801aa34:	2b0a      	cmp	r3, #10
 801aa36:	dd10      	ble.n	801aa5a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801aa38:	8c3b      	ldrh	r3, [r7, #32]
 801aa3a:	4619      	mov	r1, r3
 801aa3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aa3e:	f7ff fd81 	bl	801a544 <ip_reass_remove_oldest_datagram>
 801aa42:	4603      	mov	r3, r0
 801aa44:	2b00      	cmp	r3, #0
 801aa46:	f000 812d 	beq.w	801aca4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801aa4a:	4b97      	ldr	r3, [pc, #604]	; (801aca8 <ip4_reass+0x2fc>)
 801aa4c:	881b      	ldrh	r3, [r3, #0]
 801aa4e:	461a      	mov	r2, r3
 801aa50:	8c3b      	ldrh	r3, [r7, #32]
 801aa52:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801aa54:	2b0a      	cmp	r3, #10
 801aa56:	f300 8125 	bgt.w	801aca4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801aa5a:	4b94      	ldr	r3, [pc, #592]	; (801acac <ip4_reass+0x300>)
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	633b      	str	r3, [r7, #48]	; 0x30
 801aa60:	e015      	b.n	801aa8e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801aa62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa64:	695a      	ldr	r2, [r3, #20]
 801aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa68:	68db      	ldr	r3, [r3, #12]
 801aa6a:	429a      	cmp	r2, r3
 801aa6c:	d10c      	bne.n	801aa88 <ip4_reass+0xdc>
 801aa6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa70:	699a      	ldr	r2, [r3, #24]
 801aa72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa74:	691b      	ldr	r3, [r3, #16]
 801aa76:	429a      	cmp	r2, r3
 801aa78:	d106      	bne.n	801aa88 <ip4_reass+0xdc>
 801aa7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa7c:	899a      	ldrh	r2, [r3, #12]
 801aa7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aa80:	889b      	ldrh	r3, [r3, #4]
 801aa82:	b29b      	uxth	r3, r3
 801aa84:	429a      	cmp	r2, r3
 801aa86:	d006      	beq.n	801aa96 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801aa88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	633b      	str	r3, [r7, #48]	; 0x30
 801aa8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d1e6      	bne.n	801aa62 <ip4_reass+0xb6>
 801aa94:	e000      	b.n	801aa98 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801aa96:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801aa98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa9a:	2b00      	cmp	r3, #0
 801aa9c:	d109      	bne.n	801aab2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801aa9e:	8c3b      	ldrh	r3, [r7, #32]
 801aaa0:	4619      	mov	r1, r3
 801aaa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801aaa4:	f7ff fdb0 	bl	801a608 <ip_reass_enqueue_new_datagram>
 801aaa8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801aaaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d11c      	bne.n	801aaea <ip4_reass+0x13e>
      goto nullreturn;
 801aab0:	e109      	b.n	801acc6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aab4:	88db      	ldrh	r3, [r3, #6]
 801aab6:	b29b      	uxth	r3, r3
 801aab8:	4618      	mov	r0, r3
 801aaba:	f7f5 fd31 	bl	8010520 <lwip_htons>
 801aabe:	4603      	mov	r3, r0
 801aac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801aac4:	2b00      	cmp	r3, #0
 801aac6:	d110      	bne.n	801aaea <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801aac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aaca:	89db      	ldrh	r3, [r3, #14]
 801aacc:	4618      	mov	r0, r3
 801aace:	f7f5 fd27 	bl	8010520 <lwip_htons>
 801aad2:	4603      	mov	r3, r0
 801aad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801aad8:	2b00      	cmp	r3, #0
 801aada:	d006      	beq.n	801aaea <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801aadc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aade:	3308      	adds	r3, #8
 801aae0:	2214      	movs	r2, #20
 801aae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801aae4:	4618      	mov	r0, r3
 801aae6:	f000 fd88 	bl	801b5fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aaec:	88db      	ldrh	r3, [r3, #6]
 801aaee:	b29b      	uxth	r3, r3
 801aaf0:	f003 0320 	and.w	r3, r3, #32
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	bf0c      	ite	eq
 801aaf8:	2301      	moveq	r3, #1
 801aafa:	2300      	movne	r3, #0
 801aafc:	b2db      	uxtb	r3, r3
 801aafe:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801ab00:	69fb      	ldr	r3, [r7, #28]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d00e      	beq.n	801ab24 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801ab06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ab08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ab0a:	4413      	add	r3, r2
 801ab0c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801ab0e:	8b7a      	ldrh	r2, [r7, #26]
 801ab10:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801ab12:	429a      	cmp	r2, r3
 801ab14:	f0c0 80a0 	bcc.w	801ac58 <ip4_reass+0x2ac>
 801ab18:	8b7b      	ldrh	r3, [r7, #26]
 801ab1a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801ab1e:	4293      	cmp	r3, r2
 801ab20:	f200 809a 	bhi.w	801ac58 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801ab24:	69fa      	ldr	r2, [r7, #28]
 801ab26:	6879      	ldr	r1, [r7, #4]
 801ab28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ab2a:	f7ff fdd5 	bl	801a6d8 <ip_reass_chain_frag_into_datagram_and_validate>
 801ab2e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801ab30:	697b      	ldr	r3, [r7, #20]
 801ab32:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab36:	f000 8091 	beq.w	801ac5c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801ab3a:	4b5b      	ldr	r3, [pc, #364]	; (801aca8 <ip4_reass+0x2fc>)
 801ab3c:	881a      	ldrh	r2, [r3, #0]
 801ab3e:	8c3b      	ldrh	r3, [r7, #32]
 801ab40:	4413      	add	r3, r2
 801ab42:	b29a      	uxth	r2, r3
 801ab44:	4b58      	ldr	r3, [pc, #352]	; (801aca8 <ip4_reass+0x2fc>)
 801ab46:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801ab48:	69fb      	ldr	r3, [r7, #28]
 801ab4a:	2b00      	cmp	r3, #0
 801ab4c:	d00d      	beq.n	801ab6a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801ab4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801ab50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ab52:	4413      	add	r3, r2
 801ab54:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801ab56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab58:	8a7a      	ldrh	r2, [r7, #18]
 801ab5a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801ab5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab5e:	7f9b      	ldrb	r3, [r3, #30]
 801ab60:	f043 0301 	orr.w	r3, r3, #1
 801ab64:	b2da      	uxtb	r2, r3
 801ab66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab68:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801ab6a:	697b      	ldr	r3, [r7, #20]
 801ab6c:	2b01      	cmp	r3, #1
 801ab6e:	d171      	bne.n	801ac54 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801ab70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab72:	8b9b      	ldrh	r3, [r3, #28]
 801ab74:	3314      	adds	r3, #20
 801ab76:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801ab78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab7a:	685b      	ldr	r3, [r3, #4]
 801ab7c:	685b      	ldr	r3, [r3, #4]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801ab82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab84:	685b      	ldr	r3, [r3, #4]
 801ab86:	685b      	ldr	r3, [r3, #4]
 801ab88:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801ab8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab8c:	3308      	adds	r3, #8
 801ab8e:	2214      	movs	r2, #20
 801ab90:	4619      	mov	r1, r3
 801ab92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ab94:	f000 fd31 	bl	801b5fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801ab98:	8a3b      	ldrh	r3, [r7, #16]
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	f7f5 fcc0 	bl	8010520 <lwip_htons>
 801aba0:	4603      	mov	r3, r0
 801aba2:	461a      	mov	r2, r3
 801aba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801aba6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abaa:	2200      	movs	r2, #0
 801abac:	719a      	strb	r2, [r3, #6]
 801abae:	2200      	movs	r2, #0
 801abb0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801abb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abb4:	2200      	movs	r2, #0
 801abb6:	729a      	strb	r2, [r3, #10]
 801abb8:	2200      	movs	r2, #0
 801abba:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801abbe:	685b      	ldr	r3, [r3, #4]
 801abc0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801abc2:	e00d      	b.n	801abe0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801abc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abc6:	685b      	ldr	r3, [r3, #4]
 801abc8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801abca:	2114      	movs	r1, #20
 801abcc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801abce:	f7f7 f8cb 	bl	8011d68 <pbuf_remove_header>
      pbuf_cat(p, r);
 801abd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801abd4:	6878      	ldr	r0, [r7, #4]
 801abd6:	f7f7 fa1b 	bl	8012010 <pbuf_cat>
      r = iprh->next_pbuf;
 801abda:	68fb      	ldr	r3, [r7, #12]
 801abdc:	681b      	ldr	r3, [r3, #0]
 801abde:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801abe0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801abe2:	2b00      	cmp	r3, #0
 801abe4:	d1ee      	bne.n	801abc4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801abe6:	4b31      	ldr	r3, [pc, #196]	; (801acac <ip4_reass+0x300>)
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801abec:	429a      	cmp	r2, r3
 801abee:	d102      	bne.n	801abf6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801abf0:	2300      	movs	r3, #0
 801abf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 801abf4:	e010      	b.n	801ac18 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801abf6:	4b2d      	ldr	r3, [pc, #180]	; (801acac <ip4_reass+0x300>)
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	62fb      	str	r3, [r7, #44]	; 0x2c
 801abfc:	e007      	b.n	801ac0e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801abfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac00:	681b      	ldr	r3, [r3, #0]
 801ac02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac04:	429a      	cmp	r2, r3
 801ac06:	d006      	beq.n	801ac16 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801ac08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ac0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d1f4      	bne.n	801abfe <ip4_reass+0x252>
 801ac14:	e000      	b.n	801ac18 <ip4_reass+0x26c>
          break;
 801ac16:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801ac18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801ac1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac1c:	f7ff fd2e 	bl	801a67c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801ac20:	6878      	ldr	r0, [r7, #4]
 801ac22:	f7f7 f9b5 	bl	8011f90 <pbuf_clen>
 801ac26:	4603      	mov	r3, r0
 801ac28:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801ac2a:	4b1f      	ldr	r3, [pc, #124]	; (801aca8 <ip4_reass+0x2fc>)
 801ac2c:	881b      	ldrh	r3, [r3, #0]
 801ac2e:	8c3a      	ldrh	r2, [r7, #32]
 801ac30:	429a      	cmp	r2, r3
 801ac32:	d906      	bls.n	801ac42 <ip4_reass+0x296>
 801ac34:	4b1e      	ldr	r3, [pc, #120]	; (801acb0 <ip4_reass+0x304>)
 801ac36:	f240 229b 	movw	r2, #667	; 0x29b
 801ac3a:	491e      	ldr	r1, [pc, #120]	; (801acb4 <ip4_reass+0x308>)
 801ac3c:	481e      	ldr	r0, [pc, #120]	; (801acb8 <ip4_reass+0x30c>)
 801ac3e:	f000 fd4d 	bl	801b6dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801ac42:	4b19      	ldr	r3, [pc, #100]	; (801aca8 <ip4_reass+0x2fc>)
 801ac44:	881a      	ldrh	r2, [r3, #0]
 801ac46:	8c3b      	ldrh	r3, [r7, #32]
 801ac48:	1ad3      	subs	r3, r2, r3
 801ac4a:	b29a      	uxth	r2, r3
 801ac4c:	4b16      	ldr	r3, [pc, #88]	; (801aca8 <ip4_reass+0x2fc>)
 801ac4e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801ac50:	687b      	ldr	r3, [r7, #4]
 801ac52:	e03c      	b.n	801acce <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801ac54:	2300      	movs	r3, #0
 801ac56:	e03a      	b.n	801acce <ip4_reass+0x322>
      goto nullreturn_ipr;
 801ac58:	bf00      	nop
 801ac5a:	e000      	b.n	801ac5e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801ac5c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac60:	2b00      	cmp	r3, #0
 801ac62:	d106      	bne.n	801ac72 <ip4_reass+0x2c6>
 801ac64:	4b12      	ldr	r3, [pc, #72]	; (801acb0 <ip4_reass+0x304>)
 801ac66:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801ac6a:	4914      	ldr	r1, [pc, #80]	; (801acbc <ip4_reass+0x310>)
 801ac6c:	4812      	ldr	r0, [pc, #72]	; (801acb8 <ip4_reass+0x30c>)
 801ac6e:	f000 fd35 	bl	801b6dc <iprintf>
  if (ipr->p == NULL) {
 801ac72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac74:	685b      	ldr	r3, [r3, #4]
 801ac76:	2b00      	cmp	r3, #0
 801ac78:	d124      	bne.n	801acc4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801ac7a:	4b0c      	ldr	r3, [pc, #48]	; (801acac <ip4_reass+0x300>)
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801ac80:	429a      	cmp	r2, r3
 801ac82:	d006      	beq.n	801ac92 <ip4_reass+0x2e6>
 801ac84:	4b0a      	ldr	r3, [pc, #40]	; (801acb0 <ip4_reass+0x304>)
 801ac86:	f240 22ab 	movw	r2, #683	; 0x2ab
 801ac8a:	490d      	ldr	r1, [pc, #52]	; (801acc0 <ip4_reass+0x314>)
 801ac8c:	480a      	ldr	r0, [pc, #40]	; (801acb8 <ip4_reass+0x30c>)
 801ac8e:	f000 fd25 	bl	801b6dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ac92:	2100      	movs	r1, #0
 801ac94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac96:	f7ff fcf1 	bl	801a67c <ip_reass_dequeue_datagram>
 801ac9a:	e014      	b.n	801acc6 <ip4_reass+0x31a>
    goto nullreturn;
 801ac9c:	bf00      	nop
 801ac9e:	e012      	b.n	801acc6 <ip4_reass+0x31a>
    goto nullreturn;
 801aca0:	bf00      	nop
 801aca2:	e010      	b.n	801acc6 <ip4_reass+0x31a>
      goto nullreturn;
 801aca4:	bf00      	nop
 801aca6:	e00e      	b.n	801acc6 <ip4_reass+0x31a>
 801aca8:	24004c48 	.word	0x24004c48
 801acac:	24004c44 	.word	0x24004c44
 801acb0:	0801f048 	.word	0x0801f048
 801acb4:	0801f1b8 	.word	0x0801f1b8
 801acb8:	0801f090 	.word	0x0801f090
 801acbc:	0801f1d4 	.word	0x0801f1d4
 801acc0:	0801f1e0 	.word	0x0801f1e0
  }

nullreturn:
 801acc4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801acc6:	6878      	ldr	r0, [r7, #4]
 801acc8:	f7f7 f8d4 	bl	8011e74 <pbuf_free>
  return NULL;
 801accc:	2300      	movs	r3, #0
}
 801acce:	4618      	mov	r0, r3
 801acd0:	3738      	adds	r7, #56	; 0x38
 801acd2:	46bd      	mov	sp, r7
 801acd4:	bd80      	pop	{r7, pc}
 801acd6:	bf00      	nop

0801acd8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801acdc:	2005      	movs	r0, #5
 801acde:	f7f6 f9af 	bl	8011040 <memp_malloc>
 801ace2:	4603      	mov	r3, r0
}
 801ace4:	4618      	mov	r0, r3
 801ace6:	bd80      	pop	{r7, pc}

0801ace8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b082      	sub	sp, #8
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801acf0:	687b      	ldr	r3, [r7, #4]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d106      	bne.n	801ad04 <ip_frag_free_pbuf_custom_ref+0x1c>
 801acf6:	4b07      	ldr	r3, [pc, #28]	; (801ad14 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801acf8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801acfc:	4906      	ldr	r1, [pc, #24]	; (801ad18 <ip_frag_free_pbuf_custom_ref+0x30>)
 801acfe:	4807      	ldr	r0, [pc, #28]	; (801ad1c <ip_frag_free_pbuf_custom_ref+0x34>)
 801ad00:	f000 fcec 	bl	801b6dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801ad04:	6879      	ldr	r1, [r7, #4]
 801ad06:	2005      	movs	r0, #5
 801ad08:	f7f6 fa10 	bl	801112c <memp_free>
}
 801ad0c:	bf00      	nop
 801ad0e:	3708      	adds	r7, #8
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bd80      	pop	{r7, pc}
 801ad14:	0801f048 	.word	0x0801f048
 801ad18:	0801f200 	.word	0x0801f200
 801ad1c:	0801f090 	.word	0x0801f090

0801ad20 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ad20:	b580      	push	{r7, lr}
 801ad22:	b084      	sub	sp, #16
 801ad24:	af00      	add	r7, sp, #0
 801ad26:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	2b00      	cmp	r3, #0
 801ad30:	d106      	bne.n	801ad40 <ipfrag_free_pbuf_custom+0x20>
 801ad32:	4b11      	ldr	r3, [pc, #68]	; (801ad78 <ipfrag_free_pbuf_custom+0x58>)
 801ad34:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ad38:	4910      	ldr	r1, [pc, #64]	; (801ad7c <ipfrag_free_pbuf_custom+0x5c>)
 801ad3a:	4811      	ldr	r0, [pc, #68]	; (801ad80 <ipfrag_free_pbuf_custom+0x60>)
 801ad3c:	f000 fcce 	bl	801b6dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ad40:	68fa      	ldr	r2, [r7, #12]
 801ad42:	687b      	ldr	r3, [r7, #4]
 801ad44:	429a      	cmp	r2, r3
 801ad46:	d006      	beq.n	801ad56 <ipfrag_free_pbuf_custom+0x36>
 801ad48:	4b0b      	ldr	r3, [pc, #44]	; (801ad78 <ipfrag_free_pbuf_custom+0x58>)
 801ad4a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ad4e:	490d      	ldr	r1, [pc, #52]	; (801ad84 <ipfrag_free_pbuf_custom+0x64>)
 801ad50:	480b      	ldr	r0, [pc, #44]	; (801ad80 <ipfrag_free_pbuf_custom+0x60>)
 801ad52:	f000 fcc3 	bl	801b6dc <iprintf>
  if (pcr->original != NULL) {
 801ad56:	68fb      	ldr	r3, [r7, #12]
 801ad58:	695b      	ldr	r3, [r3, #20]
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d004      	beq.n	801ad68 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ad5e:	68fb      	ldr	r3, [r7, #12]
 801ad60:	695b      	ldr	r3, [r3, #20]
 801ad62:	4618      	mov	r0, r3
 801ad64:	f7f7 f886 	bl	8011e74 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ad68:	68f8      	ldr	r0, [r7, #12]
 801ad6a:	f7ff ffbd 	bl	801ace8 <ip_frag_free_pbuf_custom_ref>
}
 801ad6e:	bf00      	nop
 801ad70:	3710      	adds	r7, #16
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}
 801ad76:	bf00      	nop
 801ad78:	0801f048 	.word	0x0801f048
 801ad7c:	0801f20c 	.word	0x0801f20c
 801ad80:	0801f090 	.word	0x0801f090
 801ad84:	0801f218 	.word	0x0801f218

0801ad88 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ad88:	b580      	push	{r7, lr}
 801ad8a:	b094      	sub	sp, #80	; 0x50
 801ad8c:	af02      	add	r7, sp, #8
 801ad8e:	60f8      	str	r0, [r7, #12]
 801ad90:	60b9      	str	r1, [r7, #8]
 801ad92:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ad94:	2300      	movs	r3, #0
 801ad96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ad9a:	68bb      	ldr	r3, [r7, #8]
 801ad9c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ad9e:	3b14      	subs	r3, #20
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	da00      	bge.n	801ada6 <ip4_frag+0x1e>
 801ada4:	3307      	adds	r3, #7
 801ada6:	10db      	asrs	r3, r3, #3
 801ada8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801adaa:	2314      	movs	r3, #20
 801adac:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801adae:	68fb      	ldr	r3, [r7, #12]
 801adb0:	685b      	ldr	r3, [r3, #4]
 801adb2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801adb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801adb6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adba:	781b      	ldrb	r3, [r3, #0]
 801adbc:	f003 030f 	and.w	r3, r3, #15
 801adc0:	b2db      	uxtb	r3, r3
 801adc2:	009b      	lsls	r3, r3, #2
 801adc4:	b2db      	uxtb	r3, r3
 801adc6:	2b14      	cmp	r3, #20
 801adc8:	d002      	beq.n	801add0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801adca:	f06f 0305 	mvn.w	r3, #5
 801adce:	e110      	b.n	801aff2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801add0:	68fb      	ldr	r3, [r7, #12]
 801add2:	895b      	ldrh	r3, [r3, #10]
 801add4:	2b13      	cmp	r3, #19
 801add6:	d809      	bhi.n	801adec <ip4_frag+0x64>
 801add8:	4b88      	ldr	r3, [pc, #544]	; (801affc <ip4_frag+0x274>)
 801adda:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801adde:	4988      	ldr	r1, [pc, #544]	; (801b000 <ip4_frag+0x278>)
 801ade0:	4888      	ldr	r0, [pc, #544]	; (801b004 <ip4_frag+0x27c>)
 801ade2:	f000 fc7b 	bl	801b6dc <iprintf>
 801ade6:	f06f 0305 	mvn.w	r3, #5
 801adea:	e102      	b.n	801aff2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801adec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801adee:	88db      	ldrh	r3, [r3, #6]
 801adf0:	b29b      	uxth	r3, r3
 801adf2:	4618      	mov	r0, r3
 801adf4:	f7f5 fb94 	bl	8010520 <lwip_htons>
 801adf8:	4603      	mov	r3, r0
 801adfa:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801adfc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801adfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae02:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ae06:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801ae08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801ae0c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ae0e:	68fb      	ldr	r3, [r7, #12]
 801ae10:	891b      	ldrh	r3, [r3, #8]
 801ae12:	3b14      	subs	r3, #20
 801ae14:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801ae18:	e0e1      	b.n	801afde <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ae1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ae1c:	00db      	lsls	r3, r3, #3
 801ae1e:	b29b      	uxth	r3, r3
 801ae20:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ae24:	4293      	cmp	r3, r2
 801ae26:	bf28      	it	cs
 801ae28:	4613      	movcs	r3, r2
 801ae2a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ae2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ae30:	2114      	movs	r1, #20
 801ae32:	200e      	movs	r0, #14
 801ae34:	f7f6 fd3a 	bl	80118ac <pbuf_alloc>
 801ae38:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	f000 80d5 	beq.w	801afec <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ae42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae44:	895b      	ldrh	r3, [r3, #10]
 801ae46:	2b13      	cmp	r3, #19
 801ae48:	d806      	bhi.n	801ae58 <ip4_frag+0xd0>
 801ae4a:	4b6c      	ldr	r3, [pc, #432]	; (801affc <ip4_frag+0x274>)
 801ae4c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801ae50:	496d      	ldr	r1, [pc, #436]	; (801b008 <ip4_frag+0x280>)
 801ae52:	486c      	ldr	r0, [pc, #432]	; (801b004 <ip4_frag+0x27c>)
 801ae54:	f000 fc42 	bl	801b6dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ae58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae5a:	685b      	ldr	r3, [r3, #4]
 801ae5c:	2214      	movs	r2, #20
 801ae5e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801ae60:	4618      	mov	r0, r3
 801ae62:	f000 fbca 	bl	801b5fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ae68:	685b      	ldr	r3, [r3, #4]
 801ae6a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801ae6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ae6e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801ae72:	e064      	b.n	801af3e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	895a      	ldrh	r2, [r3, #10]
 801ae78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801ae7a:	1ad3      	subs	r3, r2, r3
 801ae7c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	895b      	ldrh	r3, [r3, #10]
 801ae82:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801ae84:	429a      	cmp	r2, r3
 801ae86:	d906      	bls.n	801ae96 <ip4_frag+0x10e>
 801ae88:	4b5c      	ldr	r3, [pc, #368]	; (801affc <ip4_frag+0x274>)
 801ae8a:	f240 322d 	movw	r2, #813	; 0x32d
 801ae8e:	495f      	ldr	r1, [pc, #380]	; (801b00c <ip4_frag+0x284>)
 801ae90:	485c      	ldr	r0, [pc, #368]	; (801b004 <ip4_frag+0x27c>)
 801ae92:	f000 fc23 	bl	801b6dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ae96:	8bfa      	ldrh	r2, [r7, #30]
 801ae98:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801ae9c:	4293      	cmp	r3, r2
 801ae9e:	bf28      	it	cs
 801aea0:	4613      	movcs	r3, r2
 801aea2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801aea6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d105      	bne.n	801aeba <ip4_frag+0x132>
        poff = 0;
 801aeae:	2300      	movs	r3, #0
 801aeb0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801aeb2:	68fb      	ldr	r3, [r7, #12]
 801aeb4:	681b      	ldr	r3, [r3, #0]
 801aeb6:	60fb      	str	r3, [r7, #12]
        continue;
 801aeb8:	e041      	b.n	801af3e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801aeba:	f7ff ff0d 	bl	801acd8 <ip_frag_alloc_pbuf_custom_ref>
 801aebe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801aec0:	69bb      	ldr	r3, [r7, #24]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d103      	bne.n	801aece <ip4_frag+0x146>
        pbuf_free(rambuf);
 801aec6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aec8:	f7f6 ffd4 	bl	8011e74 <pbuf_free>
        goto memerr;
 801aecc:	e08f      	b.n	801afee <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801aece:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801aed0:	68fb      	ldr	r3, [r7, #12]
 801aed2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801aed4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801aed6:	4413      	add	r3, r2
 801aed8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801aedc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801aee0:	9201      	str	r2, [sp, #4]
 801aee2:	9300      	str	r3, [sp, #0]
 801aee4:	4603      	mov	r3, r0
 801aee6:	2241      	movs	r2, #65	; 0x41
 801aee8:	2000      	movs	r0, #0
 801aeea:	f7f6 fe09 	bl	8011b00 <pbuf_alloced_custom>
 801aeee:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d106      	bne.n	801af04 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801aef6:	69b8      	ldr	r0, [r7, #24]
 801aef8:	f7ff fef6 	bl	801ace8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801aefc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801aefe:	f7f6 ffb9 	bl	8011e74 <pbuf_free>
        goto memerr;
 801af02:	e074      	b.n	801afee <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801af04:	68f8      	ldr	r0, [r7, #12]
 801af06:	f7f7 f85b 	bl	8011fc0 <pbuf_ref>
      pcr->original = p;
 801af0a:	69bb      	ldr	r3, [r7, #24]
 801af0c:	68fa      	ldr	r2, [r7, #12]
 801af0e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801af10:	69bb      	ldr	r3, [r7, #24]
 801af12:	4a3f      	ldr	r2, [pc, #252]	; (801b010 <ip4_frag+0x288>)
 801af14:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801af16:	6979      	ldr	r1, [r7, #20]
 801af18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801af1a:	f7f7 f879 	bl	8012010 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801af1e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801af22:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801af26:	1ad3      	subs	r3, r2, r3
 801af28:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801af2c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801af30:	2b00      	cmp	r3, #0
 801af32:	d004      	beq.n	801af3e <ip4_frag+0x1b6>
        poff = 0;
 801af34:	2300      	movs	r3, #0
 801af36:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801af38:	68fb      	ldr	r3, [r7, #12]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801af3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801af42:	2b00      	cmp	r3, #0
 801af44:	d196      	bne.n	801ae74 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801af46:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801af48:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801af4c:	4413      	add	r3, r2
 801af4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801af50:	68bb      	ldr	r3, [r7, #8]
 801af52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801af54:	f1a3 0213 	sub.w	r2, r3, #19
 801af58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801af5c:	429a      	cmp	r2, r3
 801af5e:	bfcc      	ite	gt
 801af60:	2301      	movgt	r3, #1
 801af62:	2300      	movle	r3, #0
 801af64:	b2db      	uxtb	r3, r3
 801af66:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801af68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801af6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801af70:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801af72:	6a3b      	ldr	r3, [r7, #32]
 801af74:	2b00      	cmp	r3, #0
 801af76:	d002      	beq.n	801af7e <ip4_frag+0x1f6>
 801af78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	d003      	beq.n	801af86 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801af7e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801af84:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801af86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801af88:	4618      	mov	r0, r3
 801af8a:	f7f5 fac9 	bl	8010520 <lwip_htons>
 801af8e:	4603      	mov	r3, r0
 801af90:	461a      	mov	r2, r3
 801af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af94:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801af96:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801af98:	3314      	adds	r3, #20
 801af9a:	b29b      	uxth	r3, r3
 801af9c:	4618      	mov	r0, r3
 801af9e:	f7f5 fabf 	bl	8010520 <lwip_htons>
 801afa2:	4603      	mov	r3, r0
 801afa4:	461a      	mov	r2, r3
 801afa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afa8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801afaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afac:	2200      	movs	r2, #0
 801afae:	729a      	strb	r2, [r3, #10]
 801afb0:	2200      	movs	r2, #0
 801afb2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801afb4:	68bb      	ldr	r3, [r7, #8]
 801afb6:	695b      	ldr	r3, [r3, #20]
 801afb8:	687a      	ldr	r2, [r7, #4]
 801afba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801afbc:	68b8      	ldr	r0, [r7, #8]
 801afbe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801afc0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801afc2:	f7f6 ff57 	bl	8011e74 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801afc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801afca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801afcc:	1ad3      	subs	r3, r2, r3
 801afce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801afd2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801afd6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801afd8:	4413      	add	r3, r2
 801afda:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801afde:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801afe2:	2b00      	cmp	r3, #0
 801afe4:	f47f af19 	bne.w	801ae1a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801afe8:	2300      	movs	r3, #0
 801afea:	e002      	b.n	801aff2 <ip4_frag+0x26a>
      goto memerr;
 801afec:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801afee:	f04f 33ff 	mov.w	r3, #4294967295
}
 801aff2:	4618      	mov	r0, r3
 801aff4:	3748      	adds	r7, #72	; 0x48
 801aff6:	46bd      	mov	sp, r7
 801aff8:	bd80      	pop	{r7, pc}
 801affa:	bf00      	nop
 801affc:	0801f048 	.word	0x0801f048
 801b000:	0801f224 	.word	0x0801f224
 801b004:	0801f090 	.word	0x0801f090
 801b008:	0801f240 	.word	0x0801f240
 801b00c:	0801f260 	.word	0x0801f260
 801b010:	0801ad21 	.word	0x0801ad21

0801b014 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801b014:	b580      	push	{r7, lr}
 801b016:	b086      	sub	sp, #24
 801b018:	af00      	add	r7, sp, #0
 801b01a:	6078      	str	r0, [r7, #4]
 801b01c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801b01e:	230e      	movs	r3, #14
 801b020:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	895b      	ldrh	r3, [r3, #10]
 801b026:	2b0e      	cmp	r3, #14
 801b028:	d96e      	bls.n	801b108 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801b02a:	687b      	ldr	r3, [r7, #4]
 801b02c:	7bdb      	ldrb	r3, [r3, #15]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d106      	bne.n	801b040 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801b032:	683b      	ldr	r3, [r7, #0]
 801b034:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b038:	3301      	adds	r3, #1
 801b03a:	b2da      	uxtb	r2, r3
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	685b      	ldr	r3, [r3, #4]
 801b044:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801b046:	693b      	ldr	r3, [r7, #16]
 801b048:	7b1a      	ldrb	r2, [r3, #12]
 801b04a:	7b5b      	ldrb	r3, [r3, #13]
 801b04c:	021b      	lsls	r3, r3, #8
 801b04e:	4313      	orrs	r3, r2
 801b050:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801b052:	693b      	ldr	r3, [r7, #16]
 801b054:	781b      	ldrb	r3, [r3, #0]
 801b056:	f003 0301 	and.w	r3, r3, #1
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d023      	beq.n	801b0a6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801b05e:	693b      	ldr	r3, [r7, #16]
 801b060:	781b      	ldrb	r3, [r3, #0]
 801b062:	2b01      	cmp	r3, #1
 801b064:	d10f      	bne.n	801b086 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b066:	693b      	ldr	r3, [r7, #16]
 801b068:	785b      	ldrb	r3, [r3, #1]
 801b06a:	2b00      	cmp	r3, #0
 801b06c:	d11b      	bne.n	801b0a6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801b06e:	693b      	ldr	r3, [r7, #16]
 801b070:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801b072:	2b5e      	cmp	r3, #94	; 0x5e
 801b074:	d117      	bne.n	801b0a6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	7b5b      	ldrb	r3, [r3, #13]
 801b07a:	f043 0310 	orr.w	r3, r3, #16
 801b07e:	b2da      	uxtb	r2, r3
 801b080:	687b      	ldr	r3, [r7, #4]
 801b082:	735a      	strb	r2, [r3, #13]
 801b084:	e00f      	b.n	801b0a6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801b086:	693b      	ldr	r3, [r7, #16]
 801b088:	2206      	movs	r2, #6
 801b08a:	4928      	ldr	r1, [pc, #160]	; (801b12c <ethernet_input+0x118>)
 801b08c:	4618      	mov	r0, r3
 801b08e:	f000 faa6 	bl	801b5de <memcmp>
 801b092:	4603      	mov	r3, r0
 801b094:	2b00      	cmp	r3, #0
 801b096:	d106      	bne.n	801b0a6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	7b5b      	ldrb	r3, [r3, #13]
 801b09c:	f043 0308 	orr.w	r3, r3, #8
 801b0a0:	b2da      	uxtb	r2, r3
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801b0a6:	89fb      	ldrh	r3, [r7, #14]
 801b0a8:	2b08      	cmp	r3, #8
 801b0aa:	d003      	beq.n	801b0b4 <ethernet_input+0xa0>
 801b0ac:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801b0b0:	d014      	beq.n	801b0dc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801b0b2:	e032      	b.n	801b11a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b0ba:	f003 0308 	and.w	r3, r3, #8
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d024      	beq.n	801b10c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b0c2:	8afb      	ldrh	r3, [r7, #22]
 801b0c4:	4619      	mov	r1, r3
 801b0c6:	6878      	ldr	r0, [r7, #4]
 801b0c8:	f7f6 fe4e 	bl	8011d68 <pbuf_remove_header>
 801b0cc:	4603      	mov	r3, r0
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d11e      	bne.n	801b110 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801b0d2:	6839      	ldr	r1, [r7, #0]
 801b0d4:	6878      	ldr	r0, [r7, #4]
 801b0d6:	f7fe fe95 	bl	8019e04 <ip4_input>
      break;
 801b0da:	e013      	b.n	801b104 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801b0dc:	683b      	ldr	r3, [r7, #0]
 801b0de:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b0e2:	f003 0308 	and.w	r3, r3, #8
 801b0e6:	2b00      	cmp	r3, #0
 801b0e8:	d014      	beq.n	801b114 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801b0ea:	8afb      	ldrh	r3, [r7, #22]
 801b0ec:	4619      	mov	r1, r3
 801b0ee:	6878      	ldr	r0, [r7, #4]
 801b0f0:	f7f6 fe3a 	bl	8011d68 <pbuf_remove_header>
 801b0f4:	4603      	mov	r3, r0
 801b0f6:	2b00      	cmp	r3, #0
 801b0f8:	d10e      	bne.n	801b118 <ethernet_input+0x104>
        etharp_input(p, netif);
 801b0fa:	6839      	ldr	r1, [r7, #0]
 801b0fc:	6878      	ldr	r0, [r7, #4]
 801b0fe:	f7fe f80f 	bl	8019120 <etharp_input>
      break;
 801b102:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801b104:	2300      	movs	r3, #0
 801b106:	e00c      	b.n	801b122 <ethernet_input+0x10e>
    goto free_and_return;
 801b108:	bf00      	nop
 801b10a:	e006      	b.n	801b11a <ethernet_input+0x106>
        goto free_and_return;
 801b10c:	bf00      	nop
 801b10e:	e004      	b.n	801b11a <ethernet_input+0x106>
        goto free_and_return;
 801b110:	bf00      	nop
 801b112:	e002      	b.n	801b11a <ethernet_input+0x106>
        goto free_and_return;
 801b114:	bf00      	nop
 801b116:	e000      	b.n	801b11a <ethernet_input+0x106>
        goto free_and_return;
 801b118:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801b11a:	6878      	ldr	r0, [r7, #4]
 801b11c:	f7f6 feaa 	bl	8011e74 <pbuf_free>
  return ERR_OK;
 801b120:	2300      	movs	r3, #0
}
 801b122:	4618      	mov	r0, r3
 801b124:	3718      	adds	r7, #24
 801b126:	46bd      	mov	sp, r7
 801b128:	bd80      	pop	{r7, pc}
 801b12a:	bf00      	nop
 801b12c:	0801fd24 	.word	0x0801fd24

0801b130 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801b130:	b580      	push	{r7, lr}
 801b132:	b086      	sub	sp, #24
 801b134:	af00      	add	r7, sp, #0
 801b136:	60f8      	str	r0, [r7, #12]
 801b138:	60b9      	str	r1, [r7, #8]
 801b13a:	607a      	str	r2, [r7, #4]
 801b13c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801b13e:	8c3b      	ldrh	r3, [r7, #32]
 801b140:	4618      	mov	r0, r3
 801b142:	f7f5 f9ed 	bl	8010520 <lwip_htons>
 801b146:	4603      	mov	r3, r0
 801b148:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801b14a:	210e      	movs	r1, #14
 801b14c:	68b8      	ldr	r0, [r7, #8]
 801b14e:	f7f6 fdfb 	bl	8011d48 <pbuf_add_header>
 801b152:	4603      	mov	r3, r0
 801b154:	2b00      	cmp	r3, #0
 801b156:	d125      	bne.n	801b1a4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801b158:	68bb      	ldr	r3, [r7, #8]
 801b15a:	685b      	ldr	r3, [r3, #4]
 801b15c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801b15e:	693b      	ldr	r3, [r7, #16]
 801b160:	8afa      	ldrh	r2, [r7, #22]
 801b162:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801b164:	693b      	ldr	r3, [r7, #16]
 801b166:	2206      	movs	r2, #6
 801b168:	6839      	ldr	r1, [r7, #0]
 801b16a:	4618      	mov	r0, r3
 801b16c:	f000 fa45 	bl	801b5fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801b170:	693b      	ldr	r3, [r7, #16]
 801b172:	3306      	adds	r3, #6
 801b174:	2206      	movs	r2, #6
 801b176:	6879      	ldr	r1, [r7, #4]
 801b178:	4618      	mov	r0, r3
 801b17a:	f000 fa3e 	bl	801b5fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801b17e:	68fb      	ldr	r3, [r7, #12]
 801b180:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b184:	2b06      	cmp	r3, #6
 801b186:	d006      	beq.n	801b196 <ethernet_output+0x66>
 801b188:	4b0a      	ldr	r3, [pc, #40]	; (801b1b4 <ethernet_output+0x84>)
 801b18a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801b18e:	490a      	ldr	r1, [pc, #40]	; (801b1b8 <ethernet_output+0x88>)
 801b190:	480a      	ldr	r0, [pc, #40]	; (801b1bc <ethernet_output+0x8c>)
 801b192:	f000 faa3 	bl	801b6dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801b196:	68fb      	ldr	r3, [r7, #12]
 801b198:	699b      	ldr	r3, [r3, #24]
 801b19a:	68b9      	ldr	r1, [r7, #8]
 801b19c:	68f8      	ldr	r0, [r7, #12]
 801b19e:	4798      	blx	r3
 801b1a0:	4603      	mov	r3, r0
 801b1a2:	e002      	b.n	801b1aa <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801b1a4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801b1a6:	f06f 0301 	mvn.w	r3, #1
}
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	3718      	adds	r7, #24
 801b1ae:	46bd      	mov	sp, r7
 801b1b0:	bd80      	pop	{r7, pc}
 801b1b2:	bf00      	nop
 801b1b4:	0801f270 	.word	0x0801f270
 801b1b8:	0801f2a8 	.word	0x0801f2a8
 801b1bc:	0801f2dc 	.word	0x0801f2dc

0801b1c0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801b1c0:	b580      	push	{r7, lr}
 801b1c2:	b082      	sub	sp, #8
 801b1c4:	af00      	add	r7, sp, #0
 801b1c6:	6078      	str	r0, [r7, #4]
 801b1c8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801b1ca:	683b      	ldr	r3, [r7, #0]
 801b1cc:	2200      	movs	r2, #0
 801b1ce:	2104      	movs	r1, #4
 801b1d0:	4618      	mov	r0, r3
 801b1d2:	f7f1 fb31 	bl	800c838 <osMessageQueueNew>
 801b1d6:	4602      	mov	r2, r0
 801b1d8:	687b      	ldr	r3, [r7, #4]
 801b1da:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	681b      	ldr	r3, [r3, #0]
 801b1e0:	2b00      	cmp	r3, #0
 801b1e2:	d102      	bne.n	801b1ea <sys_mbox_new+0x2a>
    return ERR_MEM;
 801b1e4:	f04f 33ff 	mov.w	r3, #4294967295
 801b1e8:	e000      	b.n	801b1ec <sys_mbox_new+0x2c>

  return ERR_OK;
 801b1ea:	2300      	movs	r3, #0
}
 801b1ec:	4618      	mov	r0, r3
 801b1ee:	3708      	adds	r7, #8
 801b1f0:	46bd      	mov	sp, r7
 801b1f2:	bd80      	pop	{r7, pc}

0801b1f4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b084      	sub	sp, #16
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	6818      	ldr	r0, [r3, #0]
 801b202:	4639      	mov	r1, r7
 801b204:	2300      	movs	r3, #0
 801b206:	2200      	movs	r2, #0
 801b208:	f7f1 fb8a 	bl	800c920 <osMessageQueuePut>
 801b20c:	4603      	mov	r3, r0
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d102      	bne.n	801b218 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801b212:	2300      	movs	r3, #0
 801b214:	73fb      	strb	r3, [r7, #15]
 801b216:	e001      	b.n	801b21c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801b218:	23ff      	movs	r3, #255	; 0xff
 801b21a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801b21c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b220:	4618      	mov	r0, r3
 801b222:	3710      	adds	r7, #16
 801b224:	46bd      	mov	sp, r7
 801b226:	bd80      	pop	{r7, pc}

0801b228 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801b228:	b580      	push	{r7, lr}
 801b22a:	b086      	sub	sp, #24
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	60f8      	str	r0, [r7, #12]
 801b230:	60b9      	str	r1, [r7, #8]
 801b232:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801b234:	f7f1 f810 	bl	800c258 <osKernelGetTickCount>
 801b238:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	2b00      	cmp	r3, #0
 801b23e:	d013      	beq.n	801b268 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801b240:	68fb      	ldr	r3, [r7, #12]
 801b242:	6818      	ldr	r0, [r3, #0]
 801b244:	687b      	ldr	r3, [r7, #4]
 801b246:	2200      	movs	r2, #0
 801b248:	68b9      	ldr	r1, [r7, #8]
 801b24a:	f7f1 fbc9 	bl	800c9e0 <osMessageQueueGet>
 801b24e:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801b250:	693b      	ldr	r3, [r7, #16]
 801b252:	2b00      	cmp	r3, #0
 801b254:	d105      	bne.n	801b262 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801b256:	f7f0 ffff 	bl	800c258 <osKernelGetTickCount>
 801b25a:	4602      	mov	r2, r0
 801b25c:	697b      	ldr	r3, [r7, #20]
 801b25e:	1ad3      	subs	r3, r2, r3
 801b260:	e00f      	b.n	801b282 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801b262:	f04f 33ff 	mov.w	r3, #4294967295
 801b266:	e00c      	b.n	801b282 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801b268:	68fb      	ldr	r3, [r7, #12]
 801b26a:	6818      	ldr	r0, [r3, #0]
 801b26c:	f04f 33ff 	mov.w	r3, #4294967295
 801b270:	2200      	movs	r2, #0
 801b272:	68b9      	ldr	r1, [r7, #8]
 801b274:	f7f1 fbb4 	bl	800c9e0 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801b278:	f7f0 ffee 	bl	800c258 <osKernelGetTickCount>
 801b27c:	4602      	mov	r2, r0
 801b27e:	697b      	ldr	r3, [r7, #20]
 801b280:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801b282:	4618      	mov	r0, r3
 801b284:	3718      	adds	r7, #24
 801b286:	46bd      	mov	sp, r7
 801b288:	bd80      	pop	{r7, pc}

0801b28a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801b28a:	b480      	push	{r7}
 801b28c:	b083      	sub	sp, #12
 801b28e:	af00      	add	r7, sp, #0
 801b290:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801b292:	687b      	ldr	r3, [r7, #4]
 801b294:	681b      	ldr	r3, [r3, #0]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d101      	bne.n	801b29e <sys_mbox_valid+0x14>
    return 0;
 801b29a:	2300      	movs	r3, #0
 801b29c:	e000      	b.n	801b2a0 <sys_mbox_valid+0x16>
  else
    return 1;
 801b29e:	2301      	movs	r3, #1
}
 801b2a0:	4618      	mov	r0, r3
 801b2a2:	370c      	adds	r7, #12
 801b2a4:	46bd      	mov	sp, r7
 801b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2aa:	4770      	bx	lr

0801b2ac <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801b2ac:	b580      	push	{r7, lr}
 801b2ae:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801b2b0:	2000      	movs	r0, #0
 801b2b2:	f7f1 f893 	bl	800c3dc <osMutexNew>
 801b2b6:	4603      	mov	r3, r0
 801b2b8:	4a01      	ldr	r2, [pc, #4]	; (801b2c0 <sys_init+0x14>)
 801b2ba:	6013      	str	r3, [r2, #0]
#endif
}
 801b2bc:	bf00      	nop
 801b2be:	bd80      	pop	{r7, pc}
 801b2c0:	240082fc 	.word	0x240082fc

0801b2c4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801b2c4:	b580      	push	{r7, lr}
 801b2c6:	b082      	sub	sp, #8
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801b2cc:	2000      	movs	r0, #0
 801b2ce:	f7f1 f885 	bl	800c3dc <osMutexNew>
 801b2d2:	4602      	mov	r2, r0
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	681b      	ldr	r3, [r3, #0]
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d102      	bne.n	801b2e6 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801b2e0:	f04f 33ff 	mov.w	r3, #4294967295
 801b2e4:	e000      	b.n	801b2e8 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801b2e6:	2300      	movs	r3, #0
}
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	3708      	adds	r7, #8
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	bd80      	pop	{r7, pc}

0801b2f0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801b2f0:	b580      	push	{r7, lr}
 801b2f2:	b082      	sub	sp, #8
 801b2f4:	af00      	add	r7, sp, #0
 801b2f6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	f04f 31ff 	mov.w	r1, #4294967295
 801b300:	4618      	mov	r0, r3
 801b302:	f7f1 f8f1 	bl	800c4e8 <osMutexAcquire>
#endif
}
 801b306:	bf00      	nop
 801b308:	3708      	adds	r7, #8
 801b30a:	46bd      	mov	sp, r7
 801b30c:	bd80      	pop	{r7, pc}

0801b30e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801b30e:	b580      	push	{r7, lr}
 801b310:	b082      	sub	sp, #8
 801b312:	af00      	add	r7, sp, #0
 801b314:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	681b      	ldr	r3, [r3, #0]
 801b31a:	4618      	mov	r0, r3
 801b31c:	f7f1 f92f 	bl	800c57e <osMutexRelease>
}
 801b320:	bf00      	nop
 801b322:	3708      	adds	r7, #8
 801b324:	46bd      	mov	sp, r7
 801b326:	bd80      	pop	{r7, pc}

0801b328 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801b328:	b580      	push	{r7, lr}
 801b32a:	b08e      	sub	sp, #56	; 0x38
 801b32c:	af00      	add	r7, sp, #0
 801b32e:	60f8      	str	r0, [r7, #12]
 801b330:	60b9      	str	r1, [r7, #8]
 801b332:	607a      	str	r2, [r7, #4]
 801b334:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801b336:	f107 0314 	add.w	r3, r7, #20
 801b33a:	2224      	movs	r2, #36	; 0x24
 801b33c:	2100      	movs	r1, #0
 801b33e:	4618      	mov	r0, r3
 801b340:	f000 f969 	bl	801b616 <memset>
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	617b      	str	r3, [r7, #20]
 801b348:	683b      	ldr	r3, [r7, #0]
 801b34a:	62bb      	str	r3, [r7, #40]	; 0x28
 801b34c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801b34e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801b350:	f107 0314 	add.w	r3, r7, #20
 801b354:	461a      	mov	r2, r3
 801b356:	6879      	ldr	r1, [r7, #4]
 801b358:	68b8      	ldr	r0, [r7, #8]
 801b35a:	f7f0 ff92 	bl	800c282 <osThreadNew>
 801b35e:	4603      	mov	r3, r0
#endif
}
 801b360:	4618      	mov	r0, r3
 801b362:	3738      	adds	r7, #56	; 0x38
 801b364:	46bd      	mov	sp, r7
 801b366:	bd80      	pop	{r7, pc}

0801b368 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801b368:	b580      	push	{r7, lr}
 801b36a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801b36c:	4b04      	ldr	r3, [pc, #16]	; (801b380 <sys_arch_protect+0x18>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	f04f 31ff 	mov.w	r1, #4294967295
 801b374:	4618      	mov	r0, r3
 801b376:	f7f1 f8b7 	bl	800c4e8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801b37a:	2301      	movs	r3, #1
}
 801b37c:	4618      	mov	r0, r3
 801b37e:	bd80      	pop	{r7, pc}
 801b380:	240082fc 	.word	0x240082fc

0801b384 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801b384:	b580      	push	{r7, lr}
 801b386:	b082      	sub	sp, #8
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801b38c:	4b04      	ldr	r3, [pc, #16]	; (801b3a0 <sys_arch_unprotect+0x1c>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	4618      	mov	r0, r3
 801b392:	f7f1 f8f4 	bl	800c57e <osMutexRelease>
}
 801b396:	bf00      	nop
 801b398:	3708      	adds	r7, #8
 801b39a:	46bd      	mov	sp, r7
 801b39c:	bd80      	pop	{r7, pc}
 801b39e:	bf00      	nop
 801b3a0:	240082fc 	.word	0x240082fc

0801b3a4 <std>:
 801b3a4:	2300      	movs	r3, #0
 801b3a6:	b510      	push	{r4, lr}
 801b3a8:	4604      	mov	r4, r0
 801b3aa:	e9c0 3300 	strd	r3, r3, [r0]
 801b3ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b3b2:	6083      	str	r3, [r0, #8]
 801b3b4:	8181      	strh	r1, [r0, #12]
 801b3b6:	6643      	str	r3, [r0, #100]	; 0x64
 801b3b8:	81c2      	strh	r2, [r0, #14]
 801b3ba:	6183      	str	r3, [r0, #24]
 801b3bc:	4619      	mov	r1, r3
 801b3be:	2208      	movs	r2, #8
 801b3c0:	305c      	adds	r0, #92	; 0x5c
 801b3c2:	f000 f928 	bl	801b616 <memset>
 801b3c6:	4b05      	ldr	r3, [pc, #20]	; (801b3dc <std+0x38>)
 801b3c8:	6263      	str	r3, [r4, #36]	; 0x24
 801b3ca:	4b05      	ldr	r3, [pc, #20]	; (801b3e0 <std+0x3c>)
 801b3cc:	62a3      	str	r3, [r4, #40]	; 0x28
 801b3ce:	4b05      	ldr	r3, [pc, #20]	; (801b3e4 <std+0x40>)
 801b3d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b3d2:	4b05      	ldr	r3, [pc, #20]	; (801b3e8 <std+0x44>)
 801b3d4:	6224      	str	r4, [r4, #32]
 801b3d6:	6323      	str	r3, [r4, #48]	; 0x30
 801b3d8:	bd10      	pop	{r4, pc}
 801b3da:	bf00      	nop
 801b3dc:	0801b881 	.word	0x0801b881
 801b3e0:	0801b8a3 	.word	0x0801b8a3
 801b3e4:	0801b8db 	.word	0x0801b8db
 801b3e8:	0801b8ff 	.word	0x0801b8ff

0801b3ec <_cleanup_r>:
 801b3ec:	4901      	ldr	r1, [pc, #4]	; (801b3f4 <_cleanup_r+0x8>)
 801b3ee:	f000 b8af 	b.w	801b550 <_fwalk_reent>
 801b3f2:	bf00      	nop
 801b3f4:	0801bab9 	.word	0x0801bab9

0801b3f8 <__sfmoreglue>:
 801b3f8:	b570      	push	{r4, r5, r6, lr}
 801b3fa:	1e4a      	subs	r2, r1, #1
 801b3fc:	2568      	movs	r5, #104	; 0x68
 801b3fe:	4355      	muls	r5, r2
 801b400:	460e      	mov	r6, r1
 801b402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b406:	f000 f90f 	bl	801b628 <_malloc_r>
 801b40a:	4604      	mov	r4, r0
 801b40c:	b140      	cbz	r0, 801b420 <__sfmoreglue+0x28>
 801b40e:	2100      	movs	r1, #0
 801b410:	e9c0 1600 	strd	r1, r6, [r0]
 801b414:	300c      	adds	r0, #12
 801b416:	60a0      	str	r0, [r4, #8]
 801b418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b41c:	f000 f8fb 	bl	801b616 <memset>
 801b420:	4620      	mov	r0, r4
 801b422:	bd70      	pop	{r4, r5, r6, pc}

0801b424 <__sfp_lock_acquire>:
 801b424:	4801      	ldr	r0, [pc, #4]	; (801b42c <__sfp_lock_acquire+0x8>)
 801b426:	f000 b8d8 	b.w	801b5da <__retarget_lock_acquire_recursive>
 801b42a:	bf00      	nop
 801b42c:	24008308 	.word	0x24008308

0801b430 <__sfp_lock_release>:
 801b430:	4801      	ldr	r0, [pc, #4]	; (801b438 <__sfp_lock_release+0x8>)
 801b432:	f000 b8d3 	b.w	801b5dc <__retarget_lock_release_recursive>
 801b436:	bf00      	nop
 801b438:	24008308 	.word	0x24008308

0801b43c <__sinit_lock_acquire>:
 801b43c:	4801      	ldr	r0, [pc, #4]	; (801b444 <__sinit_lock_acquire+0x8>)
 801b43e:	f000 b8cc 	b.w	801b5da <__retarget_lock_acquire_recursive>
 801b442:	bf00      	nop
 801b444:	24008303 	.word	0x24008303

0801b448 <__sinit_lock_release>:
 801b448:	4801      	ldr	r0, [pc, #4]	; (801b450 <__sinit_lock_release+0x8>)
 801b44a:	f000 b8c7 	b.w	801b5dc <__retarget_lock_release_recursive>
 801b44e:	bf00      	nop
 801b450:	24008303 	.word	0x24008303

0801b454 <__sinit>:
 801b454:	b510      	push	{r4, lr}
 801b456:	4604      	mov	r4, r0
 801b458:	f7ff fff0 	bl	801b43c <__sinit_lock_acquire>
 801b45c:	69a3      	ldr	r3, [r4, #24]
 801b45e:	b11b      	cbz	r3, 801b468 <__sinit+0x14>
 801b460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b464:	f7ff bff0 	b.w	801b448 <__sinit_lock_release>
 801b468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801b46c:	6523      	str	r3, [r4, #80]	; 0x50
 801b46e:	4b13      	ldr	r3, [pc, #76]	; (801b4bc <__sinit+0x68>)
 801b470:	4a13      	ldr	r2, [pc, #76]	; (801b4c0 <__sinit+0x6c>)
 801b472:	681b      	ldr	r3, [r3, #0]
 801b474:	62a2      	str	r2, [r4, #40]	; 0x28
 801b476:	42a3      	cmp	r3, r4
 801b478:	bf04      	itt	eq
 801b47a:	2301      	moveq	r3, #1
 801b47c:	61a3      	streq	r3, [r4, #24]
 801b47e:	4620      	mov	r0, r4
 801b480:	f000 f820 	bl	801b4c4 <__sfp>
 801b484:	6060      	str	r0, [r4, #4]
 801b486:	4620      	mov	r0, r4
 801b488:	f000 f81c 	bl	801b4c4 <__sfp>
 801b48c:	60a0      	str	r0, [r4, #8]
 801b48e:	4620      	mov	r0, r4
 801b490:	f000 f818 	bl	801b4c4 <__sfp>
 801b494:	2200      	movs	r2, #0
 801b496:	60e0      	str	r0, [r4, #12]
 801b498:	2104      	movs	r1, #4
 801b49a:	6860      	ldr	r0, [r4, #4]
 801b49c:	f7ff ff82 	bl	801b3a4 <std>
 801b4a0:	68a0      	ldr	r0, [r4, #8]
 801b4a2:	2201      	movs	r2, #1
 801b4a4:	2109      	movs	r1, #9
 801b4a6:	f7ff ff7d 	bl	801b3a4 <std>
 801b4aa:	68e0      	ldr	r0, [r4, #12]
 801b4ac:	2202      	movs	r2, #2
 801b4ae:	2112      	movs	r1, #18
 801b4b0:	f7ff ff78 	bl	801b3a4 <std>
 801b4b4:	2301      	movs	r3, #1
 801b4b6:	61a3      	str	r3, [r4, #24]
 801b4b8:	e7d2      	b.n	801b460 <__sinit+0xc>
 801b4ba:	bf00      	nop
 801b4bc:	0801fd94 	.word	0x0801fd94
 801b4c0:	0801b3ed 	.word	0x0801b3ed

0801b4c4 <__sfp>:
 801b4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b4c6:	4607      	mov	r7, r0
 801b4c8:	f7ff ffac 	bl	801b424 <__sfp_lock_acquire>
 801b4cc:	4b1e      	ldr	r3, [pc, #120]	; (801b548 <__sfp+0x84>)
 801b4ce:	681e      	ldr	r6, [r3, #0]
 801b4d0:	69b3      	ldr	r3, [r6, #24]
 801b4d2:	b913      	cbnz	r3, 801b4da <__sfp+0x16>
 801b4d4:	4630      	mov	r0, r6
 801b4d6:	f7ff ffbd 	bl	801b454 <__sinit>
 801b4da:	3648      	adds	r6, #72	; 0x48
 801b4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b4e0:	3b01      	subs	r3, #1
 801b4e2:	d503      	bpl.n	801b4ec <__sfp+0x28>
 801b4e4:	6833      	ldr	r3, [r6, #0]
 801b4e6:	b30b      	cbz	r3, 801b52c <__sfp+0x68>
 801b4e8:	6836      	ldr	r6, [r6, #0]
 801b4ea:	e7f7      	b.n	801b4dc <__sfp+0x18>
 801b4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b4f0:	b9d5      	cbnz	r5, 801b528 <__sfp+0x64>
 801b4f2:	4b16      	ldr	r3, [pc, #88]	; (801b54c <__sfp+0x88>)
 801b4f4:	60e3      	str	r3, [r4, #12]
 801b4f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b4fa:	6665      	str	r5, [r4, #100]	; 0x64
 801b4fc:	f000 f86c 	bl	801b5d8 <__retarget_lock_init_recursive>
 801b500:	f7ff ff96 	bl	801b430 <__sfp_lock_release>
 801b504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801b508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801b50c:	6025      	str	r5, [r4, #0]
 801b50e:	61a5      	str	r5, [r4, #24]
 801b510:	2208      	movs	r2, #8
 801b512:	4629      	mov	r1, r5
 801b514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b518:	f000 f87d 	bl	801b616 <memset>
 801b51c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b524:	4620      	mov	r0, r4
 801b526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b528:	3468      	adds	r4, #104	; 0x68
 801b52a:	e7d9      	b.n	801b4e0 <__sfp+0x1c>
 801b52c:	2104      	movs	r1, #4
 801b52e:	4638      	mov	r0, r7
 801b530:	f7ff ff62 	bl	801b3f8 <__sfmoreglue>
 801b534:	4604      	mov	r4, r0
 801b536:	6030      	str	r0, [r6, #0]
 801b538:	2800      	cmp	r0, #0
 801b53a:	d1d5      	bne.n	801b4e8 <__sfp+0x24>
 801b53c:	f7ff ff78 	bl	801b430 <__sfp_lock_release>
 801b540:	230c      	movs	r3, #12
 801b542:	603b      	str	r3, [r7, #0]
 801b544:	e7ee      	b.n	801b524 <__sfp+0x60>
 801b546:	bf00      	nop
 801b548:	0801fd94 	.word	0x0801fd94
 801b54c:	ffff0001 	.word	0xffff0001

0801b550 <_fwalk_reent>:
 801b550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b554:	4606      	mov	r6, r0
 801b556:	4688      	mov	r8, r1
 801b558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b55c:	2700      	movs	r7, #0
 801b55e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b562:	f1b9 0901 	subs.w	r9, r9, #1
 801b566:	d505      	bpl.n	801b574 <_fwalk_reent+0x24>
 801b568:	6824      	ldr	r4, [r4, #0]
 801b56a:	2c00      	cmp	r4, #0
 801b56c:	d1f7      	bne.n	801b55e <_fwalk_reent+0xe>
 801b56e:	4638      	mov	r0, r7
 801b570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b574:	89ab      	ldrh	r3, [r5, #12]
 801b576:	2b01      	cmp	r3, #1
 801b578:	d907      	bls.n	801b58a <_fwalk_reent+0x3a>
 801b57a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b57e:	3301      	adds	r3, #1
 801b580:	d003      	beq.n	801b58a <_fwalk_reent+0x3a>
 801b582:	4629      	mov	r1, r5
 801b584:	4630      	mov	r0, r6
 801b586:	47c0      	blx	r8
 801b588:	4307      	orrs	r7, r0
 801b58a:	3568      	adds	r5, #104	; 0x68
 801b58c:	e7e9      	b.n	801b562 <_fwalk_reent+0x12>
	...

0801b590 <__libc_init_array>:
 801b590:	b570      	push	{r4, r5, r6, lr}
 801b592:	4d0d      	ldr	r5, [pc, #52]	; (801b5c8 <__libc_init_array+0x38>)
 801b594:	4c0d      	ldr	r4, [pc, #52]	; (801b5cc <__libc_init_array+0x3c>)
 801b596:	1b64      	subs	r4, r4, r5
 801b598:	10a4      	asrs	r4, r4, #2
 801b59a:	2600      	movs	r6, #0
 801b59c:	42a6      	cmp	r6, r4
 801b59e:	d109      	bne.n	801b5b4 <__libc_init_array+0x24>
 801b5a0:	4d0b      	ldr	r5, [pc, #44]	; (801b5d0 <__libc_init_array+0x40>)
 801b5a2:	4c0c      	ldr	r4, [pc, #48]	; (801b5d4 <__libc_init_array+0x44>)
 801b5a4:	f000 ffde 	bl	801c564 <_init>
 801b5a8:	1b64      	subs	r4, r4, r5
 801b5aa:	10a4      	asrs	r4, r4, #2
 801b5ac:	2600      	movs	r6, #0
 801b5ae:	42a6      	cmp	r6, r4
 801b5b0:	d105      	bne.n	801b5be <__libc_init_array+0x2e>
 801b5b2:	bd70      	pop	{r4, r5, r6, pc}
 801b5b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b5b8:	4798      	blx	r3
 801b5ba:	3601      	adds	r6, #1
 801b5bc:	e7ee      	b.n	801b59c <__libc_init_array+0xc>
 801b5be:	f855 3b04 	ldr.w	r3, [r5], #4
 801b5c2:	4798      	blx	r3
 801b5c4:	3601      	adds	r6, #1
 801b5c6:	e7f2      	b.n	801b5ae <__libc_init_array+0x1e>
 801b5c8:	0801fe88 	.word	0x0801fe88
 801b5cc:	0801fe88 	.word	0x0801fe88
 801b5d0:	0801fe88 	.word	0x0801fe88
 801b5d4:	0801fe8c 	.word	0x0801fe8c

0801b5d8 <__retarget_lock_init_recursive>:
 801b5d8:	4770      	bx	lr

0801b5da <__retarget_lock_acquire_recursive>:
 801b5da:	4770      	bx	lr

0801b5dc <__retarget_lock_release_recursive>:
 801b5dc:	4770      	bx	lr

0801b5de <memcmp>:
 801b5de:	b530      	push	{r4, r5, lr}
 801b5e0:	3901      	subs	r1, #1
 801b5e2:	2400      	movs	r4, #0
 801b5e4:	42a2      	cmp	r2, r4
 801b5e6:	d101      	bne.n	801b5ec <memcmp+0xe>
 801b5e8:	2000      	movs	r0, #0
 801b5ea:	e005      	b.n	801b5f8 <memcmp+0x1a>
 801b5ec:	5d03      	ldrb	r3, [r0, r4]
 801b5ee:	3401      	adds	r4, #1
 801b5f0:	5d0d      	ldrb	r5, [r1, r4]
 801b5f2:	42ab      	cmp	r3, r5
 801b5f4:	d0f6      	beq.n	801b5e4 <memcmp+0x6>
 801b5f6:	1b58      	subs	r0, r3, r5
 801b5f8:	bd30      	pop	{r4, r5, pc}

0801b5fa <memcpy>:
 801b5fa:	440a      	add	r2, r1
 801b5fc:	4291      	cmp	r1, r2
 801b5fe:	f100 33ff 	add.w	r3, r0, #4294967295
 801b602:	d100      	bne.n	801b606 <memcpy+0xc>
 801b604:	4770      	bx	lr
 801b606:	b510      	push	{r4, lr}
 801b608:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b60c:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b610:	4291      	cmp	r1, r2
 801b612:	d1f9      	bne.n	801b608 <memcpy+0xe>
 801b614:	bd10      	pop	{r4, pc}

0801b616 <memset>:
 801b616:	4402      	add	r2, r0
 801b618:	4603      	mov	r3, r0
 801b61a:	4293      	cmp	r3, r2
 801b61c:	d100      	bne.n	801b620 <memset+0xa>
 801b61e:	4770      	bx	lr
 801b620:	f803 1b01 	strb.w	r1, [r3], #1
 801b624:	e7f9      	b.n	801b61a <memset+0x4>
	...

0801b628 <_malloc_r>:
 801b628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b62a:	1ccd      	adds	r5, r1, #3
 801b62c:	f025 0503 	bic.w	r5, r5, #3
 801b630:	3508      	adds	r5, #8
 801b632:	2d0c      	cmp	r5, #12
 801b634:	bf38      	it	cc
 801b636:	250c      	movcc	r5, #12
 801b638:	2d00      	cmp	r5, #0
 801b63a:	4606      	mov	r6, r0
 801b63c:	db01      	blt.n	801b642 <_malloc_r+0x1a>
 801b63e:	42a9      	cmp	r1, r5
 801b640:	d903      	bls.n	801b64a <_malloc_r+0x22>
 801b642:	230c      	movs	r3, #12
 801b644:	6033      	str	r3, [r6, #0]
 801b646:	2000      	movs	r0, #0
 801b648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b64a:	f000 fa9d 	bl	801bb88 <__malloc_lock>
 801b64e:	4921      	ldr	r1, [pc, #132]	; (801b6d4 <_malloc_r+0xac>)
 801b650:	680a      	ldr	r2, [r1, #0]
 801b652:	4614      	mov	r4, r2
 801b654:	b99c      	cbnz	r4, 801b67e <_malloc_r+0x56>
 801b656:	4f20      	ldr	r7, [pc, #128]	; (801b6d8 <_malloc_r+0xb0>)
 801b658:	683b      	ldr	r3, [r7, #0]
 801b65a:	b923      	cbnz	r3, 801b666 <_malloc_r+0x3e>
 801b65c:	4621      	mov	r1, r4
 801b65e:	4630      	mov	r0, r6
 801b660:	f000 f8fe 	bl	801b860 <_sbrk_r>
 801b664:	6038      	str	r0, [r7, #0]
 801b666:	4629      	mov	r1, r5
 801b668:	4630      	mov	r0, r6
 801b66a:	f000 f8f9 	bl	801b860 <_sbrk_r>
 801b66e:	1c43      	adds	r3, r0, #1
 801b670:	d123      	bne.n	801b6ba <_malloc_r+0x92>
 801b672:	230c      	movs	r3, #12
 801b674:	6033      	str	r3, [r6, #0]
 801b676:	4630      	mov	r0, r6
 801b678:	f000 fa8c 	bl	801bb94 <__malloc_unlock>
 801b67c:	e7e3      	b.n	801b646 <_malloc_r+0x1e>
 801b67e:	6823      	ldr	r3, [r4, #0]
 801b680:	1b5b      	subs	r3, r3, r5
 801b682:	d417      	bmi.n	801b6b4 <_malloc_r+0x8c>
 801b684:	2b0b      	cmp	r3, #11
 801b686:	d903      	bls.n	801b690 <_malloc_r+0x68>
 801b688:	6023      	str	r3, [r4, #0]
 801b68a:	441c      	add	r4, r3
 801b68c:	6025      	str	r5, [r4, #0]
 801b68e:	e004      	b.n	801b69a <_malloc_r+0x72>
 801b690:	6863      	ldr	r3, [r4, #4]
 801b692:	42a2      	cmp	r2, r4
 801b694:	bf0c      	ite	eq
 801b696:	600b      	streq	r3, [r1, #0]
 801b698:	6053      	strne	r3, [r2, #4]
 801b69a:	4630      	mov	r0, r6
 801b69c:	f000 fa7a 	bl	801bb94 <__malloc_unlock>
 801b6a0:	f104 000b 	add.w	r0, r4, #11
 801b6a4:	1d23      	adds	r3, r4, #4
 801b6a6:	f020 0007 	bic.w	r0, r0, #7
 801b6aa:	1ac2      	subs	r2, r0, r3
 801b6ac:	d0cc      	beq.n	801b648 <_malloc_r+0x20>
 801b6ae:	1a1b      	subs	r3, r3, r0
 801b6b0:	50a3      	str	r3, [r4, r2]
 801b6b2:	e7c9      	b.n	801b648 <_malloc_r+0x20>
 801b6b4:	4622      	mov	r2, r4
 801b6b6:	6864      	ldr	r4, [r4, #4]
 801b6b8:	e7cc      	b.n	801b654 <_malloc_r+0x2c>
 801b6ba:	1cc4      	adds	r4, r0, #3
 801b6bc:	f024 0403 	bic.w	r4, r4, #3
 801b6c0:	42a0      	cmp	r0, r4
 801b6c2:	d0e3      	beq.n	801b68c <_malloc_r+0x64>
 801b6c4:	1a21      	subs	r1, r4, r0
 801b6c6:	4630      	mov	r0, r6
 801b6c8:	f000 f8ca 	bl	801b860 <_sbrk_r>
 801b6cc:	3001      	adds	r0, #1
 801b6ce:	d1dd      	bne.n	801b68c <_malloc_r+0x64>
 801b6d0:	e7cf      	b.n	801b672 <_malloc_r+0x4a>
 801b6d2:	bf00      	nop
 801b6d4:	24004c4c 	.word	0x24004c4c
 801b6d8:	24004c50 	.word	0x24004c50

0801b6dc <iprintf>:
 801b6dc:	b40f      	push	{r0, r1, r2, r3}
 801b6de:	4b0a      	ldr	r3, [pc, #40]	; (801b708 <iprintf+0x2c>)
 801b6e0:	b513      	push	{r0, r1, r4, lr}
 801b6e2:	681c      	ldr	r4, [r3, #0]
 801b6e4:	b124      	cbz	r4, 801b6f0 <iprintf+0x14>
 801b6e6:	69a3      	ldr	r3, [r4, #24]
 801b6e8:	b913      	cbnz	r3, 801b6f0 <iprintf+0x14>
 801b6ea:	4620      	mov	r0, r4
 801b6ec:	f7ff feb2 	bl	801b454 <__sinit>
 801b6f0:	ab05      	add	r3, sp, #20
 801b6f2:	9a04      	ldr	r2, [sp, #16]
 801b6f4:	68a1      	ldr	r1, [r4, #8]
 801b6f6:	9301      	str	r3, [sp, #4]
 801b6f8:	4620      	mov	r0, r4
 801b6fa:	f000 facb 	bl	801bc94 <_vfiprintf_r>
 801b6fe:	b002      	add	sp, #8
 801b700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b704:	b004      	add	sp, #16
 801b706:	4770      	bx	lr
 801b708:	2400003c 	.word	0x2400003c

0801b70c <rand>:
 801b70c:	4b17      	ldr	r3, [pc, #92]	; (801b76c <rand+0x60>)
 801b70e:	b510      	push	{r4, lr}
 801b710:	681c      	ldr	r4, [r3, #0]
 801b712:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801b714:	b9b3      	cbnz	r3, 801b744 <rand+0x38>
 801b716:	2018      	movs	r0, #24
 801b718:	f000 fa2e 	bl	801bb78 <malloc>
 801b71c:	63a0      	str	r0, [r4, #56]	; 0x38
 801b71e:	b928      	cbnz	r0, 801b72c <rand+0x20>
 801b720:	4602      	mov	r2, r0
 801b722:	4b13      	ldr	r3, [pc, #76]	; (801b770 <rand+0x64>)
 801b724:	4813      	ldr	r0, [pc, #76]	; (801b774 <rand+0x68>)
 801b726:	214e      	movs	r1, #78	; 0x4e
 801b728:	f000 f912 	bl	801b950 <__assert_func>
 801b72c:	4a12      	ldr	r2, [pc, #72]	; (801b778 <rand+0x6c>)
 801b72e:	4b13      	ldr	r3, [pc, #76]	; (801b77c <rand+0x70>)
 801b730:	e9c0 2300 	strd	r2, r3, [r0]
 801b734:	4b12      	ldr	r3, [pc, #72]	; (801b780 <rand+0x74>)
 801b736:	6083      	str	r3, [r0, #8]
 801b738:	230b      	movs	r3, #11
 801b73a:	8183      	strh	r3, [r0, #12]
 801b73c:	2201      	movs	r2, #1
 801b73e:	2300      	movs	r3, #0
 801b740:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801b744:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b746:	480f      	ldr	r0, [pc, #60]	; (801b784 <rand+0x78>)
 801b748:	690a      	ldr	r2, [r1, #16]
 801b74a:	694b      	ldr	r3, [r1, #20]
 801b74c:	4c0e      	ldr	r4, [pc, #56]	; (801b788 <rand+0x7c>)
 801b74e:	4350      	muls	r0, r2
 801b750:	fb04 0003 	mla	r0, r4, r3, r0
 801b754:	fba2 3404 	umull	r3, r4, r2, r4
 801b758:	1c5a      	adds	r2, r3, #1
 801b75a:	4404      	add	r4, r0
 801b75c:	f144 0000 	adc.w	r0, r4, #0
 801b760:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801b764:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801b768:	bd10      	pop	{r4, pc}
 801b76a:	bf00      	nop
 801b76c:	2400003c 	.word	0x2400003c
 801b770:	0801fd98 	.word	0x0801fd98
 801b774:	0801fdaf 	.word	0x0801fdaf
 801b778:	abcd330e 	.word	0xabcd330e
 801b77c:	e66d1234 	.word	0xe66d1234
 801b780:	0005deec 	.word	0x0005deec
 801b784:	5851f42d 	.word	0x5851f42d
 801b788:	4c957f2d 	.word	0x4c957f2d

0801b78c <cleanup_glue>:
 801b78c:	b538      	push	{r3, r4, r5, lr}
 801b78e:	460c      	mov	r4, r1
 801b790:	6809      	ldr	r1, [r1, #0]
 801b792:	4605      	mov	r5, r0
 801b794:	b109      	cbz	r1, 801b79a <cleanup_glue+0xe>
 801b796:	f7ff fff9 	bl	801b78c <cleanup_glue>
 801b79a:	4621      	mov	r1, r4
 801b79c:	4628      	mov	r0, r5
 801b79e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b7a2:	f000 b9fd 	b.w	801bba0 <_free_r>
	...

0801b7a8 <_reclaim_reent>:
 801b7a8:	4b2c      	ldr	r3, [pc, #176]	; (801b85c <_reclaim_reent+0xb4>)
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	4283      	cmp	r3, r0
 801b7ae:	b570      	push	{r4, r5, r6, lr}
 801b7b0:	4604      	mov	r4, r0
 801b7b2:	d051      	beq.n	801b858 <_reclaim_reent+0xb0>
 801b7b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801b7b6:	b143      	cbz	r3, 801b7ca <_reclaim_reent+0x22>
 801b7b8:	68db      	ldr	r3, [r3, #12]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d14a      	bne.n	801b854 <_reclaim_reent+0xac>
 801b7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b7c0:	6819      	ldr	r1, [r3, #0]
 801b7c2:	b111      	cbz	r1, 801b7ca <_reclaim_reent+0x22>
 801b7c4:	4620      	mov	r0, r4
 801b7c6:	f000 f9eb 	bl	801bba0 <_free_r>
 801b7ca:	6961      	ldr	r1, [r4, #20]
 801b7cc:	b111      	cbz	r1, 801b7d4 <_reclaim_reent+0x2c>
 801b7ce:	4620      	mov	r0, r4
 801b7d0:	f000 f9e6 	bl	801bba0 <_free_r>
 801b7d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b7d6:	b111      	cbz	r1, 801b7de <_reclaim_reent+0x36>
 801b7d8:	4620      	mov	r0, r4
 801b7da:	f000 f9e1 	bl	801bba0 <_free_r>
 801b7de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801b7e0:	b111      	cbz	r1, 801b7e8 <_reclaim_reent+0x40>
 801b7e2:	4620      	mov	r0, r4
 801b7e4:	f000 f9dc 	bl	801bba0 <_free_r>
 801b7e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801b7ea:	b111      	cbz	r1, 801b7f2 <_reclaim_reent+0x4a>
 801b7ec:	4620      	mov	r0, r4
 801b7ee:	f000 f9d7 	bl	801bba0 <_free_r>
 801b7f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801b7f4:	b111      	cbz	r1, 801b7fc <_reclaim_reent+0x54>
 801b7f6:	4620      	mov	r0, r4
 801b7f8:	f000 f9d2 	bl	801bba0 <_free_r>
 801b7fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801b7fe:	b111      	cbz	r1, 801b806 <_reclaim_reent+0x5e>
 801b800:	4620      	mov	r0, r4
 801b802:	f000 f9cd 	bl	801bba0 <_free_r>
 801b806:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801b808:	b111      	cbz	r1, 801b810 <_reclaim_reent+0x68>
 801b80a:	4620      	mov	r0, r4
 801b80c:	f000 f9c8 	bl	801bba0 <_free_r>
 801b810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b812:	b111      	cbz	r1, 801b81a <_reclaim_reent+0x72>
 801b814:	4620      	mov	r0, r4
 801b816:	f000 f9c3 	bl	801bba0 <_free_r>
 801b81a:	69a3      	ldr	r3, [r4, #24]
 801b81c:	b1e3      	cbz	r3, 801b858 <_reclaim_reent+0xb0>
 801b81e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801b820:	4620      	mov	r0, r4
 801b822:	4798      	blx	r3
 801b824:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801b826:	b1b9      	cbz	r1, 801b858 <_reclaim_reent+0xb0>
 801b828:	4620      	mov	r0, r4
 801b82a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b82e:	f7ff bfad 	b.w	801b78c <cleanup_glue>
 801b832:	5949      	ldr	r1, [r1, r5]
 801b834:	b941      	cbnz	r1, 801b848 <_reclaim_reent+0xa0>
 801b836:	3504      	adds	r5, #4
 801b838:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b83a:	2d80      	cmp	r5, #128	; 0x80
 801b83c:	68d9      	ldr	r1, [r3, #12]
 801b83e:	d1f8      	bne.n	801b832 <_reclaim_reent+0x8a>
 801b840:	4620      	mov	r0, r4
 801b842:	f000 f9ad 	bl	801bba0 <_free_r>
 801b846:	e7ba      	b.n	801b7be <_reclaim_reent+0x16>
 801b848:	680e      	ldr	r6, [r1, #0]
 801b84a:	4620      	mov	r0, r4
 801b84c:	f000 f9a8 	bl	801bba0 <_free_r>
 801b850:	4631      	mov	r1, r6
 801b852:	e7ef      	b.n	801b834 <_reclaim_reent+0x8c>
 801b854:	2500      	movs	r5, #0
 801b856:	e7ef      	b.n	801b838 <_reclaim_reent+0x90>
 801b858:	bd70      	pop	{r4, r5, r6, pc}
 801b85a:	bf00      	nop
 801b85c:	2400003c 	.word	0x2400003c

0801b860 <_sbrk_r>:
 801b860:	b538      	push	{r3, r4, r5, lr}
 801b862:	4d06      	ldr	r5, [pc, #24]	; (801b87c <_sbrk_r+0x1c>)
 801b864:	2300      	movs	r3, #0
 801b866:	4604      	mov	r4, r0
 801b868:	4608      	mov	r0, r1
 801b86a:	602b      	str	r3, [r5, #0]
 801b86c:	f7e6 ff08 	bl	8002680 <_sbrk>
 801b870:	1c43      	adds	r3, r0, #1
 801b872:	d102      	bne.n	801b87a <_sbrk_r+0x1a>
 801b874:	682b      	ldr	r3, [r5, #0]
 801b876:	b103      	cbz	r3, 801b87a <_sbrk_r+0x1a>
 801b878:	6023      	str	r3, [r4, #0]
 801b87a:	bd38      	pop	{r3, r4, r5, pc}
 801b87c:	240082f8 	.word	0x240082f8

0801b880 <__sread>:
 801b880:	b510      	push	{r4, lr}
 801b882:	460c      	mov	r4, r1
 801b884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b888:	f000 fcc8 	bl	801c21c <_read_r>
 801b88c:	2800      	cmp	r0, #0
 801b88e:	bfab      	itete	ge
 801b890:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b892:	89a3      	ldrhlt	r3, [r4, #12]
 801b894:	181b      	addge	r3, r3, r0
 801b896:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b89a:	bfac      	ite	ge
 801b89c:	6563      	strge	r3, [r4, #84]	; 0x54
 801b89e:	81a3      	strhlt	r3, [r4, #12]
 801b8a0:	bd10      	pop	{r4, pc}

0801b8a2 <__swrite>:
 801b8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b8a6:	461f      	mov	r7, r3
 801b8a8:	898b      	ldrh	r3, [r1, #12]
 801b8aa:	05db      	lsls	r3, r3, #23
 801b8ac:	4605      	mov	r5, r0
 801b8ae:	460c      	mov	r4, r1
 801b8b0:	4616      	mov	r6, r2
 801b8b2:	d505      	bpl.n	801b8c0 <__swrite+0x1e>
 801b8b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8b8:	2302      	movs	r3, #2
 801b8ba:	2200      	movs	r2, #0
 801b8bc:	f000 f94a 	bl	801bb54 <_lseek_r>
 801b8c0:	89a3      	ldrh	r3, [r4, #12]
 801b8c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b8c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b8ca:	81a3      	strh	r3, [r4, #12]
 801b8cc:	4632      	mov	r2, r6
 801b8ce:	463b      	mov	r3, r7
 801b8d0:	4628      	mov	r0, r5
 801b8d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8d6:	f000 b829 	b.w	801b92c <_write_r>

0801b8da <__sseek>:
 801b8da:	b510      	push	{r4, lr}
 801b8dc:	460c      	mov	r4, r1
 801b8de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8e2:	f000 f937 	bl	801bb54 <_lseek_r>
 801b8e6:	1c43      	adds	r3, r0, #1
 801b8e8:	89a3      	ldrh	r3, [r4, #12]
 801b8ea:	bf15      	itete	ne
 801b8ec:	6560      	strne	r0, [r4, #84]	; 0x54
 801b8ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b8f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b8f6:	81a3      	strheq	r3, [r4, #12]
 801b8f8:	bf18      	it	ne
 801b8fa:	81a3      	strhne	r3, [r4, #12]
 801b8fc:	bd10      	pop	{r4, pc}

0801b8fe <__sclose>:
 801b8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b902:	f000 b843 	b.w	801b98c <_close_r>

0801b906 <strncpy>:
 801b906:	b510      	push	{r4, lr}
 801b908:	3901      	subs	r1, #1
 801b90a:	4603      	mov	r3, r0
 801b90c:	b132      	cbz	r2, 801b91c <strncpy+0x16>
 801b90e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b912:	f803 4b01 	strb.w	r4, [r3], #1
 801b916:	3a01      	subs	r2, #1
 801b918:	2c00      	cmp	r4, #0
 801b91a:	d1f7      	bne.n	801b90c <strncpy+0x6>
 801b91c:	441a      	add	r2, r3
 801b91e:	2100      	movs	r1, #0
 801b920:	4293      	cmp	r3, r2
 801b922:	d100      	bne.n	801b926 <strncpy+0x20>
 801b924:	bd10      	pop	{r4, pc}
 801b926:	f803 1b01 	strb.w	r1, [r3], #1
 801b92a:	e7f9      	b.n	801b920 <strncpy+0x1a>

0801b92c <_write_r>:
 801b92c:	b538      	push	{r3, r4, r5, lr}
 801b92e:	4d07      	ldr	r5, [pc, #28]	; (801b94c <_write_r+0x20>)
 801b930:	4604      	mov	r4, r0
 801b932:	4608      	mov	r0, r1
 801b934:	4611      	mov	r1, r2
 801b936:	2200      	movs	r2, #0
 801b938:	602a      	str	r2, [r5, #0]
 801b93a:	461a      	mov	r2, r3
 801b93c:	f7e6 fe4f 	bl	80025de <_write>
 801b940:	1c43      	adds	r3, r0, #1
 801b942:	d102      	bne.n	801b94a <_write_r+0x1e>
 801b944:	682b      	ldr	r3, [r5, #0]
 801b946:	b103      	cbz	r3, 801b94a <_write_r+0x1e>
 801b948:	6023      	str	r3, [r4, #0]
 801b94a:	bd38      	pop	{r3, r4, r5, pc}
 801b94c:	240082f8 	.word	0x240082f8

0801b950 <__assert_func>:
 801b950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b952:	4614      	mov	r4, r2
 801b954:	461a      	mov	r2, r3
 801b956:	4b09      	ldr	r3, [pc, #36]	; (801b97c <__assert_func+0x2c>)
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	4605      	mov	r5, r0
 801b95c:	68d8      	ldr	r0, [r3, #12]
 801b95e:	b14c      	cbz	r4, 801b974 <__assert_func+0x24>
 801b960:	4b07      	ldr	r3, [pc, #28]	; (801b980 <__assert_func+0x30>)
 801b962:	9100      	str	r1, [sp, #0]
 801b964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b968:	4906      	ldr	r1, [pc, #24]	; (801b984 <__assert_func+0x34>)
 801b96a:	462b      	mov	r3, r5
 801b96c:	f000 f8e0 	bl	801bb30 <fiprintf>
 801b970:	f000 fd26 	bl	801c3c0 <abort>
 801b974:	4b04      	ldr	r3, [pc, #16]	; (801b988 <__assert_func+0x38>)
 801b976:	461c      	mov	r4, r3
 801b978:	e7f3      	b.n	801b962 <__assert_func+0x12>
 801b97a:	bf00      	nop
 801b97c:	2400003c 	.word	0x2400003c
 801b980:	0801fe0e 	.word	0x0801fe0e
 801b984:	0801fe1b 	.word	0x0801fe1b
 801b988:	0801fe49 	.word	0x0801fe49

0801b98c <_close_r>:
 801b98c:	b538      	push	{r3, r4, r5, lr}
 801b98e:	4d06      	ldr	r5, [pc, #24]	; (801b9a8 <_close_r+0x1c>)
 801b990:	2300      	movs	r3, #0
 801b992:	4604      	mov	r4, r0
 801b994:	4608      	mov	r0, r1
 801b996:	602b      	str	r3, [r5, #0]
 801b998:	f7e6 fe3d 	bl	8002616 <_close>
 801b99c:	1c43      	adds	r3, r0, #1
 801b99e:	d102      	bne.n	801b9a6 <_close_r+0x1a>
 801b9a0:	682b      	ldr	r3, [r5, #0]
 801b9a2:	b103      	cbz	r3, 801b9a6 <_close_r+0x1a>
 801b9a4:	6023      	str	r3, [r4, #0]
 801b9a6:	bd38      	pop	{r3, r4, r5, pc}
 801b9a8:	240082f8 	.word	0x240082f8

0801b9ac <__sflush_r>:
 801b9ac:	898a      	ldrh	r2, [r1, #12]
 801b9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b9b2:	4605      	mov	r5, r0
 801b9b4:	0710      	lsls	r0, r2, #28
 801b9b6:	460c      	mov	r4, r1
 801b9b8:	d458      	bmi.n	801ba6c <__sflush_r+0xc0>
 801b9ba:	684b      	ldr	r3, [r1, #4]
 801b9bc:	2b00      	cmp	r3, #0
 801b9be:	dc05      	bgt.n	801b9cc <__sflush_r+0x20>
 801b9c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801b9c2:	2b00      	cmp	r3, #0
 801b9c4:	dc02      	bgt.n	801b9cc <__sflush_r+0x20>
 801b9c6:	2000      	movs	r0, #0
 801b9c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b9cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b9ce:	2e00      	cmp	r6, #0
 801b9d0:	d0f9      	beq.n	801b9c6 <__sflush_r+0x1a>
 801b9d2:	2300      	movs	r3, #0
 801b9d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801b9d8:	682f      	ldr	r7, [r5, #0]
 801b9da:	602b      	str	r3, [r5, #0]
 801b9dc:	d032      	beq.n	801ba44 <__sflush_r+0x98>
 801b9de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801b9e0:	89a3      	ldrh	r3, [r4, #12]
 801b9e2:	075a      	lsls	r2, r3, #29
 801b9e4:	d505      	bpl.n	801b9f2 <__sflush_r+0x46>
 801b9e6:	6863      	ldr	r3, [r4, #4]
 801b9e8:	1ac0      	subs	r0, r0, r3
 801b9ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801b9ec:	b10b      	cbz	r3, 801b9f2 <__sflush_r+0x46>
 801b9ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801b9f0:	1ac0      	subs	r0, r0, r3
 801b9f2:	2300      	movs	r3, #0
 801b9f4:	4602      	mov	r2, r0
 801b9f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801b9f8:	6a21      	ldr	r1, [r4, #32]
 801b9fa:	4628      	mov	r0, r5
 801b9fc:	47b0      	blx	r6
 801b9fe:	1c43      	adds	r3, r0, #1
 801ba00:	89a3      	ldrh	r3, [r4, #12]
 801ba02:	d106      	bne.n	801ba12 <__sflush_r+0x66>
 801ba04:	6829      	ldr	r1, [r5, #0]
 801ba06:	291d      	cmp	r1, #29
 801ba08:	d82c      	bhi.n	801ba64 <__sflush_r+0xb8>
 801ba0a:	4a2a      	ldr	r2, [pc, #168]	; (801bab4 <__sflush_r+0x108>)
 801ba0c:	40ca      	lsrs	r2, r1
 801ba0e:	07d6      	lsls	r6, r2, #31
 801ba10:	d528      	bpl.n	801ba64 <__sflush_r+0xb8>
 801ba12:	2200      	movs	r2, #0
 801ba14:	6062      	str	r2, [r4, #4]
 801ba16:	04d9      	lsls	r1, r3, #19
 801ba18:	6922      	ldr	r2, [r4, #16]
 801ba1a:	6022      	str	r2, [r4, #0]
 801ba1c:	d504      	bpl.n	801ba28 <__sflush_r+0x7c>
 801ba1e:	1c42      	adds	r2, r0, #1
 801ba20:	d101      	bne.n	801ba26 <__sflush_r+0x7a>
 801ba22:	682b      	ldr	r3, [r5, #0]
 801ba24:	b903      	cbnz	r3, 801ba28 <__sflush_r+0x7c>
 801ba26:	6560      	str	r0, [r4, #84]	; 0x54
 801ba28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba2a:	602f      	str	r7, [r5, #0]
 801ba2c:	2900      	cmp	r1, #0
 801ba2e:	d0ca      	beq.n	801b9c6 <__sflush_r+0x1a>
 801ba30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ba34:	4299      	cmp	r1, r3
 801ba36:	d002      	beq.n	801ba3e <__sflush_r+0x92>
 801ba38:	4628      	mov	r0, r5
 801ba3a:	f000 f8b1 	bl	801bba0 <_free_r>
 801ba3e:	2000      	movs	r0, #0
 801ba40:	6360      	str	r0, [r4, #52]	; 0x34
 801ba42:	e7c1      	b.n	801b9c8 <__sflush_r+0x1c>
 801ba44:	6a21      	ldr	r1, [r4, #32]
 801ba46:	2301      	movs	r3, #1
 801ba48:	4628      	mov	r0, r5
 801ba4a:	47b0      	blx	r6
 801ba4c:	1c41      	adds	r1, r0, #1
 801ba4e:	d1c7      	bne.n	801b9e0 <__sflush_r+0x34>
 801ba50:	682b      	ldr	r3, [r5, #0]
 801ba52:	2b00      	cmp	r3, #0
 801ba54:	d0c4      	beq.n	801b9e0 <__sflush_r+0x34>
 801ba56:	2b1d      	cmp	r3, #29
 801ba58:	d001      	beq.n	801ba5e <__sflush_r+0xb2>
 801ba5a:	2b16      	cmp	r3, #22
 801ba5c:	d101      	bne.n	801ba62 <__sflush_r+0xb6>
 801ba5e:	602f      	str	r7, [r5, #0]
 801ba60:	e7b1      	b.n	801b9c6 <__sflush_r+0x1a>
 801ba62:	89a3      	ldrh	r3, [r4, #12]
 801ba64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ba68:	81a3      	strh	r3, [r4, #12]
 801ba6a:	e7ad      	b.n	801b9c8 <__sflush_r+0x1c>
 801ba6c:	690f      	ldr	r7, [r1, #16]
 801ba6e:	2f00      	cmp	r7, #0
 801ba70:	d0a9      	beq.n	801b9c6 <__sflush_r+0x1a>
 801ba72:	0793      	lsls	r3, r2, #30
 801ba74:	680e      	ldr	r6, [r1, #0]
 801ba76:	bf08      	it	eq
 801ba78:	694b      	ldreq	r3, [r1, #20]
 801ba7a:	600f      	str	r7, [r1, #0]
 801ba7c:	bf18      	it	ne
 801ba7e:	2300      	movne	r3, #0
 801ba80:	eba6 0807 	sub.w	r8, r6, r7
 801ba84:	608b      	str	r3, [r1, #8]
 801ba86:	f1b8 0f00 	cmp.w	r8, #0
 801ba8a:	dd9c      	ble.n	801b9c6 <__sflush_r+0x1a>
 801ba8c:	6a21      	ldr	r1, [r4, #32]
 801ba8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801ba90:	4643      	mov	r3, r8
 801ba92:	463a      	mov	r2, r7
 801ba94:	4628      	mov	r0, r5
 801ba96:	47b0      	blx	r6
 801ba98:	2800      	cmp	r0, #0
 801ba9a:	dc06      	bgt.n	801baaa <__sflush_r+0xfe>
 801ba9c:	89a3      	ldrh	r3, [r4, #12]
 801ba9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801baa2:	81a3      	strh	r3, [r4, #12]
 801baa4:	f04f 30ff 	mov.w	r0, #4294967295
 801baa8:	e78e      	b.n	801b9c8 <__sflush_r+0x1c>
 801baaa:	4407      	add	r7, r0
 801baac:	eba8 0800 	sub.w	r8, r8, r0
 801bab0:	e7e9      	b.n	801ba86 <__sflush_r+0xda>
 801bab2:	bf00      	nop
 801bab4:	20400001 	.word	0x20400001

0801bab8 <_fflush_r>:
 801bab8:	b538      	push	{r3, r4, r5, lr}
 801baba:	690b      	ldr	r3, [r1, #16]
 801babc:	4605      	mov	r5, r0
 801babe:	460c      	mov	r4, r1
 801bac0:	b913      	cbnz	r3, 801bac8 <_fflush_r+0x10>
 801bac2:	2500      	movs	r5, #0
 801bac4:	4628      	mov	r0, r5
 801bac6:	bd38      	pop	{r3, r4, r5, pc}
 801bac8:	b118      	cbz	r0, 801bad2 <_fflush_r+0x1a>
 801baca:	6983      	ldr	r3, [r0, #24]
 801bacc:	b90b      	cbnz	r3, 801bad2 <_fflush_r+0x1a>
 801bace:	f7ff fcc1 	bl	801b454 <__sinit>
 801bad2:	4b14      	ldr	r3, [pc, #80]	; (801bb24 <_fflush_r+0x6c>)
 801bad4:	429c      	cmp	r4, r3
 801bad6:	d11b      	bne.n	801bb10 <_fflush_r+0x58>
 801bad8:	686c      	ldr	r4, [r5, #4]
 801bada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d0ef      	beq.n	801bac2 <_fflush_r+0xa>
 801bae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bae4:	07d0      	lsls	r0, r2, #31
 801bae6:	d404      	bmi.n	801baf2 <_fflush_r+0x3a>
 801bae8:	0599      	lsls	r1, r3, #22
 801baea:	d402      	bmi.n	801baf2 <_fflush_r+0x3a>
 801baec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801baee:	f7ff fd74 	bl	801b5da <__retarget_lock_acquire_recursive>
 801baf2:	4628      	mov	r0, r5
 801baf4:	4621      	mov	r1, r4
 801baf6:	f7ff ff59 	bl	801b9ac <__sflush_r>
 801bafa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bafc:	07da      	lsls	r2, r3, #31
 801bafe:	4605      	mov	r5, r0
 801bb00:	d4e0      	bmi.n	801bac4 <_fflush_r+0xc>
 801bb02:	89a3      	ldrh	r3, [r4, #12]
 801bb04:	059b      	lsls	r3, r3, #22
 801bb06:	d4dd      	bmi.n	801bac4 <_fflush_r+0xc>
 801bb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb0a:	f7ff fd67 	bl	801b5dc <__retarget_lock_release_recursive>
 801bb0e:	e7d9      	b.n	801bac4 <_fflush_r+0xc>
 801bb10:	4b05      	ldr	r3, [pc, #20]	; (801bb28 <_fflush_r+0x70>)
 801bb12:	429c      	cmp	r4, r3
 801bb14:	d101      	bne.n	801bb1a <_fflush_r+0x62>
 801bb16:	68ac      	ldr	r4, [r5, #8]
 801bb18:	e7df      	b.n	801bada <_fflush_r+0x22>
 801bb1a:	4b04      	ldr	r3, [pc, #16]	; (801bb2c <_fflush_r+0x74>)
 801bb1c:	429c      	cmp	r4, r3
 801bb1e:	bf08      	it	eq
 801bb20:	68ec      	ldreq	r4, [r5, #12]
 801bb22:	e7da      	b.n	801bada <_fflush_r+0x22>
 801bb24:	0801fd54 	.word	0x0801fd54
 801bb28:	0801fd74 	.word	0x0801fd74
 801bb2c:	0801fd34 	.word	0x0801fd34

0801bb30 <fiprintf>:
 801bb30:	b40e      	push	{r1, r2, r3}
 801bb32:	b503      	push	{r0, r1, lr}
 801bb34:	4601      	mov	r1, r0
 801bb36:	ab03      	add	r3, sp, #12
 801bb38:	4805      	ldr	r0, [pc, #20]	; (801bb50 <fiprintf+0x20>)
 801bb3a:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb3e:	6800      	ldr	r0, [r0, #0]
 801bb40:	9301      	str	r3, [sp, #4]
 801bb42:	f000 f8a7 	bl	801bc94 <_vfiprintf_r>
 801bb46:	b002      	add	sp, #8
 801bb48:	f85d eb04 	ldr.w	lr, [sp], #4
 801bb4c:	b003      	add	sp, #12
 801bb4e:	4770      	bx	lr
 801bb50:	2400003c 	.word	0x2400003c

0801bb54 <_lseek_r>:
 801bb54:	b538      	push	{r3, r4, r5, lr}
 801bb56:	4d07      	ldr	r5, [pc, #28]	; (801bb74 <_lseek_r+0x20>)
 801bb58:	4604      	mov	r4, r0
 801bb5a:	4608      	mov	r0, r1
 801bb5c:	4611      	mov	r1, r2
 801bb5e:	2200      	movs	r2, #0
 801bb60:	602a      	str	r2, [r5, #0]
 801bb62:	461a      	mov	r2, r3
 801bb64:	f7e6 fd7e 	bl	8002664 <_lseek>
 801bb68:	1c43      	adds	r3, r0, #1
 801bb6a:	d102      	bne.n	801bb72 <_lseek_r+0x1e>
 801bb6c:	682b      	ldr	r3, [r5, #0]
 801bb6e:	b103      	cbz	r3, 801bb72 <_lseek_r+0x1e>
 801bb70:	6023      	str	r3, [r4, #0]
 801bb72:	bd38      	pop	{r3, r4, r5, pc}
 801bb74:	240082f8 	.word	0x240082f8

0801bb78 <malloc>:
 801bb78:	4b02      	ldr	r3, [pc, #8]	; (801bb84 <malloc+0xc>)
 801bb7a:	4601      	mov	r1, r0
 801bb7c:	6818      	ldr	r0, [r3, #0]
 801bb7e:	f7ff bd53 	b.w	801b628 <_malloc_r>
 801bb82:	bf00      	nop
 801bb84:	2400003c 	.word	0x2400003c

0801bb88 <__malloc_lock>:
 801bb88:	4801      	ldr	r0, [pc, #4]	; (801bb90 <__malloc_lock+0x8>)
 801bb8a:	f7ff bd26 	b.w	801b5da <__retarget_lock_acquire_recursive>
 801bb8e:	bf00      	nop
 801bb90:	24008304 	.word	0x24008304

0801bb94 <__malloc_unlock>:
 801bb94:	4801      	ldr	r0, [pc, #4]	; (801bb9c <__malloc_unlock+0x8>)
 801bb96:	f7ff bd21 	b.w	801b5dc <__retarget_lock_release_recursive>
 801bb9a:	bf00      	nop
 801bb9c:	24008304 	.word	0x24008304

0801bba0 <_free_r>:
 801bba0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bba2:	2900      	cmp	r1, #0
 801bba4:	d048      	beq.n	801bc38 <_free_r+0x98>
 801bba6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bbaa:	9001      	str	r0, [sp, #4]
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	f1a1 0404 	sub.w	r4, r1, #4
 801bbb2:	bfb8      	it	lt
 801bbb4:	18e4      	addlt	r4, r4, r3
 801bbb6:	f7ff ffe7 	bl	801bb88 <__malloc_lock>
 801bbba:	4a20      	ldr	r2, [pc, #128]	; (801bc3c <_free_r+0x9c>)
 801bbbc:	9801      	ldr	r0, [sp, #4]
 801bbbe:	6813      	ldr	r3, [r2, #0]
 801bbc0:	4615      	mov	r5, r2
 801bbc2:	b933      	cbnz	r3, 801bbd2 <_free_r+0x32>
 801bbc4:	6063      	str	r3, [r4, #4]
 801bbc6:	6014      	str	r4, [r2, #0]
 801bbc8:	b003      	add	sp, #12
 801bbca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bbce:	f7ff bfe1 	b.w	801bb94 <__malloc_unlock>
 801bbd2:	42a3      	cmp	r3, r4
 801bbd4:	d90b      	bls.n	801bbee <_free_r+0x4e>
 801bbd6:	6821      	ldr	r1, [r4, #0]
 801bbd8:	1862      	adds	r2, r4, r1
 801bbda:	4293      	cmp	r3, r2
 801bbdc:	bf04      	itt	eq
 801bbde:	681a      	ldreq	r2, [r3, #0]
 801bbe0:	685b      	ldreq	r3, [r3, #4]
 801bbe2:	6063      	str	r3, [r4, #4]
 801bbe4:	bf04      	itt	eq
 801bbe6:	1852      	addeq	r2, r2, r1
 801bbe8:	6022      	streq	r2, [r4, #0]
 801bbea:	602c      	str	r4, [r5, #0]
 801bbec:	e7ec      	b.n	801bbc8 <_free_r+0x28>
 801bbee:	461a      	mov	r2, r3
 801bbf0:	685b      	ldr	r3, [r3, #4]
 801bbf2:	b10b      	cbz	r3, 801bbf8 <_free_r+0x58>
 801bbf4:	42a3      	cmp	r3, r4
 801bbf6:	d9fa      	bls.n	801bbee <_free_r+0x4e>
 801bbf8:	6811      	ldr	r1, [r2, #0]
 801bbfa:	1855      	adds	r5, r2, r1
 801bbfc:	42a5      	cmp	r5, r4
 801bbfe:	d10b      	bne.n	801bc18 <_free_r+0x78>
 801bc00:	6824      	ldr	r4, [r4, #0]
 801bc02:	4421      	add	r1, r4
 801bc04:	1854      	adds	r4, r2, r1
 801bc06:	42a3      	cmp	r3, r4
 801bc08:	6011      	str	r1, [r2, #0]
 801bc0a:	d1dd      	bne.n	801bbc8 <_free_r+0x28>
 801bc0c:	681c      	ldr	r4, [r3, #0]
 801bc0e:	685b      	ldr	r3, [r3, #4]
 801bc10:	6053      	str	r3, [r2, #4]
 801bc12:	4421      	add	r1, r4
 801bc14:	6011      	str	r1, [r2, #0]
 801bc16:	e7d7      	b.n	801bbc8 <_free_r+0x28>
 801bc18:	d902      	bls.n	801bc20 <_free_r+0x80>
 801bc1a:	230c      	movs	r3, #12
 801bc1c:	6003      	str	r3, [r0, #0]
 801bc1e:	e7d3      	b.n	801bbc8 <_free_r+0x28>
 801bc20:	6825      	ldr	r5, [r4, #0]
 801bc22:	1961      	adds	r1, r4, r5
 801bc24:	428b      	cmp	r3, r1
 801bc26:	bf04      	itt	eq
 801bc28:	6819      	ldreq	r1, [r3, #0]
 801bc2a:	685b      	ldreq	r3, [r3, #4]
 801bc2c:	6063      	str	r3, [r4, #4]
 801bc2e:	bf04      	itt	eq
 801bc30:	1949      	addeq	r1, r1, r5
 801bc32:	6021      	streq	r1, [r4, #0]
 801bc34:	6054      	str	r4, [r2, #4]
 801bc36:	e7c7      	b.n	801bbc8 <_free_r+0x28>
 801bc38:	b003      	add	sp, #12
 801bc3a:	bd30      	pop	{r4, r5, pc}
 801bc3c:	24004c4c 	.word	0x24004c4c

0801bc40 <__sfputc_r>:
 801bc40:	6893      	ldr	r3, [r2, #8]
 801bc42:	3b01      	subs	r3, #1
 801bc44:	2b00      	cmp	r3, #0
 801bc46:	b410      	push	{r4}
 801bc48:	6093      	str	r3, [r2, #8]
 801bc4a:	da08      	bge.n	801bc5e <__sfputc_r+0x1e>
 801bc4c:	6994      	ldr	r4, [r2, #24]
 801bc4e:	42a3      	cmp	r3, r4
 801bc50:	db01      	blt.n	801bc56 <__sfputc_r+0x16>
 801bc52:	290a      	cmp	r1, #10
 801bc54:	d103      	bne.n	801bc5e <__sfputc_r+0x1e>
 801bc56:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc5a:	f000 baf1 	b.w	801c240 <__swbuf_r>
 801bc5e:	6813      	ldr	r3, [r2, #0]
 801bc60:	1c58      	adds	r0, r3, #1
 801bc62:	6010      	str	r0, [r2, #0]
 801bc64:	7019      	strb	r1, [r3, #0]
 801bc66:	4608      	mov	r0, r1
 801bc68:	f85d 4b04 	ldr.w	r4, [sp], #4
 801bc6c:	4770      	bx	lr

0801bc6e <__sfputs_r>:
 801bc6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc70:	4606      	mov	r6, r0
 801bc72:	460f      	mov	r7, r1
 801bc74:	4614      	mov	r4, r2
 801bc76:	18d5      	adds	r5, r2, r3
 801bc78:	42ac      	cmp	r4, r5
 801bc7a:	d101      	bne.n	801bc80 <__sfputs_r+0x12>
 801bc7c:	2000      	movs	r0, #0
 801bc7e:	e007      	b.n	801bc90 <__sfputs_r+0x22>
 801bc80:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bc84:	463a      	mov	r2, r7
 801bc86:	4630      	mov	r0, r6
 801bc88:	f7ff ffda 	bl	801bc40 <__sfputc_r>
 801bc8c:	1c43      	adds	r3, r0, #1
 801bc8e:	d1f3      	bne.n	801bc78 <__sfputs_r+0xa>
 801bc90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801bc94 <_vfiprintf_r>:
 801bc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc98:	460d      	mov	r5, r1
 801bc9a:	b09d      	sub	sp, #116	; 0x74
 801bc9c:	4614      	mov	r4, r2
 801bc9e:	4698      	mov	r8, r3
 801bca0:	4606      	mov	r6, r0
 801bca2:	b118      	cbz	r0, 801bcac <_vfiprintf_r+0x18>
 801bca4:	6983      	ldr	r3, [r0, #24]
 801bca6:	b90b      	cbnz	r3, 801bcac <_vfiprintf_r+0x18>
 801bca8:	f7ff fbd4 	bl	801b454 <__sinit>
 801bcac:	4b89      	ldr	r3, [pc, #548]	; (801bed4 <_vfiprintf_r+0x240>)
 801bcae:	429d      	cmp	r5, r3
 801bcb0:	d11b      	bne.n	801bcea <_vfiprintf_r+0x56>
 801bcb2:	6875      	ldr	r5, [r6, #4]
 801bcb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bcb6:	07d9      	lsls	r1, r3, #31
 801bcb8:	d405      	bmi.n	801bcc6 <_vfiprintf_r+0x32>
 801bcba:	89ab      	ldrh	r3, [r5, #12]
 801bcbc:	059a      	lsls	r2, r3, #22
 801bcbe:	d402      	bmi.n	801bcc6 <_vfiprintf_r+0x32>
 801bcc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bcc2:	f7ff fc8a 	bl	801b5da <__retarget_lock_acquire_recursive>
 801bcc6:	89ab      	ldrh	r3, [r5, #12]
 801bcc8:	071b      	lsls	r3, r3, #28
 801bcca:	d501      	bpl.n	801bcd0 <_vfiprintf_r+0x3c>
 801bccc:	692b      	ldr	r3, [r5, #16]
 801bcce:	b9eb      	cbnz	r3, 801bd0c <_vfiprintf_r+0x78>
 801bcd0:	4629      	mov	r1, r5
 801bcd2:	4630      	mov	r0, r6
 801bcd4:	f000 fb06 	bl	801c2e4 <__swsetup_r>
 801bcd8:	b1c0      	cbz	r0, 801bd0c <_vfiprintf_r+0x78>
 801bcda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bcdc:	07dc      	lsls	r4, r3, #31
 801bcde:	d50e      	bpl.n	801bcfe <_vfiprintf_r+0x6a>
 801bce0:	f04f 30ff 	mov.w	r0, #4294967295
 801bce4:	b01d      	add	sp, #116	; 0x74
 801bce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcea:	4b7b      	ldr	r3, [pc, #492]	; (801bed8 <_vfiprintf_r+0x244>)
 801bcec:	429d      	cmp	r5, r3
 801bcee:	d101      	bne.n	801bcf4 <_vfiprintf_r+0x60>
 801bcf0:	68b5      	ldr	r5, [r6, #8]
 801bcf2:	e7df      	b.n	801bcb4 <_vfiprintf_r+0x20>
 801bcf4:	4b79      	ldr	r3, [pc, #484]	; (801bedc <_vfiprintf_r+0x248>)
 801bcf6:	429d      	cmp	r5, r3
 801bcf8:	bf08      	it	eq
 801bcfa:	68f5      	ldreq	r5, [r6, #12]
 801bcfc:	e7da      	b.n	801bcb4 <_vfiprintf_r+0x20>
 801bcfe:	89ab      	ldrh	r3, [r5, #12]
 801bd00:	0598      	lsls	r0, r3, #22
 801bd02:	d4ed      	bmi.n	801bce0 <_vfiprintf_r+0x4c>
 801bd04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801bd06:	f7ff fc69 	bl	801b5dc <__retarget_lock_release_recursive>
 801bd0a:	e7e9      	b.n	801bce0 <_vfiprintf_r+0x4c>
 801bd0c:	2300      	movs	r3, #0
 801bd0e:	9309      	str	r3, [sp, #36]	; 0x24
 801bd10:	2320      	movs	r3, #32
 801bd12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801bd16:	f8cd 800c 	str.w	r8, [sp, #12]
 801bd1a:	2330      	movs	r3, #48	; 0x30
 801bd1c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801bee0 <_vfiprintf_r+0x24c>
 801bd20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801bd24:	f04f 0901 	mov.w	r9, #1
 801bd28:	4623      	mov	r3, r4
 801bd2a:	469a      	mov	sl, r3
 801bd2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bd30:	b10a      	cbz	r2, 801bd36 <_vfiprintf_r+0xa2>
 801bd32:	2a25      	cmp	r2, #37	; 0x25
 801bd34:	d1f9      	bne.n	801bd2a <_vfiprintf_r+0x96>
 801bd36:	ebba 0b04 	subs.w	fp, sl, r4
 801bd3a:	d00b      	beq.n	801bd54 <_vfiprintf_r+0xc0>
 801bd3c:	465b      	mov	r3, fp
 801bd3e:	4622      	mov	r2, r4
 801bd40:	4629      	mov	r1, r5
 801bd42:	4630      	mov	r0, r6
 801bd44:	f7ff ff93 	bl	801bc6e <__sfputs_r>
 801bd48:	3001      	adds	r0, #1
 801bd4a:	f000 80aa 	beq.w	801bea2 <_vfiprintf_r+0x20e>
 801bd4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bd50:	445a      	add	r2, fp
 801bd52:	9209      	str	r2, [sp, #36]	; 0x24
 801bd54:	f89a 3000 	ldrb.w	r3, [sl]
 801bd58:	2b00      	cmp	r3, #0
 801bd5a:	f000 80a2 	beq.w	801bea2 <_vfiprintf_r+0x20e>
 801bd5e:	2300      	movs	r3, #0
 801bd60:	f04f 32ff 	mov.w	r2, #4294967295
 801bd64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801bd68:	f10a 0a01 	add.w	sl, sl, #1
 801bd6c:	9304      	str	r3, [sp, #16]
 801bd6e:	9307      	str	r3, [sp, #28]
 801bd70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801bd74:	931a      	str	r3, [sp, #104]	; 0x68
 801bd76:	4654      	mov	r4, sl
 801bd78:	2205      	movs	r2, #5
 801bd7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801bd7e:	4858      	ldr	r0, [pc, #352]	; (801bee0 <_vfiprintf_r+0x24c>)
 801bd80:	f7e4 fade 	bl	8000340 <memchr>
 801bd84:	9a04      	ldr	r2, [sp, #16]
 801bd86:	b9d8      	cbnz	r0, 801bdc0 <_vfiprintf_r+0x12c>
 801bd88:	06d1      	lsls	r1, r2, #27
 801bd8a:	bf44      	itt	mi
 801bd8c:	2320      	movmi	r3, #32
 801bd8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd92:	0713      	lsls	r3, r2, #28
 801bd94:	bf44      	itt	mi
 801bd96:	232b      	movmi	r3, #43	; 0x2b
 801bd98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801bd9c:	f89a 3000 	ldrb.w	r3, [sl]
 801bda0:	2b2a      	cmp	r3, #42	; 0x2a
 801bda2:	d015      	beq.n	801bdd0 <_vfiprintf_r+0x13c>
 801bda4:	9a07      	ldr	r2, [sp, #28]
 801bda6:	4654      	mov	r4, sl
 801bda8:	2000      	movs	r0, #0
 801bdaa:	f04f 0c0a 	mov.w	ip, #10
 801bdae:	4621      	mov	r1, r4
 801bdb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801bdb4:	3b30      	subs	r3, #48	; 0x30
 801bdb6:	2b09      	cmp	r3, #9
 801bdb8:	d94e      	bls.n	801be58 <_vfiprintf_r+0x1c4>
 801bdba:	b1b0      	cbz	r0, 801bdea <_vfiprintf_r+0x156>
 801bdbc:	9207      	str	r2, [sp, #28]
 801bdbe:	e014      	b.n	801bdea <_vfiprintf_r+0x156>
 801bdc0:	eba0 0308 	sub.w	r3, r0, r8
 801bdc4:	fa09 f303 	lsl.w	r3, r9, r3
 801bdc8:	4313      	orrs	r3, r2
 801bdca:	9304      	str	r3, [sp, #16]
 801bdcc:	46a2      	mov	sl, r4
 801bdce:	e7d2      	b.n	801bd76 <_vfiprintf_r+0xe2>
 801bdd0:	9b03      	ldr	r3, [sp, #12]
 801bdd2:	1d19      	adds	r1, r3, #4
 801bdd4:	681b      	ldr	r3, [r3, #0]
 801bdd6:	9103      	str	r1, [sp, #12]
 801bdd8:	2b00      	cmp	r3, #0
 801bdda:	bfbb      	ittet	lt
 801bddc:	425b      	neglt	r3, r3
 801bdde:	f042 0202 	orrlt.w	r2, r2, #2
 801bde2:	9307      	strge	r3, [sp, #28]
 801bde4:	9307      	strlt	r3, [sp, #28]
 801bde6:	bfb8      	it	lt
 801bde8:	9204      	strlt	r2, [sp, #16]
 801bdea:	7823      	ldrb	r3, [r4, #0]
 801bdec:	2b2e      	cmp	r3, #46	; 0x2e
 801bdee:	d10c      	bne.n	801be0a <_vfiprintf_r+0x176>
 801bdf0:	7863      	ldrb	r3, [r4, #1]
 801bdf2:	2b2a      	cmp	r3, #42	; 0x2a
 801bdf4:	d135      	bne.n	801be62 <_vfiprintf_r+0x1ce>
 801bdf6:	9b03      	ldr	r3, [sp, #12]
 801bdf8:	1d1a      	adds	r2, r3, #4
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	9203      	str	r2, [sp, #12]
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	bfb8      	it	lt
 801be02:	f04f 33ff 	movlt.w	r3, #4294967295
 801be06:	3402      	adds	r4, #2
 801be08:	9305      	str	r3, [sp, #20]
 801be0a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801bef0 <_vfiprintf_r+0x25c>
 801be0e:	7821      	ldrb	r1, [r4, #0]
 801be10:	2203      	movs	r2, #3
 801be12:	4650      	mov	r0, sl
 801be14:	f7e4 fa94 	bl	8000340 <memchr>
 801be18:	b140      	cbz	r0, 801be2c <_vfiprintf_r+0x198>
 801be1a:	2340      	movs	r3, #64	; 0x40
 801be1c:	eba0 000a 	sub.w	r0, r0, sl
 801be20:	fa03 f000 	lsl.w	r0, r3, r0
 801be24:	9b04      	ldr	r3, [sp, #16]
 801be26:	4303      	orrs	r3, r0
 801be28:	3401      	adds	r4, #1
 801be2a:	9304      	str	r3, [sp, #16]
 801be2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801be30:	482c      	ldr	r0, [pc, #176]	; (801bee4 <_vfiprintf_r+0x250>)
 801be32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801be36:	2206      	movs	r2, #6
 801be38:	f7e4 fa82 	bl	8000340 <memchr>
 801be3c:	2800      	cmp	r0, #0
 801be3e:	d03f      	beq.n	801bec0 <_vfiprintf_r+0x22c>
 801be40:	4b29      	ldr	r3, [pc, #164]	; (801bee8 <_vfiprintf_r+0x254>)
 801be42:	bb1b      	cbnz	r3, 801be8c <_vfiprintf_r+0x1f8>
 801be44:	9b03      	ldr	r3, [sp, #12]
 801be46:	3307      	adds	r3, #7
 801be48:	f023 0307 	bic.w	r3, r3, #7
 801be4c:	3308      	adds	r3, #8
 801be4e:	9303      	str	r3, [sp, #12]
 801be50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801be52:	443b      	add	r3, r7
 801be54:	9309      	str	r3, [sp, #36]	; 0x24
 801be56:	e767      	b.n	801bd28 <_vfiprintf_r+0x94>
 801be58:	fb0c 3202 	mla	r2, ip, r2, r3
 801be5c:	460c      	mov	r4, r1
 801be5e:	2001      	movs	r0, #1
 801be60:	e7a5      	b.n	801bdae <_vfiprintf_r+0x11a>
 801be62:	2300      	movs	r3, #0
 801be64:	3401      	adds	r4, #1
 801be66:	9305      	str	r3, [sp, #20]
 801be68:	4619      	mov	r1, r3
 801be6a:	f04f 0c0a 	mov.w	ip, #10
 801be6e:	4620      	mov	r0, r4
 801be70:	f810 2b01 	ldrb.w	r2, [r0], #1
 801be74:	3a30      	subs	r2, #48	; 0x30
 801be76:	2a09      	cmp	r2, #9
 801be78:	d903      	bls.n	801be82 <_vfiprintf_r+0x1ee>
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d0c5      	beq.n	801be0a <_vfiprintf_r+0x176>
 801be7e:	9105      	str	r1, [sp, #20]
 801be80:	e7c3      	b.n	801be0a <_vfiprintf_r+0x176>
 801be82:	fb0c 2101 	mla	r1, ip, r1, r2
 801be86:	4604      	mov	r4, r0
 801be88:	2301      	movs	r3, #1
 801be8a:	e7f0      	b.n	801be6e <_vfiprintf_r+0x1da>
 801be8c:	ab03      	add	r3, sp, #12
 801be8e:	9300      	str	r3, [sp, #0]
 801be90:	462a      	mov	r2, r5
 801be92:	4b16      	ldr	r3, [pc, #88]	; (801beec <_vfiprintf_r+0x258>)
 801be94:	a904      	add	r1, sp, #16
 801be96:	4630      	mov	r0, r6
 801be98:	f3af 8000 	nop.w
 801be9c:	4607      	mov	r7, r0
 801be9e:	1c78      	adds	r0, r7, #1
 801bea0:	d1d6      	bne.n	801be50 <_vfiprintf_r+0x1bc>
 801bea2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801bea4:	07d9      	lsls	r1, r3, #31
 801bea6:	d405      	bmi.n	801beb4 <_vfiprintf_r+0x220>
 801bea8:	89ab      	ldrh	r3, [r5, #12]
 801beaa:	059a      	lsls	r2, r3, #22
 801beac:	d402      	bmi.n	801beb4 <_vfiprintf_r+0x220>
 801beae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801beb0:	f7ff fb94 	bl	801b5dc <__retarget_lock_release_recursive>
 801beb4:	89ab      	ldrh	r3, [r5, #12]
 801beb6:	065b      	lsls	r3, r3, #25
 801beb8:	f53f af12 	bmi.w	801bce0 <_vfiprintf_r+0x4c>
 801bebc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bebe:	e711      	b.n	801bce4 <_vfiprintf_r+0x50>
 801bec0:	ab03      	add	r3, sp, #12
 801bec2:	9300      	str	r3, [sp, #0]
 801bec4:	462a      	mov	r2, r5
 801bec6:	4b09      	ldr	r3, [pc, #36]	; (801beec <_vfiprintf_r+0x258>)
 801bec8:	a904      	add	r1, sp, #16
 801beca:	4630      	mov	r0, r6
 801becc:	f000 f880 	bl	801bfd0 <_printf_i>
 801bed0:	e7e4      	b.n	801be9c <_vfiprintf_r+0x208>
 801bed2:	bf00      	nop
 801bed4:	0801fd54 	.word	0x0801fd54
 801bed8:	0801fd74 	.word	0x0801fd74
 801bedc:	0801fd34 	.word	0x0801fd34
 801bee0:	0801fe4a 	.word	0x0801fe4a
 801bee4:	0801fe54 	.word	0x0801fe54
 801bee8:	00000000 	.word	0x00000000
 801beec:	0801bc6f 	.word	0x0801bc6f
 801bef0:	0801fe50 	.word	0x0801fe50

0801bef4 <_printf_common>:
 801bef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bef8:	4616      	mov	r6, r2
 801befa:	4699      	mov	r9, r3
 801befc:	688a      	ldr	r2, [r1, #8]
 801befe:	690b      	ldr	r3, [r1, #16]
 801bf00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801bf04:	4293      	cmp	r3, r2
 801bf06:	bfb8      	it	lt
 801bf08:	4613      	movlt	r3, r2
 801bf0a:	6033      	str	r3, [r6, #0]
 801bf0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801bf10:	4607      	mov	r7, r0
 801bf12:	460c      	mov	r4, r1
 801bf14:	b10a      	cbz	r2, 801bf1a <_printf_common+0x26>
 801bf16:	3301      	adds	r3, #1
 801bf18:	6033      	str	r3, [r6, #0]
 801bf1a:	6823      	ldr	r3, [r4, #0]
 801bf1c:	0699      	lsls	r1, r3, #26
 801bf1e:	bf42      	ittt	mi
 801bf20:	6833      	ldrmi	r3, [r6, #0]
 801bf22:	3302      	addmi	r3, #2
 801bf24:	6033      	strmi	r3, [r6, #0]
 801bf26:	6825      	ldr	r5, [r4, #0]
 801bf28:	f015 0506 	ands.w	r5, r5, #6
 801bf2c:	d106      	bne.n	801bf3c <_printf_common+0x48>
 801bf2e:	f104 0a19 	add.w	sl, r4, #25
 801bf32:	68e3      	ldr	r3, [r4, #12]
 801bf34:	6832      	ldr	r2, [r6, #0]
 801bf36:	1a9b      	subs	r3, r3, r2
 801bf38:	42ab      	cmp	r3, r5
 801bf3a:	dc26      	bgt.n	801bf8a <_printf_common+0x96>
 801bf3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801bf40:	1e13      	subs	r3, r2, #0
 801bf42:	6822      	ldr	r2, [r4, #0]
 801bf44:	bf18      	it	ne
 801bf46:	2301      	movne	r3, #1
 801bf48:	0692      	lsls	r2, r2, #26
 801bf4a:	d42b      	bmi.n	801bfa4 <_printf_common+0xb0>
 801bf4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bf50:	4649      	mov	r1, r9
 801bf52:	4638      	mov	r0, r7
 801bf54:	47c0      	blx	r8
 801bf56:	3001      	adds	r0, #1
 801bf58:	d01e      	beq.n	801bf98 <_printf_common+0xa4>
 801bf5a:	6823      	ldr	r3, [r4, #0]
 801bf5c:	68e5      	ldr	r5, [r4, #12]
 801bf5e:	6832      	ldr	r2, [r6, #0]
 801bf60:	f003 0306 	and.w	r3, r3, #6
 801bf64:	2b04      	cmp	r3, #4
 801bf66:	bf08      	it	eq
 801bf68:	1aad      	subeq	r5, r5, r2
 801bf6a:	68a3      	ldr	r3, [r4, #8]
 801bf6c:	6922      	ldr	r2, [r4, #16]
 801bf6e:	bf0c      	ite	eq
 801bf70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801bf74:	2500      	movne	r5, #0
 801bf76:	4293      	cmp	r3, r2
 801bf78:	bfc4      	itt	gt
 801bf7a:	1a9b      	subgt	r3, r3, r2
 801bf7c:	18ed      	addgt	r5, r5, r3
 801bf7e:	2600      	movs	r6, #0
 801bf80:	341a      	adds	r4, #26
 801bf82:	42b5      	cmp	r5, r6
 801bf84:	d11a      	bne.n	801bfbc <_printf_common+0xc8>
 801bf86:	2000      	movs	r0, #0
 801bf88:	e008      	b.n	801bf9c <_printf_common+0xa8>
 801bf8a:	2301      	movs	r3, #1
 801bf8c:	4652      	mov	r2, sl
 801bf8e:	4649      	mov	r1, r9
 801bf90:	4638      	mov	r0, r7
 801bf92:	47c0      	blx	r8
 801bf94:	3001      	adds	r0, #1
 801bf96:	d103      	bne.n	801bfa0 <_printf_common+0xac>
 801bf98:	f04f 30ff 	mov.w	r0, #4294967295
 801bf9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bfa0:	3501      	adds	r5, #1
 801bfa2:	e7c6      	b.n	801bf32 <_printf_common+0x3e>
 801bfa4:	18e1      	adds	r1, r4, r3
 801bfa6:	1c5a      	adds	r2, r3, #1
 801bfa8:	2030      	movs	r0, #48	; 0x30
 801bfaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801bfae:	4422      	add	r2, r4
 801bfb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801bfb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801bfb8:	3302      	adds	r3, #2
 801bfba:	e7c7      	b.n	801bf4c <_printf_common+0x58>
 801bfbc:	2301      	movs	r3, #1
 801bfbe:	4622      	mov	r2, r4
 801bfc0:	4649      	mov	r1, r9
 801bfc2:	4638      	mov	r0, r7
 801bfc4:	47c0      	blx	r8
 801bfc6:	3001      	adds	r0, #1
 801bfc8:	d0e6      	beq.n	801bf98 <_printf_common+0xa4>
 801bfca:	3601      	adds	r6, #1
 801bfcc:	e7d9      	b.n	801bf82 <_printf_common+0x8e>
	...

0801bfd0 <_printf_i>:
 801bfd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801bfd4:	460c      	mov	r4, r1
 801bfd6:	4691      	mov	r9, r2
 801bfd8:	7e27      	ldrb	r7, [r4, #24]
 801bfda:	990c      	ldr	r1, [sp, #48]	; 0x30
 801bfdc:	2f78      	cmp	r7, #120	; 0x78
 801bfde:	4680      	mov	r8, r0
 801bfe0:	469a      	mov	sl, r3
 801bfe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801bfe6:	d807      	bhi.n	801bff8 <_printf_i+0x28>
 801bfe8:	2f62      	cmp	r7, #98	; 0x62
 801bfea:	d80a      	bhi.n	801c002 <_printf_i+0x32>
 801bfec:	2f00      	cmp	r7, #0
 801bfee:	f000 80d8 	beq.w	801c1a2 <_printf_i+0x1d2>
 801bff2:	2f58      	cmp	r7, #88	; 0x58
 801bff4:	f000 80a3 	beq.w	801c13e <_printf_i+0x16e>
 801bff8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801bffc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801c000:	e03a      	b.n	801c078 <_printf_i+0xa8>
 801c002:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801c006:	2b15      	cmp	r3, #21
 801c008:	d8f6      	bhi.n	801bff8 <_printf_i+0x28>
 801c00a:	a001      	add	r0, pc, #4	; (adr r0, 801c010 <_printf_i+0x40>)
 801c00c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801c010:	0801c069 	.word	0x0801c069
 801c014:	0801c07d 	.word	0x0801c07d
 801c018:	0801bff9 	.word	0x0801bff9
 801c01c:	0801bff9 	.word	0x0801bff9
 801c020:	0801bff9 	.word	0x0801bff9
 801c024:	0801bff9 	.word	0x0801bff9
 801c028:	0801c07d 	.word	0x0801c07d
 801c02c:	0801bff9 	.word	0x0801bff9
 801c030:	0801bff9 	.word	0x0801bff9
 801c034:	0801bff9 	.word	0x0801bff9
 801c038:	0801bff9 	.word	0x0801bff9
 801c03c:	0801c189 	.word	0x0801c189
 801c040:	0801c0ad 	.word	0x0801c0ad
 801c044:	0801c16b 	.word	0x0801c16b
 801c048:	0801bff9 	.word	0x0801bff9
 801c04c:	0801bff9 	.word	0x0801bff9
 801c050:	0801c1ab 	.word	0x0801c1ab
 801c054:	0801bff9 	.word	0x0801bff9
 801c058:	0801c0ad 	.word	0x0801c0ad
 801c05c:	0801bff9 	.word	0x0801bff9
 801c060:	0801bff9 	.word	0x0801bff9
 801c064:	0801c173 	.word	0x0801c173
 801c068:	680b      	ldr	r3, [r1, #0]
 801c06a:	1d1a      	adds	r2, r3, #4
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	600a      	str	r2, [r1, #0]
 801c070:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801c074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801c078:	2301      	movs	r3, #1
 801c07a:	e0a3      	b.n	801c1c4 <_printf_i+0x1f4>
 801c07c:	6825      	ldr	r5, [r4, #0]
 801c07e:	6808      	ldr	r0, [r1, #0]
 801c080:	062e      	lsls	r6, r5, #24
 801c082:	f100 0304 	add.w	r3, r0, #4
 801c086:	d50a      	bpl.n	801c09e <_printf_i+0xce>
 801c088:	6805      	ldr	r5, [r0, #0]
 801c08a:	600b      	str	r3, [r1, #0]
 801c08c:	2d00      	cmp	r5, #0
 801c08e:	da03      	bge.n	801c098 <_printf_i+0xc8>
 801c090:	232d      	movs	r3, #45	; 0x2d
 801c092:	426d      	negs	r5, r5
 801c094:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c098:	485e      	ldr	r0, [pc, #376]	; (801c214 <_printf_i+0x244>)
 801c09a:	230a      	movs	r3, #10
 801c09c:	e019      	b.n	801c0d2 <_printf_i+0x102>
 801c09e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801c0a2:	6805      	ldr	r5, [r0, #0]
 801c0a4:	600b      	str	r3, [r1, #0]
 801c0a6:	bf18      	it	ne
 801c0a8:	b22d      	sxthne	r5, r5
 801c0aa:	e7ef      	b.n	801c08c <_printf_i+0xbc>
 801c0ac:	680b      	ldr	r3, [r1, #0]
 801c0ae:	6825      	ldr	r5, [r4, #0]
 801c0b0:	1d18      	adds	r0, r3, #4
 801c0b2:	6008      	str	r0, [r1, #0]
 801c0b4:	0628      	lsls	r0, r5, #24
 801c0b6:	d501      	bpl.n	801c0bc <_printf_i+0xec>
 801c0b8:	681d      	ldr	r5, [r3, #0]
 801c0ba:	e002      	b.n	801c0c2 <_printf_i+0xf2>
 801c0bc:	0669      	lsls	r1, r5, #25
 801c0be:	d5fb      	bpl.n	801c0b8 <_printf_i+0xe8>
 801c0c0:	881d      	ldrh	r5, [r3, #0]
 801c0c2:	4854      	ldr	r0, [pc, #336]	; (801c214 <_printf_i+0x244>)
 801c0c4:	2f6f      	cmp	r7, #111	; 0x6f
 801c0c6:	bf0c      	ite	eq
 801c0c8:	2308      	moveq	r3, #8
 801c0ca:	230a      	movne	r3, #10
 801c0cc:	2100      	movs	r1, #0
 801c0ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801c0d2:	6866      	ldr	r6, [r4, #4]
 801c0d4:	60a6      	str	r6, [r4, #8]
 801c0d6:	2e00      	cmp	r6, #0
 801c0d8:	bfa2      	ittt	ge
 801c0da:	6821      	ldrge	r1, [r4, #0]
 801c0dc:	f021 0104 	bicge.w	r1, r1, #4
 801c0e0:	6021      	strge	r1, [r4, #0]
 801c0e2:	b90d      	cbnz	r5, 801c0e8 <_printf_i+0x118>
 801c0e4:	2e00      	cmp	r6, #0
 801c0e6:	d04d      	beq.n	801c184 <_printf_i+0x1b4>
 801c0e8:	4616      	mov	r6, r2
 801c0ea:	fbb5 f1f3 	udiv	r1, r5, r3
 801c0ee:	fb03 5711 	mls	r7, r3, r1, r5
 801c0f2:	5dc7      	ldrb	r7, [r0, r7]
 801c0f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c0f8:	462f      	mov	r7, r5
 801c0fa:	42bb      	cmp	r3, r7
 801c0fc:	460d      	mov	r5, r1
 801c0fe:	d9f4      	bls.n	801c0ea <_printf_i+0x11a>
 801c100:	2b08      	cmp	r3, #8
 801c102:	d10b      	bne.n	801c11c <_printf_i+0x14c>
 801c104:	6823      	ldr	r3, [r4, #0]
 801c106:	07df      	lsls	r7, r3, #31
 801c108:	d508      	bpl.n	801c11c <_printf_i+0x14c>
 801c10a:	6923      	ldr	r3, [r4, #16]
 801c10c:	6861      	ldr	r1, [r4, #4]
 801c10e:	4299      	cmp	r1, r3
 801c110:	bfde      	ittt	le
 801c112:	2330      	movle	r3, #48	; 0x30
 801c114:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c118:	f106 36ff 	addle.w	r6, r6, #4294967295
 801c11c:	1b92      	subs	r2, r2, r6
 801c11e:	6122      	str	r2, [r4, #16]
 801c120:	f8cd a000 	str.w	sl, [sp]
 801c124:	464b      	mov	r3, r9
 801c126:	aa03      	add	r2, sp, #12
 801c128:	4621      	mov	r1, r4
 801c12a:	4640      	mov	r0, r8
 801c12c:	f7ff fee2 	bl	801bef4 <_printf_common>
 801c130:	3001      	adds	r0, #1
 801c132:	d14c      	bne.n	801c1ce <_printf_i+0x1fe>
 801c134:	f04f 30ff 	mov.w	r0, #4294967295
 801c138:	b004      	add	sp, #16
 801c13a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c13e:	4835      	ldr	r0, [pc, #212]	; (801c214 <_printf_i+0x244>)
 801c140:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801c144:	6823      	ldr	r3, [r4, #0]
 801c146:	680e      	ldr	r6, [r1, #0]
 801c148:	061f      	lsls	r7, r3, #24
 801c14a:	f856 5b04 	ldr.w	r5, [r6], #4
 801c14e:	600e      	str	r6, [r1, #0]
 801c150:	d514      	bpl.n	801c17c <_printf_i+0x1ac>
 801c152:	07d9      	lsls	r1, r3, #31
 801c154:	bf44      	itt	mi
 801c156:	f043 0320 	orrmi.w	r3, r3, #32
 801c15a:	6023      	strmi	r3, [r4, #0]
 801c15c:	b91d      	cbnz	r5, 801c166 <_printf_i+0x196>
 801c15e:	6823      	ldr	r3, [r4, #0]
 801c160:	f023 0320 	bic.w	r3, r3, #32
 801c164:	6023      	str	r3, [r4, #0]
 801c166:	2310      	movs	r3, #16
 801c168:	e7b0      	b.n	801c0cc <_printf_i+0xfc>
 801c16a:	6823      	ldr	r3, [r4, #0]
 801c16c:	f043 0320 	orr.w	r3, r3, #32
 801c170:	6023      	str	r3, [r4, #0]
 801c172:	2378      	movs	r3, #120	; 0x78
 801c174:	4828      	ldr	r0, [pc, #160]	; (801c218 <_printf_i+0x248>)
 801c176:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801c17a:	e7e3      	b.n	801c144 <_printf_i+0x174>
 801c17c:	065e      	lsls	r6, r3, #25
 801c17e:	bf48      	it	mi
 801c180:	b2ad      	uxthmi	r5, r5
 801c182:	e7e6      	b.n	801c152 <_printf_i+0x182>
 801c184:	4616      	mov	r6, r2
 801c186:	e7bb      	b.n	801c100 <_printf_i+0x130>
 801c188:	680b      	ldr	r3, [r1, #0]
 801c18a:	6826      	ldr	r6, [r4, #0]
 801c18c:	6960      	ldr	r0, [r4, #20]
 801c18e:	1d1d      	adds	r5, r3, #4
 801c190:	600d      	str	r5, [r1, #0]
 801c192:	0635      	lsls	r5, r6, #24
 801c194:	681b      	ldr	r3, [r3, #0]
 801c196:	d501      	bpl.n	801c19c <_printf_i+0x1cc>
 801c198:	6018      	str	r0, [r3, #0]
 801c19a:	e002      	b.n	801c1a2 <_printf_i+0x1d2>
 801c19c:	0671      	lsls	r1, r6, #25
 801c19e:	d5fb      	bpl.n	801c198 <_printf_i+0x1c8>
 801c1a0:	8018      	strh	r0, [r3, #0]
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	6123      	str	r3, [r4, #16]
 801c1a6:	4616      	mov	r6, r2
 801c1a8:	e7ba      	b.n	801c120 <_printf_i+0x150>
 801c1aa:	680b      	ldr	r3, [r1, #0]
 801c1ac:	1d1a      	adds	r2, r3, #4
 801c1ae:	600a      	str	r2, [r1, #0]
 801c1b0:	681e      	ldr	r6, [r3, #0]
 801c1b2:	6862      	ldr	r2, [r4, #4]
 801c1b4:	2100      	movs	r1, #0
 801c1b6:	4630      	mov	r0, r6
 801c1b8:	f7e4 f8c2 	bl	8000340 <memchr>
 801c1bc:	b108      	cbz	r0, 801c1c2 <_printf_i+0x1f2>
 801c1be:	1b80      	subs	r0, r0, r6
 801c1c0:	6060      	str	r0, [r4, #4]
 801c1c2:	6863      	ldr	r3, [r4, #4]
 801c1c4:	6123      	str	r3, [r4, #16]
 801c1c6:	2300      	movs	r3, #0
 801c1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801c1cc:	e7a8      	b.n	801c120 <_printf_i+0x150>
 801c1ce:	6923      	ldr	r3, [r4, #16]
 801c1d0:	4632      	mov	r2, r6
 801c1d2:	4649      	mov	r1, r9
 801c1d4:	4640      	mov	r0, r8
 801c1d6:	47d0      	blx	sl
 801c1d8:	3001      	adds	r0, #1
 801c1da:	d0ab      	beq.n	801c134 <_printf_i+0x164>
 801c1dc:	6823      	ldr	r3, [r4, #0]
 801c1de:	079b      	lsls	r3, r3, #30
 801c1e0:	d413      	bmi.n	801c20a <_printf_i+0x23a>
 801c1e2:	68e0      	ldr	r0, [r4, #12]
 801c1e4:	9b03      	ldr	r3, [sp, #12]
 801c1e6:	4298      	cmp	r0, r3
 801c1e8:	bfb8      	it	lt
 801c1ea:	4618      	movlt	r0, r3
 801c1ec:	e7a4      	b.n	801c138 <_printf_i+0x168>
 801c1ee:	2301      	movs	r3, #1
 801c1f0:	4632      	mov	r2, r6
 801c1f2:	4649      	mov	r1, r9
 801c1f4:	4640      	mov	r0, r8
 801c1f6:	47d0      	blx	sl
 801c1f8:	3001      	adds	r0, #1
 801c1fa:	d09b      	beq.n	801c134 <_printf_i+0x164>
 801c1fc:	3501      	adds	r5, #1
 801c1fe:	68e3      	ldr	r3, [r4, #12]
 801c200:	9903      	ldr	r1, [sp, #12]
 801c202:	1a5b      	subs	r3, r3, r1
 801c204:	42ab      	cmp	r3, r5
 801c206:	dcf2      	bgt.n	801c1ee <_printf_i+0x21e>
 801c208:	e7eb      	b.n	801c1e2 <_printf_i+0x212>
 801c20a:	2500      	movs	r5, #0
 801c20c:	f104 0619 	add.w	r6, r4, #25
 801c210:	e7f5      	b.n	801c1fe <_printf_i+0x22e>
 801c212:	bf00      	nop
 801c214:	0801fe5b 	.word	0x0801fe5b
 801c218:	0801fe6c 	.word	0x0801fe6c

0801c21c <_read_r>:
 801c21c:	b538      	push	{r3, r4, r5, lr}
 801c21e:	4d07      	ldr	r5, [pc, #28]	; (801c23c <_read_r+0x20>)
 801c220:	4604      	mov	r4, r0
 801c222:	4608      	mov	r0, r1
 801c224:	4611      	mov	r1, r2
 801c226:	2200      	movs	r2, #0
 801c228:	602a      	str	r2, [r5, #0]
 801c22a:	461a      	mov	r2, r3
 801c22c:	f7e6 f9ba 	bl	80025a4 <_read>
 801c230:	1c43      	adds	r3, r0, #1
 801c232:	d102      	bne.n	801c23a <_read_r+0x1e>
 801c234:	682b      	ldr	r3, [r5, #0]
 801c236:	b103      	cbz	r3, 801c23a <_read_r+0x1e>
 801c238:	6023      	str	r3, [r4, #0]
 801c23a:	bd38      	pop	{r3, r4, r5, pc}
 801c23c:	240082f8 	.word	0x240082f8

0801c240 <__swbuf_r>:
 801c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c242:	460e      	mov	r6, r1
 801c244:	4614      	mov	r4, r2
 801c246:	4605      	mov	r5, r0
 801c248:	b118      	cbz	r0, 801c252 <__swbuf_r+0x12>
 801c24a:	6983      	ldr	r3, [r0, #24]
 801c24c:	b90b      	cbnz	r3, 801c252 <__swbuf_r+0x12>
 801c24e:	f7ff f901 	bl	801b454 <__sinit>
 801c252:	4b21      	ldr	r3, [pc, #132]	; (801c2d8 <__swbuf_r+0x98>)
 801c254:	429c      	cmp	r4, r3
 801c256:	d12b      	bne.n	801c2b0 <__swbuf_r+0x70>
 801c258:	686c      	ldr	r4, [r5, #4]
 801c25a:	69a3      	ldr	r3, [r4, #24]
 801c25c:	60a3      	str	r3, [r4, #8]
 801c25e:	89a3      	ldrh	r3, [r4, #12]
 801c260:	071a      	lsls	r2, r3, #28
 801c262:	d52f      	bpl.n	801c2c4 <__swbuf_r+0x84>
 801c264:	6923      	ldr	r3, [r4, #16]
 801c266:	b36b      	cbz	r3, 801c2c4 <__swbuf_r+0x84>
 801c268:	6923      	ldr	r3, [r4, #16]
 801c26a:	6820      	ldr	r0, [r4, #0]
 801c26c:	1ac0      	subs	r0, r0, r3
 801c26e:	6963      	ldr	r3, [r4, #20]
 801c270:	b2f6      	uxtb	r6, r6
 801c272:	4283      	cmp	r3, r0
 801c274:	4637      	mov	r7, r6
 801c276:	dc04      	bgt.n	801c282 <__swbuf_r+0x42>
 801c278:	4621      	mov	r1, r4
 801c27a:	4628      	mov	r0, r5
 801c27c:	f7ff fc1c 	bl	801bab8 <_fflush_r>
 801c280:	bb30      	cbnz	r0, 801c2d0 <__swbuf_r+0x90>
 801c282:	68a3      	ldr	r3, [r4, #8]
 801c284:	3b01      	subs	r3, #1
 801c286:	60a3      	str	r3, [r4, #8]
 801c288:	6823      	ldr	r3, [r4, #0]
 801c28a:	1c5a      	adds	r2, r3, #1
 801c28c:	6022      	str	r2, [r4, #0]
 801c28e:	701e      	strb	r6, [r3, #0]
 801c290:	6963      	ldr	r3, [r4, #20]
 801c292:	3001      	adds	r0, #1
 801c294:	4283      	cmp	r3, r0
 801c296:	d004      	beq.n	801c2a2 <__swbuf_r+0x62>
 801c298:	89a3      	ldrh	r3, [r4, #12]
 801c29a:	07db      	lsls	r3, r3, #31
 801c29c:	d506      	bpl.n	801c2ac <__swbuf_r+0x6c>
 801c29e:	2e0a      	cmp	r6, #10
 801c2a0:	d104      	bne.n	801c2ac <__swbuf_r+0x6c>
 801c2a2:	4621      	mov	r1, r4
 801c2a4:	4628      	mov	r0, r5
 801c2a6:	f7ff fc07 	bl	801bab8 <_fflush_r>
 801c2aa:	b988      	cbnz	r0, 801c2d0 <__swbuf_r+0x90>
 801c2ac:	4638      	mov	r0, r7
 801c2ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2b0:	4b0a      	ldr	r3, [pc, #40]	; (801c2dc <__swbuf_r+0x9c>)
 801c2b2:	429c      	cmp	r4, r3
 801c2b4:	d101      	bne.n	801c2ba <__swbuf_r+0x7a>
 801c2b6:	68ac      	ldr	r4, [r5, #8]
 801c2b8:	e7cf      	b.n	801c25a <__swbuf_r+0x1a>
 801c2ba:	4b09      	ldr	r3, [pc, #36]	; (801c2e0 <__swbuf_r+0xa0>)
 801c2bc:	429c      	cmp	r4, r3
 801c2be:	bf08      	it	eq
 801c2c0:	68ec      	ldreq	r4, [r5, #12]
 801c2c2:	e7ca      	b.n	801c25a <__swbuf_r+0x1a>
 801c2c4:	4621      	mov	r1, r4
 801c2c6:	4628      	mov	r0, r5
 801c2c8:	f000 f80c 	bl	801c2e4 <__swsetup_r>
 801c2cc:	2800      	cmp	r0, #0
 801c2ce:	d0cb      	beq.n	801c268 <__swbuf_r+0x28>
 801c2d0:	f04f 37ff 	mov.w	r7, #4294967295
 801c2d4:	e7ea      	b.n	801c2ac <__swbuf_r+0x6c>
 801c2d6:	bf00      	nop
 801c2d8:	0801fd54 	.word	0x0801fd54
 801c2dc:	0801fd74 	.word	0x0801fd74
 801c2e0:	0801fd34 	.word	0x0801fd34

0801c2e4 <__swsetup_r>:
 801c2e4:	4b32      	ldr	r3, [pc, #200]	; (801c3b0 <__swsetup_r+0xcc>)
 801c2e6:	b570      	push	{r4, r5, r6, lr}
 801c2e8:	681d      	ldr	r5, [r3, #0]
 801c2ea:	4606      	mov	r6, r0
 801c2ec:	460c      	mov	r4, r1
 801c2ee:	b125      	cbz	r5, 801c2fa <__swsetup_r+0x16>
 801c2f0:	69ab      	ldr	r3, [r5, #24]
 801c2f2:	b913      	cbnz	r3, 801c2fa <__swsetup_r+0x16>
 801c2f4:	4628      	mov	r0, r5
 801c2f6:	f7ff f8ad 	bl	801b454 <__sinit>
 801c2fa:	4b2e      	ldr	r3, [pc, #184]	; (801c3b4 <__swsetup_r+0xd0>)
 801c2fc:	429c      	cmp	r4, r3
 801c2fe:	d10f      	bne.n	801c320 <__swsetup_r+0x3c>
 801c300:	686c      	ldr	r4, [r5, #4]
 801c302:	89a3      	ldrh	r3, [r4, #12]
 801c304:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c308:	0719      	lsls	r1, r3, #28
 801c30a:	d42c      	bmi.n	801c366 <__swsetup_r+0x82>
 801c30c:	06dd      	lsls	r5, r3, #27
 801c30e:	d411      	bmi.n	801c334 <__swsetup_r+0x50>
 801c310:	2309      	movs	r3, #9
 801c312:	6033      	str	r3, [r6, #0]
 801c314:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801c318:	81a3      	strh	r3, [r4, #12]
 801c31a:	f04f 30ff 	mov.w	r0, #4294967295
 801c31e:	e03e      	b.n	801c39e <__swsetup_r+0xba>
 801c320:	4b25      	ldr	r3, [pc, #148]	; (801c3b8 <__swsetup_r+0xd4>)
 801c322:	429c      	cmp	r4, r3
 801c324:	d101      	bne.n	801c32a <__swsetup_r+0x46>
 801c326:	68ac      	ldr	r4, [r5, #8]
 801c328:	e7eb      	b.n	801c302 <__swsetup_r+0x1e>
 801c32a:	4b24      	ldr	r3, [pc, #144]	; (801c3bc <__swsetup_r+0xd8>)
 801c32c:	429c      	cmp	r4, r3
 801c32e:	bf08      	it	eq
 801c330:	68ec      	ldreq	r4, [r5, #12]
 801c332:	e7e6      	b.n	801c302 <__swsetup_r+0x1e>
 801c334:	0758      	lsls	r0, r3, #29
 801c336:	d512      	bpl.n	801c35e <__swsetup_r+0x7a>
 801c338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801c33a:	b141      	cbz	r1, 801c34e <__swsetup_r+0x6a>
 801c33c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801c340:	4299      	cmp	r1, r3
 801c342:	d002      	beq.n	801c34a <__swsetup_r+0x66>
 801c344:	4630      	mov	r0, r6
 801c346:	f7ff fc2b 	bl	801bba0 <_free_r>
 801c34a:	2300      	movs	r3, #0
 801c34c:	6363      	str	r3, [r4, #52]	; 0x34
 801c34e:	89a3      	ldrh	r3, [r4, #12]
 801c350:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801c354:	81a3      	strh	r3, [r4, #12]
 801c356:	2300      	movs	r3, #0
 801c358:	6063      	str	r3, [r4, #4]
 801c35a:	6923      	ldr	r3, [r4, #16]
 801c35c:	6023      	str	r3, [r4, #0]
 801c35e:	89a3      	ldrh	r3, [r4, #12]
 801c360:	f043 0308 	orr.w	r3, r3, #8
 801c364:	81a3      	strh	r3, [r4, #12]
 801c366:	6923      	ldr	r3, [r4, #16]
 801c368:	b94b      	cbnz	r3, 801c37e <__swsetup_r+0x9a>
 801c36a:	89a3      	ldrh	r3, [r4, #12]
 801c36c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801c370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801c374:	d003      	beq.n	801c37e <__swsetup_r+0x9a>
 801c376:	4621      	mov	r1, r4
 801c378:	4630      	mov	r0, r6
 801c37a:	f000 f84d 	bl	801c418 <__smakebuf_r>
 801c37e:	89a0      	ldrh	r0, [r4, #12]
 801c380:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801c384:	f010 0301 	ands.w	r3, r0, #1
 801c388:	d00a      	beq.n	801c3a0 <__swsetup_r+0xbc>
 801c38a:	2300      	movs	r3, #0
 801c38c:	60a3      	str	r3, [r4, #8]
 801c38e:	6963      	ldr	r3, [r4, #20]
 801c390:	425b      	negs	r3, r3
 801c392:	61a3      	str	r3, [r4, #24]
 801c394:	6923      	ldr	r3, [r4, #16]
 801c396:	b943      	cbnz	r3, 801c3aa <__swsetup_r+0xc6>
 801c398:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801c39c:	d1ba      	bne.n	801c314 <__swsetup_r+0x30>
 801c39e:	bd70      	pop	{r4, r5, r6, pc}
 801c3a0:	0781      	lsls	r1, r0, #30
 801c3a2:	bf58      	it	pl
 801c3a4:	6963      	ldrpl	r3, [r4, #20]
 801c3a6:	60a3      	str	r3, [r4, #8]
 801c3a8:	e7f4      	b.n	801c394 <__swsetup_r+0xb0>
 801c3aa:	2000      	movs	r0, #0
 801c3ac:	e7f7      	b.n	801c39e <__swsetup_r+0xba>
 801c3ae:	bf00      	nop
 801c3b0:	2400003c 	.word	0x2400003c
 801c3b4:	0801fd54 	.word	0x0801fd54
 801c3b8:	0801fd74 	.word	0x0801fd74
 801c3bc:	0801fd34 	.word	0x0801fd34

0801c3c0 <abort>:
 801c3c0:	b508      	push	{r3, lr}
 801c3c2:	2006      	movs	r0, #6
 801c3c4:	f000 f890 	bl	801c4e8 <raise>
 801c3c8:	2001      	movs	r0, #1
 801c3ca:	f7e6 f8e1 	bl	8002590 <_exit>

0801c3ce <__swhatbuf_r>:
 801c3ce:	b570      	push	{r4, r5, r6, lr}
 801c3d0:	460e      	mov	r6, r1
 801c3d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c3d6:	2900      	cmp	r1, #0
 801c3d8:	b096      	sub	sp, #88	; 0x58
 801c3da:	4614      	mov	r4, r2
 801c3dc:	461d      	mov	r5, r3
 801c3de:	da07      	bge.n	801c3f0 <__swhatbuf_r+0x22>
 801c3e0:	2300      	movs	r3, #0
 801c3e2:	602b      	str	r3, [r5, #0]
 801c3e4:	89b3      	ldrh	r3, [r6, #12]
 801c3e6:	061a      	lsls	r2, r3, #24
 801c3e8:	d410      	bmi.n	801c40c <__swhatbuf_r+0x3e>
 801c3ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c3ee:	e00e      	b.n	801c40e <__swhatbuf_r+0x40>
 801c3f0:	466a      	mov	r2, sp
 801c3f2:	f000 f895 	bl	801c520 <_fstat_r>
 801c3f6:	2800      	cmp	r0, #0
 801c3f8:	dbf2      	blt.n	801c3e0 <__swhatbuf_r+0x12>
 801c3fa:	9a01      	ldr	r2, [sp, #4]
 801c3fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c400:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c404:	425a      	negs	r2, r3
 801c406:	415a      	adcs	r2, r3
 801c408:	602a      	str	r2, [r5, #0]
 801c40a:	e7ee      	b.n	801c3ea <__swhatbuf_r+0x1c>
 801c40c:	2340      	movs	r3, #64	; 0x40
 801c40e:	2000      	movs	r0, #0
 801c410:	6023      	str	r3, [r4, #0]
 801c412:	b016      	add	sp, #88	; 0x58
 801c414:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c418 <__smakebuf_r>:
 801c418:	898b      	ldrh	r3, [r1, #12]
 801c41a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c41c:	079d      	lsls	r5, r3, #30
 801c41e:	4606      	mov	r6, r0
 801c420:	460c      	mov	r4, r1
 801c422:	d507      	bpl.n	801c434 <__smakebuf_r+0x1c>
 801c424:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c428:	6023      	str	r3, [r4, #0]
 801c42a:	6123      	str	r3, [r4, #16]
 801c42c:	2301      	movs	r3, #1
 801c42e:	6163      	str	r3, [r4, #20]
 801c430:	b002      	add	sp, #8
 801c432:	bd70      	pop	{r4, r5, r6, pc}
 801c434:	ab01      	add	r3, sp, #4
 801c436:	466a      	mov	r2, sp
 801c438:	f7ff ffc9 	bl	801c3ce <__swhatbuf_r>
 801c43c:	9900      	ldr	r1, [sp, #0]
 801c43e:	4605      	mov	r5, r0
 801c440:	4630      	mov	r0, r6
 801c442:	f7ff f8f1 	bl	801b628 <_malloc_r>
 801c446:	b948      	cbnz	r0, 801c45c <__smakebuf_r+0x44>
 801c448:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c44c:	059a      	lsls	r2, r3, #22
 801c44e:	d4ef      	bmi.n	801c430 <__smakebuf_r+0x18>
 801c450:	f023 0303 	bic.w	r3, r3, #3
 801c454:	f043 0302 	orr.w	r3, r3, #2
 801c458:	81a3      	strh	r3, [r4, #12]
 801c45a:	e7e3      	b.n	801c424 <__smakebuf_r+0xc>
 801c45c:	4b0d      	ldr	r3, [pc, #52]	; (801c494 <__smakebuf_r+0x7c>)
 801c45e:	62b3      	str	r3, [r6, #40]	; 0x28
 801c460:	89a3      	ldrh	r3, [r4, #12]
 801c462:	6020      	str	r0, [r4, #0]
 801c464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c468:	81a3      	strh	r3, [r4, #12]
 801c46a:	9b00      	ldr	r3, [sp, #0]
 801c46c:	6163      	str	r3, [r4, #20]
 801c46e:	9b01      	ldr	r3, [sp, #4]
 801c470:	6120      	str	r0, [r4, #16]
 801c472:	b15b      	cbz	r3, 801c48c <__smakebuf_r+0x74>
 801c474:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c478:	4630      	mov	r0, r6
 801c47a:	f000 f863 	bl	801c544 <_isatty_r>
 801c47e:	b128      	cbz	r0, 801c48c <__smakebuf_r+0x74>
 801c480:	89a3      	ldrh	r3, [r4, #12]
 801c482:	f023 0303 	bic.w	r3, r3, #3
 801c486:	f043 0301 	orr.w	r3, r3, #1
 801c48a:	81a3      	strh	r3, [r4, #12]
 801c48c:	89a0      	ldrh	r0, [r4, #12]
 801c48e:	4305      	orrs	r5, r0
 801c490:	81a5      	strh	r5, [r4, #12]
 801c492:	e7cd      	b.n	801c430 <__smakebuf_r+0x18>
 801c494:	0801b3ed 	.word	0x0801b3ed

0801c498 <_raise_r>:
 801c498:	291f      	cmp	r1, #31
 801c49a:	b538      	push	{r3, r4, r5, lr}
 801c49c:	4604      	mov	r4, r0
 801c49e:	460d      	mov	r5, r1
 801c4a0:	d904      	bls.n	801c4ac <_raise_r+0x14>
 801c4a2:	2316      	movs	r3, #22
 801c4a4:	6003      	str	r3, [r0, #0]
 801c4a6:	f04f 30ff 	mov.w	r0, #4294967295
 801c4aa:	bd38      	pop	{r3, r4, r5, pc}
 801c4ac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801c4ae:	b112      	cbz	r2, 801c4b6 <_raise_r+0x1e>
 801c4b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801c4b4:	b94b      	cbnz	r3, 801c4ca <_raise_r+0x32>
 801c4b6:	4620      	mov	r0, r4
 801c4b8:	f000 f830 	bl	801c51c <_getpid_r>
 801c4bc:	462a      	mov	r2, r5
 801c4be:	4601      	mov	r1, r0
 801c4c0:	4620      	mov	r0, r4
 801c4c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c4c6:	f000 b817 	b.w	801c4f8 <_kill_r>
 801c4ca:	2b01      	cmp	r3, #1
 801c4cc:	d00a      	beq.n	801c4e4 <_raise_r+0x4c>
 801c4ce:	1c59      	adds	r1, r3, #1
 801c4d0:	d103      	bne.n	801c4da <_raise_r+0x42>
 801c4d2:	2316      	movs	r3, #22
 801c4d4:	6003      	str	r3, [r0, #0]
 801c4d6:	2001      	movs	r0, #1
 801c4d8:	e7e7      	b.n	801c4aa <_raise_r+0x12>
 801c4da:	2400      	movs	r4, #0
 801c4dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801c4e0:	4628      	mov	r0, r5
 801c4e2:	4798      	blx	r3
 801c4e4:	2000      	movs	r0, #0
 801c4e6:	e7e0      	b.n	801c4aa <_raise_r+0x12>

0801c4e8 <raise>:
 801c4e8:	4b02      	ldr	r3, [pc, #8]	; (801c4f4 <raise+0xc>)
 801c4ea:	4601      	mov	r1, r0
 801c4ec:	6818      	ldr	r0, [r3, #0]
 801c4ee:	f7ff bfd3 	b.w	801c498 <_raise_r>
 801c4f2:	bf00      	nop
 801c4f4:	2400003c 	.word	0x2400003c

0801c4f8 <_kill_r>:
 801c4f8:	b538      	push	{r3, r4, r5, lr}
 801c4fa:	4d07      	ldr	r5, [pc, #28]	; (801c518 <_kill_r+0x20>)
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	4604      	mov	r4, r0
 801c500:	4608      	mov	r0, r1
 801c502:	4611      	mov	r1, r2
 801c504:	602b      	str	r3, [r5, #0]
 801c506:	f7e6 f831 	bl	800256c <_kill>
 801c50a:	1c43      	adds	r3, r0, #1
 801c50c:	d102      	bne.n	801c514 <_kill_r+0x1c>
 801c50e:	682b      	ldr	r3, [r5, #0]
 801c510:	b103      	cbz	r3, 801c514 <_kill_r+0x1c>
 801c512:	6023      	str	r3, [r4, #0]
 801c514:	bd38      	pop	{r3, r4, r5, pc}
 801c516:	bf00      	nop
 801c518:	240082f8 	.word	0x240082f8

0801c51c <_getpid_r>:
 801c51c:	f7e6 b81e 	b.w	800255c <_getpid>

0801c520 <_fstat_r>:
 801c520:	b538      	push	{r3, r4, r5, lr}
 801c522:	4d07      	ldr	r5, [pc, #28]	; (801c540 <_fstat_r+0x20>)
 801c524:	2300      	movs	r3, #0
 801c526:	4604      	mov	r4, r0
 801c528:	4608      	mov	r0, r1
 801c52a:	4611      	mov	r1, r2
 801c52c:	602b      	str	r3, [r5, #0]
 801c52e:	f7e6 f87e 	bl	800262e <_fstat>
 801c532:	1c43      	adds	r3, r0, #1
 801c534:	d102      	bne.n	801c53c <_fstat_r+0x1c>
 801c536:	682b      	ldr	r3, [r5, #0]
 801c538:	b103      	cbz	r3, 801c53c <_fstat_r+0x1c>
 801c53a:	6023      	str	r3, [r4, #0]
 801c53c:	bd38      	pop	{r3, r4, r5, pc}
 801c53e:	bf00      	nop
 801c540:	240082f8 	.word	0x240082f8

0801c544 <_isatty_r>:
 801c544:	b538      	push	{r3, r4, r5, lr}
 801c546:	4d06      	ldr	r5, [pc, #24]	; (801c560 <_isatty_r+0x1c>)
 801c548:	2300      	movs	r3, #0
 801c54a:	4604      	mov	r4, r0
 801c54c:	4608      	mov	r0, r1
 801c54e:	602b      	str	r3, [r5, #0]
 801c550:	f7e6 f87d 	bl	800264e <_isatty>
 801c554:	1c43      	adds	r3, r0, #1
 801c556:	d102      	bne.n	801c55e <_isatty_r+0x1a>
 801c558:	682b      	ldr	r3, [r5, #0]
 801c55a:	b103      	cbz	r3, 801c55e <_isatty_r+0x1a>
 801c55c:	6023      	str	r3, [r4, #0]
 801c55e:	bd38      	pop	{r3, r4, r5, pc}
 801c560:	240082f8 	.word	0x240082f8

0801c564 <_init>:
 801c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c566:	bf00      	nop
 801c568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c56a:	bc08      	pop	{r3}
 801c56c:	469e      	mov	lr, r3
 801c56e:	4770      	bx	lr

0801c570 <_fini>:
 801c570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c572:	bf00      	nop
 801c574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c576:	bc08      	pop	{r3}
 801c578:	469e      	mov	lr, r3
 801c57a:	4770      	bx	lr
