
ECE_554_ProjectBaseline2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a944  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003770  0801ac14  0801ac14  0002ac14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801e384  0801e384  0002e384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801e38c  0801e38c  0002e38c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801e390  0801e390  0002e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000000a0  24000000  0801e394  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000782c  240000a0  0801e434  000300a0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240078cc  0801e434  000378cc  2**0
                  ALLOC
  9 .lwip_sec     000018d0  30000000  30000000  00040000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  000300a0  2**0
                  CONTENTS, READONLY
 11 .debug_info   00075c32  00000000  00000000  000300ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000b802  00000000  00000000  000a5d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002dd0  00000000  00000000  000b1508  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00002b58  00000000  00000000  000b42d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00049324  00000000  00000000  000b6e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0004a1b0  00000000  00000000  00100154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0018145a  00000000  00000000  0014a304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  002cb75e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000c6f4  00000000  00000000  002cb7b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240000a0 	.word	0x240000a0
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0801abfc 	.word	0x0801abfc

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240000a4 	.word	0x240000a4
 800030c:	0801abfc 	.word	0x0801abfc

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <memchr>:
 8000320:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000324:	2a10      	cmp	r2, #16
 8000326:	db2b      	blt.n	8000380 <memchr+0x60>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	d008      	beq.n	8000340 <memchr+0x20>
 800032e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000332:	3a01      	subs	r2, #1
 8000334:	428b      	cmp	r3, r1
 8000336:	d02d      	beq.n	8000394 <memchr+0x74>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	b342      	cbz	r2, 8000390 <memchr+0x70>
 800033e:	d1f6      	bne.n	800032e <memchr+0xe>
 8000340:	b4f0      	push	{r4, r5, r6, r7}
 8000342:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000346:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800034a:	f022 0407 	bic.w	r4, r2, #7
 800034e:	f07f 0700 	mvns.w	r7, #0
 8000352:	2300      	movs	r3, #0
 8000354:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000358:	3c08      	subs	r4, #8
 800035a:	ea85 0501 	eor.w	r5, r5, r1
 800035e:	ea86 0601 	eor.w	r6, r6, r1
 8000362:	fa85 f547 	uadd8	r5, r5, r7
 8000366:	faa3 f587 	sel	r5, r3, r7
 800036a:	fa86 f647 	uadd8	r6, r6, r7
 800036e:	faa5 f687 	sel	r6, r5, r7
 8000372:	b98e      	cbnz	r6, 8000398 <memchr+0x78>
 8000374:	d1ee      	bne.n	8000354 <memchr+0x34>
 8000376:	bcf0      	pop	{r4, r5, r6, r7}
 8000378:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800037c:	f002 0207 	and.w	r2, r2, #7
 8000380:	b132      	cbz	r2, 8000390 <memchr+0x70>
 8000382:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000386:	3a01      	subs	r2, #1
 8000388:	ea83 0301 	eor.w	r3, r3, r1
 800038c:	b113      	cbz	r3, 8000394 <memchr+0x74>
 800038e:	d1f8      	bne.n	8000382 <memchr+0x62>
 8000390:	2000      	movs	r0, #0
 8000392:	4770      	bx	lr
 8000394:	3801      	subs	r0, #1
 8000396:	4770      	bx	lr
 8000398:	2d00      	cmp	r5, #0
 800039a:	bf06      	itte	eq
 800039c:	4635      	moveq	r5, r6
 800039e:	3803      	subeq	r0, #3
 80003a0:	3807      	subne	r0, #7
 80003a2:	f015 0f01 	tst.w	r5, #1
 80003a6:	d107      	bne.n	80003b8 <memchr+0x98>
 80003a8:	3001      	adds	r0, #1
 80003aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003ae:	bf02      	ittt	eq
 80003b0:	3001      	addeq	r0, #1
 80003b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003b6:	3001      	addeq	r0, #1
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	3801      	subs	r0, #1
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295
 80003d4:	f000 b96e 	b.w	80006b4 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	4604      	mov	r4, r0
 80003f8:	468c      	mov	ip, r1
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8083 	bne.w	8000506 <__udivmoddi4+0x116>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d947      	bls.n	8000496 <__udivmoddi4+0xa6>
 8000406:	fab2 f282 	clz	r2, r2
 800040a:	b142      	cbz	r2, 800041e <__udivmoddi4+0x2e>
 800040c:	f1c2 0020 	rsb	r0, r2, #32
 8000410:	fa24 f000 	lsr.w	r0, r4, r0
 8000414:	4091      	lsls	r1, r2
 8000416:	4097      	lsls	r7, r2
 8000418:	ea40 0c01 	orr.w	ip, r0, r1
 800041c:	4094      	lsls	r4, r2
 800041e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fbbc f6f8 	udiv	r6, ip, r8
 8000428:	fa1f fe87 	uxth.w	lr, r7
 800042c:	fb08 c116 	mls	r1, r8, r6, ip
 8000430:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000434:	fb06 f10e 	mul.w	r1, r6, lr
 8000438:	4299      	cmp	r1, r3
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x60>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000442:	f080 8119 	bcs.w	8000678 <__udivmoddi4+0x288>
 8000446:	4299      	cmp	r1, r3
 8000448:	f240 8116 	bls.w	8000678 <__udivmoddi4+0x288>
 800044c:	3e02      	subs	r6, #2
 800044e:	443b      	add	r3, r7
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb00 fe0e 	mul.w	lr, r0, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x8c>
 8000468:	193c      	adds	r4, r7, r4
 800046a:	f100 33ff 	add.w	r3, r0, #4294967295
 800046e:	f080 8105 	bcs.w	800067c <__udivmoddi4+0x28c>
 8000472:	45a6      	cmp	lr, r4
 8000474:	f240 8102 	bls.w	800067c <__udivmoddi4+0x28c>
 8000478:	3802      	subs	r0, #2
 800047a:	443c      	add	r4, r7
 800047c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	2600      	movs	r6, #0
 8000486:	b11d      	cbz	r5, 8000490 <__udivmoddi4+0xa0>
 8000488:	40d4      	lsrs	r4, r2
 800048a:	2300      	movs	r3, #0
 800048c:	e9c5 4300 	strd	r4, r3, [r5]
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	b902      	cbnz	r2, 800049a <__udivmoddi4+0xaa>
 8000498:	deff      	udf	#255	; 0xff
 800049a:	fab2 f282 	clz	r2, r2
 800049e:	2a00      	cmp	r2, #0
 80004a0:	d150      	bne.n	8000544 <__udivmoddi4+0x154>
 80004a2:	1bcb      	subs	r3, r1, r7
 80004a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a8:	fa1f f887 	uxth.w	r8, r7
 80004ac:	2601      	movs	r6, #1
 80004ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80004b2:	0c21      	lsrs	r1, r4, #16
 80004b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004bc:	fb08 f30c 	mul.w	r3, r8, ip
 80004c0:	428b      	cmp	r3, r1
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0xe4>
 80004c4:	1879      	adds	r1, r7, r1
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0xe2>
 80004cc:	428b      	cmp	r3, r1
 80004ce:	f200 80e9 	bhi.w	80006a4 <__udivmoddi4+0x2b4>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1ac9      	subs	r1, r1, r3
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x10c>
 80004ec:	193c      	adds	r4, r7, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x10a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80d9 	bhi.w	80006ac <__udivmoddi4+0x2bc>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e7bf      	b.n	8000486 <__udivmoddi4+0x96>
 8000506:	428b      	cmp	r3, r1
 8000508:	d909      	bls.n	800051e <__udivmoddi4+0x12e>
 800050a:	2d00      	cmp	r5, #0
 800050c:	f000 80b1 	beq.w	8000672 <__udivmoddi4+0x282>
 8000510:	2600      	movs	r6, #0
 8000512:	e9c5 0100 	strd	r0, r1, [r5]
 8000516:	4630      	mov	r0, r6
 8000518:	4631      	mov	r1, r6
 800051a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800051e:	fab3 f683 	clz	r6, r3
 8000522:	2e00      	cmp	r6, #0
 8000524:	d14a      	bne.n	80005bc <__udivmoddi4+0x1cc>
 8000526:	428b      	cmp	r3, r1
 8000528:	d302      	bcc.n	8000530 <__udivmoddi4+0x140>
 800052a:	4282      	cmp	r2, r0
 800052c:	f200 80b8 	bhi.w	80006a0 <__udivmoddi4+0x2b0>
 8000530:	1a84      	subs	r4, r0, r2
 8000532:	eb61 0103 	sbc.w	r1, r1, r3
 8000536:	2001      	movs	r0, #1
 8000538:	468c      	mov	ip, r1
 800053a:	2d00      	cmp	r5, #0
 800053c:	d0a8      	beq.n	8000490 <__udivmoddi4+0xa0>
 800053e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000542:	e7a5      	b.n	8000490 <__udivmoddi4+0xa0>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f603 	lsr.w	r6, r0, r3
 800054c:	4097      	lsls	r7, r2
 800054e:	fa01 f002 	lsl.w	r0, r1, r2
 8000552:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000556:	40d9      	lsrs	r1, r3
 8000558:	4330      	orrs	r0, r6
 800055a:	0c03      	lsrs	r3, r0, #16
 800055c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000560:	fa1f f887 	uxth.w	r8, r7
 8000564:	fb0e 1116 	mls	r1, lr, r6, r1
 8000568:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056c:	fb06 f108 	mul.w	r1, r6, r8
 8000570:	4299      	cmp	r1, r3
 8000572:	fa04 f402 	lsl.w	r4, r4, r2
 8000576:	d909      	bls.n	800058c <__udivmoddi4+0x19c>
 8000578:	18fb      	adds	r3, r7, r3
 800057a:	f106 3cff 	add.w	ip, r6, #4294967295
 800057e:	f080 808d 	bcs.w	800069c <__udivmoddi4+0x2ac>
 8000582:	4299      	cmp	r1, r3
 8000584:	f240 808a 	bls.w	800069c <__udivmoddi4+0x2ac>
 8000588:	3e02      	subs	r6, #2
 800058a:	443b      	add	r3, r7
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b281      	uxth	r1, r0
 8000590:	fbb3 f0fe 	udiv	r0, r3, lr
 8000594:	fb0e 3310 	mls	r3, lr, r0, r3
 8000598:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800059c:	fb00 f308 	mul.w	r3, r0, r8
 80005a0:	428b      	cmp	r3, r1
 80005a2:	d907      	bls.n	80005b4 <__udivmoddi4+0x1c4>
 80005a4:	1879      	adds	r1, r7, r1
 80005a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80005aa:	d273      	bcs.n	8000694 <__udivmoddi4+0x2a4>
 80005ac:	428b      	cmp	r3, r1
 80005ae:	d971      	bls.n	8000694 <__udivmoddi4+0x2a4>
 80005b0:	3802      	subs	r0, #2
 80005b2:	4439      	add	r1, r7
 80005b4:	1acb      	subs	r3, r1, r3
 80005b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005ba:	e778      	b.n	80004ae <__udivmoddi4+0xbe>
 80005bc:	f1c6 0c20 	rsb	ip, r6, #32
 80005c0:	fa03 f406 	lsl.w	r4, r3, r6
 80005c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005c8:	431c      	orrs	r4, r3
 80005ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80005ce:	fa01 f306 	lsl.w	r3, r1, r6
 80005d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005da:	431f      	orrs	r7, r3
 80005dc:	0c3b      	lsrs	r3, r7, #16
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fa1f f884 	uxth.w	r8, r4
 80005e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005ee:	fb09 fa08 	mul.w	sl, r9, r8
 80005f2:	458a      	cmp	sl, r1
 80005f4:	fa02 f206 	lsl.w	r2, r2, r6
 80005f8:	fa00 f306 	lsl.w	r3, r0, r6
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x220>
 80005fe:	1861      	adds	r1, r4, r1
 8000600:	f109 30ff 	add.w	r0, r9, #4294967295
 8000604:	d248      	bcs.n	8000698 <__udivmoddi4+0x2a8>
 8000606:	458a      	cmp	sl, r1
 8000608:	d946      	bls.n	8000698 <__udivmoddi4+0x2a8>
 800060a:	f1a9 0902 	sub.w	r9, r9, #2
 800060e:	4421      	add	r1, r4
 8000610:	eba1 010a 	sub.w	r1, r1, sl
 8000614:	b2bf      	uxth	r7, r7
 8000616:	fbb1 f0fe 	udiv	r0, r1, lr
 800061a:	fb0e 1110 	mls	r1, lr, r0, r1
 800061e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000622:	fb00 f808 	mul.w	r8, r0, r8
 8000626:	45b8      	cmp	r8, r7
 8000628:	d907      	bls.n	800063a <__udivmoddi4+0x24a>
 800062a:	19e7      	adds	r7, r4, r7
 800062c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000630:	d22e      	bcs.n	8000690 <__udivmoddi4+0x2a0>
 8000632:	45b8      	cmp	r8, r7
 8000634:	d92c      	bls.n	8000690 <__udivmoddi4+0x2a0>
 8000636:	3802      	subs	r0, #2
 8000638:	4427      	add	r7, r4
 800063a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800063e:	eba7 0708 	sub.w	r7, r7, r8
 8000642:	fba0 8902 	umull	r8, r9, r0, r2
 8000646:	454f      	cmp	r7, r9
 8000648:	46c6      	mov	lr, r8
 800064a:	4649      	mov	r1, r9
 800064c:	d31a      	bcc.n	8000684 <__udivmoddi4+0x294>
 800064e:	d017      	beq.n	8000680 <__udivmoddi4+0x290>
 8000650:	b15d      	cbz	r5, 800066a <__udivmoddi4+0x27a>
 8000652:	ebb3 020e 	subs.w	r2, r3, lr
 8000656:	eb67 0701 	sbc.w	r7, r7, r1
 800065a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800065e:	40f2      	lsrs	r2, r6
 8000660:	ea4c 0202 	orr.w	r2, ip, r2
 8000664:	40f7      	lsrs	r7, r6
 8000666:	e9c5 2700 	strd	r2, r7, [r5]
 800066a:	2600      	movs	r6, #0
 800066c:	4631      	mov	r1, r6
 800066e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e70b      	b.n	8000490 <__udivmoddi4+0xa0>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0x60>
 800067c:	4618      	mov	r0, r3
 800067e:	e6fd      	b.n	800047c <__udivmoddi4+0x8c>
 8000680:	4543      	cmp	r3, r8
 8000682:	d2e5      	bcs.n	8000650 <__udivmoddi4+0x260>
 8000684:	ebb8 0e02 	subs.w	lr, r8, r2
 8000688:	eb69 0104 	sbc.w	r1, r9, r4
 800068c:	3801      	subs	r0, #1
 800068e:	e7df      	b.n	8000650 <__udivmoddi4+0x260>
 8000690:	4608      	mov	r0, r1
 8000692:	e7d2      	b.n	800063a <__udivmoddi4+0x24a>
 8000694:	4660      	mov	r0, ip
 8000696:	e78d      	b.n	80005b4 <__udivmoddi4+0x1c4>
 8000698:	4681      	mov	r9, r0
 800069a:	e7b9      	b.n	8000610 <__udivmoddi4+0x220>
 800069c:	4666      	mov	r6, ip
 800069e:	e775      	b.n	800058c <__udivmoddi4+0x19c>
 80006a0:	4630      	mov	r0, r6
 80006a2:	e74a      	b.n	800053a <__udivmoddi4+0x14a>
 80006a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80006a8:	4439      	add	r1, r7
 80006aa:	e713      	b.n	80004d4 <__udivmoddi4+0xe4>
 80006ac:	3802      	subs	r0, #2
 80006ae:	443c      	add	r4, r7
 80006b0:	e724      	b.n	80004fc <__udivmoddi4+0x10c>
 80006b2:	bf00      	nop

080006b4 <__aeabi_idiv0>:
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop

080006b8 <fillRect>:
{
	ST7735_DrawPixel(x, y, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80006b8:	b590      	push	{r4, r7, lr}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af02      	add	r7, sp, #8
 80006be:	4604      	mov	r4, r0
 80006c0:	4608      	mov	r0, r1
 80006c2:	4611      	mov	r1, r2
 80006c4:	461a      	mov	r2, r3
 80006c6:	4623      	mov	r3, r4
 80006c8:	80fb      	strh	r3, [r7, #6]
 80006ca:	4603      	mov	r3, r0
 80006cc:	80bb      	strh	r3, [r7, #4]
 80006ce:	460b      	mov	r3, r1
 80006d0:	807b      	strh	r3, [r7, #2]
 80006d2:	4613      	mov	r3, r2
 80006d4:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 80006d6:	88f8      	ldrh	r0, [r7, #6]
 80006d8:	88b9      	ldrh	r1, [r7, #4]
 80006da:	887a      	ldrh	r2, [r7, #2]
 80006dc:	883c      	ldrh	r4, [r7, #0]
 80006de:	8b3b      	ldrh	r3, [r7, #24]
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	4623      	mov	r3, r4
 80006e4:	f000 faa6 	bl	8000c34 <ST7735_FillRectangle>
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd90      	pop	{r4, r7, pc}

080006f0 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af02      	add	r7, sp, #8
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <fillScreen+0x2c>)
 80006fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <fillScreen+0x30>)
 8000702:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000706:	88fb      	ldrh	r3, [r7, #6]
 8000708:	9300      	str	r3, [sp, #0]
 800070a:	460b      	mov	r3, r1
 800070c:	2100      	movs	r1, #0
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff ffd2 	bl	80006b8 <fillRect>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	24004294 	.word	0x24004294
 8000720:	24004298 	.word	0x24004298

08000724 <print_to_serial>:
#include "Globals.h"


/* Function prototypes -----------------------------------------------*/
void print_to_serial(char *myString)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b09c      	sub	sp, #112	; 0x70
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint8_t buffer[100];

	strcpy((char*)buffer, myString);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	6879      	ldr	r1, [r7, #4]
 8000732:	4618      	mov	r0, r3
 8000734:	f019 fc2b 	bl	8019f8e <strcpy>
	HAL_UART_Transmit(&huart3, buffer, strlen((char*)buffer), HAL_MAX_DELAY);
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fde7 	bl	8000310 <strlen>
 8000742:	4603      	mov	r3, r0
 8000744:	b29a      	uxth	r2, r3
 8000746:	f107 010c 	add.w	r1, r7, #12
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	4803      	ldr	r0, [pc, #12]	; (800075c <print_to_serial+0x38>)
 8000750:	f009 f978 	bl	8009a44 <HAL_UART_Transmit>

}
 8000754:	bf00      	nop
 8000756:	3770      	adds	r7, #112	; 0x70
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	24004550 	.word	0x24004550

08000760 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	2101      	movs	r1, #1
 8000768:	4802      	ldr	r0, [pc, #8]	; (8000774 <ST7735_Select+0x14>)
 800076a:	f005 fe19 	bl	80063a0 <HAL_GPIO_WritePin>
}
 800076e:	bf00      	nop
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	58020800 	.word	0x58020800

08000778 <ST7735_Unselect>:

void ST7735_Unselect()
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2101      	movs	r1, #1
 8000780:	4802      	ldr	r0, [pc, #8]	; (800078c <ST7735_Unselect+0x14>)
 8000782:	f005 fe0d 	bl	80063a0 <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	58020800 	.word	0x58020800

08000790 <ST7735_Reset>:

void ST7735_Reset()
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8000794:	2200      	movs	r2, #0
 8000796:	2108      	movs	r1, #8
 8000798:	4806      	ldr	r0, [pc, #24]	; (80007b4 <ST7735_Reset+0x24>)
 800079a:	f005 fe01 	bl	80063a0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800079e:	2005      	movs	r0, #5
 80007a0:	f002 f8de 	bl	8002960 <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2108      	movs	r1, #8
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <ST7735_Reset+0x24>)
 80007aa:	f005 fdf9 	bl	80063a0 <HAL_GPIO_WritePin>
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	58020800 	.word	0x58020800

080007b8 <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2108      	movs	r1, #8
 80007c6:	4807      	ldr	r0, [pc, #28]	; (80007e4 <ST7735_WriteCommand+0x2c>)
 80007c8:	f005 fdea 	bl	80063a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80007cc:	1df9      	adds	r1, r7, #7
 80007ce:	f04f 33ff 	mov.w	r3, #4294967295
 80007d2:	2201      	movs	r2, #1
 80007d4:	4804      	ldr	r0, [pc, #16]	; (80007e8 <ST7735_WriteCommand+0x30>)
 80007d6:	f008 fa07 	bl	8008be8 <HAL_SPI_Transmit>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	58020000 	.word	0x58020000
 80007e8:	24004430 	.word	0x24004430

080007ec <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80007f6:	2201      	movs	r2, #1
 80007f8:	2108      	movs	r1, #8
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <ST7735_WriteData+0x2c>)
 80007fc:	f005 fdd0 	bl	80063a0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	b29a      	uxth	r2, r3
 8000804:	f04f 33ff 	mov.w	r3, #4294967295
 8000808:	6879      	ldr	r1, [r7, #4]
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <ST7735_WriteData+0x30>)
 800080c:	f008 f9ec 	bl	8008be8 <HAL_SPI_Transmit>
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58020000 	.word	0x58020000
 800081c:	24004430 	.word	0x24004430

08000820 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	607a      	str	r2, [r7, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8000832:	e034      	b.n	800089e <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800083e:	7afb      	ldrb	r3, [r7, #11]
 8000840:	4618      	mov	r0, r3
 8000842:	f7ff ffb9 	bl	80007b8 <ST7735_WriteCommand>

        numArgs = *addr++;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	1c5a      	adds	r2, r3, #1
 800084a:	607a      	str	r2, [r7, #4]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8000850:	7abb      	ldrb	r3, [r7, #10]
 8000852:	b29b      	uxth	r3, r3
 8000854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000858:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800085a:	7abb      	ldrb	r3, [r7, #10]
 800085c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000860:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8000862:	7abb      	ldrb	r3, [r7, #10]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d008      	beq.n	800087a <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8000868:	7abb      	ldrb	r3, [r7, #10]
 800086a:	4619      	mov	r1, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff ffbd 	bl	80007ec <ST7735_WriteData>
            addr += numArgs;
 8000872:	7abb      	ldrb	r3, [r7, #10]
 8000874:	687a      	ldr	r2, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800087a:	89bb      	ldrh	r3, [r7, #12]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d00e      	beq.n	800089e <DisplayInit+0x7e>
            ms = *addr++;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	607a      	str	r2, [r7, #4]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800088a:	89bb      	ldrh	r3, [r7, #12]
 800088c:	2bff      	cmp	r3, #255	; 0xff
 800088e:	d102      	bne.n	8000896 <DisplayInit+0x76>
 8000890:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000894:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8000896:	89bb      	ldrh	r3, [r7, #12]
 8000898:	4618      	mov	r0, r3
 800089a:	f002 f861 	bl	8002960 <HAL_Delay>
    while(numCommands--) {
 800089e:	7bfb      	ldrb	r3, [r7, #15]
 80008a0:	1e5a      	subs	r2, r3, #1
 80008a2:	73fa      	strb	r2, [r7, #15]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d1c5      	bne.n	8000834 <DisplayInit+0x14>
        }
    }
}
 80008a8:	bf00      	nop
 80008aa:	bf00      	nop
 80008ac:	3710      	adds	r7, #16
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 80008b4:	b590      	push	{r4, r7, lr}
 80008b6:	b085      	sub	sp, #20
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4604      	mov	r4, r0
 80008bc:	4608      	mov	r0, r1
 80008be:	4611      	mov	r1, r2
 80008c0:	461a      	mov	r2, r3
 80008c2:	4623      	mov	r3, r4
 80008c4:	71fb      	strb	r3, [r7, #7]
 80008c6:	4603      	mov	r3, r0
 80008c8:	71bb      	strb	r3, [r7, #6]
 80008ca:	460b      	mov	r3, r1
 80008cc:	717b      	strb	r3, [r7, #5]
 80008ce:	4613      	mov	r3, r2
 80008d0:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80008d2:	202a      	movs	r0, #42	; 0x2a
 80008d4:	f7ff ff70 	bl	80007b8 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80008d8:	2300      	movs	r3, #0
 80008da:	733b      	strb	r3, [r7, #12]
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <ST7735_SetAddressWindow+0x88>)
 80008de:	781a      	ldrb	r2, [r3, #0]
 80008e0:	79fb      	ldrb	r3, [r7, #7]
 80008e2:	4413      	add	r3, r2
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	737b      	strb	r3, [r7, #13]
 80008e8:	2300      	movs	r3, #0
 80008ea:	73bb      	strb	r3, [r7, #14]
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <ST7735_SetAddressWindow+0x88>)
 80008ee:	781a      	ldrb	r2, [r3, #0]
 80008f0:	797b      	ldrb	r3, [r7, #5]
 80008f2:	4413      	add	r3, r2
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2104      	movs	r1, #4
 80008fe:	4618      	mov	r0, r3
 8000900:	f7ff ff74 	bl	80007ec <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8000904:	202b      	movs	r0, #43	; 0x2b
 8000906:	f7ff ff57 	bl	80007b8 <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <ST7735_SetAddressWindow+0x8c>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	79bb      	ldrb	r3, [r7, #6]
 8000910:	4413      	add	r3, r2
 8000912:	b2db      	uxtb	r3, r3
 8000914:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <ST7735_SetAddressWindow+0x8c>)
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	793b      	ldrb	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	b2db      	uxtb	r3, r3
 8000920:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	2104      	movs	r1, #4
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff5f 	bl	80007ec <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 800092e:	202c      	movs	r0, #44	; 0x2c
 8000930:	f7ff ff42 	bl	80007b8 <ST7735_WriteCommand>
}
 8000934:	bf00      	nop
 8000936:	3714      	adds	r7, #20
 8000938:	46bd      	mov	sp, r7
 800093a:	bd90      	pop	{r4, r7, pc}
 800093c:	2400428c 	.word	0x2400428c
 8000940:	24004290 	.word	0x24004290

08000944 <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 800094e:	f7ff ff07 	bl	8000760 <ST7735_Select>
    ST7735_Reset();
 8000952:	f7ff ff1d 	bl	8000790 <ST7735_Reset>
    DisplayInit(init_cmds1);
 8000956:	480c      	ldr	r0, [pc, #48]	; (8000988 <ST7735_Init+0x44>)
 8000958:	f7ff ff62 	bl	8000820 <DisplayInit>
    DisplayInit(init_cmds2);
 800095c:	480b      	ldr	r0, [pc, #44]	; (800098c <ST7735_Init+0x48>)
 800095e:	f7ff ff5f 	bl	8000820 <DisplayInit>
    DisplayInit(init_cmds3);
 8000962:	480b      	ldr	r0, [pc, #44]	; (8000990 <ST7735_Init+0x4c>)
 8000964:	f7ff ff5c 	bl	8000820 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8000968:	4b0a      	ldr	r3, [pc, #40]	; (8000994 <ST7735_Init+0x50>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <ST7735_Init+0x54>)
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f810 	bl	800099c <ST7735_SetRotation>
    ST7735_Unselect();
 800097c:	f7ff fefc 	bl	8000778 <ST7735_Unselect>

}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	0801d8d8 	.word	0x0801d8d8
 800098c:	0801d910 	.word	0x0801d910
 8000990:	0801d920 	.word	0x0801d920
 8000994:	2400428d 	.word	0x2400428d
 8000998:	24004291 	.word	0x24004291

0800099c <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b084      	sub	sp, #16
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 80009a6:	2300      	movs	r3, #0
 80009a8:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	f003 0303 	and.w	r3, r3, #3
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b33      	ldr	r3, [pc, #204]	; (8000a80 <ST7735_SetRotation+0xe4>)
 80009b4:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 80009b6:	4b32      	ldr	r3, [pc, #200]	; (8000a80 <ST7735_SetRotation+0xe4>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2b03      	cmp	r3, #3
 80009bc:	d84e      	bhi.n	8000a5c <ST7735_SetRotation+0xc0>
 80009be:	a201      	add	r2, pc, #4	; (adr r2, 80009c4 <ST7735_SetRotation+0x28>)
 80009c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009c4:	080009d5 	.word	0x080009d5
 80009c8:	080009f7 	.word	0x080009f7
 80009cc:	08000a19 	.word	0x08000a19
 80009d0:	08000a3b 	.word	0x08000a3b
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80009d4:	23c0      	movs	r3, #192	; 0xc0
 80009d6:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80009d8:	4b2a      	ldr	r3, [pc, #168]	; (8000a84 <ST7735_SetRotation+0xe8>)
 80009da:	22a0      	movs	r2, #160	; 0xa0
 80009dc:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80009de:	4b2a      	ldr	r3, [pc, #168]	; (8000a88 <ST7735_SetRotation+0xec>)
 80009e0:	2280      	movs	r2, #128	; 0x80
 80009e2:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80009e4:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <ST7735_SetRotation+0xf0>)
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b29      	ldr	r3, [pc, #164]	; (8000a90 <ST7735_SetRotation+0xf4>)
 80009ea:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <ST7735_SetRotation+0xf8>)
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	4b29      	ldr	r3, [pc, #164]	; (8000a98 <ST7735_SetRotation+0xfc>)
 80009f2:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80009f4:	e032      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80009f6:	23a0      	movs	r3, #160	; 0xa0
 80009f8:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80009fa:	4b23      	ldr	r3, [pc, #140]	; (8000a88 <ST7735_SetRotation+0xec>)
 80009fc:	22a0      	movs	r2, #160	; 0xa0
 80009fe:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a00:	4b20      	ldr	r3, [pc, #128]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a02:	2280      	movs	r2, #128	; 0x80
 8000a04:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a06:	4b21      	ldr	r3, [pc, #132]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a08:	781a      	ldrb	r2, [r3, #0]
 8000a0a:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a0c:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a0e:	4b21      	ldr	r3, [pc, #132]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a10:	781a      	ldrb	r2, [r3, #0]
 8000a12:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a14:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a16:	e021      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 8000a1c:	4b19      	ldr	r3, [pc, #100]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a1e:	22a0      	movs	r2, #160	; 0xa0
 8000a20:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 8000a22:	4b19      	ldr	r3, [pc, #100]	; (8000a88 <ST7735_SetRotation+0xec>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a2e:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a36:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a38:	e010      	b.n	8000a5c <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8000a3a:	2360      	movs	r3, #96	; 0x60
 8000a3c:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8000a3e:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <ST7735_SetRotation+0xec>)
 8000a40:	22a0      	movs	r2, #160	; 0xa0
 8000a42:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 8000a44:	4b0f      	ldr	r3, [pc, #60]	; (8000a84 <ST7735_SetRotation+0xe8>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <ST7735_SetRotation+0xf0>)
 8000a4c:	781a      	ldrb	r2, [r3, #0]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <ST7735_SetRotation+0xfc>)
 8000a50:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 8000a52:	4b10      	ldr	r3, [pc, #64]	; (8000a94 <ST7735_SetRotation+0xf8>)
 8000a54:	781a      	ldrb	r2, [r3, #0]
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <ST7735_SetRotation+0xf4>)
 8000a58:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8000a5a:	bf00      	nop
  }
  ST7735_Select();
 8000a5c:	f7ff fe80 	bl	8000760 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8000a60:	2036      	movs	r0, #54	; 0x36
 8000a62:	f7ff fea9 	bl	80007b8 <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 8000a66:	f107 030f 	add.w	r3, r7, #15
 8000a6a:	2101      	movs	r1, #1
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff febd 	bl	80007ec <ST7735_WriteData>
  ST7735_Unselect();
 8000a72:	f7ff fe81 	bl	8000778 <ST7735_Unselect>
}
 8000a76:	bf00      	nop
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	24004292 	.word	0x24004292
 8000a84:	24004298 	.word	0x24004298
 8000a88:	24004294 	.word	0x24004294
 8000a8c:	2400428d 	.word	0x2400428d
 8000a90:	2400428c 	.word	0x2400428c
 8000a94:	24004291 	.word	0x24004291
 8000a98:	24004290 	.word	0x24004290

08000a9c <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	b590      	push	{r4, r7, lr}
 8000aa0:	b089      	sub	sp, #36	; 0x24
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	637b      	str	r3, [r7, #52]	; 0x34
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	80fb      	strh	r3, [r7, #6]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	80bb      	strh	r3, [r7, #4]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8000ab2:	88fb      	ldrh	r3, [r7, #6]
 8000ab4:	b2d8      	uxtb	r0, r3
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	b2d9      	uxtb	r1, r3
 8000aba:	88fb      	ldrh	r3, [r7, #6]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	3b01      	subs	r3, #1
 8000ac8:	b2dc      	uxtb	r4, r3
 8000aca:	88bb      	ldrh	r3, [r7, #4]
 8000acc:	b2da      	uxtb	r2, r3
 8000ace:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	4622      	mov	r2, r4
 8000adc:	f7ff feea 	bl	80008b4 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	61fb      	str	r3, [r7, #28]
 8000ae4:	e043      	b.n	8000b6e <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8000ae6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ae8:	78fb      	ldrb	r3, [r7, #3]
 8000aea:	3b20      	subs	r3, #32
 8000aec:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8000af0:	fb01 f303 	mul.w	r3, r1, r3
 8000af4:	4619      	mov	r1, r3
 8000af6:	69fb      	ldr	r3, [r7, #28]
 8000af8:	440b      	add	r3, r1
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8000b02:	2300      	movs	r3, #0
 8000b04:	61bb      	str	r3, [r7, #24]
 8000b06:	e029      	b.n	8000b5c <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 8000b08:	697a      	ldr	r2, [r7, #20]
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d00e      	beq.n	8000b36 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8000b18:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	743b      	strb	r3, [r7, #16]
 8000b22:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 8000b28:	f107 0310 	add.w	r3, r7, #16
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe5c 	bl	80007ec <ST7735_WriteData>
 8000b34:	e00f      	b.n	8000b56 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8000b36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b3a:	0a1b      	lsrs	r3, r3, #8
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	733b      	strb	r3, [r7, #12]
 8000b42:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 8000b4a:	f107 030c 	add.w	r3, r7, #12
 8000b4e:	2102      	movs	r1, #2
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fe4b 	bl	80007ec <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000b60:	461a      	mov	r2, r3
 8000b62:	69bb      	ldr	r3, [r7, #24]
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d3cf      	bcc.n	8000b08 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	61fb      	str	r3, [r7, #28]
 8000b6e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000b72:	461a      	mov	r2, r3
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d3b5      	bcc.n	8000ae6 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	3724      	adds	r7, #36	; 0x24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8000b86:	b002      	add	sp, #8
 8000b88:	4770      	bx	lr
	...

08000b8c <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af04      	add	r7, sp, #16
 8000b94:	603a      	str	r2, [r7, #0]
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	4603      	mov	r3, r0
 8000b9a:	80fb      	strh	r3, [r7, #6]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8000ba0:	f7ff fdde 	bl	8000760 <ST7735_Select>

    while(*str) {
 8000ba4:	e033      	b.n	8000c0e <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 8000ba6:	88fb      	ldrh	r3, [r7, #6]
 8000ba8:	7d3a      	ldrb	r2, [r7, #20]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <ST7735_WriteString+0xa0>)
 8000bae:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	db16      	blt.n	8000be4 <ST7735_WriteString+0x58>
            x = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8000bba:	7d7b      	ldrb	r3, [r7, #21]
 8000bbc:	b29a      	uxth	r2, r3
 8000bbe:	88bb      	ldrh	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8000bc4:	88bb      	ldrh	r3, [r7, #4]
 8000bc6:	7d7a      	ldrb	r2, [r7, #21]
 8000bc8:	4413      	add	r3, r2
 8000bca:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <ST7735_WriteString+0xa4>)
 8000bcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	da21      	bge.n	8000c18 <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	2b20      	cmp	r3, #32
 8000bda:	d103      	bne.n	8000be4 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	3301      	adds	r3, #1
 8000be0:	603b      	str	r3, [r7, #0]
                continue;
 8000be2:	e014      	b.n	8000c0e <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	88b9      	ldrh	r1, [r7, #4]
 8000bea:	88f8      	ldrh	r0, [r7, #6]
 8000bec:	8c3b      	ldrh	r3, [r7, #32]
 8000bee:	9302      	str	r3, [sp, #8]
 8000bf0:	8bbb      	ldrh	r3, [r7, #28]
 8000bf2:	9301      	str	r3, [sp, #4]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	9300      	str	r3, [sp, #0]
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	f7ff ff4f 	bl	8000a9c <ST7735_WriteChar>
        x += font.width;
 8000bfe:	7d3b      	ldrb	r3, [r7, #20]
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	4413      	add	r3, r2
 8000c06:	80fb      	strh	r3, [r7, #6]
        str++;
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	603b      	str	r3, [r7, #0]
    while(*str) {
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1c7      	bne.n	8000ba6 <ST7735_WriteString+0x1a>
 8000c16:	e000      	b.n	8000c1a <ST7735_WriteString+0x8e>
                break;
 8000c18:	bf00      	nop
    }

    ST7735_Unselect();
 8000c1a:	f7ff fdad 	bl	8000778 <ST7735_Unselect>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000c28:	b002      	add	sp, #8
 8000c2a:	4770      	bx	lr
 8000c2c:	24004294 	.word	0x24004294
 8000c30:	24004298 	.word	0x24004298

08000c34 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	4608      	mov	r0, r1
 8000c3e:	4611      	mov	r1, r2
 8000c40:	461a      	mov	r2, r3
 8000c42:	4623      	mov	r3, r4
 8000c44:	80fb      	strh	r3, [r7, #6]
 8000c46:	4603      	mov	r3, r0
 8000c48:	80bb      	strh	r3, [r7, #4]
 8000c4a:	460b      	mov	r3, r1
 8000c4c:	807b      	strh	r3, [r7, #2]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8000c52:	88fb      	ldrh	r3, [r7, #6]
 8000c54:	4a37      	ldr	r2, [pc, #220]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c56:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	da66      	bge.n	8000d2c <ST7735_FillRectangle+0xf8>
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	4a35      	ldr	r2, [pc, #212]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c62:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c66:	4293      	cmp	r3, r2
 8000c68:	da60      	bge.n	8000d2c <ST7735_FillRectangle+0xf8>
    if((x + w - 1) >= _width) w = _width - x;
 8000c6a:	88fa      	ldrh	r2, [r7, #6]
 8000c6c:	887b      	ldrh	r3, [r7, #2]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a30      	ldr	r2, [pc, #192]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c76:	4293      	cmp	r3, r2
 8000c78:	dd06      	ble.n	8000c88 <ST7735_FillRectangle+0x54>
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <ST7735_FillRectangle+0x100>)
 8000c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8000c88:	88ba      	ldrh	r2, [r7, #4]
 8000c8a:	883b      	ldrh	r3, [r7, #0]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4a2a      	ldr	r2, [pc, #168]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c90:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000c94:	4293      	cmp	r3, r2
 8000c96:	dd06      	ble.n	8000ca6 <ST7735_FillRectangle+0x72>
 8000c98:	4b27      	ldr	r3, [pc, #156]	; (8000d38 <ST7735_FillRectangle+0x104>)
 8000c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c9e:	b29a      	uxth	r2, r3
 8000ca0:	88bb      	ldrh	r3, [r7, #4]
 8000ca2:	1ad3      	subs	r3, r2, r3
 8000ca4:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8000ca6:	f7ff fd5b 	bl	8000760 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	b2d8      	uxtb	r0, r3
 8000cae:	88bb      	ldrh	r3, [r7, #4]
 8000cb0:	b2d9      	uxtb	r1, r3
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	887b      	ldrh	r3, [r7, #2]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	4413      	add	r3, r2
 8000cbc:	b2db      	uxtb	r3, r3
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	b2dc      	uxtb	r4, r3
 8000cc2:	88bb      	ldrh	r3, [r7, #4]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	883b      	ldrh	r3, [r7, #0]
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	3b01      	subs	r3, #1
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	4622      	mov	r2, r4
 8000cd4:	f7ff fdee 	bl	80008b4 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000cd8:	8c3b      	ldrh	r3, [r7, #32]
 8000cda:	0a1b      	lsrs	r3, r3, #8
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	733b      	strb	r3, [r7, #12]
 8000ce2:	8c3b      	ldrh	r3, [r7, #32]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2108      	movs	r1, #8
 8000cec:	4813      	ldr	r0, [pc, #76]	; (8000d3c <ST7735_FillRectangle+0x108>)
 8000cee:	f005 fb57 	bl	80063a0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000cf2:	883b      	ldrh	r3, [r7, #0]
 8000cf4:	80bb      	strh	r3, [r7, #4]
 8000cf6:	e013      	b.n	8000d20 <ST7735_FillRectangle+0xec>
        for(x = w; x > 0; x--) {
 8000cf8:	887b      	ldrh	r3, [r7, #2]
 8000cfa:	80fb      	strh	r3, [r7, #6]
 8000cfc:	e00a      	b.n	8000d14 <ST7735_FillRectangle+0xe0>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000cfe:	f107 010c 	add.w	r1, r7, #12
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	2202      	movs	r2, #2
 8000d08:	480d      	ldr	r0, [pc, #52]	; (8000d40 <ST7735_FillRectangle+0x10c>)
 8000d0a:	f007 ff6d 	bl	8008be8 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	3b01      	subs	r3, #1
 8000d12:	80fb      	strh	r3, [r7, #6]
 8000d14:	88fb      	ldrh	r3, [r7, #6]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d1f1      	bne.n	8000cfe <ST7735_FillRectangle+0xca>
    for(y = h; y > 0; y--) {
 8000d1a:	88bb      	ldrh	r3, [r7, #4]
 8000d1c:	3b01      	subs	r3, #1
 8000d1e:	80bb      	strh	r3, [r7, #4]
 8000d20:	88bb      	ldrh	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1e8      	bne.n	8000cf8 <ST7735_FillRectangle+0xc4>
        }
    }

    ST7735_Unselect();
 8000d26:	f7ff fd27 	bl	8000778 <ST7735_Unselect>
 8000d2a:	e000      	b.n	8000d2e <ST7735_FillRectangle+0xfa>
    if((x >= _width) || (y >= _height)) return;
 8000d2c:	bf00      	nop
}
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}
 8000d34:	24004294 	.word	0x24004294
 8000d38:	24004298 	.word	0x24004298
 8000d3c:	58020000 	.word	0x58020000
 8000d40:	24004430 	.word	0x24004430

08000d44 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000d48:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <MX_CRC_Init+0x40>)
 8000d4c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000d54:	4b0a      	ldr	r3, [pc, #40]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000d66:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <MX_CRC_Init+0x3c>)
 8000d6e:	f001 ff8b 	bl	8002c88 <HAL_CRC_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000d78:	f000 fd9c 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24004308 	.word	0x24004308
 8000d84:	58024c00 	.word	0x58024c00

08000d88 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <HAL_CRC_MspInit+0x3c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d10e      	bne.n	8000db8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000da2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_CRC_MspInit+0x40>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000db4:	60fb      	str	r3, [r7, #12]
 8000db6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	58024c00 	.word	0x58024c00
 8000dc8:	58024400 	.word	0x58024400

08000dcc <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000dd2:	4a2f      	ldr	r2, [pc, #188]	; (8000e90 <MX_FDCAN1_Init+0xc4>)
 8000dd4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000dd6:	4b2d      	ldr	r3, [pc, #180]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000ddc:	4b2b      	ldr	r3, [pc, #172]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000de2:	4b2a      	ldr	r3, [pc, #168]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000de8:	4b28      	ldr	r3, [pc, #160]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000df6:	2202      	movs	r2, #2
 8000df8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000dfc:	2208      	movs	r2, #8
 8000dfe:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e02:	221f      	movs	r2, #31
 8000e04:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e08:	2208      	movs	r2, #8
 8000e0a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000e0c:	4b1f      	ldr	r3, [pc, #124]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000e12:	4b1e      	ldr	r3, [pc, #120]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000e18:	4b1c      	ldr	r3, [pc, #112]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000e1e:	4b1b      	ldr	r3, [pc, #108]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000e2a:	4b18      	ldr	r3, [pc, #96]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e38:	2201      	movs	r2, #1
 8000e3a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e3e:	2204      	movs	r2, #4
 8000e40:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000e42:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000e4e:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000e54:	4b0d      	ldr	r3, [pc, #52]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e56:	2204      	movs	r2, #4
 8000e58:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000e5a:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000e60:	4b0a      	ldr	r3, [pc, #40]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000e66:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000e6c:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000e78:	4804      	ldr	r0, [pc, #16]	; (8000e8c <MX_FDCAN1_Init+0xc0>)
 8000e7a:	f003 fe9b 	bl	8004bb4 <HAL_FDCAN_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000e84:	f000 fd16 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000e88:	bf00      	nop
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	2400433c 	.word	0x2400433c
 8000e90:	4000a000 	.word	0x4000a000

08000e94 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b0b6      	sub	sp, #216	; 0xd8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]
 8000eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	22b4      	movs	r2, #180	; 0xb4
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f018 fef2 	bl	8019c9e <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a31      	ldr	r2, [pc, #196]	; (8000f84 <HAL_FDCAN_MspInit+0xf0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d15a      	bne.n	8000f7a <HAL_FDCAN_MspInit+0xe6>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ec8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8000ece:	2319      	movs	r3, #25
 8000ed0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000ed6:	2305      	movs	r3, #5
 8000ed8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000eda:	2302      	movs	r3, #2
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000eea:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000eee:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f006 fa55 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 8000f00:	f000 fcd8 	bl	80018b4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000f04:	4b20      	ldr	r3, [pc, #128]	; (8000f88 <HAL_FDCAN_MspInit+0xf4>)
 8000f06:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f0a:	4a1f      	ldr	r2, [pc, #124]	; (8000f88 <HAL_FDCAN_MspInit+0xf4>)
 8000f0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f10:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000f14:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <HAL_FDCAN_MspInit+0xf4>)
 8000f16:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f22:	4b19      	ldr	r3, [pc, #100]	; (8000f88 <HAL_FDCAN_MspInit+0xf4>)
 8000f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f28:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <HAL_FDCAN_MspInit+0xf4>)
 8000f2a:	f043 0308 	orr.w	r3, r3, #8
 8000f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <HAL_FDCAN_MspInit+0xf4>)
 8000f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f40:	2303      	movs	r3, #3
 8000f42:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000f58:	2309      	movs	r3, #9
 8000f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f5e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f62:	4619      	mov	r1, r3
 8000f64:	4809      	ldr	r0, [pc, #36]	; (8000f8c <HAL_FDCAN_MspInit+0xf8>)
 8000f66:	f005 f873 	bl	8006050 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2105      	movs	r1, #5
 8000f6e:	2013      	movs	r0, #19
 8000f70:	f001 fde6 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000f74:	2013      	movs	r0, #19
 8000f76:	f001 fdfd 	bl	8002b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000f7a:	bf00      	nop
 8000f7c:	37d8      	adds	r7, #216	; 0xd8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	4000a000 	.word	0x4000a000
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58020c00 	.word	0x58020c00

08000f90 <FDCAN1_MSG_config>:
/**
  * @brief  The application entry point.
  * @retval int
  */
void FDCAN1_MSG_config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08a      	sub	sp, #40	; 0x28
 8000f94:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	//Prepare CAN data
	myTxData[0] = 0xFF;
 8000f96:	4b30      	ldr	r3, [pc, #192]	; (8001058 <FDCAN1_MSG_config+0xc8>)
 8000f98:	22ff      	movs	r2, #255	; 0xff
 8000f9a:	701a      	strb	r2, [r3, #0]
	myTxData[1] = 0x00;
 8000f9c:	4b2e      	ldr	r3, [pc, #184]	; (8001058 <FDCAN1_MSG_config+0xc8>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	705a      	strb	r2, [r3, #1]
	myTxData[2] = 0xFF;
 8000fa2:	4b2d      	ldr	r3, [pc, #180]	; (8001058 <FDCAN1_MSG_config+0xc8>)
 8000fa4:	22ff      	movs	r2, #255	; 0xff
 8000fa6:	709a      	strb	r2, [r3, #2]
	myTxData[3] = 0x00;
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <FDCAN1_MSG_config+0xc8>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	70da      	strb	r2, [r3, #3]

	myTxData[4] = 0xFF;
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <FDCAN1_MSG_config+0xc8>)
 8000fb0:	22ff      	movs	r2, #255	; 0xff
 8000fb2:	711a      	strb	r2, [r3, #4]
	myTxData[5] = 0x00;
 8000fb4:	4b28      	ldr	r3, [pc, #160]	; (8001058 <FDCAN1_MSG_config+0xc8>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	715a      	strb	r2, [r3, #5]
	myTxData[6] = 0xFF;
 8000fba:	4b27      	ldr	r3, [pc, #156]	; (8001058 <FDCAN1_MSG_config+0xc8>)
 8000fbc:	22ff      	movs	r2, #255	; 0xff
 8000fbe:	719a      	strb	r2, [r3, #6]
	myTxData[7] = 0x00;
 8000fc0:	4b25      	ldr	r3, [pc, #148]	; (8001058 <FDCAN1_MSG_config+0xc8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	71da      	strb	r2, [r3, #7]

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = 0x124;
 8000fd6:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000fda:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000fdc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fe0:	617b      	str	r3, [r7, #20]
	HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	481d      	ldr	r0, [pc, #116]	; (800105c <FDCAN1_MSG_config+0xcc>)
 8000fe8:	f003 ffc6 	bl	8004f78 <HAL_FDCAN_ConfigFilter>

	/* Configure global filter to reject all non-matching frames */
	HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_REJECT_REMOTE, FDCAN_REJECT_REMOTE);
 8000fec:	2301      	movs	r3, #1
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	4819      	ldr	r0, [pc, #100]	; (800105c <FDCAN1_MSG_config+0xcc>)
 8000ff8:	f004 f834 	bl	8005064 <HAL_FDCAN_ConfigGlobalFilter>

	/* Configure Rx FIFO 0 watermark to 2 */
	HAL_FDCAN_ConfigFifoWatermark(&hfdcan1, FDCAN_CFG_RX_FIFO0, 1);
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	2101      	movs	r1, #1
 8001000:	4816      	ldr	r0, [pc, #88]	; (800105c <FDCAN1_MSG_config+0xcc>)
 8001002:	f004 f85c 	bl	80050be <HAL_FDCAN_ConfigFifoWatermark>

	/* Activate Rx FIFO 0 watermark notification */
	HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2101      	movs	r1, #1
 800100a:	4814      	ldr	r0, [pc, #80]	; (800105c <FDCAN1_MSG_config+0xcc>)
 800100c:	f004 fa98 	bl	8005540 <HAL_FDCAN_ActivateNotification>

	/* Prepare Tx Header */
	TxHeader.Identifier = 0x322;
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 8001012:	f240 3222 	movw	r2, #802	; 0x322
 8001016:	601a      	str	r2, [r3, #0]
	TxHeader.IdType = FDCAN_STANDARD_ID;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 8001026:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800102a:	60da      	str	r2, [r3, #12]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001032:	4b0b      	ldr	r3, [pc, #44]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 8001034:	2200      	movs	r2, #0
 8001036:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8001038:	4b09      	ldr	r3, [pc, #36]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 800103a:	2200      	movs	r2, #0
 800103c:	619a      	str	r2, [r3, #24]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 8001040:	2200      	movs	r2, #0
 8001042:	61da      	str	r2, [r3, #28]
	TxHeader.MessageMarker = 0;
 8001044:	4b06      	ldr	r3, [pc, #24]	; (8001060 <FDCAN1_MSG_config+0xd0>)
 8001046:	2200      	movs	r2, #0
 8001048:	621a      	str	r2, [r3, #32]

	/* Start the FDCAN module */
	HAL_FDCAN_Start(&hfdcan1);
 800104a:	4804      	ldr	r0, [pc, #16]	; (800105c <FDCAN1_MSG_config+0xcc>)
 800104c:	f004 f883 	bl	8005156 <HAL_FDCAN_Start>
}
 8001050:	bf00      	nop
 8001052:	3720      	adds	r7, #32
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	2400432c 	.word	0x2400432c
 800105c:	2400433c 	.word	0x2400433c
 8001060:	240043dc 	.word	0x240043dc

08001064 <Toggle_CAN_Data>:


void Toggle_CAN_Data(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
	if(myTxData[0] == 0x00)
 8001068:	4b1c      	ldr	r3, [pc, #112]	; (80010dc <Toggle_CAN_Data+0x78>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d118      	bne.n	80010a2 <Toggle_CAN_Data+0x3e>
	{
		myTxData[0] = 0xFF;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <Toggle_CAN_Data+0x78>)
 8001072:	22ff      	movs	r2, #255	; 0xff
 8001074:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0x00;
 8001076:	4b19      	ldr	r3, [pc, #100]	; (80010dc <Toggle_CAN_Data+0x78>)
 8001078:	2200      	movs	r2, #0
 800107a:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0xFF;
 800107c:	4b17      	ldr	r3, [pc, #92]	; (80010dc <Toggle_CAN_Data+0x78>)
 800107e:	22ff      	movs	r2, #255	; 0xff
 8001080:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0x00;
 8001082:	4b16      	ldr	r3, [pc, #88]	; (80010dc <Toggle_CAN_Data+0x78>)
 8001084:	2200      	movs	r2, #0
 8001086:	70da      	strb	r2, [r3, #3]

		myTxData[4] = 0xFF;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <Toggle_CAN_Data+0x78>)
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0x00;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <Toggle_CAN_Data+0x78>)
 8001090:	2200      	movs	r2, #0
 8001092:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0xFF;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <Toggle_CAN_Data+0x78>)
 8001096:	22ff      	movs	r2, #255	; 0xff
 8001098:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0x00;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <Toggle_CAN_Data+0x78>)
 800109c:	2200      	movs	r2, #0
 800109e:	71da      	strb	r2, [r3, #7]
		myTxData[4] = 0x00;
		myTxData[5] = 0xFF;
		myTxData[6] = 0x00;
		myTxData[7] = 0xFF;
	}
}
 80010a0:	e017      	b.n	80010d2 <Toggle_CAN_Data+0x6e>
		myTxData[0] = 0x00;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <Toggle_CAN_Data+0x78>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]
		myTxData[1] = 0xFF;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <Toggle_CAN_Data+0x78>)
 80010aa:	22ff      	movs	r2, #255	; 0xff
 80010ac:	705a      	strb	r2, [r3, #1]
		myTxData[2] = 0x00;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <Toggle_CAN_Data+0x78>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	709a      	strb	r2, [r3, #2]
		myTxData[3] = 0xFF;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <Toggle_CAN_Data+0x78>)
 80010b6:	22ff      	movs	r2, #255	; 0xff
 80010b8:	70da      	strb	r2, [r3, #3]
		myTxData[4] = 0x00;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <Toggle_CAN_Data+0x78>)
 80010bc:	2200      	movs	r2, #0
 80010be:	711a      	strb	r2, [r3, #4]
		myTxData[5] = 0xFF;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <Toggle_CAN_Data+0x78>)
 80010c2:	22ff      	movs	r2, #255	; 0xff
 80010c4:	715a      	strb	r2, [r3, #5]
		myTxData[6] = 0x00;
 80010c6:	4b05      	ldr	r3, [pc, #20]	; (80010dc <Toggle_CAN_Data+0x78>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	719a      	strb	r2, [r3, #6]
		myTxData[7] = 0xFF;
 80010cc:	4b03      	ldr	r3, [pc, #12]	; (80010dc <Toggle_CAN_Data+0x78>)
 80010ce:	22ff      	movs	r2, #255	; 0xff
 80010d0:	71da      	strb	r2, [r3, #7]
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	2400432c 	.word	0x2400432c

080010e0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]

    /* Retrieve Rx messages from RX FIFO0 */
    HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, myRxData);
 80010ea:	4b0d      	ldr	r3, [pc, #52]	; (8001120 <HAL_FDCAN_RxFifo0Callback+0x40>)
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_FDCAN_RxFifo0Callback+0x44>)
 80010ee:	2140      	movs	r1, #64	; 0x40
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f004 f8b7 	bl	8005264 <HAL_FDCAN_GetRxMessage>


    /* Display LEDx */
    if ((RxHeader.Identifier == 0x124) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_FDCAN_RxFifo0Callback+0x44>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f5b3 7f92 	cmp.w	r3, #292	; 0x124
 80010fe:	d10b      	bne.n	8001118 <HAL_FDCAN_RxFifo0Callback+0x38>
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_FDCAN_RxFifo0Callback+0x44>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d107      	bne.n	8001118 <HAL_FDCAN_RxFifo0Callback+0x38>
    {
    	print_to_serial("MSG 0x124 Custom MSG!");
 8001108:	4807      	ldr	r0, [pc, #28]	; (8001128 <HAL_FDCAN_RxFifo0Callback+0x48>)
 800110a:	f7ff fb0b 	bl	8000724 <print_to_serial>
    	HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800110e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001112:	4806      	ldr	r0, [pc, #24]	; (800112c <HAL_FDCAN_RxFifo0Callback+0x4c>)
 8001114:	f005 f95d 	bl	80063d2 <HAL_GPIO_TogglePin>
    }

}
 8001118:	bf00      	nop
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	24004334 	.word	0x24004334
 8001124:	24004400 	.word	0x24004400
 8001128:	0801ac14 	.word	0x0801ac14
 800112c:	58020400 	.word	0x58020400

08001130 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
return 0;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	4a07      	ldr	r2, [pc, #28]	; (800117c <vApplicationGetIdleTaskMemory+0x2c>)
 8001160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	4a06      	ldr	r2, [pc, #24]	; (8001180 <vApplicationGetIdleTaskMemory+0x30>)
 8001166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	240000bc 	.word	0x240000bc
 8001180:	2400017c 	.word	0x2400017c

08001184 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b08e      	sub	sp, #56	; 0x38
 8001188:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_FREERTOS_Init+0x58>)
 800118c:	f107 041c 	add.w	r4, r7, #28
 8001190:	461d      	mov	r5, r3
 8001192:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001194:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001196:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800119a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800119e:	f107 031c 	add.w	r3, r7, #28
 80011a2:	2100      	movs	r1, #0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f00a fbfc 	bl	800b9a2 <osThreadCreate>
 80011aa:	4603      	mov	r3, r0
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <MX_FREERTOS_Init+0x5c>)
 80011ae:	6013      	str	r3, [r2, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 256);
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <MX_FREERTOS_Init+0x60>)
 80011b2:	463c      	mov	r4, r7
 80011b4:	461d      	mov	r5, r3
 80011b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 80011c2:	463b      	mov	r3, r7
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a fbeb 	bl	800b9a2 <osThreadCreate>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <MX_FREERTOS_Init+0x64>)
 80011d0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011d2:	bf00      	nop
 80011d4:	3738      	adds	r7, #56	; 0x38
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bdb0      	pop	{r4, r5, r7, pc}
 80011da:	bf00      	nop
 80011dc:	0801ac44 	.word	0x0801ac44
 80011e0:	24004428 	.word	0x24004428
 80011e4:	0801ac60 	.word	0x0801ac60
 80011e8:	2400442c 	.word	0x2400442c

080011ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af04      	add	r7, sp, #16
 80011f2:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80011f4:	f009 fdd2 	bl	800ad9c <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  SM_STATES state = INIT;
 80011f8:	2300      	movs	r3, #0
 80011fa:	73fb      	strb	r3, [r7, #15]

  //Start Timer
  HAL_TIM_Base_Start(&htim6);
 80011fc:	4833      	ldr	r0, [pc, #204]	; (80012cc <StartDefaultTask+0xe0>)
 80011fe:	f008 f825 	bl	800924c <HAL_TIM_Base_Start>

  //Get current time
  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 8001202:	4b32      	ldr	r3, [pc, #200]	; (80012cc <StartDefaultTask+0xe0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	b29a      	uxth	r2, r3
 800120a:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <StartDefaultTask+0xe4>)
 800120c:	801a      	strh	r2, [r3, #0]

  //Start the TCP Server
  tcp_server_init();
 800120e:	f000 fe39 	bl	8001e84 <tcp_server_init>

  // Initialize the xLastWakeTime variable with the current time.
  TickType_t xLastWakeTime;
  xLastWakeTime = osKernelSysTick();
 8001212:	f00a fbb6 	bl	800b982 <osKernelSysTick>
 8001216:	60b8      	str	r0, [r7, #8]


  /* Infinite loop */
  for(;;)
  {
	  if(state == INIT)
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d132      	bne.n	8001284 <StartDefaultTask+0x98>
	  {
		  print_to_serial("Hello FreeRTOS!");
 800121e:	482d      	ldr	r0, [pc, #180]	; (80012d4 <StartDefaultTask+0xe8>)
 8001220:	f7ff fa80 	bl	8000724 <print_to_serial>
		  ST7735_SetRotation(2);
 8001224:	2002      	movs	r0, #2
 8001226:	f7ff fbb9 	bl	800099c <ST7735_SetRotation>
		  ST7735_WriteString(0, 0, "Hello Ethernet!", Font_7x10, WHITE,BLACK);
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <StartDefaultTask+0xec>)
 800122c:	2200      	movs	r2, #0
 800122e:	9202      	str	r2, [sp, #8]
 8001230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001234:	9201      	str	r2, [sp, #4]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	9200      	str	r2, [sp, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a27      	ldr	r2, [pc, #156]	; (80012dc <StartDefaultTask+0xf0>)
 800123e:	2100      	movs	r1, #0
 8001240:	2000      	movs	r0, #0
 8001242:	f7ff fca3 	bl	8000b8c <ST7735_WriteString>
		  ST7735_WriteString(0, 12, "Hello CAN!", Font_7x10, WHITE,BLACK);
 8001246:	4b24      	ldr	r3, [pc, #144]	; (80012d8 <StartDefaultTask+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	9202      	str	r2, [sp, #8]
 800124c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001250:	9201      	str	r2, [sp, #4]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	9200      	str	r2, [sp, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <StartDefaultTask+0xf4>)
 800125a:	210c      	movs	r1, #12
 800125c:	2000      	movs	r0, #0
 800125e:	f7ff fc95 	bl	8000b8c <ST7735_WriteString>
		  ST7735_WriteString(0, 24, "Hello SPI!", Font_7x10, WHITE,BLACK);
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <StartDefaultTask+0xec>)
 8001264:	2200      	movs	r2, #0
 8001266:	9202      	str	r2, [sp, #8]
 8001268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800126c:	9201      	str	r2, [sp, #4]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	9200      	str	r2, [sp, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a1b      	ldr	r2, [pc, #108]	; (80012e4 <StartDefaultTask+0xf8>)
 8001276:	2118      	movs	r1, #24
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fc87 	bl	8000b8c <ST7735_WriteString>
		  state = IDLE;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e01f      	b.n	80012c4 <StartDefaultTask+0xd8>
	  }
	  else if(state == IDLE)
 8001284:	7bfb      	ldrb	r3, [r7, #15]
 8001286:	2b01      	cmp	r3, #1
 8001288:	d11c      	bne.n	80012c4 <StartDefaultTask+0xd8>
	  {
		  if(__HAL_TIM_GET_COUNTER(&htim6) - timer_val >= 2500)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <StartDefaultTask+0xe0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001290:	4a0f      	ldr	r2, [pc, #60]	; (80012d0 <StartDefaultTask+0xe4>)
 8001292:	8812      	ldrh	r2, [r2, #0]
 8001294:	1a9b      	subs	r3, r3, r2
 8001296:	f640 12c3 	movw	r2, #2499	; 0x9c3
 800129a:	4293      	cmp	r3, r2
 800129c:	d910      	bls.n	80012c0 <StartDefaultTask+0xd4>
		  {
			  HAL_GPIO_TogglePin(GPIOE, LED_YELLOW_Pin);
 800129e:	2102      	movs	r1, #2
 80012a0:	4811      	ldr	r0, [pc, #68]	; (80012e8 <StartDefaultTask+0xfc>)
 80012a2:	f005 f896 	bl	80063d2 <HAL_GPIO_TogglePin>
			  timer_val = __HAL_TIM_GET_COUNTER(&htim6);
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <StartDefaultTask+0xe0>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <StartDefaultTask+0xe4>)
 80012b0:	801a      	strh	r2, [r3, #0]

			  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, myTxData);
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <StartDefaultTask+0x100>)
 80012b4:	490e      	ldr	r1, [pc, #56]	; (80012f0 <StartDefaultTask+0x104>)
 80012b6:	480f      	ldr	r0, [pc, #60]	; (80012f4 <StartDefaultTask+0x108>)
 80012b8:	f003 ff78 	bl	80051ac <HAL_FDCAN_AddMessageToTxFifoQ>
			  Toggle_CAN_Data();
 80012bc:	f7ff fed2 	bl	8001064 <Toggle_CAN_Data>
		  }
		  state = IDLE;
 80012c0:	2301      	movs	r3, #1
 80012c2:	73fb      	strb	r3, [r7, #15]
	  }

	  osDelay(1);
 80012c4:	2001      	movs	r0, #1
 80012c6:	f00a fbb9 	bl	800ba3c <osDelay>
	  if(state == INIT)
 80012ca:	e7a5      	b.n	8001218 <StartDefaultTask+0x2c>
 80012cc:	24004504 	.word	0x24004504
 80012d0:	2400429c 	.word	0x2400429c
 80012d4:	0801ac7c 	.word	0x0801ac7c
 80012d8:	24000000 	.word	0x24000000
 80012dc:	0801ac8c 	.word	0x0801ac8c
 80012e0:	0801ac9c 	.word	0x0801ac9c
 80012e4:	0801aca8 	.word	0x0801aca8
 80012e8:	58021000 	.word	0x58021000
 80012ec:	2400432c 	.word	0x2400432c
 80012f0:	240043dc 	.word	0x240043dc
 80012f4:	2400433c 	.word	0x2400433c

080012f8 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  // Initialize the xLastWakeTime variable with the current time.
  TickType_t PreviousWakeTime;
  PreviousWakeTime = osKernelSysTick();
 8001300:	f00a fb3f 	bl	800b982 <osKernelSysTick>
 8001304:	60f8      	str	r0, [r7, #12]


  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOC, SEN_TRG_Pin);
 8001306:	f44f 7100 	mov.w	r1, #512	; 0x200
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <StartTask02+0x20>)
 800130c:	f005 f861 	bl	80063d2 <HAL_GPIO_TogglePin>


	  //osDelayUntil(&PreviousWakeTime, pdMS_TO_TICKS(1000));
	  //osDelayUntil(&PreviousWakeTime, 1000);
	  osDelay(100);
 8001310:	2064      	movs	r0, #100	; 0x64
 8001312:	f00a fb93 	bl	800ba3c <osDelay>
	  HAL_GPIO_TogglePin(GPIOC, SEN_TRG_Pin);
 8001316:	e7f6      	b.n	8001306 <StartTask02+0xe>
 8001318:	58020800 	.word	0x58020800

0800131c <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b08c      	sub	sp, #48	; 0x30
 8001320:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b90      	ldr	r3, [pc, #576]	; (8001574 <MX_GPIO_Init+0x258>)
 8001334:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001338:	4a8e      	ldr	r2, [pc, #568]	; (8001574 <MX_GPIO_Init+0x258>)
 800133a:	f043 0304 	orr.w	r3, r3, #4
 800133e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001342:	4b8c      	ldr	r3, [pc, #560]	; (8001574 <MX_GPIO_Init+0x258>)
 8001344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	61bb      	str	r3, [r7, #24]
 800134e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001350:	4b88      	ldr	r3, [pc, #544]	; (8001574 <MX_GPIO_Init+0x258>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001356:	4a87      	ldr	r2, [pc, #540]	; (8001574 <MX_GPIO_Init+0x258>)
 8001358:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001360:	4b84      	ldr	r3, [pc, #528]	; (8001574 <MX_GPIO_Init+0x258>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b81      	ldr	r3, [pc, #516]	; (8001574 <MX_GPIO_Init+0x258>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001374:	4a7f      	ldr	r2, [pc, #508]	; (8001574 <MX_GPIO_Init+0x258>)
 8001376:	f043 0301 	orr.w	r3, r3, #1
 800137a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800137e:	4b7d      	ldr	r3, [pc, #500]	; (8001574 <MX_GPIO_Init+0x258>)
 8001380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	4b79      	ldr	r3, [pc, #484]	; (8001574 <MX_GPIO_Init+0x258>)
 800138e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001392:	4a78      	ldr	r2, [pc, #480]	; (8001574 <MX_GPIO_Init+0x258>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800139c:	4b75      	ldr	r3, [pc, #468]	; (8001574 <MX_GPIO_Init+0x258>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	f003 0302 	and.w	r3, r3, #2
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013aa:	4b72      	ldr	r3, [pc, #456]	; (8001574 <MX_GPIO_Init+0x258>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a70      	ldr	r2, [pc, #448]	; (8001574 <MX_GPIO_Init+0x258>)
 80013b2:	f043 0308 	orr.w	r3, r3, #8
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b6e      	ldr	r3, [pc, #440]	; (8001574 <MX_GPIO_Init+0x258>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013c8:	4b6a      	ldr	r3, [pc, #424]	; (8001574 <MX_GPIO_Init+0x258>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a69      	ldr	r2, [pc, #420]	; (8001574 <MX_GPIO_Init+0x258>)
 80013d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b66      	ldr	r3, [pc, #408]	; (8001574 <MX_GPIO_Init+0x258>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e6:	4b63      	ldr	r3, [pc, #396]	; (8001574 <MX_GPIO_Init+0x258>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	4a61      	ldr	r2, [pc, #388]	; (8001574 <MX_GPIO_Init+0x258>)
 80013ee:	f043 0310 	orr.w	r3, r3, #16
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f6:	4b5f      	ldr	r3, [pc, #380]	; (8001574 <MX_GPIO_Init+0x258>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	f003 0310 	and.w	r3, r3, #16
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_3|SEN_TRG_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f240 2109 	movw	r1, #521	; 0x209
 800140a:	485b      	ldr	r0, [pc, #364]	; (8001578 <MX_GPIO_Init+0x25c>)
 800140c:	f004 ffc8 	bl	80063a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
 8001410:	2200      	movs	r2, #0
 8001412:	2108      	movs	r1, #8
 8001414:	4859      	ldr	r0, [pc, #356]	; (800157c <MX_GPIO_Init+0x260>)
 8001416:	f004 ffc3 	bl	80063a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	f244 0101 	movw	r1, #16385	; 0x4001
 8001420:	4857      	ldr	r0, [pc, #348]	; (8001580 <MX_GPIO_Init+0x264>)
 8001422:	f004 ffbd 	bl	80063a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001426:	2200      	movs	r2, #0
 8001428:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800142c:	4855      	ldr	r0, [pc, #340]	; (8001584 <MX_GPIO_Init+0x268>)
 800142e:	f004 ffb7 	bl	80063a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	2102      	movs	r1, #2
 8001436:	4854      	ldr	r0, [pc, #336]	; (8001588 <MX_GPIO_Init+0x26c>)
 8001438:	f004 ffb2 	bl	80063a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800143c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001442:	2300      	movs	r3, #0
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800144a:	f107 031c 	add.w	r3, r7, #28
 800144e:	4619      	mov	r1, r3
 8001450:	4849      	ldr	r0, [pc, #292]	; (8001578 <MX_GPIO_Init+0x25c>)
 8001452:	f004 fdfd 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC3 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|SEN_TRG_Pin;
 8001456:	f240 2309 	movw	r3, #521	; 0x209
 800145a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145c:	2301      	movs	r3, #1
 800145e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001464:	2300      	movs	r3, #0
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001468:	f107 031c 	add.w	r3, r7, #28
 800146c:	4619      	mov	r1, r3
 800146e:	4842      	ldr	r0, [pc, #264]	; (8001578 <MX_GPIO_Init+0x25c>)
 8001470:	f004 fdee 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001474:	2308      	movs	r3, #8
 8001476:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001478:	2301      	movs	r3, #1
 800147a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	483c      	ldr	r0, [pc, #240]	; (800157c <MX_GPIO_Init+0x260>)
 800148c:	f004 fde0 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001490:	f244 0301 	movw	r3, #16385	; 0x4001
 8001494:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001496:	2301      	movs	r3, #1
 8001498:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149e:	2300      	movs	r3, #0
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a2:	f107 031c 	add.w	r3, r7, #28
 80014a6:	4619      	mov	r1, r3
 80014a8:	4835      	ldr	r0, [pc, #212]	; (8001580 <MX_GPIO_Init+0x264>)
 80014aa:	f004 fdd1 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80014ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014bc:	2300      	movs	r3, #0
 80014be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80014c0:	f107 031c 	add.w	r3, r7, #28
 80014c4:	4619      	mov	r1, r3
 80014c6:	482f      	ldr	r0, [pc, #188]	; (8001584 <MX_GPIO_Init+0x268>)
 80014c8:	f004 fdc2 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80014cc:	2380      	movs	r3, #128	; 0x80
 80014ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014d0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	482a      	ldr	r0, [pc, #168]	; (800158c <MX_GPIO_Init+0x270>)
 80014e2:	f004 fdb5 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80014e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ec:	2300      	movs	r3, #0
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80014f4:	f107 031c 	add.w	r3, r7, #28
 80014f8:	4619      	mov	r1, r3
 80014fa:	4820      	ldr	r0, [pc, #128]	; (800157c <MX_GPIO_Init+0x260>)
 80014fc:	f004 fda8 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8001500:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150e:	2300      	movs	r3, #0
 8001510:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8001512:	230a      	movs	r3, #10
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4817      	ldr	r0, [pc, #92]	; (800157c <MX_GPIO_Init+0x260>)
 800151e:	f004 fd97 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN1_Pin;
 8001522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001526:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001528:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800152c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN1_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 031c 	add.w	r3, r7, #28
 8001536:	4619      	mov	r1, r3
 8001538:	480f      	ldr	r0, [pc, #60]	; (8001578 <MX_GPIO_Init+0x25c>)
 800153a:	f004 fd89 	bl	8006050 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800153e:	2302      	movs	r3, #2
 8001540:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <MX_GPIO_Init+0x26c>)
 8001556:	f004 fd7b 	bl	8006050 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2105      	movs	r1, #5
 800155e:	2028      	movs	r0, #40	; 0x28
 8001560:	f001 faee 	bl	8002b40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001564:	2028      	movs	r0, #40	; 0x28
 8001566:	f001 fb05 	bl	8002b74 <HAL_NVIC_EnableIRQ>

}
 800156a:	bf00      	nop
 800156c:	3730      	adds	r7, #48	; 0x30
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	58024400 	.word	0x58024400
 8001578:	58020800 	.word	0x58020800
 800157c:	58020000 	.word	0x58020000
 8001580:	58020400 	.word	0x58020400
 8001584:	58020c00 	.word	0x58020c00
 8001588:	58021000 	.word	0x58021000
 800158c:	58021800 	.word	0x58021800

08001590 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 2 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af04      	add	r7, sp, #16
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == BTN1_Pin) /* Interrupt only for BTN1_Pin (1st button from left to right in the breadboard) */
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015a0:	d133      	bne.n	800160a <HAL_GPIO_EXTI_Callback+0x7a>
	{
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80015a2:	2101      	movs	r1, #1
 80015a4:	481b      	ldr	r0, [pc, #108]	; (8001614 <HAL_GPIO_EXTI_Callback+0x84>)
 80015a6:	f004 ff14 	bl	80063d2 <HAL_GPIO_TogglePin>

		if(globalCluster.btn1_flag == 0)
 80015aa:	4b1b      	ldr	r3, [pc, #108]	; (8001618 <HAL_GPIO_EXTI_Callback+0x88>)
 80015ac:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d115      	bne.n	80015e0 <HAL_GPIO_EXTI_Callback+0x50>
		{
			fillScreen(BLACK);
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff f89b 	bl	80006f0 <fillScreen>
			ST7735_WriteString(0, 0, "Hi Elias!", Font_7x10, WHITE,BLACK);
 80015ba:	4b18      	ldr	r3, [pc, #96]	; (800161c <HAL_GPIO_EXTI_Callback+0x8c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	9202      	str	r2, [sp, #8]
 80015c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015c4:	9201      	str	r2, [sp, #4]
 80015c6:	685a      	ldr	r2, [r3, #4]
 80015c8:	9200      	str	r2, [sp, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <HAL_GPIO_EXTI_Callback+0x90>)
 80015ce:	2100      	movs	r1, #0
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff fadb 	bl	8000b8c <ST7735_WriteString>
			globalCluster.btn1_flag = 1;
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_GPIO_EXTI_Callback+0x88>)
 80015d8:	2201      	movs	r2, #1
 80015da:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
			ST7735_WriteString(0, 0, "Hi JoJo!", Font_7x10, BLACK,WHITE);
			globalCluster.btn1_flag = 0;
		}
	}

}
 80015de:	e014      	b.n	800160a <HAL_GPIO_EXTI_Callback+0x7a>
			fillScreen(BLACK);
 80015e0:	2000      	movs	r0, #0
 80015e2:	f7ff f885 	bl	80006f0 <fillScreen>
			ST7735_WriteString(0, 0, "Hi JoJo!", Font_7x10, BLACK,WHITE);
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <HAL_GPIO_EXTI_Callback+0x8c>)
 80015e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ec:	9202      	str	r2, [sp, #8]
 80015ee:	2200      	movs	r2, #0
 80015f0:	9201      	str	r2, [sp, #4]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	9200      	str	r2, [sp, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a0a      	ldr	r2, [pc, #40]	; (8001624 <HAL_GPIO_EXTI_Callback+0x94>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	2000      	movs	r0, #0
 80015fe:	f7ff fac5 	bl	8000b8c <ST7735_WriteString>
			globalCluster.btn1_flag = 0;
 8001602:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_GPIO_EXTI_Callback+0x88>)
 8001604:	2200      	movs	r2, #0
 8001606:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	58020400 	.word	0x58020400
 8001618:	240042a0 	.word	0x240042a0
 800161c:	24000000 	.word	0x24000000
 8001620:	0801acb4 	.word	0x0801acb4
 8001624:	0801acc0 	.word	0x0801acc0

08001628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800162e:	f000 f901 	bl	8001834 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001632:	4b41      	ldr	r3, [pc, #260]	; (8001738 <main+0x110>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d11b      	bne.n	8001676 <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800163e:	f3bf 8f4f 	dsb	sy
}
 8001642:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001644:	f3bf 8f6f 	isb	sy
}
 8001648:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800164a:	4b3b      	ldr	r3, [pc, #236]	; (8001738 <main+0x110>)
 800164c:	2200      	movs	r2, #0
 800164e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001652:	f3bf 8f4f 	dsb	sy
}
 8001656:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001658:	f3bf 8f6f 	isb	sy
}
 800165c:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800165e:	4b36      	ldr	r3, [pc, #216]	; (8001738 <main+0x110>)
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	4a35      	ldr	r2, [pc, #212]	; (8001738 <main+0x110>)
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800166a:	f3bf 8f4f 	dsb	sy
}
 800166e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001670:	f3bf 8f6f 	isb	sy
}
 8001674:	e000      	b.n	8001678 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001676:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8001678:	4b2f      	ldr	r3, [pc, #188]	; (8001738 <main+0x110>)
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d138      	bne.n	80016f6 <main+0xce>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001684:	4b2c      	ldr	r3, [pc, #176]	; (8001738 <main+0x110>)
 8001686:	2200      	movs	r2, #0
 8001688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800168c:	f3bf 8f4f 	dsb	sy
}
 8001690:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001692:	4b29      	ldr	r3, [pc, #164]	; (8001738 <main+0x110>)
 8001694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001698:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	0b5b      	lsrs	r3, r3, #13
 800169e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80016a2:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016ac:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	015a      	lsls	r2, r3, #5
 80016b2:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80016b6:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80016bc:	491e      	ldr	r1, [pc, #120]	; (8001738 <main+0x110>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	1e5a      	subs	r2, r3, #1
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1ef      	bne.n	80016ae <main+0x86>
    } while(sets-- != 0U);
 80016ce:	68bb      	ldr	r3, [r7, #8]
 80016d0:	1e5a      	subs	r2, r3, #1
 80016d2:	60ba      	str	r2, [r7, #8]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d1e5      	bne.n	80016a4 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80016d8:	f3bf 8f4f 	dsb	sy
}
 80016dc:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80016de:	4b16      	ldr	r3, [pc, #88]	; (8001738 <main+0x110>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a15      	ldr	r2, [pc, #84]	; (8001738 <main+0x110>)
 80016e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80016ea:	f3bf 8f4f 	dsb	sy
}
 80016ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80016f0:	f3bf 8f6f 	isb	sy
}
 80016f4:	e000      	b.n	80016f8 <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80016f6:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f8:	f001 f8d6 	bl	80028a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fc:	f000 f81e 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f7ff fe0c 	bl	800131c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001704:	f000 fe8c 	bl	8002420 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8001708:	f000 ff3c 	bl	8002584 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 800170c:	f7ff fb5e 	bl	8000dcc <MX_FDCAN1_Init>
  MX_TIM6_Init();
 8001710:	f000 fe2c 	bl	800236c <MX_TIM6_Init>
  MX_SPI1_Init();
 8001714:	f000 f8d4 	bl	80018c0 <MX_SPI1_Init>
  MX_CRC_Init();
 8001718:	f7ff fb14 	bl	8000d44 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
  FDCAN1_MSG_config();
 800171c:	f7ff fc38 	bl	8000f90 <FDCAN1_MSG_config>
  ST7735_Init(0);
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff f90f 	bl	8000944 <ST7735_Init>
  fillScreen(BLACK);
 8001726:	2000      	movs	r0, #0
 8001728:	f7fe ffe2 	bl	80006f0 <fillScreen>
  //testAll();

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800172c:	f7ff fd2a 	bl	8001184 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001730:	f00a f920 	bl	800b974 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001734:	e7fe      	b.n	8001734 <main+0x10c>
 8001736:	bf00      	nop
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b09c      	sub	sp, #112	; 0x70
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001746:	224c      	movs	r2, #76	; 0x4c
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f018 faa7 	bl	8019c9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	1d3b      	adds	r3, r7, #4
 8001752:	2220      	movs	r2, #32
 8001754:	2100      	movs	r1, #0
 8001756:	4618      	mov	r0, r3
 8001758:	f018 faa1 	bl	8019c9e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800175c:	2002      	movs	r0, #2
 800175e:	f004 fe6d 	bl	800643c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001762:	2300      	movs	r3, #0
 8001764:	603b      	str	r3, [r7, #0]
 8001766:	4b31      	ldr	r3, [pc, #196]	; (800182c <SystemClock_Config+0xf0>)
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800176e:	4a2f      	ldr	r2, [pc, #188]	; (800182c <SystemClock_Config+0xf0>)
 8001770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001774:	6193      	str	r3, [r2, #24]
 8001776:	4b2d      	ldr	r3, [pc, #180]	; (800182c <SystemClock_Config+0xf0>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001782:	bf00      	nop
 8001784:	4b29      	ldr	r3, [pc, #164]	; (800182c <SystemClock_Config+0xf0>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800178c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001790:	d1f8      	bne.n	8001784 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001792:	4b27      	ldr	r3, [pc, #156]	; (8001830 <SystemClock_Config+0xf4>)
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	f023 0303 	bic.w	r3, r3, #3
 800179a:	4a25      	ldr	r2, [pc, #148]	; (8001830 <SystemClock_Config+0xf4>)
 800179c:	f043 0302 	orr.w	r3, r3, #2
 80017a0:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80017a2:	2321      	movs	r3, #33	; 0x21
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80017a6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80017ac:	2301      	movs	r3, #1
 80017ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017b0:	2302      	movs	r3, #2
 80017b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80017b8:	2301      	movs	r3, #1
 80017ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80017bc:	2318      	movs	r3, #24
 80017be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 80017c0:	2301      	movs	r3, #1
 80017c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017c4:	2302      	movs	r3, #2
 80017c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017c8:	2302      	movs	r3, #2
 80017ca:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80017cc:	230c      	movs	r3, #12
 80017ce:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017dc:	4618      	mov	r0, r3
 80017de:	f004 fe67 	bl	80064b0 <HAL_RCC_OscConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80017e8:	f000 f864 	bl	80018b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017ec:	233f      	movs	r3, #63	; 0x3f
 80017ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017f0:	2303      	movs	r3, #3
 80017f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80017f8:	2308      	movs	r3, #8
 80017fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80017fc:	2340      	movs	r3, #64	; 0x40
 80017fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001800:	2340      	movs	r3, #64	; 0x40
 8001802:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001804:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001808:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800180a:	2340      	movs	r3, #64	; 0x40
 800180c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	2101      	movs	r1, #1
 8001812:	4618      	mov	r0, r3
 8001814:	f005 f9f8 	bl	8006c08 <HAL_RCC_ClockConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800181e:	f000 f849 	bl	80018b4 <Error_Handler>
  }
}
 8001822:	bf00      	nop
 8001824:	3770      	adds	r7, #112	; 0x70
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	58024800 	.word	0x58024800
 8001830:	58024400 	.word	0x58024400

08001834 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800183a:	463b      	mov	r3, r7
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
 8001840:	605a      	str	r2, [r3, #4]
 8001842:	609a      	str	r2, [r3, #8]
 8001844:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001846:	f001 f9a3 	bl	8002b90 <HAL_MPU_Disable>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800184e:	2300      	movs	r3, #0
 8001850:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30000000;
 8001852:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001856:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8001858:	230e      	movs	r3, #14
 800185a:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 800185c:	2300      	movs	r3, #0
 800185e:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8001860:	2301      	movs	r3, #1
 8001862:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001864:	2303      	movs	r3, #3
 8001866:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001868:	2301      	movs	r3, #1
 800186a:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800186c:	2301      	movs	r3, #1
 800186e:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8001870:	2300      	movs	r3, #0
 8001872:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001878:	463b      	mov	r3, r7
 800187a:	4618      	mov	r0, r3
 800187c:	f001 f9c0 	bl	8002c00 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8001880:	2004      	movs	r0, #4
 8001882:	f001 f99d 	bl	8002bc0 <HAL_MPU_Enable>

}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a04      	ldr	r2, [pc, #16]	; (80018b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d101      	bne.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80018a2:	f001 f83d 	bl	8002920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40010000 	.word	0x40010000

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	e7fe      	b.n	80018bc <Error_Handler+0x8>
	...

080018c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018c6:	4a28      	ldr	r2, [pc, #160]	; (8001968 <MX_SPI1_Init+0xa8>)
 80018c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018d4:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80018d8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018dc:	2207      	movs	r2, #7
 80018de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018e6:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018ee:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80018f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018f6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 80018fa:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_SPI1_Init+0xa4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001904:	2200      	movs	r2, #0
 8001906:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_SPI1_Init+0xa4>)
 800190a:	2200      	movs	r2, #0
 800190c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001910:	2200      	movs	r2, #0
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001914:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001916:	2200      	movs	r2, #0
 8001918:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <MX_SPI1_Init+0xa4>)
 800191c:	2200      	movs	r2, #0
 800191e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001920:	4b10      	ldr	r3, [pc, #64]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001922:	2200      	movs	r2, #0
 8001924:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001926:	4b0f      	ldr	r3, [pc, #60]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001928:	2200      	movs	r2, #0
 800192a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800192c:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <MX_SPI1_Init+0xa4>)
 800192e:	2200      	movs	r2, #0
 8001930:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001932:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001934:	2200      	movs	r2, #0
 8001936:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001938:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <MX_SPI1_Init+0xa4>)
 800193a:	2200      	movs	r2, #0
 800193c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001940:	2200      	movs	r2, #0
 8001942:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001946:	2200      	movs	r2, #0
 8001948:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_SPI1_Init+0xa4>)
 800194c:	2200      	movs	r2, #0
 800194e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001950:	4804      	ldr	r0, [pc, #16]	; (8001964 <MX_SPI1_Init+0xa4>)
 8001952:	f007 f843 	bl	80089dc <HAL_SPI_Init>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800195c:	f7ff ffaa 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001960:	bf00      	nop
 8001962:	bd80      	pop	{r7, pc}
 8001964:	24004430 	.word	0x24004430
 8001968:	40013000 	.word	0x40013000

0800196c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b0b8      	sub	sp, #224	; 0xe0
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001974:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001978:	2200      	movs	r2, #0
 800197a:	601a      	str	r2, [r3, #0]
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	609a      	str	r2, [r3, #8]
 8001980:	60da      	str	r2, [r3, #12]
 8001982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001984:	f107 0318 	add.w	r3, r7, #24
 8001988:	22b4      	movs	r2, #180	; 0xb4
 800198a:	2100      	movs	r1, #0
 800198c:	4618      	mov	r0, r3
 800198e:	f018 f986 	bl	8019c9e <memset>
  if(spiHandle->Instance==SPI1)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a36      	ldr	r2, [pc, #216]	; (8001a70 <HAL_SPI_MspInit+0x104>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d165      	bne.n	8001a68 <HAL_SPI_MspInit+0xfc>
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800199c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019a6:	f107 0318 	add.w	r3, r7, #24
 80019aa:	4618      	mov	r0, r3
 80019ac:	f005 fcfa 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 80019b6:	f7ff ff7d 	bl	80018b4 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ba:	4b2e      	ldr	r3, [pc, #184]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 80019bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019c0:	4a2c      	ldr	r2, [pc, #176]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 80019c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80019ca:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 80019cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80019d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 80019da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019de:	4a25      	ldr	r2, [pc, #148]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 80019e0:	f043 0301 	orr.w	r3, r3, #1
 80019e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 80019ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 80019f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019fc:	4a1d      	ldr	r2, [pc, #116]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 80019fe:	f043 0308 	orr.w	r3, r3, #8
 8001a02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a06:	4b1b      	ldr	r3, [pc, #108]	; (8001a74 <HAL_SPI_MspInit+0x108>)
 8001a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a0c:	f003 0308 	and.w	r3, r3, #8
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a14:	2320      	movs	r3, #32
 8001a16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a26:	2300      	movs	r3, #0
 8001a28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a36:	4619      	mov	r1, r3
 8001a38:	480f      	ldr	r0, [pc, #60]	; (8001a78 <HAL_SPI_MspInit+0x10c>)
 8001a3a:	f004 fb09 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a56:	2305      	movs	r3, #5
 8001a58:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a5c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a60:	4619      	mov	r1, r3
 8001a62:	4806      	ldr	r0, [pc, #24]	; (8001a7c <HAL_SPI_MspInit+0x110>)
 8001a64:	f004 faf4 	bl	8006050 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a68:	bf00      	nop
 8001a6a:	37e0      	adds	r7, #224	; 0xe0
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	40013000 	.word	0x40013000
 8001a74:	58024400 	.word	0x58024400
 8001a78:	58020000 	.word	0x58020000
 8001a7c:	58020c00 	.word	0x58020c00

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <HAL_MspInit+0x38>)
 8001a88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a8c:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <HAL_MspInit+0x38>)
 8001a8e:	f043 0302 	orr.w	r3, r3, #2
 8001a92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <HAL_MspInit+0x38>)
 8001a98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	210f      	movs	r1, #15
 8001aa8:	f06f 0001 	mvn.w	r0, #1
 8001aac:	f001 f848 	bl	8002b40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	58024400 	.word	0x58024400

08001abc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b08e      	sub	sp, #56	; 0x38
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b0f      	cmp	r3, #15
 8001ac8:	d844      	bhi.n	8001b54 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8001aca:	2200      	movs	r2, #0
 8001acc:	6879      	ldr	r1, [r7, #4]
 8001ace:	2019      	movs	r0, #25
 8001ad0:	f001 f836 	bl	8002b40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ad4:	2019      	movs	r0, #25
 8001ad6:	f001 f84d 	bl	8002b74 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8001ada:	4a24      	ldr	r2, [pc, #144]	; (8001b6c <HAL_InitTick+0xb0>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae0:	4b23      	ldr	r3, [pc, #140]	; (8001b70 <HAL_InitTick+0xb4>)
 8001ae2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ae6:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <HAL_InitTick+0xb4>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_InitTick+0xb4>)
 8001af2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
 8001afc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001afe:	f107 020c 	add.w	r2, r7, #12
 8001b02:	f107 0310 	add.w	r3, r7, #16
 8001b06:	4611      	mov	r1, r2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f005 fc09 	bl	8007320 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */

  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001b0e:	f005 fbf1 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 8001b12:	4603      	mov	r3, r0
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1a:	4a16      	ldr	r2, [pc, #88]	; (8001b74 <HAL_InitTick+0xb8>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	3b01      	subs	r3, #1
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b26:	4b14      	ldr	r3, [pc, #80]	; (8001b78 <HAL_InitTick+0xbc>)
 8001b28:	4a14      	ldr	r2, [pc, #80]	; (8001b7c <HAL_InitTick+0xc0>)
 8001b2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <HAL_InitTick+0xbc>)
 8001b2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b32:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b34:	4a10      	ldr	r2, [pc, #64]	; (8001b78 <HAL_InitTick+0xbc>)
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_InitTick+0xbc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <HAL_InitTick+0xbc>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b46:	480c      	ldr	r0, [pc, #48]	; (8001b78 <HAL_InitTick+0xbc>)
 8001b48:	f007 fb29 	bl	800919e <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d107      	bne.n	8001b62 <HAL_InitTick+0xa6>
 8001b52:	e001      	b.n	8001b58 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e005      	b.n	8001b64 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b58:	4807      	ldr	r0, [pc, #28]	; (8001b78 <HAL_InitTick+0xbc>)
 8001b5a:	f007 fbf5 	bl	8009348 <HAL_TIM_Base_Start_IT>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	e000      	b.n	8001b64 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3738      	adds	r7, #56	; 0x38
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	24000010 	.word	0x24000010
 8001b70:	58024400 	.word	0x58024400
 8001b74:	431bde83 	.word	0x431bde83
 8001b78:	240044b8 	.word	0x240044b8
 8001b7c:	40010000 	.word	0x40010000

08001b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <NMI_Handler+0x4>

08001b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <HardFault_Handler+0x4>

08001b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <MemManage_Handler+0x4>

08001b92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <BusFault_Handler+0x4>

08001b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <UsageFault_Handler+0x4>

08001b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001bb0:	4802      	ldr	r0, [pc, #8]	; (8001bbc <FDCAN1_IT0_IRQHandler+0x10>)
 8001bb2:	f003 fd3f 	bl	8005634 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2400433c 	.word	0x2400433c

08001bc0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc4:	4802      	ldr	r0, [pc, #8]	; (8001bd0 <TIM1_UP_IRQHandler+0x10>)
 8001bc6:	f007 fc45 	bl	8009454 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bca:	bf00      	nop
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	240044b8 	.word	0x240044b8

08001bd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USB_FS_PWR_EN_Pin);
 8001bd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bdc:	f004 fc13 	bl	8006406 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <ETH_IRQHandler+0x10>)
 8001bea:	f001 fe11 	bl	8003810 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	2400471c 	.word	0x2400471c

08001bf8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
	return 1;
 8001bfc:	2301      	movs	r3, #1
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <_kill>:

int _kill(int pid, int sig)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <_kill+0x20>)
 8001c14:	2216      	movs	r2, #22
 8001c16:	601a      	str	r2, [r3, #0]
	return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	240078b8 	.word	0x240078b8

08001c2c <_exit>:

void _exit (int status)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ffe5 	bl	8001c08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c3e:	e7fe      	b.n	8001c3e <_exit+0x12>

08001c40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	e00a      	b.n	8001c68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c52:	f3af 8000 	nop.w
 8001c56:	4601      	mov	r1, r0
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	60ba      	str	r2, [r7, #8]
 8001c5e:	b2ca      	uxtb	r2, r1
 8001c60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	3301      	adds	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	dbf0      	blt.n	8001c52 <_read+0x12>
	}

return len;
 8001c70:	687b      	ldr	r3, [r7, #4]
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3718      	adds	r7, #24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e009      	b.n	8001ca0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	60ba      	str	r2, [r7, #8]
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697a      	ldr	r2, [r7, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	dbf1      	blt.n	8001c8c <_write+0x12>
	}
	return len;
 8001ca8:	687b      	ldr	r3, [r7, #4]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <_close>:

int _close(int file)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
	return -1;
 8001cba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cda:	605a      	str	r2, [r3, #4]
	return 0;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_isatty>:

int _isatty(int file)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
	return 1;
 8001cf2:	2301      	movs	r3, #1
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr

08001d00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b085      	sub	sp, #20
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
	return 0;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d24:	4a14      	ldr	r2, [pc, #80]	; (8001d78 <_sbrk+0x5c>)
 8001d26:	4b15      	ldr	r3, [pc, #84]	; (8001d7c <_sbrk+0x60>)
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d30:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d102      	bne.n	8001d3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d38:	4b11      	ldr	r3, [pc, #68]	; (8001d80 <_sbrk+0x64>)
 8001d3a:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <_sbrk+0x68>)
 8001d3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d3e:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	693a      	ldr	r2, [r7, #16]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d205      	bcs.n	8001d58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001d4c:	4b0e      	ldr	r3, [pc, #56]	; (8001d88 <_sbrk+0x6c>)
 8001d4e:	220c      	movs	r2, #12
 8001d50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295
 8001d56:	e009      	b.n	8001d6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d58:	4b09      	ldr	r3, [pc, #36]	; (8001d80 <_sbrk+0x64>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	4a06      	ldr	r2, [pc, #24]	; (8001d80 <_sbrk+0x64>)
 8001d68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	371c      	adds	r7, #28
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	24050000 	.word	0x24050000
 8001d7c:	00000400 	.word	0x00000400
 8001d80:	2400037c 	.word	0x2400037c
 8001d84:	240078d0 	.word	0x240078d0
 8001d88:	240078b8 	.word	0x240078b8

08001d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d90:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <SystemInit+0xd8>)
 8001d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d96:	4a33      	ldr	r2, [pc, #204]	; (8001e64 <SystemInit+0xd8>)
 8001d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <SystemInit+0xdc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 030f 	and.w	r3, r3, #15
 8001da8:	2b06      	cmp	r3, #6
 8001daa:	d807      	bhi.n	8001dbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001dac:	4b2e      	ldr	r3, [pc, #184]	; (8001e68 <SystemInit+0xdc>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 030f 	bic.w	r3, r3, #15
 8001db4:	4a2c      	ldr	r2, [pc, #176]	; (8001e68 <SystemInit+0xdc>)
 8001db6:	f043 0307 	orr.w	r3, r3, #7
 8001dba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <SystemInit+0xe0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <SystemInit+0xe0>)
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001dc8:	4b28      	ldr	r3, [pc, #160]	; (8001e6c <SystemInit+0xe0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <SystemInit+0xe0>)
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	4926      	ldr	r1, [pc, #152]	; (8001e6c <SystemInit+0xe0>)
 8001dd4:	4b26      	ldr	r3, [pc, #152]	; (8001e70 <SystemInit+0xe4>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001dda:	4b23      	ldr	r3, [pc, #140]	; (8001e68 <SystemInit+0xdc>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d007      	beq.n	8001df6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001de6:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <SystemInit+0xdc>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 030f 	bic.w	r3, r3, #15
 8001dee:	4a1e      	ldr	r2, [pc, #120]	; (8001e68 <SystemInit+0xdc>)
 8001df0:	f043 0307 	orr.w	r3, r3, #7
 8001df4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <SystemInit+0xe0>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001dfc:	4b1b      	ldr	r3, [pc, #108]	; (8001e6c <SystemInit+0xe0>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e02:	4b1a      	ldr	r3, [pc, #104]	; (8001e6c <SystemInit+0xe0>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001e08:	4b18      	ldr	r3, [pc, #96]	; (8001e6c <SystemInit+0xe0>)
 8001e0a:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <SystemInit+0xe8>)
 8001e0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001e0e:	4b17      	ldr	r3, [pc, #92]	; (8001e6c <SystemInit+0xe0>)
 8001e10:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <SystemInit+0xec>)
 8001e12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001e14:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <SystemInit+0xe0>)
 8001e16:	4a19      	ldr	r2, [pc, #100]	; (8001e7c <SystemInit+0xf0>)
 8001e18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e1a:	4b14      	ldr	r3, [pc, #80]	; (8001e6c <SystemInit+0xe0>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001e20:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <SystemInit+0xe0>)
 8001e22:	4a16      	ldr	r2, [pc, #88]	; (8001e7c <SystemInit+0xf0>)
 8001e24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e26:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <SystemInit+0xe0>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <SystemInit+0xe0>)
 8001e2e:	4a13      	ldr	r2, [pc, #76]	; (8001e7c <SystemInit+0xf0>)
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <SystemInit+0xe0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <SystemInit+0xe0>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <SystemInit+0xe0>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <SystemInit+0xe0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	; (8001e80 <SystemInit+0xf4>)
 8001e4c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001e50:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <SystemInit+0xd8>)
 8001e54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e58:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00
 8001e68:	52002000 	.word	0x52002000
 8001e6c:	58024400 	.word	0x58024400
 8001e70:	eaf6ed7f 	.word	0xeaf6ed7f
 8001e74:	02020200 	.word	0x02020200
 8001e78:	01ff0000 	.word	0x01ff0000
 8001e7c:	01010280 	.word	0x01010280
 8001e80:	52004000 	.word	0x52004000

08001e84 <tcp_server_init>:
   3. Listen for the  incoming requests by the client
   4. Accept the Request, and now the server is ready for the data transfer
 */

void tcp_server_init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
	/* 1. create new tcp pcb */
	struct tcp_pcb *tpcb;

	tpcb = tcp_new();
 8001e8a:	f010 f967 	bl	801215c <tcp_new>
 8001e8e:	60f8      	str	r0, [r7, #12]

	err_t err;

	/* 2. bind _pcb to port 7 ( protocol) */
	ip_addr_t myIPADDR;
	IP_ADDR4(&myIPADDR, 192, 168, 1, 200);
 8001e90:	4b0f      	ldr	r3, [pc, #60]	; (8001ed0 <tcp_server_init+0x4c>)
 8001e92:	607b      	str	r3, [r7, #4]
	err = tcp_bind(tpcb, &myIPADDR, 10);
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	220a      	movs	r2, #10
 8001e98:	4619      	mov	r1, r3
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f00f f8ba 	bl	8011014 <tcp_bind>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	72fb      	strb	r3, [r7, #11]

	if (err == ERR_OK)
 8001ea4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d109      	bne.n	8001ec0 <tcp_server_init+0x3c>
	{
		/* 3. start tcp listening for _pcb */
		tpcb = tcp_listen(tpcb);
 8001eac:	21ff      	movs	r1, #255	; 0xff
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f00f f968 	bl	8011184 <tcp_listen_with_backlog>
 8001eb4:	60f8      	str	r0, [r7, #12]

		/* 4. initialize LwIP tcp_accept callback function */
		tcp_accept(tpcb, tcp_server_accept);
 8001eb6:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <tcp_server_init+0x50>)
 8001eb8:	68f8      	ldr	r0, [r7, #12]
 8001eba:	f010 f9cf 	bl	801225c <tcp_accept>
	else
	{
		/* deallocate the pcb */
		memp_free(MEMP_TCP_PCB, tpcb);
	}
}
 8001ebe:	e003      	b.n	8001ec8 <tcp_server_init+0x44>
		memp_free(MEMP_TCP_PCB, tpcb);
 8001ec0:	68f9      	ldr	r1, [r7, #12]
 8001ec2:	2001      	movs	r0, #1
 8001ec4:	f00d fc52 	bl	800f76c <memp_free>
}
 8001ec8:	bf00      	nop
 8001eca:	3710      	adds	r7, #16
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	c801a8c0 	.word	0xc801a8c0
 8001ed4:	08001ed9 	.word	0x08001ed9

08001ed8 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	68b8      	ldr	r0, [r7, #8]
 8001eea:	f00f ff45 	bl	8011d78 <tcp_setprio>

  /* allocate structure es to maintain tcp connection information */
  es = (struct tcp_server_struct *)mem_malloc(sizeof(struct tcp_server_struct));
 8001eee:	200c      	movs	r0, #12
 8001ef0:	f00d fa22 	bl	800f338 <mem_malloc>
 8001ef4:	6138      	str	r0, [r7, #16]
  if (es != NULL)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01f      	beq.n	8001f3c <tcp_server_accept+0x64>
  {
    es->state = ES_ACCEPTED;
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	68ba      	ldr	r2, [r7, #8]
 8001f06:	605a      	str	r2, [r3, #4]
    es->retries = 0;
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	705a      	strb	r2, [r3, #1]
    es->p = NULL;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 8001f14:	6939      	ldr	r1, [r7, #16]
 8001f16:	68b8      	ldr	r0, [r7, #8]
 8001f18:	f010 f928 	bl	801216c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001f1c:	490d      	ldr	r1, [pc, #52]	; (8001f54 <tcp_server_accept+0x7c>)
 8001f1e:	68b8      	ldr	r0, [r7, #8]
 8001f20:	f010 f936 	bl	8012190 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 8001f24:	490c      	ldr	r1, [pc, #48]	; (8001f58 <tcp_server_accept+0x80>)
 8001f26:	68b8      	ldr	r0, [r7, #8]
 8001f28:	f010 f976 	bl	8012218 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 0);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	490b      	ldr	r1, [pc, #44]	; (8001f5c <tcp_server_accept+0x84>)
 8001f30:	68b8      	ldr	r0, [r7, #8]
 8001f32:	f010 f9ab 	bl	801228c <tcp_poll>

    ret_err = ERR_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	75fb      	strb	r3, [r7, #23]
 8001f3a:	e005      	b.n	8001f48 <tcp_server_accept+0x70>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 8001f3c:	6939      	ldr	r1, [r7, #16]
 8001f3e:	68b8      	ldr	r0, [r7, #8]
 8001f40:	f000 f965 	bl	800220e <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 8001f44:	23ff      	movs	r3, #255	; 0xff
 8001f46:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 8001f48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3718      	adds	r7, #24
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	08001f61 	.word	0x08001f61
 8001f58:	08002095 	.word	0x08002095
 8001f5c:	080020b9 	.word	0x080020b9

08001f60 <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b088      	sub	sp, #32
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
 8001f6c:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d105      	bne.n	8001f80 <tcp_server_recv+0x20>
 8001f74:	4b43      	ldr	r3, [pc, #268]	; (8002084 <tcp_server_recv+0x124>)
 8001f76:	22c3      	movs	r2, #195	; 0xc3
 8001f78:	4943      	ldr	r1, [pc, #268]	; (8002088 <tcp_server_recv+0x128>)
 8001f7a:	4844      	ldr	r0, [pc, #272]	; (800208c <tcp_server_recv+0x12c>)
 8001f7c:	f017 fef2 	bl	8019d64 <iprintf>

  es = (struct tcp_server_struct *)arg;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	61bb      	str	r3, [r7, #24]

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d116      	bne.n	8001fb8 <tcp_server_recv+0x58>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d104      	bne.n	8001fa2 <tcp_server_recv+0x42>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001f98:	69b9      	ldr	r1, [r7, #24]
 8001f9a:	68b8      	ldr	r0, [r7, #8]
 8001f9c:	f000 f937 	bl	800220e <tcp_server_connection_close>
 8001fa0:	e007      	b.n	8001fb2 <tcp_server_recv+0x52>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 8001fa2:	493b      	ldr	r1, [pc, #236]	; (8002090 <tcp_server_recv+0x130>)
 8001fa4:	68b8      	ldr	r0, [r7, #8]
 8001fa6:	f010 f915 	bl	80121d4 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8001faa:	69b9      	ldr	r1, [r7, #24]
 8001fac:	68b8      	ldr	r0, [r7, #8]
 8001fae:	f000 f8db 	bl	8002168 <tcp_server_send>
    }
    ret_err = ERR_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	77fb      	strb	r3, [r7, #31]
 8001fb6:	e05f      	b.n	8002078 <tcp_server_recv+0x118>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d00b      	beq.n	8001fd8 <tcp_server_recv+0x78>
  {
    /* free received pbuf*/
    if (p != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <tcp_server_recv+0x72>
    {
      es->p = NULL;
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f00e fa71 	bl	80104b4 <pbuf_free>
    }
    ret_err = err;
 8001fd2:	78fb      	ldrb	r3, [r7, #3]
 8001fd4:	77fb      	strb	r3, [r7, #31]
 8001fd6:	e04f      	b.n	8002078 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_ACCEPTED)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d110      	bne.n	8002002 <tcp_server_recv+0xa2>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	701a      	strb	r2, [r3, #0]

    /* store reference to incoming pbuf (chain) */
    es->p = p;
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	609a      	str	r2, [r3, #8]

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 8001fec:	4928      	ldr	r1, [pc, #160]	; (8002090 <tcp_server_recv+0x130>)
 8001fee:	68b8      	ldr	r0, [r7, #8]
 8001ff0:	f010 f8f0 	bl	80121d4 <tcp_sent>

    /* handle the received data */
    tcp_server_handle(tpcb, es);
 8001ff4:	69b9      	ldr	r1, [r7, #24]
 8001ff6:	68b8      	ldr	r0, [r7, #8]
 8001ff8:	f000 f930 	bl	800225c <tcp_server_handle>

    ret_err = ERR_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	77fb      	strb	r3, [r7, #31]
 8002000:	e03a      	b.n	8002078 <tcp_server_recv+0x118>
  }
  else if (es->state == ES_RECEIVED)
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d115      	bne.n	8002036 <tcp_server_recv+0xd6>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <tcp_server_recv+0xc2>
    {
      es->p = p;
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	609a      	str	r2, [r3, #8]

      /* handle the received data */
      tcp_server_handle(tpcb, es);
 8002018:	69b9      	ldr	r1, [r7, #24]
 800201a:	68b8      	ldr	r0, [r7, #8]
 800201c:	f000 f91e 	bl	800225c <tcp_server_handle>
 8002020:	e006      	b.n	8002030 <tcp_server_recv+0xd0>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	617b      	str	r3, [r7, #20]
      pbuf_chain(ptr,p);
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	6978      	ldr	r0, [r7, #20]
 800202c:	f00e fb66 	bl	80106fc <pbuf_chain>
    }
    ret_err = ERR_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	77fb      	strb	r3, [r7, #31]
 8002034:	e020      	b.n	8002078 <tcp_server_recv+0x118>
  }
  else if(es->state == ES_CLOSING)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b03      	cmp	r3, #3
 800203c:	d10e      	bne.n	800205c <tcp_server_recv+0xfc>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	891b      	ldrh	r3, [r3, #8]
 8002042:	4619      	mov	r1, r3
 8002044:	68b8      	ldr	r0, [r7, #8]
 8002046:	f00f f9b3 	bl	80113b0 <tcp_recved>
    es->p = NULL;
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f00e fa2f 	bl	80104b4 <pbuf_free>
    ret_err = ERR_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	77fb      	strb	r3, [r7, #31]
 800205a:	e00d      	b.n	8002078 <tcp_server_recv+0x118>
  }
  else
  {
    /* unknown es->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	891b      	ldrh	r3, [r3, #8]
 8002060:	4619      	mov	r1, r3
 8002062:	68b8      	ldr	r0, [r7, #8]
 8002064:	f00f f9a4 	bl	80113b0 <tcp_recved>
    es->p = NULL;
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f00e fa20 	bl	80104b4 <pbuf_free>
    ret_err = ERR_OK;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
  }
  return ret_err;
 8002078:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3720      	adds	r7, #32
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	0801accc 	.word	0x0801accc
 8002088:	0801ace8 	.word	0x0801ace8
 800208c:	0801acf4 	.word	0x0801acf4
 8002090:	08002119 	.word	0x08002119

08002094 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b084      	sub	sp, #16
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	460b      	mov	r3, r1
 800209e:	70fb      	strb	r3, [r7, #3]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_server_struct *)arg;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 80020aa:	68f8      	ldr	r0, [r7, #12]
 80020ac:	f00c ffaa 	bl	800f004 <mem_free>
  }
}
 80020b0:	bf00      	nop
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_server_struct *es;

  es = (struct tcp_server_struct *)arg;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d017      	beq.n	80020fc <tcp_server_poll+0x44>
  {
    if (es->p != NULL)
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d008      	beq.n	80020e6 <tcp_server_poll+0x2e>
    {
      tcp_sent(tpcb, tcp_server_sent);
 80020d4:	490f      	ldr	r1, [pc, #60]	; (8002114 <tcp_server_poll+0x5c>)
 80020d6:	6838      	ldr	r0, [r7, #0]
 80020d8:	f010 f87c 	bl	80121d4 <tcp_sent>
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 80020dc:	68b9      	ldr	r1, [r7, #8]
 80020de:	6838      	ldr	r0, [r7, #0]
 80020e0:	f000 f842 	bl	8002168 <tcp_server_send>
 80020e4:	e007      	b.n	80020f6 <tcp_server_poll+0x3e>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b03      	cmp	r3, #3
 80020ec:	d103      	bne.n	80020f6 <tcp_server_poll+0x3e>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 80020ee:	68b9      	ldr	r1, [r7, #8]
 80020f0:	6838      	ldr	r0, [r7, #0]
 80020f2:	f000 f88c 	bl	800220e <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	e004      	b.n	8002106 <tcp_server_poll+0x4e>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f00e ff7d 	bl	8010ffc <tcp_abort>
    ret_err = ERR_ABRT;
 8002102:	23f3      	movs	r3, #243	; 0xf3
 8002104:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 8002106:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	08002119 	.word	0x08002119

08002118 <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	60b9      	str	r1, [r7, #8]
 8002122:	4613      	mov	r3, r2
 8002124:	80fb      	strh	r3, [r7, #6]
  struct tcp_server_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_server_struct *)arg;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	617b      	str	r3, [r7, #20]
  es->retries = 0;
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	2200      	movs	r2, #0
 800212e:	705a      	strb	r2, [r3, #1]

  if(es->p != NULL)
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d008      	beq.n	800214a <tcp_server_sent+0x32>
  {
    /* still got pbufs to send */
    tcp_sent(tpcb, tcp_server_sent);
 8002138:	490a      	ldr	r1, [pc, #40]	; (8002164 <tcp_server_sent+0x4c>)
 800213a:	68b8      	ldr	r0, [r7, #8]
 800213c:	f010 f84a 	bl	80121d4 <tcp_sent>
    tcp_server_send(tpcb, es);
 8002140:	6979      	ldr	r1, [r7, #20]
 8002142:	68b8      	ldr	r0, [r7, #8]
 8002144:	f000 f810 	bl	8002168 <tcp_server_send>
 8002148:	e007      	b.n	800215a <tcp_server_sent+0x42>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d103      	bne.n	800215a <tcp_server_sent+0x42>
      tcp_server_connection_close(tpcb, es);
 8002152:	6979      	ldr	r1, [r7, #20]
 8002154:	68b8      	ldr	r0, [r7, #8]
 8002156:	f000 f85a 	bl	800220e <tcp_server_connection_close>
  }
  return ERR_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3718      	adds	r7, #24
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	08002119 	.word	0x08002119

08002168 <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
 8002176:	e036      	b.n	80021e6 <tcp_server_send+0x7e>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	895a      	ldrh	r2, [r3, #10]
 8002186:	2301      	movs	r3, #1
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f012 ff2d 	bl	8014fe8 <tcp_write>
 800218e:	4603      	mov	r3, r0
 8002190:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8002192:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d11d      	bne.n	80021d6 <tcp_server_send+0x6e>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	895b      	ldrh	r3, [r3, #10]
 800219e:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d004      	beq.n	80021ba <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f00e fa23 	bl	8010600 <pbuf_ref>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
 80021ba:	6938      	ldr	r0, [r7, #16]
 80021bc:	f00e f97a 	bl	80104b4 <pbuf_free>
 80021c0:	4603      	mov	r3, r0
 80021c2:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
 80021c4:	7b7b      	ldrb	r3, [r7, #13]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d0f7      	beq.n	80021ba <tcp_server_send+0x52>
     /* we can read more data now */
     tcp_recved(tpcb, plen);
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	4619      	mov	r1, r3
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f00f f8ee 	bl	80113b0 <tcp_recved>
 80021d4:	e007      	b.n	80021e6 <tcp_server_send+0x7e>
   }
   else if(wr_err == ERR_MEM)
 80021d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d102      	bne.n	80021e6 <tcp_server_send+0x7e>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80021e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10b      	bne.n	8002206 <tcp_server_send+0x9e>
         (es->p != NULL) &&
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <tcp_server_send+0x9e>
         (es->p->len <= tcp_sndbuf(tpcb)))
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	895a      	ldrh	r2, [r3, #10]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (es->p != NULL) &&
 8002202:	429a      	cmp	r2, r3
 8002204:	d9b8      	bls.n	8002178 <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8002206:	bf00      	nop
 8002208:	3718      	adds	r7, #24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on _state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b082      	sub	sp, #8
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
 8002216:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8002218:	2100      	movs	r1, #0
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f00f ffa6 	bl	801216c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8002220:	2100      	movs	r1, #0
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f00f ffd6 	bl	80121d4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8002228:	2100      	movs	r1, #0
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f00f ffb0 	bl	8012190 <tcp_recv>
  tcp_err(tpcb, NULL);
 8002230:	2100      	movs	r1, #0
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f00f fff0 	bl	8012218 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f010 f825 	bl	801228c <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d002      	beq.n	800224e <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8002248:	6838      	ldr	r0, [r7, #0]
 800224a:	f00c fedb 	bl	800f004 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	f00e fdea 	bl	8010e28 <tcp_close>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <tcp_server_handle>:

/* Handle the incoming TCP Data */

static void tcp_server_handle(struct tcp_pcb *tpcb, struct tcp_server_struct *es)
{
 800225c:	b5b0      	push	{r4, r5, r7, lr}
 800225e:	b0a0      	sub	sp, #128	; 0x80
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
	struct tcp_server_struct *esTx = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	67fb      	str	r3, [r7, #124]	; 0x7c

	/* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	673b      	str	r3, [r7, #112]	; 0x70
	uint16_t inPort = tpcb->remote_port;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8b1b      	ldrh	r3, [r3, #24]
 8002274:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
 8002278:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800227c:	4618      	mov	r0, r3
 800227e:	f016 fb1f 	bl	80188c0 <ip4addr_ntoa>
 8002282:	6778      	str	r0, [r7, #116]	; 0x74

	esTx->state = es->state;
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	781a      	ldrb	r2, [r3, #0]
 8002288:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800228a:	701a      	strb	r2, [r3, #0]
	esTx->pcb = es->pcb;
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002292:	605a      	str	r2, [r3, #4]
	esTx->p = es->p;
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800229a:	609a      	str	r2, [r3, #8]

	char buf[100];
	memset (buf, '\0', 100);
 800229c:	f107 030c 	add.w	r3, r7, #12
 80022a0:	2264      	movs	r2, #100	; 0x64
 80022a2:	2100      	movs	r1, #0
 80022a4:	4618      	mov	r0, r3
 80022a6:	f017 fcfa 	bl	8019c9e <memset>

	strncpy(buf, (char *)es->p->payload, es->p->tot_len);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	6859      	ldr	r1, [r3, #4]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	891b      	ldrh	r3, [r3, #8]
 80022b6:	461a      	mov	r2, r3
 80022b8:	f107 030c 	add.w	r3, r7, #12
 80022bc:	4618      	mov	r0, r3
 80022be:	f017 fe6e 	bl	8019f9e <strncpy>
	strncpy(globalCluster.myString, (char *)es->p->payload, es->p->tot_len);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	891b      	ldrh	r3, [r3, #8]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4824      	ldr	r0, [pc, #144]	; (8002364 <tcp_server_handle+0x108>)
 80022d2:	f017 fe64 	bl	8019f9e <strncpy>
	strcat (buf, "+ Hello from TCP SERVER\n");
 80022d6:	f107 030c 	add.w	r3, r7, #12
 80022da:	4618      	mov	r0, r3
 80022dc:	f7fe f818 	bl	8000310 <strlen>
 80022e0:	4603      	mov	r3, r0
 80022e2:	461a      	mov	r2, r3
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4413      	add	r3, r2
 80022ea:	4a1f      	ldr	r2, [pc, #124]	; (8002368 <tcp_server_handle+0x10c>)
 80022ec:	461d      	mov	r5, r3
 80022ee:	4614      	mov	r4, r2
 80022f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f2:	6028      	str	r0, [r5, #0]
 80022f4:	6069      	str	r1, [r5, #4]
 80022f6:	60aa      	str	r2, [r5, #8]
 80022f8:	60eb      	str	r3, [r5, #12]
 80022fa:	cc03      	ldmia	r4!, {r0, r1}
 80022fc:	6128      	str	r0, [r5, #16]
 80022fe:	6169      	str	r1, [r5, #20]
 8002300:	7823      	ldrb	r3, [r4, #0]
 8002302:	762b      	strb	r3, [r5, #24]


	esTx->p->payload = (void *)buf;
 8002304:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f107 020c 	add.w	r2, r7, #12
 800230c:	605a      	str	r2, [r3, #4]
	esTx->p->tot_len = (es->p->tot_len - es->p->len) + strlen (buf);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	891a      	ldrh	r2, [r3, #8]
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	895b      	ldrh	r3, [r3, #10]
 800231a:	1ad3      	subs	r3, r2, r3
 800231c:	b29c      	uxth	r4, r3
 800231e:	f107 030c 	add.w	r3, r7, #12
 8002322:	4618      	mov	r0, r3
 8002324:	f7fd fff4 	bl	8000310 <strlen>
 8002328:	4603      	mov	r3, r0
 800232a:	b29a      	uxth	r2, r3
 800232c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4422      	add	r2, r4
 8002332:	b292      	uxth	r2, r2
 8002334:	811a      	strh	r2, [r3, #8]
	esTx->p->len = strlen (buf);
 8002336:	f107 030c 	add.w	r3, r7, #12
 800233a:	4618      	mov	r0, r3
 800233c:	f7fd ffe8 	bl	8000310 <strlen>
 8002340:	4602      	mov	r2, r0
 8002342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	b292      	uxth	r2, r2
 8002348:	815a      	strh	r2, [r3, #10]

	tcp_server_send(tpcb, esTx);
 800234a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ff0b 	bl	8002168 <tcp_server_send>

	pbuf_free(es->p);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	4618      	mov	r0, r3
 8002358:	f00e f8ac 	bl	80104b4 <pbuf_free>

}
 800235c:	bf00      	nop
 800235e:	3780      	adds	r7, #128	; 0x80
 8002360:	46bd      	mov	sp, r7
 8002362:	bdb0      	pop	{r4, r5, r7, pc}
 8002364:	240042a0 	.word	0x240042a0
 8002368:	0801ad1c 	.word	0x0801ad1c

0800236c <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <MX_TIM6_Init+0x68>)
 800237e:	4a16      	ldr	r2, [pc, #88]	; (80023d8 <MX_TIM6_Init+0x6c>)
 8002380:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000 - 1;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <MX_TIM6_Init+0x68>)
 8002384:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8002388:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238a:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <MX_TIM6_Init+0x68>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <MX_TIM6_Init+0x68>)
 8002392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002396:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002398:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <MX_TIM6_Init+0x68>)
 800239a:	2200      	movs	r2, #0
 800239c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800239e:	480d      	ldr	r0, [pc, #52]	; (80023d4 <MX_TIM6_Init+0x68>)
 80023a0:	f006 fefd 	bl	800919e <HAL_TIM_Base_Init>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80023aa:	f7ff fa83 	bl	80018b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ae:	2300      	movs	r3, #0
 80023b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b2:	2300      	movs	r3, #0
 80023b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	4619      	mov	r1, r3
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <MX_TIM6_Init+0x68>)
 80023bc:	f007 fa38 	bl	8009830 <HAL_TIMEx_MasterConfigSynchronization>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80023c6:	f7ff fa75 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	24004504 	.word	0x24004504
 80023d8:	40001000 	.word	0x40001000

080023dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a0b      	ldr	r2, [pc, #44]	; (8002418 <HAL_TIM_Base_MspInit+0x3c>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d10e      	bne.n	800240c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ee:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_TIM_Base_MspInit+0x40>)
 80023f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f4:	4a09      	ldr	r2, [pc, #36]	; (800241c <HAL_TIM_Base_MspInit+0x40>)
 80023f6:	f043 0310 	orr.w	r3, r3, #16
 80023fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023fe:	4b07      	ldr	r3, [pc, #28]	; (800241c <HAL_TIM_Base_MspInit+0x40>)
 8002400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002404:	f003 0310 	and.w	r3, r3, #16
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40001000 	.word	0x40001000
 800241c:	58024400 	.word	0x58024400

08002420 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002424:	4b22      	ldr	r3, [pc, #136]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 8002426:	4a23      	ldr	r2, [pc, #140]	; (80024b4 <MX_USART3_UART_Init+0x94>)
 8002428:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800242a:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 800242c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002430:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002432:	4b1f      	ldr	r3, [pc, #124]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002438:	4b1d      	ldr	r3, [pc, #116]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800243e:	4b1c      	ldr	r3, [pc, #112]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 8002446:	220c      	movs	r2, #12
 8002448:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244a:	4b19      	ldr	r3, [pc, #100]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002456:	4b16      	ldr	r3, [pc, #88]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 8002458:	2200      	movs	r2, #0
 800245a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 800245e:	2200      	movs	r2, #0
 8002460:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 8002464:	2200      	movs	r2, #0
 8002466:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002468:	4811      	ldr	r0, [pc, #68]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 800246a:	f007 fa9b 	bl	80099a4 <HAL_UART_Init>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002474:	f7ff fa1e 	bl	80018b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002478:	2100      	movs	r1, #0
 800247a:	480d      	ldr	r0, [pc, #52]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 800247c:	f008 fbc4 	bl	800ac08 <HAL_UARTEx_SetTxFifoThreshold>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002486:	f7ff fa15 	bl	80018b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800248a:	2100      	movs	r1, #0
 800248c:	4808      	ldr	r0, [pc, #32]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 800248e:	f008 fbf9 	bl	800ac84 <HAL_UARTEx_SetRxFifoThreshold>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002498:	f7ff fa0c 	bl	80018b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800249c:	4804      	ldr	r0, [pc, #16]	; (80024b0 <MX_USART3_UART_Init+0x90>)
 800249e:	f008 fb7a 	bl	800ab96 <HAL_UARTEx_DisableFifoMode>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80024a8:	f7ff fa04 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024ac:	bf00      	nop
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	24004550 	.word	0x24004550
 80024b4:	40004800 	.word	0x40004800

080024b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b0b6      	sub	sp, #216	; 0xd8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	609a      	str	r2, [r3, #8]
 80024cc:	60da      	str	r2, [r3, #12]
 80024ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	22b4      	movs	r2, #180	; 0xb4
 80024d6:	2100      	movs	r1, #0
 80024d8:	4618      	mov	r0, r3
 80024da:	f017 fbe0 	bl	8019c9e <memset>
  if(uartHandle->Instance==USART3)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a25      	ldr	r2, [pc, #148]	; (8002578 <HAL_UART_MspInit+0xc0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d142      	bne.n	800256e <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80024e8:	2302      	movs	r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024f2:	f107 0310 	add.w	r3, r7, #16
 80024f6:	4618      	mov	r0, r3
 80024f8:	f004 ff54 	bl	80073a4 <HAL_RCCEx_PeriphCLKConfig>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002502:	f7ff f9d7 	bl	80018b4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_UART_MspInit+0xc4>)
 8002508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800250c:	4a1b      	ldr	r2, [pc, #108]	; (800257c <HAL_UART_MspInit+0xc4>)
 800250e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002512:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002516:	4b19      	ldr	r3, [pc, #100]	; (800257c <HAL_UART_MspInit+0xc4>)
 8002518:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800251c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002524:	4b15      	ldr	r3, [pc, #84]	; (800257c <HAL_UART_MspInit+0xc4>)
 8002526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800252a:	4a14      	ldr	r2, [pc, #80]	; (800257c <HAL_UART_MspInit+0xc4>)
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002534:	4b11      	ldr	r3, [pc, #68]	; (800257c <HAL_UART_MspInit+0xc4>)
 8002536:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	60bb      	str	r3, [r7, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8002542:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002546:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002556:	2300      	movs	r3, #0
 8002558:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800255c:	2307      	movs	r3, #7
 800255e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002562:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002566:	4619      	mov	r1, r3
 8002568:	4805      	ldr	r0, [pc, #20]	; (8002580 <HAL_UART_MspInit+0xc8>)
 800256a:	f003 fd71 	bl	8006050 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800256e:	bf00      	nop
 8002570:	37d8      	adds	r7, #216	; 0xd8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40004800 	.word	0x40004800
 800257c:	58024400 	.word	0x58024400
 8002580:	58020c00 	.word	0x58020c00

08002584 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8002588:	bf00      	nop
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
	...

08002594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002598:	f7ff fbf8 	bl	8001d8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800259c:	480c      	ldr	r0, [pc, #48]	; (80025d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800259e:	490d      	ldr	r1, [pc, #52]	; (80025d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025a4:	e002      	b.n	80025ac <LoopCopyDataInit>

080025a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025aa:	3304      	adds	r3, #4

080025ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025b0:	d3f9      	bcc.n	80025a6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025b2:	4a0a      	ldr	r2, [pc, #40]	; (80025dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025b4:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025b8:	e001      	b.n	80025be <LoopFillZerobss>

080025ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025bc:	3204      	adds	r2, #4

080025be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025c0:	d3fb      	bcc.n	80025ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025c2:	f017 fb29 	bl	8019c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025c6:	f7ff f82f 	bl	8001628 <main>
  bx  lr
 80025ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025cc:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80025d0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80025d4:	240000a0 	.word	0x240000a0
  ldr r2, =_sidata
 80025d8:	0801e394 	.word	0x0801e394
  ldr r2, =_sbss
 80025dc:	240000a0 	.word	0x240000a0
  ldr r4, =_ebss
 80025e0:	240078cc 	.word	0x240078cc

080025e4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025e4:	e7fe      	b.n	80025e4 <ADC3_IRQHandler>

080025e6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80025e6:	b480      	push	{r7}
 80025e8:	b083      	sub	sp, #12
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
 80025ee:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00b      	beq.n	800260e <LAN8742_RegisterBusIO+0x28>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <LAN8742_RegisterBusIO+0x28>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <LAN8742_RegisterBusIO+0x28>
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d102      	bne.n	8002614 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800260e:	f04f 33ff 	mov.w	r3, #4294967295
 8002612:	e014      	b.n	800263e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	689a      	ldr	r2, [r3, #8]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	691a      	ldr	r2, [r3, #16]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800263c:	2300      	movs	r3, #0
}
 800263e:	4618      	mov	r0, r3
 8002640:	370c      	adds	r7, #12
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr

0800264a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800264a:	b580      	push	{r7, lr}
 800264c:	b086      	sub	sp, #24
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d17c      	bne.n	8002764 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d002      	beq.n	8002678 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2220      	movs	r2, #32
 800267c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800267e:	2300      	movs	r3, #0
 8002680:	617b      	str	r3, [r7, #20]
 8002682:	e01c      	b.n	80026be <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	695b      	ldr	r3, [r3, #20]
 8002688:	f107 0208 	add.w	r2, r7, #8
 800268c:	2112      	movs	r1, #18
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	4798      	blx	r3
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	da03      	bge.n	80026a0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002698:	f06f 0304 	mvn.w	r3, #4
 800269c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800269e:	e00b      	b.n	80026b8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	f003 031f 	and.w	r3, r3, #31
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d105      	bne.n	80026b8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
         break;
 80026b6:	e005      	b.n	80026c4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	3301      	adds	r3, #1
 80026bc:	617b      	str	r3, [r7, #20]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	2b1f      	cmp	r3, #31
 80026c2:	d9df      	bls.n	8002684 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b1f      	cmp	r3, #31
 80026ca:	d902      	bls.n	80026d2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80026cc:	f06f 0302 	mvn.w	r3, #2
 80026d0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d145      	bne.n	8002764 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	6810      	ldr	r0, [r2, #0]
 80026e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026e4:	2100      	movs	r1, #0
 80026e6:	4798      	blx	r3
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	db37      	blt.n	800275e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6810      	ldr	r0, [r2, #0]
 80026f6:	f107 0208 	add.w	r2, r7, #8
 80026fa:	2100      	movs	r1, #0
 80026fc:	4798      	blx	r3
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	db28      	blt.n	8002756 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	4798      	blx	r3
 800270a:	4603      	mov	r3, r0
 800270c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800270e:	e01c      	b.n	800274a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	4798      	blx	r3
 8002716:	4603      	mov	r3, r0
 8002718:	461a      	mov	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002722:	d80e      	bhi.n	8002742 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6810      	ldr	r0, [r2, #0]
 800272c:	f107 0208 	add.w	r2, r7, #8
 8002730:	2100      	movs	r1, #0
 8002732:	4798      	blx	r3
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	da07      	bge.n	800274a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800273a:	f06f 0304 	mvn.w	r3, #4
 800273e:	613b      	str	r3, [r7, #16]
                 break;
 8002740:	e010      	b.n	8002764 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002742:	f06f 0301 	mvn.w	r3, #1
 8002746:	613b      	str	r3, [r7, #16]
               break;
 8002748:	e00c      	b.n	8002764 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1dd      	bne.n	8002710 <LAN8742_Init+0xc6>
 8002754:	e006      	b.n	8002764 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002756:	f06f 0304 	mvn.w	r3, #4
 800275a:	613b      	str	r3, [r7, #16]
 800275c:	e002      	b.n	8002764 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800275e:	f06f 0303 	mvn.w	r3, #3
 8002762:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d112      	bne.n	8002790 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	4798      	blx	r3
 8002770:	4603      	mov	r3, r0
 8002772:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002774:	bf00      	nop
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	4798      	blx	r3
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002788:	d9f5      	bls.n	8002776 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002790:	693b      	ldr	r3, [r7, #16]
 }
 8002792:	4618      	mov	r0, r3
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b084      	sub	sp, #16
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	695b      	ldr	r3, [r3, #20]
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	6810      	ldr	r0, [r2, #0]
 80027ae:	f107 020c 	add.w	r2, r7, #12
 80027b2:	2101      	movs	r1, #1
 80027b4:	4798      	blx	r3
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	da02      	bge.n	80027c2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80027bc:	f06f 0304 	mvn.w	r3, #4
 80027c0:	e06e      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6810      	ldr	r0, [r2, #0]
 80027ca:	f107 020c 	add.w	r2, r7, #12
 80027ce:	2101      	movs	r1, #1
 80027d0:	4798      	blx	r3
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	da02      	bge.n	80027de <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80027d8:	f06f 0304 	mvn.w	r3, #4
 80027dc:	e060      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80027e8:	2301      	movs	r3, #1
 80027ea:	e059      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6810      	ldr	r0, [r2, #0]
 80027f4:	f107 020c 	add.w	r2, r7, #12
 80027f8:	2100      	movs	r1, #0
 80027fa:	4798      	blx	r3
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da02      	bge.n	8002808 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002802:	f06f 0304 	mvn.w	r3, #4
 8002806:	e04b      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d11b      	bne.n	800284a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d006      	beq.n	800282a <LAN8742_GetLinkState+0x90>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002826:	2302      	movs	r3, #2
 8002828:	e03a      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002834:	2303      	movs	r3, #3
 8002836:	e033      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002842:	2304      	movs	r3, #4
 8002844:	e02c      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002846:	2305      	movs	r3, #5
 8002848:	e02a      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6810      	ldr	r0, [r2, #0]
 8002852:	f107 020c 	add.w	r2, r7, #12
 8002856:	211f      	movs	r1, #31
 8002858:	4798      	blx	r3
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	da02      	bge.n	8002866 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002860:	f06f 0304 	mvn.w	r3, #4
 8002864:	e01c      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002870:	2306      	movs	r3, #6
 8002872:	e015      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 031c 	and.w	r3, r3, #28
 800287a:	2b18      	cmp	r3, #24
 800287c:	d101      	bne.n	8002882 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800287e:	2302      	movs	r3, #2
 8002880:	e00e      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f003 031c 	and.w	r3, r3, #28
 8002888:	2b08      	cmp	r3, #8
 800288a:	d101      	bne.n	8002890 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800288c:	2303      	movs	r3, #3
 800288e:	e007      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 031c 	and.w	r3, r3, #28
 8002896:	2b14      	cmp	r3, #20
 8002898:	d101      	bne.n	800289e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800289a:	2304      	movs	r3, #4
 800289c:	e000      	b.n	80028a0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800289e:	2305      	movs	r3, #5
    }				
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ae:	2003      	movs	r0, #3
 80028b0:	f000 f93b 	bl	8002b2a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028b4:	f004 fb5e 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
 80028b8:	4602      	mov	r2, r0
 80028ba:	4b15      	ldr	r3, [pc, #84]	; (8002910 <HAL_Init+0x68>)
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	0a1b      	lsrs	r3, r3, #8
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	4913      	ldr	r1, [pc, #76]	; (8002914 <HAL_Init+0x6c>)
 80028c6:	5ccb      	ldrb	r3, [r1, r3]
 80028c8:	f003 031f 	and.w	r3, r3, #31
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
 80028d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <HAL_Init+0x68>)
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	4a0e      	ldr	r2, [pc, #56]	; (8002914 <HAL_Init+0x6c>)
 80028dc:	5cd3      	ldrb	r3, [r2, r3]
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	fa22 f303 	lsr.w	r3, r2, r3
 80028e8:	4a0b      	ldr	r2, [pc, #44]	; (8002918 <HAL_Init+0x70>)
 80028ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028ec:	4a0b      	ldr	r2, [pc, #44]	; (800291c <HAL_Init+0x74>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028f2:	200f      	movs	r0, #15
 80028f4:	f7ff f8e2 	bl	8001abc <HAL_InitTick>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e002      	b.n	8002908 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002902:	f7ff f8bd 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	58024400 	.word	0x58024400
 8002914:	0801e0b8 	.word	0x0801e0b8
 8002918:	2400000c 	.word	0x2400000c
 800291c:	24000008 	.word	0x24000008

08002920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_IncTick+0x20>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <HAL_IncTick+0x24>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4413      	add	r3, r2
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <HAL_IncTick+0x24>)
 8002932:	6013      	str	r3, [r2, #0]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
 800293e:	bf00      	nop
 8002940:	24000014 	.word	0x24000014
 8002944:	240045e0 	.word	0x240045e0

08002948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return uwTick;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_GetTick+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	240045e0 	.word	0x240045e0

08002960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002968:	f7ff ffee 	bl	8002948 <HAL_GetTick>
 800296c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002978:	d005      	beq.n	8002986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <HAL_Delay+0x44>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	4413      	add	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002986:	bf00      	nop
 8002988:	f7ff ffde 	bl	8002948 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	429a      	cmp	r2, r3
 8002996:	d8f7      	bhi.n	8002988 <HAL_Delay+0x28>
  {
  }
}
 8002998:	bf00      	nop
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	24000014 	.word	0x24000014

080029a8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80029b0:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029b8:	4904      	ldr	r1, [pc, #16]	; (80029cc <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
}
 80029c0:	bf00      	nop
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	58000400 	.word	0x58000400

080029d0 <__NVIC_SetPriorityGrouping>:
{
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e0:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <__NVIC_SetPriorityGrouping+0x40>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029e6:	68ba      	ldr	r2, [r7, #8]
 80029e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029ec:	4013      	ands	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <__NVIC_SetPriorityGrouping+0x40>)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	60d3      	str	r3, [r2, #12]
}
 8002a04:	bf00      	nop
 8002a06:	3714      	adds	r7, #20
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr
 8002a10:	e000ed00 	.word	0xe000ed00
 8002a14:	05fa0000 	.word	0x05fa0000

08002a18 <__NVIC_GetPriorityGrouping>:
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a1c:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <__NVIC_GetPriorityGrouping+0x18>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	0a1b      	lsrs	r3, r3, #8
 8002a22:	f003 0307 	and.w	r3, r3, #7
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <__NVIC_EnableIRQ>:
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	db0b      	blt.n	8002a5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	4907      	ldr	r1, [pc, #28]	; (8002a6c <__NVIC_EnableIRQ+0x38>)
 8002a4e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2001      	movs	r0, #1
 8002a56:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	e000e100 	.word	0xe000e100

08002a70 <__NVIC_SetPriority>:
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002a7c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	db0a      	blt.n	8002a9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	490c      	ldr	r1, [pc, #48]	; (8002abc <__NVIC_SetPriority+0x4c>)
 8002a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a8e:	0112      	lsls	r2, r2, #4
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	440b      	add	r3, r1
 8002a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a98:	e00a      	b.n	8002ab0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	4908      	ldr	r1, [pc, #32]	; (8002ac0 <__NVIC_SetPriority+0x50>)
 8002aa0:	88fb      	ldrh	r3, [r7, #6]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	3b04      	subs	r3, #4
 8002aa8:	0112      	lsls	r2, r2, #4
 8002aaa:	b2d2      	uxtb	r2, r2
 8002aac:	440b      	add	r3, r1
 8002aae:	761a      	strb	r2, [r3, #24]
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000e100 	.word	0xe000e100
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <NVIC_EncodePriority>:
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b089      	sub	sp, #36	; 0x24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	f1c3 0307 	rsb	r3, r3, #7
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	bf28      	it	cs
 8002ae2:	2304      	movcs	r3, #4
 8002ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	3304      	adds	r3, #4
 8002aea:	2b06      	cmp	r3, #6
 8002aec:	d902      	bls.n	8002af4 <NVIC_EncodePriority+0x30>
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3b03      	subs	r3, #3
 8002af2:	e000      	b.n	8002af6 <NVIC_EncodePriority+0x32>
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	f04f 32ff 	mov.w	r2, #4294967295
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	43da      	mvns	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	401a      	ands	r2, r3
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	fa01 f303 	lsl.w	r3, r1, r3
 8002b16:	43d9      	mvns	r1, r3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b1c:	4313      	orrs	r3, r2
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3724      	adds	r7, #36	; 0x24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f7ff ff4c 	bl	80029d0 <__NVIC_SetPriorityGrouping>
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	607a      	str	r2, [r7, #4]
 8002b4c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b4e:	f7ff ff63 	bl	8002a18 <__NVIC_GetPriorityGrouping>
 8002b52:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	68b9      	ldr	r1, [r7, #8]
 8002b58:	6978      	ldr	r0, [r7, #20]
 8002b5a:	f7ff ffb3 	bl	8002ac4 <NVIC_EncodePriority>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7ff ff82 	bl	8002a70 <__NVIC_SetPriority>
}
 8002b6c:	bf00      	nop
 8002b6e:	3718      	adds	r7, #24
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff ff56 	bl	8002a34 <__NVIC_EnableIRQ>
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002b94:	f3bf 8f5f 	dmb	sy
}
 8002b98:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8002b9a:	4b07      	ldr	r3, [pc, #28]	; (8002bb8 <HAL_MPU_Disable+0x28>)
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <HAL_MPU_Disable+0x28>)
 8002ba0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba4:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_MPU_Disable+0x2c>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	605a      	str	r2, [r3, #4]
}
 8002bac:	bf00      	nop
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	e000ed00 	.word	0xe000ed00
 8002bbc:	e000ed90 	.word	0xe000ed90

08002bc0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8002bc8:	4a0b      	ldr	r2, [pc, #44]	; (8002bf8 <HAL_MPU_Enable+0x38>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f043 0301 	orr.w	r3, r3, #1
 8002bd0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <HAL_MPU_Enable+0x3c>)
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <HAL_MPU_Enable+0x3c>)
 8002bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bdc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002bde:	f3bf 8f4f 	dsb	sy
}
 8002be2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002be4:	f3bf 8f6f 	isb	sy
}
 8002be8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000ed90 	.word	0xe000ed90
 8002bfc:	e000ed00 	.word	0xe000ed00

08002c00 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002c00:	b480      	push	{r7}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	785a      	ldrb	r2, [r3, #1]
 8002c0c:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_MPU_ConfigRegion+0x84>)
 8002c0e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	781b      	ldrb	r3, [r3, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d029      	beq.n	8002c6c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8002c18:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <HAL_MPU_ConfigRegion+0x84>)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	7b1b      	ldrb	r3, [r3, #12]
 8002c24:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	7adb      	ldrb	r3, [r3, #11]
 8002c2a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c2c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7a9b      	ldrb	r3, [r3, #10]
 8002c32:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002c34:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	7b5b      	ldrb	r3, [r3, #13]
 8002c3a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002c3c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	7b9b      	ldrb	r3, [r3, #14]
 8002c42:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002c44:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7bdb      	ldrb	r3, [r3, #15]
 8002c4a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002c4c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	7a5b      	ldrb	r3, [r3, #9]
 8002c52:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002c54:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7a1b      	ldrb	r3, [r3, #8]
 8002c5a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002c5c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c64:	4a07      	ldr	r2, [pc, #28]	; (8002c84 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002c66:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002c68:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8002c6a:	e005      	b.n	8002c78 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <HAL_MPU_ConfigRegion+0x84>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002c72:	4b04      	ldr	r3, [pc, #16]	; (8002c84 <HAL_MPU_ConfigRegion+0x84>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	e000ed90 	.word	0xe000ed90

08002c88 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e054      	b.n	8002d44 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	7f5b      	ldrb	r3, [r3, #29]
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f7fe f86c 	bl	8000d88 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	791b      	ldrb	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a22      	ldr	r2, [pc, #136]	; (8002d4c <HAL_CRC_Init+0xc4>)
 8002cc4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f022 0218 	bic.w	r2, r2, #24
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	e00c      	b.n	8002cf2 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6899      	ldr	r1, [r3, #8]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f834 	bl	8002d50 <HAL_CRCEx_Polynomial_Set>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e028      	b.n	8002d44 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	795b      	ldrb	r3, [r3, #5]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d105      	bne.n	8002d06 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8002d02:	611a      	str	r2, [r3, #16]
 8002d04:	e004      	b.n	8002d10 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	6912      	ldr	r2, [r2, #16]
 8002d0e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	699a      	ldr	r2, [r3, #24]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	430a      	orrs	r2, r1
 8002d3a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	04c11db7 	.word	0x04c11db7

08002d50 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b087      	sub	sp, #28
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002d60:	231f      	movs	r3, #31
 8002d62:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002d64:	bf00      	nop
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1e5a      	subs	r2, r3, #1
 8002d6a:	613a      	str	r2, [r7, #16]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d009      	beq.n	8002d84 <HAL_CRCEx_Polynomial_Set+0x34>
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f003 031f 	and.w	r3, r3, #31
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d0f0      	beq.n	8002d66 <HAL_CRCEx_Polynomial_Set+0x16>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b18      	cmp	r3, #24
 8002d88:	d846      	bhi.n	8002e18 <HAL_CRCEx_Polynomial_Set+0xc8>
 8002d8a:	a201      	add	r2, pc, #4	; (adr r2, 8002d90 <HAL_CRCEx_Polynomial_Set+0x40>)
 8002d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d90:	08002e1f 	.word	0x08002e1f
 8002d94:	08002e19 	.word	0x08002e19
 8002d98:	08002e19 	.word	0x08002e19
 8002d9c:	08002e19 	.word	0x08002e19
 8002da0:	08002e19 	.word	0x08002e19
 8002da4:	08002e19 	.word	0x08002e19
 8002da8:	08002e19 	.word	0x08002e19
 8002dac:	08002e19 	.word	0x08002e19
 8002db0:	08002e0d 	.word	0x08002e0d
 8002db4:	08002e19 	.word	0x08002e19
 8002db8:	08002e19 	.word	0x08002e19
 8002dbc:	08002e19 	.word	0x08002e19
 8002dc0:	08002e19 	.word	0x08002e19
 8002dc4:	08002e19 	.word	0x08002e19
 8002dc8:	08002e19 	.word	0x08002e19
 8002dcc:	08002e19 	.word	0x08002e19
 8002dd0:	08002e01 	.word	0x08002e01
 8002dd4:	08002e19 	.word	0x08002e19
 8002dd8:	08002e19 	.word	0x08002e19
 8002ddc:	08002e19 	.word	0x08002e19
 8002de0:	08002e19 	.word	0x08002e19
 8002de4:	08002e19 	.word	0x08002e19
 8002de8:	08002e19 	.word	0x08002e19
 8002dec:	08002e19 	.word	0x08002e19
 8002df0:	08002df5 	.word	0x08002df5
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d913      	bls.n	8002e22 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002dfe:	e010      	b.n	8002e22 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	2b07      	cmp	r3, #7
 8002e04:	d90f      	bls.n	8002e26 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e0a:	e00c      	b.n	8002e26 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b0f      	cmp	r3, #15
 8002e10:	d90b      	bls.n	8002e2a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8002e16:	e008      	b.n	8002e2a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e1c:	e006      	b.n	8002e2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e004      	b.n	8002e2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8002e2a:	bf00      	nop
  }
  if (status == HAL_OK)
 8002e2c:	7dfb      	ldrb	r3, [r7, #23]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10d      	bne.n	8002e4e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f023 0118 	bic.w	r1, r3, #24
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8002e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	371c      	adds	r7, #28
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d101      	bne.n	8002e6e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e0c6      	b.n	8002ffc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f008 f8e0 	bl	800b03c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2223      	movs	r2, #35	; 0x23
 8002e80:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e82:	4b60      	ldr	r3, [pc, #384]	; (8003004 <HAL_ETH_Init+0x1a8>)
 8002e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e88:	4a5e      	ldr	r2, [pc, #376]	; (8003004 <HAL_ETH_Init+0x1a8>)
 8002e8a:	f043 0302 	orr.w	r3, r3, #2
 8002e8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e92:	4b5c      	ldr	r3, [pc, #368]	; (8003004 <HAL_ETH_Init+0x1a8>)
 8002e94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	60bb      	str	r3, [r7, #8]
 8002e9e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7a1b      	ldrb	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d103      	bne.n	8002eb0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002ea8:	2000      	movs	r0, #0
 8002eaa:	f7ff fd7d 	bl	80029a8 <HAL_SYSCFG_ETHInterfaceSelect>
 8002eae:	e003      	b.n	8002eb8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002eb0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002eb4:	f7ff fd78 	bl	80029a8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f042 0201 	orr.w	r2, r2, #1
 8002eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ece:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed0:	f7ff fd3a 	bl	8002948 <HAL_GetTick>
 8002ed4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ed6:	e00f      	b.n	8002ef8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002ed8:	f7ff fd36 	bl	8002948 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ee6:	d907      	bls.n	8002ef8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2204      	movs	r2, #4
 8002eec:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	22e0      	movs	r2, #224	; 0xe0
 8002ef2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e081      	b.n	8002ffc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1e6      	bne.n	8002ed8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f001 fad8 	bl	80044c0 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002f10:	f004 f9aa 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 8002f14:	4603      	mov	r3, r0
 8002f16:	4a3c      	ldr	r2, [pc, #240]	; (8003008 <HAL_ETH_Init+0x1ac>)
 8002f18:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1c:	0c9a      	lsrs	r2, r3, #18
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	3a01      	subs	r2, #1
 8002f24:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002f28:	6878      	ldr	r0, [r7, #4]
 8002f2a:	f001 fa2b 	bl	8004384 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002f44:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002f48:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d007      	beq.n	8002f66 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	22e0      	movs	r2, #224	; 0xe0
 8002f60:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e04a      	b.n	8002ffc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f241 1308 	movw	r3, #4360	; 0x1108
 8002f6e:	4413      	add	r3, r2
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_ETH_Init+0x1b0>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6952      	ldr	r2, [r2, #20]
 8002f7a:	0052      	lsls	r2, r2, #1
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	6809      	ldr	r1, [r1, #0]
 8002f80:	431a      	orrs	r2, r3
 8002f82:	f241 1308 	movw	r3, #4360	; 0x1108
 8002f86:	440b      	add	r3, r1
 8002f88:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f001 faf0 	bl	8004570 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f001 fb34 	bl	80045fe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	3305      	adds	r3, #5
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	021a      	lsls	r2, r3, #8
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4619      	mov	r1, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	3303      	adds	r3, #3
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	061a      	lsls	r2, r3, #24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	3302      	adds	r3, #2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002fd4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002fe2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002fe4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2210      	movs	r2, #16
 8002ff8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	58024400 	.word	0x58024400
 8003008:	431bde83 	.word	0x431bde83
 800300c:	ffff8001 	.word	0xffff8001

08003010 <HAL_ETH_DescAssignMemory>:
  * @param  pBuffer1: address of buffer 1
  * @param  pBuffer2: address of buffer 2 if available
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DescAssignMemory(ETH_HandleTypeDef *heth, uint32_t Index, uint8_t *pBuffer1, uint8_t *pBuffer2)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
 800301c:	603b      	str	r3, [r7, #0]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[Index];
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3310      	adds	r3, #16
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	617b      	str	r3, [r7, #20]

  if((pBuffer1 == NULL) || (Index >= (uint32_t)ETH_RX_DESC_CNT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d002      	beq.n	8003038 <HAL_ETH_DescAssignMemory+0x28>
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2b03      	cmp	r3, #3
 8003036:	d904      	bls.n	8003042 <HAL_ETH_DescAssignMemory+0x32>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	675a      	str	r2, [r3, #116]	; 0x74
    /* Return Error */
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e021      	b.n	8003086 <HAL_ETH_DescAssignMemory+0x76>
  }

  /* write buffer address to RDES0 */
  WRITE_REG(dmarxdesc->DESC0, (uint32_t)pBuffer1);
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	601a      	str	r2, [r3, #0]
  /* store buffer address */
  WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)pBuffer1);
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	611a      	str	r2, [r3, #16]
  /* set buffer address valid bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	60da      	str	r2, [r3, #12]

  if(pBuffer2 != NULL)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00b      	beq.n	8003078 <HAL_ETH_DescAssignMemory+0x68>
  {
    /* write buffer 2 address to RDES1 */
    WRITE_REG(dmarxdesc->DESC2, (uint32_t)pBuffer2);
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	609a      	str	r2, [r3, #8]
     /* store buffer 2 address */
    WRITE_REG(dmarxdesc->BackupAddr1, (uint32_t)pBuffer2);
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	615a      	str	r2, [r3, #20]
    /* set buffer 2 address valid bit to RDES3 */
    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	60da      	str	r2, [r3, #12]
  }
  /* set OWN bit to RDES3 */
  SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr

08003092 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003092:	b480      	push	{r7}
 8003094:	b085      	sub	sp, #20
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  uint32_t descindex;

  ETH_DMADescTypeDef *dmarxdesc;

  if(heth->gState == HAL_ETH_STATE_READY)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800309e:	2b10      	cmp	r3, #16
 80030a0:	d174      	bne.n	800318c <HAL_ETH_Start_IT+0xfa>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2223      	movs	r2, #35	; 0x23
 80030a6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Set IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	e00f      	b.n	80030ce <HAL_ETH_Start_IT+0x3c>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3310      	adds	r3, #16
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	60bb      	str	r3, [r7, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	68db      	ldr	r3, [r3, #12]
 80030c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	3301      	adds	r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d9ec      	bls.n	80030ae <HAL_ETH_Start_IT+0x1c>
    }

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0202 	orr.w	r2, r2, #2
 80030e8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f042 0201 	orr.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f042 0201 	orr.w	r2, r2, #1
 800310a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	f241 1304 	movw	r3, #4356	; 0x1104
 8003116:	4413      	add	r3, r2
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6811      	ldr	r1, [r2, #0]
 800311e:	f043 0201 	orr.w	r2, r3, #1
 8003122:	f241 1304 	movw	r3, #4356	; 0x1104
 8003126:	440b      	add	r3, r1
 8003128:	601a      	str	r2, [r3, #0]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003132:	4413      	add	r3, r2
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6811      	ldr	r1, [r2, #0]
 800313a:	f043 0201 	orr.w	r2, r3, #1
 800313e:	f241 1308 	movw	r3, #4360	; 0x1108
 8003142:	440b      	add	r3, r1
 8003144:	601a      	str	r2, [r3, #0]

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f442 7281 	orr.w	r2, r2, #258	; 0x102
 8003158:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800315c:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681a      	ldr	r2, [r3, #0]
 8003162:	f241 1334 	movw	r3, #4404	; 0x1134
 8003166:	4413      	add	r3, r2
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6811      	ldr	r1, [r2, #0]
 800316e:	f24d 0241 	movw	r2, #53313	; 0xd041
 8003172:	431a      	orrs	r2, r3
 8003174:	f241 1334 	movw	r3, #4404	; 0x1134
 8003178:	440b      	add	r3, r1
 800317a:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    heth->gState = HAL_ETH_STATE_READY;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2210      	movs	r2, #16
 8003180:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2222      	movs	r2, #34	; 0x22
 8003186:	671a      	str	r2, [r3, #112]	; 0x70

    return HAL_OK;
 8003188:	2300      	movs	r3, #0
 800318a:	e000      	b.n	800318e <HAL_ETH_Start_IT+0xfc>
  }
  else
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
  }
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
	...

0800319c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;

  if(heth->gState != HAL_ETH_STATE_RESET)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d067      	beq.n	800327c <HAL_ETH_Stop_IT+0xe0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2223      	movs	r2, #35	; 0x23
 80031b0:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Disable interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE  |
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	f241 1334 	movw	r3, #4404	; 0x1134
 80031ba:	4413      	add	r3, r2
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6811      	ldr	r1, [r2, #0]
 80031c2:	4a32      	ldr	r2, [pc, #200]	; (800328c <HAL_ETH_Stop_IT+0xf0>)
 80031c4:	401a      	ands	r2, r3
 80031c6:	f241 1334 	movw	r3, #4404	; 0x1134
 80031ca:	440b      	add	r3, r1
 80031cc:	601a      	str	r2, [r3, #0]
                                   ETH_DMACIER_FBEE | ETH_DMACIER_AIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	f241 1304 	movw	r3, #4356	; 0x1104
 80031d6:	4413      	add	r3, r2
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6811      	ldr	r1, [r2, #0]
 80031de:	f023 0201 	bic.w	r2, r3, #1
 80031e2:	f241 1304 	movw	r3, #4356	; 0x1104
 80031e6:	440b      	add	r3, r1
 80031e8:	601a      	str	r2, [r3, #0]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	f241 1308 	movw	r3, #4360	; 0x1108
 80031f2:	4413      	add	r3, r2
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6811      	ldr	r1, [r2, #0]
 80031fa:	f023 0201 	bic.w	r2, r3, #1
 80031fe:	f241 1308 	movw	r3, #4360	; 0x1108
 8003202:	440b      	add	r3, r1
 8003204:	601a      	str	r2, [r3, #0]

    /* Disable the MAC reception */
    CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f022 0202 	bic.w	r2, r2, #2
 8003238:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]
 800323e:	e00f      	b.n	8003260 <HAL_ETH_Stop_IT+0xc4>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	3310      	adds	r3, #16
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	60bb      	str	r3, [r7, #8]
      CLEAR_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	60da      	str	r2, [r3, #12]
    for(descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	3301      	adds	r3, #1
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d9ec      	bls.n	8003240 <HAL_ETH_Stop_IT+0xa4>
    }

    heth->RxDescList.ItMode = 0U;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	665a      	str	r2, [r3, #100]	; 0x64

    heth->gState = HAL_ETH_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2210      	movs	r2, #16
 8003270:	66da      	str	r2, [r3, #108]	; 0x6c
    heth->RxState = HAL_ETH_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2210      	movs	r2, #16
 8003276:	671a      	str	r2, [r3, #112]	; 0x70

    /* Return function status */
    return HAL_OK;
 8003278:	2300      	movs	r3, #0
 800327a:	e000      	b.n	800327e <HAL_ETH_Stop_IT+0xe2>
  }
  else
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
  }
}
 800327e:	4618      	mov	r0, r3
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	ffff2fbe 	.word	0xffff2fbe

08003290 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  const ETH_DMADescTypeDef *dmatxdesc;

  if(pTxConfig == NULL)
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d107      	bne.n	80032b2 <HAL_ETH_Transmit+0x22>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a6:	f043 0201 	orr.w	r2, r3, #1
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e073      	b.n	800339a <HAL_ETH_Transmit+0x10a>
  }

  if(heth->gState == HAL_ETH_STATE_READY)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b6:	2b10      	cmp	r3, #16
 80032b8:	d16e      	bne.n	8003398 <HAL_ETH_Transmit+0x108>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 80032ba:	2200      	movs	r2, #0
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f001 f9fa 	bl	80046b8 <ETH_Prepare_Tx_Descriptors>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <HAL_ETH_Transmit+0x4a>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ce:	f043 0202 	orr.w	r2, r3, #2
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	675a      	str	r2, [r3, #116]	; 0x74
      return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e05f      	b.n	800339a <HAL_ETH_Transmit+0x10a>
    }

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	3206      	adds	r2, #6
 80032e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e6:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	629a      	str	r2, [r3, #40]	; 0x28
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d904      	bls.n	8003304 <HAL_ETH_Transmit+0x74>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	1f1a      	subs	r2, r3, #4
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	3106      	adds	r1, #6
 8003310:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8003314:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8003318:	601a      	str	r2, [r3, #0]

    tickstart = HAL_GetTick();
 800331a:	f7ff fb15 	bl	8002948 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8003320:	e034      	b.n	800338c <HAL_ETH_Transmit+0xfc>
    {
      if((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d011      	beq.n	8003358 <HAL_ETH_Transmit+0xc8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003338:	f043 0208 	orr.w	r2, r3, #8
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	675a      	str	r2, [r3, #116]	; 0x74
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	679a      	str	r2, [r3, #120]	; 0x78
        /* Set ETH HAL State to Ready */
        heth->gState = HAL_ETH_STATE_ERROR;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	22e0      	movs	r2, #224	; 0xe0
 8003352:	66da      	str	r2, [r3, #108]	; 0x6c
        /* Return function status */
        return HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	e020      	b.n	800339a <HAL_ETH_Transmit+0x10a>
      }

      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335e:	d015      	beq.n	800338c <HAL_ETH_Transmit+0xfc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout) || (Timeout == 0U))
 8003360:	f7ff faf2 	bl	8002948 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	429a      	cmp	r2, r3
 800336e:	d302      	bcc.n	8003376 <HAL_ETH_Transmit+0xe6>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10a      	bne.n	800338c <HAL_ETH_Transmit+0xfc>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800337a:	f043 0204 	orr.w	r2, r3, #4
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	675a      	str	r2, [r3, #116]	; 0x74
          heth->gState = HAL_ETH_STATE_ERROR;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	22e0      	movs	r2, #224	; 0xe0
 8003386:	66da      	str	r2, [r3, #108]	; 0x6c
          return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e006      	b.n	800339a <HAL_ETH_Transmit+0x10a>
    while((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b00      	cmp	r3, #0
 8003392:	dbc6      	blt.n	8003322 <HAL_ETH_Transmit+0x92>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8003394:	2300      	movs	r3, #0
 8003396:	e000      	b.n	800339a <HAL_ETH_Transmit+0x10a>
  }
  else
  {
    return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
  }
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_ETH_IsRxDataAvailable>:
  *         the configuration information for ETHERNET module
  * @retval  1: A Packet is received
  *          0: no Packet received
  */
uint8_t HAL_ETH_IsRxDataAvailable(ETH_HandleTypeDef *heth)
{
 80033a2:	b480      	push	{r7}
 80033a4:	b089      	sub	sp, #36	; 0x24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3344      	adds	r3, #68	; 0x44
 80033ae:	60bb      	str	r3, [r7, #8]
  uint32_t descidx = dmarxdesclist->CurRxDesc;
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	61fb      	str	r3, [r7, #28]
  ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	69fa      	ldr	r2, [r7, #28]
 80033ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033be:	61bb      	str	r3, [r7, #24]
  uint32_t descscancnt = 0;
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
  uint32_t appdesccnt = 0, firstappdescidx = 0;
 80033c4:	2300      	movs	r3, #0
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	2300      	movs	r3, #0
 80033ca:	60fb      	str	r3, [r7, #12]

  if(dmarxdesclist->AppDescNbr != 0U)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d06b      	beq.n	80034ac <HAL_ETH_IsRxDataAvailable+0x10a>
  {
    /* data already received by not yet processed*/
    return 0;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e0ce      	b.n	8003576 <HAL_ETH_IsRxDataAvailable+0x1d4>
  }

  /* Check if descriptor is not owned by DMA */
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
  {
    descscancnt++;
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	3301      	adds	r3, #1
 80033dc:	617b      	str	r3, [r7, #20]

    /* Check if last descriptor */
    if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d036      	beq.n	8003458 <HAL_ETH_IsRxDataAvailable+0xb6>
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	3301      	adds	r3, #1
 80033ee:	613b      	str	r3, [r7, #16]

      if(appdesccnt == 1U)
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_ETH_IsRxDataAvailable+0x58>
      {
        WRITE_REG(firstappdescidx, descidx);
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	60fb      	str	r3, [r7, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	3301      	adds	r3, #1
 80033fe:	61fb      	str	r3, [r7, #28]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d902      	bls.n	800340c <HAL_ETH_IsRxDataAvailable+0x6a>
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	3b04      	subs	r3, #4
 800340a:	61fb      	str	r3, [r7, #28]

      /* Check for Context descriptor */
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	69fa      	ldr	r2, [r7, #28]
 8003410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003414:	61bb      	str	r3, [r7, #24]

      if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_OWN)  == (uint32_t)RESET)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	db11      	blt.n	8003442 <HAL_ETH_IsRxDataAvailable+0xa0>
      {
        if(READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_ETH_IsRxDataAvailable+0xa0>
        {
          /* Increment the number of descriptors to be passed to the application */
          dmarxdesclist->AppContextDesc = 1;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	2201      	movs	r2, #1
 800342e:	61da      	str	r2, [r3, #28]
          /* Increment current rx descriptor index */
          INCR_RX_DESC_INDEX(descidx, 1U);
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	3301      	adds	r3, #1
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	2b03      	cmp	r3, #3
 800343a:	d902      	bls.n	8003442 <HAL_ETH_IsRxDataAvailable+0xa0>
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	3b04      	subs	r3, #4
 8003440:	61fb      	str	r3, [r7, #28]
        }
      }
      /* Fill information to Rx descriptors list */
      dmarxdesclist->CurRxDesc = descidx;
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	611a      	str	r2, [r3, #16]
      dmarxdesclist->FirstAppDesc = firstappdescidx;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	615a      	str	r2, [r3, #20]
      dmarxdesclist->AppDescNbr = appdesccnt;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	619a      	str	r2, [r3, #24]

      /* Return function status */
      return 1;
 8003454:	2301      	movs	r3, #1
 8003456:	e08e      	b.n	8003576 <HAL_ETH_IsRxDataAvailable+0x1d4>
    }
    /* Check if first descriptor */
    else if(READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <HAL_ETH_IsRxDataAvailable+0xe8>
    {
      WRITE_REG(firstappdescidx, descidx);
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	60fb      	str	r3, [r7, #12]
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt = 1U;
 8003468:	2301      	movs	r3, #1
 800346a:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	3301      	adds	r3, #1
 8003470:	61fb      	str	r3, [r7, #28]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	2b03      	cmp	r3, #3
 8003476:	d902      	bls.n	800347e <HAL_ETH_IsRxDataAvailable+0xdc>
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3b04      	subs	r3, #4
 800347c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	69fa      	ldr	r2, [r7, #28]
 8003482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003486:	61bb      	str	r3, [r7, #24]
 8003488:	e010      	b.n	80034ac <HAL_ETH_IsRxDataAvailable+0x10a>
    }
    /* It should be an intermediate descriptor */
    else
    {
      /* Increment the number of descriptors to be passed to the application */
      appdesccnt += 1U;
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	3301      	adds	r3, #1
 800348e:	613b      	str	r3, [r7, #16]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	3301      	adds	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	2b03      	cmp	r3, #3
 800349a:	d902      	bls.n	80034a2 <HAL_ETH_IsRxDataAvailable+0x100>
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	3b04      	subs	r3, #4
 80034a0:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034aa:	61bb      	str	r3, [r7, #24]
  while((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (descscancnt < (uint32_t)ETH_RX_DESC_CNT))
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	db02      	blt.n	80034ba <HAL_ETH_IsRxDataAvailable+0x118>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2b03      	cmp	r3, #3
 80034b8:	d98e      	bls.n	80033d8 <HAL_ETH_IsRxDataAvailable+0x36>
    }
  }

  /* Build Descriptors if an incomplete Packet is received */
  if(appdesccnt > 0U)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d056      	beq.n	800356e <HAL_ETH_IsRxDataAvailable+0x1cc>
  {
    dmarxdesclist->CurRxDesc = descidx;
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	611a      	str	r2, [r3, #16]
    dmarxdesclist->FirstAppDesc = firstappdescidx;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	68fa      	ldr	r2, [r7, #12]
 80034ca:	615a      	str	r2, [r3, #20]
    descidx = firstappdescidx;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	61fb      	str	r3, [r7, #28]
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	69fa      	ldr	r2, [r7, #28]
 80034d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d8:	61bb      	str	r3, [r7, #24]

    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e03b      	b.n	8003558 <HAL_ETH_IsRxDataAvailable+0x1b6>
    {
      WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	601a      	str	r2, [r3, #0]
      WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80034ee:	60da      	str	r2, [r3, #12]

      if (READ_REG(dmarxdesc->BackupAddr1) != ((uint32_t)RESET))
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d009      	beq.n	800350c <HAL_ETH_IsRxDataAvailable+0x16a>
      {
        WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 80034f8:	69bb      	ldr	r3, [r7, #24]
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	609a      	str	r2, [r3, #8]
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	60da      	str	r2, [r3, #12]
      }

      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	60da      	str	r2, [r3, #12]

      if(dmarxdesclist->ItMode != ((uint32_t)RESET))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_ETH_IsRxDataAvailable+0x18a>
      {
        SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	60da      	str	r2, [r3, #12]
      }
      if(descscancnt < (appdesccnt - 1U))
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	3b01      	subs	r3, #1
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	429a      	cmp	r2, r3
 8003534:	d20d      	bcs.n	8003552 <HAL_ETH_IsRxDataAvailable+0x1b0>
      {
        /* Increment rx descriptor index */
        INCR_RX_DESC_INDEX(descidx, 1U);
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3301      	adds	r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d902      	bls.n	8003548 <HAL_ETH_IsRxDataAvailable+0x1a6>
 8003542:	69fb      	ldr	r3, [r7, #28]
 8003544:	3b04      	subs	r3, #4
 8003546:	61fb      	str	r3, [r7, #28]
        /* Get descriptor address */
        dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	69fa      	ldr	r2, [r7, #28]
 800354c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003550:	61bb      	str	r3, [r7, #24]
    for(descscancnt = 0; descscancnt < appdesccnt; descscancnt++)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	3301      	adds	r3, #1
 8003556:	617b      	str	r3, [r7, #20]
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	429a      	cmp	r2, r3
 800355e:	d3bf      	bcc.n	80034e0 <HAL_ETH_IsRxDataAvailable+0x13e>
      }
    }

    /* Set the Tail pointer address to the last rx descriptor hold by the app */
    WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6819      	ldr	r1, [r3, #0]
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	f241 1328 	movw	r3, #4392	; 0x1128
 800356a:	440b      	add	r3, r1
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Fill information to Rx descriptors list: No received Packet */
  dmarxdesclist->AppDescNbr = 0U;
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]

  return 0;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3724      	adds	r7, #36	; 0x24
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <HAL_ETH_GetRxDataBuffer>:
  *         the configuration information for ETHERNET module
  * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataBuffer(ETH_HandleTypeDef *heth, ETH_BufferTypeDef *RxBuffer)
{
 8003582:	b580      	push	{r7, lr}
 8003584:	b08a      	sub	sp, #40	; 0x28
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3344      	adds	r3, #68	; 0x44
 8003590:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t index, accumulatedlen = 0, lastdesclen;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
  __IO const ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035a4:	61bb      	str	r3, [r7, #24]
  ETH_BufferTypeDef *rxbuff = RxBuffer;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	617b      	str	r3, [r7, #20]

  if(rxbuff == NULL)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <HAL_ETH_GetRxDataBuffer+0x38>
  {
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	675a      	str	r2, [r3, #116]	; 0x74
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e07d      	b.n	80036b6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  if(dmarxdesclist->AppDescNbr == 0U)
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10f      	bne.n	80035e2 <HAL_ETH_GetRxDataBuffer+0x60>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f7ff feed 	bl	80033a2 <HAL_ETH_IsRxDataAvailable>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d101      	bne.n	80035d2 <HAL_ETH_GetRxDataBuffer+0x50>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e071      	b.n	80036b6 <HAL_ETH_GetRxDataBuffer+0x134>
    }
    else
    {
      descidx = dmarxdesclist->FirstAppDesc;
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /* Get intermediate descriptors buffers: in case of the Packet is split into multi descriptors */
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 80035e2:	2300      	movs	r3, #0
 80035e4:	623b      	str	r3, [r7, #32]
 80035e6:	e031      	b.n	800364c <HAL_ETH_GetRxDataBuffer+0xca>
  {
    /* Get Address and length of the first buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	691b      	ldr	r3, [r3, #16]
 80035ec:	461a      	mov	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  heth->Init.RxBuffLen;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	605a      	str	r2, [r3, #4]

    /* Check if the second buffer address of this descriptor is valid */
    if(dmarxdesc->BackupAddr1 != 0U)
 80035fa:	69bb      	ldr	r3, [r7, #24]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HAL_ETH_GetRxDataBuffer+0x98>
    {
      /* Point to next buffer */
      rxbuff = rxbuff->next;
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	617b      	str	r3, [r7, #20]
      /* Get Address and length of the second buffer address */
      rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	461a      	mov	r2, r3
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	601a      	str	r2, [r3, #0]
      rxbuff->len =  heth->Init.RxBuffLen;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695a      	ldr	r2, [r3, #20]
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	605a      	str	r2, [r3, #4]
    {
      /* Nothing to do here */
    }

    /* get total length until this descriptor */
    accumulatedlen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8003622:	61fb      	str	r3, [r7, #28]

    /* Increment to next descriptor */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	3301      	adds	r3, #1
 8003628:	627b      	str	r3, [r7, #36]	; 0x24
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	2b03      	cmp	r3, #3
 800362e:	d902      	bls.n	8003636 <HAL_ETH_GetRxDataBuffer+0xb4>
 8003630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003632:	3b04      	subs	r3, #4
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
    dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800363a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800363e:	61bb      	str	r3, [r7, #24]

    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	617b      	str	r3, [r7, #20]
  for(index = 0; index < (dmarxdesclist->AppDescNbr - 1U); index++)
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	3301      	adds	r3, #1
 800364a:	623b      	str	r3, [r7, #32]
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	3b01      	subs	r3, #1
 8003652:	6a3a      	ldr	r2, [r7, #32]
 8003654:	429a      	cmp	r2, r3
 8003656:	d3c7      	bcc.n	80035e8 <HAL_ETH_GetRxDataBuffer+0x66>
  }

  /* last descriptor data length */
  lastdesclen = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - accumulatedlen;
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	60fb      	str	r3, [r7, #12]

  /* Get Address of the first buffer address */
  rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr0;
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	461a      	mov	r2, r3
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	601a      	str	r2, [r3, #0]

  /* data is in only one buffer */
  if(lastdesclen <= heth->Init.RxBuffLen)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	429a      	cmp	r2, r3
 8003678:	d803      	bhi.n	8003682 <HAL_ETH_GetRxDataBuffer+0x100>
  {
    rxbuff->len = lastdesclen;
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	605a      	str	r2, [r3, #4]
 8003680:	e018      	b.n	80036b4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  /* data is in two buffers */
  else if(dmarxdesc->BackupAddr1 != 0U)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d012      	beq.n	80036b0 <HAL_ETH_GetRxDataBuffer+0x12e>
  {
    /* Get the Length of the first buffer address */
    rxbuff->len = heth->Init.RxBuffLen;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	605a      	str	r2, [r3, #4]
    /* Point to next buffer */
    rxbuff = rxbuff->next;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	617b      	str	r3, [r7, #20]
    /* Get the Address the Length of the second buffer address */
    rxbuff->buffer = (uint8_t *) dmarxdesc->BackupAddr1;
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	461a      	mov	r2, r3
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	601a      	str	r2, [r3, #0]
    rxbuff->len =  lastdesclen - (heth->Init.RxBuffLen);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	1ad2      	subs	r2, r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	605a      	str	r2, [r3, #4]
 80036ae:	e001      	b.n	80036b4 <HAL_ETH_GetRxDataBuffer+0x132>
  }
  else /* Buffer 2 not valid*/
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_ETH_GetRxDataBuffer+0x134>
  }

  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3728      	adds	r7, #40	; 0x28
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_ETH_GetRxDataLength>:
  *         the configuration information for ETHERNET module
  * @param  Length: parameter to hold Rx packet length
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetRxDataLength(ETH_HandleTypeDef *heth, uint32_t *Length)
{
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	6078      	str	r0, [r7, #4]
 80036c6:	6039      	str	r1, [r7, #0]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3344      	adds	r3, #68	; 0x44
 80036cc:	613b      	str	r3, [r7, #16]
  uint32_t descidx = dmarxdesclist->FirstAppDesc;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	617b      	str	r3, [r7, #20]
  __IO const ETH_DMADescTypeDef *dmarxdesc;

  if(dmarxdesclist->AppDescNbr == 0U)
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d107      	bne.n	80036ec <HAL_ETH_GetRxDataLength+0x2e>
  {
    if(HAL_ETH_IsRxDataAvailable(heth) == 0U)
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f7ff fe60 	bl	80033a2 <HAL_ETH_IsRxDataAvailable>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_ETH_GetRxDataLength+0x2e>
    {
      /* No data to be transferred to the application */
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e017      	b.n	800371c <HAL_ETH_GetRxDataLength+0x5e>
    }
  }

  /* Get index of last descriptor */
  INCR_RX_DESC_INDEX(descidx, (dmarxdesclist->AppDescNbr - 1U));
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	699a      	ldr	r2, [r3, #24]
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	4413      	add	r3, r2
 80036f4:	3b01      	subs	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	697b      	ldr	r3, [r7, #20]
 80036fa:	2b03      	cmp	r3, #3
 80036fc:	d902      	bls.n	8003704 <HAL_ETH_GetRxDataLength+0x46>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	3b04      	subs	r3, #4
 8003702:	617b      	str	r3, [r7, #20]
  /* Point to last descriptor */
  dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descidx];
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	697a      	ldr	r2, [r7, #20]
 8003708:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800370c:	60fb      	str	r3, [r7, #12]

  *Length = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800371a:	2300      	movs	r3, #0
}
 800371c:	4618      	mov	r0, r3
 800371e:	3718      	adds	r7, #24
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_ETH_BuildRxDescriptors>:
* @param  heth: pointer to a ETH_HandleTypeDef structure that contains
*         the configuration information for ETHERNET module
* @retval HAL status.
*/
HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors(ETH_HandleTypeDef *heth)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  ETH_RxDescListTypeDef *dmarxdesclist = &heth->RxDescList;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3344      	adds	r3, #68	; 0x44
 8003730:	60fb      	str	r3, [r7, #12]
  uint32_t descindex = dmarxdesclist->FirstAppDesc;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003740:	61bb      	str	r3, [r7, #24]
  uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	617b      	str	r3, [r7, #20]
  uint32_t descscan;

  if(dmarxdesclist->AppDescNbr == 0U)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ETH_BuildRxDescriptors+0x30>
  {
    /* No Rx descriptors to build */
    return HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	e057      	b.n	8003804 <HAL_ETH_BuildRxDescriptors+0xe0>
  }

  if(dmarxdesclist->AppContextDesc != 0U)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d002      	beq.n	8003762 <HAL_ETH_BuildRxDescriptors+0x3e>
  {
    /* A context descriptor is available */
    totalappdescnbr += 1U;
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	3301      	adds	r3, #1
 8003760:	617b      	str	r3, [r7, #20]
  }

  for(descscan =0; descscan < totalappdescnbr; descscan++)
 8003762:	2300      	movs	r3, #0
 8003764:	613b      	str	r3, [r7, #16]
 8003766:	e03b      	b.n	80037e0 <HAL_ETH_BuildRxDescriptors+0xbc>
  {
    WRITE_REG(dmarxdesc->DESC0, dmarxdesc->BackupAddr0);
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	691a      	ldr	r2, [r3, #16]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V);
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003776:	60da      	str	r2, [r3, #12]

    if (READ_REG(dmarxdesc->BackupAddr1) != 0U)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	695b      	ldr	r3, [r3, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d009      	beq.n	8003794 <HAL_ETH_BuildRxDescriptors+0x70>
    {
      WRITE_REG(dmarxdesc->DESC2, dmarxdesc->BackupAddr1);
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	695a      	ldr	r2, [r3, #20]
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	609a      	str	r2, [r3, #8]
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V);
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	60da      	str	r2, [r3, #12]
    }

    SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN);
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	60da      	str	r2, [r3, #12]

    if(dmarxdesclist->ItMode != 0U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d005      	beq.n	80037b4 <HAL_ETH_BuildRxDescriptors+0x90>
    {
      SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC);
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	60da      	str	r2, [r3, #12]
    }

    if(descscan < (totalappdescnbr - 1U))
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d20d      	bcs.n	80037da <HAL_ETH_BuildRxDescriptors+0xb6>
    {
      /* Increment rx descriptor index */
      INCR_RX_DESC_INDEX(descindex, 1U);
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	3301      	adds	r3, #1
 80037c2:	61fb      	str	r3, [r7, #28]
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d902      	bls.n	80037d0 <HAL_ETH_BuildRxDescriptors+0xac>
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3b04      	subs	r3, #4
 80037ce:	61fb      	str	r3, [r7, #28]
      /* Get descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[descindex];
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	69fa      	ldr	r2, [r7, #28]
 80037d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037d8:	61bb      	str	r3, [r7, #24]
  for(descscan =0; descscan < totalappdescnbr; descscan++)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	3301      	adds	r3, #1
 80037de:	613b      	str	r3, [r7, #16]
 80037e0:	693a      	ldr	r2, [r7, #16]
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d3bf      	bcc.n	8003768 <HAL_ETH_BuildRxDescriptors+0x44>
    }
  }

  /* Set the Tail pointer address to the last rx descriptor hold by the app */
  WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6819      	ldr	r1, [r3, #0]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	f241 1328 	movw	r3, #4392	; 0x1128
 80037f2:	440b      	add	r3, r1
 80037f4:	601a      	str	r2, [r3, #0]

  /* reset the Application desc number */
  WRITE_REG(dmarxdesclist->AppDescNbr, 0);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]

  /*  reset the application context descriptor */
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3724      	adds	r7, #36	; 0x24
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_RI))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d113      	bne.n	8003852 <HAL_ETH_IRQHandler+0x42>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_RIE))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	f241 1334 	movw	r3, #4404	; 0x1134
 8003832:	4413      	add	r3, r2
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383a:	2b40      	cmp	r3, #64	; 0x40
 800383c:	d109      	bne.n	8003852 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f007 fcd2 	bl	800b1e8 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_RI | ETH_DMACSR_NIS);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800384c:	f248 0240 	movw	r2, #32832	; 0x8040
 8003850:	601a      	str	r2, [r3, #0]
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_TI))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	d113      	bne.n	800388c <HAL_ETH_IRQHandler+0x7c>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_TIE))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	f241 1334 	movw	r3, #4404	; 0x1134
 800386c:	4413      	add	r3, r2
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b01      	cmp	r3, #1
 8003876:	d109      	bne.n	800388c <HAL_ETH_IRQHandler+0x7c>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
        /*Call registered Transmit complete callback*/
        heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 f8b7 	bl	80039ec <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMACSR_TI | ETH_DMACSR_NIS);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003886:	f248 0201 	movw	r2, #32769	; 0x8001
 800388a:	601a      	str	r2, [r3, #0]
    }
  }


  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_AIS))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800389a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800389e:	d149      	bne.n	8003934 <HAL_ETH_IRQHandler+0x124>
  {
    if(__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMACIER_AIE))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	f241 1334 	movw	r3, #4404	; 0x1134
 80038a8:	4413      	add	r3, r2
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b4:	d13e      	bne.n	8003934 <HAL_ETH_IRQHandler+0x124>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ba:	f043 0208 	orr.w	r2, r3, #8
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	675a      	str	r2, [r3, #116]	; 0x74

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMACSR_FBE))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d4:	d11b      	bne.n	800390e <HAL_ETH_IRQHandler+0xfe>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	f241 1302 	movw	r3, #4354	; 0x1102
 80038e4:	4013      	ands	r3, r2
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6793      	str	r3, [r2, #120]	; 0x78

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	f241 1334 	movw	r3, #4404	; 0x1134
 80038f2:	4413      	add	r3, r2
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6811      	ldr	r1, [r2, #0]
 80038fa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80038fe:	f241 1334 	movw	r3, #4404	; 0x1134
 8003902:	440b      	add	r3, r1
 8003904:	601a      	str	r2, [r3, #0]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	22e0      	movs	r2, #224	; 0xe0
 800390a:	66da      	str	r2, [r3, #108]	; 0x6c
 800390c:	e00f      	b.n	800392e <HAL_ETH_IRQHandler+0x11e>
      }
      else
      {
        /* Get DMA error status  */
       heth->DMAErrorCode = READ_BIT(heth->Instance->DMACSR, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 42cd 	and.w	r2, r3, #26240	; 0x6680
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	679a      	str	r2, [r3, #120]	; 0x78
                                                       ETH_DMACSR_RBU | ETH_DMACSR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f503 538b 	add.w	r3, r3, #4448	; 0x1160
 8003928:	f44f 42cd 	mov.w	r2, #26240	; 0x6680
 800392c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered DMA Error callback*/
      heth->DMAErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_DMAErrorCallback(heth);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f866 	bl	8003a00 <HAL_ETH_DMAErrorCallback>

    }
  }

  /* ETH MAC Error IT */
  if(__HAL_ETH_MAC_GET_IT(heth, (ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE)))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800393c:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8003940:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003944:	d10e      	bne.n	8003964 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Rx Tx status and clear Status register pending bit */
    heth->MACErrorCode = READ_REG(heth->Instance->MACRXTXSR);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	67da      	str	r2, [r3, #124]	; 0x7c

    heth->gState = HAL_ETH_STATE_ERROR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	22e0      	movs	r2, #224	; 0xe0
 8003956:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered MAC Error callback*/
    heth->MACErrorCallback(heth);
#else
    /* Ethernet MAC Error callback */
    HAL_ETH_MACErrorCallback(heth);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f85b 	bl	8003a14 <HAL_ETH_MACErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACErrorCode = (uint32_t)(0x0U);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	67da      	str	r2, [r3, #124]	; 0x7c
  }

  /* ETH PMT IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800396c:	f003 0310 	and.w	r3, r3, #16
 8003970:	2b10      	cmp	r3, #16
 8003972:	d10f      	bne.n	8003994 <HAL_ETH_IRQHandler+0x184>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPCSR, (ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800397c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f84e 	bl	8003a28 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }

  /* ETH EEE IT */
  if(__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_LPI_IT))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800399c:	f003 0320 	and.w	r3, r3, #32
 80039a0:	2b20      	cmp	r3, #32
 80039a2:	d10f      	bne.n	80039c4 <HAL_ETH_IRQHandler+0x1b4>
  {
    /* Get MAC LPI interrupt source and clear the status register pending bit */
    heth->MACLPIEvent = READ_BIT(heth->Instance->MACPCSR, 0x0000000FU);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered EEE callback*/
    heth->EEECallback(heth);
#else
    /* Ethernet EEE callback */
    HAL_ETH_EEECallback(heth);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f840 	bl	8003a3c <HAL_ETH_EEECallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACLPIEvent = (uint32_t)(0x0U);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif
    }
  }
#else
  /* check ETH WAKEUP exti flag */
  if(__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <HAL_ETH_IRQHandler+0x1d8>)
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <HAL_ETH_IRQHandler+0x1ce>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80039d0:	4b05      	ldr	r3, [pc, #20]	; (80039e8 <HAL_ETH_IRQHandler+0x1d8>)
 80039d2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered WakeUp callback*/
      heth->WakeUpCallback(heth);
#else
      /* ETH WAKEUP callback */
      HAL_ETH_WakeUpCallback(heth);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f839 	bl	8003a50 <HAL_ETH_WakeUpCallback>
#endif
  }
#endif
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	58000080 	.word	0x58000080

080039ec <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_ETH_DMAErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_DMAErrorCallback(ETH_HandleTypeDef *heth)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_DMAErrorCallback could be implemented in the user file
  */
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_ETH_MACErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_MACErrorCallback(ETH_HandleTypeDef *heth)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_MACErrorCallback could be implemented in the user file
  */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_ETH_EEECallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_EEECallback(ETH_HandleTypeDef *heth)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_EEECallback could be implemented in the user file
  */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_ETH_ReadPHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t *pRegValue)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
 8003a70:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e03e      	b.n	8003b04 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003a8e:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	055b      	lsls	r3, r3, #21
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f043 030c 	orr.w	r3, r3, #12
 8003ab2:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f043 0301 	orr.w	r3, r3, #1
 8003aba:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003ac6:	f7fe ff3f 	bl	8002948 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003acc:	e009      	b.n	8003ae2 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003ace:	f7fe ff3b 	bl	8002948 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003adc:	d901      	bls.n	8003ae2 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e010      	b.n	8003b04 <HAL_ETH_ReadPHYRegister+0xa0>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1ed      	bne.n	8003ace <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	461a      	mov	r2, r3
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3718      	adds	r7, #24
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_ETH_WritePHYRegister>:
  * @param  PHYReg: PHY register address, must be a value from 0 to 31
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg, uint32_t RegValue)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b086      	sub	sp, #24
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	60f8      	str	r0, [r7, #12]
 8003b14:	60b9      	str	r1, [r7, #8]
 8003b16:	607a      	str	r2, [r7, #4]
 8003b18:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg, tickstart;

  /* Check for the Busy flag */
  if(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e03c      	b.n	8003ba8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b36:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr <<21));
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	055b      	lsls	r3, r3, #21
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	041b      	lsls	r3, r3, #16
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f023 030c 	bic.w	r3, r3, #12
 8003b5a:	f043 0304 	orr.w	r3, r3, #4
 8003b5e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	4b10      	ldr	r3, [pc, #64]	; (8003bb0 <HAL_ETH_WritePHYRegister+0xa4>)
 8003b6e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8003b72:	4a0f      	ldr	r2, [pc, #60]	; (8003bb0 <HAL_ETH_WritePHYRegister+0xa4>)
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8003b7a:	f7fe fee5 	bl	8002948 <HAL_GetTick>
 8003b7e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003b80:	e009      	b.n	8003b96 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT))
 8003b82:	f7fe fee1 	bl	8002948 <HAL_GetTick>
 8003b86:	4602      	mov	r2, r0
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b90:	d901      	bls.n	8003b96 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e008      	b.n	8003ba8 <HAL_ETH_WritePHYRegister+0x9c>
  while(READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1ed      	bne.n	8003b82 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3718      	adds	r7, #24
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	40028000 	.word	0x40028000

08003bb4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d101      	bne.n	8003bc8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e1c3      	b.n	8003f50 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 020c 	and.w	r2, r3, #12
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC)>> 4) > 0U) ? ENABLE : DISABLE;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0310 	and.w	r3, r3, #16
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf14      	ite	ne
 8003be4:	2301      	movne	r3, #1
 8003be6:	2300      	moveq	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	461a      	mov	r2, r3
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	461a      	mov	r2, r3
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U) ? ENABLE : DISABLE;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bf14      	ite	ne
 8003c2a:	2301      	movne	r3, #1
 8003c2c:	2300      	moveq	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	bf14      	ite	ne
 8003cae:	2301      	movne	r3, #1
 8003cb0:	2300      	moveq	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >>17) == 0U) ? ENABLE : DISABLE;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	461a      	mov	r2, r3
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >>19) == 0U) ? ENABLE : DISABLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf14      	ite	ne
 8003cfc:	2301      	movne	r3, #1
 8003cfe:	2300      	moveq	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	bf14      	ite	ne
 8003d30:	2301      	movne	r3, #1
 8003d32:	2300      	moveq	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	bf14      	ite	ne
 8003d4a:	2301      	movne	r3, #1
 8003d4c:	2300      	moveq	r3, #0
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bf14      	ite	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	2300      	moveq	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	bf0c      	ite	eq
 8003da8:	2301      	moveq	r3, #1
 8003daa:	2300      	movne	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	461a      	mov	r2, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	461a      	mov	r2, r3
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	bf14      	ite	ne
 8003de0:	2301      	movne	r3, #1
 8003de2:	2300      	moveq	r3, #0
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U) ? ENABLE : DISABLE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	461a      	mov	r2, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	0e5b      	lsrs	r3, r3, #25
 8003e12:	f003 021f 	and.w	r2, r3, #31
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	bf14      	ite	ne
 8003e28:	2301      	movne	r3, #1
 8003e2a:	2300      	moveq	r3, #0
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 020f 	and.w	r2, r3, #15
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	bf14      	ite	ne
 8003e52:	2301      	movne	r3, #1
 8003e54:	2300      	moveq	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	bf0c      	ite	eq
 8003e6e:	2301      	moveq	r3, #1
 8003e70:	2300      	movne	r3, #0
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	461a      	mov	r2, r3
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	0c1b      	lsrs	r3, r3, #16
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	bf14      	ite	ne
 8003ea8:	2301      	movne	r3, #1
 8003eaa:	2300      	moveq	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	461a      	mov	r2, r3
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U) ? ENABLE : DISABLE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	bf14      	ite	ne
 8003ec6:	2301      	movne	r3, #1
 8003ec8:	2300      	moveq	r3, #0
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	461a      	mov	r2, r3
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003edc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003eec:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003f1a:	f003 0310 	and.w	r3, r3, #16
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bf14      	ite	ne
 8003f22:	2301      	movne	r3, #1
 8003f24:	2300      	moveq	r3, #0
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  if(macconf == NULL)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d101      	bne.n	8003f70 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e00a      	b.n	8003f86 <HAL_ETH_SetMACConfig+0x2a>
  }

  if(heth->RxState == HAL_ETH_STATE_READY)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	2b10      	cmp	r3, #16
 8003f76:	d105      	bne.n	8003f84 <HAL_ETH_SetMACConfig+0x28>
  {
    ETH_SetMACConfig(heth, macconf);
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 f860 	bl	8004040 <ETH_SetMACConfig>

    return HAL_OK;
 8003f80:	2300      	movs	r3, #0
 8003f82:	e000      	b.n	8003f86 <HAL_ETH_SetMACConfig+0x2a>
  }
  else
  {
    return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
  }
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	3708      	adds	r7, #8
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003fa0:	60fb      	str	r3, [r7, #12]

	/* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003fa8:	60fb      	str	r3, [r7, #12]

	/* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003faa:	f003 f95d 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 8003fae:	60b8      	str	r0, [r7, #8]

	/* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4a1e      	ldr	r2, [pc, #120]	; (800402c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d908      	bls.n	8003fca <HAL_ETH_SetMDIOClockRange+0x3a>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	4a1d      	ldr	r2, [pc, #116]	; (8004030 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d804      	bhi.n	8003fca <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	e027      	b.n	800401a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	; (8004030 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d908      	bls.n	8003fe4 <HAL_ETH_SetMDIOClockRange+0x54>
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a17      	ldr	r2, [pc, #92]	; (8004034 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d204      	bcs.n	8003fe4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	e01a      	b.n	800401a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4a13      	ldr	r2, [pc, #76]	; (8004034 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d303      	bcc.n	8003ff4 <HAL_ETH_SetMDIOClockRange+0x64>
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	4a12      	ldr	r2, [pc, #72]	; (8004038 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d911      	bls.n	8004018 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	4a10      	ldr	r2, [pc, #64]	; (8004038 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d908      	bls.n	800400e <HAL_ETH_SetMDIOClockRange+0x7e>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4a0f      	ldr	r2, [pc, #60]	; (800403c <HAL_ETH_SetMDIOClockRange+0xac>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d804      	bhi.n	800400e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400a:	60fb      	str	r3, [r7, #12]
 800400c:	e005      	b.n	800401a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004014:	60fb      	str	r3, [r7, #12]
 8004016:	e000      	b.n	800401a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004018:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	01312cff 	.word	0x01312cff
 8004030:	02160ebf 	.word	0x02160ebf
 8004034:	03938700 	.word	0x03938700
 8004038:	05f5e0ff 	.word	0x05f5e0ff
 800403c:	08f0d17f 	.word	0x08f0d17f

08004040 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8004052:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	791b      	ldrb	r3, [r3, #4]
 8004058:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 800405a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	7b1b      	ldrb	r3, [r3, #12]
 8004060:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8004062:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	7b5b      	ldrb	r3, [r3, #13]
 8004068:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800406a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	7b9b      	ldrb	r3, [r3, #14]
 8004070:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8004072:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	7bdb      	ldrb	r3, [r3, #15]
 8004078:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800407a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	7c12      	ldrb	r2, [r2, #16]
 8004080:	2a00      	cmp	r2, #0
 8004082:	d102      	bne.n	800408a <ETH_SetMACConfig+0x4a>
 8004084:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004088:	e000      	b.n	800408c <ETH_SetMACConfig+0x4c>
 800408a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800408c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	7c52      	ldrb	r2, [r2, #17]
 8004092:	2a00      	cmp	r2, #0
 8004094:	d102      	bne.n	800409c <ETH_SetMACConfig+0x5c>
 8004096:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800409a:	e000      	b.n	800409e <ETH_SetMACConfig+0x5e>
 800409c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800409e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	7c9b      	ldrb	r3, [r3, #18]
 80040a4:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80040a6:	431a      	orrs	r2, r3
                                macconf->Speed |
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 80040ac:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 80040b2:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	7f1b      	ldrb	r3, [r3, #28]
 80040b8:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 80040ba:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	7f5b      	ldrb	r3, [r3, #29]
 80040c0:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 80040c2:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80040c4:	683a      	ldr	r2, [r7, #0]
 80040c6:	7f92      	ldrb	r2, [r2, #30]
 80040c8:	2a00      	cmp	r2, #0
 80040ca:	d102      	bne.n	80040d2 <ETH_SetMACConfig+0x92>
 80040cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040d0:	e000      	b.n	80040d4 <ETH_SetMACConfig+0x94>
 80040d2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 80040d4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	7fdb      	ldrb	r3, [r3, #31]
 80040da:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 80040dc:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80040de:	683a      	ldr	r2, [r7, #0]
 80040e0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80040e4:	2a00      	cmp	r2, #0
 80040e6:	d102      	bne.n	80040ee <ETH_SetMACConfig+0xae>
 80040e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040ec:	e000      	b.n	80040f0 <ETH_SetMACConfig+0xb0>
 80040ee:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80040f0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80040f6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040fe:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8004100:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	4b56      	ldr	r3, [pc, #344]	; (800426c <ETH_SetMACConfig+0x22c>)
 8004112:	4013      	ands	r3, r2
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	6812      	ldr	r2, [r2, #0]
 8004118:	68f9      	ldr	r1, [r7, #12]
 800411a:	430b      	orrs	r3, r1
 800411c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004122:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800412a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800412c:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004134:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8004136:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800413e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8004140:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8004142:	683a      	ldr	r2, [r7, #0]
 8004144:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004148:	2a00      	cmp	r2, #0
 800414a:	d102      	bne.n	8004152 <ETH_SetMACConfig+0x112>
 800414c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004150:	e000      	b.n	8004154 <ETH_SetMACConfig+0x114>
 8004152:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8004154:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	4b42      	ldr	r3, [pc, #264]	; (8004270 <ETH_SetMACConfig+0x230>)
 8004166:	4013      	ands	r3, r2
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	6812      	ldr	r2, [r2, #0]
 800416c:	68f9      	ldr	r1, [r7, #12]
 800416e:	430b      	orrs	r3, r1
 8004170:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004178:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800417e:	4313      	orrs	r3, r2
 8004180:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	68da      	ldr	r2, [r3, #12]
 8004188:	4b3a      	ldr	r3, [pc, #232]	; (8004274 <ETH_SetMACConfig+0x234>)
 800418a:	4013      	ands	r3, r2
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6812      	ldr	r2, [r2, #0]
 8004190:	68f9      	ldr	r1, [r7, #12]
 8004192:	430b      	orrs	r3, r1
 8004194:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800419c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80041a2:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80041aa:	2a00      	cmp	r2, #0
 80041ac:	d101      	bne.n	80041b2 <ETH_SetMACConfig+0x172>
 80041ae:	2280      	movs	r2, #128	; 0x80
 80041b0:	e000      	b.n	80041b4 <ETH_SetMACConfig+0x174>
 80041b2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80041b4:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80041bc:	4313      	orrs	r3, r2
 80041be:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80041c6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80041ca:	4013      	ands	r3, r2
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	6812      	ldr	r2, [r2, #0]
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	430b      	orrs	r3, r1
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80041dc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80041e4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f2:	f023 0103 	bic.w	r1, r3, #3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800420a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	430a      	orrs	r2, r1
 8004218:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004220:	683a      	ldr	r2, [r7, #0]
 8004222:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004226:	2a00      	cmp	r2, #0
 8004228:	d101      	bne.n	800422e <ETH_SetMACConfig+0x1ee>
 800422a:	2240      	movs	r2, #64	; 0x40
 800422c:	e000      	b.n	8004230 <ETH_SetMACConfig+0x1f0>
 800422e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004230:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004238:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800423a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004242:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004250:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	430a      	orrs	r2, r1
 800425c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004260:	bf00      	nop
 8004262:	3714      	adds	r7, #20
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	00048083 	.word	0x00048083
 8004270:	c0f88000 	.word	0xc0f88000
 8004274:	fffffef0 	.word	0xfffffef0

08004278 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004278:	b480      	push	{r7}
 800427a:	b085      	sub	sp, #20
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	4b38      	ldr	r3, [pc, #224]	; (8004370 <ETH_SetDMAConfig+0xf8>)
 800428e:	4013      	ands	r3, r2
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	6812      	ldr	r2, [r2, #0]
 8004294:	6879      	ldr	r1, [r7, #4]
 8004296:	6809      	ldr	r1, [r1, #0]
 8004298:	431a      	orrs	r2, r3
 800429a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800429e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	791b      	ldrb	r3, [r3, #4]
 80042a4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80042aa:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	7b1b      	ldrb	r3, [r3, #12]
 80042b0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	f241 0304 	movw	r3, #4100	; 0x1004
 80042be:	4413      	add	r3, r2
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	4b2c      	ldr	r3, [pc, #176]	; (8004374 <ETH_SetDMAConfig+0xfc>)
 80042c4:	4013      	ands	r3, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6811      	ldr	r1, [r2, #0]
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	f241 0304 	movw	r3, #4100	; 0x1004
 80042d2:	440b      	add	r3, r1
 80042d4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	7b5b      	ldrb	r3, [r3, #13]
 80042da:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80042e0:	4313      	orrs	r3, r2
 80042e2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <ETH_SetDMAConfig+0x100>)
 80042f0:	4013      	ands	r3, r2
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	6811      	ldr	r1, [r2, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	431a      	orrs	r2, r3
 80042fa:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80042fe:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	7d1b      	ldrb	r3, [r3, #20]
 8004308:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800430a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	7f5b      	ldrb	r3, [r3, #29]
 8004310:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	f241 1304 	movw	r3, #4356	; 0x1104
 800431e:	4413      	add	r3, r2
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	4b16      	ldr	r3, [pc, #88]	; (800437c <ETH_SetDMAConfig+0x104>)
 8004324:	4013      	ands	r3, r2
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	6811      	ldr	r1, [r2, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	431a      	orrs	r2, r3
 800432e:	f241 1304 	movw	r3, #4356	; 0x1104
 8004332:	440b      	add	r3, r1
 8004334:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	7f1b      	ldrb	r3, [r3, #28]
 800433a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	f241 1308 	movw	r3, #4360	; 0x1108
 800434c:	4413      	add	r3, r2
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <ETH_SetDMAConfig+0x108>)
 8004352:	4013      	ands	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6811      	ldr	r1, [r2, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	431a      	orrs	r2, r3
 800435c:	f241 1308 	movw	r3, #4360	; 0x1108
 8004360:	440b      	add	r3, r1
 8004362:	601a      	str	r2, [r3, #0]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	ffff87fd 	.word	0xffff87fd
 8004374:	ffff2ffe 	.word	0xffff2ffe
 8004378:	fffec000 	.word	0xfffec000
 800437c:	ffc0efef 	.word	0xffc0efef
 8004380:	7fc0ffff 	.word	0x7fc0ffff

08004384 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b0a4      	sub	sp, #144	; 0x90
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800438c:	2301      	movs	r3, #1
 800438e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004392:	2300      	movs	r3, #0
 8004394:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004396:	2300      	movs	r3, #0
 8004398:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800439c:	2300      	movs	r3, #0
 800439e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80043ae:	2301      	movs	r3, #1
 80043b0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80043ba:	2301      	movs	r3, #1
 80043bc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80043c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043c4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80043cc:	2300      	movs	r3, #0
 80043ce:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80043d6:	2300      	movs	r3, #0
 80043d8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80043dc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80043e0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80043e2:	2300      	movs	r3, #0
 80043e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80043e8:	2300      	movs	r3, #0
 80043ea:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80043ec:	2301      	movs	r3, #1
 80043ee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80043fe:	2300      	movs	r3, #0
 8004400:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004402:	2300      	movs	r3, #0
 8004404:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004406:	2300      	movs	r3, #0
 8004408:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800440a:	2300      	movs	r3, #0
 800440c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004410:	2300      	movs	r3, #0
 8004412:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800441c:	2320      	movs	r3, #32
 800441e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004422:	2301      	movs	r3, #1
 8004424:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004428:	2300      	movs	r3, #0
 800442a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800442e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004432:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004434:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004438:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800443a:	2300      	movs	r3, #0
 800443c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004440:	2302      	movs	r3, #2
 8004442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004446:	2300      	movs	r3, #0
 8004448:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004452:	2300      	movs	r3, #0
 8004454:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004458:	2301      	movs	r3, #1
 800445a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800445e:	2300      	movs	r3, #0
 8004460:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004462:	2301      	movs	r3, #1
 8004464:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004468:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7ff fde6 	bl	8004040 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004474:	2301      	movs	r3, #1
 8004476:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004478:	2301      	movs	r3, #1
 800447a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004480:	2300      	movs	r3, #0
 8004482:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004486:	2300      	movs	r3, #0
 8004488:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800448a:	2300      	movs	r3, #0
 800448c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800448e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004492:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004494:	2300      	movs	r3, #0
 8004496:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004498:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800449c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 80044a4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80044a8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80044aa:	f107 0308 	add.w	r3, r7, #8
 80044ae:	4619      	mov	r1, r3
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fee1 	bl	8004278 <ETH_SetDMAConfig>
}
 80044b6:	bf00      	nop
 80044b8:	3790      	adds	r7, #144	; 0x90
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80044da:	f002 fec5 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80044de:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4a1e      	ldr	r2, [pc, #120]	; (800455c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d908      	bls.n	80044fa <ETH_MAC_MDIO_ClkConfig+0x3a>
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d804      	bhi.n	80044fa <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	e027      	b.n	800454a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4a18      	ldr	r2, [pc, #96]	; (8004560 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d908      	bls.n	8004514 <ETH_MAC_MDIO_ClkConfig+0x54>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d204      	bcs.n	8004514 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	e01a      	b.n	800454a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	4a13      	ldr	r2, [pc, #76]	; (8004564 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d303      	bcc.n	8004524 <ETH_MAC_MDIO_ClkConfig+0x64>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	4a12      	ldr	r2, [pc, #72]	; (8004568 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004520:	4293      	cmp	r3, r2
 8004522:	d911      	bls.n	8004548 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4a10      	ldr	r2, [pc, #64]	; (8004568 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d908      	bls.n	800453e <ETH_MAC_MDIO_ClkConfig+0x7e>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4a0f      	ldr	r2, [pc, #60]	; (800456c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d804      	bhi.n	800453e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	e005      	b.n	800454a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e000      	b.n	800454a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004548:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004554:	bf00      	nop
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}
 800455c:	01312cff 	.word	0x01312cff
 8004560:	02160ebf 	.word	0x02160ebf
 8004564:	03938700 	.word	0x03938700
 8004568:	05f5e0ff 	.word	0x05f5e0ff
 800456c:	08f0d17f 	.word	0x08f0d17f

08004570 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004578:	2300      	movs	r3, #0
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	e01d      	b.n	80045ba <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68d9      	ldr	r1, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4613      	mov	r3, r2
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	440b      	add	r3, r1
 800458e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2200      	movs	r2, #0
 800459a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2200      	movs	r2, #0
 80045a0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2200      	movs	r2, #0
 80045a6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	3206      	adds	r2, #6
 80045b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3301      	adds	r3, #1
 80045b8:	60fb      	str	r3, [r7, #12]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d9de      	bls.n	800457e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	f241 132c 	movw	r3, #4396	; 0x112c
 80045ce:	4413      	add	r3, r2
 80045d0:	2203      	movs	r2, #3
 80045d2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68d9      	ldr	r1, [r3, #12]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	f241 1314 	movw	r3, #4372	; 0x1114
 80045e0:	4413      	add	r3, r2
 80045e2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68da      	ldr	r2, [r3, #12]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80045fe:	b480      	push	{r7}
 8004600:	b085      	sub	sp, #20
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	e024      	b.n	8004656 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6919      	ldr	r1, [r3, #16]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	00db      	lsls	r3, r3, #3
 800461a:	440b      	add	r3, r1
 800461c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2200      	movs	r2, #0
 8004622:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	2200      	movs	r2, #0
 8004628:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2200      	movs	r2, #0
 800462e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2200      	movs	r2, #0
 8004634:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2200      	movs	r2, #0
 800463a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	2200      	movs	r2, #0
 8004640:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	3310      	adds	r3, #16
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	3301      	adds	r3, #1
 8004654:	60fb      	str	r3, [r7, #12]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2b03      	cmp	r3, #3
 800465a:	d9d7      	bls.n	800460c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2200      	movs	r2, #0
 8004660:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	f241 1330 	movw	r3, #4400	; 0x1130
 8004682:	4413      	add	r3, r2
 8004684:	2203      	movs	r2, #3
 8004686:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6919      	ldr	r1, [r3, #16]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	f241 131c 	movw	r3, #4380	; 0x111c
 8004694:	4413      	add	r3, r2
 8004696:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	f241 1328 	movw	r3, #4392	; 0x1128
 80046a8:	4413      	add	r3, r2
 80046aa:	6019      	str	r1, [r3, #0]
}
 80046ac:	bf00      	nop
 80046ae:	3714      	adds	r7, #20
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b08d      	sub	sp, #52	; 0x34
 80046bc:	af00      	add	r7, sp, #0
 80046be:	60f8      	str	r0, [r7, #12]
 80046c0:	60b9      	str	r1, [r7, #8]
 80046c2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3318      	adds	r3, #24
 80046c8:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	613b      	str	r3, [r7, #16]
  uint32_t descnbr = 0, idx;
 80046d6:	2300      	movs	r3, #0
 80046d8:	62bb      	str	r3, [r7, #40]	; 0x28
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80046ee:	6a3b      	ldr	r3, [r7, #32]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046f6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046fa:	d007      	beq.n	800470c <ETH_Prepare_Tx_Descriptors+0x54>
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	3304      	adds	r3, #4
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800470c:	2302      	movs	r3, #2
 800470e:	e24a      	b.n	8004ba6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b00      	cmp	r3, #0
 800471a:	d044      	beq.n	80047a6 <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 800471c:	6a3b      	ldr	r3, [r7, #32]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	4b72      	ldr	r3, [pc, #456]	; (80048ec <ETH_Prepare_Tx_Descriptors+0x234>)
 8004722:	4013      	ands	r3, r2
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004728:	431a      	orrs	r2, r3
 800472a:	6a3b      	ldr	r3, [r7, #32]
 800472c:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 800472e:	6a3b      	ldr	r3, [r7, #32]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004736:	6a3b      	ldr	r3, [r7, #32]
 8004738:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004748:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != 0U)
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d027      	beq.n	80047a6 <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	b29a      	uxth	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004760:	041b      	lsls	r3, r3, #16
 8004762:	431a      	orrs	r2, r3
 8004764:	6a3b      	ldr	r3, [r7, #32]
 8004766:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 8004768:	6a3b      	ldr	r3, [r7, #32]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004770:	6a3b      	ldr	r3, [r7, #32]
 8004772:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004780:	431a      	orrs	r2, r3
 8004782:	6a3b      	ldr	r3, [r7, #32]
 8004784:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004794:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80047a4:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80047a6:	68bb      	ldr	r3, [r7, #8]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00e      	beq.n	80047d0 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	689a      	ldr	r2, [r3, #8]
 80047b6:	4b4e      	ldr	r3, [pc, #312]	; (80048f0 <ETH_Prepare_Tx_Descriptors+0x238>)
 80047b8:	4013      	ands	r3, r2
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	6992      	ldr	r2, [r2, #24]
 80047be:	431a      	orrs	r2, r3
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80047c4:	6a3b      	ldr	r3, [r7, #32]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80047cc:	6a3b      	ldr	r3, [r7, #32]
 80047ce:	60da      	str	r2, [r3, #12]
  }

  if((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)|| (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d105      	bne.n	80047e8 <ETH_Prepare_Tx_Descriptors+0x130>
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0310 	and.w	r3, r3, #16
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d030      	beq.n	800484a <ETH_Prepare_Tx_Descriptors+0x192>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	60da      	str	r2, [r3, #12]
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80047f4:	6a3b      	ldr	r3, [r7, #32]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8004800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004802:	3301      	adds	r3, #1
 8004804:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004808:	2b03      	cmp	r3, #3
 800480a:	d902      	bls.n	8004812 <ETH_Prepare_Tx_Descriptors+0x15a>
 800480c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480e:	3b04      	subs	r3, #4
 8004810:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800481a:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	3301      	adds	r3, #1
 8004820:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if(READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8004822:	6a3b      	ldr	r3, [r7, #32]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800482a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800482e:	d10c      	bne.n	800484a <ETH_Prepare_Tx_Descriptors+0x192>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004838:	623b      	str	r3, [r7, #32]
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004842:	6a3b      	ldr	r3, [r7, #32]
 8004844:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8004846:	2302      	movs	r3, #2
 8004848:	e1ad      	b.n	8004ba6 <ETH_Prepare_Tx_Descriptors+0x4ee>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484c:	3301      	adds	r3, #1
 800484e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	689a      	ldr	r2, [r3, #8]
 800485e:	4b24      	ldr	r3, [pc, #144]	; (80048f0 <ETH_Prepare_Tx_Descriptors+0x238>)
 8004860:	4013      	ands	r3, r2
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	6852      	ldr	r2, [r2, #4]
 8004866:	431a      	orrs	r2, r3
 8004868:	6a3b      	ldr	r3, [r7, #32]
 800486a:	609a      	str	r2, [r3, #8]

  if(txbuffer->next != NULL)
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d012      	beq.n	800489a <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    txbuffer = txbuffer->next;
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004884:	6a3b      	ldr	r3, [r7, #32]
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	4b1a      	ldr	r3, [pc, #104]	; (80048f4 <ETH_Prepare_Tx_Descriptors+0x23c>)
 800488a:	4013      	ands	r3, r2
 800488c:	69fa      	ldr	r2, [r7, #28]
 800488e:	6852      	ldr	r2, [r2, #4]
 8004890:	0412      	lsls	r2, r2, #16
 8004892:	431a      	orrs	r2, r3
 8004894:	6a3b      	ldr	r3, [r7, #32]
 8004896:	609a      	str	r2, [r3, #8]
 8004898:	e008      	b.n	80048ac <ETH_Prepare_Tx_Descriptors+0x1f4>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	2200      	movs	r2, #0
 800489e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <ETH_Prepare_Tx_Descriptors+0x23c>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	6a3a      	ldr	r2, [r7, #32]
 80048aa:	6093      	str	r3, [r2, #8]
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0310 	and.w	r3, r3, #16
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d021      	beq.n	80048fc <ETH_Prepare_Tx_Descriptors+0x244>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80048b8:	6a3b      	ldr	r3, [r7, #32]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	04db      	lsls	r3, r3, #19
 80048c6:	431a      	orrs	r2, r3
 80048c8:	6a3b      	ldr	r3, [r7, #32]
 80048ca:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <ETH_Prepare_Tx_Descriptors+0x240>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	69d2      	ldr	r2, [r2, #28]
 80048d8:	431a      	orrs	r2, r3
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80048de:	6a3b      	ldr	r3, [r7, #32]
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80048e6:	6a3b      	ldr	r3, [r7, #32]
 80048e8:	60da      	str	r2, [r3, #12]
 80048ea:	e02e      	b.n	800494a <ETH_Prepare_Tx_Descriptors+0x292>
 80048ec:	ffff0000 	.word	0xffff0000
 80048f0:	ffffc000 	.word	0xffffc000
 80048f4:	c000ffff 	.word	0xc000ffff
 80048f8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	4b93      	ldr	r3, [pc, #588]	; (8004b50 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004902:	4013      	ands	r3, r2
 8004904:	68ba      	ldr	r2, [r7, #8]
 8004906:	6852      	ldr	r2, [r2, #4]
 8004908:	431a      	orrs	r2, r3
 800490a:	6a3b      	ldr	r3, [r7, #32]
 800490c:	60da      	str	r2, [r3, #12]

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d008      	beq.n	800492c <ETH_Prepare_Tx_Descriptors+0x274>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800491a:	6a3b      	ldr	r3, [r7, #32]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	695b      	ldr	r3, [r3, #20]
 8004926:	431a      	orrs	r2, r3
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	60da      	str	r2, [r3, #12]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d008      	beq.n	800494a <ETH_Prepare_Tx_Descriptors+0x292>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	431a      	orrs	r2, r3
 8004946:	6a3b      	ldr	r3, [r7, #32]
 8004948:	60da      	str	r2, [r3, #12]
    }
  }

  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <ETH_Prepare_Tx_Descriptors+0x2b0>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004962:	431a      	orrs	r2, r3
 8004964:	6a3b      	ldr	r3, [r7, #32]
 8004966:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004970:	6a3b      	ldr	r3, [r7, #32]
 8004972:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800497c:	6a3b      	ldr	r3, [r7, #32]
 800497e:	60da      	str	r2, [r3, #12]
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != 0U)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80cb 	beq.w	8004b30 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	431a      	orrs	r2, r3
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80049ac:	e0c0      	b.n	8004b30 <ETH_Prepare_Tx_Descriptors+0x478>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80049ae:	6a3b      	ldr	r3, [r7, #32]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80049ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049bc:	3301      	adds	r3, #1
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d902      	bls.n	80049cc <ETH_Prepare_Tx_Descriptors+0x314>
 80049c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c8:	3b04      	subs	r3, #4
 80049ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d4:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049de:	6a3b      	ldr	r3, [r7, #32]
 80049e0:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN) || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80049e2:	6a3b      	ldr	r3, [r7, #32]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ee:	d007      	beq.n	8004a00 <ETH_Prepare_Tx_Descriptors+0x348>
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f4:	3304      	adds	r3, #4
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	4413      	add	r3, r2
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d026      	beq.n	8004a4e <ETH_Prepare_Tx_Descriptors+0x396>
    {
      descidx = firstdescidx;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a0c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for(idx = 0; idx < descnbr; idx ++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	627b      	str	r3, [r7, #36]	; 0x24
 8004a12:	e016      	b.n	8004a42 <ETH_Prepare_Tx_Descriptors+0x38a>
      {
        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8004a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a22:	3301      	adds	r3, #1
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d902      	bls.n	8004a32 <ETH_Prepare_Tx_Descriptors+0x37a>
 8004a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2e:	3b04      	subs	r3, #4
 8004a30:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a3a:	623b      	str	r3, [r7, #32]
      for(idx = 0; idx < descnbr; idx ++)
 8004a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3e:	3301      	adds	r3, #1
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
 8004a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3e4      	bcc.n	8004a14 <ETH_Prepare_Tx_Descriptors+0x35c>
      }

      return HAL_ETH_ERROR_BUSY;
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e0ab      	b.n	8004ba6 <ETH_Prepare_Tx_Descriptors+0x4ee>
    }

    descnbr += 1U;
 8004a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a50:	3301      	adds	r3, #1
 8004a52:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	6a3b      	ldr	r3, [r7, #32]
 8004a62:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8004a64:	6a3b      	ldr	r3, [r7, #32]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	4b3a      	ldr	r3, [pc, #232]	; (8004b54 <ETH_Prepare_Tx_Descriptors+0x49c>)
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	6852      	ldr	r2, [r2, #4]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d012      	beq.n	8004aa4 <ETH_Prepare_Tx_Descriptors+0x3ec>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8004a84:	69fb      	ldr	r3, [r7, #28]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	461a      	mov	r2, r3
 8004a8a:	6a3b      	ldr	r3, [r7, #32]
 8004a8c:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8004a8e:	6a3b      	ldr	r3, [r7, #32]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	4b31      	ldr	r3, [pc, #196]	; (8004b58 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	69fa      	ldr	r2, [r7, #28]
 8004a98:	6852      	ldr	r2, [r2, #4]
 8004a9a:	0412      	lsls	r2, r2, #16
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	609a      	str	r2, [r3, #8]
 8004aa2:	e008      	b.n	8004ab6 <ETH_Prepare_Tx_Descriptors+0x3fe>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004aa4:	6a3b      	ldr	r3, [r7, #32]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8004aaa:	6a3b      	ldr	r3, [r7, #32]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	4b2a      	ldr	r3, [pc, #168]	; (8004b58 <ETH_Prepare_Tx_Descriptors+0x4a0>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	6a3a      	ldr	r2, [r7, #32]
 8004ab4:	6093      	str	r3, [r2, #8]
    }

    if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != 0U)
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0310 	and.w	r3, r3, #16
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00f      	beq.n	8004ae2 <ETH_Prepare_Tx_Descriptors+0x42a>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	4b25      	ldr	r3, [pc, #148]	; (8004b5c <ETH_Prepare_Tx_Descriptors+0x4a4>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	69d2      	ldr	r2, [r2, #28]
 8004ace:	431a      	orrs	r2, r3
 8004ad0:	6a3b      	ldr	r3, [r7, #32]
 8004ad2:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	60da      	str	r2, [r3, #12]
 8004ae0:	e017      	b.n	8004b12 <ETH_Prepare_Tx_Descriptors+0x45a>
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8004ae2:	6a3b      	ldr	r3, [r7, #32]
 8004ae4:	68da      	ldr	r2, [r3, #12]
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	; (8004b50 <ETH_Prepare_Tx_Descriptors+0x498>)
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	6852      	ldr	r2, [r2, #4]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	6a3b      	ldr	r3, [r7, #32]
 8004af2:	60da      	str	r2, [r3, #12]

      if(READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d008      	beq.n	8004b12 <ETH_Prepare_Tx_Descriptors+0x45a>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	431a      	orrs	r2, r3
 8004b0e:	6a3b      	ldr	r3, [r7, #32]
 8004b10:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	3301      	adds	r3, #1
 8004b16:	61bb      	str	r3, [r7, #24]
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b20:	6a3b      	ldr	r3, [r7, #32]
 8004b22:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b2c:	6a3b      	ldr	r3, [r7, #32]
 8004b2e:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f47f af3a 	bne.w	80049ae <ETH_Prepare_Tx_Descriptors+0x2f6>
  }

  if(ItMode != ((uint32_t)RESET))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00f      	beq.n	8004b60 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b48:	6a3b      	ldr	r3, [r7, #32]
 8004b4a:	609a      	str	r2, [r3, #8]
 8004b4c:	e00e      	b.n	8004b6c <ETH_Prepare_Tx_Descriptors+0x4b4>
 8004b4e:	bf00      	nop
 8004b50:	ffff8000 	.word	0xffff8000
 8004b54:	ffffc000 	.word	0xffffc000
 8004b58:	c000ffff 	.word	0xc000ffff
 8004b5c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8004b6c:	6a3b      	ldr	r3, [r7, #32]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b74:	6a3b      	ldr	r3, [r7, #32]
 8004b76:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b7c:	6979      	ldr	r1, [r7, #20]
 8004b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b80:	3304      	adds	r3, #4
 8004b82:	009b      	lsls	r3, r3, #2
 8004b84:	440b      	add	r3, r1
 8004b86:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b8c:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004b8e:	b672      	cpsid	i
}
 8004b90:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	4413      	add	r3, r2
 8004b9a:	1c5a      	adds	r2, r3, #1
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8004ba0:	b662      	cpsie	i
}
 8004ba2:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3734      	adds	r7, #52	; 0x34
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop

08004bb4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b098      	sub	sp, #96	; 0x60
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8004bbc:	4a84      	ldr	r2, [pc, #528]	; (8004dd0 <HAL_FDCAN_Init+0x21c>)
 8004bbe:	f107 030c 	add.w	r3, r7, #12
 8004bc2:	4611      	mov	r1, r2
 8004bc4:	224c      	movs	r2, #76	; 0x4c
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f015 f85b 	bl	8019c82 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e1ca      	b.n	8004f6c <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7e      	ldr	r2, [pc, #504]	; (8004dd4 <HAL_FDCAN_Init+0x220>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d106      	bne.n	8004bee <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004be8:	461a      	mov	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d106      	bne.n	8004c08 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7fc f946 	bl	8000e94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f022 0210 	bic.w	r2, r2, #16
 8004c16:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c18:	f7fd fe96 	bl	8002948 <HAL_GetTick>
 8004c1c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c1e:	e014      	b.n	8004c4a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c20:	f7fd fe92 	bl	8002948 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b0a      	cmp	r3, #10
 8004c2c:	d90d      	bls.n	8004c4a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c34:	f043 0201 	orr.w	r2, r3, #1
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2203      	movs	r2, #3
 8004c42:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	e190      	b.n	8004f6c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	699b      	ldr	r3, [r3, #24]
 8004c50:	f003 0308 	and.w	r3, r3, #8
 8004c54:	2b08      	cmp	r3, #8
 8004c56:	d0e3      	beq.n	8004c20 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0201 	orr.w	r2, r2, #1
 8004c66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004c68:	f7fd fe6e 	bl	8002948 <HAL_GetTick>
 8004c6c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c6e:	e014      	b.n	8004c9a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004c70:	f7fd fe6a 	bl	8002948 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b0a      	cmp	r3, #10
 8004c7c:	d90d      	bls.n	8004c9a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c84:	f043 0201 	orr.w	r2, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2203      	movs	r2, #3
 8004c92:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e168      	b.n	8004f6c <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0e3      	beq.n	8004c70 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0202 	orr.w	r2, r2, #2
 8004cb6:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	7c1b      	ldrb	r3, [r3, #16]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d108      	bne.n	8004cd2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	699a      	ldr	r2, [r3, #24]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cce:	619a      	str	r2, [r3, #24]
 8004cd0:	e007      	b.n	8004ce2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699a      	ldr	r2, [r3, #24]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ce0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	7c5b      	ldrb	r3, [r3, #17]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d108      	bne.n	8004cfc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	699a      	ldr	r2, [r3, #24]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004cf8:	619a      	str	r2, [r3, #24]
 8004cfa:	e007      	b.n	8004d0c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699a      	ldr	r2, [r3, #24]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d0a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7c9b      	ldrb	r3, [r3, #18]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d108      	bne.n	8004d26 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004d22:	619a      	str	r2, [r3, #24]
 8004d24:	e007      	b.n	8004d36 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	699a      	ldr	r2, [r3, #24]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d34:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	430a      	orrs	r2, r1
 8004d4a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004d5a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0210 	bic.w	r2, r2, #16
 8004d6a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d108      	bne.n	8004d86 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	699a      	ldr	r2, [r3, #24]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f042 0204 	orr.w	r2, r2, #4
 8004d82:	619a      	str	r2, [r3, #24]
 8004d84:	e030      	b.n	8004de8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d02c      	beq.n	8004de8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d020      	beq.n	8004dd8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	699a      	ldr	r2, [r3, #24]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004da4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f042 0210 	orr.w	r2, r2, #16
 8004db4:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d114      	bne.n	8004de8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	699a      	ldr	r2, [r3, #24]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0220 	orr.w	r2, r2, #32
 8004dcc:	619a      	str	r2, [r3, #24]
 8004dce:	e00b      	b.n	8004de8 <HAL_FDCAN_Init+0x234>
 8004dd0:	0801ad38 	.word	0x0801ad38
 8004dd4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699a      	ldr	r2, [r3, #24]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0220 	orr.w	r2, r2, #32
 8004de6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	69db      	ldr	r3, [r3, #28]
 8004df4:	3b01      	subs	r3, #1
 8004df6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004df8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
 8004dfe:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004e00:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	695b      	ldr	r3, [r3, #20]
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004e10:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004e12:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e1c:	d115      	bne.n	8004e4a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e2c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	3b01      	subs	r3, #1
 8004e34:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8004e36:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8004e46:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8004e48:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e70:	4413      	add	r3, r2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d012      	beq.n	8004e9c <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8004e7e:	f023 0107 	bic.w	r1, r3, #7
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004e8c:	4413      	add	r3, r2
 8004e8e:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d012      	beq.n	8004eca <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004eac:	f023 0107 	bic.w	r1, r3, #7
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004eba:	4413      	add	r3, r2
 8004ebc:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	430a      	orrs	r2, r1
 8004ec6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d013      	beq.n	8004efa <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004eda:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004ee8:	4413      	add	r3, r2
 8004eea:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004eee:	011a      	lsls	r2, r3, #4
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d013      	beq.n	8004f2a <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004f0a:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004f18:	4413      	add	r3, r2
 8004f1a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8004f1e:	021a      	lsls	r2, r3, #8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a11      	ldr	r2, [pc, #68]	; (8004f74 <HAL_FDCAN_Init+0x3c0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d107      	bne.n	8004f44 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f022 0203 	bic.w	r2, r2, #3
 8004f42:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fe73 	bl	8005c48 <FDCAN_CalcultateRamBlockAddresses>
 8004f62:	4603      	mov	r3, r0
 8004f64:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8004f68:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3760      	adds	r7, #96	; 0x60
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	4000a000 	.word	0x4000a000

08004f78 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b087      	sub	sp, #28
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8004f88:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004f8a:	7bfb      	ldrb	r3, [r7, #15]
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	d002      	beq.n	8004f96 <HAL_FDCAN_ConfigFilter+0x1e>
 8004f90:	7bfb      	ldrb	r3, [r7, #15]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d157      	bne.n	8005046 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d12b      	bne.n	8004ff6 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	2b07      	cmp	r3, #7
 8004fa4:	d10d      	bne.n	8004fc2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	69db      	ldr	r3, [r3, #28]
 8004fb0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8004fb2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8004fb8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8004fba:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	e00e      	b.n	8004fe0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004fce:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8004fd6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e025      	b.n	8005042 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	075a      	lsls	r2, r3, #29
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b07      	cmp	r3, #7
 800500a:	d103      	bne.n	8005014 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	613b      	str	r3, [r7, #16]
 8005012:	e006      	b.n	8005022 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	079a      	lsls	r2, r3, #30
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	695b      	ldr	r3, [r3, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	00db      	lsls	r3, r3, #3
 800502c:	4413      	add	r3, r2
 800502e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	697a      	ldr	r2, [r7, #20]
 8005034:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	3304      	adds	r3, #4
 800503a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e008      	b.n	8005058 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800504c:	f043 0202 	orr.w	r2, r3, #2
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
  }
}
 8005058:	4618      	mov	r0, r3
 800505a:	371c      	adds	r7, #28
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8005064:	b480      	push	{r7}
 8005066:	b085      	sub	sp, #20
 8005068:	af00      	add	r7, sp, #0
 800506a:	60f8      	str	r0, [r7, #12]
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005078:	b2db      	uxtb	r3, r3
 800507a:	2b01      	cmp	r3, #1
 800507c:	d110      	bne.n	80050a0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005086:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800508c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8005098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 800509c:	2300      	movs	r3, #0
 800509e:	e008      	b.n	80050b2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a6:	f043 0204 	orr.w	r2, r3, #4
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_FDCAN_ConfigFifoWatermark>:
  *           - 0 and 32, if FIFO is FDCAN_CFG_TX_EVENT_FIFO
  *           - 0 and 64, if FIFO is FDCAN_CFG_RX_FIFO0 or FDCAN_CFG_RX_FIFO1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFifoWatermark(FDCAN_HandleTypeDef *hfdcan, uint32_t FIFO, uint32_t Watermark)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  else /* (FIFO == FDCAN_CFG_RX_FIFO0) || (FIFO == FDCAN_CFG_RX_FIFO1) */
  {
    assert_param(IS_FDCAN_MAX_VALUE(Watermark, 64U));
  }

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d130      	bne.n	8005138 <HAL_FDCAN_ConfigFifoWatermark+0x7a>
  {
    /* Set the level for FIFO watermark interrupt */
    if (FIFO == FDCAN_CFG_TX_EVENT_FIFO)
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d10d      	bne.n	80050f8 <HAL_FDCAN_ConfigFifoWatermark+0x3a>
    {
      MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFWM, (Watermark << FDCAN_TXEFC_EFWM_Pos));
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050e4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	061a      	lsls	r2, r3, #24
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	430a      	orrs	r2, r1
 80050f2:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80050f6:	e01d      	b.n	8005134 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else if (FIFO == FDCAN_CFG_RX_FIFO0)
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d10d      	bne.n	800511a <HAL_FDCAN_ConfigFifoWatermark+0x5c>
    {
      MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0WM, (Watermark << FDCAN_RXF0C_F0WM_Pos));
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005106:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	061a      	lsls	r2, r3, #24
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	430a      	orrs	r2, r1
 8005114:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8005118:	e00c      	b.n	8005134 <HAL_FDCAN_ConfigFifoWatermark+0x76>
    }
    else /* FIFO == FDCAN_CFG_RX_FIFO1 */
    {
      MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1WM, (Watermark << FDCAN_RXF1C_F1WM_Pos));
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005122:	f023 41fe 	bic.w	r1, r3, #2130706432	; 0x7f000000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	061a      	lsls	r2, r3, #24
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	430a      	orrs	r2, r1
 8005130:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Return function status */
    return HAL_OK;
 8005134:	2300      	movs	r3, #0
 8005136:	e008      	b.n	800514a <HAL_FDCAN_ConfigFifoWatermark+0x8c>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800513e:	f043 0204 	orr.w	r2, r3, #4
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b01      	cmp	r3, #1
 8005168:	d111      	bne.n	800518e <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699a      	ldr	r2, [r3, #24]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f022 0201 	bic.w	r2, r2, #1
 8005180:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800518a:	2300      	movs	r3, #0
 800518c:	e008      	b.n	80051a0 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005194:	f043 0204 	orr.w	r2, r3, #4
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
  }
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	370c      	adds	r7, #12
 80051a4:	46bd      	mov	sp, r7
 80051a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051aa:	4770      	bx	lr

080051ac <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	60f8      	str	r0, [r7, #12]
 80051b4:	60b9      	str	r1, [r7, #8]
 80051b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d141      	bne.n	8005248 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80051cc:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d109      	bne.n	80051e8 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051da:	f043 0220 	orr.w	r2, r3, #32
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e038      	b.n	800525a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80051f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80051fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e026      	b.n	800525a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8005214:	0c1b      	lsrs	r3, r3, #16
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	68b9      	ldr	r1, [r7, #8]
 8005222:	68f8      	ldr	r0, [r7, #12]
 8005224:	f000 fe96 	bl	8005f54 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2101      	movs	r1, #1
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	fa01 f202 	lsl.w	r2, r1, r2
 8005234:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8005238:	2201      	movs	r2, #1
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	409a      	lsls	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e008      	b.n	800525a <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800524e:	f043 0208 	orr.w	r2, r3, #8
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
	...

08005264 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005264:	b480      	push	{r7}
 8005266:	b08b      	sub	sp, #44	; 0x2c
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]
 8005270:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800527c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800527e:	7efb      	ldrb	r3, [r7, #27]
 8005280:	2b02      	cmp	r3, #2
 8005282:	f040 814b 	bne.w	800551c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b40      	cmp	r3, #64	; 0x40
 800528a:	d14d      	bne.n	8005328 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005294:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d109      	bne.n	80052b0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052a2:	f043 0220 	orr.w	r2, r3, #32
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e13e      	b.n	800552e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d109      	bne.n	80052d4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e12c      	b.n	800552e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	f003 0301 	and.w	r3, r3, #1
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d10b      	bne.n	80052fe <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80052ee:	0fdb      	lsrs	r3, r3, #31
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052f8:	d101      	bne.n	80052fe <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80052fa:	2301      	movs	r3, #1
 80052fc:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005306:	0a1b      	lsrs	r3, r3, #8
 8005308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	4413      	add	r3, r2
 8005310:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800531a:	69f9      	ldr	r1, [r7, #28]
 800531c:	fb01 f303 	mul.w	r3, r1, r3
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
 8005326:	e069      	b.n	80053fc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b41      	cmp	r3, #65	; 0x41
 800532c:	d14d      	bne.n	80053ca <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005336:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d109      	bne.n	8005352 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005344:	f043 0220 	orr.w	r2, r3, #32
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e0ed      	b.n	800552e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800535a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005368:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e0db      	b.n	800552e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800537e:	0e1b      	lsrs	r3, r3, #24
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	2b01      	cmp	r3, #1
 8005386:	d10b      	bne.n	80053a0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005390:	0fdb      	lsrs	r3, r3, #31
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800539a:	d101      	bne.n	80053a0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800539c:	2301      	movs	r3, #1
 800539e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80053a8:	0a1b      	lsrs	r3, r3, #8
 80053aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053bc:	69f9      	ldr	r1, [r7, #28]
 80053be:	fb01 f303 	mul.w	r3, r1, r3
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	627b      	str	r3, [r7, #36]	; 0x24
 80053c8:	e018      	b.n	80053fc <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d309      	bcc.n	80053e8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053da:	f043 0220 	orr.w	r2, r3, #32
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e0a2      	b.n	800552e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	68b9      	ldr	r1, [r7, #8]
 80053f2:	fb01 f303 	mul.w	r3, r1, r3
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d107      	bne.n	8005420 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8005410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	0c9b      	lsrs	r3, r3, #18
 8005416:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e005      	b.n	800542c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8005420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	3304      	adds	r3, #4
 8005448:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800544a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	b29a      	uxth	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800546c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8005478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	0e1b      	lsrs	r3, r3, #24
 800547e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8005486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	0fda      	lsrs	r2, r3, #31
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	3304      	adds	r3, #4
 8005494:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8005496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005498:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800549a:	2300      	movs	r3, #0
 800549c:	623b      	str	r3, [r7, #32]
 800549e:	e00a      	b.n	80054b6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	6a3b      	ldr	r3, [r7, #32]
 80054a4:	441a      	add	r2, r3
 80054a6:	6839      	ldr	r1, [r7, #0]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	440b      	add	r3, r1
 80054ac:	7812      	ldrb	r2, [r2, #0]
 80054ae:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	3301      	adds	r3, #1
 80054b4:	623b      	str	r3, [r7, #32]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	0c1b      	lsrs	r3, r3, #16
 80054bc:	4a1f      	ldr	r2, [pc, #124]	; (800553c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80054be:	5cd3      	ldrb	r3, [r2, r3]
 80054c0:	461a      	mov	r2, r3
 80054c2:	6a3b      	ldr	r3, [r7, #32]
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d3eb      	bcc.n	80054a0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d105      	bne.n	80054da <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80054d8:	e01e      	b.n	8005518 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	2b41      	cmp	r3, #65	; 0x41
 80054de:	d105      	bne.n	80054ec <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80054ea:	e015      	b.n	8005518 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	2b1f      	cmp	r3, #31
 80054f0:	d808      	bhi.n	8005504 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	2101      	movs	r1, #1
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	fa01 f202 	lsl.w	r2, r1, r2
 80054fe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8005502:	e009      	b.n	8005518 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f003 021f 	and.w	r2, r3, #31
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	2101      	movs	r1, #1
 8005510:	fa01 f202 	lsl.w	r2, r1, r2
 8005514:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	e008      	b.n	800552e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005522:	f043 0208 	orr.w	r2, r3, #8
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
  }
}
 800552e:	4618      	mov	r0, r3
 8005530:	372c      	adds	r7, #44	; 0x2c
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	0801e0c8 	.word	0x0801e0c8

08005540 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8005552:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b01      	cmp	r3, #1
 8005558:	d002      	beq.n	8005560 <HAL_FDCAN_ActivateNotification+0x20>
 800555a:	7dfb      	ldrb	r3, [r7, #23]
 800555c:	2b02      	cmp	r3, #2
 800555e:	d155      	bne.n	800560c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d108      	bne.n	8005580 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f042 0201 	orr.w	r2, r2, #1
 800557c:	65da      	str	r2, [r3, #92]	; 0x5c
 800557e:	e014      	b.n	80055aa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	4013      	ands	r3, r2
 800558a:	68ba      	ldr	r2, [r7, #8]
 800558c:	429a      	cmp	r2, r3
 800558e:	d108      	bne.n	80055a2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f042 0202 	orr.w	r2, r2, #2
 800559e:	65da      	str	r2, [r3, #92]	; 0x5c
 80055a0:	e003      	b.n	80055aa <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2203      	movs	r2, #3
 80055a8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d009      	beq.n	80055c8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	430a      	orrs	r2, r1
 80055c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d009      	beq.n	80055e6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	4b0f      	ldr	r3, [pc, #60]	; (800562c <HAL_FDCAN_ActivateNotification+0xec>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	6812      	ldr	r2, [r2, #0]
 80055f6:	430b      	orrs	r3, r1
 80055f8:	6553      	str	r3, [r2, #84]	; 0x54
 80055fa:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <HAL_FDCAN_ActivateNotification+0xf0>)
 80055fc:	695a      	ldr	r2, [r3, #20]
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	0f9b      	lsrs	r3, r3, #30
 8005602:	490b      	ldr	r1, [pc, #44]	; (8005630 <HAL_FDCAN_ActivateNotification+0xf0>)
 8005604:	4313      	orrs	r3, r2
 8005606:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8005608:	2300      	movs	r3, #0
 800560a:	e008      	b.n	800561e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005612:	f043 0202 	orr.w	r2, r3, #2
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	371c      	adds	r7, #28
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	3fcfffff 	.word	0x3fcfffff
 8005630:	4000a800 	.word	0x4000a800

08005634 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b092      	sub	sp, #72	; 0x48
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800563c:	4b90      	ldr	r3, [pc, #576]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	079b      	lsls	r3, r3, #30
 8005642:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8005644:	4b8e      	ldr	r3, [pc, #568]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	079b      	lsls	r3, r3, #30
 800564a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800564c:	4013      	ands	r3, r2
 800564e:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005656:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800565a:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005662:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005664:	4013      	ands	r3, r2
 8005666:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800567c:	4013      	ands	r3, r2
 800567e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800568a:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005694:	4013      	ands	r3, r2
 8005696:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800569e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80056a2:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056ac:	4013      	ands	r3, r2
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056b6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80056ba:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056c4:	4013      	ands	r3, r2
 80056c6:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d011      	beq.n	80056fa <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d00a      	beq.n	80056fa <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056ec:	651a      	str	r2, [r3, #80]	; 0x50
 80056ee:	4b64      	ldr	r3, [pc, #400]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fa5a 	bl	8005bae <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005704:	2b00      	cmp	r3, #0
 8005706:	d01e      	beq.n	8005746 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572a:	4013      	ands	r3, r2
 800572c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005736:	651a      	str	r2, [r3, #80]	; 0x50
 8005738:	4b51      	ldr	r3, [pc, #324]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 800573a:	2200      	movs	r2, #0
 800573c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800573e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fa0b 	bl	8005b5c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8005746:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00d      	beq.n	8005768 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005752:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <HAL_FDCAN_IRQHandler+0x250>)
 8005754:	400b      	ands	r3, r1
 8005756:	6513      	str	r3, [r2, #80]	; 0x50
 8005758:	4a49      	ldr	r2, [pc, #292]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 800575a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800575c:	0f9b      	lsrs	r3, r3, #30
 800575e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8005760:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f9c4 	bl	8005af0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00d      	beq.n	800578a <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005774:	4b43      	ldr	r3, [pc, #268]	; (8005884 <HAL_FDCAN_IRQHandler+0x250>)
 8005776:	400b      	ands	r3, r1
 8005778:	6513      	str	r3, [r2, #80]	; 0x50
 800577a:	4a41      	ldr	r2, [pc, #260]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 800577c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800577e:	0f9b      	lsrs	r3, r3, #30
 8005780:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005782:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f9be 	bl	8005b06 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800578a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00d      	beq.n	80057ac <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005796:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <HAL_FDCAN_IRQHandler+0x250>)
 8005798:	400b      	ands	r3, r1
 800579a:	6513      	str	r3, [r2, #80]	; 0x50
 800579c:	4a38      	ldr	r2, [pc, #224]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	0f9b      	lsrs	r3, r3, #30
 80057a2:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80057a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fb fc9a 	bl	80010e0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00d      	beq.n	80057ce <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057b8:	4b32      	ldr	r3, [pc, #200]	; (8005884 <HAL_FDCAN_IRQHandler+0x250>)
 80057ba:	400b      	ands	r3, r1
 80057bc:	6513      	str	r3, [r2, #80]	; 0x50
 80057be:	4a30      	ldr	r2, [pc, #192]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 80057c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c2:	0f9b      	lsrs	r3, r3, #30
 80057c4:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80057c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f9a7 	bl	8005b1c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d011      	beq.n	8005800 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00a      	beq.n	8005800 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057f2:	651a      	str	r2, [r3, #80]	; 0x50
 80057f4:	4b22      	ldr	r3, [pc, #136]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 80057f6:	2200      	movs	r2, #0
 80057f8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f999 	bl	8005b32 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800580a:	2b00      	cmp	r3, #0
 800580c:	d01e      	beq.n	800584c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005818:	2b00      	cmp	r3, #0
 800581a:	d017      	beq.n	800584c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005824:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800582e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005830:	4013      	ands	r3, r2
 8005832:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	651a      	str	r2, [r3, #80]	; 0x50
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 8005840:	2200      	movs	r2, #0
 8005842:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8005844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f97d 	bl	8005b46 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005852:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d016      	beq.n	8005888 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00f      	beq.n	8005888 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005870:	651a      	str	r2, [r3, #80]	; 0x50
 8005872:	4b03      	ldr	r3, [pc, #12]	; (8005880 <HAL_FDCAN_IRQHandler+0x24c>)
 8005874:	2200      	movs	r2, #0
 8005876:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f97a 	bl	8005b72 <HAL_FDCAN_RxBufferNewMessageCallback>
 800587e:	e003      	b.n	8005888 <HAL_FDCAN_IRQHandler+0x254>
 8005880:	4000a800 	.word	0x4000a800
 8005884:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800588e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d011      	beq.n	80058ba <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058ac:	651a      	str	r2, [r3, #80]	; 0x50
 80058ae:	4b8d      	ldr	r3, [pc, #564]	; (8005ae4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058b0:	2200      	movs	r2, #0
 80058b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f000 f966 	bl	8005b86 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d011      	beq.n	80058ec <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d00a      	beq.n	80058ec <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80058de:	651a      	str	r2, [r3, #80]	; 0x50
 80058e0:	4b80      	ldr	r3, [pc, #512]	; (8005ae4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f957 	bl	8005b9a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d016      	beq.n	8005928 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00f      	beq.n	8005928 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005910:	651a      	str	r2, [r3, #80]	; 0x50
 8005912:	4b74      	ldr	r3, [pc, #464]	; (8005ae4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8005914:	2200      	movs	r2, #0
 8005916:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800591e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	2b00      	cmp	r3, #0
 800592c:	d00d      	beq.n	800594a <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005934:	4b6c      	ldr	r3, [pc, #432]	; (8005ae8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005936:	400b      	ands	r3, r1
 8005938:	6513      	str	r3, [r2, #80]	; 0x50
 800593a:	4a6a      	ldr	r2, [pc, #424]	; (8005ae4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	0f9b      	lsrs	r3, r3, #30
 8005940:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005942:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f946 	bl	8005bd6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800594a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594c:	2b00      	cmp	r3, #0
 800594e:	d011      	beq.n	8005974 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005956:	4b64      	ldr	r3, [pc, #400]	; (8005ae8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8005958:	400b      	ands	r3, r1
 800595a:	6513      	str	r3, [r2, #80]	; 0x50
 800595c:	4a61      	ldr	r2, [pc, #388]	; (8005ae4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800595e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005960:	0f9b      	lsrs	r3, r3, #30
 8005962:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a5c      	ldr	r2, [pc, #368]	; (8005aec <HAL_FDCAN_IRQHandler+0x4b8>)
 800597a:	4293      	cmp	r3, r2
 800597c:	f040 80a6 	bne.w	8005acc <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 0303 	and.w	r3, r3, #3
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 809e 	beq.w	8005acc <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059a4:	4013      	ands	r3, r2
 80059a6:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059b2:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ba:	6a3a      	ldr	r2, [r7, #32]
 80059bc:	4013      	ands	r3, r2
 80059be:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80059ca:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	4013      	ands	r3, r2
 80059d6:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80059e2:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	4013      	ands	r3, r2
 80059ee:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80059fa:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	4013      	ands	r3, r2
 8005a06:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d007      	beq.n	8005a1e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a14:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8005a16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 f8e7 	bl	8005bec <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d007      	beq.n	8005a34 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8005a2c:	6a39      	ldr	r1, [r7, #32]
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f8e7 	bl	8005c02 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d01b      	beq.n	8005a7a <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	6a1b      	ldr	r3, [r3, #32]
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d014      	beq.n	8005a7a <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a56:	0c1b      	lsrs	r3, r3, #16
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a66:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	2240      	movs	r2, #64	; 0x40
 8005a6e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8005a70:	68fa      	ldr	r2, [r7, #12]
 8005a72:	6939      	ldr	r1, [r7, #16]
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f8cf 	bl	8005c18 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8005a88:	69f9      	ldr	r1, [r7, #28]
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f000 f8d0 	bl	8005c30 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d00b      	beq.n	8005aae <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005aa4:	69bb      	ldr	r3, [r7, #24]
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00b      	beq.n	8005acc <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	431a      	orrs	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f873 	bl	8005bc2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8005adc:	bf00      	nop
 8005ade:	3748      	adds	r7, #72	; 0x48
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	4000a800 	.word	0x4000a800
 8005ae8:	3fcfffff 	.word	0x3fcfffff
 8005aec:	4000a000 	.word	0x4000a000

08005af0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
 8005b24:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8005b26:	bf00      	nop
 8005b28:	370c      	adds	r7, #12
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b30:	4770      	bx	lr

08005b32 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b32:	b480      	push	{r7}
 8005b34:	b083      	sub	sp, #12
 8005b36:	af00      	add	r7, sp, #0
 8005b38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005b3a:	bf00      	nop
 8005b3c:	370c      	adds	r7, #12
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b46:	b480      	push	{r7}
 8005b48:	b083      	sub	sp, #12
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	6078      	str	r0, [r7, #4]
 8005b4e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005b50:	bf00      	nop
 8005b52:	370c      	adds	r7, #12
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr

08005b5c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr

08005b72 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b72:	b480      	push	{r7}
 8005b74:	b083      	sub	sp, #12
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8005b7a:	bf00      	nop
 8005b7c:	370c      	adds	r7, #12
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b083      	sub	sp, #12
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005b8e:	bf00      	nop
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005ba2:	bf00      	nop
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005be0:	bf00      	nop
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b085      	sub	sp, #20
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c54:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005c5e:	4ba7      	ldr	r3, [pc, #668]	; (8005efc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	0091      	lsls	r1, r2, #2
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	6812      	ldr	r2, [r2, #0]
 8005c6a:	430b      	orrs	r3, r1
 8005c6c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c78:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	041a      	lsls	r2, r3, #16
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	430a      	orrs	r2, r1
 8005c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	68ba      	ldr	r2, [r7, #8]
 8005c92:	4413      	add	r3, r2
 8005c94:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005c9e:	4b97      	ldr	r3, [pc, #604]	; (8005efc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	68ba      	ldr	r2, [r7, #8]
 8005ca4:	0091      	lsls	r1, r2, #2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	6812      	ldr	r2, [r2, #0]
 8005caa:	430b      	orrs	r3, r1
 8005cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc0:	041a      	lsls	r2, r3, #16
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	430a      	orrs	r2, r1
 8005cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	005b      	lsls	r3, r3, #1
 8005cd2:	68ba      	ldr	r2, [r7, #8]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005ce0:	4b86      	ldr	r3, [pc, #536]	; (8005efc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	0091      	lsls	r1, r2, #2
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	6812      	ldr	r2, [r2, #0]
 8005cec:	430b      	orrs	r3, r1
 8005cee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005cfa:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d02:	041a      	lsls	r2, r3, #16
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005d16:	fb02 f303 	mul.w	r3, r2, r3
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005d28:	4b74      	ldr	r3, [pc, #464]	; (8005efc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	0091      	lsls	r1, r2, #2
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	430b      	orrs	r3, r1
 8005d36:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005d42:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4a:	041a      	lsls	r2, r3, #16
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	430a      	orrs	r2, r1
 8005d52:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d5e:	fb02 f303 	mul.w	r3, r2, r3
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005d70:	4b62      	ldr	r3, [pc, #392]	; (8005efc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	0091      	lsls	r1, r2, #2
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	6812      	ldr	r2, [r2, #0]
 8005d7c:	430b      	orrs	r3, r1
 8005d7e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	4413      	add	r3, r2
 8005d92:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8005d9c:	4b57      	ldr	r3, [pc, #348]	; (8005efc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005d9e:	4013      	ands	r3, r2
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	0091      	lsls	r1, r2, #2
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	430b      	orrs	r3, r1
 8005daa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005db6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	041a      	lsls	r2, r3, #16
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005dde:	4b47      	ldr	r3, [pc, #284]	; (8005efc <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	0091      	lsls	r1, r2, #2
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	430b      	orrs	r3, r1
 8005dec:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005df8:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e00:	041a      	lsls	r2, r3, #16
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	430a      	orrs	r2, r1
 8005e08:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e14:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e1c:	061a      	lsls	r2, r3, #24
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e2c:	4b34      	ldr	r3, [pc, #208]	; (8005f00 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8005e2e:	4413      	add	r3, r2
 8005e30:	009a      	lsls	r2, r3, #2
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	441a      	add	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	441a      	add	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e5e:	6879      	ldr	r1, [r7, #4]
 8005e60:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8005e62:	fb01 f303 	mul.w	r3, r1, r3
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	441a      	add	r2, r3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8005e7a:	fb01 f303 	mul.w	r3, r1, r3
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	441a      	add	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e8e:	6879      	ldr	r1, [r7, #4]
 8005e90:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005e92:	fb01 f303 	mul.w	r3, r1, r3
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	441a      	add	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eaa:	00db      	lsls	r3, r3, #3
 8005eac:	441a      	add	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005ec2:	fb01 f303 	mul.w	r3, r1, r3
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	441a      	add	r2, r3
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005ede:	fb01 f303 	mul.w	r3, r1, r3
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	441a      	add	r2, r3
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	4a04      	ldr	r2, [pc, #16]	; (8005f04 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d915      	bls.n	8005f24 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005ef8:	e006      	b.n	8005f08 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8005efa:	bf00      	nop
 8005efc:	ffff0003 	.word	0xffff0003
 8005f00:	10002b00 	.word	0x10002b00
 8005f04:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2203      	movs	r2, #3
 8005f1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e010      	b.n	8005f46 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e005      	b.n	8005f38 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3304      	adds	r3, #4
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f3e:	68fa      	ldr	r2, [r7, #12]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d3f3      	bcc.n	8005f2c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop

08005f54 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b089      	sub	sp, #36	; 0x24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10a      	bne.n	8005f80 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8005f72:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	61fb      	str	r3, [r7, #28]
 8005f7e:	e00a      	b.n	8005f96 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8005f88:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8005f8e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8005f90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f94:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005fa0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8005fa6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8005fac:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	fb01 f303 	mul.w	r3, r1, r3
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	4413      	add	r3, r2
 8005fca:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	69fa      	ldr	r2, [r7, #28]
 8005fd0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	3304      	adds	r3, #4
 8005fd6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	3304      	adds	r3, #4
 8005fe2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	617b      	str	r3, [r7, #20]
 8005fe8:	e020      	b.n	800602c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	3303      	adds	r3, #3
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	3302      	adds	r3, #2
 8005ffa:	6879      	ldr	r1, [r7, #4]
 8005ffc:	440b      	add	r3, r1
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8006002:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	3301      	adds	r3, #1
 8006008:	6879      	ldr	r1, [r7, #4]
 800600a:	440b      	add	r3, r1
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8006010:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8006012:	6879      	ldr	r1, [r7, #4]
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	440a      	add	r2, r1
 8006018:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800601a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	3304      	adds	r3, #4
 8006024:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	3304      	adds	r3, #4
 800602a:	617b      	str	r3, [r7, #20]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	0c1b      	lsrs	r3, r3, #16
 8006032:	4a06      	ldr	r2, [pc, #24]	; (800604c <FDCAN_CopyMessageToRAM+0xf8>)
 8006034:	5cd3      	ldrb	r3, [r2, r3]
 8006036:	461a      	mov	r2, r3
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	4293      	cmp	r3, r2
 800603c:	d3d5      	bcc.n	8005fea <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800603e:	bf00      	nop
 8006040:	bf00      	nop
 8006042:	3724      	adds	r7, #36	; 0x24
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr
 800604c:	0801e0c8 	.word	0x0801e0c8

08006050 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006050:	b480      	push	{r7}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800605e:	4b86      	ldr	r3, [pc, #536]	; (8006278 <HAL_GPIO_Init+0x228>)
 8006060:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006062:	e18c      	b.n	800637e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	2101      	movs	r1, #1
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	fa01 f303 	lsl.w	r3, r1, r3
 8006070:	4013      	ands	r3, r2
 8006072:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 817e 	beq.w	8006378 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d005      	beq.n	8006094 <HAL_GPIO_Init+0x44>
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	f003 0303 	and.w	r3, r3, #3
 8006090:	2b02      	cmp	r3, #2
 8006092:	d130      	bne.n	80060f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800609a:	69fb      	ldr	r3, [r7, #28]
 800609c:	005b      	lsls	r3, r3, #1
 800609e:	2203      	movs	r2, #3
 80060a0:	fa02 f303 	lsl.w	r3, r2, r3
 80060a4:	43db      	mvns	r3, r3
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4013      	ands	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	005b      	lsls	r3, r3, #1
 80060b4:	fa02 f303 	lsl.w	r3, r2, r3
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ca:	2201      	movs	r2, #1
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	43db      	mvns	r3, r3
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	4013      	ands	r3, r2
 80060d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	091b      	lsrs	r3, r3, #4
 80060e0:	f003 0201 	and.w	r2, r3, #1
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	fa02 f303 	lsl.w	r3, r2, r3
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	69ba      	ldr	r2, [r7, #24]
 80060f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b03      	cmp	r3, #3
 8006100:	d017      	beq.n	8006132 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	005b      	lsls	r3, r3, #1
 800610c:	2203      	movs	r2, #3
 800610e:	fa02 f303 	lsl.w	r3, r2, r3
 8006112:	43db      	mvns	r3, r3
 8006114:	69ba      	ldr	r2, [r7, #24]
 8006116:	4013      	ands	r3, r2
 8006118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	fa02 f303 	lsl.w	r3, r2, r3
 8006126:	69ba      	ldr	r2, [r7, #24]
 8006128:	4313      	orrs	r3, r2
 800612a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	f003 0303 	and.w	r3, r3, #3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d123      	bne.n	8006186 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800613e:	69fb      	ldr	r3, [r7, #28]
 8006140:	08da      	lsrs	r2, r3, #3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	3208      	adds	r2, #8
 8006146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	f003 0307 	and.w	r3, r3, #7
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	220f      	movs	r2, #15
 8006156:	fa02 f303 	lsl.w	r3, r2, r3
 800615a:	43db      	mvns	r3, r3
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	4013      	ands	r3, r2
 8006160:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	691a      	ldr	r2, [r3, #16]
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	fa02 f303 	lsl.w	r3, r2, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4313      	orrs	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	08da      	lsrs	r2, r3, #3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	3208      	adds	r2, #8
 8006180:	69b9      	ldr	r1, [r7, #24]
 8006182:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	005b      	lsls	r3, r3, #1
 8006190:	2203      	movs	r2, #3
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f003 0203 	and.w	r2, r3, #3
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 80d8 	beq.w	8006378 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061c8:	4b2c      	ldr	r3, [pc, #176]	; (800627c <HAL_GPIO_Init+0x22c>)
 80061ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061ce:	4a2b      	ldr	r2, [pc, #172]	; (800627c <HAL_GPIO_Init+0x22c>)
 80061d0:	f043 0302 	orr.w	r3, r3, #2
 80061d4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80061d8:	4b28      	ldr	r3, [pc, #160]	; (800627c <HAL_GPIO_Init+0x22c>)
 80061da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061e6:	4a26      	ldr	r2, [pc, #152]	; (8006280 <HAL_GPIO_Init+0x230>)
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	089b      	lsrs	r3, r3, #2
 80061ec:	3302      	adds	r3, #2
 80061ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061f4:	69fb      	ldr	r3, [r7, #28]
 80061f6:	f003 0303 	and.w	r3, r3, #3
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	220f      	movs	r2, #15
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a1d      	ldr	r2, [pc, #116]	; (8006284 <HAL_GPIO_Init+0x234>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d04a      	beq.n	80062a8 <HAL_GPIO_Init+0x258>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <HAL_GPIO_Init+0x238>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d02b      	beq.n	8006272 <HAL_GPIO_Init+0x222>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a1b      	ldr	r2, [pc, #108]	; (800628c <HAL_GPIO_Init+0x23c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d025      	beq.n	800626e <HAL_GPIO_Init+0x21e>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a1a      	ldr	r2, [pc, #104]	; (8006290 <HAL_GPIO_Init+0x240>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01f      	beq.n	800626a <HAL_GPIO_Init+0x21a>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a19      	ldr	r2, [pc, #100]	; (8006294 <HAL_GPIO_Init+0x244>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d019      	beq.n	8006266 <HAL_GPIO_Init+0x216>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a18      	ldr	r2, [pc, #96]	; (8006298 <HAL_GPIO_Init+0x248>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d013      	beq.n	8006262 <HAL_GPIO_Init+0x212>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a17      	ldr	r2, [pc, #92]	; (800629c <HAL_GPIO_Init+0x24c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d00d      	beq.n	800625e <HAL_GPIO_Init+0x20e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a16      	ldr	r2, [pc, #88]	; (80062a0 <HAL_GPIO_Init+0x250>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d007      	beq.n	800625a <HAL_GPIO_Init+0x20a>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a15      	ldr	r2, [pc, #84]	; (80062a4 <HAL_GPIO_Init+0x254>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d101      	bne.n	8006256 <HAL_GPIO_Init+0x206>
 8006252:	2309      	movs	r3, #9
 8006254:	e029      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 8006256:	230a      	movs	r3, #10
 8006258:	e027      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 800625a:	2307      	movs	r3, #7
 800625c:	e025      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 800625e:	2306      	movs	r3, #6
 8006260:	e023      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 8006262:	2305      	movs	r3, #5
 8006264:	e021      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 8006266:	2304      	movs	r3, #4
 8006268:	e01f      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 800626a:	2303      	movs	r3, #3
 800626c:	e01d      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 800626e:	2302      	movs	r3, #2
 8006270:	e01b      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 8006272:	2301      	movs	r3, #1
 8006274:	e019      	b.n	80062aa <HAL_GPIO_Init+0x25a>
 8006276:	bf00      	nop
 8006278:	58000080 	.word	0x58000080
 800627c:	58024400 	.word	0x58024400
 8006280:	58000400 	.word	0x58000400
 8006284:	58020000 	.word	0x58020000
 8006288:	58020400 	.word	0x58020400
 800628c:	58020800 	.word	0x58020800
 8006290:	58020c00 	.word	0x58020c00
 8006294:	58021000 	.word	0x58021000
 8006298:	58021400 	.word	0x58021400
 800629c:	58021800 	.word	0x58021800
 80062a0:	58021c00 	.word	0x58021c00
 80062a4:	58022400 	.word	0x58022400
 80062a8:	2300      	movs	r3, #0
 80062aa:	69fa      	ldr	r2, [r7, #28]
 80062ac:	f002 0203 	and.w	r2, r2, #3
 80062b0:	0092      	lsls	r2, r2, #2
 80062b2:	4093      	lsls	r3, r2
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062ba:	4938      	ldr	r1, [pc, #224]	; (800639c <HAL_GPIO_Init+0x34c>)
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	089b      	lsrs	r3, r3, #2
 80062c0:	3302      	adds	r3, #2
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	43db      	mvns	r3, r3
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	4013      	ands	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d003      	beq.n	80062ee <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	43db      	mvns	r3, r3
 8006302:	69ba      	ldr	r2, [r7, #24]
 8006304:	4013      	ands	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d003      	beq.n	800631c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	4313      	orrs	r3, r2
 800631a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800631c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	43db      	mvns	r3, r3
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	4013      	ands	r3, r2
 8006332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	4313      	orrs	r3, r2
 8006346:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	43db      	mvns	r3, r3
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	4013      	ands	r3, r2
 800635c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	fa22 f303 	lsr.w	r3, r2, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	f47f ae6b 	bne.w	8006064 <HAL_GPIO_Init+0x14>
  }
}
 800638e:	bf00      	nop
 8006390:	bf00      	nop
 8006392:	3724      	adds	r7, #36	; 0x24
 8006394:	46bd      	mov	sp, r7
 8006396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639a:	4770      	bx	lr
 800639c:	58000400 	.word	0x58000400

080063a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	807b      	strh	r3, [r7, #2]
 80063ac:	4613      	mov	r3, r2
 80063ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063b0:	787b      	ldrb	r3, [r7, #1]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063b6:	887a      	ldrh	r2, [r7, #2]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063bc:	e003      	b.n	80063c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063be:	887b      	ldrh	r3, [r7, #2]
 80063c0:	041a      	lsls	r2, r3, #16
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	619a      	str	r2, [r3, #24]
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b085      	sub	sp, #20
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	6078      	str	r0, [r7, #4]
 80063da:	460b      	mov	r3, r1
 80063dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063e4:	887a      	ldrh	r2, [r7, #2]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4013      	ands	r3, r2
 80063ea:	041a      	lsls	r2, r3, #16
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	43d9      	mvns	r1, r3
 80063f0:	887b      	ldrh	r3, [r7, #2]
 80063f2:	400b      	ands	r3, r1
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	619a      	str	r2, [r3, #24]
}
 80063fa:	bf00      	nop
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	4603      	mov	r3, r0
 800640e:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006410:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006414:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006418:	88fb      	ldrh	r3, [r7, #6]
 800641a:	4013      	ands	r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006420:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006424:	88fb      	ldrh	r3, [r7, #6]
 8006426:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	4618      	mov	r0, r3
 800642e:	f7fb f8af 	bl	8001590 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8006432:	bf00      	nop
 8006434:	3708      	adds	r7, #8
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006444:	4b19      	ldr	r3, [pc, #100]	; (80064ac <HAL_PWREx_ConfigSupply+0x70>)
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	f003 0304 	and.w	r3, r3, #4
 800644c:	2b04      	cmp	r3, #4
 800644e:	d00a      	beq.n	8006466 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006450:	4b16      	ldr	r3, [pc, #88]	; (80064ac <HAL_PWREx_ConfigSupply+0x70>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f003 0307 	and.w	r3, r3, #7
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	429a      	cmp	r2, r3
 800645c:	d001      	beq.n	8006462 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e01f      	b.n	80064a2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e01d      	b.n	80064a2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006466:	4b11      	ldr	r3, [pc, #68]	; (80064ac <HAL_PWREx_ConfigSupply+0x70>)
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f023 0207 	bic.w	r2, r3, #7
 800646e:	490f      	ldr	r1, [pc, #60]	; (80064ac <HAL_PWREx_ConfigSupply+0x70>)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4313      	orrs	r3, r2
 8006474:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006476:	f7fc fa67 	bl	8002948 <HAL_GetTick>
 800647a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800647c:	e009      	b.n	8006492 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800647e:	f7fc fa63 	bl	8002948 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800648c:	d901      	bls.n	8006492 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e007      	b.n	80064a2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <HAL_PWREx_ConfigSupply+0x70>)
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800649a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649e:	d1ee      	bne.n	800647e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	58024800 	.word	0x58024800

080064b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b08c      	sub	sp, #48	; 0x30
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e397      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8087 	beq.w	80065de <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80064d0:	4b9e      	ldr	r3, [pc, #632]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80064d2:	691b      	ldr	r3, [r3, #16]
 80064d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80064d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80064da:	4b9c      	ldr	r3, [pc, #624]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80064dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064de:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80064e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e2:	2b10      	cmp	r3, #16
 80064e4:	d007      	beq.n	80064f6 <HAL_RCC_OscConfig+0x46>
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	2b18      	cmp	r3, #24
 80064ea:	d110      	bne.n	800650e <HAL_RCC_OscConfig+0x5e>
 80064ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ee:	f003 0303 	and.w	r3, r3, #3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d10b      	bne.n	800650e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064f6:	4b95      	ldr	r3, [pc, #596]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d06c      	beq.n	80065dc <HAL_RCC_OscConfig+0x12c>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d168      	bne.n	80065dc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	e371      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006516:	d106      	bne.n	8006526 <HAL_RCC_OscConfig+0x76>
 8006518:	4b8c      	ldr	r3, [pc, #560]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a8b      	ldr	r2, [pc, #556]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800651e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006522:	6013      	str	r3, [r2, #0]
 8006524:	e02e      	b.n	8006584 <HAL_RCC_OscConfig+0xd4>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	685b      	ldr	r3, [r3, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10c      	bne.n	8006548 <HAL_RCC_OscConfig+0x98>
 800652e:	4b87      	ldr	r3, [pc, #540]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a86      	ldr	r2, [pc, #536]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006534:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4b84      	ldr	r3, [pc, #528]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a83      	ldr	r2, [pc, #524]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006540:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	e01d      	b.n	8006584 <HAL_RCC_OscConfig+0xd4>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006550:	d10c      	bne.n	800656c <HAL_RCC_OscConfig+0xbc>
 8006552:	4b7e      	ldr	r3, [pc, #504]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a7d      	ldr	r2, [pc, #500]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800655c:	6013      	str	r3, [r2, #0]
 800655e:	4b7b      	ldr	r3, [pc, #492]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4a7a      	ldr	r2, [pc, #488]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006568:	6013      	str	r3, [r2, #0]
 800656a:	e00b      	b.n	8006584 <HAL_RCC_OscConfig+0xd4>
 800656c:	4b77      	ldr	r3, [pc, #476]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a76      	ldr	r2, [pc, #472]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	4b74      	ldr	r3, [pc, #464]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a73      	ldr	r2, [pc, #460]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800657e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d013      	beq.n	80065b4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800658c:	f7fc f9dc 	bl	8002948 <HAL_GetTick>
 8006590:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006592:	e008      	b.n	80065a6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006594:	f7fc f9d8 	bl	8002948 <HAL_GetTick>
 8006598:	4602      	mov	r2, r0
 800659a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659c:	1ad3      	subs	r3, r2, r3
 800659e:	2b64      	cmp	r3, #100	; 0x64
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e325      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065a6:	4b69      	ldr	r3, [pc, #420]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d0f0      	beq.n	8006594 <HAL_RCC_OscConfig+0xe4>
 80065b2:	e014      	b.n	80065de <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b4:	f7fc f9c8 	bl	8002948 <HAL_GetTick>
 80065b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80065bc:	f7fc f9c4 	bl	8002948 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b64      	cmp	r3, #100	; 0x64
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e311      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80065ce:	4b5f      	ldr	r3, [pc, #380]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1f0      	bne.n	80065bc <HAL_RCC_OscConfig+0x10c>
 80065da:	e000      	b.n	80065de <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 0302 	and.w	r3, r3, #2
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	f000 808a 	beq.w	8006700 <HAL_RCC_OscConfig+0x250>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80065ec:	4b57      	ldr	r3, [pc, #348]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80065f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80065f6:	4b55      	ldr	r3, [pc, #340]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80065f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80065fc:	6a3b      	ldr	r3, [r7, #32]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <HAL_RCC_OscConfig+0x162>
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	2b18      	cmp	r3, #24
 8006606:	d137      	bne.n	8006678 <HAL_RCC_OscConfig+0x1c8>
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	f003 0303 	and.w	r3, r3, #3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d132      	bne.n	8006678 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006612:	4b4e      	ldr	r3, [pc, #312]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f003 0304 	and.w	r3, r3, #4
 800661a:	2b00      	cmp	r3, #0
 800661c:	d005      	beq.n	800662a <HAL_RCC_OscConfig+0x17a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e2e3      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800662a:	4b48      	ldr	r3, [pc, #288]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f023 0219 	bic.w	r2, r3, #25
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	4945      	ldr	r1, [pc, #276]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006638:	4313      	orrs	r3, r2
 800663a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800663c:	f7fc f984 	bl	8002948 <HAL_GetTick>
 8006640:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006642:	e008      	b.n	8006656 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006644:	f7fc f980 	bl	8002948 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e2cd      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006656:	4b3d      	ldr	r3, [pc, #244]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0304 	and.w	r3, r3, #4
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006662:	4b3a      	ldr	r3, [pc, #232]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	691b      	ldr	r3, [r3, #16]
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	4936      	ldr	r1, [pc, #216]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006672:	4313      	orrs	r3, r2
 8006674:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006676:	e043      	b.n	8006700 <HAL_RCC_OscConfig+0x250>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	68db      	ldr	r3, [r3, #12]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d026      	beq.n	80066ce <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006680:	4b32      	ldr	r3, [pc, #200]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f023 0219 	bic.w	r2, r3, #25
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	492f      	ldr	r1, [pc, #188]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800668e:	4313      	orrs	r3, r2
 8006690:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006692:	f7fc f959 	bl	8002948 <HAL_GetTick>
 8006696:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800669a:	f7fc f955 	bl	8002948 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b02      	cmp	r3, #2
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e2a2      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80066ac:	4b27      	ldr	r3, [pc, #156]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f003 0304 	and.w	r3, r3, #4
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066b8:	4b24      	ldr	r3, [pc, #144]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	691b      	ldr	r3, [r3, #16]
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	4921      	ldr	r1, [pc, #132]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
 80066cc:	e018      	b.n	8006700 <HAL_RCC_OscConfig+0x250>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ce:	4b1f      	ldr	r3, [pc, #124]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a1e      	ldr	r2, [pc, #120]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80066d4:	f023 0301 	bic.w	r3, r3, #1
 80066d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066da:	f7fc f935 	bl	8002948 <HAL_GetTick>
 80066de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066e0:	e008      	b.n	80066f4 <HAL_RCC_OscConfig+0x244>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80066e2:	f7fc f931 	bl	8002948 <HAL_GetTick>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	d901      	bls.n	80066f4 <HAL_RCC_OscConfig+0x244>
          {
            return HAL_TIMEOUT;
 80066f0:	2303      	movs	r3, #3
 80066f2:	e27e      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80066f4:	4b15      	ldr	r3, [pc, #84]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f003 0304 	and.w	r3, r3, #4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d1f0      	bne.n	80066e2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d06d      	beq.n	80067e8 <HAL_RCC_OscConfig+0x338>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800670c:	4b0f      	ldr	r3, [pc, #60]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006714:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006716:	4b0d      	ldr	r3, [pc, #52]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671a:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	2b08      	cmp	r3, #8
 8006720:	d007      	beq.n	8006732 <HAL_RCC_OscConfig+0x282>
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	2b18      	cmp	r3, #24
 8006726:	d11e      	bne.n	8006766 <HAL_RCC_OscConfig+0x2b6>
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f003 0303 	and.w	r3, r3, #3
 800672e:	2b01      	cmp	r3, #1
 8006730:	d119      	bne.n	8006766 <HAL_RCC_OscConfig+0x2b6>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006732:	4b06      	ldr	r3, [pc, #24]	; (800674c <HAL_RCC_OscConfig+0x29c>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800673a:	2b00      	cmp	r3, #0
 800673c:	d008      	beq.n	8006750 <HAL_RCC_OscConfig+0x2a0>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d004      	beq.n	8006750 <HAL_RCC_OscConfig+0x2a0>
      {
        return HAL_ERROR;
 8006746:	2301      	movs	r3, #1
 8006748:	e253      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
 800674a:	bf00      	nop
 800674c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006750:	4ba3      	ldr	r3, [pc, #652]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	061b      	lsls	r3, r3, #24
 800675e:	49a0      	ldr	r1, [pc, #640]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006760:	4313      	orrs	r3, r2
 8006762:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006764:	e040      	b.n	80067e8 <HAL_RCC_OscConfig+0x338>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	69db      	ldr	r3, [r3, #28]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d023      	beq.n	80067b6 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800676e:	4b9c      	ldr	r3, [pc, #624]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a9b      	ldr	r2, [pc, #620]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006778:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800677a:	f7fc f8e5 	bl	8002948 <HAL_GetTick>
 800677e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006780:	e008      	b.n	8006794 <HAL_RCC_OscConfig+0x2e4>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006782:	f7fc f8e1 	bl	8002948 <HAL_GetTick>
 8006786:	4602      	mov	r2, r0
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	2b02      	cmp	r3, #2
 800678e:	d901      	bls.n	8006794 <HAL_RCC_OscConfig+0x2e4>
          {
            return HAL_TIMEOUT;
 8006790:	2303      	movs	r3, #3
 8006792:	e22e      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006794:	4b92      	ldr	r3, [pc, #584]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800679c:	2b00      	cmp	r3, #0
 800679e:	d0f0      	beq.n	8006782 <HAL_RCC_OscConfig+0x2d2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80067a0:	4b8f      	ldr	r3, [pc, #572]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	061b      	lsls	r3, r3, #24
 80067ae:	498c      	ldr	r1, [pc, #560]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60cb      	str	r3, [r1, #12]
 80067b4:	e018      	b.n	80067e8 <HAL_RCC_OscConfig+0x338>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80067b6:	4b8a      	ldr	r3, [pc, #552]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	4a89      	ldr	r2, [pc, #548]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80067bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067c2:	f7fc f8c1 	bl	8002948 <HAL_GetTick>
 80067c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067c8:	e008      	b.n	80067dc <HAL_RCC_OscConfig+0x32c>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80067ca:	f7fc f8bd 	bl	8002948 <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	2b02      	cmp	r3, #2
 80067d6:	d901      	bls.n	80067dc <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 80067d8:	2303      	movs	r3, #3
 80067da:	e20a      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80067dc:	4b80      	ldr	r3, [pc, #512]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f0      	bne.n	80067ca <HAL_RCC_OscConfig+0x31a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d036      	beq.n	8006862 <HAL_RCC_OscConfig+0x3b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d019      	beq.n	8006830 <HAL_RCC_OscConfig+0x380>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067fc:	4b78      	ldr	r3, [pc, #480]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80067fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006800:	4a77      	ldr	r2, [pc, #476]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006802:	f043 0301 	orr.w	r3, r3, #1
 8006806:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006808:	f7fc f89e 	bl	8002948 <HAL_GetTick>
 800680c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006810:	f7fc f89a 	bl	8002948 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b02      	cmp	r3, #2
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e1e7      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006822:	4b6f      	ldr	r3, [pc, #444]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006826:	f003 0302 	and.w	r3, r3, #2
 800682a:	2b00      	cmp	r3, #0
 800682c:	d0f0      	beq.n	8006810 <HAL_RCC_OscConfig+0x360>
 800682e:	e018      	b.n	8006862 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006830:	4b6b      	ldr	r3, [pc, #428]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006834:	4a6a      	ldr	r2, [pc, #424]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006836:	f023 0301 	bic.w	r3, r3, #1
 800683a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800683c:	f7fc f884 	bl	8002948 <HAL_GetTick>
 8006840:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006842:	e008      	b.n	8006856 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006844:	f7fc f880 	bl	8002948 <HAL_GetTick>
 8006848:	4602      	mov	r2, r0
 800684a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684c:	1ad3      	subs	r3, r2, r3
 800684e:	2b02      	cmp	r3, #2
 8006850:	d901      	bls.n	8006856 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e1cd      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006856:	4b62      	ldr	r3, [pc, #392]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1f0      	bne.n	8006844 <HAL_RCC_OscConfig+0x394>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0320 	and.w	r3, r3, #32
 800686a:	2b00      	cmp	r3, #0
 800686c:	d036      	beq.n	80068dc <HAL_RCC_OscConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d019      	beq.n	80068aa <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006876:	4b5a      	ldr	r3, [pc, #360]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a59      	ldr	r2, [pc, #356]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800687c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006880:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006882:	f7fc f861 	bl	8002948 <HAL_GetTick>
 8006886:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006888:	e008      	b.n	800689c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800688a:	f7fc f85d 	bl	8002948 <HAL_GetTick>
 800688e:	4602      	mov	r2, r0
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	2b02      	cmp	r3, #2
 8006896:	d901      	bls.n	800689c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006898:	2303      	movs	r3, #3
 800689a:	e1aa      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800689c:	4b50      	ldr	r3, [pc, #320]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0f0      	beq.n	800688a <HAL_RCC_OscConfig+0x3da>
 80068a8:	e018      	b.n	80068dc <HAL_RCC_OscConfig+0x42c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80068aa:	4b4d      	ldr	r3, [pc, #308]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a4c      	ldr	r2, [pc, #304]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80068b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80068b6:	f7fc f847 	bl	8002948 <HAL_GetTick>
 80068ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068bc:	e008      	b.n	80068d0 <HAL_RCC_OscConfig+0x420>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80068be:	f7fc f843 	bl	8002948 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d901      	bls.n	80068d0 <HAL_RCC_OscConfig+0x420>
        {
          return HAL_TIMEOUT;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e190      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80068d0:	4b43      	ldr	r3, [pc, #268]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f0      	bne.n	80068be <HAL_RCC_OscConfig+0x40e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f000 8085 	beq.w	80069f4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80068ea:	4b3e      	ldr	r3, [pc, #248]	; (80069e4 <HAL_RCC_OscConfig+0x534>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a3d      	ldr	r2, [pc, #244]	; (80069e4 <HAL_RCC_OscConfig+0x534>)
 80068f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068f6:	f7fc f827 	bl	8002948 <HAL_GetTick>
 80068fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068fc:	e008      	b.n	8006910 <HAL_RCC_OscConfig+0x460>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068fe:	f7fc f823 	bl	8002948 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	2b64      	cmp	r3, #100	; 0x64
 800690a:	d901      	bls.n	8006910 <HAL_RCC_OscConfig+0x460>
      {
        return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e170      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006910:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <HAL_RCC_OscConfig+0x534>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006918:	2b00      	cmp	r3, #0
 800691a:	d0f0      	beq.n	80068fe <HAL_RCC_OscConfig+0x44e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b01      	cmp	r3, #1
 8006922:	d106      	bne.n	8006932 <HAL_RCC_OscConfig+0x482>
 8006924:	4b2e      	ldr	r3, [pc, #184]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	4a2d      	ldr	r2, [pc, #180]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800692a:	f043 0301 	orr.w	r3, r3, #1
 800692e:	6713      	str	r3, [r2, #112]	; 0x70
 8006930:	e02d      	b.n	800698e <HAL_RCC_OscConfig+0x4de>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10c      	bne.n	8006954 <HAL_RCC_OscConfig+0x4a4>
 800693a:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800693c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800693e:	4a28      	ldr	r2, [pc, #160]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6713      	str	r3, [r2, #112]	; 0x70
 8006946:	4b26      	ldr	r3, [pc, #152]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800694a:	4a25      	ldr	r2, [pc, #148]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800694c:	f023 0304 	bic.w	r3, r3, #4
 8006950:	6713      	str	r3, [r2, #112]	; 0x70
 8006952:	e01c      	b.n	800698e <HAL_RCC_OscConfig+0x4de>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b05      	cmp	r3, #5
 800695a:	d10c      	bne.n	8006976 <HAL_RCC_OscConfig+0x4c6>
 800695c:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800695e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006960:	4a1f      	ldr	r2, [pc, #124]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006962:	f043 0304 	orr.w	r3, r3, #4
 8006966:	6713      	str	r3, [r2, #112]	; 0x70
 8006968:	4b1d      	ldr	r3, [pc, #116]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800696a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696c:	4a1c      	ldr	r2, [pc, #112]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800696e:	f043 0301 	orr.w	r3, r3, #1
 8006972:	6713      	str	r3, [r2, #112]	; 0x70
 8006974:	e00b      	b.n	800698e <HAL_RCC_OscConfig+0x4de>
 8006976:	4b1a      	ldr	r3, [pc, #104]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	4a19      	ldr	r2, [pc, #100]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 800697c:	f023 0301 	bic.w	r3, r3, #1
 8006980:	6713      	str	r3, [r2, #112]	; 0x70
 8006982:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 8006988:	f023 0304 	bic.w	r3, r3, #4
 800698c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d015      	beq.n	80069c2 <HAL_RCC_OscConfig+0x512>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006996:	f7fb ffd7 	bl	8002948 <HAL_GetTick>
 800699a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800699c:	e00a      	b.n	80069b4 <HAL_RCC_OscConfig+0x504>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800699e:	f7fb ffd3 	bl	8002948 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e11e      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80069b4:	4b0a      	ldr	r3, [pc, #40]	; (80069e0 <HAL_RCC_OscConfig+0x530>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0ee      	beq.n	800699e <HAL_RCC_OscConfig+0x4ee>
 80069c0:	e018      	b.n	80069f4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c2:	f7fb ffc1 	bl	8002948 <HAL_GetTick>
 80069c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069c8:	e00e      	b.n	80069e8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ca:	f7fb ffbd 	bl	8002948 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069d8:	4293      	cmp	r3, r2
 80069da:	d905      	bls.n	80069e8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e108      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
 80069e0:	58024400 	.word	0x58024400
 80069e4:	58024800 	.word	0x58024800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80069e8:	4b84      	ldr	r3, [pc, #528]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 80069ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ec:	f003 0302 	and.w	r3, r3, #2
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d1ea      	bne.n	80069ca <HAL_RCC_OscConfig+0x51a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	f000 80f9 	beq.w	8006bf0 <HAL_RCC_OscConfig+0x740>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80069fe:	4b7f      	ldr	r3, [pc, #508]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a06:	2b18      	cmp	r3, #24
 8006a08:	f000 80b4 	beq.w	8006b74 <HAL_RCC_OscConfig+0x6c4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	f040 8095 	bne.w	8006b40 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a16:	4b79      	ldr	r3, [pc, #484]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a78      	ldr	r2, [pc, #480]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a22:	f7fb ff91 	bl	8002948 <HAL_GetTick>
 8006a26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a28:	e008      	b.n	8006a3c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a2a:	f7fb ff8d 	bl	8002948 <HAL_GetTick>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d901      	bls.n	8006a3c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8006a38:	2303      	movs	r3, #3
 8006a3a:	e0da      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006a3c:	4b6f      	ldr	r3, [pc, #444]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d1f0      	bne.n	8006a2a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a48:	4b6c      	ldr	r3, [pc, #432]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a4c:	4b6c      	ldr	r3, [pc, #432]	; (8006c00 <HAL_RCC_OscConfig+0x750>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a58:	0112      	lsls	r2, r2, #4
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	4967      	ldr	r1, [pc, #412]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	628b      	str	r3, [r1, #40]	; 0x28
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	3b01      	subs	r3, #1
 8006a68:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a70:	3b01      	subs	r3, #1
 8006a72:	025b      	lsls	r3, r3, #9
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	041b      	lsls	r3, r3, #16
 8006a80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006a84:	431a      	orrs	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	061b      	lsls	r3, r3, #24
 8006a8e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006a92:	495a      	ldr	r1, [pc, #360]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a94:	4313      	orrs	r3, r2
 8006a96:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006a98:	4b58      	ldr	r3, [pc, #352]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a9c:	4a57      	ldr	r2, [pc, #348]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006a9e:	f023 0301 	bic.w	r3, r3, #1
 8006aa2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006aa4:	4b55      	ldr	r3, [pc, #340]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006aa8:	4b56      	ldr	r3, [pc, #344]	; (8006c04 <HAL_RCC_OscConfig+0x754>)
 8006aaa:	4013      	ands	r3, r2
 8006aac:	687a      	ldr	r2, [r7, #4]
 8006aae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006ab0:	00d2      	lsls	r2, r2, #3
 8006ab2:	4952      	ldr	r1, [pc, #328]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006ab8:	4b50      	ldr	r3, [pc, #320]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	f023 020c 	bic.w	r2, r3, #12
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	494d      	ldr	r1, [pc, #308]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006aca:	4b4c      	ldr	r3, [pc, #304]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ace:	f023 0202 	bic.w	r2, r3, #2
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad6:	4949      	ldr	r1, [pc, #292]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006adc:	4b47      	ldr	r3, [pc, #284]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae0:	4a46      	ldr	r2, [pc, #280]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ae8:	4b44      	ldr	r3, [pc, #272]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aec:	4a43      	ldr	r2, [pc, #268]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006af2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006af4:	4b41      	ldr	r3, [pc, #260]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af8:	4a40      	ldr	r2, [pc, #256]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006afa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006afe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006b00:	4b3e      	ldr	r3, [pc, #248]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b04:	4a3d      	ldr	r2, [pc, #244]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b0c:	4b3b      	ldr	r3, [pc, #236]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3a      	ldr	r2, [pc, #232]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b18:	f7fb ff16 	bl	8002948 <HAL_GetTick>
 8006b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b1e:	e008      	b.n	8006b32 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b20:	f7fb ff12 	bl	8002948 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	2b02      	cmp	r3, #2
 8006b2c:	d901      	bls.n	8006b32 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8006b2e:	2303      	movs	r3, #3
 8006b30:	e05f      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006b32:	4b32      	ldr	r3, [pc, #200]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d0f0      	beq.n	8006b20 <HAL_RCC_OscConfig+0x670>
 8006b3e:	e057      	b.n	8006bf0 <HAL_RCC_OscConfig+0x740>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b40:	4b2e      	ldr	r3, [pc, #184]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a2d      	ldr	r2, [pc, #180]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b4c:	f7fb fefc 	bl	8002948 <HAL_GetTick>
 8006b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b52:	e008      	b.n	8006b66 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b54:	f7fb fef8 	bl	8002948 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e045      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006b66:	4b25      	ldr	r3, [pc, #148]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f0      	bne.n	8006b54 <HAL_RCC_OscConfig+0x6a4>
 8006b72:	e03d      	b.n	8006bf0 <HAL_RCC_OscConfig+0x740>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006b74:	4b21      	ldr	r3, [pc, #132]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006b7a:	4b20      	ldr	r3, [pc, #128]	; (8006bfc <HAL_RCC_OscConfig+0x74c>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d031      	beq.n	8006bec <HAL_RCC_OscConfig+0x73c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f003 0203 	and.w	r2, r3, #3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d12a      	bne.n	8006bec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	091b      	lsrs	r3, r3, #4
 8006b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d122      	bne.n	8006bec <HAL_RCC_OscConfig+0x73c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d11a      	bne.n	8006bec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	0a5b      	lsrs	r3, r3, #9
 8006bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bc2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d111      	bne.n	8006bec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d108      	bne.n	8006bec <HAL_RCC_OscConfig+0x73c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	0e1b      	lsrs	r3, r3, #24
 8006bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d001      	beq.n	8006bf0 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <HAL_RCC_OscConfig+0x742>
      }
    }
  }
  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3730      	adds	r7, #48	; 0x30
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	58024400 	.word	0x58024400
 8006c00:	fffffc0c 	.word	0xfffffc0c
 8006c04:	ffff0007 	.word	0xffff0007

08006c08 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d101      	bne.n	8006c1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e19c      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c1c:	4b8a      	ldr	r3, [pc, #552]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 030f 	and.w	r3, r3, #15
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d910      	bls.n	8006c4c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c2a:	4b87      	ldr	r3, [pc, #540]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f023 020f 	bic.w	r2, r3, #15
 8006c32:	4985      	ldr	r1, [pc, #532]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3a:	4b83      	ldr	r3, [pc, #524]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 030f 	and.w	r3, r3, #15
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d001      	beq.n	8006c4c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	e184      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0304 	and.w	r3, r3, #4
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d010      	beq.n	8006c7a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691a      	ldr	r2, [r3, #16]
 8006c5c:	4b7b      	ldr	r3, [pc, #492]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d908      	bls.n	8006c7a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006c68:	4b78      	ldr	r3, [pc, #480]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	4975      	ldr	r1, [pc, #468]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c76:	4313      	orrs	r3, r2
 8006c78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0308 	and.w	r3, r3, #8
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d010      	beq.n	8006ca8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	695a      	ldr	r2, [r3, #20]
 8006c8a:	4b70      	ldr	r3, [pc, #448]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c8c:	69db      	ldr	r3, [r3, #28]
 8006c8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d908      	bls.n	8006ca8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006c96:	4b6d      	ldr	r3, [pc, #436]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	496a      	ldr	r1, [pc, #424]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d010      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699a      	ldr	r2, [r3, #24]
 8006cb8:	4b64      	ldr	r3, [pc, #400]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006cba:	69db      	ldr	r3, [r3, #28]
 8006cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cc0:	429a      	cmp	r2, r3
 8006cc2:	d908      	bls.n	8006cd6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006cc4:	4b61      	ldr	r3, [pc, #388]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006cc6:	69db      	ldr	r3, [r3, #28]
 8006cc8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	699b      	ldr	r3, [r3, #24]
 8006cd0:	495e      	ldr	r1, [pc, #376]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d010      	beq.n	8006d04 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69da      	ldr	r2, [r3, #28]
 8006ce6:	4b59      	ldr	r3, [pc, #356]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d908      	bls.n	8006d04 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006cf2:	4b56      	ldr	r3, [pc, #344]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	69db      	ldr	r3, [r3, #28]
 8006cfe:	4953      	ldr	r1, [pc, #332]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d00:	4313      	orrs	r3, r2
 8006d02:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d010      	beq.n	8006d32 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	68da      	ldr	r2, [r3, #12]
 8006d14:	4b4d      	ldr	r3, [pc, #308]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	f003 030f 	and.w	r3, r3, #15
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d908      	bls.n	8006d32 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d20:	4b4a      	ldr	r3, [pc, #296]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f023 020f 	bic.w	r2, r3, #15
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	4947      	ldr	r1, [pc, #284]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d055      	beq.n	8006dea <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006d3e:	4b43      	ldr	r3, [pc, #268]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	4940      	ldr	r1, [pc, #256]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d107      	bne.n	8006d68 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d58:	4b3c      	ldr	r3, [pc, #240]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d121      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d64:	2301      	movs	r3, #1
 8006d66:	e0f6      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b03      	cmp	r3, #3
 8006d6e:	d107      	bne.n	8006d80 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d70:	4b36      	ldr	r3, [pc, #216]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d115      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e0ea      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d107      	bne.n	8006d98 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006d88:	4b30      	ldr	r3, [pc, #192]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d109      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e0de      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d98:	4b2c      	ldr	r3, [pc, #176]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	e0d6      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006da8:	4b28      	ldr	r3, [pc, #160]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f023 0207 	bic.w	r2, r3, #7
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	4925      	ldr	r1, [pc, #148]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dba:	f7fb fdc5 	bl	8002948 <HAL_GetTick>
 8006dbe:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dc0:	e00a      	b.n	8006dd8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc2:	f7fb fdc1 	bl	8002948 <HAL_GetTick>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	1ad3      	subs	r3, r2, r3
 8006dcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d901      	bls.n	8006dd8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e0be      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd8:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	00db      	lsls	r3, r3, #3
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d1eb      	bne.n	8006dc2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d010      	beq.n	8006e18 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d208      	bcs.n	8006e18 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e06:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	f023 020f 	bic.w	r2, r3, #15
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	490e      	ldr	r1, [pc, #56]	; (8006e4c <HAL_RCC_ClockConfig+0x244>)
 8006e14:	4313      	orrs	r3, r2
 8006e16:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e18:	4b0b      	ldr	r3, [pc, #44]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d214      	bcs.n	8006e50 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e26:	4b08      	ldr	r3, [pc, #32]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f023 020f 	bic.w	r2, r3, #15
 8006e2e:	4906      	ldr	r1, [pc, #24]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e36:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <HAL_RCC_ClockConfig+0x240>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 030f 	and.w	r3, r3, #15
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d005      	beq.n	8006e50 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e086      	b.n	8006f56 <HAL_RCC_ClockConfig+0x34e>
 8006e48:	52002000 	.word	0x52002000
 8006e4c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d010      	beq.n	8006e7e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691a      	ldr	r2, [r3, #16]
 8006e60:	4b3f      	ldr	r3, [pc, #252]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d208      	bcs.n	8006e7e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006e6c:	4b3c      	ldr	r3, [pc, #240]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	4939      	ldr	r1, [pc, #228]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0308 	and.w	r3, r3, #8
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d010      	beq.n	8006eac <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	695a      	ldr	r2, [r3, #20]
 8006e8e:	4b34      	ldr	r3, [pc, #208]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e90:	69db      	ldr	r3, [r3, #28]
 8006e92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e96:	429a      	cmp	r2, r3
 8006e98:	d208      	bcs.n	8006eac <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006e9a:	4b31      	ldr	r3, [pc, #196]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	492e      	ldr	r1, [pc, #184]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f003 0310 	and.w	r3, r3, #16
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d010      	beq.n	8006eda <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	699a      	ldr	r2, [r3, #24]
 8006ebc:	4b28      	ldr	r3, [pc, #160]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006ebe:	69db      	ldr	r3, [r3, #28]
 8006ec0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d208      	bcs.n	8006eda <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006ec8:	4b25      	ldr	r3, [pc, #148]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006eca:	69db      	ldr	r3, [r3, #28]
 8006ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	699b      	ldr	r3, [r3, #24]
 8006ed4:	4922      	ldr	r1, [pc, #136]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d010      	beq.n	8006f08 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	69da      	ldr	r2, [r3, #28]
 8006eea:	4b1d      	ldr	r3, [pc, #116]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d208      	bcs.n	8006f08 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006ef6:	4b1a      	ldr	r3, [pc, #104]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	69db      	ldr	r3, [r3, #28]
 8006f02:	4917      	ldr	r1, [pc, #92]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006f04:	4313      	orrs	r3, r2
 8006f06:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006f08:	f000 f834 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	4b14      	ldr	r3, [pc, #80]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006f10:	699b      	ldr	r3, [r3, #24]
 8006f12:	0a1b      	lsrs	r3, r3, #8
 8006f14:	f003 030f 	and.w	r3, r3, #15
 8006f18:	4912      	ldr	r1, [pc, #72]	; (8006f64 <HAL_RCC_ClockConfig+0x35c>)
 8006f1a:	5ccb      	ldrb	r3, [r1, r3]
 8006f1c:	f003 031f 	and.w	r3, r3, #31
 8006f20:	fa22 f303 	lsr.w	r3, r2, r3
 8006f24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006f26:	4b0e      	ldr	r3, [pc, #56]	; (8006f60 <HAL_RCC_ClockConfig+0x358>)
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	f003 030f 	and.w	r3, r3, #15
 8006f2e:	4a0d      	ldr	r2, [pc, #52]	; (8006f64 <HAL_RCC_ClockConfig+0x35c>)
 8006f30:	5cd3      	ldrb	r3, [r2, r3]
 8006f32:	f003 031f 	and.w	r3, r3, #31
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	fa22 f303 	lsr.w	r3, r2, r3
 8006f3c:	4a0a      	ldr	r2, [pc, #40]	; (8006f68 <HAL_RCC_ClockConfig+0x360>)
 8006f3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006f40:	4a0a      	ldr	r2, [pc, #40]	; (8006f6c <HAL_RCC_ClockConfig+0x364>)
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006f46:	4b0a      	ldr	r3, [pc, #40]	; (8006f70 <HAL_RCC_ClockConfig+0x368>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fa fdb6 	bl	8001abc <HAL_InitTick>
 8006f50:	4603      	mov	r3, r0
 8006f52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	3718      	adds	r7, #24
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bd80      	pop	{r7, pc}
 8006f5e:	bf00      	nop
 8006f60:	58024400 	.word	0x58024400
 8006f64:	0801e0b8 	.word	0x0801e0b8
 8006f68:	2400000c 	.word	0x2400000c
 8006f6c:	24000008 	.word	0x24000008
 8006f70:	24000010 	.word	0x24000010

08006f74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b089      	sub	sp, #36	; 0x24
 8006f78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f7a:	4bb3      	ldr	r3, [pc, #716]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f7c:	691b      	ldr	r3, [r3, #16]
 8006f7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f82:	2b18      	cmp	r3, #24
 8006f84:	f200 8155 	bhi.w	8007232 <HAL_RCC_GetSysClockFreq+0x2be>
 8006f88:	a201      	add	r2, pc, #4	; (adr r2, 8006f90 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8e:	bf00      	nop
 8006f90:	08006ff5 	.word	0x08006ff5
 8006f94:	08007233 	.word	0x08007233
 8006f98:	08007233 	.word	0x08007233
 8006f9c:	08007233 	.word	0x08007233
 8006fa0:	08007233 	.word	0x08007233
 8006fa4:	08007233 	.word	0x08007233
 8006fa8:	08007233 	.word	0x08007233
 8006fac:	08007233 	.word	0x08007233
 8006fb0:	0800701b 	.word	0x0800701b
 8006fb4:	08007233 	.word	0x08007233
 8006fb8:	08007233 	.word	0x08007233
 8006fbc:	08007233 	.word	0x08007233
 8006fc0:	08007233 	.word	0x08007233
 8006fc4:	08007233 	.word	0x08007233
 8006fc8:	08007233 	.word	0x08007233
 8006fcc:	08007233 	.word	0x08007233
 8006fd0:	08007021 	.word	0x08007021
 8006fd4:	08007233 	.word	0x08007233
 8006fd8:	08007233 	.word	0x08007233
 8006fdc:	08007233 	.word	0x08007233
 8006fe0:	08007233 	.word	0x08007233
 8006fe4:	08007233 	.word	0x08007233
 8006fe8:	08007233 	.word	0x08007233
 8006fec:	08007233 	.word	0x08007233
 8006ff0:	08007027 	.word	0x08007027
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ff4:	4b94      	ldr	r3, [pc, #592]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f003 0320 	and.w	r3, r3, #32
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d009      	beq.n	8007014 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007000:	4b91      	ldr	r3, [pc, #580]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	08db      	lsrs	r3, r3, #3
 8007006:	f003 0303 	and.w	r3, r3, #3
 800700a:	4a90      	ldr	r2, [pc, #576]	; (800724c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
 8007010:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007012:	e111      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007014:	4b8d      	ldr	r3, [pc, #564]	; (800724c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007016:	61bb      	str	r3, [r7, #24]
    break;
 8007018:	e10e      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800701a:	4b8d      	ldr	r3, [pc, #564]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800701c:	61bb      	str	r3, [r7, #24]
    break;
 800701e:	e10b      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007020:	4b8c      	ldr	r3, [pc, #560]	; (8007254 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007022:	61bb      	str	r3, [r7, #24]
    break;
 8007024:	e108      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007026:	4b88      	ldr	r3, [pc, #544]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007030:	4b85      	ldr	r3, [pc, #532]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007034:	091b      	lsrs	r3, r3, #4
 8007036:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800703a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800703c:	4b82      	ldr	r3, [pc, #520]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	f003 0301 	and.w	r3, r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007046:	4b80      	ldr	r3, [pc, #512]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	08db      	lsrs	r3, r3, #3
 800704c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	fb02 f303 	mul.w	r3, r2, r3
 8007056:	ee07 3a90 	vmov	s15, r3
 800705a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800705e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	2b00      	cmp	r3, #0
 8007066:	f000 80e1 	beq.w	800722c <HAL_RCC_GetSysClockFreq+0x2b8>
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	2b02      	cmp	r3, #2
 800706e:	f000 8083 	beq.w	8007178 <HAL_RCC_GetSysClockFreq+0x204>
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b02      	cmp	r3, #2
 8007076:	f200 80a1 	bhi.w	80071bc <HAL_RCC_GetSysClockFreq+0x248>
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_RCC_GetSysClockFreq+0x114>
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d056      	beq.n	8007134 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007086:	e099      	b.n	80071bc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007088:	4b6f      	ldr	r3, [pc, #444]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0320 	and.w	r3, r3, #32
 8007090:	2b00      	cmp	r3, #0
 8007092:	d02d      	beq.n	80070f0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007094:	4b6c      	ldr	r3, [pc, #432]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	08db      	lsrs	r3, r3, #3
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	4a6b      	ldr	r2, [pc, #428]	; (800724c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80070a0:	fa22 f303 	lsr.w	r3, r2, r3
 80070a4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	ee07 3a90 	vmov	s15, r3
 80070ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070be:	4b62      	ldr	r3, [pc, #392]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c6:	ee07 3a90 	vmov	s15, r3
 80070ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80070ee:	e087      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	ee07 3a90 	vmov	s15, r3
 80070f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800725c <HAL_RCC_GetSysClockFreq+0x2e8>
 80070fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007102:	4b51      	ldr	r3, [pc, #324]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710a:	ee07 3a90 	vmov	s15, r3
 800710e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007112:	ed97 6a02 	vldr	s12, [r7, #8]
 8007116:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 800711a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007122:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007126:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800712a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007132:	e065      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	ee07 3a90 	vmov	s15, r3
 800713a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800713e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007146:	4b40      	ldr	r3, [pc, #256]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800714e:	ee07 3a90 	vmov	s15, r3
 8007152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007156:	ed97 6a02 	vldr	s12, [r7, #8]
 800715a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 800715e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007166:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800716a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800716e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007172:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007176:	e043      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	ee07 3a90 	vmov	s15, r3
 800717e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007182:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007264 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800718a:	4b2f      	ldr	r3, [pc, #188]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800718c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007192:	ee07 3a90 	vmov	s15, r3
 8007196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800719a:	ed97 6a02 	vldr	s12, [r7, #8]
 800719e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071ba:	e021      	b.n	8007200 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007260 <HAL_RCC_GetSysClockFreq+0x2ec>
 80071ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071ce:	4b1e      	ldr	r3, [pc, #120]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80071d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071d6:	ee07 3a90 	vmov	s15, r3
 80071da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071de:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007258 <HAL_RCC_GetSysClockFreq+0x2e4>
 80071e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80071f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071fe:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007200:	4b11      	ldr	r3, [pc, #68]	; (8007248 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007204:	0a5b      	lsrs	r3, r3, #9
 8007206:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720a:	3301      	adds	r3, #1
 800720c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007218:	edd7 6a07 	vldr	s13, [r7, #28]
 800721c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007224:	ee17 3a90 	vmov	r3, s15
 8007228:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800722a:	e005      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800722c:	2300      	movs	r3, #0
 800722e:	61bb      	str	r3, [r7, #24]
    break;
 8007230:	e002      	b.n	8007238 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007232:	4b07      	ldr	r3, [pc, #28]	; (8007250 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007234:	61bb      	str	r3, [r7, #24]
    break;
 8007236:	bf00      	nop
  }

  return sysclockfreq;
 8007238:	69bb      	ldr	r3, [r7, #24]
}
 800723a:	4618      	mov	r0, r3
 800723c:	3724      	adds	r7, #36	; 0x24
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	58024400 	.word	0x58024400
 800724c:	03d09000 	.word	0x03d09000
 8007250:	003d0900 	.word	0x003d0900
 8007254:	007a1200 	.word	0x007a1200
 8007258:	46000000 	.word	0x46000000
 800725c:	4c742400 	.word	0x4c742400
 8007260:	4a742400 	.word	0x4a742400
 8007264:	4af42400 	.word	0x4af42400

08007268 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b082      	sub	sp, #8
 800726c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800726e:	f7ff fe81 	bl	8006f74 <HAL_RCC_GetSysClockFreq>
 8007272:	4602      	mov	r2, r0
 8007274:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	0a1b      	lsrs	r3, r3, #8
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	490f      	ldr	r1, [pc, #60]	; (80072bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007280:	5ccb      	ldrb	r3, [r1, r3]
 8007282:	f003 031f 	and.w	r3, r3, #31
 8007286:	fa22 f303 	lsr.w	r3, r2, r3
 800728a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <HAL_RCC_GetHCLKFreq+0x50>)
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	4a09      	ldr	r2, [pc, #36]	; (80072bc <HAL_RCC_GetHCLKFreq+0x54>)
 8007296:	5cd3      	ldrb	r3, [r2, r3]
 8007298:	f003 031f 	and.w	r3, r3, #31
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	fa22 f303 	lsr.w	r3, r2, r3
 80072a2:	4a07      	ldr	r2, [pc, #28]	; (80072c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072a4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80072a6:	4a07      	ldr	r2, [pc, #28]	; (80072c4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80072ac:	4b04      	ldr	r3, [pc, #16]	; (80072c0 <HAL_RCC_GetHCLKFreq+0x58>)
 80072ae:	681b      	ldr	r3, [r3, #0]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	58024400 	.word	0x58024400
 80072bc:	0801e0b8 	.word	0x0801e0b8
 80072c0:	2400000c 	.word	0x2400000c
 80072c4:	24000008 	.word	0x24000008

080072c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80072cc:	f7ff ffcc 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4b06      	ldr	r3, [pc, #24]	; (80072ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80072d4:	69db      	ldr	r3, [r3, #28]
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	4904      	ldr	r1, [pc, #16]	; (80072f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80072de:	5ccb      	ldrb	r3, [r1, r3]
 80072e0:	f003 031f 	and.w	r3, r3, #31
 80072e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	58024400 	.word	0x58024400
 80072f0:	0801e0b8 	.word	0x0801e0b8

080072f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80072f8:	f7ff ffb6 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80072fc:	4602      	mov	r2, r0
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	0a1b      	lsrs	r3, r3, #8
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	4904      	ldr	r1, [pc, #16]	; (800731c <HAL_RCC_GetPCLK2Freq+0x28>)
 800730a:	5ccb      	ldrb	r3, [r1, r3]
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007314:	4618      	mov	r0, r3
 8007316:	bd80      	pop	{r7, pc}
 8007318:	58024400 	.word	0x58024400
 800731c:	0801e0b8 	.word	0x0801e0b8

08007320 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	223f      	movs	r2, #63	; 0x3f
 800732e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007330:	4b1a      	ldr	r3, [pc, #104]	; (800739c <HAL_RCC_GetClockConfig+0x7c>)
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	f003 0207 	and.w	r2, r3, #7
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800733c:	4b17      	ldr	r3, [pc, #92]	; (800739c <HAL_RCC_GetClockConfig+0x7c>)
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007348:	4b14      	ldr	r3, [pc, #80]	; (800739c <HAL_RCC_GetClockConfig+0x7c>)
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	f003 020f 	and.w	r2, r3, #15
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007354:	4b11      	ldr	r3, [pc, #68]	; (800739c <HAL_RCC_GetClockConfig+0x7c>)
 8007356:	699b      	ldr	r3, [r3, #24]
 8007358:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007360:	4b0e      	ldr	r3, [pc, #56]	; (800739c <HAL_RCC_GetClockConfig+0x7c>)
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800736c:	4b0b      	ldr	r3, [pc, #44]	; (800739c <HAL_RCC_GetClockConfig+0x7c>)
 800736e:	69db      	ldr	r3, [r3, #28]
 8007370:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8007378:	4b08      	ldr	r3, [pc, #32]	; (800739c <HAL_RCC_GetClockConfig+0x7c>)
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007384:	4b06      	ldr	r3, [pc, #24]	; (80073a0 <HAL_RCC_GetClockConfig+0x80>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 020f 	and.w	r2, r3, #15
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	601a      	str	r2, [r3, #0]
}
 8007390:	bf00      	nop
 8007392:	370c      	adds	r7, #12
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	58024400 	.word	0x58024400
 80073a0:	52002000 	.word	0x52002000

080073a4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b086      	sub	sp, #24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80073ac:	2300      	movs	r3, #0
 80073ae:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80073b0:	2300      	movs	r3, #0
 80073b2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d03f      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073c8:	d02a      	beq.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80073ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80073ce:	d824      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073d4:	d018      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80073d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073da:	d81e      	bhi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d003      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80073e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073e4:	d007      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80073e6:	e018      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073e8:	4bab      	ldr	r3, [pc, #684]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073ec:	4aaa      	ldr	r2, [pc, #680]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80073ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80073f4:	e015      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	3304      	adds	r3, #4
 80073fa:	2102      	movs	r1, #2
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 f989 	bl	8008714 <RCCEx_PLL2_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007406:	e00c      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3324      	adds	r3, #36	; 0x24
 800740c:	2102      	movs	r1, #2
 800740e:	4618      	mov	r0, r3
 8007410:	f001 fa32 	bl	8008878 <RCCEx_PLL3_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007418:	e003      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	75fb      	strb	r3, [r7, #23]
      break;
 800741e:	e000      	b.n	8007422 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007420:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007422:	7dfb      	ldrb	r3, [r7, #23]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007428:	4b9b      	ldr	r3, [pc, #620]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800742a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800742c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007434:	4998      	ldr	r1, [pc, #608]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007436:	4313      	orrs	r3, r2
 8007438:	650b      	str	r3, [r1, #80]	; 0x50
 800743a:	e001      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007448:	2b00      	cmp	r3, #0
 800744a:	d03d      	beq.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007450:	2b04      	cmp	r3, #4
 8007452:	d826      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	08007471 	.word	0x08007471
 8007460:	0800747f 	.word	0x0800747f
 8007464:	08007491 	.word	0x08007491
 8007468:	080074a9 	.word	0x080074a9
 800746c:	080074a9 	.word	0x080074a9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007470:	4b89      	ldr	r3, [pc, #548]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	4a88      	ldr	r2, [pc, #544]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800747a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800747c:	e015      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3304      	adds	r3, #4
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f001 f945 	bl	8008714 <RCCEx_PLL2_Config>
 800748a:	4603      	mov	r3, r0
 800748c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800748e:	e00c      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	3324      	adds	r3, #36	; 0x24
 8007494:	2100      	movs	r1, #0
 8007496:	4618      	mov	r0, r3
 8007498:	f001 f9ee 	bl	8008878 <RCCEx_PLL3_Config>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80074a0:	e003      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	75fb      	strb	r3, [r7, #23]
      break;
 80074a6:	e000      	b.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80074a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d109      	bne.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074b0:	4b79      	ldr	r3, [pc, #484]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b4:	f023 0207 	bic.w	r2, r3, #7
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074bc:	4976      	ldr	r1, [pc, #472]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	650b      	str	r3, [r1, #80]	; 0x50
 80074c2:	e001      	b.n	80074c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
 80074c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d051      	beq.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074da:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80074de:	d036      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80074e0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80074e4:	d830      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80074e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074ea:	d032      	beq.n	8007552 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80074ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80074f0:	d82a      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80074f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80074f6:	d02e      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80074f8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80074fc:	d824      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80074fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007502:	d018      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007508:	d81e      	bhi.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800750e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007512:	d007      	beq.n	8007524 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8007514:	e018      	b.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007516:	4b60      	ldr	r3, [pc, #384]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	4a5f      	ldr	r2, [pc, #380]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800751c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007520:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007522:	e019      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	3304      	adds	r3, #4
 8007528:	2100      	movs	r1, #0
 800752a:	4618      	mov	r0, r3
 800752c:	f001 f8f2 	bl	8008714 <RCCEx_PLL2_Config>
 8007530:	4603      	mov	r3, r0
 8007532:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007534:	e010      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	3324      	adds	r3, #36	; 0x24
 800753a:	2100      	movs	r1, #0
 800753c:	4618      	mov	r0, r3
 800753e:	f001 f99b 	bl	8008878 <RCCEx_PLL3_Config>
 8007542:	4603      	mov	r3, r0
 8007544:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007546:	e007      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	75fb      	strb	r3, [r7, #23]
      break;
 800754c:	e004      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800754e:	bf00      	nop
 8007550:	e002      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8007556:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007558:	7dfb      	ldrb	r3, [r7, #23]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d10a      	bne.n	8007574 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800755e:	4b4e      	ldr	r3, [pc, #312]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007562:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800756c:	494a      	ldr	r1, [pc, #296]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800756e:	4313      	orrs	r3, r2
 8007570:	658b      	str	r3, [r1, #88]	; 0x58
 8007572:	e001      	b.n	8007578 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007580:	2b00      	cmp	r3, #0
 8007582:	d051      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800758a:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 800758e:	d036      	beq.n	80075fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8007590:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8007594:	d830      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 8007596:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800759a:	d032      	beq.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 800759c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80075a0:	d82a      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80075a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075a6:	d02e      	beq.n	8007606 <HAL_RCCEx_PeriphCLKConfig+0x262>
 80075a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80075ac:	d824      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80075ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075b2:	d018      	beq.n	80075e6 <HAL_RCCEx_PeriphCLKConfig+0x242>
 80075b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80075b8:	d81e      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d003      	beq.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80075be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075c2:	d007      	beq.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80075c4:	e018      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075c6:	4b34      	ldr	r3, [pc, #208]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075ca:	4a33      	ldr	r2, [pc, #204]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80075cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075d2:	e019      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3304      	adds	r3, #4
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 f89a 	bl	8008714 <RCCEx_PLL2_Config>
 80075e0:	4603      	mov	r3, r0
 80075e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80075e4:	e010      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	3324      	adds	r3, #36	; 0x24
 80075ea:	2100      	movs	r1, #0
 80075ec:	4618      	mov	r0, r3
 80075ee:	f001 f943 	bl	8008878 <RCCEx_PLL3_Config>
 80075f2:	4603      	mov	r3, r0
 80075f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80075f6:	e007      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	75fb      	strb	r3, [r7, #23]
      break;
 80075fc:	e004      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80075fe:	bf00      	nop
 8007600:	e002      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007602:	bf00      	nop
 8007604:	e000      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 8007606:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10a      	bne.n	8007624 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800760e:	4b22      	ldr	r3, [pc, #136]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007612:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800761c:	491e      	ldr	r1, [pc, #120]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800761e:	4313      	orrs	r3, r2
 8007620:	658b      	str	r3, [r1, #88]	; 0x58
 8007622:	e001      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d035      	beq.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007638:	2b30      	cmp	r3, #48	; 0x30
 800763a:	d01c      	beq.n	8007676 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800763c:	2b30      	cmp	r3, #48	; 0x30
 800763e:	d817      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007640:	2b20      	cmp	r3, #32
 8007642:	d00c      	beq.n	800765e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8007644:	2b20      	cmp	r3, #32
 8007646:	d813      	bhi.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d016      	beq.n	800767a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
 800764c:	2b10      	cmp	r3, #16
 800764e:	d10f      	bne.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007650:	4b11      	ldr	r3, [pc, #68]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007654:	4a10      	ldr	r2, [pc, #64]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007656:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800765a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800765c:	e00e      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2d8>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	3304      	adds	r3, #4
 8007662:	2102      	movs	r1, #2
 8007664:	4618      	mov	r0, r3
 8007666:	f001 f855 	bl	8008714 <RCCEx_PLL2_Config>
 800766a:	4603      	mov	r3, r0
 800766c:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 800766e:	e005      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007670:	2301      	movs	r3, #1
 8007672:	75fb      	strb	r3, [r7, #23]
      break;
 8007674:	e002      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 8007676:	bf00      	nop
 8007678:	e000      	b.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x2d8>
      break;
 800767a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800767c:	7dfb      	ldrb	r3, [r7, #23]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d10c      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8007682:	4b05      	ldr	r3, [pc, #20]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007686:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800768e:	4902      	ldr	r1, [pc, #8]	; (8007698 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8007690:	4313      	orrs	r3, r2
 8007692:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007694:	e004      	b.n	80076a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8007696:	bf00      	nop
 8007698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
 800769e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d047      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b4:	d030      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0x374>
 80076b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076ba:	d82a      	bhi.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80076bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076c0:	d02c      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x378>
 80076c2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80076c6:	d824      	bhi.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80076c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076cc:	d018      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80076ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d2:	d81e      	bhi.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d003      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80076d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076dc:	d007      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80076de:	e018      	b.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e0:	4bac      	ldr	r3, [pc, #688]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80076e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e4:	4aab      	ldr	r2, [pc, #684]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80076e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076ec:	e017      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	3304      	adds	r3, #4
 80076f2:	2100      	movs	r1, #0
 80076f4:	4618      	mov	r0, r3
 80076f6:	f001 f80d 	bl	8008714 <RCCEx_PLL2_Config>
 80076fa:	4603      	mov	r3, r0
 80076fc:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80076fe:	e00e      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	3324      	adds	r3, #36	; 0x24
 8007704:	2100      	movs	r1, #0
 8007706:	4618      	mov	r0, r3
 8007708:	f001 f8b6 	bl	8008878 <RCCEx_PLL3_Config>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007710:	e005      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	75fb      	strb	r3, [r7, #23]
      break;
 8007716:	e002      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 8007718:	bf00      	nop
 800771a:	e000      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 800771c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007724:	4b9b      	ldr	r3, [pc, #620]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007730:	4998      	ldr	r1, [pc, #608]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007732:	4313      	orrs	r3, r2
 8007734:	650b      	str	r3, [r1, #80]	; 0x50
 8007736:	e001      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d049      	beq.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800774c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007750:	d02e      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8007752:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007756:	d828      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007758:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800775c:	d02a      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x410>
 800775e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007762:	d822      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007764:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007768:	d026      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x414>
 800776a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800776e:	d81c      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 8007770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007774:	d010      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8007776:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800777a:	d816      	bhi.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x406>
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01d      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007784:	d111      	bne.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	3304      	adds	r3, #4
 800778a:	2101      	movs	r1, #1
 800778c:	4618      	mov	r0, r3
 800778e:	f000 ffc1 	bl	8008714 <RCCEx_PLL2_Config>
 8007792:	4603      	mov	r3, r0
 8007794:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007796:	e012      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3324      	adds	r3, #36	; 0x24
 800779c:	2101      	movs	r1, #1
 800779e:	4618      	mov	r0, r3
 80077a0:	f001 f86a 	bl	8008878 <RCCEx_PLL3_Config>
 80077a4:	4603      	mov	r3, r0
 80077a6:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80077a8:	e009      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	75fb      	strb	r3, [r7, #23]
      break;
 80077ae:	e006      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80077b0:	bf00      	nop
 80077b2:	e004      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80077b4:	bf00      	nop
 80077b6:	e002      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80077b8:	bf00      	nop
 80077ba:	e000      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 80077bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077be:	7dfb      	ldrb	r3, [r7, #23]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d109      	bne.n	80077d8 <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80077c4:	4b73      	ldr	r3, [pc, #460]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80077c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077d0:	4970      	ldr	r1, [pc, #448]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80077d2:	4313      	orrs	r3, r2
 80077d4:	650b      	str	r3, [r1, #80]	; 0x50
 80077d6:	e001      	b.n	80077dc <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d8:	7dfb      	ldrb	r3, [r7, #23]
 80077da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d04b      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80077ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077f2:	d02e      	beq.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80077f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80077f8:	d828      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80077fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077fe:	d02a      	beq.n	8007856 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007804:	d822      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007806:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800780a:	d026      	beq.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 800780c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007810:	d81c      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007812:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007816:	d010      	beq.n	800783a <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007818:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800781c:	d816      	bhi.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800781e:	2b00      	cmp	r3, #0
 8007820:	d01d      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8007822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007826:	d111      	bne.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	3304      	adds	r3, #4
 800782c:	2101      	movs	r1, #1
 800782e:	4618      	mov	r0, r3
 8007830:	f000 ff70 	bl	8008714 <RCCEx_PLL2_Config>
 8007834:	4603      	mov	r3, r0
 8007836:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007838:	e012      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	3324      	adds	r3, #36	; 0x24
 800783e:	2101      	movs	r1, #1
 8007840:	4618      	mov	r0, r3
 8007842:	f001 f819 	bl	8008878 <RCCEx_PLL3_Config>
 8007846:	4603      	mov	r3, r0
 8007848:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800784a:	e009      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800784c:	2301      	movs	r3, #1
 800784e:	75fb      	strb	r3, [r7, #23]
      break;
 8007850:	e006      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007852:	bf00      	nop
 8007854:	e004      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8007856:	bf00      	nop
 8007858:	e002      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800785a:	bf00      	nop
 800785c:	e000      	b.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800785e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007860:	7dfb      	ldrb	r3, [r7, #23]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10a      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007866:	4b4b      	ldr	r3, [pc, #300]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007874:	4947      	ldr	r1, [pc, #284]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007876:	4313      	orrs	r3, r2
 8007878:	658b      	str	r3, [r1, #88]	; 0x58
 800787a:	e001      	b.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
 800787e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d02f      	beq.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007894:	d00e      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x510>
 8007896:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800789a:	d814      	bhi.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800789c:	2b00      	cmp	r3, #0
 800789e:	d015      	beq.n	80078cc <HAL_RCCEx_PeriphCLKConfig+0x528>
 80078a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078a4:	d10f      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078a6:	4b3b      	ldr	r3, [pc, #236]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078aa:	4a3a      	ldr	r2, [pc, #232]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078b2:	e00c      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	3304      	adds	r3, #4
 80078b8:	2101      	movs	r1, #1
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 ff2a 	bl	8008714 <RCCEx_PLL2_Config>
 80078c0:	4603      	mov	r3, r0
 80078c2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80078c4:	e003      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ca:	e000      	b.n	80078ce <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80078cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078ce:	7dfb      	ldrb	r3, [r7, #23]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d109      	bne.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80078d4:	4b2f      	ldr	r3, [pc, #188]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078d8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078e0:	492c      	ldr	r1, [pc, #176]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	650b      	str	r3, [r1, #80]	; 0x50
 80078e6:	e001      	b.n	80078ec <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d032      	beq.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d81b      	bhi.n	8007938 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8007900:	a201      	add	r2, pc, #4	; (adr r2, 8007908 <HAL_RCCEx_PeriphCLKConfig+0x564>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	0800793f 	.word	0x0800793f
 800790c:	08007919 	.word	0x08007919
 8007910:	08007927 	.word	0x08007927
 8007914:	0800793f 	.word	0x0800793f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007918:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800791a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800791c:	4a1d      	ldr	r2, [pc, #116]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 800791e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007922:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007924:	e00c      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	3304      	adds	r3, #4
 800792a:	2102      	movs	r1, #2
 800792c:	4618      	mov	r0, r3
 800792e:	f000 fef1 	bl	8008714 <RCCEx_PLL2_Config>
 8007932:	4603      	mov	r3, r0
 8007934:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007936:	e003      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x59c>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	75fb      	strb	r3, [r7, #23]
      break;
 800793c:	e000      	b.n	8007940 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 800793e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007940:	7dfb      	ldrb	r3, [r7, #23]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d109      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007946:	4b13      	ldr	r3, [pc, #76]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794a:	f023 0203 	bic.w	r2, r3, #3
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007952:	4910      	ldr	r1, [pc, #64]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x5f0>)
 8007954:	4313      	orrs	r3, r2
 8007956:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007958:	e001      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 808a 	beq.w	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800796c:	4b0a      	ldr	r3, [pc, #40]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a09      	ldr	r2, [pc, #36]	; (8007998 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8007972:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007976:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007978:	f7fa ffe6 	bl	8002948 <HAL_GetTick>
 800797c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800797e:	e00d      	b.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007980:	f7fa ffe2 	bl	8002948 <HAL_GetTick>
 8007984:	4602      	mov	r2, r0
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	1ad3      	subs	r3, r2, r3
 800798a:	2b64      	cmp	r3, #100	; 0x64
 800798c:	d906      	bls.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      {
        ret = HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	75fb      	strb	r3, [r7, #23]
        break;
 8007992:	e009      	b.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8007994:	58024400 	.word	0x58024400
 8007998:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800799c:	4bb9      	ldr	r3, [pc, #740]	; (8007c84 <HAL_RCCEx_PeriphCLKConfig+0x8e0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d0eb      	beq.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      }
    }

    if(ret == HAL_OK)
 80079a8:	7dfb      	ldrb	r3, [r7, #23]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d166      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80079ae:	4bb6      	ldr	r3, [pc, #728]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079b8:	4053      	eors	r3, r2
 80079ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d013      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x646>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079c2:	4bb1      	ldr	r3, [pc, #708]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80079cc:	4bae      	ldr	r3, [pc, #696]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d0:	4aad      	ldr	r2, [pc, #692]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80079d8:	4bab      	ldr	r3, [pc, #684]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079dc:	4aaa      	ldr	r2, [pc, #680]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80079e4:	4aa8      	ldr	r2, [pc, #672]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80079f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079f4:	d115      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079f6:	f7fa ffa7 	bl	8002948 <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80079fc:	e00b      	b.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x672>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079fe:	f7fa ffa3 	bl	8002948 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d902      	bls.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x672>
          {
            ret = HAL_TIMEOUT;
 8007a10:	2303      	movs	r3, #3
 8007a12:	75fb      	strb	r3, [r7, #23]
            break;
 8007a14:	e005      	b.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x67e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007a16:	4b9c      	ldr	r3, [pc, #624]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1a:	f003 0302 	and.w	r3, r3, #2
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d0ed      	beq.n	80079fe <HAL_RCCEx_PeriphCLKConfig+0x65a>
          }
        }
      }

      if(ret == HAL_OK)
 8007a22:	7dfb      	ldrb	r3, [r7, #23]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d126      	bne.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a36:	d10d      	bne.n	8007a54 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
 8007a38:	4b93      	ldr	r3, [pc, #588]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a46:	0919      	lsrs	r1, r3, #4
 8007a48:	4b90      	ldr	r3, [pc, #576]	; (8007c8c <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8007a4a:	400b      	ands	r3, r1
 8007a4c:	498e      	ldr	r1, [pc, #568]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a4e:	4313      	orrs	r3, r2
 8007a50:	610b      	str	r3, [r1, #16]
 8007a52:	e005      	b.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 8007a54:	4b8c      	ldr	r3, [pc, #560]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a56:	691b      	ldr	r3, [r3, #16]
 8007a58:	4a8b      	ldr	r2, [pc, #556]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007a5e:	6113      	str	r3, [r2, #16]
 8007a60:	4b89      	ldr	r3, [pc, #548]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a6e:	4986      	ldr	r1, [pc, #536]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	670b      	str	r3, [r1, #112]	; 0x70
 8007a74:	e004      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	75bb      	strb	r3, [r7, #22]
 8007a7a:	e001      	b.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x6dc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7c:	7dfb      	ldrb	r3, [r7, #23]
 8007a7e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0301 	and.w	r3, r3, #1
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d07e      	beq.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a90:	2b28      	cmp	r3, #40	; 0x28
 8007a92:	d867      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
 8007a94:	a201      	add	r2, pc, #4	; (adr r2, 8007a9c <HAL_RCCEx_PeriphCLKConfig+0x6f8>)
 8007a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9a:	bf00      	nop
 8007a9c:	08007b6b 	.word	0x08007b6b
 8007aa0:	08007b65 	.word	0x08007b65
 8007aa4:	08007b65 	.word	0x08007b65
 8007aa8:	08007b65 	.word	0x08007b65
 8007aac:	08007b65 	.word	0x08007b65
 8007ab0:	08007b65 	.word	0x08007b65
 8007ab4:	08007b65 	.word	0x08007b65
 8007ab8:	08007b65 	.word	0x08007b65
 8007abc:	08007b41 	.word	0x08007b41
 8007ac0:	08007b65 	.word	0x08007b65
 8007ac4:	08007b65 	.word	0x08007b65
 8007ac8:	08007b65 	.word	0x08007b65
 8007acc:	08007b65 	.word	0x08007b65
 8007ad0:	08007b65 	.word	0x08007b65
 8007ad4:	08007b65 	.word	0x08007b65
 8007ad8:	08007b65 	.word	0x08007b65
 8007adc:	08007b53 	.word	0x08007b53
 8007ae0:	08007b65 	.word	0x08007b65
 8007ae4:	08007b65 	.word	0x08007b65
 8007ae8:	08007b65 	.word	0x08007b65
 8007aec:	08007b65 	.word	0x08007b65
 8007af0:	08007b65 	.word	0x08007b65
 8007af4:	08007b65 	.word	0x08007b65
 8007af8:	08007b65 	.word	0x08007b65
 8007afc:	08007b6b 	.word	0x08007b6b
 8007b00:	08007b65 	.word	0x08007b65
 8007b04:	08007b65 	.word	0x08007b65
 8007b08:	08007b65 	.word	0x08007b65
 8007b0c:	08007b65 	.word	0x08007b65
 8007b10:	08007b65 	.word	0x08007b65
 8007b14:	08007b65 	.word	0x08007b65
 8007b18:	08007b65 	.word	0x08007b65
 8007b1c:	08007b6b 	.word	0x08007b6b
 8007b20:	08007b65 	.word	0x08007b65
 8007b24:	08007b65 	.word	0x08007b65
 8007b28:	08007b65 	.word	0x08007b65
 8007b2c:	08007b65 	.word	0x08007b65
 8007b30:	08007b65 	.word	0x08007b65
 8007b34:	08007b65 	.word	0x08007b65
 8007b38:	08007b65 	.word	0x08007b65
 8007b3c:	08007b6b 	.word	0x08007b6b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	3304      	adds	r3, #4
 8007b44:	2101      	movs	r1, #1
 8007b46:	4618      	mov	r0, r3
 8007b48:	f000 fde4 	bl	8008714 <RCCEx_PLL2_Config>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b50:	e00c      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7c8>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	3324      	adds	r3, #36	; 0x24
 8007b56:	2101      	movs	r1, #1
 8007b58:	4618      	mov	r0, r3
 8007b5a:	f000 fe8d 	bl	8008878 <RCCEx_PLL3_Config>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007b62:	e003      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	75fb      	strb	r3, [r7, #23]
      break;
 8007b68:	e000      	b.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
      break;
 8007b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b6c:	7dfb      	ldrb	r3, [r7, #23]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d109      	bne.n	8007b86 <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007b72:	4b45      	ldr	r3, [pc, #276]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b76:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7e:	4942      	ldr	r1, [pc, #264]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	654b      	str	r3, [r1, #84]	; 0x54
 8007b84:	e001      	b.n	8007b8a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b86:	7dfb      	ldrb	r3, [r7, #23]
 8007b88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d037      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x862>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9a:	2b05      	cmp	r3, #5
 8007b9c:	d820      	bhi.n	8007be0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 8007b9e:	a201      	add	r2, pc, #4	; (adr r2, 8007ba4 <HAL_RCCEx_PeriphCLKConfig+0x800>)
 8007ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba4:	08007be7 	.word	0x08007be7
 8007ba8:	08007bbd 	.word	0x08007bbd
 8007bac:	08007bcf 	.word	0x08007bcf
 8007bb0:	08007be7 	.word	0x08007be7
 8007bb4:	08007be7 	.word	0x08007be7
 8007bb8:	08007be7 	.word	0x08007be7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	3304      	adds	r3, #4
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fda6 	bl	8008714 <RCCEx_PLL2_Config>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bcc:	e00c      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x844>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3324      	adds	r3, #36	; 0x24
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	f000 fe4f 	bl	8008878 <RCCEx_PLL3_Config>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007bde:	e003      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	75fb      	strb	r3, [r7, #23]
      break;
 8007be4:	e000      	b.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x844>
      break;
 8007be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007be8:	7dfb      	ldrb	r3, [r7, #23]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d109      	bne.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007bee:	4b26      	ldr	r3, [pc, #152]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	f023 0207 	bic.w	r2, r3, #7
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bfa:	4923      	ldr	r1, [pc, #140]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	654b      	str	r3, [r1, #84]	; 0x54
 8007c00:	e001      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x862>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c02:	7dfb      	ldrb	r3, [r7, #23]
 8007c04:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0304 	and.w	r3, r3, #4
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d040      	beq.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c18:	2b05      	cmp	r3, #5
 8007c1a:	d821      	bhi.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <HAL_RCCEx_PeriphCLKConfig+0x880>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c67 	.word	0x08007c67
 8007c28:	08007c3d 	.word	0x08007c3d
 8007c2c:	08007c4f 	.word	0x08007c4f
 8007c30:	08007c67 	.word	0x08007c67
 8007c34:	08007c67 	.word	0x08007c67
 8007c38:	08007c67 	.word	0x08007c67
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	3304      	adds	r3, #4
 8007c40:	2101      	movs	r1, #1
 8007c42:	4618      	mov	r0, r3
 8007c44:	f000 fd66 	bl	8008714 <RCCEx_PLL2_Config>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c4c:	e00c      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	3324      	adds	r3, #36	; 0x24
 8007c52:	2101      	movs	r1, #1
 8007c54:	4618      	mov	r0, r3
 8007c56:	f000 fe0f 	bl	8008878 <RCCEx_PLL3_Config>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007c5e:	e003      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	75fb      	strb	r3, [r7, #23]
      break;
 8007c64:	e000      	b.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      break;
 8007c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d110      	bne.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c72:	f023 0207 	bic.w	r2, r3, #7
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c7c:	4902      	ldr	r1, [pc, #8]	; (8007c88 <HAL_RCCEx_PeriphCLKConfig+0x8e4>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	658b      	str	r3, [r1, #88]	; 0x58
 8007c82:	e007      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x8f0>
 8007c84:	58024800 	.word	0x58024800
 8007c88:	58024400 	.word	0x58024400
 8007c8c:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c90:	7dfb      	ldrb	r3, [r7, #23]
 8007c92:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f003 0320 	and.w	r3, r3, #32
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d04b      	beq.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x994>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007caa:	d02e      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x966>
 8007cac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cb0:	d828      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007cb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cb6:	d02a      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8007cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbc:	d822      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007cbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cc2:	d026      	beq.n	8007d12 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8007cc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007cc8:	d81c      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007cca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cce:	d010      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x94e>
 8007cd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd4:	d816      	bhi.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x960>
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01d      	beq.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x972>
 8007cda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cde:	d111      	bne.n	8007d04 <HAL_RCCEx_PeriphCLKConfig+0x960>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	3304      	adds	r3, #4
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f000 fd14 	bl	8008714 <RCCEx_PLL2_Config>
 8007cec:	4603      	mov	r3, r0
 8007cee:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007cf0:	e012      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x974>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	3324      	adds	r3, #36	; 0x24
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f000 fdbd 	bl	8008878 <RCCEx_PLL3_Config>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007d02:	e009      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]
      break;
 8007d08:	e006      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007d0a:	bf00      	nop
 8007d0c:	e004      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007d0e:	bf00      	nop
 8007d10:	e002      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007d12:	bf00      	nop
 8007d14:	e000      	b.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x974>
      break;
 8007d16:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d18:	7dfb      	ldrb	r3, [r7, #23]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d10a      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x990>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007d1e:	4bb2      	ldr	r3, [pc, #712]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d22:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d2c:	49ae      	ldr	r1, [pc, #696]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	654b      	str	r3, [r1, #84]	; 0x54
 8007d32:	e001      	b.n	8007d38 <HAL_RCCEx_PeriphCLKConfig+0x994>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d34:	7dfb      	ldrb	r3, [r7, #23]
 8007d36:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d04b      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xa38>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d4a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d4e:	d02e      	beq.n	8007dae <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8007d50:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007d54:	d828      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5a:	d02a      	beq.n	8007db2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8007d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d60:	d822      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007d62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d66:	d026      	beq.n	8007db6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8007d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007d6c:	d81c      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007d6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d72:	d010      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
 8007d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d78:	d816      	bhi.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01d      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8007d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d82:	d111      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	3304      	adds	r3, #4
 8007d88:	2100      	movs	r1, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f000 fcc2 	bl	8008714 <RCCEx_PLL2_Config>
 8007d90:	4603      	mov	r3, r0
 8007d92:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007d94:	e012      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa18>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3324      	adds	r3, #36	; 0x24
 8007d9a:	2102      	movs	r1, #2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f000 fd6b 	bl	8008878 <RCCEx_PLL3_Config>
 8007da2:	4603      	mov	r3, r0
 8007da4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007da6:	e009      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007da8:	2301      	movs	r3, #1
 8007daa:	75fb      	strb	r3, [r7, #23]
      break;
 8007dac:	e006      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007dae:	bf00      	nop
 8007db0:	e004      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007db2:	bf00      	nop
 8007db4:	e002      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007db6:	bf00      	nop
 8007db8:	e000      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0xa18>
      break;
 8007dba:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dbc:	7dfb      	ldrb	r3, [r7, #23]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10a      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0xa34>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007dc2:	4b89      	ldr	r3, [pc, #548]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dd0:	4985      	ldr	r1, [pc, #532]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	658b      	str	r3, [r1, #88]	; 0x58
 8007dd6:	e001      	b.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0xa38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dd8:	7dfb      	ldrb	r3, [r7, #23]
 8007dda:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d04b      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dee:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007df2:	d02e      	beq.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8007df4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007df8:	d828      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007dfe:	d02a      	beq.n	8007e56 <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8007e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e04:	d822      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007e06:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e0a:	d026      	beq.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8007e0c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007e10:	d81c      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007e12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e16:	d010      	beq.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xa96>
 8007e18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e1c:	d816      	bhi.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d01d      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0xaba>
 8007e22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e26:	d111      	bne.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	2100      	movs	r1, #0
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 fc70 	bl	8008714 <RCCEx_PLL2_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e38:	e012      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xabc>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	3324      	adds	r3, #36	; 0x24
 8007e3e:	2102      	movs	r1, #2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fd19 	bl	8008878 <RCCEx_PLL3_Config>
 8007e46:	4603      	mov	r3, r0
 8007e48:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007e4a:	e009      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e50:	e006      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007e52:	bf00      	nop
 8007e54:	e004      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007e56:	bf00      	nop
 8007e58:	e002      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007e5a:	bf00      	nop
 8007e5c:	e000      	b.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xabc>
      break;
 8007e5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e60:	7dfb      	ldrb	r3, [r7, #23]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d10a      	bne.n	8007e7c <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007e66:	4b60      	ldr	r3, [pc, #384]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e74:	495c      	ldr	r1, [pc, #368]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	658b      	str	r3, [r1, #88]	; 0x58
 8007e7a:	e001      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0xadc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e7c:	7dfb      	ldrb	r3, [r7, #23]
 8007e7e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0308 	and.w	r3, r3, #8
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d018      	beq.n	8007ebe <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e94:	d10a      	bne.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	3324      	adds	r3, #36	; 0x24
 8007e9a:	2102      	movs	r1, #2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f000 fceb 	bl	8008878 <RCCEx_PLL3_Config>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d001      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8007eac:	4b4e      	ldr	r3, [pc, #312]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007eb8:	494b      	ldr	r1, [pc, #300]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007eba:	4313      	orrs	r3, r2
 8007ebc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f003 0310 	and.w	r3, r3, #16
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01a      	beq.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ed4:	d10a      	bne.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	3324      	adds	r3, #36	; 0x24
 8007eda:	2102      	movs	r1, #2
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fccb 	bl	8008878 <RCCEx_PLL3_Config>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007eec:	4b3e      	ldr	r3, [pc, #248]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	493b      	ldr	r1, [pc, #236]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d034      	beq.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f16:	d01d      	beq.n	8007f54 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8007f18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007f1c:	d817      	bhi.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8007f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f26:	d009      	beq.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8007f28:	e011      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	2100      	movs	r1, #0
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fbef 	bl	8008714 <RCCEx_PLL2_Config>
 8007f36:	4603      	mov	r3, r0
 8007f38:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f3a:	e00c      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	3324      	adds	r3, #36	; 0x24
 8007f40:	2102      	movs	r1, #2
 8007f42:	4618      	mov	r0, r3
 8007f44:	f000 fc98 	bl	8008878 <RCCEx_PLL3_Config>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007f4c:	e003      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f4e:	2301      	movs	r3, #1
 8007f50:	75fb      	strb	r3, [r7, #23]
      break;
 8007f52:	e000      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8007f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f56:	7dfb      	ldrb	r3, [r7, #23]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d10a      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007f5c:	4b22      	ldr	r3, [pc, #136]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007f6a:	491f      	ldr	r1, [pc, #124]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	658b      	str	r3, [r1, #88]	; 0x58
 8007f70:	e001      	b.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f72:	7dfb      	ldrb	r3, [r7, #23]
 8007f74:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d036      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f88:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f8c:	d01c      	beq.n	8007fc8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8007f8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007f92:	d816      	bhi.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007f94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f98:	d003      	beq.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007f9e:	d007      	beq.n	8007fb0 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8007fa0:	e00f      	b.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007fa2:	4b11      	ldr	r3, [pc, #68]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa6:	4a10      	ldr	r2, [pc, #64]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007fa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007fac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fae:	e00c      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3324      	adds	r3, #36	; 0x24
 8007fb4:	2101      	movs	r1, #1
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fc5e 	bl	8008878 <RCCEx_PLL3_Config>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007fc0:	e003      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	75fb      	strb	r3, [r7, #23]
      break;
 8007fc6:	e000      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8007fc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007fca:	7dfb      	ldrb	r3, [r7, #23]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10d      	bne.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0xc48>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007fd0:	4b05      	ldr	r3, [pc, #20]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007fde:	4902      	ldr	r1, [pc, #8]	; (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xc44>)
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	654b      	str	r3, [r1, #84]	; 0x54
 8007fe4:	e004      	b.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0xc4c>
 8007fe6:	bf00      	nop
 8007fe8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d029      	beq.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xcac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0xc68>
 8008004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008008:	d007      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800800a:	e00f      	b.n	800802c <HAL_RCCEx_PeriphCLKConfig+0xc88>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800800c:	4b61      	ldr	r3, [pc, #388]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	4a60      	ldr	r2, [pc, #384]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008012:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008016:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008018:	e00b      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	3304      	adds	r3, #4
 800801e:	2102      	movs	r1, #2
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fb77 	bl	8008714 <RCCEx_PLL2_Config>
 8008026:	4603      	mov	r3, r0
 8008028:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800802a:	e002      	b.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0xc8e>

    default:
      ret = HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	75fb      	strb	r3, [r7, #23]
      break;
 8008030:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d109      	bne.n	800804c <HAL_RCCEx_PeriphCLKConfig+0xca8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008038:	4b56      	ldr	r3, [pc, #344]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800803a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008044:	4953      	ldr	r1, [pc, #332]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008046:	4313      	orrs	r3, r2
 8008048:	64cb      	str	r3, [r1, #76]	; 0x4c
 800804a:	e001      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0xcac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
 800804e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00a      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xcce>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	3324      	adds	r3, #36	; 0x24
 8008060:	2102      	movs	r1, #2
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fc08 	bl	8008878 <RCCEx_PLL3_Config>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xcce>
    {
      status=HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800807a:	2b00      	cmp	r3, #0
 800807c:	d030      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008086:	d017      	beq.n	80080b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800808c:	d811      	bhi.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800808e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008092:	d013      	beq.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xd18>
 8008094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008098:	d80b      	bhi.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 800809a:	2b00      	cmp	r3, #0
 800809c:	d010      	beq.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xd1c>
 800809e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a2:	d106      	bne.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080a4:	4b3b      	ldr	r3, [pc, #236]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80080a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a8:	4a3a      	ldr	r2, [pc, #232]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80080aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80080b0:	e007      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
      break;
 80080b6:	e004      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80080b8:	bf00      	nop
 80080ba:	e002      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80080bc:	bf00      	nop
 80080be:	e000      	b.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
      break;
 80080c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080c2:	7dfb      	ldrb	r3, [r7, #23]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d109      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80080c8:	4b32      	ldr	r3, [pc, #200]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80080ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080d4:	492f      	ldr	r1, [pc, #188]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80080d6:	4313      	orrs	r3, r2
 80080d8:	654b      	str	r3, [r1, #84]	; 0x54
 80080da:	e001      	b.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080dc:	7dfb      	ldrb	r3, [r7, #23]
 80080de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d008      	beq.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80080ec:	4b29      	ldr	r3, [pc, #164]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80080ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f8:	4926      	ldr	r1, [pc, #152]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d008      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800810a:	4b22      	ldr	r3, [pc, #136]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800810c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800810e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008116:	491f      	ldr	r1, [pc, #124]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008118:	4313      	orrs	r3, r2
 800811a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008124:	2b00      	cmp	r3, #0
 8008126:	d00d      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008128:	4b1a      	ldr	r3, [pc, #104]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800812a:	691b      	ldr	r3, [r3, #16]
 800812c:	4a19      	ldr	r2, [pc, #100]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800812e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008132:	6113      	str	r3, [r2, #16]
 8008134:	4b17      	ldr	r3, [pc, #92]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008136:	691a      	ldr	r2, [r3, #16]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800813e:	4915      	ldr	r1, [pc, #84]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8008140:	4313      	orrs	r3, r2
 8008142:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2b00      	cmp	r3, #0
 800814a:	da08      	bge.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800814c:	4b11      	ldr	r3, [pc, #68]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800814e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008150:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008158:	490e      	ldr	r1, [pc, #56]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800815a:	4313      	orrs	r3, r2
 800815c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d009      	beq.n	800817e <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800816a:	4b0a      	ldr	r3, [pc, #40]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800816c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008178:	4906      	ldr	r1, [pc, #24]	; (8008194 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800817a:	4313      	orrs	r3, r2
 800817c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800817e:	7dbb      	ldrb	r3, [r7, #22]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8008184:	2300      	movs	r3, #0
 8008186:	e000      	b.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
}
 800818a:	4618      	mov	r0, r3
 800818c:	3718      	adds	r7, #24
 800818e:	46bd      	mov	sp, r7
 8008190:	bd80      	pop	{r7, pc}
 8008192:	bf00      	nop
 8008194:	58024400 	.word	0x58024400

08008198 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800819c:	f7ff f864 	bl	8007268 <HAL_RCC_GetHCLKFreq>
 80081a0:	4602      	mov	r2, r0
 80081a2:	4b06      	ldr	r3, [pc, #24]	; (80081bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80081a4:	6a1b      	ldr	r3, [r3, #32]
 80081a6:	091b      	lsrs	r3, r3, #4
 80081a8:	f003 0307 	and.w	r3, r3, #7
 80081ac:	4904      	ldr	r1, [pc, #16]	; (80081c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80081ae:	5ccb      	ldrb	r3, [r1, r3]
 80081b0:	f003 031f 	and.w	r3, r3, #31
 80081b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	bd80      	pop	{r7, pc}
 80081bc:	58024400 	.word	0x58024400
 80081c0:	0801e0b8 	.word	0x0801e0b8

080081c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b089      	sub	sp, #36	; 0x24
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80081cc:	4ba1      	ldr	r3, [pc, #644]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081d0:	f003 0303 	and.w	r3, r3, #3
 80081d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80081d6:	4b9f      	ldr	r3, [pc, #636]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081da:	0b1b      	lsrs	r3, r3, #12
 80081dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80081e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80081e2:	4b9c      	ldr	r3, [pc, #624]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e6:	091b      	lsrs	r3, r3, #4
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80081ee:	4b99      	ldr	r3, [pc, #612]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f2:	08db      	lsrs	r3, r3, #3
 80081f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80081f8:	693a      	ldr	r2, [r7, #16]
 80081fa:	fb02 f303 	mul.w	r3, r2, r3
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	f000 8111 	beq.w	8008434 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008212:	69bb      	ldr	r3, [r7, #24]
 8008214:	2b02      	cmp	r3, #2
 8008216:	f000 8083 	beq.w	8008320 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2b02      	cmp	r3, #2
 800821e:	f200 80a1 	bhi.w	8008364 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008222:	69bb      	ldr	r3, [r7, #24]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d003      	beq.n	8008230 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d056      	beq.n	80082dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800822e:	e099      	b.n	8008364 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008230:	4b88      	ldr	r3, [pc, #544]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f003 0320 	and.w	r3, r3, #32
 8008238:	2b00      	cmp	r3, #0
 800823a:	d02d      	beq.n	8008298 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800823c:	4b85      	ldr	r3, [pc, #532]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	08db      	lsrs	r3, r3, #3
 8008242:	f003 0303 	and.w	r3, r3, #3
 8008246:	4a84      	ldr	r2, [pc, #528]	; (8008458 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008248:	fa22 f303 	lsr.w	r3, r2, r3
 800824c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	ee07 3a90 	vmov	s15, r3
 8008254:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	ee07 3a90 	vmov	s15, r3
 800825e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008262:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008266:	4b7b      	ldr	r3, [pc, #492]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800826a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826e:	ee07 3a90 	vmov	s15, r3
 8008272:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008276:	ed97 6a03 	vldr	s12, [r7, #12]
 800827a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800827e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008282:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008286:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800828a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800828e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008292:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008296:	e087      	b.n	80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	ee07 3a90 	vmov	s15, r3
 800829e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008460 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80082a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082aa:	4b6a      	ldr	r3, [pc, #424]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082b2:	ee07 3a90 	vmov	s15, r3
 80082b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80082be:	eddf 5a67 	vldr	s11, [pc, #412]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80082ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80082da:	e065      	b.n	80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082ee:	4b59      	ldr	r3, [pc, #356]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f6:	ee07 3a90 	vmov	s15, r3
 80082fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008302:	eddf 5a56 	vldr	s11, [pc, #344]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008306:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800830a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800830e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008312:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800831a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800831e:	e043      	b.n	80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	ee07 3a90 	vmov	s15, r3
 8008326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800832a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008468 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800832e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008332:	4b48      	ldr	r3, [pc, #288]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008342:	ed97 6a03 	vldr	s12, [r7, #12]
 8008346:	eddf 5a45 	vldr	s11, [pc, #276]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800834a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800834e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008352:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008356:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800835a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800835e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008362:	e021      	b.n	80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	ee07 3a90 	vmov	s15, r3
 800836a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800836e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008464 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008376:	4b37      	ldr	r3, [pc, #220]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800837e:	ee07 3a90 	vmov	s15, r3
 8008382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008386:	ed97 6a03 	vldr	s12, [r7, #12]
 800838a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800845c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800838e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008396:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800839a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800839e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80083a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80083a8:	4b2a      	ldr	r3, [pc, #168]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ac:	0a5b      	lsrs	r3, r3, #9
 80083ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083b2:	ee07 3a90 	vmov	s15, r3
 80083b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80083c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083ce:	ee17 2a90 	vmov	r2, s15
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80083d6:	4b1f      	ldr	r3, [pc, #124]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083da:	0c1b      	lsrs	r3, r3, #16
 80083dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083e0:	ee07 3a90 	vmov	s15, r3
 80083e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80083ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80083f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80083f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80083f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80083fc:	ee17 2a90 	vmov	r2, s15
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008404:	4b13      	ldr	r3, [pc, #76]	; (8008454 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008408:	0e1b      	lsrs	r3, r3, #24
 800840a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800840e:	ee07 3a90 	vmov	s15, r3
 8008412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800841a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800841e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800842a:	ee17 2a90 	vmov	r2, s15
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008432:	e008      	b.n	8008446 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2200      	movs	r2, #0
 8008444:	609a      	str	r2, [r3, #8]
}
 8008446:	bf00      	nop
 8008448:	3724      	adds	r7, #36	; 0x24
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	58024400 	.word	0x58024400
 8008458:	03d09000 	.word	0x03d09000
 800845c:	46000000 	.word	0x46000000
 8008460:	4c742400 	.word	0x4c742400
 8008464:	4a742400 	.word	0x4a742400
 8008468:	4af42400 	.word	0x4af42400

0800846c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800846c:	b480      	push	{r7}
 800846e:	b089      	sub	sp, #36	; 0x24
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008474:	4ba1      	ldr	r3, [pc, #644]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008478:	f003 0303 	and.w	r3, r3, #3
 800847c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800847e:	4b9f      	ldr	r3, [pc, #636]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	0d1b      	lsrs	r3, r3, #20
 8008484:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008488:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800848a:	4b9c      	ldr	r3, [pc, #624]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800848c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848e:	0a1b      	lsrs	r3, r3, #8
 8008490:	f003 0301 	and.w	r3, r3, #1
 8008494:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8008496:	4b99      	ldr	r3, [pc, #612]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849a:	08db      	lsrs	r3, r3, #3
 800849c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80084a0:	693a      	ldr	r2, [r7, #16]
 80084a2:	fb02 f303 	mul.w	r3, r2, r3
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	f000 8111 	beq.w	80086dc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	2b02      	cmp	r3, #2
 80084be:	f000 8083 	beq.w	80085c8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80084c2:	69bb      	ldr	r3, [r7, #24]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	f200 80a1 	bhi.w	800860c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80084ca:	69bb      	ldr	r3, [r7, #24]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d003      	beq.n	80084d8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80084d0:	69bb      	ldr	r3, [r7, #24]
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d056      	beq.n	8008584 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80084d6:	e099      	b.n	800860c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084d8:	4b88      	ldr	r3, [pc, #544]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 0320 	and.w	r3, r3, #32
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d02d      	beq.n	8008540 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80084e4:	4b85      	ldr	r3, [pc, #532]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	08db      	lsrs	r3, r3, #3
 80084ea:	f003 0303 	and.w	r3, r3, #3
 80084ee:	4a84      	ldr	r2, [pc, #528]	; (8008700 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80084f0:	fa22 f303 	lsr.w	r3, r2, r3
 80084f4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	ee07 3a90 	vmov	s15, r3
 80084fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	ee07 3a90 	vmov	s15, r3
 8008506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800850a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800850e:	4b7b      	ldr	r3, [pc, #492]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008516:	ee07 3a90 	vmov	s15, r3
 800851a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800851e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008522:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800852a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800852e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800853a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800853e:	e087      	b.n	8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	ee07 3a90 	vmov	s15, r3
 8008546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800854a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008708 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800854e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008552:	4b6a      	ldr	r3, [pc, #424]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800855a:	ee07 3a90 	vmov	s15, r3
 800855e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008562:	ed97 6a03 	vldr	s12, [r7, #12]
 8008566:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800856a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800856e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800857a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800857e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008582:	e065      	b.n	8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800870c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008596:	4b59      	ldr	r3, [pc, #356]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800859e:	ee07 3a90 	vmov	s15, r3
 80085a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085c6:	e043      	b.n	8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	ee07 3a90 	vmov	s15, r3
 80085ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008710 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80085d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085da:	4b48      	ldr	r3, [pc, #288]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80085f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008606:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800860a:	e021      	b.n	8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	ee07 3a90 	vmov	s15, r3
 8008612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008616:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800870c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800861a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800861e:	4b37      	ldr	r3, [pc, #220]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008626:	ee07 3a90 	vmov	s15, r3
 800862a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800862e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008632:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008704 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800863a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800863e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800864a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800864e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008650:	4b2a      	ldr	r3, [pc, #168]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008654:	0a5b      	lsrs	r3, r3, #9
 8008656:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800865a:	ee07 3a90 	vmov	s15, r3
 800865e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008662:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008666:	ee37 7a87 	vadd.f32	s14, s15, s14
 800866a:	edd7 6a07 	vldr	s13, [r7, #28]
 800866e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008676:	ee17 2a90 	vmov	r2, s15
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800867e:	4b1f      	ldr	r3, [pc, #124]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	0c1b      	lsrs	r3, r3, #16
 8008684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008688:	ee07 3a90 	vmov	s15, r3
 800868c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008690:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008694:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008698:	edd7 6a07 	vldr	s13, [r7, #28]
 800869c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086a4:	ee17 2a90 	vmov	r2, s15
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80086ac:	4b13      	ldr	r3, [pc, #76]	; (80086fc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b0:	0e1b      	lsrs	r3, r3, #24
 80086b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086b6:	ee07 3a90 	vmov	s15, r3
 80086ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80086ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086d2:	ee17 2a90 	vmov	r2, s15
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80086da:	e008      	b.n	80086ee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	609a      	str	r2, [r3, #8]
}
 80086ee:	bf00      	nop
 80086f0:	3724      	adds	r7, #36	; 0x24
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr
 80086fa:	bf00      	nop
 80086fc:	58024400 	.word	0x58024400
 8008700:	03d09000 	.word	0x03d09000
 8008704:	46000000 	.word	0x46000000
 8008708:	4c742400 	.word	0x4c742400
 800870c:	4a742400 	.word	0x4a742400
 8008710:	4af42400 	.word	0x4af42400

08008714 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b084      	sub	sp, #16
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
 800871c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008722:	4b53      	ldr	r3, [pc, #332]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	2b03      	cmp	r3, #3
 800872c:	d101      	bne.n	8008732 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800872e:	2301      	movs	r3, #1
 8008730:	e099      	b.n	8008866 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008732:	4b4f      	ldr	r3, [pc, #316]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a4e      	ldr	r2, [pc, #312]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008738:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800873c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800873e:	f7fa f903 	bl	8002948 <HAL_GetTick>
 8008742:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008744:	e008      	b.n	8008758 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008746:	f7fa f8ff 	bl	8002948 <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d901      	bls.n	8008758 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e086      	b.n	8008866 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008758:	4b45      	ldr	r3, [pc, #276]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1f0      	bne.n	8008746 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008764:	4b42      	ldr	r3, [pc, #264]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008768:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	031b      	lsls	r3, r3, #12
 8008772:	493f      	ldr	r1, [pc, #252]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008774:	4313      	orrs	r3, r2
 8008776:	628b      	str	r3, [r1, #40]	; 0x28
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	3b01      	subs	r3, #1
 800877e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	3b01      	subs	r3, #1
 8008788:	025b      	lsls	r3, r3, #9
 800878a:	b29b      	uxth	r3, r3
 800878c:	431a      	orrs	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	3b01      	subs	r3, #1
 8008794:	041b      	lsls	r3, r3, #16
 8008796:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800879a:	431a      	orrs	r2, r3
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	3b01      	subs	r3, #1
 80087a2:	061b      	lsls	r3, r3, #24
 80087a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80087a8:	4931      	ldr	r1, [pc, #196]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80087ae:	4b30      	ldr	r3, [pc, #192]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	695b      	ldr	r3, [r3, #20]
 80087ba:	492d      	ldr	r1, [pc, #180]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087bc:	4313      	orrs	r3, r2
 80087be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80087c0:	4b2b      	ldr	r3, [pc, #172]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c4:	f023 0220 	bic.w	r2, r3, #32
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	699b      	ldr	r3, [r3, #24]
 80087cc:	4928      	ldr	r1, [pc, #160]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087ce:	4313      	orrs	r3, r2
 80087d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80087d2:	4b27      	ldr	r3, [pc, #156]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d6:	4a26      	ldr	r2, [pc, #152]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087d8:	f023 0310 	bic.w	r3, r3, #16
 80087dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80087de:	4b24      	ldr	r3, [pc, #144]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087e2:	4b24      	ldr	r3, [pc, #144]	; (8008874 <RCCEx_PLL2_Config+0x160>)
 80087e4:	4013      	ands	r3, r2
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	69d2      	ldr	r2, [r2, #28]
 80087ea:	00d2      	lsls	r2, r2, #3
 80087ec:	4920      	ldr	r1, [pc, #128]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80087f2:	4b1f      	ldr	r3, [pc, #124]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087f6:	4a1e      	ldr	r2, [pc, #120]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 80087f8:	f043 0310 	orr.w	r3, r3, #16
 80087fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d106      	bne.n	8008812 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008804:	4b1a      	ldr	r3, [pc, #104]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008808:	4a19      	ldr	r2, [pc, #100]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 800880a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800880e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008810:	e00f      	b.n	8008832 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d106      	bne.n	8008826 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008818:	4b15      	ldr	r3, [pc, #84]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 800881a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800881c:	4a14      	ldr	r2, [pc, #80]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 800881e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008822:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008824:	e005      	b.n	8008832 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008826:	4b12      	ldr	r3, [pc, #72]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	4a11      	ldr	r2, [pc, #68]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 800882c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008830:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008832:	4b0f      	ldr	r3, [pc, #60]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 8008838:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800883c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800883e:	f7fa f883 	bl	8002948 <HAL_GetTick>
 8008842:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008844:	e008      	b.n	8008858 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008846:	f7fa f87f 	bl	8002948 <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e006      	b.n	8008866 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008858:	4b05      	ldr	r3, [pc, #20]	; (8008870 <RCCEx_PLL2_Config+0x15c>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d0f0      	beq.n	8008846 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008864:	7bfb      	ldrb	r3, [r7, #15]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
 800886e:	bf00      	nop
 8008870:	58024400 	.word	0x58024400
 8008874:	ffff0007 	.word	0xffff0007

08008878 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b084      	sub	sp, #16
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
 8008880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008886:	4b53      	ldr	r3, [pc, #332]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888a:	f003 0303 	and.w	r3, r3, #3
 800888e:	2b03      	cmp	r3, #3
 8008890:	d101      	bne.n	8008896 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e099      	b.n	80089ca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008896:	4b4f      	ldr	r3, [pc, #316]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4a4e      	ldr	r2, [pc, #312]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800889c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088a2:	f7fa f851 	bl	8002948 <HAL_GetTick>
 80088a6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088a8:	e008      	b.n	80088bc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80088aa:	f7fa f84d 	bl	8002948 <HAL_GetTick>
 80088ae:	4602      	mov	r2, r0
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	1ad3      	subs	r3, r2, r3
 80088b4:	2b02      	cmp	r3, #2
 80088b6:	d901      	bls.n	80088bc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e086      	b.n	80089ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80088bc:	4b45      	ldr	r3, [pc, #276]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d1f0      	bne.n	80088aa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80088c8:	4b42      	ldr	r3, [pc, #264]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 80088ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088cc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	051b      	lsls	r3, r3, #20
 80088d6:	493f      	ldr	r1, [pc, #252]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 80088d8:	4313      	orrs	r3, r2
 80088da:	628b      	str	r3, [r1, #40]	; 0x28
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	3b01      	subs	r3, #1
 80088e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	3b01      	subs	r3, #1
 80088ec:	025b      	lsls	r3, r3, #9
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	431a      	orrs	r2, r3
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	3b01      	subs	r3, #1
 80088f8:	041b      	lsls	r3, r3, #16
 80088fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	691b      	ldr	r3, [r3, #16]
 8008904:	3b01      	subs	r3, #1
 8008906:	061b      	lsls	r3, r3, #24
 8008908:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800890c:	4931      	ldr	r1, [pc, #196]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800890e:	4313      	orrs	r3, r2
 8008910:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008912:	4b30      	ldr	r3, [pc, #192]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008916:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	695b      	ldr	r3, [r3, #20]
 800891e:	492d      	ldr	r1, [pc, #180]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008920:	4313      	orrs	r3, r2
 8008922:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008924:	4b2b      	ldr	r3, [pc, #172]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008928:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	4928      	ldr	r1, [pc, #160]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008932:	4313      	orrs	r3, r2
 8008934:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008936:	4b27      	ldr	r3, [pc, #156]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893a:	4a26      	ldr	r2, [pc, #152]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800893c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008942:	4b24      	ldr	r3, [pc, #144]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008944:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008946:	4b24      	ldr	r3, [pc, #144]	; (80089d8 <RCCEx_PLL3_Config+0x160>)
 8008948:	4013      	ands	r3, r2
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	69d2      	ldr	r2, [r2, #28]
 800894e:	00d2      	lsls	r2, r2, #3
 8008950:	4920      	ldr	r1, [pc, #128]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008952:	4313      	orrs	r3, r2
 8008954:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008956:	4b1f      	ldr	r3, [pc, #124]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	4a1e      	ldr	r2, [pc, #120]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800895c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008960:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d106      	bne.n	8008976 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008968:	4b1a      	ldr	r3, [pc, #104]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800896a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800896c:	4a19      	ldr	r2, [pc, #100]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800896e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008972:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008974:	e00f      	b.n	8008996 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d106      	bne.n	800898a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800897c:	4b15      	ldr	r3, [pc, #84]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800897e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008980:	4a14      	ldr	r2, [pc, #80]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008982:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008988:	e005      	b.n	8008996 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800898a:	4b12      	ldr	r3, [pc, #72]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800898c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800898e:	4a11      	ldr	r2, [pc, #68]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008990:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008994:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008996:	4b0f      	ldr	r3, [pc, #60]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4a0e      	ldr	r2, [pc, #56]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 800899c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089a2:	f7f9 ffd1 	bl	8002948 <HAL_GetTick>
 80089a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089a8:	e008      	b.n	80089bc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80089aa:	f7f9 ffcd 	bl	8002948 <HAL_GetTick>
 80089ae:	4602      	mov	r2, r0
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	1ad3      	subs	r3, r2, r3
 80089b4:	2b02      	cmp	r3, #2
 80089b6:	d901      	bls.n	80089bc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e006      	b.n	80089ca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80089bc:	4b05      	ldr	r3, [pc, #20]	; (80089d4 <RCCEx_PLL3_Config+0x15c>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d0f0      	beq.n	80089aa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80089c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop
 80089d4:	58024400 	.word	0x58024400
 80089d8:	ffff0007 	.word	0xffff0007

080089dc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d101      	bne.n	80089ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e0f1      	b.n	8008bd2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a78      	ldr	r2, [pc, #480]	; (8008bdc <HAL_SPI_Init+0x200>)
 80089fa:	4293      	cmp	r3, r2
 80089fc:	d00f      	beq.n	8008a1e <HAL_SPI_Init+0x42>
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a77      	ldr	r2, [pc, #476]	; (8008be0 <HAL_SPI_Init+0x204>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d00a      	beq.n	8008a1e <HAL_SPI_Init+0x42>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a75      	ldr	r2, [pc, #468]	; (8008be4 <HAL_SPI_Init+0x208>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d005      	beq.n	8008a1e <HAL_SPI_Init+0x42>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68db      	ldr	r3, [r3, #12]
 8008a16:	2b0f      	cmp	r3, #15
 8008a18:	d901      	bls.n	8008a1e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	e0d9      	b.n	8008bd2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fba2 	bl	8009168 <SPI_GetPacketSize>
 8008a24:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a6c      	ldr	r2, [pc, #432]	; (8008bdc <HAL_SPI_Init+0x200>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00c      	beq.n	8008a4a <HAL_SPI_Init+0x6e>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	4a6a      	ldr	r2, [pc, #424]	; (8008be0 <HAL_SPI_Init+0x204>)
 8008a36:	4293      	cmp	r3, r2
 8008a38:	d007      	beq.n	8008a4a <HAL_SPI_Init+0x6e>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	4a69      	ldr	r2, [pc, #420]	; (8008be4 <HAL_SPI_Init+0x208>)
 8008a40:	4293      	cmp	r3, r2
 8008a42:	d002      	beq.n	8008a4a <HAL_SPI_Init+0x6e>
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b08      	cmp	r3, #8
 8008a48:	d811      	bhi.n	8008a6e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008a4e:	4a63      	ldr	r2, [pc, #396]	; (8008bdc <HAL_SPI_Init+0x200>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d009      	beq.n	8008a68 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a61      	ldr	r2, [pc, #388]	; (8008be0 <HAL_SPI_Init+0x204>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d004      	beq.n	8008a68 <HAL_SPI_Init+0x8c>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a60      	ldr	r2, [pc, #384]	; (8008be4 <HAL_SPI_Init+0x208>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d104      	bne.n	8008a72 <HAL_SPI_Init+0x96>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b10      	cmp	r3, #16
 8008a6c:	d901      	bls.n	8008a72 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e0af      	b.n	8008bd2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7f8 ff70 	bl	800196c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008aae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008ab8:	d119      	bne.n	8008aee <HAL_SPI_Init+0x112>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ac2:	d103      	bne.n	8008acc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d008      	beq.n	8008ade <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10c      	bne.n	8008aee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008ad8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008adc:	d107      	bne.n	8008aee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	681a      	ldr	r2, [r3, #0]
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008aec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69da      	ldr	r2, [r3, #28]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af6:	431a      	orrs	r2, r3
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b00:	ea42 0103 	orr.w	r1, r2, r3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	430a      	orrs	r2, r1
 8008b0e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	431a      	orrs	r2, r3
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b1e:	431a      	orrs	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	431a      	orrs	r2, r3
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	431a      	orrs	r2, r3
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6a1b      	ldr	r3, [r3, #32]
 8008b36:	431a      	orrs	r2, r3
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	685b      	ldr	r3, [r3, #4]
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b42:	431a      	orrs	r2, r3
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	689b      	ldr	r3, [r3, #8]
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b4e:	ea42 0103 	orr.w	r1, r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d113      	bne.n	8008b8e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b78:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008b8c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f022 0201 	bic.w	r2, r2, #1
 8008b9c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	40013000 	.word	0x40013000
 8008be0:	40003800 	.word	0x40003800
 8008be4:	40003c00 	.word	0x40003c00

08008be8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b08a      	sub	sp, #40	; 0x28
 8008bec:	af02      	add	r7, sp, #8
 8008bee:	60f8      	str	r0, [r7, #12]
 8008bf0:	60b9      	str	r1, [r7, #8]
 8008bf2:	603b      	str	r3, [r7, #0]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	3320      	adds	r3, #32
 8008bfe:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008c00:	2300      	movs	r3, #0
 8008c02:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d101      	bne.n	8008c12 <HAL_SPI_Transmit+0x2a>
 8008c0e:	2302      	movs	r3, #2
 8008c10:	e1d7      	b.n	8008fc2 <HAL_SPI_Transmit+0x3da>
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008c1a:	f7f9 fe95 	bl	8002948 <HAL_GetTick>
 8008c1e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008c26:	b2db      	uxtb	r3, r3
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	d007      	beq.n	8008c3c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008c2c:	2302      	movs	r3, #2
 8008c2e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	2200      	movs	r2, #0
 8008c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c38:	7efb      	ldrb	r3, [r7, #27]
 8008c3a:	e1c2      	b.n	8008fc2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <HAL_SPI_Transmit+0x60>
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008c54:	7efb      	ldrb	r3, [r7, #27]
 8008c56:	e1b4      	b.n	8008fc2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2203      	movs	r2, #3
 8008c5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	68ba      	ldr	r2, [r7, #8]
 8008c6c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	88fa      	ldrh	r2, [r7, #6]
 8008c72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	88fa      	ldrh	r2, [r7, #6]
 8008c7a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2200      	movs	r2, #0
 8008c88:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	689b      	ldr	r3, [r3, #8]
 8008ca4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008ca8:	d107      	bne.n	8008cba <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008cb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	4b96      	ldr	r3, [pc, #600]	; (8008f1c <HAL_SPI_Transmit+0x334>)
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	88f9      	ldrh	r1, [r7, #6]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	6812      	ldr	r2, [r2, #0]
 8008cca:	430b      	orrs	r3, r1
 8008ccc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f042 0201 	orr.w	r2, r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ce6:	d107      	bne.n	8008cf8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cf6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	2b0f      	cmp	r3, #15
 8008cfe:	d947      	bls.n	8008d90 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008d00:	e03f      	b.n	8008d82 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b02      	cmp	r3, #2
 8008d0e:	d114      	bne.n	8008d3a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d20:	1d1a      	adds	r2, r3, #4
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	3b01      	subs	r3, #1
 8008d30:	b29a      	uxth	r2, r3
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008d38:	e023      	b.n	8008d82 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008d3a:	f7f9 fe05 	bl	8002948 <HAL_GetTick>
 8008d3e:	4602      	mov	r2, r0
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	1ad3      	subs	r3, r2, r3
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d803      	bhi.n	8008d52 <HAL_SPI_Transmit+0x16a>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d50:	d102      	bne.n	8008d58 <HAL_SPI_Transmit+0x170>
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d114      	bne.n	8008d82 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008d58:	68f8      	ldr	r0, [r7, #12]
 8008d5a:	f000 f937 	bl	8008fcc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	2200      	movs	r2, #0
 8008d62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	e11f      	b.n	8008fc2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1b9      	bne.n	8008d02 <HAL_SPI_Transmit+0x11a>
 8008d8e:	e0f2      	b.n	8008f76 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	68db      	ldr	r3, [r3, #12]
 8008d94:	2b07      	cmp	r3, #7
 8008d96:	f240 80e7 	bls.w	8008f68 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8008d9a:	e05d      	b.n	8008e58 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	695b      	ldr	r3, [r3, #20]
 8008da2:	f003 0302 	and.w	r3, r3, #2
 8008da6:	2b02      	cmp	r3, #2
 8008da8:	d132      	bne.n	8008e10 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008db0:	b29b      	uxth	r3, r3
 8008db2:	2b01      	cmp	r3, #1
 8008db4:	d918      	bls.n	8008de8 <HAL_SPI_Transmit+0x200>
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d014      	beq.n	8008de8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6812      	ldr	r2, [r2, #0]
 8008dc8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dce:	1d1a      	adds	r2, r3, #4
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008dda:	b29b      	uxth	r3, r3
 8008ddc:	3b02      	subs	r3, #2
 8008dde:	b29a      	uxth	r2, r3
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008de6:	e037      	b.n	8008e58 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dec:	881a      	ldrh	r2, [r3, #0]
 8008dee:	69fb      	ldr	r3, [r7, #28]
 8008df0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008df6:	1c9a      	adds	r2, r3, #2
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	3b01      	subs	r3, #1
 8008e06:	b29a      	uxth	r2, r3
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008e0e:	e023      	b.n	8008e58 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008e10:	f7f9 fd9a 	bl	8002948 <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	683a      	ldr	r2, [r7, #0]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d803      	bhi.n	8008e28 <HAL_SPI_Transmit+0x240>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e26:	d102      	bne.n	8008e2e <HAL_SPI_Transmit+0x246>
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d114      	bne.n	8008e58 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008e2e:	68f8      	ldr	r0, [r7, #12]
 8008e30:	f000 f8cc 	bl	8008fcc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008e42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008e54:	2303      	movs	r3, #3
 8008e56:	e0b4      	b.n	8008fc2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d19b      	bne.n	8008d9c <HAL_SPI_Transmit+0x1b4>
 8008e64:	e087      	b.n	8008f76 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	f003 0302 	and.w	r3, r3, #2
 8008e70:	2b02      	cmp	r3, #2
 8008e72:	d155      	bne.n	8008f20 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	2b03      	cmp	r3, #3
 8008e7e:	d918      	bls.n	8008eb2 <HAL_SPI_Transmit+0x2ca>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e84:	2b40      	cmp	r3, #64	; 0x40
 8008e86:	d914      	bls.n	8008eb2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6812      	ldr	r2, [r2, #0]
 8008e92:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e98:	1d1a      	adds	r2, r3, #4
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b04      	subs	r3, #4
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008eb0:	e05a      	b.n	8008f68 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d917      	bls.n	8008eee <HAL_SPI_Transmit+0x306>
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d013      	beq.n	8008eee <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008eca:	881a      	ldrh	r2, [r3, #0]
 8008ecc:	69fb      	ldr	r3, [r7, #28]
 8008ece:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed4:	1c9a      	adds	r2, r3, #2
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b02      	subs	r3, #2
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008eec:	e03c      	b.n	8008f68 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	3320      	adds	r3, #32
 8008ef8:	7812      	ldrb	r2, [r2, #0]
 8008efa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f00:	1c5a      	adds	r2, r3, #1
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008f18:	e026      	b.n	8008f68 <HAL_SPI_Transmit+0x380>
 8008f1a:	bf00      	nop
 8008f1c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008f20:	f7f9 fd12 	bl	8002948 <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d803      	bhi.n	8008f38 <HAL_SPI_Transmit+0x350>
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f36:	d102      	bne.n	8008f3e <HAL_SPI_Transmit+0x356>
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d114      	bne.n	8008f68 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 f844 	bl	8008fcc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f52:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e02c      	b.n	8008fc2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f47f af78 	bne.w	8008e66 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	2108      	movs	r1, #8
 8008f80:	68f8      	ldr	r0, [r7, #12]
 8008f82:	f000 f8c3 	bl	800910c <SPI_WaitOnFlagUntilTimeout>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d007      	beq.n	8008f9c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f92:	f043 0220 	orr.w	r2, r3, #32
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f000 f815 	bl	8008fcc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	2201      	movs	r2, #1
 8008fae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d001      	beq.n	8008fc0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008fc0:	7efb      	ldrb	r3, [r7, #27]
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3720      	adds	r7, #32
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop

08008fcc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	699a      	ldr	r2, [r3, #24]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f042 0208 	orr.w	r2, r2, #8
 8008fea:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	699a      	ldr	r2, [r3, #24]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f042 0210 	orr.w	r2, r2, #16
 8008ffa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	f022 0201 	bic.w	r2, r2, #1
 800900a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	6919      	ldr	r1, [r3, #16]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681a      	ldr	r2, [r3, #0]
 8009016:	4b3c      	ldr	r3, [pc, #240]	; (8009108 <SPI_CloseTransfer+0x13c>)
 8009018:	400b      	ands	r3, r1
 800901a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	689a      	ldr	r2, [r3, #8]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800902a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009032:	b2db      	uxtb	r3, r3
 8009034:	2b04      	cmp	r3, #4
 8009036:	d014      	beq.n	8009062 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f003 0320 	and.w	r3, r3, #32
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00f      	beq.n	8009062 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009048:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	699a      	ldr	r2, [r3, #24]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f042 0220 	orr.w	r2, r2, #32
 8009060:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009068:	b2db      	uxtb	r3, r3
 800906a:	2b03      	cmp	r3, #3
 800906c:	d014      	beq.n	8009098 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00f      	beq.n	8009098 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800907e:	f043 0204 	orr.w	r2, r3, #4
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	699a      	ldr	r2, [r3, #24]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009096:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d00f      	beq.n	80090c2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090a8:	f043 0201 	orr.w	r2, r3, #1
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	699a      	ldr	r2, [r3, #24]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090c0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00f      	beq.n	80090ec <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090d2:	f043 0208 	orr.w	r2, r3, #8
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	699a      	ldr	r2, [r3, #24]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090ea:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80090fc:	bf00      	nop
 80090fe:	3714      	adds	r7, #20
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	fffffc90 	.word	0xfffffc90

0800910c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	4613      	mov	r3, r2
 800911a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800911c:	e010      	b.n	8009140 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800911e:	f7f9 fc13 	bl	8002948 <HAL_GetTick>
 8009122:	4602      	mov	r2, r0
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	1ad3      	subs	r3, r2, r3
 8009128:	69ba      	ldr	r2, [r7, #24]
 800912a:	429a      	cmp	r2, r3
 800912c:	d803      	bhi.n	8009136 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800912e:	69bb      	ldr	r3, [r7, #24]
 8009130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009134:	d102      	bne.n	800913c <SPI_WaitOnFlagUntilTimeout+0x30>
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d101      	bne.n	8009140 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800913c:	2303      	movs	r3, #3
 800913e:	e00f      	b.n	8009160 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	695a      	ldr	r2, [r3, #20]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	4013      	ands	r3, r2
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	429a      	cmp	r2, r3
 800914e:	bf0c      	ite	eq
 8009150:	2301      	moveq	r3, #1
 8009152:	2300      	movne	r3, #0
 8009154:	b2db      	uxtb	r3, r3
 8009156:	461a      	mov	r2, r3
 8009158:	79fb      	ldrb	r3, [r7, #7]
 800915a:	429a      	cmp	r2, r3
 800915c:	d0df      	beq.n	800911e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800915e:	2300      	movs	r3, #0
}
 8009160:	4618      	mov	r0, r3
 8009162:	3710      	adds	r7, #16
 8009164:	46bd      	mov	sp, r7
 8009166:	bd80      	pop	{r7, pc}

08009168 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009168:	b480      	push	{r7}
 800916a:	b085      	sub	sp, #20
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009174:	095b      	lsrs	r3, r3, #5
 8009176:	3301      	adds	r3, #1
 8009178:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	3301      	adds	r3, #1
 8009180:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	3307      	adds	r3, #7
 8009186:	08db      	lsrs	r3, r3, #3
 8009188:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	68fa      	ldr	r2, [r7, #12]
 800918e:	fb02 f303 	mul.w	r3, r2, r3
}
 8009192:	4618      	mov	r0, r3
 8009194:	3714      	adds	r7, #20
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr

0800919e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b082      	sub	sp, #8
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d101      	bne.n	80091b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	e049      	b.n	8009244 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d106      	bne.n	80091ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2200      	movs	r2, #0
 80091c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f7f9 f909 	bl	80023dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2202      	movs	r2, #2
 80091ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	3304      	adds	r3, #4
 80091da:	4619      	mov	r1, r3
 80091dc:	4610      	mov	r0, r2
 80091de:	f000 fa81 	bl	80096e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	2201      	movs	r2, #1
 80091e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2201      	movs	r2, #1
 80091ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2201      	movs	r2, #1
 80091fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2201      	movs	r2, #1
 8009206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2201      	movs	r2, #1
 800921e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2201      	movs	r2, #1
 8009226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2201      	movs	r2, #1
 800923e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009242:	2300      	movs	r3, #0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800925a:	b2db      	uxtb	r3, r3
 800925c:	2b01      	cmp	r3, #1
 800925e:	d001      	beq.n	8009264 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009260:	2301      	movs	r3, #1
 8009262:	e056      	b.n	8009312 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a2b      	ldr	r2, [pc, #172]	; (8009320 <HAL_TIM_Base_Start+0xd4>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d02c      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800927e:	d027      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a27      	ldr	r2, [pc, #156]	; (8009324 <HAL_TIM_Base_Start+0xd8>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d022      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a26      	ldr	r2, [pc, #152]	; (8009328 <HAL_TIM_Base_Start+0xdc>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d01d      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a24      	ldr	r2, [pc, #144]	; (800932c <HAL_TIM_Base_Start+0xe0>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d018      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a23      	ldr	r2, [pc, #140]	; (8009330 <HAL_TIM_Base_Start+0xe4>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d013      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	4a21      	ldr	r2, [pc, #132]	; (8009334 <HAL_TIM_Base_Start+0xe8>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d00e      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	4a20      	ldr	r2, [pc, #128]	; (8009338 <HAL_TIM_Base_Start+0xec>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d009      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	4a1e      	ldr	r2, [pc, #120]	; (800933c <HAL_TIM_Base_Start+0xf0>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d004      	beq.n	80092d0 <HAL_TIM_Base_Start+0x84>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	4a1d      	ldr	r2, [pc, #116]	; (8009340 <HAL_TIM_Base_Start+0xf4>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d115      	bne.n	80092fc <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	689a      	ldr	r2, [r3, #8]
 80092d6:	4b1b      	ldr	r3, [pc, #108]	; (8009344 <HAL_TIM_Base_Start+0xf8>)
 80092d8:	4013      	ands	r3, r2
 80092da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2b06      	cmp	r3, #6
 80092e0:	d015      	beq.n	800930e <HAL_TIM_Base_Start+0xc2>
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092e8:	d011      	beq.n	800930e <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f042 0201 	orr.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80092fa:	e008      	b.n	800930e <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	681a      	ldr	r2, [r3, #0]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f042 0201 	orr.w	r2, r2, #1
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	e000      	b.n	8009310 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800930e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009310:	2300      	movs	r3, #0
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	40010000 	.word	0x40010000
 8009324:	40000400 	.word	0x40000400
 8009328:	40000800 	.word	0x40000800
 800932c:	40000c00 	.word	0x40000c00
 8009330:	40010400 	.word	0x40010400
 8009334:	40001800 	.word	0x40001800
 8009338:	40014000 	.word	0x40014000
 800933c:	4000e000 	.word	0x4000e000
 8009340:	4000e400 	.word	0x4000e400
 8009344:	00010007 	.word	0x00010007

08009348 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009348:	b480      	push	{r7}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009356:	b2db      	uxtb	r3, r3
 8009358:	2b01      	cmp	r3, #1
 800935a:	d001      	beq.n	8009360 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e05e      	b.n	800941e <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2202      	movs	r2, #2
 8009364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	68da      	ldr	r2, [r3, #12]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0201 	orr.w	r2, r2, #1
 8009376:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a2b      	ldr	r2, [pc, #172]	; (800942c <HAL_TIM_Base_Start_IT+0xe4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d02c      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800938a:	d027      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a27      	ldr	r2, [pc, #156]	; (8009430 <HAL_TIM_Base_Start_IT+0xe8>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d022      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a26      	ldr	r2, [pc, #152]	; (8009434 <HAL_TIM_Base_Start_IT+0xec>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d01d      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a24      	ldr	r2, [pc, #144]	; (8009438 <HAL_TIM_Base_Start_IT+0xf0>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d018      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a23      	ldr	r2, [pc, #140]	; (800943c <HAL_TIM_Base_Start_IT+0xf4>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d013      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a21      	ldr	r2, [pc, #132]	; (8009440 <HAL_TIM_Base_Start_IT+0xf8>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00e      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a20      	ldr	r2, [pc, #128]	; (8009444 <HAL_TIM_Base_Start_IT+0xfc>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d009      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a1e      	ldr	r2, [pc, #120]	; (8009448 <HAL_TIM_Base_Start_IT+0x100>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d004      	beq.n	80093dc <HAL_TIM_Base_Start_IT+0x94>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a1d      	ldr	r2, [pc, #116]	; (800944c <HAL_TIM_Base_Start_IT+0x104>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d115      	bne.n	8009408 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	689a      	ldr	r2, [r3, #8]
 80093e2:	4b1b      	ldr	r3, [pc, #108]	; (8009450 <HAL_TIM_Base_Start_IT+0x108>)
 80093e4:	4013      	ands	r3, r2
 80093e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b06      	cmp	r3, #6
 80093ec:	d015      	beq.n	800941a <HAL_TIM_Base_Start_IT+0xd2>
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f4:	d011      	beq.n	800941a <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	f042 0201 	orr.w	r2, r2, #1
 8009404:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009406:	e008      	b.n	800941a <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681a      	ldr	r2, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f042 0201 	orr.w	r2, r2, #1
 8009416:	601a      	str	r2, [r3, #0]
 8009418:	e000      	b.n	800941c <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800941a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	40010000 	.word	0x40010000
 8009430:	40000400 	.word	0x40000400
 8009434:	40000800 	.word	0x40000800
 8009438:	40000c00 	.word	0x40000c00
 800943c:	40010400 	.word	0x40010400
 8009440:	40001800 	.word	0x40001800
 8009444:	40014000 	.word	0x40014000
 8009448:	4000e000 	.word	0x4000e000
 800944c:	4000e400 	.word	0x4000e400
 8009450:	00010007 	.word	0x00010007

08009454 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b082      	sub	sp, #8
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	f003 0302 	and.w	r3, r3, #2
 8009466:	2b02      	cmp	r3, #2
 8009468:	d122      	bne.n	80094b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f003 0302 	and.w	r3, r3, #2
 8009474:	2b02      	cmp	r3, #2
 8009476:	d11b      	bne.n	80094b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f06f 0202 	mvn.w	r2, #2
 8009480:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2201      	movs	r2, #1
 8009486:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	699b      	ldr	r3, [r3, #24]
 800948e:	f003 0303 	and.w	r3, r3, #3
 8009492:	2b00      	cmp	r3, #0
 8009494:	d003      	beq.n	800949e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f905 	bl	80096a6 <HAL_TIM_IC_CaptureCallback>
 800949c:	e005      	b.n	80094aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f000 f8f7 	bl	8009692 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f000 f908 	bl	80096ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	691b      	ldr	r3, [r3, #16]
 80094b6:	f003 0304 	and.w	r3, r3, #4
 80094ba:	2b04      	cmp	r3, #4
 80094bc:	d122      	bne.n	8009504 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	68db      	ldr	r3, [r3, #12]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	d11b      	bne.n	8009504 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f06f 0204 	mvn.w	r2, #4
 80094d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2202      	movs	r2, #2
 80094da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d003      	beq.n	80094f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80094ea:	6878      	ldr	r0, [r7, #4]
 80094ec:	f000 f8db 	bl	80096a6 <HAL_TIM_IC_CaptureCallback>
 80094f0:	e005      	b.n	80094fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f8cd 	bl	8009692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 f8de 	bl	80096ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	691b      	ldr	r3, [r3, #16]
 800950a:	f003 0308 	and.w	r3, r3, #8
 800950e:	2b08      	cmp	r3, #8
 8009510:	d122      	bne.n	8009558 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	68db      	ldr	r3, [r3, #12]
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b08      	cmp	r3, #8
 800951e:	d11b      	bne.n	8009558 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f06f 0208 	mvn.w	r2, #8
 8009528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2204      	movs	r2, #4
 800952e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	69db      	ldr	r3, [r3, #28]
 8009536:	f003 0303 	and.w	r3, r3, #3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d003      	beq.n	8009546 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	f000 f8b1 	bl	80096a6 <HAL_TIM_IC_CaptureCallback>
 8009544:	e005      	b.n	8009552 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f000 f8a3 	bl	8009692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f000 f8b4 	bl	80096ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2200      	movs	r2, #0
 8009556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	f003 0310 	and.w	r3, r3, #16
 8009562:	2b10      	cmp	r3, #16
 8009564:	d122      	bne.n	80095ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	f003 0310 	and.w	r3, r3, #16
 8009570:	2b10      	cmp	r3, #16
 8009572:	d11b      	bne.n	80095ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	f06f 0210 	mvn.w	r2, #16
 800957c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2208      	movs	r2, #8
 8009582:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	69db      	ldr	r3, [r3, #28]
 800958a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800958e:	2b00      	cmp	r3, #0
 8009590:	d003      	beq.n	800959a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f887 	bl	80096a6 <HAL_TIM_IC_CaptureCallback>
 8009598:	e005      	b.n	80095a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f879 	bl	8009692 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 f88a 	bl	80096ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b01      	cmp	r3, #1
 80095b8:	d10e      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d107      	bne.n	80095d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	f06f 0201 	mvn.w	r2, #1
 80095d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7f8 f95c 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	691b      	ldr	r3, [r3, #16]
 80095de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095e2:	2b80      	cmp	r3, #128	; 0x80
 80095e4:	d10e      	bne.n	8009604 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095f0:	2b80      	cmp	r3, #128	; 0x80
 80095f2:	d107      	bne.n	8009604 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80095fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f000 f9bc 	bl	800997c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800960e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009612:	d10e      	bne.n	8009632 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	68db      	ldr	r3, [r3, #12]
 800961a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800961e:	2b80      	cmp	r3, #128	; 0x80
 8009620:	d107      	bne.n	8009632 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800962a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f000 f9af 	bl	8009990 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	691b      	ldr	r3, [r3, #16]
 8009638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800963c:	2b40      	cmp	r3, #64	; 0x40
 800963e:	d10e      	bne.n	800965e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800964a:	2b40      	cmp	r3, #64	; 0x40
 800964c:	d107      	bne.n	800965e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f000 f838 	bl	80096ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	691b      	ldr	r3, [r3, #16]
 8009664:	f003 0320 	and.w	r3, r3, #32
 8009668:	2b20      	cmp	r3, #32
 800966a:	d10e      	bne.n	800968a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	68db      	ldr	r3, [r3, #12]
 8009672:	f003 0320 	and.w	r3, r3, #32
 8009676:	2b20      	cmp	r3, #32
 8009678:	d107      	bne.n	800968a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f06f 0220 	mvn.w	r2, #32
 8009682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f000 f96f 	bl	8009968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800968a:	bf00      	nop
 800968c:	3708      	adds	r7, #8
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}

08009692 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009692:	b480      	push	{r7}
 8009694:	b083      	sub	sp, #12
 8009696:	af00      	add	r7, sp, #0
 8009698:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800969a:	bf00      	nop
 800969c:	370c      	adds	r7, #12
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096ae:	bf00      	nop
 80096b0:	370c      	adds	r7, #12
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096cc:	4770      	bx	lr

080096ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80096ce:	b480      	push	{r7}
 80096d0:	b083      	sub	sp, #12
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
	...

080096e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4a44      	ldr	r2, [pc, #272]	; (8009808 <TIM_Base_SetConfig+0x124>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d013      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009702:	d00f      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4a41      	ldr	r2, [pc, #260]	; (800980c <TIM_Base_SetConfig+0x128>)
 8009708:	4293      	cmp	r3, r2
 800970a:	d00b      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a40      	ldr	r2, [pc, #256]	; (8009810 <TIM_Base_SetConfig+0x12c>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d007      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a3f      	ldr	r2, [pc, #252]	; (8009814 <TIM_Base_SetConfig+0x130>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d003      	beq.n	8009724 <TIM_Base_SetConfig+0x40>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	4a3e      	ldr	r2, [pc, #248]	; (8009818 <TIM_Base_SetConfig+0x134>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d108      	bne.n	8009736 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800972a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	4313      	orrs	r3, r2
 8009734:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	4a33      	ldr	r2, [pc, #204]	; (8009808 <TIM_Base_SetConfig+0x124>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d027      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009744:	d023      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	4a30      	ldr	r2, [pc, #192]	; (800980c <TIM_Base_SetConfig+0x128>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d01f      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	4a2f      	ldr	r2, [pc, #188]	; (8009810 <TIM_Base_SetConfig+0x12c>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d01b      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	4a2e      	ldr	r2, [pc, #184]	; (8009814 <TIM_Base_SetConfig+0x130>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d017      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4a2d      	ldr	r2, [pc, #180]	; (8009818 <TIM_Base_SetConfig+0x134>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d013      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	4a2c      	ldr	r2, [pc, #176]	; (800981c <TIM_Base_SetConfig+0x138>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d00f      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	4a2b      	ldr	r2, [pc, #172]	; (8009820 <TIM_Base_SetConfig+0x13c>)
 8009772:	4293      	cmp	r3, r2
 8009774:	d00b      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	4a2a      	ldr	r2, [pc, #168]	; (8009824 <TIM_Base_SetConfig+0x140>)
 800977a:	4293      	cmp	r3, r2
 800977c:	d007      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a29      	ldr	r2, [pc, #164]	; (8009828 <TIM_Base_SetConfig+0x144>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d003      	beq.n	800978e <TIM_Base_SetConfig+0xaa>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a28      	ldr	r2, [pc, #160]	; (800982c <TIM_Base_SetConfig+0x148>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d108      	bne.n	80097a0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009794:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	68db      	ldr	r3, [r3, #12]
 800979a:	68fa      	ldr	r2, [r7, #12]
 800979c:	4313      	orrs	r3, r2
 800979e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	4313      	orrs	r3, r2
 80097ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68fa      	ldr	r2, [r7, #12]
 80097b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	689a      	ldr	r2, [r3, #8]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a10      	ldr	r2, [pc, #64]	; (8009808 <TIM_Base_SetConfig+0x124>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00f      	beq.n	80097ec <TIM_Base_SetConfig+0x108>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a12      	ldr	r2, [pc, #72]	; (8009818 <TIM_Base_SetConfig+0x134>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d00b      	beq.n	80097ec <TIM_Base_SetConfig+0x108>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a11      	ldr	r2, [pc, #68]	; (800981c <TIM_Base_SetConfig+0x138>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d007      	beq.n	80097ec <TIM_Base_SetConfig+0x108>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	4a10      	ldr	r2, [pc, #64]	; (8009820 <TIM_Base_SetConfig+0x13c>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d003      	beq.n	80097ec <TIM_Base_SetConfig+0x108>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a0f      	ldr	r2, [pc, #60]	; (8009824 <TIM_Base_SetConfig+0x140>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d103      	bne.n	80097f4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	691a      	ldr	r2, [r3, #16]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	2201      	movs	r2, #1
 80097f8:	615a      	str	r2, [r3, #20]
}
 80097fa:	bf00      	nop
 80097fc:	3714      	adds	r7, #20
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr
 8009806:	bf00      	nop
 8009808:	40010000 	.word	0x40010000
 800980c:	40000400 	.word	0x40000400
 8009810:	40000800 	.word	0x40000800
 8009814:	40000c00 	.word	0x40000c00
 8009818:	40010400 	.word	0x40010400
 800981c:	40014000 	.word	0x40014000
 8009820:	40014400 	.word	0x40014400
 8009824:	40014800 	.word	0x40014800
 8009828:	4000e000 	.word	0x4000e000
 800982c:	4000e400 	.word	0x4000e400

08009830 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009840:	2b01      	cmp	r3, #1
 8009842:	d101      	bne.n	8009848 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009844:	2302      	movs	r3, #2
 8009846:	e077      	b.n	8009938 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2201      	movs	r2, #1
 800984c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2202      	movs	r2, #2
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	685b      	ldr	r3, [r3, #4]
 800985e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	689b      	ldr	r3, [r3, #8]
 8009866:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a35      	ldr	r2, [pc, #212]	; (8009944 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d004      	beq.n	800987c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a34      	ldr	r2, [pc, #208]	; (8009948 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d108      	bne.n	800988e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009882:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	4313      	orrs	r3, r2
 800988c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009894:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009896:	683b      	ldr	r3, [r7, #0]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	68fa      	ldr	r2, [r7, #12]
 800989c:	4313      	orrs	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	68fa      	ldr	r2, [r7, #12]
 80098a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a25      	ldr	r2, [pc, #148]	; (8009944 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d02c      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098ba:	d027      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	4a22      	ldr	r2, [pc, #136]	; (800994c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80098c2:	4293      	cmp	r3, r2
 80098c4:	d022      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	4a21      	ldr	r2, [pc, #132]	; (8009950 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80098cc:	4293      	cmp	r3, r2
 80098ce:	d01d      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a1f      	ldr	r2, [pc, #124]	; (8009954 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d018      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	4a1a      	ldr	r2, [pc, #104]	; (8009948 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d013      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a1b      	ldr	r2, [pc, #108]	; (8009958 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00e      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	4a1a      	ldr	r2, [pc, #104]	; (800995c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 80098f4:	4293      	cmp	r3, r2
 80098f6:	d009      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	4a18      	ldr	r2, [pc, #96]	; (8009960 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d004      	beq.n	800990c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a17      	ldr	r2, [pc, #92]	; (8009964 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d10c      	bne.n	8009926 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	68ba      	ldr	r2, [r7, #8]
 800991a:	4313      	orrs	r3, r2
 800991c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2201      	movs	r2, #1
 800992a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr
 8009944:	40010000 	.word	0x40010000
 8009948:	40010400 	.word	0x40010400
 800994c:	40000400 	.word	0x40000400
 8009950:	40000800 	.word	0x40000800
 8009954:	40000c00 	.word	0x40000c00
 8009958:	40001800 	.word	0x40001800
 800995c:	40014000 	.word	0x40014000
 8009960:	4000e000 	.word	0x4000e000
 8009964:	4000e400 	.word	0x4000e400

08009968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009968:	b480      	push	{r7}
 800996a:	b083      	sub	sp, #12
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009970:	bf00      	nop
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009984:	bf00      	nop
 8009986:	370c      	adds	r7, #12
 8009988:	46bd      	mov	sp, r7
 800998a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998e:	4770      	bx	lr

08009990 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d101      	bne.n	80099b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80099b2:	2301      	movs	r3, #1
 80099b4:	e042      	b.n	8009a3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d106      	bne.n	80099ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f7f8 fd75 	bl	80024b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2224      	movs	r2, #36	; 0x24
 80099d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681a      	ldr	r2, [r3, #0]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	f022 0201 	bic.w	r2, r2, #1
 80099e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80099e6:	6878      	ldr	r0, [r7, #4]
 80099e8:	f000 f8c2 	bl	8009b70 <UART_SetConfig>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d101      	bne.n	80099f6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80099f2:	2301      	movs	r3, #1
 80099f4:	e022      	b.n	8009a3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d002      	beq.n	8009a04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 ff14 	bl	800a82c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009a12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	689a      	ldr	r2, [r3, #8]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009a22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 ff9b 	bl	800a970 <UART_CheckIdleState>
 8009a3a:	4603      	mov	r3, r0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b08a      	sub	sp, #40	; 0x28
 8009a48:	af02      	add	r7, sp, #8
 8009a4a:	60f8      	str	r0, [r7, #12]
 8009a4c:	60b9      	str	r1, [r7, #8]
 8009a4e:	603b      	str	r3, [r7, #0]
 8009a50:	4613      	mov	r3, r2
 8009a52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a5a:	2b20      	cmp	r3, #32
 8009a5c:	f040 8083 	bne.w	8009b66 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <HAL_UART_Transmit+0x28>
 8009a66:	88fb      	ldrh	r3, [r7, #6]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d101      	bne.n	8009a70 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	e07b      	b.n	8009b68 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_UART_Transmit+0x3a>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e074      	b.n	8009b68 <HAL_UART_Transmit+0x124>
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	2221      	movs	r2, #33	; 0x21
 8009a92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a96:	f7f8 ff57 	bl	8002948 <HAL_GetTick>
 8009a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	88fa      	ldrh	r2, [r7, #6]
 8009aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	88fa      	ldrh	r2, [r7, #6]
 8009aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	689b      	ldr	r3, [r3, #8]
 8009ab0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ab4:	d108      	bne.n	8009ac8 <HAL_UART_Transmit+0x84>
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d104      	bne.n	8009ac8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	61bb      	str	r3, [r7, #24]
 8009ac6:	e003      	b.n	8009ad0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009acc:	2300      	movs	r3, #0
 8009ace:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8009ad8:	e02c      	b.n	8009b34 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	9300      	str	r3, [sp, #0]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	2180      	movs	r1, #128	; 0x80
 8009ae4:	68f8      	ldr	r0, [r7, #12]
 8009ae6:	f000 ff8e 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8009af0:	2303      	movs	r3, #3
 8009af2:	e039      	b.n	8009b68 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009afa:	69bb      	ldr	r3, [r7, #24]
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	461a      	mov	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009b08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	3302      	adds	r3, #2
 8009b0e:	61bb      	str	r3, [r7, #24]
 8009b10:	e007      	b.n	8009b22 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009b12:	69fb      	ldr	r3, [r7, #28]
 8009b14:	781a      	ldrb	r2, [r3, #0]
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	3301      	adds	r3, #1
 8009b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	b29a      	uxth	r2, r3
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d1cc      	bne.n	8009ada <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	9300      	str	r3, [sp, #0]
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2200      	movs	r2, #0
 8009b48:	2140      	movs	r1, #64	; 0x40
 8009b4a:	68f8      	ldr	r0, [r7, #12]
 8009b4c:	f000 ff5b 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 8009b50:	4603      	mov	r3, r0
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d001      	beq.n	8009b5a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e006      	b.n	8009b68 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2220      	movs	r2, #32
 8009b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8009b62:	2300      	movs	r3, #0
 8009b64:	e000      	b.n	8009b68 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8009b66:	2302      	movs	r3, #2
  }
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3720      	adds	r7, #32
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b70:	b5b0      	push	{r4, r5, r7, lr}
 8009b72:	b08e      	sub	sp, #56	; 0x38
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	689a      	ldr	r2, [r3, #8]
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	431a      	orrs	r2, r3
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	695b      	ldr	r3, [r3, #20]
 8009b8c:	431a      	orrs	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	69db      	ldr	r3, [r3, #28]
 8009b92:	4313      	orrs	r3, r2
 8009b94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	4bbf      	ldr	r3, [pc, #764]	; (8009e9c <UART_SetConfig+0x32c>)
 8009b9e:	4013      	ands	r3, r2
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	6812      	ldr	r2, [r2, #0]
 8009ba4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ba6:	430b      	orrs	r3, r1
 8009ba8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	430a      	orrs	r2, r1
 8009bbe:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	699b      	ldr	r3, [r3, #24]
 8009bc4:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	4ab5      	ldr	r2, [pc, #724]	; (8009ea0 <UART_SetConfig+0x330>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d004      	beq.n	8009bda <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6a1b      	ldr	r3, [r3, #32]
 8009bd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	689a      	ldr	r2, [r3, #8]
 8009be0:	4bb0      	ldr	r3, [pc, #704]	; (8009ea4 <UART_SetConfig+0x334>)
 8009be2:	4013      	ands	r3, r2
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	6812      	ldr	r2, [r2, #0]
 8009be8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009bea:	430b      	orrs	r3, r1
 8009bec:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf4:	f023 010f 	bic.w	r1, r3, #15
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	430a      	orrs	r2, r1
 8009c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4aa7      	ldr	r2, [pc, #668]	; (8009ea8 <UART_SetConfig+0x338>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d176      	bne.n	8009cfc <UART_SetConfig+0x18c>
 8009c0e:	4ba7      	ldr	r3, [pc, #668]	; (8009eac <UART_SetConfig+0x33c>)
 8009c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c16:	2b28      	cmp	r3, #40	; 0x28
 8009c18:	d86c      	bhi.n	8009cf4 <UART_SetConfig+0x184>
 8009c1a:	a201      	add	r2, pc, #4	; (adr r2, 8009c20 <UART_SetConfig+0xb0>)
 8009c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c20:	08009cc5 	.word	0x08009cc5
 8009c24:	08009cf5 	.word	0x08009cf5
 8009c28:	08009cf5 	.word	0x08009cf5
 8009c2c:	08009cf5 	.word	0x08009cf5
 8009c30:	08009cf5 	.word	0x08009cf5
 8009c34:	08009cf5 	.word	0x08009cf5
 8009c38:	08009cf5 	.word	0x08009cf5
 8009c3c:	08009cf5 	.word	0x08009cf5
 8009c40:	08009ccd 	.word	0x08009ccd
 8009c44:	08009cf5 	.word	0x08009cf5
 8009c48:	08009cf5 	.word	0x08009cf5
 8009c4c:	08009cf5 	.word	0x08009cf5
 8009c50:	08009cf5 	.word	0x08009cf5
 8009c54:	08009cf5 	.word	0x08009cf5
 8009c58:	08009cf5 	.word	0x08009cf5
 8009c5c:	08009cf5 	.word	0x08009cf5
 8009c60:	08009cd5 	.word	0x08009cd5
 8009c64:	08009cf5 	.word	0x08009cf5
 8009c68:	08009cf5 	.word	0x08009cf5
 8009c6c:	08009cf5 	.word	0x08009cf5
 8009c70:	08009cf5 	.word	0x08009cf5
 8009c74:	08009cf5 	.word	0x08009cf5
 8009c78:	08009cf5 	.word	0x08009cf5
 8009c7c:	08009cf5 	.word	0x08009cf5
 8009c80:	08009cdd 	.word	0x08009cdd
 8009c84:	08009cf5 	.word	0x08009cf5
 8009c88:	08009cf5 	.word	0x08009cf5
 8009c8c:	08009cf5 	.word	0x08009cf5
 8009c90:	08009cf5 	.word	0x08009cf5
 8009c94:	08009cf5 	.word	0x08009cf5
 8009c98:	08009cf5 	.word	0x08009cf5
 8009c9c:	08009cf5 	.word	0x08009cf5
 8009ca0:	08009ce5 	.word	0x08009ce5
 8009ca4:	08009cf5 	.word	0x08009cf5
 8009ca8:	08009cf5 	.word	0x08009cf5
 8009cac:	08009cf5 	.word	0x08009cf5
 8009cb0:	08009cf5 	.word	0x08009cf5
 8009cb4:	08009cf5 	.word	0x08009cf5
 8009cb8:	08009cf5 	.word	0x08009cf5
 8009cbc:	08009cf5 	.word	0x08009cf5
 8009cc0:	08009ced 	.word	0x08009ced
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cca:	e326      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009ccc:	2304      	movs	r3, #4
 8009cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd2:	e322      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cda:	e31e      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009cdc:	2310      	movs	r3, #16
 8009cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce2:	e31a      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009ce4:	2320      	movs	r3, #32
 8009ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cea:	e316      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009cec:	2340      	movs	r3, #64	; 0x40
 8009cee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cf2:	e312      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009cf4:	2380      	movs	r3, #128	; 0x80
 8009cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cfa:	e30e      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	4a6b      	ldr	r2, [pc, #428]	; (8009eb0 <UART_SetConfig+0x340>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d130      	bne.n	8009d68 <UART_SetConfig+0x1f8>
 8009d06:	4b69      	ldr	r3, [pc, #420]	; (8009eac <UART_SetConfig+0x33c>)
 8009d08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d0a:	f003 0307 	and.w	r3, r3, #7
 8009d0e:	2b05      	cmp	r3, #5
 8009d10:	d826      	bhi.n	8009d60 <UART_SetConfig+0x1f0>
 8009d12:	a201      	add	r2, pc, #4	; (adr r2, 8009d18 <UART_SetConfig+0x1a8>)
 8009d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d18:	08009d31 	.word	0x08009d31
 8009d1c:	08009d39 	.word	0x08009d39
 8009d20:	08009d41 	.word	0x08009d41
 8009d24:	08009d49 	.word	0x08009d49
 8009d28:	08009d51 	.word	0x08009d51
 8009d2c:	08009d59 	.word	0x08009d59
 8009d30:	2300      	movs	r3, #0
 8009d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d36:	e2f0      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009d38:	2304      	movs	r3, #4
 8009d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3e:	e2ec      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009d40:	2308      	movs	r3, #8
 8009d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d46:	e2e8      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009d48:	2310      	movs	r3, #16
 8009d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4e:	e2e4      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009d50:	2320      	movs	r3, #32
 8009d52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d56:	e2e0      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009d58:	2340      	movs	r3, #64	; 0x40
 8009d5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d5e:	e2dc      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009d60:	2380      	movs	r3, #128	; 0x80
 8009d62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d66:	e2d8      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a51      	ldr	r2, [pc, #324]	; (8009eb4 <UART_SetConfig+0x344>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d130      	bne.n	8009dd4 <UART_SetConfig+0x264>
 8009d72:	4b4e      	ldr	r3, [pc, #312]	; (8009eac <UART_SetConfig+0x33c>)
 8009d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d76:	f003 0307 	and.w	r3, r3, #7
 8009d7a:	2b05      	cmp	r3, #5
 8009d7c:	d826      	bhi.n	8009dcc <UART_SetConfig+0x25c>
 8009d7e:	a201      	add	r2, pc, #4	; (adr r2, 8009d84 <UART_SetConfig+0x214>)
 8009d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d84:	08009d9d 	.word	0x08009d9d
 8009d88:	08009da5 	.word	0x08009da5
 8009d8c:	08009dad 	.word	0x08009dad
 8009d90:	08009db5 	.word	0x08009db5
 8009d94:	08009dbd 	.word	0x08009dbd
 8009d98:	08009dc5 	.word	0x08009dc5
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009da2:	e2ba      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009da4:	2304      	movs	r3, #4
 8009da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009daa:	e2b6      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009dac:	2308      	movs	r3, #8
 8009dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009db2:	e2b2      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009db4:	2310      	movs	r3, #16
 8009db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dba:	e2ae      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009dbc:	2320      	movs	r3, #32
 8009dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dc2:	e2aa      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009dc4:	2340      	movs	r3, #64	; 0x40
 8009dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dca:	e2a6      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009dcc:	2380      	movs	r3, #128	; 0x80
 8009dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009dd2:	e2a2      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a37      	ldr	r2, [pc, #220]	; (8009eb8 <UART_SetConfig+0x348>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d130      	bne.n	8009e40 <UART_SetConfig+0x2d0>
 8009dde:	4b33      	ldr	r3, [pc, #204]	; (8009eac <UART_SetConfig+0x33c>)
 8009de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009de2:	f003 0307 	and.w	r3, r3, #7
 8009de6:	2b05      	cmp	r3, #5
 8009de8:	d826      	bhi.n	8009e38 <UART_SetConfig+0x2c8>
 8009dea:	a201      	add	r2, pc, #4	; (adr r2, 8009df0 <UART_SetConfig+0x280>)
 8009dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df0:	08009e09 	.word	0x08009e09
 8009df4:	08009e11 	.word	0x08009e11
 8009df8:	08009e19 	.word	0x08009e19
 8009dfc:	08009e21 	.word	0x08009e21
 8009e00:	08009e29 	.word	0x08009e29
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e0e:	e284      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e10:	2304      	movs	r3, #4
 8009e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e16:	e280      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e18:	2308      	movs	r3, #8
 8009e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e1e:	e27c      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e20:	2310      	movs	r3, #16
 8009e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e26:	e278      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e28:	2320      	movs	r3, #32
 8009e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e2e:	e274      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e30:	2340      	movs	r3, #64	; 0x40
 8009e32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e36:	e270      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e38:	2380      	movs	r3, #128	; 0x80
 8009e3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e3e:	e26c      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a1d      	ldr	r2, [pc, #116]	; (8009ebc <UART_SetConfig+0x34c>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d142      	bne.n	8009ed0 <UART_SetConfig+0x360>
 8009e4a:	4b18      	ldr	r3, [pc, #96]	; (8009eac <UART_SetConfig+0x33c>)
 8009e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4e:	f003 0307 	and.w	r3, r3, #7
 8009e52:	2b05      	cmp	r3, #5
 8009e54:	d838      	bhi.n	8009ec8 <UART_SetConfig+0x358>
 8009e56:	a201      	add	r2, pc, #4	; (adr r2, 8009e5c <UART_SetConfig+0x2ec>)
 8009e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e5c:	08009e75 	.word	0x08009e75
 8009e60:	08009e7d 	.word	0x08009e7d
 8009e64:	08009e85 	.word	0x08009e85
 8009e68:	08009e8d 	.word	0x08009e8d
 8009e6c:	08009e95 	.word	0x08009e95
 8009e70:	08009ec1 	.word	0x08009ec1
 8009e74:	2300      	movs	r3, #0
 8009e76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e7a:	e24e      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e7c:	2304      	movs	r3, #4
 8009e7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e82:	e24a      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e84:	2308      	movs	r3, #8
 8009e86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e8a:	e246      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e8c:	2310      	movs	r3, #16
 8009e8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e92:	e242      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e94:	2320      	movs	r3, #32
 8009e96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009e9a:	e23e      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009e9c:	cfff69f3 	.word	0xcfff69f3
 8009ea0:	58000c00 	.word	0x58000c00
 8009ea4:	11fff4ff 	.word	0x11fff4ff
 8009ea8:	40011000 	.word	0x40011000
 8009eac:	58024400 	.word	0x58024400
 8009eb0:	40004400 	.word	0x40004400
 8009eb4:	40004800 	.word	0x40004800
 8009eb8:	40004c00 	.word	0x40004c00
 8009ebc:	40005000 	.word	0x40005000
 8009ec0:	2340      	movs	r3, #64	; 0x40
 8009ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ec6:	e228      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009ec8:	2380      	movs	r3, #128	; 0x80
 8009eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ece:	e224      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	4ab1      	ldr	r2, [pc, #708]	; (800a19c <UART_SetConfig+0x62c>)
 8009ed6:	4293      	cmp	r3, r2
 8009ed8:	d176      	bne.n	8009fc8 <UART_SetConfig+0x458>
 8009eda:	4bb1      	ldr	r3, [pc, #708]	; (800a1a0 <UART_SetConfig+0x630>)
 8009edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ee2:	2b28      	cmp	r3, #40	; 0x28
 8009ee4:	d86c      	bhi.n	8009fc0 <UART_SetConfig+0x450>
 8009ee6:	a201      	add	r2, pc, #4	; (adr r2, 8009eec <UART_SetConfig+0x37c>)
 8009ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eec:	08009f91 	.word	0x08009f91
 8009ef0:	08009fc1 	.word	0x08009fc1
 8009ef4:	08009fc1 	.word	0x08009fc1
 8009ef8:	08009fc1 	.word	0x08009fc1
 8009efc:	08009fc1 	.word	0x08009fc1
 8009f00:	08009fc1 	.word	0x08009fc1
 8009f04:	08009fc1 	.word	0x08009fc1
 8009f08:	08009fc1 	.word	0x08009fc1
 8009f0c:	08009f99 	.word	0x08009f99
 8009f10:	08009fc1 	.word	0x08009fc1
 8009f14:	08009fc1 	.word	0x08009fc1
 8009f18:	08009fc1 	.word	0x08009fc1
 8009f1c:	08009fc1 	.word	0x08009fc1
 8009f20:	08009fc1 	.word	0x08009fc1
 8009f24:	08009fc1 	.word	0x08009fc1
 8009f28:	08009fc1 	.word	0x08009fc1
 8009f2c:	08009fa1 	.word	0x08009fa1
 8009f30:	08009fc1 	.word	0x08009fc1
 8009f34:	08009fc1 	.word	0x08009fc1
 8009f38:	08009fc1 	.word	0x08009fc1
 8009f3c:	08009fc1 	.word	0x08009fc1
 8009f40:	08009fc1 	.word	0x08009fc1
 8009f44:	08009fc1 	.word	0x08009fc1
 8009f48:	08009fc1 	.word	0x08009fc1
 8009f4c:	08009fa9 	.word	0x08009fa9
 8009f50:	08009fc1 	.word	0x08009fc1
 8009f54:	08009fc1 	.word	0x08009fc1
 8009f58:	08009fc1 	.word	0x08009fc1
 8009f5c:	08009fc1 	.word	0x08009fc1
 8009f60:	08009fc1 	.word	0x08009fc1
 8009f64:	08009fc1 	.word	0x08009fc1
 8009f68:	08009fc1 	.word	0x08009fc1
 8009f6c:	08009fb1 	.word	0x08009fb1
 8009f70:	08009fc1 	.word	0x08009fc1
 8009f74:	08009fc1 	.word	0x08009fc1
 8009f78:	08009fc1 	.word	0x08009fc1
 8009f7c:	08009fc1 	.word	0x08009fc1
 8009f80:	08009fc1 	.word	0x08009fc1
 8009f84:	08009fc1 	.word	0x08009fc1
 8009f88:	08009fc1 	.word	0x08009fc1
 8009f8c:	08009fb9 	.word	0x08009fb9
 8009f90:	2301      	movs	r3, #1
 8009f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f96:	e1c0      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009f98:	2304      	movs	r3, #4
 8009f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009f9e:	e1bc      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009fa0:	2308      	movs	r3, #8
 8009fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fa6:	e1b8      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009fa8:	2310      	movs	r3, #16
 8009faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fae:	e1b4      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009fb0:	2320      	movs	r3, #32
 8009fb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fb6:	e1b0      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009fb8:	2340      	movs	r3, #64	; 0x40
 8009fba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fbe:	e1ac      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009fc0:	2380      	movs	r3, #128	; 0x80
 8009fc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009fc6:	e1a8      	b.n	800a31a <UART_SetConfig+0x7aa>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a75      	ldr	r2, [pc, #468]	; (800a1a4 <UART_SetConfig+0x634>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d130      	bne.n	800a034 <UART_SetConfig+0x4c4>
 8009fd2:	4b73      	ldr	r3, [pc, #460]	; (800a1a0 <UART_SetConfig+0x630>)
 8009fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fd6:	f003 0307 	and.w	r3, r3, #7
 8009fda:	2b05      	cmp	r3, #5
 8009fdc:	d826      	bhi.n	800a02c <UART_SetConfig+0x4bc>
 8009fde:	a201      	add	r2, pc, #4	; (adr r2, 8009fe4 <UART_SetConfig+0x474>)
 8009fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fe4:	08009ffd 	.word	0x08009ffd
 8009fe8:	0800a005 	.word	0x0800a005
 8009fec:	0800a00d 	.word	0x0800a00d
 8009ff0:	0800a015 	.word	0x0800a015
 8009ff4:	0800a01d 	.word	0x0800a01d
 8009ff8:	0800a025 	.word	0x0800a025
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a002:	e18a      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a004:	2304      	movs	r3, #4
 800a006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a00a:	e186      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a00c:	2308      	movs	r3, #8
 800a00e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a012:	e182      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a014:	2310      	movs	r3, #16
 800a016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a01a:	e17e      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a01c:	2320      	movs	r3, #32
 800a01e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a022:	e17a      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a024:	2340      	movs	r3, #64	; 0x40
 800a026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a02a:	e176      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a02c:	2380      	movs	r3, #128	; 0x80
 800a02e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a032:	e172      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a5b      	ldr	r2, [pc, #364]	; (800a1a8 <UART_SetConfig+0x638>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d130      	bne.n	800a0a0 <UART_SetConfig+0x530>
 800a03e:	4b58      	ldr	r3, [pc, #352]	; (800a1a0 <UART_SetConfig+0x630>)
 800a040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a042:	f003 0307 	and.w	r3, r3, #7
 800a046:	2b05      	cmp	r3, #5
 800a048:	d826      	bhi.n	800a098 <UART_SetConfig+0x528>
 800a04a:	a201      	add	r2, pc, #4	; (adr r2, 800a050 <UART_SetConfig+0x4e0>)
 800a04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a050:	0800a069 	.word	0x0800a069
 800a054:	0800a071 	.word	0x0800a071
 800a058:	0800a079 	.word	0x0800a079
 800a05c:	0800a081 	.word	0x0800a081
 800a060:	0800a089 	.word	0x0800a089
 800a064:	0800a091 	.word	0x0800a091
 800a068:	2300      	movs	r3, #0
 800a06a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a06e:	e154      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a070:	2304      	movs	r3, #4
 800a072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a076:	e150      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a078:	2308      	movs	r3, #8
 800a07a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a07e:	e14c      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a080:	2310      	movs	r3, #16
 800a082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a086:	e148      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a088:	2320      	movs	r3, #32
 800a08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08e:	e144      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a090:	2340      	movs	r3, #64	; 0x40
 800a092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a096:	e140      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a098:	2380      	movs	r3, #128	; 0x80
 800a09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09e:	e13c      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a41      	ldr	r2, [pc, #260]	; (800a1ac <UART_SetConfig+0x63c>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	f040 8082 	bne.w	800a1b0 <UART_SetConfig+0x640>
 800a0ac:	4b3c      	ldr	r3, [pc, #240]	; (800a1a0 <UART_SetConfig+0x630>)
 800a0ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0b4:	2b28      	cmp	r3, #40	; 0x28
 800a0b6:	d86d      	bhi.n	800a194 <UART_SetConfig+0x624>
 800a0b8:	a201      	add	r2, pc, #4	; (adr r2, 800a0c0 <UART_SetConfig+0x550>)
 800a0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0be:	bf00      	nop
 800a0c0:	0800a165 	.word	0x0800a165
 800a0c4:	0800a195 	.word	0x0800a195
 800a0c8:	0800a195 	.word	0x0800a195
 800a0cc:	0800a195 	.word	0x0800a195
 800a0d0:	0800a195 	.word	0x0800a195
 800a0d4:	0800a195 	.word	0x0800a195
 800a0d8:	0800a195 	.word	0x0800a195
 800a0dc:	0800a195 	.word	0x0800a195
 800a0e0:	0800a16d 	.word	0x0800a16d
 800a0e4:	0800a195 	.word	0x0800a195
 800a0e8:	0800a195 	.word	0x0800a195
 800a0ec:	0800a195 	.word	0x0800a195
 800a0f0:	0800a195 	.word	0x0800a195
 800a0f4:	0800a195 	.word	0x0800a195
 800a0f8:	0800a195 	.word	0x0800a195
 800a0fc:	0800a195 	.word	0x0800a195
 800a100:	0800a175 	.word	0x0800a175
 800a104:	0800a195 	.word	0x0800a195
 800a108:	0800a195 	.word	0x0800a195
 800a10c:	0800a195 	.word	0x0800a195
 800a110:	0800a195 	.word	0x0800a195
 800a114:	0800a195 	.word	0x0800a195
 800a118:	0800a195 	.word	0x0800a195
 800a11c:	0800a195 	.word	0x0800a195
 800a120:	0800a17d 	.word	0x0800a17d
 800a124:	0800a195 	.word	0x0800a195
 800a128:	0800a195 	.word	0x0800a195
 800a12c:	0800a195 	.word	0x0800a195
 800a130:	0800a195 	.word	0x0800a195
 800a134:	0800a195 	.word	0x0800a195
 800a138:	0800a195 	.word	0x0800a195
 800a13c:	0800a195 	.word	0x0800a195
 800a140:	0800a185 	.word	0x0800a185
 800a144:	0800a195 	.word	0x0800a195
 800a148:	0800a195 	.word	0x0800a195
 800a14c:	0800a195 	.word	0x0800a195
 800a150:	0800a195 	.word	0x0800a195
 800a154:	0800a195 	.word	0x0800a195
 800a158:	0800a195 	.word	0x0800a195
 800a15c:	0800a195 	.word	0x0800a195
 800a160:	0800a18d 	.word	0x0800a18d
 800a164:	2301      	movs	r3, #1
 800a166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a16a:	e0d6      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a16c:	2304      	movs	r3, #4
 800a16e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a172:	e0d2      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a174:	2308      	movs	r3, #8
 800a176:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a17a:	e0ce      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a17c:	2310      	movs	r3, #16
 800a17e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a182:	e0ca      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a184:	2320      	movs	r3, #32
 800a186:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a18a:	e0c6      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a18c:	2340      	movs	r3, #64	; 0x40
 800a18e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a192:	e0c2      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a194:	2380      	movs	r3, #128	; 0x80
 800a196:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a19a:	e0be      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a19c:	40011400 	.word	0x40011400
 800a1a0:	58024400 	.word	0x58024400
 800a1a4:	40007800 	.word	0x40007800
 800a1a8:	40007c00 	.word	0x40007c00
 800a1ac:	40011800 	.word	0x40011800
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4aad      	ldr	r2, [pc, #692]	; (800a46c <UART_SetConfig+0x8fc>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d176      	bne.n	800a2a8 <UART_SetConfig+0x738>
 800a1ba:	4bad      	ldr	r3, [pc, #692]	; (800a470 <UART_SetConfig+0x900>)
 800a1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a1c2:	2b28      	cmp	r3, #40	; 0x28
 800a1c4:	d86c      	bhi.n	800a2a0 <UART_SetConfig+0x730>
 800a1c6:	a201      	add	r2, pc, #4	; (adr r2, 800a1cc <UART_SetConfig+0x65c>)
 800a1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1cc:	0800a271 	.word	0x0800a271
 800a1d0:	0800a2a1 	.word	0x0800a2a1
 800a1d4:	0800a2a1 	.word	0x0800a2a1
 800a1d8:	0800a2a1 	.word	0x0800a2a1
 800a1dc:	0800a2a1 	.word	0x0800a2a1
 800a1e0:	0800a2a1 	.word	0x0800a2a1
 800a1e4:	0800a2a1 	.word	0x0800a2a1
 800a1e8:	0800a2a1 	.word	0x0800a2a1
 800a1ec:	0800a279 	.word	0x0800a279
 800a1f0:	0800a2a1 	.word	0x0800a2a1
 800a1f4:	0800a2a1 	.word	0x0800a2a1
 800a1f8:	0800a2a1 	.word	0x0800a2a1
 800a1fc:	0800a2a1 	.word	0x0800a2a1
 800a200:	0800a2a1 	.word	0x0800a2a1
 800a204:	0800a2a1 	.word	0x0800a2a1
 800a208:	0800a2a1 	.word	0x0800a2a1
 800a20c:	0800a281 	.word	0x0800a281
 800a210:	0800a2a1 	.word	0x0800a2a1
 800a214:	0800a2a1 	.word	0x0800a2a1
 800a218:	0800a2a1 	.word	0x0800a2a1
 800a21c:	0800a2a1 	.word	0x0800a2a1
 800a220:	0800a2a1 	.word	0x0800a2a1
 800a224:	0800a2a1 	.word	0x0800a2a1
 800a228:	0800a2a1 	.word	0x0800a2a1
 800a22c:	0800a289 	.word	0x0800a289
 800a230:	0800a2a1 	.word	0x0800a2a1
 800a234:	0800a2a1 	.word	0x0800a2a1
 800a238:	0800a2a1 	.word	0x0800a2a1
 800a23c:	0800a2a1 	.word	0x0800a2a1
 800a240:	0800a2a1 	.word	0x0800a2a1
 800a244:	0800a2a1 	.word	0x0800a2a1
 800a248:	0800a2a1 	.word	0x0800a2a1
 800a24c:	0800a291 	.word	0x0800a291
 800a250:	0800a2a1 	.word	0x0800a2a1
 800a254:	0800a2a1 	.word	0x0800a2a1
 800a258:	0800a2a1 	.word	0x0800a2a1
 800a25c:	0800a2a1 	.word	0x0800a2a1
 800a260:	0800a2a1 	.word	0x0800a2a1
 800a264:	0800a2a1 	.word	0x0800a2a1
 800a268:	0800a2a1 	.word	0x0800a2a1
 800a26c:	0800a299 	.word	0x0800a299
 800a270:	2301      	movs	r3, #1
 800a272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a276:	e050      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a278:	2304      	movs	r3, #4
 800a27a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a27e:	e04c      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a280:	2308      	movs	r3, #8
 800a282:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a286:	e048      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a288:	2310      	movs	r3, #16
 800a28a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a28e:	e044      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a290:	2320      	movs	r3, #32
 800a292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a296:	e040      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a298:	2340      	movs	r3, #64	; 0x40
 800a29a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a29e:	e03c      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a2a0:	2380      	movs	r3, #128	; 0x80
 800a2a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2a6:	e038      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	4a71      	ldr	r2, [pc, #452]	; (800a474 <UART_SetConfig+0x904>)
 800a2ae:	4293      	cmp	r3, r2
 800a2b0:	d130      	bne.n	800a314 <UART_SetConfig+0x7a4>
 800a2b2:	4b6f      	ldr	r3, [pc, #444]	; (800a470 <UART_SetConfig+0x900>)
 800a2b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2b6:	f003 0307 	and.w	r3, r3, #7
 800a2ba:	2b05      	cmp	r3, #5
 800a2bc:	d826      	bhi.n	800a30c <UART_SetConfig+0x79c>
 800a2be:	a201      	add	r2, pc, #4	; (adr r2, 800a2c4 <UART_SetConfig+0x754>)
 800a2c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c4:	0800a2dd 	.word	0x0800a2dd
 800a2c8:	0800a2e5 	.word	0x0800a2e5
 800a2cc:	0800a2ed 	.word	0x0800a2ed
 800a2d0:	0800a2f5 	.word	0x0800a2f5
 800a2d4:	0800a2fd 	.word	0x0800a2fd
 800a2d8:	0800a305 	.word	0x0800a305
 800a2dc:	2302      	movs	r3, #2
 800a2de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2e2:	e01a      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a2e4:	2304      	movs	r3, #4
 800a2e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2ea:	e016      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a2ec:	2308      	movs	r3, #8
 800a2ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2f2:	e012      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a2f4:	2310      	movs	r3, #16
 800a2f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a2fa:	e00e      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a2fc:	2320      	movs	r3, #32
 800a2fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a302:	e00a      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a304:	2340      	movs	r3, #64	; 0x40
 800a306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a30a:	e006      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a30c:	2380      	movs	r3, #128	; 0x80
 800a30e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a312:	e002      	b.n	800a31a <UART_SetConfig+0x7aa>
 800a314:	2380      	movs	r3, #128	; 0x80
 800a316:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a55      	ldr	r2, [pc, #340]	; (800a474 <UART_SetConfig+0x904>)
 800a320:	4293      	cmp	r3, r2
 800a322:	f040 80f0 	bne.w	800a506 <UART_SetConfig+0x996>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a326:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a32a:	2b20      	cmp	r3, #32
 800a32c:	dc46      	bgt.n	800a3bc <UART_SetConfig+0x84c>
 800a32e:	2b02      	cmp	r3, #2
 800a330:	db75      	blt.n	800a41e <UART_SetConfig+0x8ae>
 800a332:	3b02      	subs	r3, #2
 800a334:	2b1e      	cmp	r3, #30
 800a336:	d872      	bhi.n	800a41e <UART_SetConfig+0x8ae>
 800a338:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <UART_SetConfig+0x7d0>)
 800a33a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a33e:	bf00      	nop
 800a340:	0800a3c3 	.word	0x0800a3c3
 800a344:	0800a41f 	.word	0x0800a41f
 800a348:	0800a3cb 	.word	0x0800a3cb
 800a34c:	0800a41f 	.word	0x0800a41f
 800a350:	0800a41f 	.word	0x0800a41f
 800a354:	0800a41f 	.word	0x0800a41f
 800a358:	0800a3db 	.word	0x0800a3db
 800a35c:	0800a41f 	.word	0x0800a41f
 800a360:	0800a41f 	.word	0x0800a41f
 800a364:	0800a41f 	.word	0x0800a41f
 800a368:	0800a41f 	.word	0x0800a41f
 800a36c:	0800a41f 	.word	0x0800a41f
 800a370:	0800a41f 	.word	0x0800a41f
 800a374:	0800a41f 	.word	0x0800a41f
 800a378:	0800a3eb 	.word	0x0800a3eb
 800a37c:	0800a41f 	.word	0x0800a41f
 800a380:	0800a41f 	.word	0x0800a41f
 800a384:	0800a41f 	.word	0x0800a41f
 800a388:	0800a41f 	.word	0x0800a41f
 800a38c:	0800a41f 	.word	0x0800a41f
 800a390:	0800a41f 	.word	0x0800a41f
 800a394:	0800a41f 	.word	0x0800a41f
 800a398:	0800a41f 	.word	0x0800a41f
 800a39c:	0800a41f 	.word	0x0800a41f
 800a3a0:	0800a41f 	.word	0x0800a41f
 800a3a4:	0800a41f 	.word	0x0800a41f
 800a3a8:	0800a41f 	.word	0x0800a41f
 800a3ac:	0800a41f 	.word	0x0800a41f
 800a3b0:	0800a41f 	.word	0x0800a41f
 800a3b4:	0800a41f 	.word	0x0800a41f
 800a3b8:	0800a411 	.word	0x0800a411
 800a3bc:	2b40      	cmp	r3, #64	; 0x40
 800a3be:	d02a      	beq.n	800a416 <UART_SetConfig+0x8a6>
 800a3c0:	e02d      	b.n	800a41e <UART_SetConfig+0x8ae>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a3c2:	f7fd fee9 	bl	8008198 <HAL_RCCEx_GetD3PCLK1Freq>
 800a3c6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a3c8:	e02f      	b.n	800a42a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a3ca:	f107 0314 	add.w	r3, r7, #20
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7fd fef8 	bl	80081c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3d8:	e027      	b.n	800a42a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3da:	f107 0308 	add.w	r3, r7, #8
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe f844 	bl	800846c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a3e8:	e01f      	b.n	800a42a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3ea:	4b21      	ldr	r3, [pc, #132]	; (800a470 <UART_SetConfig+0x900>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 0320 	and.w	r3, r3, #32
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d009      	beq.n	800a40a <UART_SetConfig+0x89a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a3f6:	4b1e      	ldr	r3, [pc, #120]	; (800a470 <UART_SetConfig+0x900>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	08db      	lsrs	r3, r3, #3
 800a3fc:	f003 0303 	and.w	r3, r3, #3
 800a400:	4a1d      	ldr	r2, [pc, #116]	; (800a478 <UART_SetConfig+0x908>)
 800a402:	fa22 f303 	lsr.w	r3, r2, r3
 800a406:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a408:	e00f      	b.n	800a42a <UART_SetConfig+0x8ba>
          pclk = (uint32_t) HSI_VALUE;
 800a40a:	4b1b      	ldr	r3, [pc, #108]	; (800a478 <UART_SetConfig+0x908>)
 800a40c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a40e:	e00c      	b.n	800a42a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a410:	4b1a      	ldr	r3, [pc, #104]	; (800a47c <UART_SetConfig+0x90c>)
 800a412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a414:	e009      	b.n	800a42a <UART_SetConfig+0x8ba>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a41a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a41c:	e005      	b.n	800a42a <UART_SetConfig+0x8ba>
      default:
        pclk = 0U;
 800a41e:	2300      	movs	r3, #0
 800a420:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a428:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f000 81e6 	beq.w	800a7fe <UART_SetConfig+0xc8e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	4a12      	ldr	r2, [pc, #72]	; (800a480 <UART_SetConfig+0x910>)
 800a438:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a43c:	461a      	mov	r2, r3
 800a43e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a440:	fbb3 f3f2 	udiv	r3, r3, r2
 800a444:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685a      	ldr	r2, [r3, #4]
 800a44a:	4613      	mov	r3, r2
 800a44c:	005b      	lsls	r3, r3, #1
 800a44e:	4413      	add	r3, r2
 800a450:	6a3a      	ldr	r2, [r7, #32]
 800a452:	429a      	cmp	r2, r3
 800a454:	d305      	bcc.n	800a462 <UART_SetConfig+0x8f2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	685b      	ldr	r3, [r3, #4]
 800a45a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a45c:	6a3a      	ldr	r2, [r7, #32]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d910      	bls.n	800a484 <UART_SetConfig+0x914>
      {
        ret = HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a468:	e1c9      	b.n	800a7fe <UART_SetConfig+0xc8e>
 800a46a:	bf00      	nop
 800a46c:	40011c00 	.word	0x40011c00
 800a470:	58024400 	.word	0x58024400
 800a474:	58000c00 	.word	0x58000c00
 800a478:	03d09000 	.word	0x03d09000
 800a47c:	003d0900 	.word	0x003d0900
 800a480:	0801e0d8 	.word	0x0801e0d8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a486:	4618      	mov	r0, r3
 800a488:	f04f 0100 	mov.w	r1, #0
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a490:	4ac1      	ldr	r2, [pc, #772]	; (800a798 <UART_SetConfig+0xc28>)
 800a492:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a496:	b29a      	uxth	r2, r3
 800a498:	f04f 0300 	mov.w	r3, #0
 800a49c:	f7f5 ff90 	bl	80003c0 <__aeabi_uldivmod>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	f04f 0200 	mov.w	r2, #0
 800a4ac:	f04f 0300 	mov.w	r3, #0
 800a4b0:	020b      	lsls	r3, r1, #8
 800a4b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a4b6:	0202      	lsls	r2, r0, #8
 800a4b8:	6879      	ldr	r1, [r7, #4]
 800a4ba:	6849      	ldr	r1, [r1, #4]
 800a4bc:	0849      	lsrs	r1, r1, #1
 800a4be:	4608      	mov	r0, r1
 800a4c0:	f04f 0100 	mov.w	r1, #0
 800a4c4:	1814      	adds	r4, r2, r0
 800a4c6:	eb43 0501 	adc.w	r5, r3, r1
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f04f 0300 	mov.w	r3, #0
 800a4d4:	4620      	mov	r0, r4
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	f7f5 ff72 	bl	80003c0 <__aeabi_uldivmod>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a4ea:	d308      	bcc.n	800a4fe <UART_SetConfig+0x98e>
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a4f2:	d204      	bcs.n	800a4fe <UART_SetConfig+0x98e>
        {
          huart->Instance->BRR = usartdiv;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4fa:	60da      	str	r2, [r3, #12]
 800a4fc:	e17f      	b.n	800a7fe <UART_SetConfig+0xc8e>
        }
        else
        {
          ret = HAL_ERROR;
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a504:	e17b      	b.n	800a7fe <UART_SetConfig+0xc8e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	69db      	ldr	r3, [r3, #28]
 800a50a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a50e:	f040 80bd 	bne.w	800a68c <UART_SetConfig+0xb1c>
  {
    switch (clocksource)
 800a512:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a516:	2b20      	cmp	r3, #32
 800a518:	dc48      	bgt.n	800a5ac <UART_SetConfig+0xa3c>
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	db7b      	blt.n	800a616 <UART_SetConfig+0xaa6>
 800a51e:	2b20      	cmp	r3, #32
 800a520:	d879      	bhi.n	800a616 <UART_SetConfig+0xaa6>
 800a522:	a201      	add	r2, pc, #4	; (adr r2, 800a528 <UART_SetConfig+0x9b8>)
 800a524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a528:	0800a5b3 	.word	0x0800a5b3
 800a52c:	0800a5bb 	.word	0x0800a5bb
 800a530:	0800a617 	.word	0x0800a617
 800a534:	0800a617 	.word	0x0800a617
 800a538:	0800a5c3 	.word	0x0800a5c3
 800a53c:	0800a617 	.word	0x0800a617
 800a540:	0800a617 	.word	0x0800a617
 800a544:	0800a617 	.word	0x0800a617
 800a548:	0800a5d3 	.word	0x0800a5d3
 800a54c:	0800a617 	.word	0x0800a617
 800a550:	0800a617 	.word	0x0800a617
 800a554:	0800a617 	.word	0x0800a617
 800a558:	0800a617 	.word	0x0800a617
 800a55c:	0800a617 	.word	0x0800a617
 800a560:	0800a617 	.word	0x0800a617
 800a564:	0800a617 	.word	0x0800a617
 800a568:	0800a5e3 	.word	0x0800a5e3
 800a56c:	0800a617 	.word	0x0800a617
 800a570:	0800a617 	.word	0x0800a617
 800a574:	0800a617 	.word	0x0800a617
 800a578:	0800a617 	.word	0x0800a617
 800a57c:	0800a617 	.word	0x0800a617
 800a580:	0800a617 	.word	0x0800a617
 800a584:	0800a617 	.word	0x0800a617
 800a588:	0800a617 	.word	0x0800a617
 800a58c:	0800a617 	.word	0x0800a617
 800a590:	0800a617 	.word	0x0800a617
 800a594:	0800a617 	.word	0x0800a617
 800a598:	0800a617 	.word	0x0800a617
 800a59c:	0800a617 	.word	0x0800a617
 800a5a0:	0800a617 	.word	0x0800a617
 800a5a4:	0800a617 	.word	0x0800a617
 800a5a8:	0800a609 	.word	0x0800a609
 800a5ac:	2b40      	cmp	r3, #64	; 0x40
 800a5ae:	d02e      	beq.n	800a60e <UART_SetConfig+0xa9e>
 800a5b0:	e031      	b.n	800a616 <UART_SetConfig+0xaa6>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5b2:	f7fc fe89 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 800a5b6:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5b8:	e033      	b.n	800a622 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5ba:	f7fc fe9b 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 800a5be:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a5c0:	e02f      	b.n	800a622 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5c2:	f107 0314 	add.w	r3, r7, #20
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7fd fdfc 	bl	80081c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5d0:	e027      	b.n	800a622 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5d2:	f107 0308 	add.w	r3, r7, #8
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7fd ff48 	bl	800846c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5e0:	e01f      	b.n	800a622 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5e2:	4b6e      	ldr	r3, [pc, #440]	; (800a79c <UART_SetConfig+0xc2c>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d009      	beq.n	800a602 <UART_SetConfig+0xa92>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5ee:	4b6b      	ldr	r3, [pc, #428]	; (800a79c <UART_SetConfig+0xc2c>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	08db      	lsrs	r3, r3, #3
 800a5f4:	f003 0303 	and.w	r3, r3, #3
 800a5f8:	4a69      	ldr	r2, [pc, #420]	; (800a7a0 <UART_SetConfig+0xc30>)
 800a5fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a600:	e00f      	b.n	800a622 <UART_SetConfig+0xab2>
          pclk = (uint32_t) HSI_VALUE;
 800a602:	4b67      	ldr	r3, [pc, #412]	; (800a7a0 <UART_SetConfig+0xc30>)
 800a604:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a606:	e00c      	b.n	800a622 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a608:	4b66      	ldr	r3, [pc, #408]	; (800a7a4 <UART_SetConfig+0xc34>)
 800a60a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a60c:	e009      	b.n	800a622 <UART_SetConfig+0xab2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a612:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a614:	e005      	b.n	800a622 <UART_SetConfig+0xab2>
      default:
        pclk = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a620:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 80ea 	beq.w	800a7fe <UART_SetConfig+0xc8e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	4a5a      	ldr	r2, [pc, #360]	; (800a798 <UART_SetConfig+0xc28>)
 800a630:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a634:	461a      	mov	r2, r3
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	fbb3 f3f2 	udiv	r3, r3, r2
 800a63c:	005a      	lsls	r2, r3, #1
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	685b      	ldr	r3, [r3, #4]
 800a642:	085b      	lsrs	r3, r3, #1
 800a644:	441a      	add	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	685b      	ldr	r3, [r3, #4]
 800a64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a64e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a652:	2b0f      	cmp	r3, #15
 800a654:	d916      	bls.n	800a684 <UART_SetConfig+0xb14>
 800a656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a65c:	d212      	bcs.n	800a684 <UART_SetConfig+0xb14>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a660:	b29b      	uxth	r3, r3
 800a662:	f023 030f 	bic.w	r3, r3, #15
 800a666:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a66a:	085b      	lsrs	r3, r3, #1
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	f003 0307 	and.w	r3, r3, #7
 800a672:	b29a      	uxth	r2, r3
 800a674:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a676:	4313      	orrs	r3, r2
 800a678:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a680:	60da      	str	r2, [r3, #12]
 800a682:	e0bc      	b.n	800a7fe <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a68a:	e0b8      	b.n	800a7fe <UART_SetConfig+0xc8e>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a68c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a690:	2b20      	cmp	r3, #32
 800a692:	dc4b      	bgt.n	800a72c <UART_SetConfig+0xbbc>
 800a694:	2b00      	cmp	r3, #0
 800a696:	f2c0 8087 	blt.w	800a7a8 <UART_SetConfig+0xc38>
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	f200 8084 	bhi.w	800a7a8 <UART_SetConfig+0xc38>
 800a6a0:	a201      	add	r2, pc, #4	; (adr r2, 800a6a8 <UART_SetConfig+0xb38>)
 800a6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6a6:	bf00      	nop
 800a6a8:	0800a733 	.word	0x0800a733
 800a6ac:	0800a73b 	.word	0x0800a73b
 800a6b0:	0800a7a9 	.word	0x0800a7a9
 800a6b4:	0800a7a9 	.word	0x0800a7a9
 800a6b8:	0800a743 	.word	0x0800a743
 800a6bc:	0800a7a9 	.word	0x0800a7a9
 800a6c0:	0800a7a9 	.word	0x0800a7a9
 800a6c4:	0800a7a9 	.word	0x0800a7a9
 800a6c8:	0800a753 	.word	0x0800a753
 800a6cc:	0800a7a9 	.word	0x0800a7a9
 800a6d0:	0800a7a9 	.word	0x0800a7a9
 800a6d4:	0800a7a9 	.word	0x0800a7a9
 800a6d8:	0800a7a9 	.word	0x0800a7a9
 800a6dc:	0800a7a9 	.word	0x0800a7a9
 800a6e0:	0800a7a9 	.word	0x0800a7a9
 800a6e4:	0800a7a9 	.word	0x0800a7a9
 800a6e8:	0800a763 	.word	0x0800a763
 800a6ec:	0800a7a9 	.word	0x0800a7a9
 800a6f0:	0800a7a9 	.word	0x0800a7a9
 800a6f4:	0800a7a9 	.word	0x0800a7a9
 800a6f8:	0800a7a9 	.word	0x0800a7a9
 800a6fc:	0800a7a9 	.word	0x0800a7a9
 800a700:	0800a7a9 	.word	0x0800a7a9
 800a704:	0800a7a9 	.word	0x0800a7a9
 800a708:	0800a7a9 	.word	0x0800a7a9
 800a70c:	0800a7a9 	.word	0x0800a7a9
 800a710:	0800a7a9 	.word	0x0800a7a9
 800a714:	0800a7a9 	.word	0x0800a7a9
 800a718:	0800a7a9 	.word	0x0800a7a9
 800a71c:	0800a7a9 	.word	0x0800a7a9
 800a720:	0800a7a9 	.word	0x0800a7a9
 800a724:	0800a7a9 	.word	0x0800a7a9
 800a728:	0800a789 	.word	0x0800a789
 800a72c:	2b40      	cmp	r3, #64	; 0x40
 800a72e:	d02e      	beq.n	800a78e <UART_SetConfig+0xc1e>
 800a730:	e03a      	b.n	800a7a8 <UART_SetConfig+0xc38>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a732:	f7fc fdc9 	bl	80072c8 <HAL_RCC_GetPCLK1Freq>
 800a736:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a738:	e03c      	b.n	800a7b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a73a:	f7fc fddb 	bl	80072f4 <HAL_RCC_GetPCLK2Freq>
 800a73e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a740:	e038      	b.n	800a7b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a742:	f107 0314 	add.w	r3, r7, #20
 800a746:	4618      	mov	r0, r3
 800a748:	f7fd fd3c 	bl	80081c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a750:	e030      	b.n	800a7b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a752:	f107 0308 	add.w	r3, r7, #8
 800a756:	4618      	mov	r0, r3
 800a758:	f7fd fe88 	bl	800846c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a760:	e028      	b.n	800a7b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a762:	4b0e      	ldr	r3, [pc, #56]	; (800a79c <UART_SetConfig+0xc2c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 0320 	and.w	r3, r3, #32
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d009      	beq.n	800a782 <UART_SetConfig+0xc12>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a76e:	4b0b      	ldr	r3, [pc, #44]	; (800a79c <UART_SetConfig+0xc2c>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	08db      	lsrs	r3, r3, #3
 800a774:	f003 0303 	and.w	r3, r3, #3
 800a778:	4a09      	ldr	r2, [pc, #36]	; (800a7a0 <UART_SetConfig+0xc30>)
 800a77a:	fa22 f303 	lsr.w	r3, r2, r3
 800a77e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a780:	e018      	b.n	800a7b4 <UART_SetConfig+0xc44>
          pclk = (uint32_t) HSI_VALUE;
 800a782:	4b07      	ldr	r3, [pc, #28]	; (800a7a0 <UART_SetConfig+0xc30>)
 800a784:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a786:	e015      	b.n	800a7b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a788:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <UART_SetConfig+0xc34>)
 800a78a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a78c:	e012      	b.n	800a7b4 <UART_SetConfig+0xc44>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a78e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a794:	e00e      	b.n	800a7b4 <UART_SetConfig+0xc44>
 800a796:	bf00      	nop
 800a798:	0801e0d8 	.word	0x0801e0d8
 800a79c:	58024400 	.word	0x58024400
 800a7a0:	03d09000 	.word	0x03d09000
 800a7a4:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a7b2:	bf00      	nop
    }

    if (pclk != 0U)
 800a7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d021      	beq.n	800a7fe <UART_SetConfig+0xc8e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7be:	4a1a      	ldr	r2, [pc, #104]	; (800a828 <UART_SetConfig+0xcb8>)
 800a7c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	085b      	lsrs	r3, r3, #1
 800a7d2:	441a      	add	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	685b      	ldr	r3, [r3, #4]
 800a7d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e0:	2b0f      	cmp	r3, #15
 800a7e2:	d909      	bls.n	800a7f8 <UART_SetConfig+0xc88>
 800a7e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7ea:	d205      	bcs.n	800a7f8 <UART_SetConfig+0xc88>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7ee:	b29a      	uxth	r2, r3
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	60da      	str	r2, [r3, #12]
 800a7f6:	e002      	b.n	800a7fe <UART_SetConfig+0xc8e>
      }
      else
      {
        ret = HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2201      	movs	r2, #1
 800a802:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2201      	movs	r2, #1
 800a80a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a81a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3738      	adds	r7, #56	; 0x38
 800a822:	46bd      	mov	sp, r7
 800a824:	bdb0      	pop	{r4, r5, r7, pc}
 800a826:	bf00      	nop
 800a828:	0801e0d8 	.word	0x0801e0d8

0800a82c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00a      	beq.n	800a856 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	430a      	orrs	r2, r1
 800a854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85a:	f003 0302 	and.w	r3, r3, #2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d00a      	beq.n	800a878 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	430a      	orrs	r2, r1
 800a876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a87c:	f003 0304 	and.w	r3, r3, #4
 800a880:	2b00      	cmp	r3, #0
 800a882:	d00a      	beq.n	800a89a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	685b      	ldr	r3, [r3, #4]
 800a88a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	430a      	orrs	r2, r1
 800a898:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a89e:	f003 0308 	and.w	r3, r3, #8
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00a      	beq.n	800a8bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	430a      	orrs	r2, r1
 800a8ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c0:	f003 0310 	and.w	r3, r3, #16
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d00a      	beq.n	800a8de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	430a      	orrs	r2, r1
 800a8dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8e2:	f003 0320 	and.w	r3, r3, #32
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00a      	beq.n	800a900 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	689b      	ldr	r3, [r3, #8]
 800a8f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	430a      	orrs	r2, r1
 800a8fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d01a      	beq.n	800a942 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	430a      	orrs	r2, r1
 800a920:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a92a:	d10a      	bne.n	800a942 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	685b      	ldr	r3, [r3, #4]
 800a932:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	430a      	orrs	r2, r1
 800a940:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00a      	beq.n	800a964 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	430a      	orrs	r2, r1
 800a962:	605a      	str	r2, [r3, #4]
  }
}
 800a964:	bf00      	nop
 800a966:	370c      	adds	r7, #12
 800a968:	46bd      	mov	sp, r7
 800a96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96e:	4770      	bx	lr

0800a970 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af02      	add	r7, sp, #8
 800a976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2200      	movs	r2, #0
 800a97c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a980:	f7f7 ffe2 	bl	8002948 <HAL_GetTick>
 800a984:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0308 	and.w	r3, r3, #8
 800a990:	2b08      	cmp	r3, #8
 800a992:	d10e      	bne.n	800a9b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a994:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f000 f82f 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d001      	beq.n	800a9b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ae:	2303      	movs	r3, #3
 800a9b0:	e025      	b.n	800a9fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b04      	cmp	r3, #4
 800a9be:	d10e      	bne.n	800a9de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 f819 	bl	800aa06 <UART_WaitOnFlagUntilTimeout>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d001      	beq.n	800a9de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e00f      	b.n	800a9fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2220      	movs	r2, #32
 800a9ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3710      	adds	r7, #16
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}

0800aa06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b09c      	sub	sp, #112	; 0x70
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	60f8      	str	r0, [r7, #12]
 800aa0e:	60b9      	str	r1, [r7, #8]
 800aa10:	603b      	str	r3, [r7, #0]
 800aa12:	4613      	mov	r3, r2
 800aa14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa16:	e0a9      	b.n	800ab6c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1e:	f000 80a5 	beq.w	800ab6c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa22:	f7f7 ff91 	bl	8002948 <HAL_GetTick>
 800aa26:	4602      	mov	r2, r0
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	1ad3      	subs	r3, r2, r3
 800aa2c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d302      	bcc.n	800aa38 <UART_WaitOnFlagUntilTimeout+0x32>
 800aa32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d140      	bne.n	800aaba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa40:	e853 3f00 	ldrex	r3, [r3]
 800aa44:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa48:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa4c:	667b      	str	r3, [r7, #100]	; 0x64
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	461a      	mov	r2, r3
 800aa54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa56:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa58:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa5a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa5e:	e841 2300 	strex	r3, r2, [r1]
 800aa62:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d1e6      	bne.n	800aa38 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	3308      	adds	r3, #8
 800aa70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa74:	e853 3f00 	ldrex	r3, [r3]
 800aa78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7c:	f023 0301 	bic.w	r3, r3, #1
 800aa80:	663b      	str	r3, [r7, #96]	; 0x60
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	3308      	adds	r3, #8
 800aa88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa8a:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa92:	e841 2300 	strex	r3, r2, [r1]
 800aa96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d1e5      	bne.n	800aa6a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	2220      	movs	r2, #32
 800aaa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	2220      	movs	r2, #32
 800aaaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2200      	movs	r2, #0
 800aab2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	e069      	b.n	800ab8e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f003 0304 	and.w	r3, r3, #4
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d051      	beq.n	800ab6c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	69db      	ldr	r3, [r3, #28]
 800aace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aad6:	d149      	bne.n	800ab6c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aae0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	e853 3f00 	ldrex	r3, [r3]
 800aaee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aaf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aaf6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	461a      	mov	r2, r3
 800aafe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab00:	637b      	str	r3, [r7, #52]	; 0x34
 800ab02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab08:	e841 2300 	strex	r3, r2, [r1]
 800ab0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d1e6      	bne.n	800aae2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	3308      	adds	r3, #8
 800ab1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab1c:	697b      	ldr	r3, [r7, #20]
 800ab1e:	e853 3f00 	ldrex	r3, [r3]
 800ab22:	613b      	str	r3, [r7, #16]
   return(result);
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	f023 0301 	bic.w	r3, r3, #1
 800ab2a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	3308      	adds	r3, #8
 800ab32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab34:	623a      	str	r2, [r7, #32]
 800ab36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab38:	69f9      	ldr	r1, [r7, #28]
 800ab3a:	6a3a      	ldr	r2, [r7, #32]
 800ab3c:	e841 2300 	strex	r3, r2, [r1]
 800ab40:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab42:	69bb      	ldr	r3, [r7, #24]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1e5      	bne.n	800ab14 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	2220      	movs	r2, #32
 800ab4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2220      	movs	r2, #32
 800ab54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	2220      	movs	r2, #32
 800ab5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ab68:	2303      	movs	r3, #3
 800ab6a:	e010      	b.n	800ab8e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	69da      	ldr	r2, [r3, #28]
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	4013      	ands	r3, r2
 800ab76:	68ba      	ldr	r2, [r7, #8]
 800ab78:	429a      	cmp	r2, r3
 800ab7a:	bf0c      	ite	eq
 800ab7c:	2301      	moveq	r3, #1
 800ab7e:	2300      	movne	r3, #0
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	461a      	mov	r2, r3
 800ab84:	79fb      	ldrb	r3, [r7, #7]
 800ab86:	429a      	cmp	r2, r3
 800ab88:	f43f af46 	beq.w	800aa18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab8c:	2300      	movs	r3, #0
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3770      	adds	r7, #112	; 0x70
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab96:	b480      	push	{r7}
 800ab98:	b085      	sub	sp, #20
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aba4:	2b01      	cmp	r3, #1
 800aba6:	d101      	bne.n	800abac <HAL_UARTEx_DisableFifoMode+0x16>
 800aba8:	2302      	movs	r3, #2
 800abaa:	e027      	b.n	800abfc <HAL_UARTEx_DisableFifoMode+0x66>
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2201      	movs	r2, #1
 800abb0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2224      	movs	r2, #36	; 0x24
 800abb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681a      	ldr	r2, [r3, #0]
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f022 0201 	bic.w	r2, r2, #1
 800abd2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800abda:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2220      	movs	r2, #32
 800abee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2200      	movs	r2, #0
 800abf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	3714      	adds	r7, #20
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac18:	2b01      	cmp	r3, #1
 800ac1a:	d101      	bne.n	800ac20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac1c:	2302      	movs	r3, #2
 800ac1e:	e02d      	b.n	800ac7c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2201      	movs	r2, #1
 800ac24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2224      	movs	r2, #36	; 0x24
 800ac2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	f022 0201 	bic.w	r2, r2, #1
 800ac46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	683a      	ldr	r2, [r7, #0]
 800ac58:	430a      	orrs	r2, r1
 800ac5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f000 f84f 	bl	800ad00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2220      	movs	r2, #32
 800ac6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3710      	adds	r7, #16
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d101      	bne.n	800ac9c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac98:	2302      	movs	r3, #2
 800ac9a:	e02d      	b.n	800acf8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	2201      	movs	r2, #1
 800aca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2224      	movs	r2, #36	; 0x24
 800aca8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681a      	ldr	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	f022 0201 	bic.w	r2, r2, #1
 800acc2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	683a      	ldr	r2, [r7, #0]
 800acd4:	430a      	orrs	r2, r1
 800acd6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800acd8:	6878      	ldr	r0, [r7, #4]
 800acda:	f000 f811 	bl	800ad00 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2220      	movs	r2, #32
 800acea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d108      	bne.n	800ad22 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2201      	movs	r2, #1
 800ad14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad20:	e031      	b.n	800ad86 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad22:	2310      	movs	r3, #16
 800ad24:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad26:	2310      	movs	r3, #16
 800ad28:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	0e5b      	lsrs	r3, r3, #25
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	f003 0307 	and.w	r3, r3, #7
 800ad38:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	689b      	ldr	r3, [r3, #8]
 800ad40:	0f5b      	lsrs	r3, r3, #29
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	f003 0307 	and.w	r3, r3, #7
 800ad48:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	7b3a      	ldrb	r2, [r7, #12]
 800ad4e:	4911      	ldr	r1, [pc, #68]	; (800ad94 <UARTEx_SetNbDataToProcess+0x94>)
 800ad50:	5c8a      	ldrb	r2, [r1, r2]
 800ad52:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad56:	7b3a      	ldrb	r2, [r7, #12]
 800ad58:	490f      	ldr	r1, [pc, #60]	; (800ad98 <UARTEx_SetNbDataToProcess+0x98>)
 800ad5a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad5c:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad60:	b29a      	uxth	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad68:	7bfb      	ldrb	r3, [r7, #15]
 800ad6a:	7b7a      	ldrb	r2, [r7, #13]
 800ad6c:	4909      	ldr	r1, [pc, #36]	; (800ad94 <UARTEx_SetNbDataToProcess+0x94>)
 800ad6e:	5c8a      	ldrb	r2, [r1, r2]
 800ad70:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad74:	7b7a      	ldrb	r2, [r7, #13]
 800ad76:	4908      	ldr	r1, [pc, #32]	; (800ad98 <UARTEx_SetNbDataToProcess+0x98>)
 800ad78:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad7a:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad7e:	b29a      	uxth	r2, r3
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ad86:	bf00      	nop
 800ad88:	3714      	adds	r7, #20
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad90:	4770      	bx	lr
 800ad92:	bf00      	nop
 800ad94:	0801e0f0 	.word	0x0801e0f0
 800ad98:	0801e0f8 	.word	0x0801e0f8

0800ad9c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800ad9c:	b5b0      	push	{r4, r5, r7, lr}
 800ad9e:	b08c      	sub	sp, #48	; 0x30
 800ada0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800ada2:	4b96      	ldr	r3, [pc, #600]	; (800affc <MX_LWIP_Init+0x260>)
 800ada4:	22c0      	movs	r2, #192	; 0xc0
 800ada6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800ada8:	4b94      	ldr	r3, [pc, #592]	; (800affc <MX_LWIP_Init+0x260>)
 800adaa:	22a8      	movs	r2, #168	; 0xa8
 800adac:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800adae:	4b93      	ldr	r3, [pc, #588]	; (800affc <MX_LWIP_Init+0x260>)
 800adb0:	2201      	movs	r2, #1
 800adb2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 200;
 800adb4:	4b91      	ldr	r3, [pc, #580]	; (800affc <MX_LWIP_Init+0x260>)
 800adb6:	22c8      	movs	r2, #200	; 0xc8
 800adb8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800adba:	4b91      	ldr	r3, [pc, #580]	; (800b000 <MX_LWIP_Init+0x264>)
 800adbc:	22ff      	movs	r2, #255	; 0xff
 800adbe:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800adc0:	4b8f      	ldr	r3, [pc, #572]	; (800b000 <MX_LWIP_Init+0x264>)
 800adc2:	22ff      	movs	r2, #255	; 0xff
 800adc4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800adc6:	4b8e      	ldr	r3, [pc, #568]	; (800b000 <MX_LWIP_Init+0x264>)
 800adc8:	22ff      	movs	r2, #255	; 0xff
 800adca:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800adcc:	4b8c      	ldr	r3, [pc, #560]	; (800b000 <MX_LWIP_Init+0x264>)
 800adce:	2200      	movs	r2, #0
 800add0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800add2:	4b8c      	ldr	r3, [pc, #560]	; (800b004 <MX_LWIP_Init+0x268>)
 800add4:	22c0      	movs	r2, #192	; 0xc0
 800add6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800add8:	4b8a      	ldr	r3, [pc, #552]	; (800b004 <MX_LWIP_Init+0x268>)
 800adda:	22a8      	movs	r2, #168	; 0xa8
 800addc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800adde:	4b89      	ldr	r3, [pc, #548]	; (800b004 <MX_LWIP_Init+0x268>)
 800ade0:	2201      	movs	r2, #1
 800ade2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800ade4:	4b87      	ldr	r3, [pc, #540]	; (800b004 <MX_LWIP_Init+0x268>)
 800ade6:	2201      	movs	r2, #1
 800ade8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800adea:	2100      	movs	r1, #0
 800adec:	2000      	movs	r0, #0
 800adee:	f003 fe6d 	bl	800eacc <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800adf2:	4b82      	ldr	r3, [pc, #520]	; (800affc <MX_LWIP_Init+0x260>)
 800adf4:	781b      	ldrb	r3, [r3, #0]
 800adf6:	061a      	lsls	r2, r3, #24
 800adf8:	4b80      	ldr	r3, [pc, #512]	; (800affc <MX_LWIP_Init+0x260>)
 800adfa:	785b      	ldrb	r3, [r3, #1]
 800adfc:	041b      	lsls	r3, r3, #16
 800adfe:	431a      	orrs	r2, r3
 800ae00:	4b7e      	ldr	r3, [pc, #504]	; (800affc <MX_LWIP_Init+0x260>)
 800ae02:	789b      	ldrb	r3, [r3, #2]
 800ae04:	021b      	lsls	r3, r3, #8
 800ae06:	4313      	orrs	r3, r2
 800ae08:	4a7c      	ldr	r2, [pc, #496]	; (800affc <MX_LWIP_Init+0x260>)
 800ae0a:	78d2      	ldrb	r2, [r2, #3]
 800ae0c:	4313      	orrs	r3, r2
 800ae0e:	061a      	lsls	r2, r3, #24
 800ae10:	4b7a      	ldr	r3, [pc, #488]	; (800affc <MX_LWIP_Init+0x260>)
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	0619      	lsls	r1, r3, #24
 800ae16:	4b79      	ldr	r3, [pc, #484]	; (800affc <MX_LWIP_Init+0x260>)
 800ae18:	785b      	ldrb	r3, [r3, #1]
 800ae1a:	041b      	lsls	r3, r3, #16
 800ae1c:	4319      	orrs	r1, r3
 800ae1e:	4b77      	ldr	r3, [pc, #476]	; (800affc <MX_LWIP_Init+0x260>)
 800ae20:	789b      	ldrb	r3, [r3, #2]
 800ae22:	021b      	lsls	r3, r3, #8
 800ae24:	430b      	orrs	r3, r1
 800ae26:	4975      	ldr	r1, [pc, #468]	; (800affc <MX_LWIP_Init+0x260>)
 800ae28:	78c9      	ldrb	r1, [r1, #3]
 800ae2a:	430b      	orrs	r3, r1
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ae32:	431a      	orrs	r2, r3
 800ae34:	4b71      	ldr	r3, [pc, #452]	; (800affc <MX_LWIP_Init+0x260>)
 800ae36:	781b      	ldrb	r3, [r3, #0]
 800ae38:	0619      	lsls	r1, r3, #24
 800ae3a:	4b70      	ldr	r3, [pc, #448]	; (800affc <MX_LWIP_Init+0x260>)
 800ae3c:	785b      	ldrb	r3, [r3, #1]
 800ae3e:	041b      	lsls	r3, r3, #16
 800ae40:	4319      	orrs	r1, r3
 800ae42:	4b6e      	ldr	r3, [pc, #440]	; (800affc <MX_LWIP_Init+0x260>)
 800ae44:	789b      	ldrb	r3, [r3, #2]
 800ae46:	021b      	lsls	r3, r3, #8
 800ae48:	430b      	orrs	r3, r1
 800ae4a:	496c      	ldr	r1, [pc, #432]	; (800affc <MX_LWIP_Init+0x260>)
 800ae4c:	78c9      	ldrb	r1, [r1, #3]
 800ae4e:	430b      	orrs	r3, r1
 800ae50:	0a1b      	lsrs	r3, r3, #8
 800ae52:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ae56:	431a      	orrs	r2, r3
 800ae58:	4b68      	ldr	r3, [pc, #416]	; (800affc <MX_LWIP_Init+0x260>)
 800ae5a:	781b      	ldrb	r3, [r3, #0]
 800ae5c:	0619      	lsls	r1, r3, #24
 800ae5e:	4b67      	ldr	r3, [pc, #412]	; (800affc <MX_LWIP_Init+0x260>)
 800ae60:	785b      	ldrb	r3, [r3, #1]
 800ae62:	041b      	lsls	r3, r3, #16
 800ae64:	4319      	orrs	r1, r3
 800ae66:	4b65      	ldr	r3, [pc, #404]	; (800affc <MX_LWIP_Init+0x260>)
 800ae68:	789b      	ldrb	r3, [r3, #2]
 800ae6a:	021b      	lsls	r3, r3, #8
 800ae6c:	430b      	orrs	r3, r1
 800ae6e:	4963      	ldr	r1, [pc, #396]	; (800affc <MX_LWIP_Init+0x260>)
 800ae70:	78c9      	ldrb	r1, [r1, #3]
 800ae72:	430b      	orrs	r3, r1
 800ae74:	0e1b      	lsrs	r3, r3, #24
 800ae76:	4313      	orrs	r3, r2
 800ae78:	4a63      	ldr	r2, [pc, #396]	; (800b008 <MX_LWIP_Init+0x26c>)
 800ae7a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800ae7c:	4b60      	ldr	r3, [pc, #384]	; (800b000 <MX_LWIP_Init+0x264>)
 800ae7e:	781b      	ldrb	r3, [r3, #0]
 800ae80:	061a      	lsls	r2, r3, #24
 800ae82:	4b5f      	ldr	r3, [pc, #380]	; (800b000 <MX_LWIP_Init+0x264>)
 800ae84:	785b      	ldrb	r3, [r3, #1]
 800ae86:	041b      	lsls	r3, r3, #16
 800ae88:	431a      	orrs	r2, r3
 800ae8a:	4b5d      	ldr	r3, [pc, #372]	; (800b000 <MX_LWIP_Init+0x264>)
 800ae8c:	789b      	ldrb	r3, [r3, #2]
 800ae8e:	021b      	lsls	r3, r3, #8
 800ae90:	4313      	orrs	r3, r2
 800ae92:	4a5b      	ldr	r2, [pc, #364]	; (800b000 <MX_LWIP_Init+0x264>)
 800ae94:	78d2      	ldrb	r2, [r2, #3]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	061a      	lsls	r2, r3, #24
 800ae9a:	4b59      	ldr	r3, [pc, #356]	; (800b000 <MX_LWIP_Init+0x264>)
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	0619      	lsls	r1, r3, #24
 800aea0:	4b57      	ldr	r3, [pc, #348]	; (800b000 <MX_LWIP_Init+0x264>)
 800aea2:	785b      	ldrb	r3, [r3, #1]
 800aea4:	041b      	lsls	r3, r3, #16
 800aea6:	4319      	orrs	r1, r3
 800aea8:	4b55      	ldr	r3, [pc, #340]	; (800b000 <MX_LWIP_Init+0x264>)
 800aeaa:	789b      	ldrb	r3, [r3, #2]
 800aeac:	021b      	lsls	r3, r3, #8
 800aeae:	430b      	orrs	r3, r1
 800aeb0:	4953      	ldr	r1, [pc, #332]	; (800b000 <MX_LWIP_Init+0x264>)
 800aeb2:	78c9      	ldrb	r1, [r1, #3]
 800aeb4:	430b      	orrs	r3, r1
 800aeb6:	021b      	lsls	r3, r3, #8
 800aeb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800aebc:	431a      	orrs	r2, r3
 800aebe:	4b50      	ldr	r3, [pc, #320]	; (800b000 <MX_LWIP_Init+0x264>)
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	0619      	lsls	r1, r3, #24
 800aec4:	4b4e      	ldr	r3, [pc, #312]	; (800b000 <MX_LWIP_Init+0x264>)
 800aec6:	785b      	ldrb	r3, [r3, #1]
 800aec8:	041b      	lsls	r3, r3, #16
 800aeca:	4319      	orrs	r1, r3
 800aecc:	4b4c      	ldr	r3, [pc, #304]	; (800b000 <MX_LWIP_Init+0x264>)
 800aece:	789b      	ldrb	r3, [r3, #2]
 800aed0:	021b      	lsls	r3, r3, #8
 800aed2:	430b      	orrs	r3, r1
 800aed4:	494a      	ldr	r1, [pc, #296]	; (800b000 <MX_LWIP_Init+0x264>)
 800aed6:	78c9      	ldrb	r1, [r1, #3]
 800aed8:	430b      	orrs	r3, r1
 800aeda:	0a1b      	lsrs	r3, r3, #8
 800aedc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800aee0:	431a      	orrs	r2, r3
 800aee2:	4b47      	ldr	r3, [pc, #284]	; (800b000 <MX_LWIP_Init+0x264>)
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	0619      	lsls	r1, r3, #24
 800aee8:	4b45      	ldr	r3, [pc, #276]	; (800b000 <MX_LWIP_Init+0x264>)
 800aeea:	785b      	ldrb	r3, [r3, #1]
 800aeec:	041b      	lsls	r3, r3, #16
 800aeee:	4319      	orrs	r1, r3
 800aef0:	4b43      	ldr	r3, [pc, #268]	; (800b000 <MX_LWIP_Init+0x264>)
 800aef2:	789b      	ldrb	r3, [r3, #2]
 800aef4:	021b      	lsls	r3, r3, #8
 800aef6:	430b      	orrs	r3, r1
 800aef8:	4941      	ldr	r1, [pc, #260]	; (800b000 <MX_LWIP_Init+0x264>)
 800aefa:	78c9      	ldrb	r1, [r1, #3]
 800aefc:	430b      	orrs	r3, r1
 800aefe:	0e1b      	lsrs	r3, r3, #24
 800af00:	4313      	orrs	r3, r2
 800af02:	4a42      	ldr	r2, [pc, #264]	; (800b00c <MX_LWIP_Init+0x270>)
 800af04:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800af06:	4b3f      	ldr	r3, [pc, #252]	; (800b004 <MX_LWIP_Init+0x268>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	061a      	lsls	r2, r3, #24
 800af0c:	4b3d      	ldr	r3, [pc, #244]	; (800b004 <MX_LWIP_Init+0x268>)
 800af0e:	785b      	ldrb	r3, [r3, #1]
 800af10:	041b      	lsls	r3, r3, #16
 800af12:	431a      	orrs	r2, r3
 800af14:	4b3b      	ldr	r3, [pc, #236]	; (800b004 <MX_LWIP_Init+0x268>)
 800af16:	789b      	ldrb	r3, [r3, #2]
 800af18:	021b      	lsls	r3, r3, #8
 800af1a:	4313      	orrs	r3, r2
 800af1c:	4a39      	ldr	r2, [pc, #228]	; (800b004 <MX_LWIP_Init+0x268>)
 800af1e:	78d2      	ldrb	r2, [r2, #3]
 800af20:	4313      	orrs	r3, r2
 800af22:	061a      	lsls	r2, r3, #24
 800af24:	4b37      	ldr	r3, [pc, #220]	; (800b004 <MX_LWIP_Init+0x268>)
 800af26:	781b      	ldrb	r3, [r3, #0]
 800af28:	0619      	lsls	r1, r3, #24
 800af2a:	4b36      	ldr	r3, [pc, #216]	; (800b004 <MX_LWIP_Init+0x268>)
 800af2c:	785b      	ldrb	r3, [r3, #1]
 800af2e:	041b      	lsls	r3, r3, #16
 800af30:	4319      	orrs	r1, r3
 800af32:	4b34      	ldr	r3, [pc, #208]	; (800b004 <MX_LWIP_Init+0x268>)
 800af34:	789b      	ldrb	r3, [r3, #2]
 800af36:	021b      	lsls	r3, r3, #8
 800af38:	430b      	orrs	r3, r1
 800af3a:	4932      	ldr	r1, [pc, #200]	; (800b004 <MX_LWIP_Init+0x268>)
 800af3c:	78c9      	ldrb	r1, [r1, #3]
 800af3e:	430b      	orrs	r3, r1
 800af40:	021b      	lsls	r3, r3, #8
 800af42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800af46:	431a      	orrs	r2, r3
 800af48:	4b2e      	ldr	r3, [pc, #184]	; (800b004 <MX_LWIP_Init+0x268>)
 800af4a:	781b      	ldrb	r3, [r3, #0]
 800af4c:	0619      	lsls	r1, r3, #24
 800af4e:	4b2d      	ldr	r3, [pc, #180]	; (800b004 <MX_LWIP_Init+0x268>)
 800af50:	785b      	ldrb	r3, [r3, #1]
 800af52:	041b      	lsls	r3, r3, #16
 800af54:	4319      	orrs	r1, r3
 800af56:	4b2b      	ldr	r3, [pc, #172]	; (800b004 <MX_LWIP_Init+0x268>)
 800af58:	789b      	ldrb	r3, [r3, #2]
 800af5a:	021b      	lsls	r3, r3, #8
 800af5c:	430b      	orrs	r3, r1
 800af5e:	4929      	ldr	r1, [pc, #164]	; (800b004 <MX_LWIP_Init+0x268>)
 800af60:	78c9      	ldrb	r1, [r1, #3]
 800af62:	430b      	orrs	r3, r1
 800af64:	0a1b      	lsrs	r3, r3, #8
 800af66:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800af6a:	431a      	orrs	r2, r3
 800af6c:	4b25      	ldr	r3, [pc, #148]	; (800b004 <MX_LWIP_Init+0x268>)
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	0619      	lsls	r1, r3, #24
 800af72:	4b24      	ldr	r3, [pc, #144]	; (800b004 <MX_LWIP_Init+0x268>)
 800af74:	785b      	ldrb	r3, [r3, #1]
 800af76:	041b      	lsls	r3, r3, #16
 800af78:	4319      	orrs	r1, r3
 800af7a:	4b22      	ldr	r3, [pc, #136]	; (800b004 <MX_LWIP_Init+0x268>)
 800af7c:	789b      	ldrb	r3, [r3, #2]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	430b      	orrs	r3, r1
 800af82:	4920      	ldr	r1, [pc, #128]	; (800b004 <MX_LWIP_Init+0x268>)
 800af84:	78c9      	ldrb	r1, [r1, #3]
 800af86:	430b      	orrs	r3, r1
 800af88:	0e1b      	lsrs	r3, r3, #24
 800af8a:	4313      	orrs	r3, r2
 800af8c:	4a20      	ldr	r2, [pc, #128]	; (800b010 <MX_LWIP_Init+0x274>)
 800af8e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800af90:	4b20      	ldr	r3, [pc, #128]	; (800b014 <MX_LWIP_Init+0x278>)
 800af92:	9302      	str	r3, [sp, #8]
 800af94:	4b20      	ldr	r3, [pc, #128]	; (800b018 <MX_LWIP_Init+0x27c>)
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	2300      	movs	r3, #0
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	4b1c      	ldr	r3, [pc, #112]	; (800b010 <MX_LWIP_Init+0x274>)
 800af9e:	4a1b      	ldr	r2, [pc, #108]	; (800b00c <MX_LWIP_Init+0x270>)
 800afa0:	4919      	ldr	r1, [pc, #100]	; (800b008 <MX_LWIP_Init+0x26c>)
 800afa2:	481e      	ldr	r0, [pc, #120]	; (800b01c <MX_LWIP_Init+0x280>)
 800afa4:	f004 fc14 	bl	800f7d0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800afa8:	481c      	ldr	r0, [pc, #112]	; (800b01c <MX_LWIP_Init+0x280>)
 800afaa:	f004 fdc3 	bl	800fb34 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800afae:	4b1b      	ldr	r3, [pc, #108]	; (800b01c <MX_LWIP_Init+0x280>)
 800afb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800afb4:	089b      	lsrs	r3, r3, #2
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	b2db      	uxtb	r3, r3
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d003      	beq.n	800afc8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800afc0:	4816      	ldr	r0, [pc, #88]	; (800b01c <MX_LWIP_Init+0x280>)
 800afc2:	f004 fdc7 	bl	800fb54 <netif_set_up>
 800afc6:	e002      	b.n	800afce <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800afc8:	4814      	ldr	r0, [pc, #80]	; (800b01c <MX_LWIP_Init+0x280>)
 800afca:	f004 fe2f 	bl	800fc2c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800afce:	4914      	ldr	r1, [pc, #80]	; (800b020 <MX_LWIP_Init+0x284>)
 800afd0:	4812      	ldr	r0, [pc, #72]	; (800b01c <MX_LWIP_Init+0x280>)
 800afd2:	f004 fec1 	bl	800fd58 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800afd6:	4b13      	ldr	r3, [pc, #76]	; (800b024 <MX_LWIP_Init+0x288>)
 800afd8:	1d3c      	adds	r4, r7, #4
 800afda:	461d      	mov	r5, r3
 800afdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800afde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800afe0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800afe4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800afe8:	1d3b      	adds	r3, r7, #4
 800afea:	490c      	ldr	r1, [pc, #48]	; (800b01c <MX_LWIP_Init+0x280>)
 800afec:	4618      	mov	r0, r3
 800afee:	f000 fcd8 	bl	800b9a2 <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800aff2:	bf00      	nop
 800aff4:	3720      	adds	r7, #32
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bdb0      	pop	{r4, r5, r7, pc}
 800affa:	bf00      	nop
 800affc:	24004624 	.word	0x24004624
 800b000:	24004620 	.word	0x24004620
 800b004:	240045e4 	.word	0x240045e4
 800b008:	2400461c 	.word	0x2400461c
 800b00c:	24004628 	.word	0x24004628
 800b010:	2400462c 	.word	0x2400462c
 800b014:	0800ea09 	.word	0x0800ea09
 800b018:	0800b6ed 	.word	0x0800b6ed
 800b01c:	240045e8 	.word	0x240045e8
 800b020:	0800b029 	.word	0x0800b029
 800b024:	0801ad8c 	.word	0x0801ad8c

0800b028 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800b028:	b480      	push	{r7}
 800b02a:	b083      	sub	sp, #12
 800b02c:	af00      	add	r7, sp, #0
 800b02e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800b030:	bf00      	nop
 800b032:	370c      	adds	r7, #12
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr

0800b03c <HAL_ETH_MspInit>:
/* Private functions ---------------------------------------------------------*/
void pbuf_free_custom(struct pbuf *p);
void Error_Handler(void);

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b08e      	sub	sp, #56	; 0x38
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b048:	2200      	movs	r2, #0
 800b04a:	601a      	str	r2, [r3, #0]
 800b04c:	605a      	str	r2, [r3, #4]
 800b04e:	609a      	str	r2, [r3, #8]
 800b050:	60da      	str	r2, [r3, #12]
 800b052:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	4a5d      	ldr	r2, [pc, #372]	; (800b1d0 <HAL_ETH_MspInit+0x194>)
 800b05a:	4293      	cmp	r3, r2
 800b05c:	f040 80b3 	bne.w	800b1c6 <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800b060:	4b5c      	ldr	r3, [pc, #368]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b066:	4a5b      	ldr	r2, [pc, #364]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b068:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b06c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b070:	4b58      	ldr	r3, [pc, #352]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b072:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b07a:	623b      	str	r3, [r7, #32]
 800b07c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800b07e:	4b55      	ldr	r3, [pc, #340]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b084:	4a53      	ldr	r2, [pc, #332]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b086:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b08a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b08e:	4b51      	ldr	r3, [pc, #324]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b090:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b098:	61fb      	str	r3, [r7, #28]
 800b09a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800b09c:	4b4d      	ldr	r3, [pc, #308]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b09e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b0a2:	4a4c      	ldr	r2, [pc, #304]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0a8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800b0ac:	4b49      	ldr	r3, [pc, #292]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0b6:	61bb      	str	r3, [r7, #24]
 800b0b8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b0ba:	4b46      	ldr	r3, [pc, #280]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0c0:	4a44      	ldr	r2, [pc, #272]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0c2:	f043 0304 	orr.w	r3, r3, #4
 800b0c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b0ca:	4b42      	ldr	r3, [pc, #264]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0d0:	f003 0304 	and.w	r3, r3, #4
 800b0d4:	617b      	str	r3, [r7, #20]
 800b0d6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b0d8:	4b3e      	ldr	r3, [pc, #248]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0de:	4a3d      	ldr	r2, [pc, #244]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0e0:	f043 0301 	orr.w	r3, r3, #1
 800b0e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b0e8:	4b3a      	ldr	r3, [pc, #232]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0ee:	f003 0301 	and.w	r3, r3, #1
 800b0f2:	613b      	str	r3, [r7, #16]
 800b0f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b0f6:	4b37      	ldr	r3, [pc, #220]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b0fc:	4a35      	ldr	r2, [pc, #212]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b0fe:	f043 0302 	orr.w	r3, r3, #2
 800b102:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b106:	4b33      	ldr	r3, [pc, #204]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b10c:	f003 0302 	and.w	r3, r3, #2
 800b110:	60fb      	str	r3, [r7, #12]
 800b112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800b114:	4b2f      	ldr	r3, [pc, #188]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b116:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b11a:	4a2e      	ldr	r2, [pc, #184]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b11c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b120:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800b124:	4b2b      	ldr	r3, [pc, #172]	; (800b1d4 <HAL_ETH_MspInit+0x198>)
 800b126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b12a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b12e:	60bb      	str	r3, [r7, #8]
 800b130:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800b132:	2332      	movs	r3, #50	; 0x32
 800b134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b136:	2302      	movs	r3, #2
 800b138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b13a:	2300      	movs	r3, #0
 800b13c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b13e:	2300      	movs	r3, #0
 800b140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b142:	230b      	movs	r3, #11
 800b144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b14a:	4619      	mov	r1, r3
 800b14c:	4822      	ldr	r0, [pc, #136]	; (800b1d8 <HAL_ETH_MspInit+0x19c>)
 800b14e:	f7fa ff7f 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800b152:	2386      	movs	r3, #134	; 0x86
 800b154:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b156:	2302      	movs	r3, #2
 800b158:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b15e:	2300      	movs	r3, #0
 800b160:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b162:	230b      	movs	r3, #11
 800b164:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b16a:	4619      	mov	r1, r3
 800b16c:	481b      	ldr	r0, [pc, #108]	; (800b1dc <HAL_ETH_MspInit+0x1a0>)
 800b16e:	f7fa ff6f 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800b172:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b176:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b178:	2302      	movs	r3, #2
 800b17a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b17c:	2300      	movs	r3, #0
 800b17e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b180:	2300      	movs	r3, #0
 800b182:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b184:	230b      	movs	r3, #11
 800b186:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800b188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b18c:	4619      	mov	r1, r3
 800b18e:	4814      	ldr	r0, [pc, #80]	; (800b1e0 <HAL_ETH_MspInit+0x1a4>)
 800b190:	f7fa ff5e 	bl	8006050 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800b194:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800b198:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b19a:	2302      	movs	r3, #2
 800b19c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800b1a6:	230b      	movs	r3, #11
 800b1a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800b1aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	480c      	ldr	r0, [pc, #48]	; (800b1e4 <HAL_ETH_MspInit+0x1a8>)
 800b1b2:	f7fa ff4d 	bl	8006050 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	2105      	movs	r1, #5
 800b1ba:	203d      	movs	r0, #61	; 0x3d
 800b1bc:	f7f7 fcc0 	bl	8002b40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800b1c0:	203d      	movs	r0, #61	; 0x3d
 800b1c2:	f7f7 fcd7 	bl	8002b74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800b1c6:	bf00      	nop
 800b1c8:	3738      	adds	r7, #56	; 0x38
 800b1ca:	46bd      	mov	sp, r7
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	40028000 	.word	0x40028000
 800b1d4:	58024400 	.word	0x58024400
 800b1d8:	58020800 	.word	0x58020800
 800b1dc:	58020000 	.word	0x58020000
 800b1e0:	58020400 	.word	0x58020400
 800b1e4:	58021800 	.word	0x58021800

0800b1e8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b082      	sub	sp, #8
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800b1f0:	4b04      	ldr	r3, [pc, #16]	; (800b204 <HAL_ETH_RxCpltCallback+0x1c>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 fd63 	bl	800bcc0 <osSemaphoreRelease>
}
 800b1fa:	bf00      	nop
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	24000380 	.word	0x24000380

0800b208 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800b208:	b5b0      	push	{r4, r5, r7, lr}
 800b20a:	b0ac      	sub	sp, #176	; 0xb0
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
  uint32_t idx = 0;
 800b216:	2300      	movs	r3, #0
 800b218:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t duplex, speed = 0;
 800b21c:	2300      	movs	r3, #0
 800b21e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800b222:	4b91      	ldr	r3, [pc, #580]	; (800b468 <low_level_init+0x260>)
 800b224:	4a91      	ldr	r2, [pc, #580]	; (800b46c <low_level_init+0x264>)
 800b226:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800b22e:	2380      	movs	r3, #128	; 0x80
 800b230:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800b234:	23e1      	movs	r3, #225	; 0xe1
 800b236:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800b23a:	2300      	movs	r3, #0
 800b23c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800b240:	2300      	movs	r3, #0
 800b242:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800b246:	2300      	movs	r3, #0
 800b248:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800b24c:	4a86      	ldr	r2, [pc, #536]	; (800b468 <low_level_init+0x260>)
 800b24e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800b252:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800b254:	4b84      	ldr	r3, [pc, #528]	; (800b468 <low_level_init+0x260>)
 800b256:	2201      	movs	r2, #1
 800b258:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800b25a:	4b83      	ldr	r3, [pc, #524]	; (800b468 <low_level_init+0x260>)
 800b25c:	4a84      	ldr	r2, [pc, #528]	; (800b470 <low_level_init+0x268>)
 800b25e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800b260:	4b81      	ldr	r3, [pc, #516]	; (800b468 <low_level_init+0x260>)
 800b262:	4a84      	ldr	r2, [pc, #528]	; (800b474 <low_level_init+0x26c>)
 800b264:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800b266:	4b80      	ldr	r3, [pc, #512]	; (800b468 <low_level_init+0x260>)
 800b268:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b26c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800b26e:	487e      	ldr	r0, [pc, #504]	; (800b468 <low_level_init+0x260>)
 800b270:	f7f7 fdf4 	bl	8002e5c <HAL_ETH_Init>
 800b274:	4603      	mov	r3, r0
 800b276:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800b27a:	2234      	movs	r2, #52	; 0x34
 800b27c:	2100      	movs	r1, #0
 800b27e:	487e      	ldr	r0, [pc, #504]	; (800b478 <low_level_init+0x270>)
 800b280:	f00e fd0d 	bl	8019c9e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800b284:	4b7c      	ldr	r3, [pc, #496]	; (800b478 <low_level_init+0x270>)
 800b286:	2221      	movs	r2, #33	; 0x21
 800b288:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800b28a:	4b7b      	ldr	r3, [pc, #492]	; (800b478 <low_level_init+0x270>)
 800b28c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800b290:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800b292:	4b79      	ldr	r3, [pc, #484]	; (800b478 <low_level_init+0x270>)
 800b294:	2200      	movs	r2, #0
 800b296:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800b298:	4878      	ldr	r0, [pc, #480]	; (800b47c <low_level_init+0x274>)
 800b29a:	f004 f953 	bl	800f544 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	2206      	movs	r2, #6
 800b2a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800b2a6:	4b70      	ldr	r3, [pc, #448]	; (800b468 <low_level_init+0x260>)
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	781a      	ldrb	r2, [r3, #0]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800b2b2:	4b6d      	ldr	r3, [pc, #436]	; (800b468 <low_level_init+0x260>)
 800b2b4:	685b      	ldr	r3, [r3, #4]
 800b2b6:	785a      	ldrb	r2, [r3, #1]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800b2be:	4b6a      	ldr	r3, [pc, #424]	; (800b468 <low_level_init+0x260>)
 800b2c0:	685b      	ldr	r3, [r3, #4]
 800b2c2:	789a      	ldrb	r2, [r3, #2]
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800b2ca:	4b67      	ldr	r3, [pc, #412]	; (800b468 <low_level_init+0x260>)
 800b2cc:	685b      	ldr	r3, [r3, #4]
 800b2ce:	78da      	ldrb	r2, [r3, #3]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800b2d6:	4b64      	ldr	r3, [pc, #400]	; (800b468 <low_level_init+0x260>)
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	791a      	ldrb	r2, [r3, #4]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800b2e2:	4b61      	ldr	r3, [pc, #388]	; (800b468 <low_level_init+0x260>)
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	795a      	ldrb	r2, [r3, #5]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b2f4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b2fc:	f043 030a 	orr.w	r3, r3, #10
 800b300:	b2da      	uxtb	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b308:	2300      	movs	r3, #0
 800b30a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b30e:	e012      	b.n	800b336 <low_level_init+0x12e>
  {
    HAL_ETH_DescAssignMemory(&heth, idx, Rx_Buff[idx], NULL);
 800b310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b314:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800b318:	fb02 f303 	mul.w	r3, r2, r3
 800b31c:	4a58      	ldr	r2, [pc, #352]	; (800b480 <low_level_init+0x278>)
 800b31e:	441a      	add	r2, r3
 800b320:	2300      	movs	r3, #0
 800b322:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800b326:	4850      	ldr	r0, [pc, #320]	; (800b468 <low_level_init+0x260>)
 800b328:	f7f7 fe72 	bl	8003010 <HAL_ETH_DescAssignMemory>
  for(idx = 0; idx < ETH_RX_DESC_CNT; idx ++)
 800b32c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b330:	3301      	adds	r3, #1
 800b332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b33a:	2b03      	cmp	r3, #3
 800b33c:	d9e8      	bls.n	800b310 <low_level_init+0x108>
  }

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800b33e:	2300      	movs	r3, #0
 800b340:	62bb      	str	r3, [r7, #40]	; 0x28
 800b342:	2300      	movs	r3, #0
 800b344:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800b346:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b34a:	2101      	movs	r1, #1
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fc31 	bl	800bbb4 <osSemaphoreCreate>
 800b352:	4603      	mov	r3, r0
 800b354:	4a4b      	ldr	r2, [pc, #300]	; (800b484 <low_level_init+0x27c>)
 800b356:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800b358:	4b4b      	ldr	r3, [pc, #300]	; (800b488 <low_level_init+0x280>)
 800b35a:	f107 040c 	add.w	r4, r7, #12
 800b35e:	461d      	mov	r5, r3
 800b360:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b362:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b364:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b368:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800b36c:	f107 030c 	add.w	r3, r7, #12
 800b370:	6879      	ldr	r1, [r7, #4]
 800b372:	4618      	mov	r0, r3
 800b374:	f000 fb15 	bl	800b9a2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800b378:	4944      	ldr	r1, [pc, #272]	; (800b48c <low_level_init+0x284>)
 800b37a:	4845      	ldr	r0, [pc, #276]	; (800b490 <low_level_init+0x288>)
 800b37c:	f7f7 f933 	bl	80025e6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800b380:	4843      	ldr	r0, [pc, #268]	; (800b490 <low_level_init+0x288>)
 800b382:	f7f7 f962 	bl	800264a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800b386:	f897 30a3 	ldrb.w	r3, [r7, #163]	; 0xa3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d165      	bne.n	800b45a <low_level_init+0x252>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b38e:	4840      	ldr	r0, [pc, #256]	; (800b490 <low_level_init+0x288>)
 800b390:	f7f7 fa03 	bl	800279a <LAN8742_GetLinkState>
 800b394:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800b398:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	dc06      	bgt.n	800b3ae <low_level_init+0x1a6>
    {
      netif_set_link_down(netif);
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f004 fca9 	bl	800fcf8 <netif_set_link_down>
      netif_set_down(netif);
 800b3a6:	6878      	ldr	r0, [r7, #4]
 800b3a8:	f004 fc40 	bl	800fc2c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800b3ac:	e057      	b.n	800b45e <low_level_init+0x256>
 800b3ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b3b2:	3b02      	subs	r3, #2
 800b3b4:	2b03      	cmp	r3, #3
 800b3b6:	d82b      	bhi.n	800b410 <low_level_init+0x208>
 800b3b8:	a201      	add	r2, pc, #4	; (adr r2, 800b3c0 <low_level_init+0x1b8>)
 800b3ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3be:	bf00      	nop
 800b3c0:	0800b3d1 	.word	0x0800b3d1
 800b3c4:	0800b3e3 	.word	0x0800b3e3
 800b3c8:	0800b3f3 	.word	0x0800b3f3
 800b3cc:	0800b403 	.word	0x0800b403
        duplex = ETH_FULLDUPLEX_MODE;
 800b3d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b3d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b3dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b3e0:	e01f      	b.n	800b422 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b3e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b3ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b3f0:	e017      	b.n	800b422 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800b3f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b3f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b400:	e00f      	b.n	800b422 <low_level_init+0x21a>
        duplex = ETH_HALFDUPLEX_MODE;
 800b402:	2300      	movs	r3, #0
 800b404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_10M;
 800b408:	2300      	movs	r3, #0
 800b40a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b40e:	e008      	b.n	800b422 <low_level_init+0x21a>
        duplex = ETH_FULLDUPLEX_MODE;
 800b410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
        speed = ETH_SPEED_100M;
 800b418:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b41c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        break;
 800b420:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b422:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b426:	4619      	mov	r1, r3
 800b428:	480f      	ldr	r0, [pc, #60]	; (800b468 <low_level_init+0x260>)
 800b42a:	f7f8 fbc3 	bl	8003bb4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800b42e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b432:	653b      	str	r3, [r7, #80]	; 0x50
    MACConf.Speed = speed;
 800b434:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b438:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b43a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b43e:	4619      	mov	r1, r3
 800b440:	4809      	ldr	r0, [pc, #36]	; (800b468 <low_level_init+0x260>)
 800b442:	f7f8 fd8b 	bl	8003f5c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800b446:	4808      	ldr	r0, [pc, #32]	; (800b468 <low_level_init+0x260>)
 800b448:	f7f7 fe23 	bl	8003092 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f004 fb81 	bl	800fb54 <netif_set_up>
    netif_set_link_up(netif);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f004 fc1c 	bl	800fc90 <netif_set_link_up>
}
 800b458:	e001      	b.n	800b45e <low_level_init+0x256>
    Error_Handler();
 800b45a:	f7f6 fa2b 	bl	80018b4 <Error_Handler>
}
 800b45e:	bf00      	nop
 800b460:	37b0      	adds	r7, #176	; 0xb0
 800b462:	46bd      	mov	sp, r7
 800b464:	bdb0      	pop	{r4, r5, r7, pc}
 800b466:	bf00      	nop
 800b468:	2400471c 	.word	0x2400471c
 800b46c:	40028000 	.word	0x40028000
 800b470:	30000080 	.word	0x30000080
 800b474:	30000000 	.word	0x30000000
 800b478:	240047a4 	.word	0x240047a4
 800b47c:	0801e100 	.word	0x0801e100
 800b480:	30000100 	.word	0x30000100
 800b484:	24000380 	.word	0x24000380
 800b488:	0801adb0 	.word	0x0801adb0
 800b48c:	24000018 	.word	0x24000018
 800b490:	240046fc 	.word	0x240046fc

0800b494 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b092      	sub	sp, #72	; 0x48
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  uint32_t i=0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q;
  err_t errval = ERR_OK;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT];

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b4a8:	f107 030c 	add.w	r3, r7, #12
 800b4ac:	2230      	movs	r2, #48	; 0x30
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f00e fbf4 	bl	8019c9e <memset>

  for(q = p; q != NULL; q = q->next)
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	643b      	str	r3, [r7, #64]	; 0x40
 800b4ba:	e049      	b.n	800b550 <low_level_output+0xbc>
  {
    if(i >= ETH_TX_DESC_CNT)
 800b4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	d902      	bls.n	800b4c8 <low_level_output+0x34>
      return ERR_IF;
 800b4c2:	f06f 030b 	mvn.w	r3, #11
 800b4c6:	e056      	b.n	800b576 <low_level_output+0xe2>

    Txbuffer[i].buffer = q->payload;
 800b4c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4ca:	6859      	ldr	r1, [r3, #4]
 800b4cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4ce:	4613      	mov	r3, r2
 800b4d0:	005b      	lsls	r3, r3, #1
 800b4d2:	4413      	add	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b4da:	4413      	add	r3, r2
 800b4dc:	3b3c      	subs	r3, #60	; 0x3c
 800b4de:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800b4e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b4e2:	895b      	ldrh	r3, [r3, #10]
 800b4e4:	4619      	mov	r1, r3
 800b4e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4e8:	4613      	mov	r3, r2
 800b4ea:	005b      	lsls	r3, r3, #1
 800b4ec:	4413      	add	r3, r2
 800b4ee:	009b      	lsls	r3, r3, #2
 800b4f0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b4f4:	4413      	add	r3, r2
 800b4f6:	3b38      	subs	r3, #56	; 0x38
 800b4f8:	6019      	str	r1, [r3, #0]

    if(i>0)
 800b4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d012      	beq.n	800b526 <low_level_output+0x92>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800b500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b502:	1e5a      	subs	r2, r3, #1
 800b504:	f107 000c 	add.w	r0, r7, #12
 800b508:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b50a:	460b      	mov	r3, r1
 800b50c:	005b      	lsls	r3, r3, #1
 800b50e:	440b      	add	r3, r1
 800b510:	009b      	lsls	r3, r3, #2
 800b512:	18c1      	adds	r1, r0, r3
 800b514:	4613      	mov	r3, r2
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b520:	4413      	add	r3, r2
 800b522:	3b34      	subs	r3, #52	; 0x34
 800b524:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800b526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10a      	bne.n	800b544 <low_level_output+0xb0>
    {
      Txbuffer[i].next = NULL;
 800b52e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b530:	4613      	mov	r3, r2
 800b532:	005b      	lsls	r3, r3, #1
 800b534:	4413      	add	r3, r2
 800b536:	009b      	lsls	r3, r3, #2
 800b538:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800b53c:	4413      	add	r3, r2
 800b53e:	3b34      	subs	r3, #52	; 0x34
 800b540:	2200      	movs	r2, #0
 800b542:	601a      	str	r2, [r3, #0]
    }

    i++;
 800b544:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b546:	3301      	adds	r3, #1
 800b548:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800b54a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	643b      	str	r3, [r7, #64]	; 0x40
 800b550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b552:	2b00      	cmp	r3, #0
 800b554:	d1b2      	bne.n	800b4bc <low_level_output+0x28>
  }

  TxConfig.Length =  p->tot_len;
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	891b      	ldrh	r3, [r3, #8]
 800b55a:	461a      	mov	r2, r3
 800b55c:	4b08      	ldr	r3, [pc, #32]	; (800b580 <low_level_output+0xec>)
 800b55e:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800b560:	4a07      	ldr	r2, [pc, #28]	; (800b580 <low_level_output+0xec>)
 800b562:	f107 030c 	add.w	r3, r7, #12
 800b566:	6093      	str	r3, [r2, #8]

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800b568:	2214      	movs	r2, #20
 800b56a:	4905      	ldr	r1, [pc, #20]	; (800b580 <low_level_output+0xec>)
 800b56c:	4805      	ldr	r0, [pc, #20]	; (800b584 <low_level_output+0xf0>)
 800b56e:	f7f7 fe8f 	bl	8003290 <HAL_ETH_Transmit>

  return errval;
 800b572:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b576:	4618      	mov	r0, r3
 800b578:	3748      	adds	r7, #72	; 0x48
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	240047a4 	.word	0x240047a4
 800b584:	2400471c 	.word	0x2400471c

0800b588 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b098      	sub	sp, #96	; 0x60
 800b58c:	af02      	add	r7, sp, #8
 800b58e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800b590:	2300      	movs	r3, #0
 800b592:	657b      	str	r3, [r7, #84]	; 0x54
  ETH_BufferTypeDef RxBuff[ETH_RX_DESC_CNT];
  uint32_t framelength = 0, i = 0;
 800b594:	2300      	movs	r3, #0
 800b596:	60bb      	str	r3, [r7, #8]
 800b598:	2300      	movs	r3, #0
 800b59a:	653b      	str	r3, [r7, #80]	; 0x50
  struct pbuf_custom* custom_pbuf;

  memset(RxBuff, 0 , ETH_RX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800b59c:	f107 030c 	add.w	r3, r7, #12
 800b5a0:	2230      	movs	r2, #48	; 0x30
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f00e fb7a 	bl	8019c9e <memset>

  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	653b      	str	r3, [r7, #80]	; 0x50
 800b5ae:	e015      	b.n	800b5dc <low_level_input+0x54>
  {
    RxBuff[i].next=&RxBuff[i+1];
 800b5b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	f107 010c 	add.w	r1, r7, #12
 800b5b8:	4613      	mov	r3, r2
 800b5ba:	005b      	lsls	r3, r3, #1
 800b5bc:	4413      	add	r3, r2
 800b5be:	009b      	lsls	r3, r3, #2
 800b5c0:	4419      	add	r1, r3
 800b5c2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b5c4:	4613      	mov	r3, r2
 800b5c6:	005b      	lsls	r3, r3, #1
 800b5c8:	4413      	add	r3, r2
 800b5ca:	009b      	lsls	r3, r3, #2
 800b5cc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b5d0:	4413      	add	r3, r2
 800b5d2:	3b44      	subs	r3, #68	; 0x44
 800b5d4:	6019      	str	r1, [r3, #0]
  for(i = 0; i < ETH_RX_DESC_CNT -1; i++)
 800b5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5d8:	3301      	adds	r3, #1
 800b5da:	653b      	str	r3, [r7, #80]	; 0x50
 800b5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d9e6      	bls.n	800b5b0 <low_level_input+0x28>
  }

  if (HAL_ETH_GetRxDataBuffer(&heth, RxBuff) == HAL_OK)
 800b5e2:	f107 030c 	add.w	r3, r7, #12
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	4828      	ldr	r0, [pc, #160]	; (800b68c <low_level_input+0x104>)
 800b5ea:	f7f7 ffca 	bl	8003582 <HAL_ETH_GetRxDataBuffer>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d145      	bne.n	800b680 <low_level_input+0xf8>
  {
    HAL_ETH_GetRxDataLength(&heth, &framelength);
 800b5f4:	f107 0308 	add.w	r3, r7, #8
 800b5f8:	4619      	mov	r1, r3
 800b5fa:	4824      	ldr	r0, [pc, #144]	; (800b68c <low_level_input+0x104>)
 800b5fc:	f7f8 f85f 	bl	80036be <HAL_ETH_GetRxDataLength>

    /* Build Rx descriptor to be ready for next data reception */
    HAL_ETH_BuildRxDescriptors(&heth);
 800b600:	4822      	ldr	r0, [pc, #136]	; (800b68c <low_level_input+0x104>)
 800b602:	f7f8 f88f 	bl	8003724 <HAL_ETH_BuildRxDescriptors>

#if !defined(DUAL_CORE) || defined(CORE_CM7)
    /* Invalidate data cache for ETH Rx Buffers */
    SCB_InvalidateDCache_by_Addr((uint32_t *)RxBuff->buffer, framelength);
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b60c:	647a      	str	r2, [r7, #68]	; 0x44
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800b60e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b610:	2b00      	cmp	r3, #0
 800b612:	dd1d      	ble.n	800b650 <low_level_input+0xc8>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800b614:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b616:	f003 021f 	and.w	r2, r3, #31
 800b61a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b61c:	4413      	add	r3, r2
 800b61e:	643b      	str	r3, [r7, #64]	; 0x40
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800b620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b622:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("dsb 0xF":::"memory");
 800b624:	f3bf 8f4f 	dsb	sy
}
 800b628:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800b62a:	4a19      	ldr	r2, [pc, #100]	; (800b690 <low_level_input+0x108>)
 800b62c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b62e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800b632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b634:	3320      	adds	r3, #32
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800b638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b63a:	3b20      	subs	r3, #32
 800b63c:	643b      	str	r3, [r7, #64]	; 0x40
      } while ( op_size > 0 );
 800b63e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b640:	2b00      	cmp	r3, #0
 800b642:	dcf2      	bgt.n	800b62a <low_level_input+0xa2>
  __ASM volatile ("dsb 0xF":::"memory");
 800b644:	f3bf 8f4f 	dsb	sy
}
 800b648:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b64a:	f3bf 8f6f 	isb	sy
}
 800b64e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800b650:	bf00      	nop
#endif

    custom_pbuf  = (struct pbuf_custom*)LWIP_MEMPOOL_ALLOC(RX_POOL);
 800b652:	4810      	ldr	r0, [pc, #64]	; (800b694 <low_level_input+0x10c>)
 800b654:	f003 fff2 	bl	800f63c <memp_malloc_pool>
 800b658:	64f8      	str	r0, [r7, #76]	; 0x4c
    if(custom_pbuf != NULL)
 800b65a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d00f      	beq.n	800b680 <low_level_input+0xf8>
    {
      custom_pbuf->custom_free_function = pbuf_free_custom;
 800b660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b662:	4a0d      	ldr	r2, [pc, #52]	; (800b698 <low_level_input+0x110>)
 800b664:	611a      	str	r2, [r3, #16]
      p = pbuf_alloced_custom(PBUF_RAW, framelength, PBUF_REF, custom_pbuf, RxBuff->buffer, framelength);
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	b299      	uxth	r1, r3
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	68ba      	ldr	r2, [r7, #8]
 800b66e:	b292      	uxth	r2, r2
 800b670:	9201      	str	r2, [sp, #4]
 800b672:	9300      	str	r3, [sp, #0]
 800b674:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b676:	2241      	movs	r2, #65	; 0x41
 800b678:	2000      	movs	r0, #0
 800b67a:	f004 fd61 	bl	8010140 <pbuf_alloced_custom>
 800b67e:	6578      	str	r0, [r7, #84]	; 0x54
    }
  }

  return p;
 800b680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800b682:	4618      	mov	r0, r3
 800b684:	3758      	adds	r7, #88	; 0x58
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	2400471c 	.word	0x2400471c
 800b690:	e000ed00 	.word	0xe000ed00
 800b694:	0801e100 	.word	0x0801e100
 800b698:	0800b749 	.word	0x0800b749

0800b69c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800b69c:	b580      	push	{r7, lr}
 800b69e:	b084      	sub	sp, #16
 800b6a0:	af00      	add	r7, sp, #0
 800b6a2:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b6a8:	4b0f      	ldr	r3, [pc, #60]	; (800b6e8 <ethernetif_input+0x4c>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f04f 31ff 	mov.w	r1, #4294967295
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	f000 fab1 	bl	800bc18 <osSemaphoreWait>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1f5      	bne.n	800b6a8 <ethernetif_input+0xc>
    {
      do
      {
        p = low_level_input( netif );
 800b6bc:	68f8      	ldr	r0, [r7, #12]
 800b6be:	f7ff ff63 	bl	800b588 <low_level_input>
 800b6c2:	60b8      	str	r0, [r7, #8]
        if (p != NULL)
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d00a      	beq.n	800b6e0 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	68f9      	ldr	r1, [r7, #12]
 800b6d0:	68b8      	ldr	r0, [r7, #8]
 800b6d2:	4798      	blx	r3
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d002      	beq.n	800b6e0 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 800b6da:	68b8      	ldr	r0, [r7, #8]
 800b6dc:	f004 feea 	bl	80104b4 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1ea      	bne.n	800b6bc <ethernetif_input+0x20>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800b6e6:	e7df      	b.n	800b6a8 <ethernetif_input+0xc>
 800b6e8:	24000380 	.word	0x24000380

0800b6ec <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b082      	sub	sp, #8
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d106      	bne.n	800b708 <ethernetif_init+0x1c>
 800b6fa:	4b0e      	ldr	r3, [pc, #56]	; (800b734 <ethernetif_init+0x48>)
 800b6fc:	f240 2249 	movw	r2, #585	; 0x249
 800b700:	490d      	ldr	r1, [pc, #52]	; (800b738 <ethernetif_init+0x4c>)
 800b702:	480e      	ldr	r0, [pc, #56]	; (800b73c <ethernetif_init+0x50>)
 800b704:	f00e fb2e 	bl	8019d64 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2273      	movs	r2, #115	; 0x73
 800b70c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2274      	movs	r2, #116	; 0x74
 800b714:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	4a09      	ldr	r2, [pc, #36]	; (800b740 <ethernetif_init+0x54>)
 800b71c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	4a08      	ldr	r2, [pc, #32]	; (800b744 <ethernetif_init+0x58>)
 800b722:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff fd6f 	bl	800b208 <low_level_init>

  return ERR_OK;
 800b72a:	2300      	movs	r3, #0
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3708      	adds	r7, #8
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}
 800b734:	0801adcc 	.word	0x0801adcc
 800b738:	0801ade8 	.word	0x0801ade8
 800b73c:	0801adf8 	.word	0x0801adf8
 800b740:	080179a9 	.word	0x080179a9
 800b744:	0800b495 	.word	0x0800b495

0800b748 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b084      	sub	sp, #16
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	60fb      	str	r3, [r7, #12]

  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800b754:	68f9      	ldr	r1, [r7, #12]
 800b756:	4803      	ldr	r0, [pc, #12]	; (800b764 <pbuf_free_custom+0x1c>)
 800b758:	f003 ffe4 	bl	800f724 <memp_free_pool>
}
 800b75c:	bf00      	nop
 800b75e:	3710      	adds	r7, #16
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}
 800b764:	0801e100 	.word	0x0801e100

0800b768 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b76c:	f7f7 f8ec 	bl	8002948 <HAL_GetTick>
 800b770:	4603      	mov	r3, r0
}
 800b772:	4618      	mov	r0, r3
 800b774:	bd80      	pop	{r7, pc}
	...

0800b778 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800b77c:	4802      	ldr	r0, [pc, #8]	; (800b788 <ETH_PHY_IO_Init+0x10>)
 800b77e:	f7f8 fc07 	bl	8003f90 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	bd80      	pop	{r7, pc}
 800b788:	2400471c 	.word	0x2400471c

0800b78c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800b78c:	b480      	push	{r7}
 800b78e:	af00      	add	r7, sp, #0
  return 0;
 800b790:	2300      	movs	r3, #0
}
 800b792:	4618      	mov	r0, r3
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr

0800b79c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	60f8      	str	r0, [r7, #12]
 800b7a4:	60b9      	str	r1, [r7, #8]
 800b7a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	68f9      	ldr	r1, [r7, #12]
 800b7ae:	4807      	ldr	r0, [pc, #28]	; (800b7cc <ETH_PHY_IO_ReadReg+0x30>)
 800b7b0:	f7f8 f958 	bl	8003a64 <HAL_ETH_ReadPHYRegister>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d002      	beq.n	800b7c0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800b7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b7be:	e000      	b.n	800b7c2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800b7c0:	2300      	movs	r3, #0
}
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	3710      	adds	r7, #16
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}
 800b7ca:	bf00      	nop
 800b7cc:	2400471c 	.word	0x2400471c

0800b7d0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	68f9      	ldr	r1, [r7, #12]
 800b7e2:	4807      	ldr	r0, [pc, #28]	; (800b800 <ETH_PHY_IO_WriteReg+0x30>)
 800b7e4:	f7f8 f992 	bl	8003b0c <HAL_ETH_WritePHYRegister>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800b7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800b7f2:	e000      	b.n	800b7f6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	2400471c 	.word	0x2400471c

0800b804 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b808:	f7f7 f89e 	bl	8002948 <HAL_GetTick>
 800b80c:	4603      	mov	r3, r0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	bd80      	pop	{r7, pc}
	...

0800b814 <ethernet_link_thread>:
  * @param  argument: netif
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b0a0      	sub	sp, #128	; 0x80
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf;
  int32_t PHYLinkState;
  uint32_t linkchanged = 0, speed = 0, duplex =0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b820:	2300      	movs	r3, #0
 800b822:	67bb      	str	r3, [r7, #120]	; 0x78
 800b824:	2300      	movs	r3, #0
 800b826:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	673b      	str	r3, [r7, #112]	; 0x70

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b82c:	483a      	ldr	r0, [pc, #232]	; (800b918 <ethernet_link_thread+0x104>)
 800b82e:	f7f6 ffb4 	bl	800279a <LAN8742_GetLinkState>
 800b832:	66f8      	str	r0, [r7, #108]	; 0x6c

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800b834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b836:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b83a:	089b      	lsrs	r3, r3, #2
 800b83c:	f003 0301 	and.w	r3, r3, #1
 800b840:	b2db      	uxtb	r3, r3
 800b842:	2b00      	cmp	r3, #0
 800b844:	d00c      	beq.n	800b860 <ethernet_link_thread+0x4c>
 800b846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b848:	2b01      	cmp	r3, #1
 800b84a:	dc09      	bgt.n	800b860 <ethernet_link_thread+0x4c>
  {
    HAL_ETH_Stop_IT(&heth);
 800b84c:	4833      	ldr	r0, [pc, #204]	; (800b91c <ethernet_link_thread+0x108>)
 800b84e:	f7f7 fca5 	bl	800319c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800b852:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b854:	f004 f9ea 	bl	800fc2c <netif_set_down>
    netif_set_link_down(netif);
 800b858:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b85a:	f004 fa4d 	bl	800fcf8 <netif_set_link_down>
 800b85e:	e056      	b.n	800b90e <ethernet_link_thread+0xfa>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800b860:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b862:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b866:	f003 0304 	and.w	r3, r3, #4
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d14f      	bne.n	800b90e <ethernet_link_thread+0xfa>
 800b86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b870:	2b01      	cmp	r3, #1
 800b872:	dd4c      	ble.n	800b90e <ethernet_link_thread+0xfa>
 800b874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b876:	3b02      	subs	r3, #2
 800b878:	2b03      	cmp	r3, #3
 800b87a:	d82b      	bhi.n	800b8d4 <ethernet_link_thread+0xc0>
 800b87c:	a201      	add	r2, pc, #4	; (adr r2, 800b884 <ethernet_link_thread+0x70>)
 800b87e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b882:	bf00      	nop
 800b884:	0800b895 	.word	0x0800b895
 800b888:	0800b8a7 	.word	0x0800b8a7
 800b88c:	0800b8b7 	.word	0x0800b8b7
 800b890:	0800b8c7 	.word	0x0800b8c7
  {
    switch (PHYLinkState)
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b894:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b898:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b89a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b89e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b8a4:	e017      	b.n	800b8d6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800b8aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b8ae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b8b4:	e00f      	b.n	800b8d6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800b8b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8ba:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b8c4:	e007      	b.n	800b8d6 <ethernet_link_thread+0xc2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800b8d2:	e000      	b.n	800b8d6 <ethernet_link_thread+0xc2>
    default:
      break;
 800b8d4:	bf00      	nop
    }

    if(linkchanged)
 800b8d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d018      	beq.n	800b90e <ethernet_link_thread+0xfa>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800b8dc:	f107 0308 	add.w	r3, r7, #8
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	480e      	ldr	r0, [pc, #56]	; (800b91c <ethernet_link_thread+0x108>)
 800b8e4:	f7f8 f966 	bl	8003bb4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800b8e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b8ea:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800b8ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b8ee:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800b8f0:	f107 0308 	add.w	r3, r7, #8
 800b8f4:	4619      	mov	r1, r3
 800b8f6:	4809      	ldr	r0, [pc, #36]	; (800b91c <ethernet_link_thread+0x108>)
 800b8f8:	f7f8 fb30 	bl	8003f5c <HAL_ETH_SetMACConfig>

      HAL_ETH_Start_IT(&heth);
 800b8fc:	4807      	ldr	r0, [pc, #28]	; (800b91c <ethernet_link_thread+0x108>)
 800b8fe:	f7f7 fbc8 	bl	8003092 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800b902:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b904:	f004 f926 	bl	800fb54 <netif_set_up>
      netif_set_link_up(netif);
 800b908:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b90a:	f004 f9c1 	bl	800fc90 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800b90e:	2064      	movs	r0, #100	; 0x64
 800b910:	f000 f894 	bl	800ba3c <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800b914:	e78a      	b.n	800b82c <ethernet_link_thread+0x18>
 800b916:	bf00      	nop
 800b918:	240046fc 	.word	0x240046fc
 800b91c:	2400471c 	.word	0x2400471c

0800b920 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	4603      	mov	r3, r0
 800b928:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b92a:	2300      	movs	r3, #0
 800b92c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b92e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b932:	2b84      	cmp	r3, #132	; 0x84
 800b934:	d005      	beq.n	800b942 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b936:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	4413      	add	r3, r2
 800b93e:	3303      	adds	r3, #3
 800b940:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b942:	68fb      	ldr	r3, [r7, #12]
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b956:	f3ef 8305 	mrs	r3, IPSR
 800b95a:	607b      	str	r3, [r7, #4]
  return(result);
 800b95c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b95e:	2b00      	cmp	r3, #0
 800b960:	bf14      	ite	ne
 800b962:	2301      	movne	r3, #1
 800b964:	2300      	moveq	r3, #0
 800b966:	b2db      	uxtb	r3, r3
}
 800b968:	4618      	mov	r0, r3
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b978:	f001 fca6 	bl	800d2c8 <vTaskStartScheduler>
  
  return osOK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	bd80      	pop	{r7, pc}

0800b982 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b982:	b580      	push	{r7, lr}
 800b984:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b986:	f7ff ffe3 	bl	800b950 <inHandlerMode>
 800b98a:	4603      	mov	r3, r0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b990:	f001 fdc0 	bl	800d514 <xTaskGetTickCountFromISR>
 800b994:	4603      	mov	r3, r0
 800b996:	e002      	b.n	800b99e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b998:	f001 fdac 	bl	800d4f4 <xTaskGetTickCount>
 800b99c:	4603      	mov	r3, r0
  }
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	bd80      	pop	{r7, pc}

0800b9a2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b9a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9a4:	b089      	sub	sp, #36	; 0x24
 800b9a6:	af04      	add	r7, sp, #16
 800b9a8:	6078      	str	r0, [r7, #4]
 800b9aa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	695b      	ldr	r3, [r3, #20]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d020      	beq.n	800b9f6 <osThreadCreate+0x54>
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	699b      	ldr	r3, [r3, #24]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d01c      	beq.n	800b9f6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	685c      	ldr	r4, [r3, #4]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681d      	ldr	r5, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	691e      	ldr	r6, [r3, #16]
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7ff ffa6 	bl	800b920 <makeFreeRtosPriority>
 800b9d4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	695b      	ldr	r3, [r3, #20]
 800b9da:	687a      	ldr	r2, [r7, #4]
 800b9dc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9de:	9202      	str	r2, [sp, #8]
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	9100      	str	r1, [sp, #0]
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	4632      	mov	r2, r6
 800b9e8:	4629      	mov	r1, r5
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f001 fa7e 	bl	800ceec <xTaskCreateStatic>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	60fb      	str	r3, [r7, #12]
 800b9f4:	e01c      	b.n	800ba30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685c      	ldr	r4, [r3, #4]
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ba02:	b29e      	uxth	r6, r3
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff ff88 	bl	800b920 <makeFreeRtosPriority>
 800ba10:	4602      	mov	r2, r0
 800ba12:	f107 030c 	add.w	r3, r7, #12
 800ba16:	9301      	str	r3, [sp, #4]
 800ba18:	9200      	str	r2, [sp, #0]
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	4632      	mov	r2, r6
 800ba1e:	4629      	mov	r1, r5
 800ba20:	4620      	mov	r0, r4
 800ba22:	f001 fac0 	bl	800cfa6 <xTaskCreate>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b01      	cmp	r3, #1
 800ba2a:	d001      	beq.n	800ba30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ba2c:	2300      	movs	r3, #0
 800ba2e:	e000      	b.n	800ba32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ba30:	68fb      	ldr	r3, [r7, #12]
}
 800ba32:	4618      	mov	r0, r3
 800ba34:	3714      	adds	r7, #20
 800ba36:	46bd      	mov	sp, r7
 800ba38:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ba3c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a09      	ldr	r2, [pc, #36]	; (800ba6c <osDelay+0x30>)
 800ba48:	fba2 2303 	umull	r2, r3, r2, r3
 800ba4c:	08db      	lsrs	r3, r3, #3
 800ba4e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d001      	beq.n	800ba5a <osDelay+0x1e>
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	e000      	b.n	800ba5c <osDelay+0x20>
 800ba5a:	2301      	movs	r3, #1
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f001 fbff 	bl	800d260 <vTaskDelay>
  
  return osOK;
 800ba62:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ba64:	4618      	mov	r0, r3
 800ba66:	3710      	adds	r7, #16
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	cccccccd 	.word	0xcccccccd

0800ba70 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d007      	beq.n	800ba90 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	4619      	mov	r1, r3
 800ba86:	2001      	movs	r0, #1
 800ba88:	f000 fc5b 	bl	800c342 <xQueueCreateMutexStatic>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	e003      	b.n	800ba98 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ba90:	2001      	movs	r0, #1
 800ba92:	f000 fc3e 	bl	800c312 <xQueueCreateMutex>
 800ba96:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}

0800baa0 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
 800baa8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800baaa:	2300      	movs	r3, #0
 800baac:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d101      	bne.n	800bab8 <osMutexWait+0x18>
    return osErrorParameter;
 800bab4:	2380      	movs	r3, #128	; 0x80
 800bab6:	e03e      	b.n	800bb36 <osMutexWait+0x96>
  }
  
  ticks = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bac2:	d103      	bne.n	800bacc <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800bac4:	f04f 33ff 	mov.w	r3, #4294967295
 800bac8:	60fb      	str	r3, [r7, #12]
 800baca:	e00d      	b.n	800bae8 <osMutexWait+0x48>
  }
  else if (millisec != 0) {
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d00a      	beq.n	800bae8 <osMutexWait+0x48>
    ticks = millisec / portTICK_PERIOD_MS;
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	4a1a      	ldr	r2, [pc, #104]	; (800bb40 <osMutexWait+0xa0>)
 800bad6:	fba2 2303 	umull	r2, r3, r2, r3
 800bada:	08db      	lsrs	r3, r3, #3
 800badc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <osMutexWait+0x48>
      ticks = 1;
 800bae4:	2301      	movs	r3, #1
 800bae6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bae8:	f7ff ff32 	bl	800b950 <inHandlerMode>
 800baec:	4603      	mov	r3, r0
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d017      	beq.n	800bb22 <osMutexWait+0x82>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800baf2:	f107 0308 	add.w	r3, r7, #8
 800baf6:	461a      	mov	r2, r3
 800baf8:	2100      	movs	r1, #0
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f001 f84e 	bl	800cb9c <xQueueReceiveFromISR>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d001      	beq.n	800bb0a <osMutexWait+0x6a>
      return osErrorOS;
 800bb06:	23ff      	movs	r3, #255	; 0xff
 800bb08:	e015      	b.n	800bb36 <osMutexWait+0x96>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bb0a:	68bb      	ldr	r3, [r7, #8]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d011      	beq.n	800bb34 <osMutexWait+0x94>
 800bb10:	4b0c      	ldr	r3, [pc, #48]	; (800bb44 <osMutexWait+0xa4>)
 800bb12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb16:	601a      	str	r2, [r3, #0]
 800bb18:	f3bf 8f4f 	dsb	sy
 800bb1c:	f3bf 8f6f 	isb	sy
 800bb20:	e008      	b.n	800bb34 <osMutexWait+0x94>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800bb22:	68f9      	ldr	r1, [r7, #12]
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 ff2d 	bl	800c984 <xQueueSemaphoreTake>
 800bb2a:	4603      	mov	r3, r0
 800bb2c:	2b01      	cmp	r3, #1
 800bb2e:	d001      	beq.n	800bb34 <osMutexWait+0x94>
    return osErrorOS;
 800bb30:	23ff      	movs	r3, #255	; 0xff
 800bb32:	e000      	b.n	800bb36 <osMutexWait+0x96>
  }
  
  return osOK;
 800bb34:	2300      	movs	r3, #0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	cccccccd 	.word	0xcccccccd
 800bb44:	e000ed04 	.word	0xe000ed04

0800bb48 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800bb48:	b580      	push	{r7, lr}
 800bb4a:	b084      	sub	sp, #16
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bb50:	2300      	movs	r3, #0
 800bb52:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bb54:	2300      	movs	r3, #0
 800bb56:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800bb58:	f7ff fefa 	bl	800b950 <inHandlerMode>
 800bb5c:	4603      	mov	r3, r0
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d016      	beq.n	800bb90 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800bb62:	f107 0308 	add.w	r3, r7, #8
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 fd9e 	bl	800c6aa <xQueueGiveFromISR>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b01      	cmp	r3, #1
 800bb72:	d001      	beq.n	800bb78 <osMutexRelease+0x30>
      return osErrorOS;
 800bb74:	23ff      	movs	r3, #255	; 0xff
 800bb76:	e017      	b.n	800bba8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d013      	beq.n	800bba6 <osMutexRelease+0x5e>
 800bb7e:	4b0c      	ldr	r3, [pc, #48]	; (800bbb0 <osMutexRelease+0x68>)
 800bb80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb84:	601a      	str	r2, [r3, #0]
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	e00a      	b.n	800bba6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800bb90:	2300      	movs	r3, #0
 800bb92:	2200      	movs	r2, #0
 800bb94:	2100      	movs	r1, #0
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fbee 	bl	800c378 <xQueueGenericSend>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	2b01      	cmp	r3, #1
 800bba0:	d001      	beq.n	800bba6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800bba2:	23ff      	movs	r3, #255	; 0xff
 800bba4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800bba6:	68fb      	ldr	r3, [r7, #12]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	e000ed04 	.word	0xe000ed04

0800bbb4 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b086      	sub	sp, #24
 800bbb8:	af02      	add	r7, sp, #8
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685b      	ldr	r3, [r3, #4]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d00f      	beq.n	800bbe6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d10a      	bne.n	800bbe2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	685b      	ldr	r3, [r3, #4]
 800bbd0:	2203      	movs	r2, #3
 800bbd2:	9200      	str	r2, [sp, #0]
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	2100      	movs	r1, #0
 800bbd8:	2001      	movs	r0, #1
 800bbda:	f000 faab 	bl	800c134 <xQueueGenericCreateStatic>
 800bbde:	4603      	mov	r3, r0
 800bbe0:	e016      	b.n	800bc10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	e014      	b.n	800bc10 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	2b01      	cmp	r3, #1
 800bbea:	d110      	bne.n	800bc0e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800bbec:	2203      	movs	r2, #3
 800bbee:	2100      	movs	r1, #0
 800bbf0:	2001      	movs	r0, #1
 800bbf2:	f000 fb17 	bl	800c224 <xQueueGenericCreate>
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d005      	beq.n	800bc0a <osSemaphoreCreate+0x56>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	2200      	movs	r2, #0
 800bc02:	2100      	movs	r1, #0
 800bc04:	68f8      	ldr	r0, [r7, #12]
 800bc06:	f000 fbb7 	bl	800c378 <xQueueGenericSend>
      return sema;
 800bc0a:	68fb      	ldr	r3, [r7, #12]
 800bc0c:	e000      	b.n	800bc10 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800bc0e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800bc10:	4618      	mov	r0, r3
 800bc12:	3710      	adds	r7, #16
 800bc14:	46bd      	mov	sp, r7
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800bc22:	2300      	movs	r3, #0
 800bc24:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d101      	bne.n	800bc30 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800bc2c:	2380      	movs	r3, #128	; 0x80
 800bc2e:	e03e      	b.n	800bcae <osSemaphoreWait+0x96>
  }
  
  ticks = 0;
 800bc30:	2300      	movs	r3, #0
 800bc32:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800bc34:	683b      	ldr	r3, [r7, #0]
 800bc36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3a:	d103      	bne.n	800bc44 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800bc3c:	f04f 33ff 	mov.w	r3, #4294967295
 800bc40:	60fb      	str	r3, [r7, #12]
 800bc42:	e00d      	b.n	800bc60 <osSemaphoreWait+0x48>
  }
  else if (millisec != 0) {
 800bc44:	683b      	ldr	r3, [r7, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00a      	beq.n	800bc60 <osSemaphoreWait+0x48>
    ticks = millisec / portTICK_PERIOD_MS;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	4a1a      	ldr	r2, [pc, #104]	; (800bcb8 <osSemaphoreWait+0xa0>)
 800bc4e:	fba2 2303 	umull	r2, r3, r2, r3
 800bc52:	08db      	lsrs	r3, r3, #3
 800bc54:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d101      	bne.n	800bc60 <osSemaphoreWait+0x48>
      ticks = 1;
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800bc60:	f7ff fe76 	bl	800b950 <inHandlerMode>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d017      	beq.n	800bc9a <osSemaphoreWait+0x82>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bc6a:	f107 0308 	add.w	r3, r7, #8
 800bc6e:	461a      	mov	r2, r3
 800bc70:	2100      	movs	r1, #0
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 ff92 	bl	800cb9c <xQueueReceiveFromISR>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d001      	beq.n	800bc82 <osSemaphoreWait+0x6a>
      return osErrorOS;
 800bc7e:	23ff      	movs	r3, #255	; 0xff
 800bc80:	e015      	b.n	800bcae <osSemaphoreWait+0x96>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d011      	beq.n	800bcac <osSemaphoreWait+0x94>
 800bc88:	4b0c      	ldr	r3, [pc, #48]	; (800bcbc <osSemaphoreWait+0xa4>)
 800bc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc8e:	601a      	str	r2, [r3, #0]
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	e008      	b.n	800bcac <osSemaphoreWait+0x94>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800bc9a:	68f9      	ldr	r1, [r7, #12]
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fe71 	bl	800c984 <xQueueSemaphoreTake>
 800bca2:	4603      	mov	r3, r0
 800bca4:	2b01      	cmp	r3, #1
 800bca6:	d001      	beq.n	800bcac <osSemaphoreWait+0x94>
    return osErrorOS;
 800bca8:	23ff      	movs	r3, #255	; 0xff
 800bcaa:	e000      	b.n	800bcae <osSemaphoreWait+0x96>
  }
  
  return osOK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3710      	adds	r7, #16
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	cccccccd 	.word	0xcccccccd
 800bcbc:	e000ed04 	.word	0xe000ed04

0800bcc0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800bcc0:	b580      	push	{r7, lr}
 800bcc2:	b084      	sub	sp, #16
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800bccc:	2300      	movs	r3, #0
 800bcce:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800bcd0:	f7ff fe3e 	bl	800b950 <inHandlerMode>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d016      	beq.n	800bd08 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800bcda:	f107 0308 	add.w	r3, r7, #8
 800bcde:	4619      	mov	r1, r3
 800bce0:	6878      	ldr	r0, [r7, #4]
 800bce2:	f000 fce2 	bl	800c6aa <xQueueGiveFromISR>
 800bce6:	4603      	mov	r3, r0
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d001      	beq.n	800bcf0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800bcec:	23ff      	movs	r3, #255	; 0xff
 800bcee:	e017      	b.n	800bd20 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bcf0:	68bb      	ldr	r3, [r7, #8]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d013      	beq.n	800bd1e <osSemaphoreRelease+0x5e>
 800bcf6:	4b0c      	ldr	r3, [pc, #48]	; (800bd28 <osSemaphoreRelease+0x68>)
 800bcf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcfc:	601a      	str	r2, [r3, #0]
 800bcfe:	f3bf 8f4f 	dsb	sy
 800bd02:	f3bf 8f6f 	isb	sy
 800bd06:	e00a      	b.n	800bd1e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800bd08:	2300      	movs	r3, #0
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	2100      	movs	r1, #0
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fb32 	bl	800c378 <xQueueGenericSend>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d001      	beq.n	800bd1e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800bd1a:	23ff      	movs	r3, #255	; 0xff
 800bd1c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	3710      	adds	r7, #16
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bd80      	pop	{r7, pc}
 800bd28:	e000ed04 	.word	0xe000ed04

0800bd2c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bd2c:	b590      	push	{r4, r7, lr}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af02      	add	r7, sp, #8
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d011      	beq.n	800bd62 <osMessageCreate+0x36>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d00d      	beq.n	800bd62 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6859      	ldr	r1, [r3, #4]
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	689a      	ldr	r2, [r3, #8]
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	2400      	movs	r4, #0
 800bd58:	9400      	str	r4, [sp, #0]
 800bd5a:	f000 f9eb 	bl	800c134 <xQueueGenericCreateStatic>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	e008      	b.n	800bd74 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	685b      	ldr	r3, [r3, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	f000 fa59 	bl	800c224 <xQueueGenericCreate>
 800bd72:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	370c      	adds	r7, #12
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	bd90      	pop	{r4, r7, pc}

0800bd7c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a1c      	ldr	r2, [pc, #112]	; (800be00 <osMessagePut+0x84>)
 800bd90:	fba2 2303 	umull	r2, r3, r2, r3
 800bd94:	08db      	lsrs	r3, r3, #3
 800bd96:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d101      	bne.n	800bda2 <osMessagePut+0x26>
    ticks = 1;
 800bd9e:	2301      	movs	r3, #1
 800bda0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800bda2:	f7ff fdd5 	bl	800b950 <inHandlerMode>
 800bda6:	4603      	mov	r3, r0
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d018      	beq.n	800bdde <osMessagePut+0x62>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800bdac:	f107 0210 	add.w	r2, r7, #16
 800bdb0:	f107 0108 	add.w	r1, r7, #8
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	68f8      	ldr	r0, [r7, #12]
 800bdb8:	f000 fbdc 	bl	800c574 <xQueueGenericSendFromISR>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d001      	beq.n	800bdc6 <osMessagePut+0x4a>
      return osErrorOS;
 800bdc2:	23ff      	movs	r3, #255	; 0xff
 800bdc4:	e018      	b.n	800bdf8 <osMessagePut+0x7c>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d014      	beq.n	800bdf6 <osMessagePut+0x7a>
 800bdcc:	4b0d      	ldr	r3, [pc, #52]	; (800be04 <osMessagePut+0x88>)
 800bdce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd2:	601a      	str	r2, [r3, #0]
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	f3bf 8f6f 	isb	sy
 800bddc:	e00b      	b.n	800bdf6 <osMessagePut+0x7a>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800bdde:	f107 0108 	add.w	r1, r7, #8
 800bde2:	2300      	movs	r3, #0
 800bde4:	697a      	ldr	r2, [r7, #20]
 800bde6:	68f8      	ldr	r0, [r7, #12]
 800bde8:	f000 fac6 	bl	800c378 <xQueueGenericSend>
 800bdec:	4603      	mov	r3, r0
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d001      	beq.n	800bdf6 <osMessagePut+0x7a>
      return osErrorOS;
 800bdf2:	23ff      	movs	r3, #255	; 0xff
 800bdf4:	e000      	b.n	800bdf8 <osMessagePut+0x7c>
    }
  }
  
  return osOK;
 800bdf6:	2300      	movs	r3, #0
}
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	3718      	adds	r7, #24
 800bdfc:	46bd      	mov	sp, r7
 800bdfe:	bd80      	pop	{r7, pc}
 800be00:	cccccccd 	.word	0xcccccccd
 800be04:	e000ed04 	.word	0xe000ed04

0800be08 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800be08:	b590      	push	{r4, r7, lr}
 800be0a:	b08b      	sub	sp, #44	; 0x2c
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	60f8      	str	r0, [r7, #12]
 800be10:	60b9      	str	r1, [r7, #8]
 800be12:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d10a      	bne.n	800be38 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800be22:	2380      	movs	r3, #128	; 0x80
 800be24:	617b      	str	r3, [r7, #20]
    return event;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	461c      	mov	r4, r3
 800be2a:	f107 0314 	add.w	r3, r7, #20
 800be2e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800be32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800be36:	e058      	b.n	800beea <osMessageGet+0xe2>
  }
  
  taskWoken = pdFALSE;
 800be38:	2300      	movs	r3, #0
 800be3a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800be3c:	2300      	movs	r3, #0
 800be3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be46:	d103      	bne.n	800be50 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800be48:	f04f 33ff 	mov.w	r3, #4294967295
 800be4c:	627b      	str	r3, [r7, #36]	; 0x24
 800be4e:	e00d      	b.n	800be6c <osMessageGet+0x64>
  }
  else if (millisec != 0) {
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d00a      	beq.n	800be6c <osMessageGet+0x64>
    ticks = millisec / portTICK_PERIOD_MS;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	4a26      	ldr	r2, [pc, #152]	; (800bef4 <osMessageGet+0xec>)
 800be5a:	fba2 2303 	umull	r2, r3, r2, r3
 800be5e:	08db      	lsrs	r3, r3, #3
 800be60:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800be62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <osMessageGet+0x64>
      ticks = 1;
 800be68:	2301      	movs	r3, #1
 800be6a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800be6c:	f7ff fd70 	bl	800b950 <inHandlerMode>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d01c      	beq.n	800beb0 <osMessageGet+0xa8>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800be76:	f107 0220 	add.w	r2, r7, #32
 800be7a:	f107 0314 	add.w	r3, r7, #20
 800be7e:	3304      	adds	r3, #4
 800be80:	4619      	mov	r1, r3
 800be82:	68b8      	ldr	r0, [r7, #8]
 800be84:	f000 fe8a 	bl	800cb9c <xQueueReceiveFromISR>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d102      	bne.n	800be94 <osMessageGet+0x8c>
      /* We have mail */
      event.status = osEventMessage;
 800be8e:	2310      	movs	r3, #16
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	e001      	b.n	800be98 <osMessageGet+0x90>
    }
    else {
      event.status = osOK;
 800be94:	2300      	movs	r3, #0
 800be96:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800be98:	6a3b      	ldr	r3, [r7, #32]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d01d      	beq.n	800beda <osMessageGet+0xd2>
 800be9e:	4b16      	ldr	r3, [pc, #88]	; (800bef8 <osMessageGet+0xf0>)
 800bea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea4:	601a      	str	r2, [r3, #0]
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	f3bf 8f6f 	isb	sy
 800beae:	e014      	b.n	800beda <osMessageGet+0xd2>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800beb0:	f107 0314 	add.w	r3, r7, #20
 800beb4:	3304      	adds	r3, #4
 800beb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800beb8:	4619      	mov	r1, r3
 800beba:	68b8      	ldr	r0, [r7, #8]
 800bebc:	f000 fc82 	bl	800c7c4 <xQueueReceive>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d102      	bne.n	800becc <osMessageGet+0xc4>
      /* We have mail */
      event.status = osEventMessage;
 800bec6:	2310      	movs	r3, #16
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	e006      	b.n	800beda <osMessageGet+0xd2>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d101      	bne.n	800bed6 <osMessageGet+0xce>
 800bed2:	2300      	movs	r3, #0
 800bed4:	e000      	b.n	800bed8 <osMessageGet+0xd0>
 800bed6:	2340      	movs	r3, #64	; 0x40
 800bed8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	461c      	mov	r4, r3
 800bede:	f107 0314 	add.w	r3, r7, #20
 800bee2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bee6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800beea:	68f8      	ldr	r0, [r7, #12]
 800beec:	372c      	adds	r7, #44	; 0x2c
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd90      	pop	{r4, r7, pc}
 800bef2:	bf00      	nop
 800bef4:	cccccccd 	.word	0xcccccccd
 800bef8:	e000ed04 	.word	0xe000ed04

0800befc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800befc:	b480      	push	{r7}
 800befe:	b083      	sub	sp, #12
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f103 0208 	add.w	r2, r3, #8
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	f04f 32ff 	mov.w	r2, #4294967295
 800bf14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f103 0208 	add.w	r2, r3, #8
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	f103 0208 	add.w	r2, r3, #8
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bf30:	bf00      	nop
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b083      	sub	sp, #12
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	2200      	movs	r2, #0
 800bf48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bf4a:	bf00      	nop
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf56:	b480      	push	{r7}
 800bf58:	b085      	sub	sp, #20
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
 800bf5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	685b      	ldr	r3, [r3, #4]
 800bf64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bf66:	683b      	ldr	r3, [r7, #0]
 800bf68:	68fa      	ldr	r2, [r7, #12]
 800bf6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	689a      	ldr	r2, [r3, #8]
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	683a      	ldr	r2, [r7, #0]
 800bf7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	683a      	ldr	r2, [r7, #0]
 800bf80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	687a      	ldr	r2, [r7, #4]
 800bf86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	1c5a      	adds	r2, r3, #1
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	601a      	str	r2, [r3, #0]
}
 800bf92:	bf00      	nop
 800bf94:	3714      	adds	r7, #20
 800bf96:	46bd      	mov	sp, r7
 800bf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf9c:	4770      	bx	lr

0800bf9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bf9e:	b480      	push	{r7}
 800bfa0:	b085      	sub	sp, #20
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfb4:	d103      	bne.n	800bfbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	60fb      	str	r3, [r7, #12]
 800bfbc:	e00c      	b.n	800bfd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	60fb      	str	r3, [r7, #12]
 800bfc4:	e002      	b.n	800bfcc <vListInsert+0x2e>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	60fb      	str	r3, [r7, #12]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	68ba      	ldr	r2, [r7, #8]
 800bfd4:	429a      	cmp	r2, r3
 800bfd6:	d2f6      	bcs.n	800bfc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	683a      	ldr	r2, [r7, #0]
 800bfe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	683a      	ldr	r2, [r7, #0]
 800bff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bff4:	683b      	ldr	r3, [r7, #0]
 800bff6:	687a      	ldr	r2, [r7, #4]
 800bff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	1c5a      	adds	r2, r3, #1
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	601a      	str	r2, [r3, #0]
}
 800c004:	bf00      	nop
 800c006:	3714      	adds	r7, #20
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c010:	b480      	push	{r7}
 800c012:	b085      	sub	sp, #20
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	685b      	ldr	r3, [r3, #4]
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	6892      	ldr	r2, [r2, #8]
 800c026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	689b      	ldr	r3, [r3, #8]
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	6852      	ldr	r2, [r2, #4]
 800c030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	687a      	ldr	r2, [r7, #4]
 800c038:	429a      	cmp	r2, r3
 800c03a:	d103      	bne.n	800c044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	689a      	ldr	r2, [r3, #8]
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2200      	movs	r2, #0
 800c048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	1e5a      	subs	r2, r3, #1
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d10a      	bne.n	800c08e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c07c:	f383 8811 	msr	BASEPRI, r3
 800c080:	f3bf 8f6f 	isb	sy
 800c084:	f3bf 8f4f 	dsb	sy
 800c088:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c08a:	bf00      	nop
 800c08c:	e7fe      	b.n	800c08c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c08e:	f002 f8b9 	bl	800e204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	681a      	ldr	r2, [r3, #0]
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c09a:	68f9      	ldr	r1, [r7, #12]
 800c09c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c09e:	fb01 f303 	mul.w	r3, r1, r3
 800c0a2:	441a      	add	r2, r3
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	681a      	ldr	r2, [r3, #0]
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	681a      	ldr	r2, [r3, #0]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	68f9      	ldr	r1, [r7, #12]
 800c0c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c0c4:	fb01 f303 	mul.w	r3, r1, r3
 800c0c8:	441a      	add	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	22ff      	movs	r2, #255	; 0xff
 800c0d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	22ff      	movs	r2, #255	; 0xff
 800c0da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d114      	bne.n	800c10e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d01a      	beq.n	800c122 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	3310      	adds	r3, #16
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f001 fb7b 	bl	800d7ec <xTaskRemoveFromEventList>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d012      	beq.n	800c122 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c0fc:	4b0c      	ldr	r3, [pc, #48]	; (800c130 <xQueueGenericReset+0xcc>)
 800c0fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c102:	601a      	str	r2, [r3, #0]
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	f3bf 8f6f 	isb	sy
 800c10c:	e009      	b.n	800c122 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3310      	adds	r3, #16
 800c112:	4618      	mov	r0, r3
 800c114:	f7ff fef2 	bl	800befc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	3324      	adds	r3, #36	; 0x24
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7ff feed 	bl	800befc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c122:	f002 f89f 	bl	800e264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c126:	2301      	movs	r3, #1
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3710      	adds	r7, #16
 800c12c:	46bd      	mov	sp, r7
 800c12e:	bd80      	pop	{r7, pc}
 800c130:	e000ed04 	.word	0xe000ed04

0800c134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c134:	b580      	push	{r7, lr}
 800c136:	b08e      	sub	sp, #56	; 0x38
 800c138:	af02      	add	r7, sp, #8
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	60b9      	str	r1, [r7, #8]
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d10a      	bne.n	800c15e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2b00      	cmp	r3, #0
 800c162:	d10a      	bne.n	800c17a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c168:	f383 8811 	msr	BASEPRI, r3
 800c16c:	f3bf 8f6f 	isb	sy
 800c170:	f3bf 8f4f 	dsb	sy
 800c174:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c176:	bf00      	nop
 800c178:	e7fe      	b.n	800c178 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d002      	beq.n	800c186 <xQueueGenericCreateStatic+0x52>
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d001      	beq.n	800c18a <xQueueGenericCreateStatic+0x56>
 800c186:	2301      	movs	r3, #1
 800c188:	e000      	b.n	800c18c <xQueueGenericCreateStatic+0x58>
 800c18a:	2300      	movs	r3, #0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d10a      	bne.n	800c1a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c194:	f383 8811 	msr	BASEPRI, r3
 800c198:	f3bf 8f6f 	isb	sy
 800c19c:	f3bf 8f4f 	dsb	sy
 800c1a0:	623b      	str	r3, [r7, #32]
}
 800c1a2:	bf00      	nop
 800c1a4:	e7fe      	b.n	800c1a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d102      	bne.n	800c1b2 <xQueueGenericCreateStatic+0x7e>
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d101      	bne.n	800c1b6 <xQueueGenericCreateStatic+0x82>
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	e000      	b.n	800c1b8 <xQueueGenericCreateStatic+0x84>
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d10a      	bne.n	800c1d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1c0:	f383 8811 	msr	BASEPRI, r3
 800c1c4:	f3bf 8f6f 	isb	sy
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	61fb      	str	r3, [r7, #28]
}
 800c1ce:	bf00      	nop
 800c1d0:	e7fe      	b.n	800c1d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c1d2:	2350      	movs	r3, #80	; 0x50
 800c1d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	2b50      	cmp	r3, #80	; 0x50
 800c1da:	d00a      	beq.n	800c1f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e0:	f383 8811 	msr	BASEPRI, r3
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	f3bf 8f4f 	dsb	sy
 800c1ec:	61bb      	str	r3, [r7, #24]
}
 800c1ee:	bf00      	nop
 800c1f0:	e7fe      	b.n	800c1f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c1f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c1f4:	683b      	ldr	r3, [r7, #0]
 800c1f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c1f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d00d      	beq.n	800c21a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c1fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c200:	2201      	movs	r2, #1
 800c202:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c206:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	4613      	mov	r3, r2
 800c210:	687a      	ldr	r2, [r7, #4]
 800c212:	68b9      	ldr	r1, [r7, #8]
 800c214:	68f8      	ldr	r0, [r7, #12]
 800c216:	f000 f83f 	bl	800c298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3730      	adds	r7, #48	; 0x30
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c224:	b580      	push	{r7, lr}
 800c226:	b08a      	sub	sp, #40	; 0x28
 800c228:	af02      	add	r7, sp, #8
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	4613      	mov	r3, r2
 800c230:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d10a      	bne.n	800c24e <xQueueGenericCreate+0x2a>
	__asm volatile
 800c238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	613b      	str	r3, [r7, #16]
}
 800c24a:	bf00      	nop
 800c24c:	e7fe      	b.n	800c24c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	fb02 f303 	mul.w	r3, r2, r3
 800c256:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	3350      	adds	r3, #80	; 0x50
 800c25c:	4618      	mov	r0, r3
 800c25e:	f002 f8f3 	bl	800e448 <pvPortMalloc>
 800c262:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c264:	69bb      	ldr	r3, [r7, #24]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d011      	beq.n	800c28e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	3350      	adds	r3, #80	; 0x50
 800c272:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	2200      	movs	r2, #0
 800c278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c27c:	79fa      	ldrb	r2, [r7, #7]
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	9300      	str	r3, [sp, #0]
 800c282:	4613      	mov	r3, r2
 800c284:	697a      	ldr	r2, [r7, #20]
 800c286:	68b9      	ldr	r1, [r7, #8]
 800c288:	68f8      	ldr	r0, [r7, #12]
 800c28a:	f000 f805 	bl	800c298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c28e:	69bb      	ldr	r3, [r7, #24]
	}
 800c290:	4618      	mov	r0, r3
 800c292:	3720      	adds	r7, #32
 800c294:	46bd      	mov	sp, r7
 800c296:	bd80      	pop	{r7, pc}

0800c298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	60b9      	str	r1, [r7, #8]
 800c2a2:	607a      	str	r2, [r7, #4]
 800c2a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d103      	bne.n	800c2b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	69ba      	ldr	r2, [r7, #24]
 800c2b0:	601a      	str	r2, [r3, #0]
 800c2b2:	e002      	b.n	800c2ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c2b4:	69bb      	ldr	r3, [r7, #24]
 800c2b6:	687a      	ldr	r2, [r7, #4]
 800c2b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c2ba:	69bb      	ldr	r3, [r7, #24]
 800c2bc:	68fa      	ldr	r2, [r7, #12]
 800c2be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c2c6:	2101      	movs	r1, #1
 800c2c8:	69b8      	ldr	r0, [r7, #24]
 800c2ca:	f7ff fecb 	bl	800c064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	78fa      	ldrb	r2, [r7, #3]
 800c2d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c2d6:	bf00      	nop
 800c2d8:	3710      	adds	r7, #16
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	bd80      	pop	{r7, pc}

0800c2de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c2de:	b580      	push	{r7, lr}
 800c2e0:	b082      	sub	sp, #8
 800c2e2:	af00      	add	r7, sp, #0
 800c2e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00e      	beq.n	800c30a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	2200      	movs	r2, #0
 800c2f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c2fe:	2300      	movs	r3, #0
 800c300:	2200      	movs	r2, #0
 800c302:	2100      	movs	r1, #0
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f000 f837 	bl	800c378 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c30a:	bf00      	nop
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c312:	b580      	push	{r7, lr}
 800c314:	b086      	sub	sp, #24
 800c316:	af00      	add	r7, sp, #0
 800c318:	4603      	mov	r3, r0
 800c31a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c31c:	2301      	movs	r3, #1
 800c31e:	617b      	str	r3, [r7, #20]
 800c320:	2300      	movs	r3, #0
 800c322:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c324:	79fb      	ldrb	r3, [r7, #7]
 800c326:	461a      	mov	r2, r3
 800c328:	6939      	ldr	r1, [r7, #16]
 800c32a:	6978      	ldr	r0, [r7, #20]
 800c32c:	f7ff ff7a 	bl	800c224 <xQueueGenericCreate>
 800c330:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c332:	68f8      	ldr	r0, [r7, #12]
 800c334:	f7ff ffd3 	bl	800c2de <prvInitialiseMutex>

		return xNewQueue;
 800c338:	68fb      	ldr	r3, [r7, #12]
	}
 800c33a:	4618      	mov	r0, r3
 800c33c:	3718      	adds	r7, #24
 800c33e:	46bd      	mov	sp, r7
 800c340:	bd80      	pop	{r7, pc}

0800c342 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c342:	b580      	push	{r7, lr}
 800c344:	b088      	sub	sp, #32
 800c346:	af02      	add	r7, sp, #8
 800c348:	4603      	mov	r3, r0
 800c34a:	6039      	str	r1, [r7, #0]
 800c34c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c34e:	2301      	movs	r3, #1
 800c350:	617b      	str	r3, [r7, #20]
 800c352:	2300      	movs	r3, #0
 800c354:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c356:	79fb      	ldrb	r3, [r7, #7]
 800c358:	9300      	str	r3, [sp, #0]
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	2200      	movs	r2, #0
 800c35e:	6939      	ldr	r1, [r7, #16]
 800c360:	6978      	ldr	r0, [r7, #20]
 800c362:	f7ff fee7 	bl	800c134 <xQueueGenericCreateStatic>
 800c366:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c368:	68f8      	ldr	r0, [r7, #12]
 800c36a:	f7ff ffb8 	bl	800c2de <prvInitialiseMutex>

		return xNewQueue;
 800c36e:	68fb      	ldr	r3, [r7, #12]
	}
 800c370:	4618      	mov	r0, r3
 800c372:	3718      	adds	r7, #24
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08e      	sub	sp, #56	; 0x38
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	607a      	str	r2, [r7, #4]
 800c384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c386:	2300      	movs	r3, #0
 800c388:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c38e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c390:	2b00      	cmp	r3, #0
 800c392:	d10a      	bne.n	800c3aa <xQueueGenericSend+0x32>
	__asm volatile
 800c394:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c398:	f383 8811 	msr	BASEPRI, r3
 800c39c:	f3bf 8f6f 	isb	sy
 800c3a0:	f3bf 8f4f 	dsb	sy
 800c3a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c3a6:	bf00      	nop
 800c3a8:	e7fe      	b.n	800c3a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d103      	bne.n	800c3b8 <xQueueGenericSend+0x40>
 800c3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d101      	bne.n	800c3bc <xQueueGenericSend+0x44>
 800c3b8:	2301      	movs	r3, #1
 800c3ba:	e000      	b.n	800c3be <xQueueGenericSend+0x46>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10a      	bne.n	800c3d8 <xQueueGenericSend+0x60>
	__asm volatile
 800c3c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c6:	f383 8811 	msr	BASEPRI, r3
 800c3ca:	f3bf 8f6f 	isb	sy
 800c3ce:	f3bf 8f4f 	dsb	sy
 800c3d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c3d4:	bf00      	nop
 800c3d6:	e7fe      	b.n	800c3d6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d103      	bne.n	800c3e6 <xQueueGenericSend+0x6e>
 800c3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e2:	2b01      	cmp	r3, #1
 800c3e4:	d101      	bne.n	800c3ea <xQueueGenericSend+0x72>
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	e000      	b.n	800c3ec <xQueueGenericSend+0x74>
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d10a      	bne.n	800c406 <xQueueGenericSend+0x8e>
	__asm volatile
 800c3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3f4:	f383 8811 	msr	BASEPRI, r3
 800c3f8:	f3bf 8f6f 	isb	sy
 800c3fc:	f3bf 8f4f 	dsb	sy
 800c400:	623b      	str	r3, [r7, #32]
}
 800c402:	bf00      	nop
 800c404:	e7fe      	b.n	800c404 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c406:	f001 fbb1 	bl	800db6c <xTaskGetSchedulerState>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <xQueueGenericSend+0x9e>
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <xQueueGenericSend+0xa2>
 800c416:	2301      	movs	r3, #1
 800c418:	e000      	b.n	800c41c <xQueueGenericSend+0xa4>
 800c41a:	2300      	movs	r3, #0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d10a      	bne.n	800c436 <xQueueGenericSend+0xbe>
	__asm volatile
 800c420:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c424:	f383 8811 	msr	BASEPRI, r3
 800c428:	f3bf 8f6f 	isb	sy
 800c42c:	f3bf 8f4f 	dsb	sy
 800c430:	61fb      	str	r3, [r7, #28]
}
 800c432:	bf00      	nop
 800c434:	e7fe      	b.n	800c434 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c436:	f001 fee5 	bl	800e204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c442:	429a      	cmp	r2, r3
 800c444:	d302      	bcc.n	800c44c <xQueueGenericSend+0xd4>
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b02      	cmp	r3, #2
 800c44a:	d129      	bne.n	800c4a0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c44c:	683a      	ldr	r2, [r7, #0]
 800c44e:	68b9      	ldr	r1, [r7, #8]
 800c450:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c452:	f000 fc3b 	bl	800cccc <prvCopyDataToQueue>
 800c456:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d010      	beq.n	800c482 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c462:	3324      	adds	r3, #36	; 0x24
 800c464:	4618      	mov	r0, r3
 800c466:	f001 f9c1 	bl	800d7ec <xTaskRemoveFromEventList>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d013      	beq.n	800c498 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c470:	4b3f      	ldr	r3, [pc, #252]	; (800c570 <xQueueGenericSend+0x1f8>)
 800c472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c476:	601a      	str	r2, [r3, #0]
 800c478:	f3bf 8f4f 	dsb	sy
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	e00a      	b.n	800c498 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c484:	2b00      	cmp	r3, #0
 800c486:	d007      	beq.n	800c498 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c488:	4b39      	ldr	r3, [pc, #228]	; (800c570 <xQueueGenericSend+0x1f8>)
 800c48a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c48e:	601a      	str	r2, [r3, #0]
 800c490:	f3bf 8f4f 	dsb	sy
 800c494:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c498:	f001 fee4 	bl	800e264 <vPortExitCritical>
				return pdPASS;
 800c49c:	2301      	movs	r3, #1
 800c49e:	e063      	b.n	800c568 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d103      	bne.n	800c4ae <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c4a6:	f001 fedd 	bl	800e264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	e05c      	b.n	800c568 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c4ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d106      	bne.n	800c4c2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c4b4:	f107 0314 	add.w	r3, r7, #20
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f001 f9f9 	bl	800d8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c4be:	2301      	movs	r3, #1
 800c4c0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c4c2:	f001 fecf 	bl	800e264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c4c6:	f000 ff6b 	bl	800d3a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c4ca:	f001 fe9b 	bl	800e204 <vPortEnterCritical>
 800c4ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c4d4:	b25b      	sxtb	r3, r3
 800c4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4da:	d103      	bne.n	800c4e4 <xQueueGenericSend+0x16c>
 800c4dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4ea:	b25b      	sxtb	r3, r3
 800c4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4f0:	d103      	bne.n	800c4fa <xQueueGenericSend+0x182>
 800c4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4fa:	f001 feb3 	bl	800e264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4fe:	1d3a      	adds	r2, r7, #4
 800c500:	f107 0314 	add.w	r3, r7, #20
 800c504:	4611      	mov	r1, r2
 800c506:	4618      	mov	r0, r3
 800c508:	f001 f9e8 	bl	800d8dc <xTaskCheckForTimeOut>
 800c50c:	4603      	mov	r3, r0
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d124      	bne.n	800c55c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c512:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c514:	f000 fcd2 	bl	800cebc <prvIsQueueFull>
 800c518:	4603      	mov	r3, r0
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d018      	beq.n	800c550 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c520:	3310      	adds	r3, #16
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	4611      	mov	r1, r2
 800c526:	4618      	mov	r0, r3
 800c528:	f001 f93c 	bl	800d7a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c52c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c52e:	f000 fc5d 	bl	800cdec <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c532:	f000 ff43 	bl	800d3bc <xTaskResumeAll>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	f47f af7c 	bne.w	800c436 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c53e:	4b0c      	ldr	r3, [pc, #48]	; (800c570 <xQueueGenericSend+0x1f8>)
 800c540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c544:	601a      	str	r2, [r3, #0]
 800c546:	f3bf 8f4f 	dsb	sy
 800c54a:	f3bf 8f6f 	isb	sy
 800c54e:	e772      	b.n	800c436 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c550:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c552:	f000 fc4b 	bl	800cdec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c556:	f000 ff31 	bl	800d3bc <xTaskResumeAll>
 800c55a:	e76c      	b.n	800c436 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c55c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c55e:	f000 fc45 	bl	800cdec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c562:	f000 ff2b 	bl	800d3bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c566:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c568:	4618      	mov	r0, r3
 800c56a:	3738      	adds	r7, #56	; 0x38
 800c56c:	46bd      	mov	sp, r7
 800c56e:	bd80      	pop	{r7, pc}
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b090      	sub	sp, #64	; 0x40
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
 800c580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10a      	bne.n	800c5a2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	f383 8811 	msr	BASEPRI, r3
 800c594:	f3bf 8f6f 	isb	sy
 800c598:	f3bf 8f4f 	dsb	sy
 800c59c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c59e:	bf00      	nop
 800c5a0:	e7fe      	b.n	800c5a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d103      	bne.n	800c5b0 <xQueueGenericSendFromISR+0x3c>
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <xQueueGenericSendFromISR+0x40>
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e000      	b.n	800c5b6 <xQueueGenericSendFromISR+0x42>
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10a      	bne.n	800c5d0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5cc:	bf00      	nop
 800c5ce:	e7fe      	b.n	800c5ce <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b02      	cmp	r3, #2
 800c5d4:	d103      	bne.n	800c5de <xQueueGenericSendFromISR+0x6a>
 800c5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d101      	bne.n	800c5e2 <xQueueGenericSendFromISR+0x6e>
 800c5de:	2301      	movs	r3, #1
 800c5e0:	e000      	b.n	800c5e4 <xQueueGenericSendFromISR+0x70>
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d10a      	bne.n	800c5fe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ec:	f383 8811 	msr	BASEPRI, r3
 800c5f0:	f3bf 8f6f 	isb	sy
 800c5f4:	f3bf 8f4f 	dsb	sy
 800c5f8:	623b      	str	r3, [r7, #32]
}
 800c5fa:	bf00      	nop
 800c5fc:	e7fe      	b.n	800c5fc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5fe:	f001 fee3 	bl	800e3c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c602:	f3ef 8211 	mrs	r2, BASEPRI
 800c606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60a:	f383 8811 	msr	BASEPRI, r3
 800c60e:	f3bf 8f6f 	isb	sy
 800c612:	f3bf 8f4f 	dsb	sy
 800c616:	61fa      	str	r2, [r7, #28]
 800c618:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c61a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c61c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c61e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c626:	429a      	cmp	r2, r3
 800c628:	d302      	bcc.n	800c630 <xQueueGenericSendFromISR+0xbc>
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d12f      	bne.n	800c690 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c636:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c63c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c640:	683a      	ldr	r2, [r7, #0]
 800c642:	68b9      	ldr	r1, [r7, #8]
 800c644:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c646:	f000 fb41 	bl	800cccc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c64a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c652:	d112      	bne.n	800c67a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d016      	beq.n	800c68a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c65e:	3324      	adds	r3, #36	; 0x24
 800c660:	4618      	mov	r0, r3
 800c662:	f001 f8c3 	bl	800d7ec <xTaskRemoveFromEventList>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d00e      	beq.n	800c68a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00b      	beq.n	800c68a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	2201      	movs	r2, #1
 800c676:	601a      	str	r2, [r3, #0]
 800c678:	e007      	b.n	800c68a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c67a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c67e:	3301      	adds	r3, #1
 800c680:	b2db      	uxtb	r3, r3
 800c682:	b25a      	sxtb	r2, r3
 800c684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c68a:	2301      	movs	r3, #1
 800c68c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c68e:	e001      	b.n	800c694 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c690:	2300      	movs	r3, #0
 800c692:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c696:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c69e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c6a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3740      	adds	r7, #64	; 0x40
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}

0800c6aa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c6aa:	b580      	push	{r7, lr}
 800c6ac:	b08e      	sub	sp, #56	; 0x38
 800c6ae:	af00      	add	r7, sp, #0
 800c6b0:	6078      	str	r0, [r7, #4]
 800c6b2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c6b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d10a      	bne.n	800c6d4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c2:	f383 8811 	msr	BASEPRI, r3
 800c6c6:	f3bf 8f6f 	isb	sy
 800c6ca:	f3bf 8f4f 	dsb	sy
 800c6ce:	623b      	str	r3, [r7, #32]
}
 800c6d0:	bf00      	nop
 800c6d2:	e7fe      	b.n	800c6d2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c6d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d00a      	beq.n	800c6f2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800c6dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e0:	f383 8811 	msr	BASEPRI, r3
 800c6e4:	f3bf 8f6f 	isb	sy
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	61fb      	str	r3, [r7, #28]
}
 800c6ee:	bf00      	nop
 800c6f0:	e7fe      	b.n	800c6f0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d103      	bne.n	800c702 <xQueueGiveFromISR+0x58>
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fc:	689b      	ldr	r3, [r3, #8]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d101      	bne.n	800c706 <xQueueGiveFromISR+0x5c>
 800c702:	2301      	movs	r3, #1
 800c704:	e000      	b.n	800c708 <xQueueGiveFromISR+0x5e>
 800c706:	2300      	movs	r3, #0
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d10a      	bne.n	800c722 <xQueueGiveFromISR+0x78>
	__asm volatile
 800c70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c710:	f383 8811 	msr	BASEPRI, r3
 800c714:	f3bf 8f6f 	isb	sy
 800c718:	f3bf 8f4f 	dsb	sy
 800c71c:	61bb      	str	r3, [r7, #24]
}
 800c71e:	bf00      	nop
 800c720:	e7fe      	b.n	800c720 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c722:	f001 fe51 	bl	800e3c8 <vPortValidateInterruptPriority>
	__asm volatile
 800c726:	f3ef 8211 	mrs	r2, BASEPRI
 800c72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72e:	f383 8811 	msr	BASEPRI, r3
 800c732:	f3bf 8f6f 	isb	sy
 800c736:	f3bf 8f4f 	dsb	sy
 800c73a:	617a      	str	r2, [r7, #20]
 800c73c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c73e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c740:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c746:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c74c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c74e:	429a      	cmp	r2, r3
 800c750:	d22b      	bcs.n	800c7aa <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c754:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	1c5a      	adds	r2, r3, #1
 800c760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c762:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c764:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c76c:	d112      	bne.n	800c794 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c772:	2b00      	cmp	r3, #0
 800c774:	d016      	beq.n	800c7a4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c778:	3324      	adds	r3, #36	; 0x24
 800c77a:	4618      	mov	r0, r3
 800c77c:	f001 f836 	bl	800d7ec <xTaskRemoveFromEventList>
 800c780:	4603      	mov	r3, r0
 800c782:	2b00      	cmp	r3, #0
 800c784:	d00e      	beq.n	800c7a4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c786:	683b      	ldr	r3, [r7, #0]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d00b      	beq.n	800c7a4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2201      	movs	r2, #1
 800c790:	601a      	str	r2, [r3, #0]
 800c792:	e007      	b.n	800c7a4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c798:	3301      	adds	r3, #1
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	b25a      	sxtb	r2, r3
 800c79e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c7a4:	2301      	movs	r3, #1
 800c7a6:	637b      	str	r3, [r7, #52]	; 0x34
 800c7a8:	e001      	b.n	800c7ae <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	637b      	str	r3, [r7, #52]	; 0x34
 800c7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f383 8811 	msr	BASEPRI, r3
}
 800c7b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c7ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3738      	adds	r7, #56	; 0x38
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b08c      	sub	sp, #48	; 0x30
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c7d0:	2300      	movs	r3, #0
 800c7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10a      	bne.n	800c7f4 <xQueueReceive+0x30>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	623b      	str	r3, [r7, #32]
}
 800c7f0:	bf00      	nop
 800c7f2:	e7fe      	b.n	800c7f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d103      	bne.n	800c802 <xQueueReceive+0x3e>
 800c7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d101      	bne.n	800c806 <xQueueReceive+0x42>
 800c802:	2301      	movs	r3, #1
 800c804:	e000      	b.n	800c808 <xQueueReceive+0x44>
 800c806:	2300      	movs	r3, #0
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d10a      	bne.n	800c822 <xQueueReceive+0x5e>
	__asm volatile
 800c80c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c810:	f383 8811 	msr	BASEPRI, r3
 800c814:	f3bf 8f6f 	isb	sy
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	61fb      	str	r3, [r7, #28]
}
 800c81e:	bf00      	nop
 800c820:	e7fe      	b.n	800c820 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c822:	f001 f9a3 	bl	800db6c <xTaskGetSchedulerState>
 800c826:	4603      	mov	r3, r0
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d102      	bne.n	800c832 <xQueueReceive+0x6e>
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d101      	bne.n	800c836 <xQueueReceive+0x72>
 800c832:	2301      	movs	r3, #1
 800c834:	e000      	b.n	800c838 <xQueueReceive+0x74>
 800c836:	2300      	movs	r3, #0
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d10a      	bne.n	800c852 <xQueueReceive+0x8e>
	__asm volatile
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	f383 8811 	msr	BASEPRI, r3
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	f3bf 8f4f 	dsb	sy
 800c84c:	61bb      	str	r3, [r7, #24]
}
 800c84e:	bf00      	nop
 800c850:	e7fe      	b.n	800c850 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c852:	f001 fcd7 	bl	800e204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c85c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d01f      	beq.n	800c8a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c862:	68b9      	ldr	r1, [r7, #8]
 800c864:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c866:	f000 fa9b 	bl	800cda0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c86c:	1e5a      	subs	r2, r3, #1
 800c86e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c870:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c874:	691b      	ldr	r3, [r3, #16]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00f      	beq.n	800c89a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c87a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87c:	3310      	adds	r3, #16
 800c87e:	4618      	mov	r0, r3
 800c880:	f000 ffb4 	bl	800d7ec <xTaskRemoveFromEventList>
 800c884:	4603      	mov	r3, r0
 800c886:	2b00      	cmp	r3, #0
 800c888:	d007      	beq.n	800c89a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c88a:	4b3d      	ldr	r3, [pc, #244]	; (800c980 <xQueueReceive+0x1bc>)
 800c88c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c890:	601a      	str	r2, [r3, #0]
 800c892:	f3bf 8f4f 	dsb	sy
 800c896:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c89a:	f001 fce3 	bl	800e264 <vPortExitCritical>
				return pdPASS;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e069      	b.n	800c976 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d103      	bne.n	800c8b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8a8:	f001 fcdc 	bl	800e264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	e062      	b.n	800c976 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d106      	bne.n	800c8c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8b6:	f107 0310 	add.w	r3, r7, #16
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f000 fff8 	bl	800d8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8c4:	f001 fcce 	bl	800e264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8c8:	f000 fd6a 	bl	800d3a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c8cc:	f001 fc9a 	bl	800e204 <vPortEnterCritical>
 800c8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8d6:	b25b      	sxtb	r3, r3
 800c8d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8dc:	d103      	bne.n	800c8e6 <xQueueReceive+0x122>
 800c8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c8ec:	b25b      	sxtb	r3, r3
 800c8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8f2:	d103      	bne.n	800c8fc <xQueueReceive+0x138>
 800c8f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c8fc:	f001 fcb2 	bl	800e264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c900:	1d3a      	adds	r2, r7, #4
 800c902:	f107 0310 	add.w	r3, r7, #16
 800c906:	4611      	mov	r1, r2
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 ffe7 	bl	800d8dc <xTaskCheckForTimeOut>
 800c90e:	4603      	mov	r3, r0
 800c910:	2b00      	cmp	r3, #0
 800c912:	d123      	bne.n	800c95c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c916:	f000 fabb 	bl	800ce90 <prvIsQueueEmpty>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d017      	beq.n	800c950 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c922:	3324      	adds	r3, #36	; 0x24
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	4611      	mov	r1, r2
 800c928:	4618      	mov	r0, r3
 800c92a:	f000 ff3b 	bl	800d7a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c92e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c930:	f000 fa5c 	bl	800cdec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c934:	f000 fd42 	bl	800d3bc <xTaskResumeAll>
 800c938:	4603      	mov	r3, r0
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d189      	bne.n	800c852 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c93e:	4b10      	ldr	r3, [pc, #64]	; (800c980 <xQueueReceive+0x1bc>)
 800c940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c944:	601a      	str	r2, [r3, #0]
 800c946:	f3bf 8f4f 	dsb	sy
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	e780      	b.n	800c852 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c950:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c952:	f000 fa4b 	bl	800cdec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c956:	f000 fd31 	bl	800d3bc <xTaskResumeAll>
 800c95a:	e77a      	b.n	800c852 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c95c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c95e:	f000 fa45 	bl	800cdec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c962:	f000 fd2b 	bl	800d3bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c968:	f000 fa92 	bl	800ce90 <prvIsQueueEmpty>
 800c96c:	4603      	mov	r3, r0
 800c96e:	2b00      	cmp	r3, #0
 800c970:	f43f af6f 	beq.w	800c852 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c974:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c976:	4618      	mov	r0, r3
 800c978:	3730      	adds	r7, #48	; 0x30
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	e000ed04 	.word	0xe000ed04

0800c984 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b08e      	sub	sp, #56	; 0x38
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c98e:	2300      	movs	r3, #0
 800c990:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c996:	2300      	movs	r3, #0
 800c998:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d10a      	bne.n	800c9b6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a4:	f383 8811 	msr	BASEPRI, r3
 800c9a8:	f3bf 8f6f 	isb	sy
 800c9ac:	f3bf 8f4f 	dsb	sy
 800c9b0:	623b      	str	r3, [r7, #32]
}
 800c9b2:	bf00      	nop
 800c9b4:	e7fe      	b.n	800c9b4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00a      	beq.n	800c9d4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c9be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	61fb      	str	r3, [r7, #28]
}
 800c9d0:	bf00      	nop
 800c9d2:	e7fe      	b.n	800c9d2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c9d4:	f001 f8ca 	bl	800db6c <xTaskGetSchedulerState>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d102      	bne.n	800c9e4 <xQueueSemaphoreTake+0x60>
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d101      	bne.n	800c9e8 <xQueueSemaphoreTake+0x64>
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e000      	b.n	800c9ea <xQueueSemaphoreTake+0x66>
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d10a      	bne.n	800ca04 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c9ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	61bb      	str	r3, [r7, #24]
}
 800ca00:	bf00      	nop
 800ca02:	e7fe      	b.n	800ca02 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ca04:	f001 fbfe 	bl	800e204 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ca08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca0c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d024      	beq.n	800ca5e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ca14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca16:	1e5a      	subs	r2, r3, #1
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d104      	bne.n	800ca2e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ca24:	f001 fa4a 	bl	800debc <pvTaskIncrementMutexHeldCount>
 800ca28:	4602      	mov	r2, r0
 800ca2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	691b      	ldr	r3, [r3, #16]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00f      	beq.n	800ca56 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca38:	3310      	adds	r3, #16
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	f000 fed6 	bl	800d7ec <xTaskRemoveFromEventList>
 800ca40:	4603      	mov	r3, r0
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d007      	beq.n	800ca56 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ca46:	4b54      	ldr	r3, [pc, #336]	; (800cb98 <xQueueSemaphoreTake+0x214>)
 800ca48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca4c:	601a      	str	r2, [r3, #0]
 800ca4e:	f3bf 8f4f 	dsb	sy
 800ca52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ca56:	f001 fc05 	bl	800e264 <vPortExitCritical>
				return pdPASS;
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	e097      	b.n	800cb8e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d111      	bne.n	800ca88 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ca64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00a      	beq.n	800ca80 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	617b      	str	r3, [r7, #20]
}
 800ca7c:	bf00      	nop
 800ca7e:	e7fe      	b.n	800ca7e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ca80:	f001 fbf0 	bl	800e264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ca84:	2300      	movs	r3, #0
 800ca86:	e082      	b.n	800cb8e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ca88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d106      	bne.n	800ca9c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ca8e:	f107 030c 	add.w	r3, r7, #12
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 ff0c 	bl	800d8b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ca9c:	f001 fbe2 	bl	800e264 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800caa0:	f000 fc7e 	bl	800d3a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800caa4:	f001 fbae 	bl	800e204 <vPortEnterCritical>
 800caa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caaa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800caae:	b25b      	sxtb	r3, r3
 800cab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cab4:	d103      	bne.n	800cabe <xQueueSemaphoreTake+0x13a>
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	2200      	movs	r2, #0
 800caba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cac4:	b25b      	sxtb	r3, r3
 800cac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800caca:	d103      	bne.n	800cad4 <xQueueSemaphoreTake+0x150>
 800cacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cace:	2200      	movs	r2, #0
 800cad0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cad4:	f001 fbc6 	bl	800e264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cad8:	463a      	mov	r2, r7
 800cada:	f107 030c 	add.w	r3, r7, #12
 800cade:	4611      	mov	r1, r2
 800cae0:	4618      	mov	r0, r3
 800cae2:	f000 fefb 	bl	800d8dc <xTaskCheckForTimeOut>
 800cae6:	4603      	mov	r3, r0
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d132      	bne.n	800cb52 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800caec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caee:	f000 f9cf 	bl	800ce90 <prvIsQueueEmpty>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d026      	beq.n	800cb46 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800caf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d109      	bne.n	800cb14 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800cb00:	f001 fb80 	bl	800e204 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f001 f84d 	bl	800dba8 <xTaskPriorityInherit>
 800cb0e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cb10:	f001 fba8 	bl	800e264 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb16:	3324      	adds	r3, #36	; 0x24
 800cb18:	683a      	ldr	r2, [r7, #0]
 800cb1a:	4611      	mov	r1, r2
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	f000 fe41 	bl	800d7a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cb22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb24:	f000 f962 	bl	800cdec <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cb28:	f000 fc48 	bl	800d3bc <xTaskResumeAll>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	f47f af68 	bne.w	800ca04 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800cb34:	4b18      	ldr	r3, [pc, #96]	; (800cb98 <xQueueSemaphoreTake+0x214>)
 800cb36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb3a:	601a      	str	r2, [r3, #0]
 800cb3c:	f3bf 8f4f 	dsb	sy
 800cb40:	f3bf 8f6f 	isb	sy
 800cb44:	e75e      	b.n	800ca04 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cb46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb48:	f000 f950 	bl	800cdec <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cb4c:	f000 fc36 	bl	800d3bc <xTaskResumeAll>
 800cb50:	e758      	b.n	800ca04 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cb52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb54:	f000 f94a 	bl	800cdec <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cb58:	f000 fc30 	bl	800d3bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cb5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb5e:	f000 f997 	bl	800ce90 <prvIsQueueEmpty>
 800cb62:	4603      	mov	r3, r0
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f43f af4d 	beq.w	800ca04 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cb6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d00d      	beq.n	800cb8c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800cb70:	f001 fb48 	bl	800e204 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cb74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb76:	f000 f891 	bl	800cc9c <prvGetDisinheritPriorityAfterTimeout>
 800cb7a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb82:	4618      	mov	r0, r3
 800cb84:	f001 f90c 	bl	800dda0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cb88:	f001 fb6c 	bl	800e264 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cb8c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3738      	adds	r7, #56	; 0x38
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	e000ed04 	.word	0xe000ed04

0800cb9c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b08e      	sub	sp, #56	; 0x38
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	60b9      	str	r1, [r7, #8]
 800cba6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cbac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d10a      	bne.n	800cbc8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800cbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb6:	f383 8811 	msr	BASEPRI, r3
 800cbba:	f3bf 8f6f 	isb	sy
 800cbbe:	f3bf 8f4f 	dsb	sy
 800cbc2:	623b      	str	r3, [r7, #32]
}
 800cbc4:	bf00      	nop
 800cbc6:	e7fe      	b.n	800cbc6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d103      	bne.n	800cbd6 <xQueueReceiveFromISR+0x3a>
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d101      	bne.n	800cbda <xQueueReceiveFromISR+0x3e>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	e000      	b.n	800cbdc <xQueueReceiveFromISR+0x40>
 800cbda:	2300      	movs	r3, #0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10a      	bne.n	800cbf6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbe4:	f383 8811 	msr	BASEPRI, r3
 800cbe8:	f3bf 8f6f 	isb	sy
 800cbec:	f3bf 8f4f 	dsb	sy
 800cbf0:	61fb      	str	r3, [r7, #28]
}
 800cbf2:	bf00      	nop
 800cbf4:	e7fe      	b.n	800cbf4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cbf6:	f001 fbe7 	bl	800e3c8 <vPortValidateInterruptPriority>
	__asm volatile
 800cbfa:	f3ef 8211 	mrs	r2, BASEPRI
 800cbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc02:	f383 8811 	msr	BASEPRI, r3
 800cc06:	f3bf 8f6f 	isb	sy
 800cc0a:	f3bf 8f4f 	dsb	sy
 800cc0e:	61ba      	str	r2, [r7, #24]
 800cc10:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cc12:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cc14:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc1a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d02f      	beq.n	800cc82 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cc22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cc28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cc2c:	68b9      	ldr	r1, [r7, #8]
 800cc2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cc30:	f000 f8b6 	bl	800cda0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc36:	1e5a      	subs	r2, r3, #1
 800cc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cc3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc44:	d112      	bne.n	800cc6c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d016      	beq.n	800cc7c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc50:	3310      	adds	r3, #16
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 fdca 	bl	800d7ec <xTaskRemoveFromEventList>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d00e      	beq.n	800cc7c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d00b      	beq.n	800cc7c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	e007      	b.n	800cc7c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc70:	3301      	adds	r3, #1
 800cc72:	b2db      	uxtb	r3, r3
 800cc74:	b25a      	sxtb	r2, r3
 800cc76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	637b      	str	r3, [r7, #52]	; 0x34
 800cc80:	e001      	b.n	800cc86 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cc82:	2300      	movs	r3, #0
 800cc84:	637b      	str	r3, [r7, #52]	; 0x34
 800cc86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc88:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	f383 8811 	msr	BASEPRI, r3
}
 800cc90:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cc92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3738      	adds	r7, #56	; 0x38
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cc9c:	b480      	push	{r7}
 800cc9e:	b085      	sub	sp, #20
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d006      	beq.n	800ccba <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	f1c3 0307 	rsb	r3, r3, #7
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	e001      	b.n	800ccbe <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
	}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3714      	adds	r7, #20
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccca:	4770      	bx	lr

0800cccc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	60f8      	str	r0, [r7, #12]
 800ccd4:	60b9      	str	r1, [r7, #8]
 800ccd6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cce0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10d      	bne.n	800cd06 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d14d      	bne.n	800cd8e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	689b      	ldr	r3, [r3, #8]
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f000 ffcc 	bl	800dc94 <xTaskPriorityDisinherit>
 800ccfc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	2200      	movs	r2, #0
 800cd02:	609a      	str	r2, [r3, #8]
 800cd04:	e043      	b.n	800cd8e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d119      	bne.n	800cd40 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6858      	ldr	r0, [r3, #4]
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd14:	461a      	mov	r2, r3
 800cd16:	68b9      	ldr	r1, [r7, #8]
 800cd18:	f00c ffb3 	bl	8019c82 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	685a      	ldr	r2, [r3, #4]
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd24:	441a      	add	r2, r3
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	685a      	ldr	r2, [r3, #4]
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d32b      	bcc.n	800cd8e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	681a      	ldr	r2, [r3, #0]
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	605a      	str	r2, [r3, #4]
 800cd3e:	e026      	b.n	800cd8e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	68d8      	ldr	r0, [r3, #12]
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd48:	461a      	mov	r2, r3
 800cd4a:	68b9      	ldr	r1, [r7, #8]
 800cd4c:	f00c ff99 	bl	8019c82 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	68da      	ldr	r2, [r3, #12]
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd58:	425b      	negs	r3, r3
 800cd5a:	441a      	add	r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	68da      	ldr	r2, [r3, #12]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d207      	bcs.n	800cd7c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	689a      	ldr	r2, [r3, #8]
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd74:	425b      	negs	r3, r3
 800cd76:	441a      	add	r2, r3
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	2b02      	cmp	r3, #2
 800cd80:	d105      	bne.n	800cd8e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d002      	beq.n	800cd8e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	3b01      	subs	r3, #1
 800cd8c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	1c5a      	adds	r2, r3, #1
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cd96:	697b      	ldr	r3, [r7, #20]
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3718      	adds	r7, #24
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}

0800cda0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d018      	beq.n	800cde4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	68da      	ldr	r2, [r3, #12]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdba:	441a      	add	r2, r3
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	68da      	ldr	r2, [r3, #12]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d303      	bcc.n	800cdd4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	68d9      	ldr	r1, [r3, #12]
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cddc:	461a      	mov	r2, r3
 800cdde:	6838      	ldr	r0, [r7, #0]
 800cde0:	f00c ff4f 	bl	8019c82 <memcpy>
	}
}
 800cde4:	bf00      	nop
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b084      	sub	sp, #16
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cdf4:	f001 fa06 	bl	800e204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cdfe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce00:	e011      	b.n	800ce26 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d012      	beq.n	800ce30 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	3324      	adds	r3, #36	; 0x24
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f000 fcec 	bl	800d7ec <xTaskRemoveFromEventList>
 800ce14:	4603      	mov	r3, r0
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d001      	beq.n	800ce1e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ce1a:	f000 fdc1 	bl	800d9a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ce1e:	7bfb      	ldrb	r3, [r7, #15]
 800ce20:	3b01      	subs	r3, #1
 800ce22:	b2db      	uxtb	r3, r3
 800ce24:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ce26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	dce9      	bgt.n	800ce02 <prvUnlockQueue+0x16>
 800ce2e:	e000      	b.n	800ce32 <prvUnlockQueue+0x46>
					break;
 800ce30:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	22ff      	movs	r2, #255	; 0xff
 800ce36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ce3a:	f001 fa13 	bl	800e264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ce3e:	f001 f9e1 	bl	800e204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ce48:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce4a:	e011      	b.n	800ce70 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	691b      	ldr	r3, [r3, #16]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d012      	beq.n	800ce7a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	3310      	adds	r3, #16
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 fcc7 	bl	800d7ec <xTaskRemoveFromEventList>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d001      	beq.n	800ce68 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ce64:	f000 fd9c 	bl	800d9a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	b2db      	uxtb	r3, r3
 800ce6e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ce70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	dce9      	bgt.n	800ce4c <prvUnlockQueue+0x60>
 800ce78:	e000      	b.n	800ce7c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ce7a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	22ff      	movs	r2, #255	; 0xff
 800ce80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800ce84:	f001 f9ee 	bl	800e264 <vPortExitCritical>
}
 800ce88:	bf00      	nop
 800ce8a:	3710      	adds	r7, #16
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ce98:	f001 f9b4 	bl	800e204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d102      	bne.n	800ceaa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cea4:	2301      	movs	r3, #1
 800cea6:	60fb      	str	r3, [r7, #12]
 800cea8:	e001      	b.n	800ceae <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ceae:	f001 f9d9 	bl	800e264 <vPortExitCritical>

	return xReturn;
 800ceb2:	68fb      	ldr	r3, [r7, #12]
}
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	3710      	adds	r7, #16
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}

0800cebc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b084      	sub	sp, #16
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cec4:	f001 f99e 	bl	800e204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d102      	bne.n	800ceda <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ced4:	2301      	movs	r3, #1
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	e001      	b.n	800cede <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ceda:	2300      	movs	r3, #0
 800cedc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cede:	f001 f9c1 	bl	800e264 <vPortExitCritical>

	return xReturn;
 800cee2:	68fb      	ldr	r3, [r7, #12]
}
 800cee4:	4618      	mov	r0, r3
 800cee6:	3710      	adds	r7, #16
 800cee8:	46bd      	mov	sp, r7
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b08e      	sub	sp, #56	; 0x38
 800cef0:	af04      	add	r7, sp, #16
 800cef2:	60f8      	str	r0, [r7, #12]
 800cef4:	60b9      	str	r1, [r7, #8]
 800cef6:	607a      	str	r2, [r7, #4]
 800cef8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cefa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	d10a      	bne.n	800cf16 <xTaskCreateStatic+0x2a>
	__asm volatile
 800cf00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf04:	f383 8811 	msr	BASEPRI, r3
 800cf08:	f3bf 8f6f 	isb	sy
 800cf0c:	f3bf 8f4f 	dsb	sy
 800cf10:	623b      	str	r3, [r7, #32]
}
 800cf12:	bf00      	nop
 800cf14:	e7fe      	b.n	800cf14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d10a      	bne.n	800cf32 <xTaskCreateStatic+0x46>
	__asm volatile
 800cf1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf20:	f383 8811 	msr	BASEPRI, r3
 800cf24:	f3bf 8f6f 	isb	sy
 800cf28:	f3bf 8f4f 	dsb	sy
 800cf2c:	61fb      	str	r3, [r7, #28]
}
 800cf2e:	bf00      	nop
 800cf30:	e7fe      	b.n	800cf30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cf32:	23c0      	movs	r3, #192	; 0xc0
 800cf34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cf36:	693b      	ldr	r3, [r7, #16]
 800cf38:	2bc0      	cmp	r3, #192	; 0xc0
 800cf3a:	d00a      	beq.n	800cf52 <xTaskCreateStatic+0x66>
	__asm volatile
 800cf3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf40:	f383 8811 	msr	BASEPRI, r3
 800cf44:	f3bf 8f6f 	isb	sy
 800cf48:	f3bf 8f4f 	dsb	sy
 800cf4c:	61bb      	str	r3, [r7, #24]
}
 800cf4e:	bf00      	nop
 800cf50:	e7fe      	b.n	800cf50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cf52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d01e      	beq.n	800cf98 <xTaskCreateStatic+0xac>
 800cf5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d01b      	beq.n	800cf98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cf60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cf68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cf72:	2300      	movs	r3, #0
 800cf74:	9303      	str	r3, [sp, #12]
 800cf76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf78:	9302      	str	r3, [sp, #8]
 800cf7a:	f107 0314 	add.w	r3, r7, #20
 800cf7e:	9301      	str	r3, [sp, #4]
 800cf80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf82:	9300      	str	r3, [sp, #0]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	68b9      	ldr	r1, [r7, #8]
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f000 f850 	bl	800d030 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cf90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cf92:	f000 f8f7 	bl	800d184 <prvAddNewTaskToReadyList>
 800cf96:	e001      	b.n	800cf9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800cf98:	2300      	movs	r3, #0
 800cf9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cf9c:	697b      	ldr	r3, [r7, #20]
	}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3728      	adds	r7, #40	; 0x28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	bd80      	pop	{r7, pc}

0800cfa6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cfa6:	b580      	push	{r7, lr}
 800cfa8:	b08c      	sub	sp, #48	; 0x30
 800cfaa:	af04      	add	r7, sp, #16
 800cfac:	60f8      	str	r0, [r7, #12]
 800cfae:	60b9      	str	r1, [r7, #8]
 800cfb0:	603b      	str	r3, [r7, #0]
 800cfb2:	4613      	mov	r3, r2
 800cfb4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cfb6:	88fb      	ldrh	r3, [r7, #6]
 800cfb8:	009b      	lsls	r3, r3, #2
 800cfba:	4618      	mov	r0, r3
 800cfbc:	f001 fa44 	bl	800e448 <pvPortMalloc>
 800cfc0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d00e      	beq.n	800cfe6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cfc8:	20c0      	movs	r0, #192	; 0xc0
 800cfca:	f001 fa3d 	bl	800e448 <pvPortMalloc>
 800cfce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cfd0:	69fb      	ldr	r3, [r7, #28]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cfd6:	69fb      	ldr	r3, [r7, #28]
 800cfd8:	697a      	ldr	r2, [r7, #20]
 800cfda:	631a      	str	r2, [r3, #48]	; 0x30
 800cfdc:	e005      	b.n	800cfea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cfde:	6978      	ldr	r0, [r7, #20]
 800cfe0:	f001 fafe 	bl	800e5e0 <vPortFree>
 800cfe4:	e001      	b.n	800cfea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cfea:	69fb      	ldr	r3, [r7, #28]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d017      	beq.n	800d020 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cff8:	88fa      	ldrh	r2, [r7, #6]
 800cffa:	2300      	movs	r3, #0
 800cffc:	9303      	str	r3, [sp, #12]
 800cffe:	69fb      	ldr	r3, [r7, #28]
 800d000:	9302      	str	r3, [sp, #8]
 800d002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d004:	9301      	str	r3, [sp, #4]
 800d006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	68b9      	ldr	r1, [r7, #8]
 800d00e:	68f8      	ldr	r0, [r7, #12]
 800d010:	f000 f80e 	bl	800d030 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d014:	69f8      	ldr	r0, [r7, #28]
 800d016:	f000 f8b5 	bl	800d184 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d01a:	2301      	movs	r3, #1
 800d01c:	61bb      	str	r3, [r7, #24]
 800d01e:	e002      	b.n	800d026 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d020:	f04f 33ff 	mov.w	r3, #4294967295
 800d024:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d026:	69bb      	ldr	r3, [r7, #24]
	}
 800d028:	4618      	mov	r0, r3
 800d02a:	3720      	adds	r7, #32
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b088      	sub	sp, #32
 800d034:	af00      	add	r7, sp, #0
 800d036:	60f8      	str	r0, [r7, #12]
 800d038:	60b9      	str	r1, [r7, #8]
 800d03a:	607a      	str	r2, [r7, #4]
 800d03c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d040:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	009b      	lsls	r3, r3, #2
 800d046:	461a      	mov	r2, r3
 800d048:	21a5      	movs	r1, #165	; 0xa5
 800d04a:	f00c fe28 	bl	8019c9e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d04e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d050:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d052:	6879      	ldr	r1, [r7, #4]
 800d054:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d058:	440b      	add	r3, r1
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4413      	add	r3, r2
 800d05e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d060:	69bb      	ldr	r3, [r7, #24]
 800d062:	f023 0307 	bic.w	r3, r3, #7
 800d066:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d068:	69bb      	ldr	r3, [r7, #24]
 800d06a:	f003 0307 	and.w	r3, r3, #7
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00a      	beq.n	800d088 <prvInitialiseNewTask+0x58>
	__asm volatile
 800d072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d076:	f383 8811 	msr	BASEPRI, r3
 800d07a:	f3bf 8f6f 	isb	sy
 800d07e:	f3bf 8f4f 	dsb	sy
 800d082:	617b      	str	r3, [r7, #20]
}
 800d084:	bf00      	nop
 800d086:	e7fe      	b.n	800d086 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d01f      	beq.n	800d0ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d08e:	2300      	movs	r3, #0
 800d090:	61fb      	str	r3, [r7, #28]
 800d092:	e012      	b.n	800d0ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d094:	68ba      	ldr	r2, [r7, #8]
 800d096:	69fb      	ldr	r3, [r7, #28]
 800d098:	4413      	add	r3, r2
 800d09a:	7819      	ldrb	r1, [r3, #0]
 800d09c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	4413      	add	r3, r2
 800d0a2:	3334      	adds	r3, #52	; 0x34
 800d0a4:	460a      	mov	r2, r1
 800d0a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d0a8:	68ba      	ldr	r2, [r7, #8]
 800d0aa:	69fb      	ldr	r3, [r7, #28]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d006      	beq.n	800d0c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	61fb      	str	r3, [r7, #28]
 800d0ba:	69fb      	ldr	r3, [r7, #28]
 800d0bc:	2b0f      	cmp	r3, #15
 800d0be:	d9e9      	bls.n	800d094 <prvInitialiseNewTask+0x64>
 800d0c0:	e000      	b.n	800d0c4 <prvInitialiseNewTask+0x94>
			{
				break;
 800d0c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d0cc:	e003      	b.n	800d0d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d0d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d8:	2b06      	cmp	r3, #6
 800d0da:	d901      	bls.n	800d0e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d0dc:	2306      	movs	r3, #6
 800d0de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d0e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d0ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0f4:	3304      	adds	r3, #4
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe ff20 	bl	800bf3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0fe:	3318      	adds	r3, #24
 800d100:	4618      	mov	r0, r3
 800d102:	f7fe ff1b 	bl	800bf3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d108:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d10a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	f1c3 0207 	rsb	r2, r3, #7
 800d112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d114:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d11a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800d11c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d11e:	2200      	movs	r2, #0
 800d120:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d124:	2200      	movs	r2, #0
 800d126:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12c:	2200      	movs	r2, #0
 800d12e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d134:	3358      	adds	r3, #88	; 0x58
 800d136:	2260      	movs	r2, #96	; 0x60
 800d138:	2100      	movs	r1, #0
 800d13a:	4618      	mov	r0, r3
 800d13c:	f00c fdaf 	bl	8019c9e <memset>
 800d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d142:	4a0d      	ldr	r2, [pc, #52]	; (800d178 <prvInitialiseNewTask+0x148>)
 800d144:	65da      	str	r2, [r3, #92]	; 0x5c
 800d146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d148:	4a0c      	ldr	r2, [pc, #48]	; (800d17c <prvInitialiseNewTask+0x14c>)
 800d14a:	661a      	str	r2, [r3, #96]	; 0x60
 800d14c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d14e:	4a0c      	ldr	r2, [pc, #48]	; (800d180 <prvInitialiseNewTask+0x150>)
 800d150:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	68f9      	ldr	r1, [r7, #12]
 800d156:	69b8      	ldr	r0, [r7, #24]
 800d158:	f000 ff2a 	bl	800dfb0 <pxPortInitialiseStack>
 800d15c:	4602      	mov	r2, r0
 800d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d160:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d002      	beq.n	800d16e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d16c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d16e:	bf00      	nop
 800d170:	3720      	adds	r7, #32
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	0801e258 	.word	0x0801e258
 800d17c:	0801e278 	.word	0x0801e278
 800d180:	0801e238 	.word	0x0801e238

0800d184 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d18c:	f001 f83a 	bl	800e204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d190:	4b2c      	ldr	r3, [pc, #176]	; (800d244 <prvAddNewTaskToReadyList+0xc0>)
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	3301      	adds	r3, #1
 800d196:	4a2b      	ldr	r2, [pc, #172]	; (800d244 <prvAddNewTaskToReadyList+0xc0>)
 800d198:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d19a:	4b2b      	ldr	r3, [pc, #172]	; (800d248 <prvAddNewTaskToReadyList+0xc4>)
 800d19c:	681b      	ldr	r3, [r3, #0]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d109      	bne.n	800d1b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d1a2:	4a29      	ldr	r2, [pc, #164]	; (800d248 <prvAddNewTaskToReadyList+0xc4>)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d1a8:	4b26      	ldr	r3, [pc, #152]	; (800d244 <prvAddNewTaskToReadyList+0xc0>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2b01      	cmp	r3, #1
 800d1ae:	d110      	bne.n	800d1d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d1b0:	f000 fc1a 	bl	800d9e8 <prvInitialiseTaskLists>
 800d1b4:	e00d      	b.n	800d1d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d1b6:	4b25      	ldr	r3, [pc, #148]	; (800d24c <prvAddNewTaskToReadyList+0xc8>)
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d109      	bne.n	800d1d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d1be:	4b22      	ldr	r3, [pc, #136]	; (800d248 <prvAddNewTaskToReadyList+0xc4>)
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d802      	bhi.n	800d1d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d1cc:	4a1e      	ldr	r2, [pc, #120]	; (800d248 <prvAddNewTaskToReadyList+0xc4>)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d1d2:	4b1f      	ldr	r3, [pc, #124]	; (800d250 <prvAddNewTaskToReadyList+0xcc>)
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	3301      	adds	r3, #1
 800d1d8:	4a1d      	ldr	r2, [pc, #116]	; (800d250 <prvAddNewTaskToReadyList+0xcc>)
 800d1da:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d1dc:	4b1c      	ldr	r3, [pc, #112]	; (800d250 <prvAddNewTaskToReadyList+0xcc>)
 800d1de:	681a      	ldr	r2, [r3, #0]
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	409a      	lsls	r2, r3
 800d1ec:	4b19      	ldr	r3, [pc, #100]	; (800d254 <prvAddNewTaskToReadyList+0xd0>)
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	4a18      	ldr	r2, [pc, #96]	; (800d254 <prvAddNewTaskToReadyList+0xd0>)
 800d1f4:	6013      	str	r3, [r2, #0]
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1fa:	4613      	mov	r3, r2
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	4413      	add	r3, r2
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	4a15      	ldr	r2, [pc, #84]	; (800d258 <prvAddNewTaskToReadyList+0xd4>)
 800d204:	441a      	add	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3304      	adds	r3, #4
 800d20a:	4619      	mov	r1, r3
 800d20c:	4610      	mov	r0, r2
 800d20e:	f7fe fea2 	bl	800bf56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d212:	f001 f827 	bl	800e264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d216:	4b0d      	ldr	r3, [pc, #52]	; (800d24c <prvAddNewTaskToReadyList+0xc8>)
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00e      	beq.n	800d23c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d21e:	4b0a      	ldr	r3, [pc, #40]	; (800d248 <prvAddNewTaskToReadyList+0xc4>)
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d228:	429a      	cmp	r2, r3
 800d22a:	d207      	bcs.n	800d23c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d22c:	4b0b      	ldr	r3, [pc, #44]	; (800d25c <prvAddNewTaskToReadyList+0xd8>)
 800d22e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d232:	601a      	str	r2, [r3, #0]
 800d234:	f3bf 8f4f 	dsb	sy
 800d238:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d23c:	bf00      	nop
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	24000488 	.word	0x24000488
 800d248:	24000388 	.word	0x24000388
 800d24c:	24000494 	.word	0x24000494
 800d250:	240004a4 	.word	0x240004a4
 800d254:	24000490 	.word	0x24000490
 800d258:	2400038c 	.word	0x2400038c
 800d25c:	e000ed04 	.word	0xe000ed04

0800d260 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d268:	2300      	movs	r3, #0
 800d26a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d017      	beq.n	800d2a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d272:	4b13      	ldr	r3, [pc, #76]	; (800d2c0 <vTaskDelay+0x60>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d00a      	beq.n	800d290 <vTaskDelay+0x30>
	__asm volatile
 800d27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d27e:	f383 8811 	msr	BASEPRI, r3
 800d282:	f3bf 8f6f 	isb	sy
 800d286:	f3bf 8f4f 	dsb	sy
 800d28a:	60bb      	str	r3, [r7, #8]
}
 800d28c:	bf00      	nop
 800d28e:	e7fe      	b.n	800d28e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d290:	f000 f886 	bl	800d3a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d294:	2100      	movs	r1, #0
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 fe24 	bl	800dee4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d29c:	f000 f88e 	bl	800d3bc <xTaskResumeAll>
 800d2a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d107      	bne.n	800d2b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d2a8:	4b06      	ldr	r3, [pc, #24]	; (800d2c4 <vTaskDelay+0x64>)
 800d2aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2ae:	601a      	str	r2, [r3, #0]
 800d2b0:	f3bf 8f4f 	dsb	sy
 800d2b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2b8:	bf00      	nop
 800d2ba:	3710      	adds	r7, #16
 800d2bc:	46bd      	mov	sp, r7
 800d2be:	bd80      	pop	{r7, pc}
 800d2c0:	240004b0 	.word	0x240004b0
 800d2c4:	e000ed04 	.word	0xe000ed04

0800d2c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	b08a      	sub	sp, #40	; 0x28
 800d2cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d2d6:	463a      	mov	r2, r7
 800d2d8:	1d39      	adds	r1, r7, #4
 800d2da:	f107 0308 	add.w	r3, r7, #8
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7f3 ff36 	bl	8001150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d2e4:	6839      	ldr	r1, [r7, #0]
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	9202      	str	r2, [sp, #8]
 800d2ec:	9301      	str	r3, [sp, #4]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	9300      	str	r3, [sp, #0]
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	460a      	mov	r2, r1
 800d2f6:	4922      	ldr	r1, [pc, #136]	; (800d380 <vTaskStartScheduler+0xb8>)
 800d2f8:	4822      	ldr	r0, [pc, #136]	; (800d384 <vTaskStartScheduler+0xbc>)
 800d2fa:	f7ff fdf7 	bl	800ceec <xTaskCreateStatic>
 800d2fe:	4603      	mov	r3, r0
 800d300:	4a21      	ldr	r2, [pc, #132]	; (800d388 <vTaskStartScheduler+0xc0>)
 800d302:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d304:	4b20      	ldr	r3, [pc, #128]	; (800d388 <vTaskStartScheduler+0xc0>)
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d002      	beq.n	800d312 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d30c:	2301      	movs	r3, #1
 800d30e:	617b      	str	r3, [r7, #20]
 800d310:	e001      	b.n	800d316 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d312:	2300      	movs	r3, #0
 800d314:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d11d      	bne.n	800d358 <vTaskStartScheduler+0x90>
	__asm volatile
 800d31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d320:	f383 8811 	msr	BASEPRI, r3
 800d324:	f3bf 8f6f 	isb	sy
 800d328:	f3bf 8f4f 	dsb	sy
 800d32c:	613b      	str	r3, [r7, #16]
}
 800d32e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d330:	4b16      	ldr	r3, [pc, #88]	; (800d38c <vTaskStartScheduler+0xc4>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	3358      	adds	r3, #88	; 0x58
 800d336:	4a16      	ldr	r2, [pc, #88]	; (800d390 <vTaskStartScheduler+0xc8>)
 800d338:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d33a:	4b16      	ldr	r3, [pc, #88]	; (800d394 <vTaskStartScheduler+0xcc>)
 800d33c:	f04f 32ff 	mov.w	r2, #4294967295
 800d340:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d342:	4b15      	ldr	r3, [pc, #84]	; (800d398 <vTaskStartScheduler+0xd0>)
 800d344:	2201      	movs	r2, #1
 800d346:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d348:	4b14      	ldr	r3, [pc, #80]	; (800d39c <vTaskStartScheduler+0xd4>)
 800d34a:	2200      	movs	r2, #0
 800d34c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800d34e:	f7f3 feef 	bl	8001130 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d352:	f000 feb5 	bl	800e0c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d356:	e00e      	b.n	800d376 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d35e:	d10a      	bne.n	800d376 <vTaskStartScheduler+0xae>
	__asm volatile
 800d360:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	60fb      	str	r3, [r7, #12]
}
 800d372:	bf00      	nop
 800d374:	e7fe      	b.n	800d374 <vTaskStartScheduler+0xac>
}
 800d376:	bf00      	nop
 800d378:	3718      	adds	r7, #24
 800d37a:	46bd      	mov	sp, r7
 800d37c:	bd80      	pop	{r7, pc}
 800d37e:	bf00      	nop
 800d380:	0801ae20 	.word	0x0801ae20
 800d384:	0800d9b9 	.word	0x0800d9b9
 800d388:	240004ac 	.word	0x240004ac
 800d38c:	24000388 	.word	0x24000388
 800d390:	2400003c 	.word	0x2400003c
 800d394:	240004a8 	.word	0x240004a8
 800d398:	24000494 	.word	0x24000494
 800d39c:	2400048c 	.word	0x2400048c

0800d3a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d3a4:	4b04      	ldr	r3, [pc, #16]	; (800d3b8 <vTaskSuspendAll+0x18>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	4a03      	ldr	r2, [pc, #12]	; (800d3b8 <vTaskSuspendAll+0x18>)
 800d3ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d3ae:	bf00      	nop
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b6:	4770      	bx	lr
 800d3b8:	240004b0 	.word	0x240004b0

0800d3bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d3ca:	4b41      	ldr	r3, [pc, #260]	; (800d4d0 <xTaskResumeAll+0x114>)
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d10a      	bne.n	800d3e8 <xTaskResumeAll+0x2c>
	__asm volatile
 800d3d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3d6:	f383 8811 	msr	BASEPRI, r3
 800d3da:	f3bf 8f6f 	isb	sy
 800d3de:	f3bf 8f4f 	dsb	sy
 800d3e2:	603b      	str	r3, [r7, #0]
}
 800d3e4:	bf00      	nop
 800d3e6:	e7fe      	b.n	800d3e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d3e8:	f000 ff0c 	bl	800e204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d3ec:	4b38      	ldr	r3, [pc, #224]	; (800d4d0 <xTaskResumeAll+0x114>)
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	3b01      	subs	r3, #1
 800d3f2:	4a37      	ldr	r2, [pc, #220]	; (800d4d0 <xTaskResumeAll+0x114>)
 800d3f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d3f6:	4b36      	ldr	r3, [pc, #216]	; (800d4d0 <xTaskResumeAll+0x114>)
 800d3f8:	681b      	ldr	r3, [r3, #0]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d161      	bne.n	800d4c2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d3fe:	4b35      	ldr	r3, [pc, #212]	; (800d4d4 <xTaskResumeAll+0x118>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d05d      	beq.n	800d4c2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d406:	e02e      	b.n	800d466 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d408:	4b33      	ldr	r3, [pc, #204]	; (800d4d8 <xTaskResumeAll+0x11c>)
 800d40a:	68db      	ldr	r3, [r3, #12]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	3318      	adds	r3, #24
 800d414:	4618      	mov	r0, r3
 800d416:	f7fe fdfb 	bl	800c010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	3304      	adds	r3, #4
 800d41e:	4618      	mov	r0, r3
 800d420:	f7fe fdf6 	bl	800c010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d428:	2201      	movs	r2, #1
 800d42a:	409a      	lsls	r2, r3
 800d42c:	4b2b      	ldr	r3, [pc, #172]	; (800d4dc <xTaskResumeAll+0x120>)
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	4313      	orrs	r3, r2
 800d432:	4a2a      	ldr	r2, [pc, #168]	; (800d4dc <xTaskResumeAll+0x120>)
 800d434:	6013      	str	r3, [r2, #0]
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d43a:	4613      	mov	r3, r2
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	4413      	add	r3, r2
 800d440:	009b      	lsls	r3, r3, #2
 800d442:	4a27      	ldr	r2, [pc, #156]	; (800d4e0 <xTaskResumeAll+0x124>)
 800d444:	441a      	add	r2, r3
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	3304      	adds	r3, #4
 800d44a:	4619      	mov	r1, r3
 800d44c:	4610      	mov	r0, r2
 800d44e:	f7fe fd82 	bl	800bf56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d456:	4b23      	ldr	r3, [pc, #140]	; (800d4e4 <xTaskResumeAll+0x128>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d302      	bcc.n	800d466 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d460:	4b21      	ldr	r3, [pc, #132]	; (800d4e8 <xTaskResumeAll+0x12c>)
 800d462:	2201      	movs	r2, #1
 800d464:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d466:	4b1c      	ldr	r3, [pc, #112]	; (800d4d8 <xTaskResumeAll+0x11c>)
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1cc      	bne.n	800d408 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d001      	beq.n	800d478 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d474:	f000 fb5a 	bl	800db2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d478:	4b1c      	ldr	r3, [pc, #112]	; (800d4ec <xTaskResumeAll+0x130>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d010      	beq.n	800d4a6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d484:	f000 f858 	bl	800d538 <xTaskIncrementTick>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d002      	beq.n	800d494 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d48e:	4b16      	ldr	r3, [pc, #88]	; (800d4e8 <xTaskResumeAll+0x12c>)
 800d490:	2201      	movs	r2, #1
 800d492:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	3b01      	subs	r3, #1
 800d498:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d1f1      	bne.n	800d484 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d4a0:	4b12      	ldr	r3, [pc, #72]	; (800d4ec <xTaskResumeAll+0x130>)
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d4a6:	4b10      	ldr	r3, [pc, #64]	; (800d4e8 <xTaskResumeAll+0x12c>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d009      	beq.n	800d4c2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d4b2:	4b0f      	ldr	r3, [pc, #60]	; (800d4f0 <xTaskResumeAll+0x134>)
 800d4b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d4b8:	601a      	str	r2, [r3, #0]
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d4c2:	f000 fecf 	bl	800e264 <vPortExitCritical>

	return xAlreadyYielded;
 800d4c6:	68bb      	ldr	r3, [r7, #8]
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3710      	adds	r7, #16
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	240004b0 	.word	0x240004b0
 800d4d4:	24000488 	.word	0x24000488
 800d4d8:	24000448 	.word	0x24000448
 800d4dc:	24000490 	.word	0x24000490
 800d4e0:	2400038c 	.word	0x2400038c
 800d4e4:	24000388 	.word	0x24000388
 800d4e8:	2400049c 	.word	0x2400049c
 800d4ec:	24000498 	.word	0x24000498
 800d4f0:	e000ed04 	.word	0xe000ed04

0800d4f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d4f4:	b480      	push	{r7}
 800d4f6:	b083      	sub	sp, #12
 800d4f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d4fa:	4b05      	ldr	r3, [pc, #20]	; (800d510 <xTaskGetTickCount+0x1c>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d500:	687b      	ldr	r3, [r7, #4]
}
 800d502:	4618      	mov	r0, r3
 800d504:	370c      	adds	r7, #12
 800d506:	46bd      	mov	sp, r7
 800d508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50c:	4770      	bx	lr
 800d50e:	bf00      	nop
 800d510:	2400048c 	.word	0x2400048c

0800d514 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d51a:	f000 ff55 	bl	800e3c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800d51e:	2300      	movs	r3, #0
 800d520:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800d522:	4b04      	ldr	r3, [pc, #16]	; (800d534 <xTaskGetTickCountFromISR+0x20>)
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d528:	683b      	ldr	r3, [r7, #0]
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3708      	adds	r7, #8
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	2400048c 	.word	0x2400048c

0800d538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d53e:	2300      	movs	r3, #0
 800d540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d542:	4b4e      	ldr	r3, [pc, #312]	; (800d67c <xTaskIncrementTick+0x144>)
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	2b00      	cmp	r3, #0
 800d548:	f040 808e 	bne.w	800d668 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d54c:	4b4c      	ldr	r3, [pc, #304]	; (800d680 <xTaskIncrementTick+0x148>)
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	3301      	adds	r3, #1
 800d552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d554:	4a4a      	ldr	r2, [pc, #296]	; (800d680 <xTaskIncrementTick+0x148>)
 800d556:	693b      	ldr	r3, [r7, #16]
 800d558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d120      	bne.n	800d5a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d560:	4b48      	ldr	r3, [pc, #288]	; (800d684 <xTaskIncrementTick+0x14c>)
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d00a      	beq.n	800d580 <xTaskIncrementTick+0x48>
	__asm volatile
 800d56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d56e:	f383 8811 	msr	BASEPRI, r3
 800d572:	f3bf 8f6f 	isb	sy
 800d576:	f3bf 8f4f 	dsb	sy
 800d57a:	603b      	str	r3, [r7, #0]
}
 800d57c:	bf00      	nop
 800d57e:	e7fe      	b.n	800d57e <xTaskIncrementTick+0x46>
 800d580:	4b40      	ldr	r3, [pc, #256]	; (800d684 <xTaskIncrementTick+0x14c>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	60fb      	str	r3, [r7, #12]
 800d586:	4b40      	ldr	r3, [pc, #256]	; (800d688 <xTaskIncrementTick+0x150>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	4a3e      	ldr	r2, [pc, #248]	; (800d684 <xTaskIncrementTick+0x14c>)
 800d58c:	6013      	str	r3, [r2, #0]
 800d58e:	4a3e      	ldr	r2, [pc, #248]	; (800d688 <xTaskIncrementTick+0x150>)
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6013      	str	r3, [r2, #0]
 800d594:	4b3d      	ldr	r3, [pc, #244]	; (800d68c <xTaskIncrementTick+0x154>)
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	3301      	adds	r3, #1
 800d59a:	4a3c      	ldr	r2, [pc, #240]	; (800d68c <xTaskIncrementTick+0x154>)
 800d59c:	6013      	str	r3, [r2, #0]
 800d59e:	f000 fac5 	bl	800db2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d5a2:	4b3b      	ldr	r3, [pc, #236]	; (800d690 <xTaskIncrementTick+0x158>)
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	693a      	ldr	r2, [r7, #16]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d348      	bcc.n	800d63e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d5ac:	4b35      	ldr	r3, [pc, #212]	; (800d684 <xTaskIncrementTick+0x14c>)
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d104      	bne.n	800d5c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5b6:	4b36      	ldr	r3, [pc, #216]	; (800d690 <xTaskIncrementTick+0x158>)
 800d5b8:	f04f 32ff 	mov.w	r2, #4294967295
 800d5bc:	601a      	str	r2, [r3, #0]
					break;
 800d5be:	e03e      	b.n	800d63e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5c0:	4b30      	ldr	r3, [pc, #192]	; (800d684 <xTaskIncrementTick+0x14c>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	68db      	ldr	r3, [r3, #12]
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	685b      	ldr	r3, [r3, #4]
 800d5ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d5d0:	693a      	ldr	r2, [r7, #16]
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d203      	bcs.n	800d5e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d5d8:	4a2d      	ldr	r2, [pc, #180]	; (800d690 <xTaskIncrementTick+0x158>)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d5de:	e02e      	b.n	800d63e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d5e0:	68bb      	ldr	r3, [r7, #8]
 800d5e2:	3304      	adds	r3, #4
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	f7fe fd13 	bl	800c010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d5ea:	68bb      	ldr	r3, [r7, #8]
 800d5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d004      	beq.n	800d5fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	3318      	adds	r3, #24
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f7fe fd0a 	bl	800c010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d5fc:	68bb      	ldr	r3, [r7, #8]
 800d5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d600:	2201      	movs	r2, #1
 800d602:	409a      	lsls	r2, r3
 800d604:	4b23      	ldr	r3, [pc, #140]	; (800d694 <xTaskIncrementTick+0x15c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	4313      	orrs	r3, r2
 800d60a:	4a22      	ldr	r2, [pc, #136]	; (800d694 <xTaskIncrementTick+0x15c>)
 800d60c:	6013      	str	r3, [r2, #0]
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d612:	4613      	mov	r3, r2
 800d614:	009b      	lsls	r3, r3, #2
 800d616:	4413      	add	r3, r2
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4a1f      	ldr	r2, [pc, #124]	; (800d698 <xTaskIncrementTick+0x160>)
 800d61c:	441a      	add	r2, r3
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	3304      	adds	r3, #4
 800d622:	4619      	mov	r1, r3
 800d624:	4610      	mov	r0, r2
 800d626:	f7fe fc96 	bl	800bf56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d62e:	4b1b      	ldr	r3, [pc, #108]	; (800d69c <xTaskIncrementTick+0x164>)
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d634:	429a      	cmp	r2, r3
 800d636:	d3b9      	bcc.n	800d5ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d638:	2301      	movs	r3, #1
 800d63a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d63c:	e7b6      	b.n	800d5ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d63e:	4b17      	ldr	r3, [pc, #92]	; (800d69c <xTaskIncrementTick+0x164>)
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d644:	4914      	ldr	r1, [pc, #80]	; (800d698 <xTaskIncrementTick+0x160>)
 800d646:	4613      	mov	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	440b      	add	r3, r1
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	2b01      	cmp	r3, #1
 800d654:	d901      	bls.n	800d65a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d656:	2301      	movs	r3, #1
 800d658:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d65a:	4b11      	ldr	r3, [pc, #68]	; (800d6a0 <xTaskIncrementTick+0x168>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d007      	beq.n	800d672 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d662:	2301      	movs	r3, #1
 800d664:	617b      	str	r3, [r7, #20]
 800d666:	e004      	b.n	800d672 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d668:	4b0e      	ldr	r3, [pc, #56]	; (800d6a4 <xTaskIncrementTick+0x16c>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	3301      	adds	r3, #1
 800d66e:	4a0d      	ldr	r2, [pc, #52]	; (800d6a4 <xTaskIncrementTick+0x16c>)
 800d670:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d672:	697b      	ldr	r3, [r7, #20]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3718      	adds	r7, #24
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	240004b0 	.word	0x240004b0
 800d680:	2400048c 	.word	0x2400048c
 800d684:	24000440 	.word	0x24000440
 800d688:	24000444 	.word	0x24000444
 800d68c:	240004a0 	.word	0x240004a0
 800d690:	240004a8 	.word	0x240004a8
 800d694:	24000490 	.word	0x24000490
 800d698:	2400038c 	.word	0x2400038c
 800d69c:	24000388 	.word	0x24000388
 800d6a0:	2400049c 	.word	0x2400049c
 800d6a4:	24000498 	.word	0x24000498

0800d6a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b086      	sub	sp, #24
 800d6ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d6ae:	4b35      	ldr	r3, [pc, #212]	; (800d784 <vTaskSwitchContext+0xdc>)
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d003      	beq.n	800d6be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d6b6:	4b34      	ldr	r3, [pc, #208]	; (800d788 <vTaskSwitchContext+0xe0>)
 800d6b8:	2201      	movs	r2, #1
 800d6ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d6bc:	e05d      	b.n	800d77a <vTaskSwitchContext+0xd2>
		xYieldPending = pdFALSE;
 800d6be:	4b32      	ldr	r3, [pc, #200]	; (800d788 <vTaskSwitchContext+0xe0>)
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800d6c4:	f7f3 fd3b 	bl	800113e <getRunTimeCounterValue>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	4a30      	ldr	r2, [pc, #192]	; (800d78c <vTaskSwitchContext+0xe4>)
 800d6cc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800d6ce:	4b2f      	ldr	r3, [pc, #188]	; (800d78c <vTaskSwitchContext+0xe4>)
 800d6d0:	681a      	ldr	r2, [r3, #0]
 800d6d2:	4b2f      	ldr	r3, [pc, #188]	; (800d790 <vTaskSwitchContext+0xe8>)
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	d909      	bls.n	800d6ee <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800d6da:	4b2e      	ldr	r3, [pc, #184]	; (800d794 <vTaskSwitchContext+0xec>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800d6e0:	4a2a      	ldr	r2, [pc, #168]	; (800d78c <vTaskSwitchContext+0xe4>)
 800d6e2:	6810      	ldr	r0, [r2, #0]
 800d6e4:	4a2a      	ldr	r2, [pc, #168]	; (800d790 <vTaskSwitchContext+0xe8>)
 800d6e6:	6812      	ldr	r2, [r2, #0]
 800d6e8:	1a82      	subs	r2, r0, r2
 800d6ea:	440a      	add	r2, r1
 800d6ec:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800d6ee:	4b27      	ldr	r3, [pc, #156]	; (800d78c <vTaskSwitchContext+0xe4>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	4a27      	ldr	r2, [pc, #156]	; (800d790 <vTaskSwitchContext+0xe8>)
 800d6f4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f6:	4b28      	ldr	r3, [pc, #160]	; (800d798 <vTaskSwitchContext+0xf0>)
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	fab3 f383 	clz	r3, r3
 800d702:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d704:	7afb      	ldrb	r3, [r7, #11]
 800d706:	f1c3 031f 	rsb	r3, r3, #31
 800d70a:	617b      	str	r3, [r7, #20]
 800d70c:	4923      	ldr	r1, [pc, #140]	; (800d79c <vTaskSwitchContext+0xf4>)
 800d70e:	697a      	ldr	r2, [r7, #20]
 800d710:	4613      	mov	r3, r2
 800d712:	009b      	lsls	r3, r3, #2
 800d714:	4413      	add	r3, r2
 800d716:	009b      	lsls	r3, r3, #2
 800d718:	440b      	add	r3, r1
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d10a      	bne.n	800d736 <vTaskSwitchContext+0x8e>
	__asm volatile
 800d720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d724:	f383 8811 	msr	BASEPRI, r3
 800d728:	f3bf 8f6f 	isb	sy
 800d72c:	f3bf 8f4f 	dsb	sy
 800d730:	607b      	str	r3, [r7, #4]
}
 800d732:	bf00      	nop
 800d734:	e7fe      	b.n	800d734 <vTaskSwitchContext+0x8c>
 800d736:	697a      	ldr	r2, [r7, #20]
 800d738:	4613      	mov	r3, r2
 800d73a:	009b      	lsls	r3, r3, #2
 800d73c:	4413      	add	r3, r2
 800d73e:	009b      	lsls	r3, r3, #2
 800d740:	4a16      	ldr	r2, [pc, #88]	; (800d79c <vTaskSwitchContext+0xf4>)
 800d742:	4413      	add	r3, r2
 800d744:	613b      	str	r3, [r7, #16]
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	685b      	ldr	r3, [r3, #4]
 800d74a:	685a      	ldr	r2, [r3, #4]
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	605a      	str	r2, [r3, #4]
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	685a      	ldr	r2, [r3, #4]
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	3308      	adds	r3, #8
 800d758:	429a      	cmp	r2, r3
 800d75a:	d104      	bne.n	800d766 <vTaskSwitchContext+0xbe>
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	685a      	ldr	r2, [r3, #4]
 800d762:	693b      	ldr	r3, [r7, #16]
 800d764:	605a      	str	r2, [r3, #4]
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	685b      	ldr	r3, [r3, #4]
 800d76a:	68db      	ldr	r3, [r3, #12]
 800d76c:	4a09      	ldr	r2, [pc, #36]	; (800d794 <vTaskSwitchContext+0xec>)
 800d76e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d770:	4b08      	ldr	r3, [pc, #32]	; (800d794 <vTaskSwitchContext+0xec>)
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	3358      	adds	r3, #88	; 0x58
 800d776:	4a0a      	ldr	r2, [pc, #40]	; (800d7a0 <vTaskSwitchContext+0xf8>)
 800d778:	6013      	str	r3, [r2, #0]
}
 800d77a:	bf00      	nop
 800d77c:	3718      	adds	r7, #24
 800d77e:	46bd      	mov	sp, r7
 800d780:	bd80      	pop	{r7, pc}
 800d782:	bf00      	nop
 800d784:	240004b0 	.word	0x240004b0
 800d788:	2400049c 	.word	0x2400049c
 800d78c:	240004b8 	.word	0x240004b8
 800d790:	240004b4 	.word	0x240004b4
 800d794:	24000388 	.word	0x24000388
 800d798:	24000490 	.word	0x24000490
 800d79c:	2400038c 	.word	0x2400038c
 800d7a0:	2400003c 	.word	0x2400003c

0800d7a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d10a      	bne.n	800d7ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7b8:	f383 8811 	msr	BASEPRI, r3
 800d7bc:	f3bf 8f6f 	isb	sy
 800d7c0:	f3bf 8f4f 	dsb	sy
 800d7c4:	60fb      	str	r3, [r7, #12]
}
 800d7c6:	bf00      	nop
 800d7c8:	e7fe      	b.n	800d7c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d7ca:	4b07      	ldr	r3, [pc, #28]	; (800d7e8 <vTaskPlaceOnEventList+0x44>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	3318      	adds	r3, #24
 800d7d0:	4619      	mov	r1, r3
 800d7d2:	6878      	ldr	r0, [r7, #4]
 800d7d4:	f7fe fbe3 	bl	800bf9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d7d8:	2101      	movs	r1, #1
 800d7da:	6838      	ldr	r0, [r7, #0]
 800d7dc:	f000 fb82 	bl	800dee4 <prvAddCurrentTaskToDelayedList>
}
 800d7e0:	bf00      	nop
 800d7e2:	3710      	adds	r7, #16
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	24000388 	.word	0x24000388

0800d7ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b086      	sub	sp, #24
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	68db      	ldr	r3, [r3, #12]
 800d7fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d10a      	bne.n	800d818 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d806:	f383 8811 	msr	BASEPRI, r3
 800d80a:	f3bf 8f6f 	isb	sy
 800d80e:	f3bf 8f4f 	dsb	sy
 800d812:	60fb      	str	r3, [r7, #12]
}
 800d814:	bf00      	nop
 800d816:	e7fe      	b.n	800d816 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	3318      	adds	r3, #24
 800d81c:	4618      	mov	r0, r3
 800d81e:	f7fe fbf7 	bl	800c010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d822:	4b1d      	ldr	r3, [pc, #116]	; (800d898 <xTaskRemoveFromEventList+0xac>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d11c      	bne.n	800d864 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d82a:	693b      	ldr	r3, [r7, #16]
 800d82c:	3304      	adds	r3, #4
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe fbee 	bl	800c010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	2201      	movs	r2, #1
 800d83a:	409a      	lsls	r2, r3
 800d83c:	4b17      	ldr	r3, [pc, #92]	; (800d89c <xTaskRemoveFromEventList+0xb0>)
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4313      	orrs	r3, r2
 800d842:	4a16      	ldr	r2, [pc, #88]	; (800d89c <xTaskRemoveFromEventList+0xb0>)
 800d844:	6013      	str	r3, [r2, #0]
 800d846:	693b      	ldr	r3, [r7, #16]
 800d848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d84a:	4613      	mov	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4413      	add	r3, r2
 800d850:	009b      	lsls	r3, r3, #2
 800d852:	4a13      	ldr	r2, [pc, #76]	; (800d8a0 <xTaskRemoveFromEventList+0xb4>)
 800d854:	441a      	add	r2, r3
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	3304      	adds	r3, #4
 800d85a:	4619      	mov	r1, r3
 800d85c:	4610      	mov	r0, r2
 800d85e:	f7fe fb7a 	bl	800bf56 <vListInsertEnd>
 800d862:	e005      	b.n	800d870 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	3318      	adds	r3, #24
 800d868:	4619      	mov	r1, r3
 800d86a:	480e      	ldr	r0, [pc, #56]	; (800d8a4 <xTaskRemoveFromEventList+0xb8>)
 800d86c:	f7fe fb73 	bl	800bf56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d874:	4b0c      	ldr	r3, [pc, #48]	; (800d8a8 <xTaskRemoveFromEventList+0xbc>)
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d905      	bls.n	800d88a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d87e:	2301      	movs	r3, #1
 800d880:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d882:	4b0a      	ldr	r3, [pc, #40]	; (800d8ac <xTaskRemoveFromEventList+0xc0>)
 800d884:	2201      	movs	r2, #1
 800d886:	601a      	str	r2, [r3, #0]
 800d888:	e001      	b.n	800d88e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d88a:	2300      	movs	r3, #0
 800d88c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d88e:	697b      	ldr	r3, [r7, #20]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3718      	adds	r7, #24
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	240004b0 	.word	0x240004b0
 800d89c:	24000490 	.word	0x24000490
 800d8a0:	2400038c 	.word	0x2400038c
 800d8a4:	24000448 	.word	0x24000448
 800d8a8:	24000388 	.word	0x24000388
 800d8ac:	2400049c 	.word	0x2400049c

0800d8b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b083      	sub	sp, #12
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d8b8:	4b06      	ldr	r3, [pc, #24]	; (800d8d4 <vTaskInternalSetTimeOutState+0x24>)
 800d8ba:	681a      	ldr	r2, [r3, #0]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d8c0:	4b05      	ldr	r3, [pc, #20]	; (800d8d8 <vTaskInternalSetTimeOutState+0x28>)
 800d8c2:	681a      	ldr	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	605a      	str	r2, [r3, #4]
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr
 800d8d4:	240004a0 	.word	0x240004a0
 800d8d8:	2400048c 	.word	0x2400048c

0800d8dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b088      	sub	sp, #32
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d10a      	bne.n	800d902 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8f0:	f383 8811 	msr	BASEPRI, r3
 800d8f4:	f3bf 8f6f 	isb	sy
 800d8f8:	f3bf 8f4f 	dsb	sy
 800d8fc:	613b      	str	r3, [r7, #16]
}
 800d8fe:	bf00      	nop
 800d900:	e7fe      	b.n	800d900 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10a      	bne.n	800d91e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90c:	f383 8811 	msr	BASEPRI, r3
 800d910:	f3bf 8f6f 	isb	sy
 800d914:	f3bf 8f4f 	dsb	sy
 800d918:	60fb      	str	r3, [r7, #12]
}
 800d91a:	bf00      	nop
 800d91c:	e7fe      	b.n	800d91c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d91e:	f000 fc71 	bl	800e204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d922:	4b1d      	ldr	r3, [pc, #116]	; (800d998 <xTaskCheckForTimeOut+0xbc>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	69ba      	ldr	r2, [r7, #24]
 800d92e:	1ad3      	subs	r3, r2, r3
 800d930:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93a:	d102      	bne.n	800d942 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d93c:	2300      	movs	r3, #0
 800d93e:	61fb      	str	r3, [r7, #28]
 800d940:	e023      	b.n	800d98a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681a      	ldr	r2, [r3, #0]
 800d946:	4b15      	ldr	r3, [pc, #84]	; (800d99c <xTaskCheckForTimeOut+0xc0>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d007      	beq.n	800d95e <xTaskCheckForTimeOut+0x82>
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	685b      	ldr	r3, [r3, #4]
 800d952:	69ba      	ldr	r2, [r7, #24]
 800d954:	429a      	cmp	r2, r3
 800d956:	d302      	bcc.n	800d95e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d958:	2301      	movs	r3, #1
 800d95a:	61fb      	str	r3, [r7, #28]
 800d95c:	e015      	b.n	800d98a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	697a      	ldr	r2, [r7, #20]
 800d964:	429a      	cmp	r2, r3
 800d966:	d20b      	bcs.n	800d980 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	697b      	ldr	r3, [r7, #20]
 800d96e:	1ad2      	subs	r2, r2, r3
 800d970:	683b      	ldr	r3, [r7, #0]
 800d972:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d974:	6878      	ldr	r0, [r7, #4]
 800d976:	f7ff ff9b 	bl	800d8b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d97a:	2300      	movs	r3, #0
 800d97c:	61fb      	str	r3, [r7, #28]
 800d97e:	e004      	b.n	800d98a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d980:	683b      	ldr	r3, [r7, #0]
 800d982:	2200      	movs	r2, #0
 800d984:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d986:	2301      	movs	r3, #1
 800d988:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d98a:	f000 fc6b 	bl	800e264 <vPortExitCritical>

	return xReturn;
 800d98e:	69fb      	ldr	r3, [r7, #28]
}
 800d990:	4618      	mov	r0, r3
 800d992:	3720      	adds	r7, #32
 800d994:	46bd      	mov	sp, r7
 800d996:	bd80      	pop	{r7, pc}
 800d998:	2400048c 	.word	0x2400048c
 800d99c:	240004a0 	.word	0x240004a0

0800d9a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d9a4:	4b03      	ldr	r3, [pc, #12]	; (800d9b4 <vTaskMissedYield+0x14>)
 800d9a6:	2201      	movs	r2, #1
 800d9a8:	601a      	str	r2, [r3, #0]
}
 800d9aa:	bf00      	nop
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	2400049c 	.word	0x2400049c

0800d9b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d9b8:	b580      	push	{r7, lr}
 800d9ba:	b082      	sub	sp, #8
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d9c0:	f000 f852 	bl	800da68 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d9c4:	4b06      	ldr	r3, [pc, #24]	; (800d9e0 <prvIdleTask+0x28>)
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	2b01      	cmp	r3, #1
 800d9ca:	d9f9      	bls.n	800d9c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d9cc:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <prvIdleTask+0x2c>)
 800d9ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9d2:	601a      	str	r2, [r3, #0]
 800d9d4:	f3bf 8f4f 	dsb	sy
 800d9d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d9dc:	e7f0      	b.n	800d9c0 <prvIdleTask+0x8>
 800d9de:	bf00      	nop
 800d9e0:	2400038c 	.word	0x2400038c
 800d9e4:	e000ed04 	.word	0xe000ed04

0800d9e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b082      	sub	sp, #8
 800d9ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	607b      	str	r3, [r7, #4]
 800d9f2:	e00c      	b.n	800da0e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d9f4:	687a      	ldr	r2, [r7, #4]
 800d9f6:	4613      	mov	r3, r2
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	4413      	add	r3, r2
 800d9fc:	009b      	lsls	r3, r3, #2
 800d9fe:	4a12      	ldr	r2, [pc, #72]	; (800da48 <prvInitialiseTaskLists+0x60>)
 800da00:	4413      	add	r3, r2
 800da02:	4618      	mov	r0, r3
 800da04:	f7fe fa7a 	bl	800befc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	3301      	adds	r3, #1
 800da0c:	607b      	str	r3, [r7, #4]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	2b06      	cmp	r3, #6
 800da12:	d9ef      	bls.n	800d9f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800da14:	480d      	ldr	r0, [pc, #52]	; (800da4c <prvInitialiseTaskLists+0x64>)
 800da16:	f7fe fa71 	bl	800befc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800da1a:	480d      	ldr	r0, [pc, #52]	; (800da50 <prvInitialiseTaskLists+0x68>)
 800da1c:	f7fe fa6e 	bl	800befc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800da20:	480c      	ldr	r0, [pc, #48]	; (800da54 <prvInitialiseTaskLists+0x6c>)
 800da22:	f7fe fa6b 	bl	800befc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800da26:	480c      	ldr	r0, [pc, #48]	; (800da58 <prvInitialiseTaskLists+0x70>)
 800da28:	f7fe fa68 	bl	800befc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800da2c:	480b      	ldr	r0, [pc, #44]	; (800da5c <prvInitialiseTaskLists+0x74>)
 800da2e:	f7fe fa65 	bl	800befc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800da32:	4b0b      	ldr	r3, [pc, #44]	; (800da60 <prvInitialiseTaskLists+0x78>)
 800da34:	4a05      	ldr	r2, [pc, #20]	; (800da4c <prvInitialiseTaskLists+0x64>)
 800da36:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800da38:	4b0a      	ldr	r3, [pc, #40]	; (800da64 <prvInitialiseTaskLists+0x7c>)
 800da3a:	4a05      	ldr	r2, [pc, #20]	; (800da50 <prvInitialiseTaskLists+0x68>)
 800da3c:	601a      	str	r2, [r3, #0]
}
 800da3e:	bf00      	nop
 800da40:	3708      	adds	r7, #8
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	2400038c 	.word	0x2400038c
 800da4c:	24000418 	.word	0x24000418
 800da50:	2400042c 	.word	0x2400042c
 800da54:	24000448 	.word	0x24000448
 800da58:	2400045c 	.word	0x2400045c
 800da5c:	24000474 	.word	0x24000474
 800da60:	24000440 	.word	0x24000440
 800da64:	24000444 	.word	0x24000444

0800da68 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b082      	sub	sp, #8
 800da6c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800da6e:	e019      	b.n	800daa4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800da70:	f000 fbc8 	bl	800e204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da74:	4b10      	ldr	r3, [pc, #64]	; (800dab8 <prvCheckTasksWaitingTermination+0x50>)
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	68db      	ldr	r3, [r3, #12]
 800da7a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	3304      	adds	r3, #4
 800da80:	4618      	mov	r0, r3
 800da82:	f7fe fac5 	bl	800c010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800da86:	4b0d      	ldr	r3, [pc, #52]	; (800dabc <prvCheckTasksWaitingTermination+0x54>)
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	3b01      	subs	r3, #1
 800da8c:	4a0b      	ldr	r2, [pc, #44]	; (800dabc <prvCheckTasksWaitingTermination+0x54>)
 800da8e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800da90:	4b0b      	ldr	r3, [pc, #44]	; (800dac0 <prvCheckTasksWaitingTermination+0x58>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	3b01      	subs	r3, #1
 800da96:	4a0a      	ldr	r2, [pc, #40]	; (800dac0 <prvCheckTasksWaitingTermination+0x58>)
 800da98:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800da9a:	f000 fbe3 	bl	800e264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800da9e:	6878      	ldr	r0, [r7, #4]
 800daa0:	f000 f810 	bl	800dac4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800daa4:	4b06      	ldr	r3, [pc, #24]	; (800dac0 <prvCheckTasksWaitingTermination+0x58>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d1e1      	bne.n	800da70 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800daac:	bf00      	nop
 800daae:	bf00      	nop
 800dab0:	3708      	adds	r7, #8
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}
 800dab6:	bf00      	nop
 800dab8:	2400045c 	.word	0x2400045c
 800dabc:	24000488 	.word	0x24000488
 800dac0:	24000470 	.word	0x24000470

0800dac4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	3358      	adds	r3, #88	; 0x58
 800dad0:	4618      	mov	r0, r3
 800dad2:	f00c f9ad 	bl	8019e30 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d108      	bne.n	800daf2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dae4:	4618      	mov	r0, r3
 800dae6:	f000 fd7b 	bl	800e5e0 <vPortFree>
				vPortFree( pxTCB );
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f000 fd78 	bl	800e5e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800daf0:	e018      	b.n	800db24 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800daf8:	2b01      	cmp	r3, #1
 800dafa:	d103      	bne.n	800db04 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fd6f 	bl	800e5e0 <vPortFree>
	}
 800db02:	e00f      	b.n	800db24 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 800db0a:	2b02      	cmp	r3, #2
 800db0c:	d00a      	beq.n	800db24 <prvDeleteTCB+0x60>
	__asm volatile
 800db0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db12:	f383 8811 	msr	BASEPRI, r3
 800db16:	f3bf 8f6f 	isb	sy
 800db1a:	f3bf 8f4f 	dsb	sy
 800db1e:	60fb      	str	r3, [r7, #12]
}
 800db20:	bf00      	nop
 800db22:	e7fe      	b.n	800db22 <prvDeleteTCB+0x5e>
	}
 800db24:	bf00      	nop
 800db26:	3710      	adds	r7, #16
 800db28:	46bd      	mov	sp, r7
 800db2a:	bd80      	pop	{r7, pc}

0800db2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800db32:	4b0c      	ldr	r3, [pc, #48]	; (800db64 <prvResetNextTaskUnblockTime+0x38>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d104      	bne.n	800db46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800db3c:	4b0a      	ldr	r3, [pc, #40]	; (800db68 <prvResetNextTaskUnblockTime+0x3c>)
 800db3e:	f04f 32ff 	mov.w	r2, #4294967295
 800db42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800db44:	e008      	b.n	800db58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db46:	4b07      	ldr	r3, [pc, #28]	; (800db64 <prvResetNextTaskUnblockTime+0x38>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	68db      	ldr	r3, [r3, #12]
 800db4c:	68db      	ldr	r3, [r3, #12]
 800db4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	4a04      	ldr	r2, [pc, #16]	; (800db68 <prvResetNextTaskUnblockTime+0x3c>)
 800db56:	6013      	str	r3, [r2, #0]
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr
 800db64:	24000440 	.word	0x24000440
 800db68:	240004a8 	.word	0x240004a8

0800db6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800db6c:	b480      	push	{r7}
 800db6e:	b083      	sub	sp, #12
 800db70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800db72:	4b0b      	ldr	r3, [pc, #44]	; (800dba0 <xTaskGetSchedulerState+0x34>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d102      	bne.n	800db80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800db7a:	2301      	movs	r3, #1
 800db7c:	607b      	str	r3, [r7, #4]
 800db7e:	e008      	b.n	800db92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db80:	4b08      	ldr	r3, [pc, #32]	; (800dba4 <xTaskGetSchedulerState+0x38>)
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800db88:	2302      	movs	r3, #2
 800db8a:	607b      	str	r3, [r7, #4]
 800db8c:	e001      	b.n	800db92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800db8e:	2300      	movs	r3, #0
 800db90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800db92:	687b      	ldr	r3, [r7, #4]
	}
 800db94:	4618      	mov	r0, r3
 800db96:	370c      	adds	r7, #12
 800db98:	46bd      	mov	sp, r7
 800db9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9e:	4770      	bx	lr
 800dba0:	24000494 	.word	0x24000494
 800dba4:	240004b0 	.word	0x240004b0

0800dba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d05e      	beq.n	800dc7c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbc2:	4b31      	ldr	r3, [pc, #196]	; (800dc88 <xTaskPriorityInherit+0xe0>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d24e      	bcs.n	800dc6a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	699b      	ldr	r3, [r3, #24]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	db06      	blt.n	800dbe2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbd4:	4b2c      	ldr	r3, [pc, #176]	; (800dc88 <xTaskPriorityInherit+0xe0>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbda:	f1c3 0207 	rsb	r2, r3, #7
 800dbde:	68bb      	ldr	r3, [r7, #8]
 800dbe0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dbe2:	68bb      	ldr	r3, [r7, #8]
 800dbe4:	6959      	ldr	r1, [r3, #20]
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dbea:	4613      	mov	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	4413      	add	r3, r2
 800dbf0:	009b      	lsls	r3, r3, #2
 800dbf2:	4a26      	ldr	r2, [pc, #152]	; (800dc8c <xTaskPriorityInherit+0xe4>)
 800dbf4:	4413      	add	r3, r2
 800dbf6:	4299      	cmp	r1, r3
 800dbf8:	d12f      	bne.n	800dc5a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	3304      	adds	r3, #4
 800dbfe:	4618      	mov	r0, r3
 800dc00:	f7fe fa06 	bl	800c010 <uxListRemove>
 800dc04:	4603      	mov	r3, r0
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10a      	bne.n	800dc20 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc0e:	2201      	movs	r2, #1
 800dc10:	fa02 f303 	lsl.w	r3, r2, r3
 800dc14:	43da      	mvns	r2, r3
 800dc16:	4b1e      	ldr	r3, [pc, #120]	; (800dc90 <xTaskPriorityInherit+0xe8>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	4013      	ands	r3, r2
 800dc1c:	4a1c      	ldr	r2, [pc, #112]	; (800dc90 <xTaskPriorityInherit+0xe8>)
 800dc1e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc20:	4b19      	ldr	r3, [pc, #100]	; (800dc88 <xTaskPriorityInherit+0xe0>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dc2a:	68bb      	ldr	r3, [r7, #8]
 800dc2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc2e:	2201      	movs	r2, #1
 800dc30:	409a      	lsls	r2, r3
 800dc32:	4b17      	ldr	r3, [pc, #92]	; (800dc90 <xTaskPriorityInherit+0xe8>)
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	4313      	orrs	r3, r2
 800dc38:	4a15      	ldr	r2, [pc, #84]	; (800dc90 <xTaskPriorityInherit+0xe8>)
 800dc3a:	6013      	str	r3, [r2, #0]
 800dc3c:	68bb      	ldr	r3, [r7, #8]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc40:	4613      	mov	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	009b      	lsls	r3, r3, #2
 800dc48:	4a10      	ldr	r2, [pc, #64]	; (800dc8c <xTaskPriorityInherit+0xe4>)
 800dc4a:	441a      	add	r2, r3
 800dc4c:	68bb      	ldr	r3, [r7, #8]
 800dc4e:	3304      	adds	r3, #4
 800dc50:	4619      	mov	r1, r3
 800dc52:	4610      	mov	r0, r2
 800dc54:	f7fe f97f 	bl	800bf56 <vListInsertEnd>
 800dc58:	e004      	b.n	800dc64 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dc5a:	4b0b      	ldr	r3, [pc, #44]	; (800dc88 <xTaskPriorityInherit+0xe0>)
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc60:	68bb      	ldr	r3, [r7, #8]
 800dc62:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800dc64:	2301      	movs	r3, #1
 800dc66:	60fb      	str	r3, [r7, #12]
 800dc68:	e008      	b.n	800dc7c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800dc6a:	68bb      	ldr	r3, [r7, #8]
 800dc6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dc6e:	4b06      	ldr	r3, [pc, #24]	; (800dc88 <xTaskPriorityInherit+0xe0>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc74:	429a      	cmp	r2, r3
 800dc76:	d201      	bcs.n	800dc7c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800dc78:	2301      	movs	r3, #1
 800dc7a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
	}
 800dc7e:	4618      	mov	r0, r3
 800dc80:	3710      	adds	r7, #16
 800dc82:	46bd      	mov	sp, r7
 800dc84:	bd80      	pop	{r7, pc}
 800dc86:	bf00      	nop
 800dc88:	24000388 	.word	0x24000388
 800dc8c:	2400038c 	.word	0x2400038c
 800dc90:	24000490 	.word	0x24000490

0800dc94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dca0:	2300      	movs	r3, #0
 800dca2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d06e      	beq.n	800dd88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dcaa:	4b3a      	ldr	r3, [pc, #232]	; (800dd94 <xTaskPriorityDisinherit+0x100>)
 800dcac:	681b      	ldr	r3, [r3, #0]
 800dcae:	693a      	ldr	r2, [r7, #16]
 800dcb0:	429a      	cmp	r2, r3
 800dcb2:	d00a      	beq.n	800dcca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800dcb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcb8:	f383 8811 	msr	BASEPRI, r3
 800dcbc:	f3bf 8f6f 	isb	sy
 800dcc0:	f3bf 8f4f 	dsb	sy
 800dcc4:	60fb      	str	r3, [r7, #12]
}
 800dcc6:	bf00      	nop
 800dcc8:	e7fe      	b.n	800dcc8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dcca:	693b      	ldr	r3, [r7, #16]
 800dccc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d10a      	bne.n	800dce8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800dcd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd6:	f383 8811 	msr	BASEPRI, r3
 800dcda:	f3bf 8f6f 	isb	sy
 800dcde:	f3bf 8f4f 	dsb	sy
 800dce2:	60bb      	str	r3, [r7, #8]
}
 800dce4:	bf00      	nop
 800dce6:	e7fe      	b.n	800dce6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dcec:	1e5a      	subs	r2, r3, #1
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcf6:	693b      	ldr	r3, [r7, #16]
 800dcf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcfa:	429a      	cmp	r2, r3
 800dcfc:	d044      	beq.n	800dd88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d140      	bne.n	800dd88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd06:	693b      	ldr	r3, [r7, #16]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	f7fe f980 	bl	800c010 <uxListRemove>
 800dd10:	4603      	mov	r3, r0
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d115      	bne.n	800dd42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd1a:	491f      	ldr	r1, [pc, #124]	; (800dd98 <xTaskPriorityDisinherit+0x104>)
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	009b      	lsls	r3, r3, #2
 800dd24:	440b      	add	r3, r1
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d10a      	bne.n	800dd42 <xTaskPriorityDisinherit+0xae>
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd30:	2201      	movs	r2, #1
 800dd32:	fa02 f303 	lsl.w	r3, r2, r3
 800dd36:	43da      	mvns	r2, r3
 800dd38:	4b18      	ldr	r3, [pc, #96]	; (800dd9c <xTaskPriorityDisinherit+0x108>)
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4013      	ands	r3, r2
 800dd3e:	4a17      	ldr	r2, [pc, #92]	; (800dd9c <xTaskPriorityDisinherit+0x108>)
 800dd40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd4e:	f1c3 0207 	rsb	r2, r3, #7
 800dd52:	693b      	ldr	r3, [r7, #16]
 800dd54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dd56:	693b      	ldr	r3, [r7, #16]
 800dd58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd5a:	2201      	movs	r2, #1
 800dd5c:	409a      	lsls	r2, r3
 800dd5e:	4b0f      	ldr	r3, [pc, #60]	; (800dd9c <xTaskPriorityDisinherit+0x108>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	4313      	orrs	r3, r2
 800dd64:	4a0d      	ldr	r2, [pc, #52]	; (800dd9c <xTaskPriorityDisinherit+0x108>)
 800dd66:	6013      	str	r3, [r2, #0]
 800dd68:	693b      	ldr	r3, [r7, #16]
 800dd6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	4413      	add	r3, r2
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	4a08      	ldr	r2, [pc, #32]	; (800dd98 <xTaskPriorityDisinherit+0x104>)
 800dd76:	441a      	add	r2, r3
 800dd78:	693b      	ldr	r3, [r7, #16]
 800dd7a:	3304      	adds	r3, #4
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	4610      	mov	r0, r2
 800dd80:	f7fe f8e9 	bl	800bf56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dd84:	2301      	movs	r3, #1
 800dd86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dd88:	697b      	ldr	r3, [r7, #20]
	}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3718      	adds	r7, #24
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
 800dd92:	bf00      	nop
 800dd94:	24000388 	.word	0x24000388
 800dd98:	2400038c 	.word	0x2400038c
 800dd9c:	24000490 	.word	0x24000490

0800dda0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6078      	str	r0, [r7, #4]
 800dda8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d077      	beq.n	800dea8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ddb8:	69bb      	ldr	r3, [r7, #24]
 800ddba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d10a      	bne.n	800ddd6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ddc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddc4:	f383 8811 	msr	BASEPRI, r3
 800ddc8:	f3bf 8f6f 	isb	sy
 800ddcc:	f3bf 8f4f 	dsb	sy
 800ddd0:	60fb      	str	r3, [r7, #12]
}
 800ddd2:	bf00      	nop
 800ddd4:	e7fe      	b.n	800ddd4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ddd6:	69bb      	ldr	r3, [r7, #24]
 800ddd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddda:	683a      	ldr	r2, [r7, #0]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d902      	bls.n	800dde6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	61fb      	str	r3, [r7, #28]
 800dde4:	e002      	b.n	800ddec <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ddea:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ddec:	69bb      	ldr	r3, [r7, #24]
 800ddee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf0:	69fa      	ldr	r2, [r7, #28]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d058      	beq.n	800dea8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ddf6:	69bb      	ldr	r3, [r7, #24]
 800ddf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ddfa:	697a      	ldr	r2, [r7, #20]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d153      	bne.n	800dea8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800de00:	4b2b      	ldr	r3, [pc, #172]	; (800deb0 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	69ba      	ldr	r2, [r7, #24]
 800de06:	429a      	cmp	r2, r3
 800de08:	d10a      	bne.n	800de20 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	60bb      	str	r3, [r7, #8]
}
 800de1c:	bf00      	nop
 800de1e:	e7fe      	b.n	800de1e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800de20:	69bb      	ldr	r3, [r7, #24]
 800de22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de24:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800de26:	69bb      	ldr	r3, [r7, #24]
 800de28:	69fa      	ldr	r2, [r7, #28]
 800de2a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800de2c:	69bb      	ldr	r3, [r7, #24]
 800de2e:	699b      	ldr	r3, [r3, #24]
 800de30:	2b00      	cmp	r3, #0
 800de32:	db04      	blt.n	800de3e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de34:	69fb      	ldr	r3, [r7, #28]
 800de36:	f1c3 0207 	rsb	r2, r3, #7
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800de3e:	69bb      	ldr	r3, [r7, #24]
 800de40:	6959      	ldr	r1, [r3, #20]
 800de42:	693a      	ldr	r2, [r7, #16]
 800de44:	4613      	mov	r3, r2
 800de46:	009b      	lsls	r3, r3, #2
 800de48:	4413      	add	r3, r2
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	4a19      	ldr	r2, [pc, #100]	; (800deb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800de4e:	4413      	add	r3, r2
 800de50:	4299      	cmp	r1, r3
 800de52:	d129      	bne.n	800dea8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800de54:	69bb      	ldr	r3, [r7, #24]
 800de56:	3304      	adds	r3, #4
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fe f8d9 	bl	800c010 <uxListRemove>
 800de5e:	4603      	mov	r3, r0
 800de60:	2b00      	cmp	r3, #0
 800de62:	d10a      	bne.n	800de7a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800de64:	69bb      	ldr	r3, [r7, #24]
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de68:	2201      	movs	r2, #1
 800de6a:	fa02 f303 	lsl.w	r3, r2, r3
 800de6e:	43da      	mvns	r2, r3
 800de70:	4b11      	ldr	r3, [pc, #68]	; (800deb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	4013      	ands	r3, r2
 800de76:	4a10      	ldr	r2, [pc, #64]	; (800deb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800de78:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800de7a:	69bb      	ldr	r3, [r7, #24]
 800de7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de7e:	2201      	movs	r2, #1
 800de80:	409a      	lsls	r2, r3
 800de82:	4b0d      	ldr	r3, [pc, #52]	; (800deb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	4313      	orrs	r3, r2
 800de88:	4a0b      	ldr	r2, [pc, #44]	; (800deb8 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800de8a:	6013      	str	r3, [r2, #0]
 800de8c:	69bb      	ldr	r3, [r7, #24]
 800de8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de90:	4613      	mov	r3, r2
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	4413      	add	r3, r2
 800de96:	009b      	lsls	r3, r3, #2
 800de98:	4a06      	ldr	r2, [pc, #24]	; (800deb4 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800de9a:	441a      	add	r2, r3
 800de9c:	69bb      	ldr	r3, [r7, #24]
 800de9e:	3304      	adds	r3, #4
 800dea0:	4619      	mov	r1, r3
 800dea2:	4610      	mov	r0, r2
 800dea4:	f7fe f857 	bl	800bf56 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dea8:	bf00      	nop
 800deaa:	3720      	adds	r7, #32
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	24000388 	.word	0x24000388
 800deb4:	2400038c 	.word	0x2400038c
 800deb8:	24000490 	.word	0x24000490

0800debc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800debc:	b480      	push	{r7}
 800debe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dec0:	4b07      	ldr	r3, [pc, #28]	; (800dee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d004      	beq.n	800ded2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dec8:	4b05      	ldr	r3, [pc, #20]	; (800dee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dece:	3201      	adds	r2, #1
 800ded0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ded2:	4b03      	ldr	r3, [pc, #12]	; (800dee0 <pvTaskIncrementMutexHeldCount+0x24>)
 800ded4:	681b      	ldr	r3, [r3, #0]
	}
 800ded6:	4618      	mov	r0, r3
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr
 800dee0:	24000388 	.word	0x24000388

0800dee4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800deee:	4b29      	ldr	r3, [pc, #164]	; (800df94 <prvAddCurrentTaskToDelayedList+0xb0>)
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800def4:	4b28      	ldr	r3, [pc, #160]	; (800df98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	3304      	adds	r3, #4
 800defa:	4618      	mov	r0, r3
 800defc:	f7fe f888 	bl	800c010 <uxListRemove>
 800df00:	4603      	mov	r3, r0
 800df02:	2b00      	cmp	r3, #0
 800df04:	d10b      	bne.n	800df1e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800df06:	4b24      	ldr	r3, [pc, #144]	; (800df98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df0c:	2201      	movs	r2, #1
 800df0e:	fa02 f303 	lsl.w	r3, r2, r3
 800df12:	43da      	mvns	r2, r3
 800df14:	4b21      	ldr	r3, [pc, #132]	; (800df9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4013      	ands	r3, r2
 800df1a:	4a20      	ldr	r2, [pc, #128]	; (800df9c <prvAddCurrentTaskToDelayedList+0xb8>)
 800df1c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df24:	d10a      	bne.n	800df3c <prvAddCurrentTaskToDelayedList+0x58>
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d007      	beq.n	800df3c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df2c:	4b1a      	ldr	r3, [pc, #104]	; (800df98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	3304      	adds	r3, #4
 800df32:	4619      	mov	r1, r3
 800df34:	481a      	ldr	r0, [pc, #104]	; (800dfa0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800df36:	f7fe f80e 	bl	800bf56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800df3a:	e026      	b.n	800df8a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	4413      	add	r3, r2
 800df42:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800df44:	4b14      	ldr	r3, [pc, #80]	; (800df98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	68ba      	ldr	r2, [r7, #8]
 800df4a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	429a      	cmp	r2, r3
 800df52:	d209      	bcs.n	800df68 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df54:	4b13      	ldr	r3, [pc, #76]	; (800dfa4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800df56:	681a      	ldr	r2, [r3, #0]
 800df58:	4b0f      	ldr	r3, [pc, #60]	; (800df98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	3304      	adds	r3, #4
 800df5e:	4619      	mov	r1, r3
 800df60:	4610      	mov	r0, r2
 800df62:	f7fe f81c 	bl	800bf9e <vListInsert>
}
 800df66:	e010      	b.n	800df8a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800df68:	4b0f      	ldr	r3, [pc, #60]	; (800dfa8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800df6a:	681a      	ldr	r2, [r3, #0]
 800df6c:	4b0a      	ldr	r3, [pc, #40]	; (800df98 <prvAddCurrentTaskToDelayedList+0xb4>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	3304      	adds	r3, #4
 800df72:	4619      	mov	r1, r3
 800df74:	4610      	mov	r0, r2
 800df76:	f7fe f812 	bl	800bf9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800df7a:	4b0c      	ldr	r3, [pc, #48]	; (800dfac <prvAddCurrentTaskToDelayedList+0xc8>)
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	429a      	cmp	r2, r3
 800df82:	d202      	bcs.n	800df8a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800df84:	4a09      	ldr	r2, [pc, #36]	; (800dfac <prvAddCurrentTaskToDelayedList+0xc8>)
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	6013      	str	r3, [r2, #0]
}
 800df8a:	bf00      	nop
 800df8c:	3710      	adds	r7, #16
 800df8e:	46bd      	mov	sp, r7
 800df90:	bd80      	pop	{r7, pc}
 800df92:	bf00      	nop
 800df94:	2400048c 	.word	0x2400048c
 800df98:	24000388 	.word	0x24000388
 800df9c:	24000490 	.word	0x24000490
 800dfa0:	24000474 	.word	0x24000474
 800dfa4:	24000444 	.word	0x24000444
 800dfa8:	24000440 	.word	0x24000440
 800dfac:	240004a8 	.word	0x240004a8

0800dfb0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	60f8      	str	r0, [r7, #12]
 800dfb8:	60b9      	str	r1, [r7, #8]
 800dfba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	3b04      	subs	r3, #4
 800dfc0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dfc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	3b04      	subs	r3, #4
 800dfce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	f023 0201 	bic.w	r2, r3, #1
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	3b04      	subs	r3, #4
 800dfde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dfe0:	4a0c      	ldr	r2, [pc, #48]	; (800e014 <pxPortInitialiseStack+0x64>)
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	3b14      	subs	r3, #20
 800dfea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	68fb      	ldr	r3, [r7, #12]
 800dff0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	3b04      	subs	r3, #4
 800dff6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	f06f 0202 	mvn.w	r2, #2
 800dffe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	3b20      	subs	r3, #32
 800e004:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e006:	68fb      	ldr	r3, [r7, #12]
}
 800e008:	4618      	mov	r0, r3
 800e00a:	3714      	adds	r7, #20
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr
 800e014:	0800e019 	.word	0x0800e019

0800e018 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e018:	b480      	push	{r7}
 800e01a:	b085      	sub	sp, #20
 800e01c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e01e:	2300      	movs	r3, #0
 800e020:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e022:	4b12      	ldr	r3, [pc, #72]	; (800e06c <prvTaskExitError+0x54>)
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e02a:	d00a      	beq.n	800e042 <prvTaskExitError+0x2a>
	__asm volatile
 800e02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e030:	f383 8811 	msr	BASEPRI, r3
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	60fb      	str	r3, [r7, #12]
}
 800e03e:	bf00      	nop
 800e040:	e7fe      	b.n	800e040 <prvTaskExitError+0x28>
	__asm volatile
 800e042:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e046:	f383 8811 	msr	BASEPRI, r3
 800e04a:	f3bf 8f6f 	isb	sy
 800e04e:	f3bf 8f4f 	dsb	sy
 800e052:	60bb      	str	r3, [r7, #8]
}
 800e054:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e056:	bf00      	nop
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d0fc      	beq.n	800e058 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e05e:	bf00      	nop
 800e060:	bf00      	nop
 800e062:	3714      	adds	r7, #20
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr
 800e06c:	2400002c 	.word	0x2400002c

0800e070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e070:	4b07      	ldr	r3, [pc, #28]	; (800e090 <pxCurrentTCBConst2>)
 800e072:	6819      	ldr	r1, [r3, #0]
 800e074:	6808      	ldr	r0, [r1, #0]
 800e076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e07a:	f380 8809 	msr	PSP, r0
 800e07e:	f3bf 8f6f 	isb	sy
 800e082:	f04f 0000 	mov.w	r0, #0
 800e086:	f380 8811 	msr	BASEPRI, r0
 800e08a:	4770      	bx	lr
 800e08c:	f3af 8000 	nop.w

0800e090 <pxCurrentTCBConst2>:
 800e090:	24000388 	.word	0x24000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e094:	bf00      	nop
 800e096:	bf00      	nop

0800e098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e098:	4808      	ldr	r0, [pc, #32]	; (800e0bc <prvPortStartFirstTask+0x24>)
 800e09a:	6800      	ldr	r0, [r0, #0]
 800e09c:	6800      	ldr	r0, [r0, #0]
 800e09e:	f380 8808 	msr	MSP, r0
 800e0a2:	f04f 0000 	mov.w	r0, #0
 800e0a6:	f380 8814 	msr	CONTROL, r0
 800e0aa:	b662      	cpsie	i
 800e0ac:	b661      	cpsie	f
 800e0ae:	f3bf 8f4f 	dsb	sy
 800e0b2:	f3bf 8f6f 	isb	sy
 800e0b6:	df00      	svc	0
 800e0b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e0ba:	bf00      	nop
 800e0bc:	e000ed08 	.word	0xe000ed08

0800e0c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b086      	sub	sp, #24
 800e0c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0c6:	4b46      	ldr	r3, [pc, #280]	; (800e1e0 <xPortStartScheduler+0x120>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	4a46      	ldr	r2, [pc, #280]	; (800e1e4 <xPortStartScheduler+0x124>)
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d10a      	bne.n	800e0e6 <xPortStartScheduler+0x26>
	__asm volatile
 800e0d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0d4:	f383 8811 	msr	BASEPRI, r3
 800e0d8:	f3bf 8f6f 	isb	sy
 800e0dc:	f3bf 8f4f 	dsb	sy
 800e0e0:	613b      	str	r3, [r7, #16]
}
 800e0e2:	bf00      	nop
 800e0e4:	e7fe      	b.n	800e0e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e0e6:	4b3e      	ldr	r3, [pc, #248]	; (800e1e0 <xPortStartScheduler+0x120>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4a3f      	ldr	r2, [pc, #252]	; (800e1e8 <xPortStartScheduler+0x128>)
 800e0ec:	4293      	cmp	r3, r2
 800e0ee:	d10a      	bne.n	800e106 <xPortStartScheduler+0x46>
	__asm volatile
 800e0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f4:	f383 8811 	msr	BASEPRI, r3
 800e0f8:	f3bf 8f6f 	isb	sy
 800e0fc:	f3bf 8f4f 	dsb	sy
 800e100:	60fb      	str	r3, [r7, #12]
}
 800e102:	bf00      	nop
 800e104:	e7fe      	b.n	800e104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e106:	4b39      	ldr	r3, [pc, #228]	; (800e1ec <xPortStartScheduler+0x12c>)
 800e108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e10a:	697b      	ldr	r3, [r7, #20]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	b2db      	uxtb	r3, r3
 800e110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	22ff      	movs	r2, #255	; 0xff
 800e116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e118:	697b      	ldr	r3, [r7, #20]
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	b2db      	uxtb	r3, r3
 800e11e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e120:	78fb      	ldrb	r3, [r7, #3]
 800e122:	b2db      	uxtb	r3, r3
 800e124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e128:	b2da      	uxtb	r2, r3
 800e12a:	4b31      	ldr	r3, [pc, #196]	; (800e1f0 <xPortStartScheduler+0x130>)
 800e12c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e12e:	4b31      	ldr	r3, [pc, #196]	; (800e1f4 <xPortStartScheduler+0x134>)
 800e130:	2207      	movs	r2, #7
 800e132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e134:	e009      	b.n	800e14a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e136:	4b2f      	ldr	r3, [pc, #188]	; (800e1f4 <xPortStartScheduler+0x134>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	3b01      	subs	r3, #1
 800e13c:	4a2d      	ldr	r2, [pc, #180]	; (800e1f4 <xPortStartScheduler+0x134>)
 800e13e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e140:	78fb      	ldrb	r3, [r7, #3]
 800e142:	b2db      	uxtb	r3, r3
 800e144:	005b      	lsls	r3, r3, #1
 800e146:	b2db      	uxtb	r3, r3
 800e148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e14a:	78fb      	ldrb	r3, [r7, #3]
 800e14c:	b2db      	uxtb	r3, r3
 800e14e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e152:	2b80      	cmp	r3, #128	; 0x80
 800e154:	d0ef      	beq.n	800e136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e156:	4b27      	ldr	r3, [pc, #156]	; (800e1f4 <xPortStartScheduler+0x134>)
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f1c3 0307 	rsb	r3, r3, #7
 800e15e:	2b04      	cmp	r3, #4
 800e160:	d00a      	beq.n	800e178 <xPortStartScheduler+0xb8>
	__asm volatile
 800e162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e166:	f383 8811 	msr	BASEPRI, r3
 800e16a:	f3bf 8f6f 	isb	sy
 800e16e:	f3bf 8f4f 	dsb	sy
 800e172:	60bb      	str	r3, [r7, #8]
}
 800e174:	bf00      	nop
 800e176:	e7fe      	b.n	800e176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e178:	4b1e      	ldr	r3, [pc, #120]	; (800e1f4 <xPortStartScheduler+0x134>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	021b      	lsls	r3, r3, #8
 800e17e:	4a1d      	ldr	r2, [pc, #116]	; (800e1f4 <xPortStartScheduler+0x134>)
 800e180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e182:	4b1c      	ldr	r3, [pc, #112]	; (800e1f4 <xPortStartScheduler+0x134>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e18a:	4a1a      	ldr	r2, [pc, #104]	; (800e1f4 <xPortStartScheduler+0x134>)
 800e18c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	b2da      	uxtb	r2, r3
 800e192:	697b      	ldr	r3, [r7, #20]
 800e194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e196:	4b18      	ldr	r3, [pc, #96]	; (800e1f8 <xPortStartScheduler+0x138>)
 800e198:	681b      	ldr	r3, [r3, #0]
 800e19a:	4a17      	ldr	r2, [pc, #92]	; (800e1f8 <xPortStartScheduler+0x138>)
 800e19c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e1a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1a2:	4b15      	ldr	r3, [pc, #84]	; (800e1f8 <xPortStartScheduler+0x138>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	4a14      	ldr	r2, [pc, #80]	; (800e1f8 <xPortStartScheduler+0x138>)
 800e1a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e1ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e1ae:	f000 f8dd 	bl	800e36c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e1b2:	4b12      	ldr	r3, [pc, #72]	; (800e1fc <xPortStartScheduler+0x13c>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e1b8:	f000 f8fc 	bl	800e3b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1bc:	4b10      	ldr	r3, [pc, #64]	; (800e200 <xPortStartScheduler+0x140>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	4a0f      	ldr	r2, [pc, #60]	; (800e200 <xPortStartScheduler+0x140>)
 800e1c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e1c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e1c8:	f7ff ff66 	bl	800e098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e1cc:	f7ff fa6c 	bl	800d6a8 <vTaskSwitchContext>
	prvTaskExitError();
 800e1d0:	f7ff ff22 	bl	800e018 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e1d4:	2300      	movs	r3, #0
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3718      	adds	r7, #24
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	e000ed00 	.word	0xe000ed00
 800e1e4:	410fc271 	.word	0x410fc271
 800e1e8:	410fc270 	.word	0x410fc270
 800e1ec:	e000e400 	.word	0xe000e400
 800e1f0:	240004bc 	.word	0x240004bc
 800e1f4:	240004c0 	.word	0x240004c0
 800e1f8:	e000ed20 	.word	0xe000ed20
 800e1fc:	2400002c 	.word	0x2400002c
 800e200:	e000ef34 	.word	0xe000ef34

0800e204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e204:	b480      	push	{r7}
 800e206:	b083      	sub	sp, #12
 800e208:	af00      	add	r7, sp, #0
	__asm volatile
 800e20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e20e:	f383 8811 	msr	BASEPRI, r3
 800e212:	f3bf 8f6f 	isb	sy
 800e216:	f3bf 8f4f 	dsb	sy
 800e21a:	607b      	str	r3, [r7, #4]
}
 800e21c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e21e:	4b0f      	ldr	r3, [pc, #60]	; (800e25c <vPortEnterCritical+0x58>)
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	3301      	adds	r3, #1
 800e224:	4a0d      	ldr	r2, [pc, #52]	; (800e25c <vPortEnterCritical+0x58>)
 800e226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e228:	4b0c      	ldr	r3, [pc, #48]	; (800e25c <vPortEnterCritical+0x58>)
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	d10f      	bne.n	800e250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e230:	4b0b      	ldr	r3, [pc, #44]	; (800e260 <vPortEnterCritical+0x5c>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	b2db      	uxtb	r3, r3
 800e236:	2b00      	cmp	r3, #0
 800e238:	d00a      	beq.n	800e250 <vPortEnterCritical+0x4c>
	__asm volatile
 800e23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e23e:	f383 8811 	msr	BASEPRI, r3
 800e242:	f3bf 8f6f 	isb	sy
 800e246:	f3bf 8f4f 	dsb	sy
 800e24a:	603b      	str	r3, [r7, #0]
}
 800e24c:	bf00      	nop
 800e24e:	e7fe      	b.n	800e24e <vPortEnterCritical+0x4a>
	}
}
 800e250:	bf00      	nop
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr
 800e25c:	2400002c 	.word	0x2400002c
 800e260:	e000ed04 	.word	0xe000ed04

0800e264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e264:	b480      	push	{r7}
 800e266:	b083      	sub	sp, #12
 800e268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e26a:	4b12      	ldr	r3, [pc, #72]	; (800e2b4 <vPortExitCritical+0x50>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d10a      	bne.n	800e288 <vPortExitCritical+0x24>
	__asm volatile
 800e272:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e276:	f383 8811 	msr	BASEPRI, r3
 800e27a:	f3bf 8f6f 	isb	sy
 800e27e:	f3bf 8f4f 	dsb	sy
 800e282:	607b      	str	r3, [r7, #4]
}
 800e284:	bf00      	nop
 800e286:	e7fe      	b.n	800e286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e288:	4b0a      	ldr	r3, [pc, #40]	; (800e2b4 <vPortExitCritical+0x50>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3b01      	subs	r3, #1
 800e28e:	4a09      	ldr	r2, [pc, #36]	; (800e2b4 <vPortExitCritical+0x50>)
 800e290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e292:	4b08      	ldr	r3, [pc, #32]	; (800e2b4 <vPortExitCritical+0x50>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d105      	bne.n	800e2a6 <vPortExitCritical+0x42>
 800e29a:	2300      	movs	r3, #0
 800e29c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	f383 8811 	msr	BASEPRI, r3
}
 800e2a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e2a6:	bf00      	nop
 800e2a8:	370c      	adds	r7, #12
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b0:	4770      	bx	lr
 800e2b2:	bf00      	nop
 800e2b4:	2400002c 	.word	0x2400002c
	...

0800e2c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e2c0:	f3ef 8009 	mrs	r0, PSP
 800e2c4:	f3bf 8f6f 	isb	sy
 800e2c8:	4b15      	ldr	r3, [pc, #84]	; (800e320 <pxCurrentTCBConst>)
 800e2ca:	681a      	ldr	r2, [r3, #0]
 800e2cc:	f01e 0f10 	tst.w	lr, #16
 800e2d0:	bf08      	it	eq
 800e2d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e2d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2da:	6010      	str	r0, [r2, #0]
 800e2dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e2e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e2e4:	f380 8811 	msr	BASEPRI, r0
 800e2e8:	f3bf 8f4f 	dsb	sy
 800e2ec:	f3bf 8f6f 	isb	sy
 800e2f0:	f7ff f9da 	bl	800d6a8 <vTaskSwitchContext>
 800e2f4:	f04f 0000 	mov.w	r0, #0
 800e2f8:	f380 8811 	msr	BASEPRI, r0
 800e2fc:	bc09      	pop	{r0, r3}
 800e2fe:	6819      	ldr	r1, [r3, #0]
 800e300:	6808      	ldr	r0, [r1, #0]
 800e302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e306:	f01e 0f10 	tst.w	lr, #16
 800e30a:	bf08      	it	eq
 800e30c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e310:	f380 8809 	msr	PSP, r0
 800e314:	f3bf 8f6f 	isb	sy
 800e318:	4770      	bx	lr
 800e31a:	bf00      	nop
 800e31c:	f3af 8000 	nop.w

0800e320 <pxCurrentTCBConst>:
 800e320:	24000388 	.word	0x24000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e324:	bf00      	nop
 800e326:	bf00      	nop

0800e328 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e328:	b580      	push	{r7, lr}
 800e32a:	b082      	sub	sp, #8
 800e32c:	af00      	add	r7, sp, #0
	__asm volatile
 800e32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e332:	f383 8811 	msr	BASEPRI, r3
 800e336:	f3bf 8f6f 	isb	sy
 800e33a:	f3bf 8f4f 	dsb	sy
 800e33e:	607b      	str	r3, [r7, #4]
}
 800e340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e342:	f7ff f8f9 	bl	800d538 <xTaskIncrementTick>
 800e346:	4603      	mov	r3, r0
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d003      	beq.n	800e354 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e34c:	4b06      	ldr	r3, [pc, #24]	; (800e368 <SysTick_Handler+0x40>)
 800e34e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	2300      	movs	r3, #0
 800e356:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e358:	683b      	ldr	r3, [r7, #0]
 800e35a:	f383 8811 	msr	BASEPRI, r3
}
 800e35e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e360:	bf00      	nop
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}
 800e368:	e000ed04 	.word	0xe000ed04

0800e36c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e36c:	b480      	push	{r7}
 800e36e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e370:	4b0b      	ldr	r3, [pc, #44]	; (800e3a0 <vPortSetupTimerInterrupt+0x34>)
 800e372:	2200      	movs	r2, #0
 800e374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e376:	4b0b      	ldr	r3, [pc, #44]	; (800e3a4 <vPortSetupTimerInterrupt+0x38>)
 800e378:	2200      	movs	r2, #0
 800e37a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e37c:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <vPortSetupTimerInterrupt+0x3c>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a0a      	ldr	r2, [pc, #40]	; (800e3ac <vPortSetupTimerInterrupt+0x40>)
 800e382:	fba2 2303 	umull	r2, r3, r2, r3
 800e386:	095b      	lsrs	r3, r3, #5
 800e388:	4a09      	ldr	r2, [pc, #36]	; (800e3b0 <vPortSetupTimerInterrupt+0x44>)
 800e38a:	3b01      	subs	r3, #1
 800e38c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e38e:	4b04      	ldr	r3, [pc, #16]	; (800e3a0 <vPortSetupTimerInterrupt+0x34>)
 800e390:	2207      	movs	r2, #7
 800e392:	601a      	str	r2, [r3, #0]
}
 800e394:	bf00      	nop
 800e396:	46bd      	mov	sp, r7
 800e398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39c:	4770      	bx	lr
 800e39e:	bf00      	nop
 800e3a0:	e000e010 	.word	0xe000e010
 800e3a4:	e000e018 	.word	0xe000e018
 800e3a8:	24000008 	.word	0x24000008
 800e3ac:	51eb851f 	.word	0x51eb851f
 800e3b0:	e000e014 	.word	0xe000e014

0800e3b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e3b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e3c4 <vPortEnableVFP+0x10>
 800e3b8:	6801      	ldr	r1, [r0, #0]
 800e3ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e3be:	6001      	str	r1, [r0, #0]
 800e3c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e3c2:	bf00      	nop
 800e3c4:	e000ed88 	.word	0xe000ed88

0800e3c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b085      	sub	sp, #20
 800e3cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e3ce:	f3ef 8305 	mrs	r3, IPSR
 800e3d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	2b0f      	cmp	r3, #15
 800e3d8:	d914      	bls.n	800e404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e3da:	4a17      	ldr	r2, [pc, #92]	; (800e438 <vPortValidateInterruptPriority+0x70>)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	4413      	add	r3, r2
 800e3e0:	781b      	ldrb	r3, [r3, #0]
 800e3e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e3e4:	4b15      	ldr	r3, [pc, #84]	; (800e43c <vPortValidateInterruptPriority+0x74>)
 800e3e6:	781b      	ldrb	r3, [r3, #0]
 800e3e8:	7afa      	ldrb	r2, [r7, #11]
 800e3ea:	429a      	cmp	r2, r3
 800e3ec:	d20a      	bcs.n	800e404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e3ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	607b      	str	r3, [r7, #4]
}
 800e400:	bf00      	nop
 800e402:	e7fe      	b.n	800e402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e404:	4b0e      	ldr	r3, [pc, #56]	; (800e440 <vPortValidateInterruptPriority+0x78>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e40c:	4b0d      	ldr	r3, [pc, #52]	; (800e444 <vPortValidateInterruptPriority+0x7c>)
 800e40e:	681b      	ldr	r3, [r3, #0]
 800e410:	429a      	cmp	r2, r3
 800e412:	d90a      	bls.n	800e42a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e414:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e418:	f383 8811 	msr	BASEPRI, r3
 800e41c:	f3bf 8f6f 	isb	sy
 800e420:	f3bf 8f4f 	dsb	sy
 800e424:	603b      	str	r3, [r7, #0]
}
 800e426:	bf00      	nop
 800e428:	e7fe      	b.n	800e428 <vPortValidateInterruptPriority+0x60>
	}
 800e42a:	bf00      	nop
 800e42c:	3714      	adds	r7, #20
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	e000e3f0 	.word	0xe000e3f0
 800e43c:	240004bc 	.word	0x240004bc
 800e440:	e000ed0c 	.word	0xe000ed0c
 800e444:	240004c0 	.word	0x240004c0

0800e448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b08a      	sub	sp, #40	; 0x28
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e450:	2300      	movs	r3, #0
 800e452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e454:	f7fe ffa4 	bl	800d3a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e458:	4b5b      	ldr	r3, [pc, #364]	; (800e5c8 <pvPortMalloc+0x180>)
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d101      	bne.n	800e464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e460:	f000 f920 	bl	800e6a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e464:	4b59      	ldr	r3, [pc, #356]	; (800e5cc <pvPortMalloc+0x184>)
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	4013      	ands	r3, r2
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	f040 8093 	bne.w	800e598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d01d      	beq.n	800e4b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e478:	2208      	movs	r2, #8
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	4413      	add	r3, r2
 800e47e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	f003 0307 	and.w	r3, r3, #7
 800e486:	2b00      	cmp	r3, #0
 800e488:	d014      	beq.n	800e4b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f023 0307 	bic.w	r3, r3, #7
 800e490:	3308      	adds	r3, #8
 800e492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00a      	beq.n	800e4b4 <pvPortMalloc+0x6c>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	617b      	str	r3, [r7, #20]
}
 800e4b0:	bf00      	nop
 800e4b2:	e7fe      	b.n	800e4b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d06e      	beq.n	800e598 <pvPortMalloc+0x150>
 800e4ba:	4b45      	ldr	r3, [pc, #276]	; (800e5d0 <pvPortMalloc+0x188>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	687a      	ldr	r2, [r7, #4]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d869      	bhi.n	800e598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e4c4:	4b43      	ldr	r3, [pc, #268]	; (800e5d4 <pvPortMalloc+0x18c>)
 800e4c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e4c8:	4b42      	ldr	r3, [pc, #264]	; (800e5d4 <pvPortMalloc+0x18c>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4ce:	e004      	b.n	800e4da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	685b      	ldr	r3, [r3, #4]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	d903      	bls.n	800e4ec <pvPortMalloc+0xa4>
 800e4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d1f1      	bne.n	800e4d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e4ec:	4b36      	ldr	r3, [pc, #216]	; (800e5c8 <pvPortMalloc+0x180>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d050      	beq.n	800e598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e4f6:	6a3b      	ldr	r3, [r7, #32]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2208      	movs	r2, #8
 800e4fc:	4413      	add	r3, r2
 800e4fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	6a3b      	ldr	r3, [r7, #32]
 800e506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50a:	685a      	ldr	r2, [r3, #4]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	1ad2      	subs	r2, r2, r3
 800e510:	2308      	movs	r3, #8
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	429a      	cmp	r2, r3
 800e516:	d91f      	bls.n	800e558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	4413      	add	r3, r2
 800e51e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e520:	69bb      	ldr	r3, [r7, #24]
 800e522:	f003 0307 	and.w	r3, r3, #7
 800e526:	2b00      	cmp	r3, #0
 800e528:	d00a      	beq.n	800e540 <pvPortMalloc+0xf8>
	__asm volatile
 800e52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e52e:	f383 8811 	msr	BASEPRI, r3
 800e532:	f3bf 8f6f 	isb	sy
 800e536:	f3bf 8f4f 	dsb	sy
 800e53a:	613b      	str	r3, [r7, #16]
}
 800e53c:	bf00      	nop
 800e53e:	e7fe      	b.n	800e53e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e542:	685a      	ldr	r2, [r3, #4]
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	1ad2      	subs	r2, r2, r3
 800e548:	69bb      	ldr	r3, [r7, #24]
 800e54a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e54c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54e:	687a      	ldr	r2, [r7, #4]
 800e550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e552:	69b8      	ldr	r0, [r7, #24]
 800e554:	f000 f908 	bl	800e768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e558:	4b1d      	ldr	r3, [pc, #116]	; (800e5d0 <pvPortMalloc+0x188>)
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e55e:	685b      	ldr	r3, [r3, #4]
 800e560:	1ad3      	subs	r3, r2, r3
 800e562:	4a1b      	ldr	r2, [pc, #108]	; (800e5d0 <pvPortMalloc+0x188>)
 800e564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e566:	4b1a      	ldr	r3, [pc, #104]	; (800e5d0 <pvPortMalloc+0x188>)
 800e568:	681a      	ldr	r2, [r3, #0]
 800e56a:	4b1b      	ldr	r3, [pc, #108]	; (800e5d8 <pvPortMalloc+0x190>)
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	429a      	cmp	r2, r3
 800e570:	d203      	bcs.n	800e57a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e572:	4b17      	ldr	r3, [pc, #92]	; (800e5d0 <pvPortMalloc+0x188>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	4a18      	ldr	r2, [pc, #96]	; (800e5d8 <pvPortMalloc+0x190>)
 800e578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e57c:	685a      	ldr	r2, [r3, #4]
 800e57e:	4b13      	ldr	r3, [pc, #76]	; (800e5cc <pvPortMalloc+0x184>)
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	431a      	orrs	r2, r3
 800e584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58a:	2200      	movs	r2, #0
 800e58c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e58e:	4b13      	ldr	r3, [pc, #76]	; (800e5dc <pvPortMalloc+0x194>)
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	3301      	adds	r3, #1
 800e594:	4a11      	ldr	r2, [pc, #68]	; (800e5dc <pvPortMalloc+0x194>)
 800e596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e598:	f7fe ff10 	bl	800d3bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e59c:	69fb      	ldr	r3, [r7, #28]
 800e59e:	f003 0307 	and.w	r3, r3, #7
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d00a      	beq.n	800e5bc <pvPortMalloc+0x174>
	__asm volatile
 800e5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5aa:	f383 8811 	msr	BASEPRI, r3
 800e5ae:	f3bf 8f6f 	isb	sy
 800e5b2:	f3bf 8f4f 	dsb	sy
 800e5b6:	60fb      	str	r3, [r7, #12]
}
 800e5b8:	bf00      	nop
 800e5ba:	e7fe      	b.n	800e5ba <pvPortMalloc+0x172>
	return pvReturn;
 800e5bc:	69fb      	ldr	r3, [r7, #28]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3728      	adds	r7, #40	; 0x28
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
 800e5c6:	bf00      	nop
 800e5c8:	240040cc 	.word	0x240040cc
 800e5cc:	240040e0 	.word	0x240040e0
 800e5d0:	240040d0 	.word	0x240040d0
 800e5d4:	240040c4 	.word	0x240040c4
 800e5d8:	240040d4 	.word	0x240040d4
 800e5dc:	240040d8 	.word	0x240040d8

0800e5e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b086      	sub	sp, #24
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d04d      	beq.n	800e68e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e5f2:	2308      	movs	r3, #8
 800e5f4:	425b      	negs	r3, r3
 800e5f6:	697a      	ldr	r2, [r7, #20]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e5fc:	697b      	ldr	r3, [r7, #20]
 800e5fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e600:	693b      	ldr	r3, [r7, #16]
 800e602:	685a      	ldr	r2, [r3, #4]
 800e604:	4b24      	ldr	r3, [pc, #144]	; (800e698 <vPortFree+0xb8>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4013      	ands	r3, r2
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d10a      	bne.n	800e624 <vPortFree+0x44>
	__asm volatile
 800e60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e612:	f383 8811 	msr	BASEPRI, r3
 800e616:	f3bf 8f6f 	isb	sy
 800e61a:	f3bf 8f4f 	dsb	sy
 800e61e:	60fb      	str	r3, [r7, #12]
}
 800e620:	bf00      	nop
 800e622:	e7fe      	b.n	800e622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00a      	beq.n	800e642 <vPortFree+0x62>
	__asm volatile
 800e62c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e630:	f383 8811 	msr	BASEPRI, r3
 800e634:	f3bf 8f6f 	isb	sy
 800e638:	f3bf 8f4f 	dsb	sy
 800e63c:	60bb      	str	r3, [r7, #8]
}
 800e63e:	bf00      	nop
 800e640:	e7fe      	b.n	800e640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e642:	693b      	ldr	r3, [r7, #16]
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	4b14      	ldr	r3, [pc, #80]	; (800e698 <vPortFree+0xb8>)
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	4013      	ands	r3, r2
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d01e      	beq.n	800e68e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d11a      	bne.n	800e68e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	685a      	ldr	r2, [r3, #4]
 800e65c:	4b0e      	ldr	r3, [pc, #56]	; (800e698 <vPortFree+0xb8>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	43db      	mvns	r3, r3
 800e662:	401a      	ands	r2, r3
 800e664:	693b      	ldr	r3, [r7, #16]
 800e666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e668:	f7fe fe9a 	bl	800d3a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e66c:	693b      	ldr	r3, [r7, #16]
 800e66e:	685a      	ldr	r2, [r3, #4]
 800e670:	4b0a      	ldr	r3, [pc, #40]	; (800e69c <vPortFree+0xbc>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4413      	add	r3, r2
 800e676:	4a09      	ldr	r2, [pc, #36]	; (800e69c <vPortFree+0xbc>)
 800e678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e67a:	6938      	ldr	r0, [r7, #16]
 800e67c:	f000 f874 	bl	800e768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e680:	4b07      	ldr	r3, [pc, #28]	; (800e6a0 <vPortFree+0xc0>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	3301      	adds	r3, #1
 800e686:	4a06      	ldr	r2, [pc, #24]	; (800e6a0 <vPortFree+0xc0>)
 800e688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e68a:	f7fe fe97 	bl	800d3bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e68e:	bf00      	nop
 800e690:	3718      	adds	r7, #24
 800e692:	46bd      	mov	sp, r7
 800e694:	bd80      	pop	{r7, pc}
 800e696:	bf00      	nop
 800e698:	240040e0 	.word	0x240040e0
 800e69c:	240040d0 	.word	0x240040d0
 800e6a0:	240040dc 	.word	0x240040dc

0800e6a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b085      	sub	sp, #20
 800e6a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e6aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e6ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e6b0:	4b27      	ldr	r3, [pc, #156]	; (800e750 <prvHeapInit+0xac>)
 800e6b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	f003 0307 	and.w	r3, r3, #7
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	d00c      	beq.n	800e6d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	3307      	adds	r3, #7
 800e6c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	f023 0307 	bic.w	r3, r3, #7
 800e6ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e6cc:	68ba      	ldr	r2, [r7, #8]
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	1ad3      	subs	r3, r2, r3
 800e6d2:	4a1f      	ldr	r2, [pc, #124]	; (800e750 <prvHeapInit+0xac>)
 800e6d4:	4413      	add	r3, r2
 800e6d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e6dc:	4a1d      	ldr	r2, [pc, #116]	; (800e754 <prvHeapInit+0xb0>)
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e6e2:	4b1c      	ldr	r3, [pc, #112]	; (800e754 <prvHeapInit+0xb0>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	68ba      	ldr	r2, [r7, #8]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e6f0:	2208      	movs	r2, #8
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	1a9b      	subs	r3, r3, r2
 800e6f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	f023 0307 	bic.w	r3, r3, #7
 800e6fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	4a15      	ldr	r2, [pc, #84]	; (800e758 <prvHeapInit+0xb4>)
 800e704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e706:	4b14      	ldr	r3, [pc, #80]	; (800e758 <prvHeapInit+0xb4>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	2200      	movs	r2, #0
 800e70c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e70e:	4b12      	ldr	r3, [pc, #72]	; (800e758 <prvHeapInit+0xb4>)
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	2200      	movs	r2, #0
 800e714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	68fa      	ldr	r2, [r7, #12]
 800e71e:	1ad2      	subs	r2, r2, r3
 800e720:	683b      	ldr	r3, [r7, #0]
 800e722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e724:	4b0c      	ldr	r3, [pc, #48]	; (800e758 <prvHeapInit+0xb4>)
 800e726:	681a      	ldr	r2, [r3, #0]
 800e728:	683b      	ldr	r3, [r7, #0]
 800e72a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	685b      	ldr	r3, [r3, #4]
 800e730:	4a0a      	ldr	r2, [pc, #40]	; (800e75c <prvHeapInit+0xb8>)
 800e732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	4a09      	ldr	r2, [pc, #36]	; (800e760 <prvHeapInit+0xbc>)
 800e73a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e73c:	4b09      	ldr	r3, [pc, #36]	; (800e764 <prvHeapInit+0xc0>)
 800e73e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e742:	601a      	str	r2, [r3, #0]
}
 800e744:	bf00      	nop
 800e746:	3714      	adds	r7, #20
 800e748:	46bd      	mov	sp, r7
 800e74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74e:	4770      	bx	lr
 800e750:	240004c4 	.word	0x240004c4
 800e754:	240040c4 	.word	0x240040c4
 800e758:	240040cc 	.word	0x240040cc
 800e75c:	240040d4 	.word	0x240040d4
 800e760:	240040d0 	.word	0x240040d0
 800e764:	240040e0 	.word	0x240040e0

0800e768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e770:	4b28      	ldr	r3, [pc, #160]	; (800e814 <prvInsertBlockIntoFreeList+0xac>)
 800e772:	60fb      	str	r3, [r7, #12]
 800e774:	e002      	b.n	800e77c <prvInsertBlockIntoFreeList+0x14>
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	681b      	ldr	r3, [r3, #0]
 800e77a:	60fb      	str	r3, [r7, #12]
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	429a      	cmp	r2, r3
 800e784:	d8f7      	bhi.n	800e776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	68ba      	ldr	r2, [r7, #8]
 800e790:	4413      	add	r3, r2
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	429a      	cmp	r2, r3
 800e796:	d108      	bne.n	800e7aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	441a      	add	r2, r3
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	685b      	ldr	r3, [r3, #4]
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	441a      	add	r2, r3
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	429a      	cmp	r2, r3
 800e7bc:	d118      	bne.n	800e7f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681a      	ldr	r2, [r3, #0]
 800e7c2:	4b15      	ldr	r3, [pc, #84]	; (800e818 <prvInsertBlockIntoFreeList+0xb0>)
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	429a      	cmp	r2, r3
 800e7c8:	d00d      	beq.n	800e7e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	685a      	ldr	r2, [r3, #4]
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	685b      	ldr	r3, [r3, #4]
 800e7d4:	441a      	add	r2, r3
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	681a      	ldr	r2, [r3, #0]
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	601a      	str	r2, [r3, #0]
 800e7e4:	e008      	b.n	800e7f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e7e6:	4b0c      	ldr	r3, [pc, #48]	; (800e818 <prvInsertBlockIntoFreeList+0xb0>)
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	601a      	str	r2, [r3, #0]
 800e7ee:	e003      	b.n	800e7f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e7f8:	68fa      	ldr	r2, [r7, #12]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d002      	beq.n	800e806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	687a      	ldr	r2, [r7, #4]
 800e804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e806:	bf00      	nop
 800e808:	3714      	adds	r7, #20
 800e80a:	46bd      	mov	sp, r7
 800e80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e810:	4770      	bx	lr
 800e812:	bf00      	nop
 800e814:	240040c4 	.word	0x240040c4
 800e818:	240040cc 	.word	0x240040cc

0800e81c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800e81c:	b580      	push	{r7, lr}
 800e81e:	b084      	sub	sp, #16
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800e826:	f008 fa81 	bl	8016d2c <sys_timeouts_sleeptime>
 800e82a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e832:	d10b      	bne.n	800e84c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800e834:	4813      	ldr	r0, [pc, #76]	; (800e884 <tcpip_timeouts_mbox_fetch+0x68>)
 800e836:	f00b f8a8 	bl	801998a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800e83a:	2200      	movs	r2, #0
 800e83c:	6839      	ldr	r1, [r7, #0]
 800e83e:	6878      	ldr	r0, [r7, #4]
 800e840:	f00b f81a 	bl	8019878 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800e844:	480f      	ldr	r0, [pc, #60]	; (800e884 <tcpip_timeouts_mbox_fetch+0x68>)
 800e846:	f00b f891 	bl	801996c <sys_mutex_lock>
    return;
 800e84a:	e018      	b.n	800e87e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d102      	bne.n	800e858 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800e852:	f008 fa31 	bl	8016cb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e856:	e7e6      	b.n	800e826 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800e858:	480a      	ldr	r0, [pc, #40]	; (800e884 <tcpip_timeouts_mbox_fetch+0x68>)
 800e85a:	f00b f896 	bl	801998a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800e85e:	68fa      	ldr	r2, [r7, #12]
 800e860:	6839      	ldr	r1, [r7, #0]
 800e862:	6878      	ldr	r0, [r7, #4]
 800e864:	f00b f808 	bl	8019878 <sys_arch_mbox_fetch>
 800e868:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800e86a:	4806      	ldr	r0, [pc, #24]	; (800e884 <tcpip_timeouts_mbox_fetch+0x68>)
 800e86c:	f00b f87e 	bl	801996c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e876:	d102      	bne.n	800e87e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800e878:	f008 fa1e 	bl	8016cb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800e87c:	e7d3      	b.n	800e826 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}
 800e884:	240047d8 	.word	0x240047d8

0800e888 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800e888:	b580      	push	{r7, lr}
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800e890:	4810      	ldr	r0, [pc, #64]	; (800e8d4 <tcpip_thread+0x4c>)
 800e892:	f00b f86b 	bl	801996c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800e896:	4b10      	ldr	r3, [pc, #64]	; (800e8d8 <tcpip_thread+0x50>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d005      	beq.n	800e8aa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800e89e:	4b0e      	ldr	r3, [pc, #56]	; (800e8d8 <tcpip_thread+0x50>)
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a0e      	ldr	r2, [pc, #56]	; (800e8dc <tcpip_thread+0x54>)
 800e8a4:	6812      	ldr	r2, [r2, #0]
 800e8a6:	4610      	mov	r0, r2
 800e8a8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e8aa:	f107 030c 	add.w	r3, r7, #12
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	480b      	ldr	r0, [pc, #44]	; (800e8e0 <tcpip_thread+0x58>)
 800e8b2:	f7ff ffb3 	bl	800e81c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d106      	bne.n	800e8ca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e8bc:	4b09      	ldr	r3, [pc, #36]	; (800e8e4 <tcpip_thread+0x5c>)
 800e8be:	2291      	movs	r2, #145	; 0x91
 800e8c0:	4909      	ldr	r1, [pc, #36]	; (800e8e8 <tcpip_thread+0x60>)
 800e8c2:	480a      	ldr	r0, [pc, #40]	; (800e8ec <tcpip_thread+0x64>)
 800e8c4:	f00b fa4e 	bl	8019d64 <iprintf>
      continue;
 800e8c8:	e003      	b.n	800e8d2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800e8ca:	68fb      	ldr	r3, [r7, #12]
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f000 f80f 	bl	800e8f0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800e8d2:	e7ea      	b.n	800e8aa <tcpip_thread+0x22>
 800e8d4:	240047d8 	.word	0x240047d8
 800e8d8:	240040e4 	.word	0x240040e4
 800e8dc:	240040e8 	.word	0x240040e8
 800e8e0:	240040ec 	.word	0x240040ec
 800e8e4:	0801ae50 	.word	0x0801ae50
 800e8e8:	0801ae80 	.word	0x0801ae80
 800e8ec:	0801aea0 	.word	0x0801aea0

0800e8f0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b082      	sub	sp, #8
 800e8f4:	af00      	add	r7, sp, #0
 800e8f6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	2b02      	cmp	r3, #2
 800e8fe:	d026      	beq.n	800e94e <tcpip_thread_handle_msg+0x5e>
 800e900:	2b02      	cmp	r3, #2
 800e902:	dc2b      	bgt.n	800e95c <tcpip_thread_handle_msg+0x6c>
 800e904:	2b00      	cmp	r3, #0
 800e906:	d002      	beq.n	800e90e <tcpip_thread_handle_msg+0x1e>
 800e908:	2b01      	cmp	r3, #1
 800e90a:	d015      	beq.n	800e938 <tcpip_thread_handle_msg+0x48>
 800e90c:	e026      	b.n	800e95c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	68db      	ldr	r3, [r3, #12]
 800e912:	687a      	ldr	r2, [r7, #4]
 800e914:	6850      	ldr	r0, [r2, #4]
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	6892      	ldr	r2, [r2, #8]
 800e91a:	4611      	mov	r1, r2
 800e91c:	4798      	blx	r3
 800e91e:	4603      	mov	r3, r0
 800e920:	2b00      	cmp	r3, #0
 800e922:	d004      	beq.n	800e92e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	685b      	ldr	r3, [r3, #4]
 800e928:	4618      	mov	r0, r3
 800e92a:	f001 fdc3 	bl	80104b4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e92e:	6879      	ldr	r1, [r7, #4]
 800e930:	2009      	movs	r0, #9
 800e932:	f000 ff1b 	bl	800f76c <memp_free>
      break;
 800e936:	e018      	b.n	800e96a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	685b      	ldr	r3, [r3, #4]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	6892      	ldr	r2, [r2, #8]
 800e940:	4610      	mov	r0, r2
 800e942:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800e944:	6879      	ldr	r1, [r7, #4]
 800e946:	2008      	movs	r0, #8
 800e948:	f000 ff10 	bl	800f76c <memp_free>
      break;
 800e94c:	e00d      	b.n	800e96a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	687a      	ldr	r2, [r7, #4]
 800e954:	6892      	ldr	r2, [r2, #8]
 800e956:	4610      	mov	r0, r2
 800e958:	4798      	blx	r3
      break;
 800e95a:	e006      	b.n	800e96a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800e95c:	4b05      	ldr	r3, [pc, #20]	; (800e974 <tcpip_thread_handle_msg+0x84>)
 800e95e:	22cf      	movs	r2, #207	; 0xcf
 800e960:	4905      	ldr	r1, [pc, #20]	; (800e978 <tcpip_thread_handle_msg+0x88>)
 800e962:	4806      	ldr	r0, [pc, #24]	; (800e97c <tcpip_thread_handle_msg+0x8c>)
 800e964:	f00b f9fe 	bl	8019d64 <iprintf>
      break;
 800e968:	bf00      	nop
  }
}
 800e96a:	bf00      	nop
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}
 800e972:	bf00      	nop
 800e974:	0801ae50 	.word	0x0801ae50
 800e978:	0801ae80 	.word	0x0801ae80
 800e97c:	0801aea0 	.word	0x0801aea0

0800e980 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800e980:	b580      	push	{r7, lr}
 800e982:	b086      	sub	sp, #24
 800e984:	af00      	add	r7, sp, #0
 800e986:	60f8      	str	r0, [r7, #12]
 800e988:	60b9      	str	r1, [r7, #8]
 800e98a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800e98c:	481a      	ldr	r0, [pc, #104]	; (800e9f8 <tcpip_inpkt+0x78>)
 800e98e:	f00a ffb2 	bl	80198f6 <sys_mbox_valid>
 800e992:	4603      	mov	r3, r0
 800e994:	2b00      	cmp	r3, #0
 800e996:	d105      	bne.n	800e9a4 <tcpip_inpkt+0x24>
 800e998:	4b18      	ldr	r3, [pc, #96]	; (800e9fc <tcpip_inpkt+0x7c>)
 800e99a:	22fc      	movs	r2, #252	; 0xfc
 800e99c:	4918      	ldr	r1, [pc, #96]	; (800ea00 <tcpip_inpkt+0x80>)
 800e99e:	4819      	ldr	r0, [pc, #100]	; (800ea04 <tcpip_inpkt+0x84>)
 800e9a0:	f00b f9e0 	bl	8019d64 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800e9a4:	2009      	movs	r0, #9
 800e9a6:	f000 fe6b 	bl	800f680 <memp_malloc>
 800e9aa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800e9ac:	697b      	ldr	r3, [r7, #20]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d102      	bne.n	800e9b8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800e9b2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9b6:	e01a      	b.n	800e9ee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	68ba      	ldr	r2, [r7, #8]
 800e9c8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800e9ca:	697b      	ldr	r3, [r7, #20]
 800e9cc:	687a      	ldr	r2, [r7, #4]
 800e9ce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800e9d0:	6979      	ldr	r1, [r7, #20]
 800e9d2:	4809      	ldr	r0, [pc, #36]	; (800e9f8 <tcpip_inpkt+0x78>)
 800e9d4:	f00a ff36 	bl	8019844 <sys_mbox_trypost>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	d006      	beq.n	800e9ec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800e9de:	6979      	ldr	r1, [r7, #20]
 800e9e0:	2009      	movs	r0, #9
 800e9e2:	f000 fec3 	bl	800f76c <memp_free>
    return ERR_MEM;
 800e9e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9ea:	e000      	b.n	800e9ee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800e9ec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	3718      	adds	r7, #24
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	bd80      	pop	{r7, pc}
 800e9f6:	bf00      	nop
 800e9f8:	240040ec 	.word	0x240040ec
 800e9fc:	0801ae50 	.word	0x0801ae50
 800ea00:	0801aec8 	.word	0x0801aec8
 800ea04:	0801aea0 	.word	0x0801aea0

0800ea08 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ea18:	f003 0318 	and.w	r3, r3, #24
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d006      	beq.n	800ea2e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ea20:	4a08      	ldr	r2, [pc, #32]	; (800ea44 <tcpip_input+0x3c>)
 800ea22:	6839      	ldr	r1, [r7, #0]
 800ea24:	6878      	ldr	r0, [r7, #4]
 800ea26:	f7ff ffab 	bl	800e980 <tcpip_inpkt>
 800ea2a:	4603      	mov	r3, r0
 800ea2c:	e005      	b.n	800ea3a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ea2e:	4a06      	ldr	r2, [pc, #24]	; (800ea48 <tcpip_input+0x40>)
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7ff ffa4 	bl	800e980 <tcpip_inpkt>
 800ea38:	4603      	mov	r3, r0
}
 800ea3a:	4618      	mov	r0, r3
 800ea3c:	3708      	adds	r7, #8
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	bd80      	pop	{r7, pc}
 800ea42:	bf00      	nop
 800ea44:	08019655 	.word	0x08019655
 800ea48:	08018445 	.word	0x08018445

0800ea4c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b084      	sub	sp, #16
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ea56:	4819      	ldr	r0, [pc, #100]	; (800eabc <tcpip_try_callback+0x70>)
 800ea58:	f00a ff4d 	bl	80198f6 <sys_mbox_valid>
 800ea5c:	4603      	mov	r3, r0
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d106      	bne.n	800ea70 <tcpip_try_callback+0x24>
 800ea62:	4b17      	ldr	r3, [pc, #92]	; (800eac0 <tcpip_try_callback+0x74>)
 800ea64:	f240 125d 	movw	r2, #349	; 0x15d
 800ea68:	4916      	ldr	r1, [pc, #88]	; (800eac4 <tcpip_try_callback+0x78>)
 800ea6a:	4817      	ldr	r0, [pc, #92]	; (800eac8 <tcpip_try_callback+0x7c>)
 800ea6c:	f00b f97a 	bl	8019d64 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800ea70:	2008      	movs	r0, #8
 800ea72:	f000 fe05 	bl	800f680 <memp_malloc>
 800ea76:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d102      	bne.n	800ea84 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800ea7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ea82:	e017      	b.n	800eab4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2201      	movs	r2, #1
 800ea88:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	687a      	ldr	r2, [r7, #4]
 800ea8e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ea96:	68f9      	ldr	r1, [r7, #12]
 800ea98:	4808      	ldr	r0, [pc, #32]	; (800eabc <tcpip_try_callback+0x70>)
 800ea9a:	f00a fed3 	bl	8019844 <sys_mbox_trypost>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d006      	beq.n	800eab2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800eaa4:	68f9      	ldr	r1, [r7, #12]
 800eaa6:	2008      	movs	r0, #8
 800eaa8:	f000 fe60 	bl	800f76c <memp_free>
    return ERR_MEM;
 800eaac:	f04f 33ff 	mov.w	r3, #4294967295
 800eab0:	e000      	b.n	800eab4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	3710      	adds	r7, #16
 800eab8:	46bd      	mov	sp, r7
 800eaba:	bd80      	pop	{r7, pc}
 800eabc:	240040ec 	.word	0x240040ec
 800eac0:	0801ae50 	.word	0x0801ae50
 800eac4:	0801aec8 	.word	0x0801aec8
 800eac8:	0801aea0 	.word	0x0801aea0

0800eacc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b084      	sub	sp, #16
 800ead0:	af02      	add	r7, sp, #8
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ead6:	f000 f92d 	bl	800ed34 <lwip_init>

  tcpip_init_done = initfunc;
 800eada:	4a17      	ldr	r2, [pc, #92]	; (800eb38 <tcpip_init+0x6c>)
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800eae0:	4a16      	ldr	r2, [pc, #88]	; (800eb3c <tcpip_init+0x70>)
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800eae6:	2106      	movs	r1, #6
 800eae8:	4815      	ldr	r0, [pc, #84]	; (800eb40 <tcpip_init+0x74>)
 800eaea:	f00a fe89 	bl	8019800 <sys_mbox_new>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d006      	beq.n	800eb02 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800eaf4:	4b13      	ldr	r3, [pc, #76]	; (800eb44 <tcpip_init+0x78>)
 800eaf6:	f240 2261 	movw	r2, #609	; 0x261
 800eafa:	4913      	ldr	r1, [pc, #76]	; (800eb48 <tcpip_init+0x7c>)
 800eafc:	4813      	ldr	r0, [pc, #76]	; (800eb4c <tcpip_init+0x80>)
 800eafe:	f00b f931 	bl	8019d64 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800eb02:	4813      	ldr	r0, [pc, #76]	; (800eb50 <tcpip_init+0x84>)
 800eb04:	f00a ff16 	bl	8019934 <sys_mutex_new>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d006      	beq.n	800eb1c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800eb0e:	4b0d      	ldr	r3, [pc, #52]	; (800eb44 <tcpip_init+0x78>)
 800eb10:	f240 2265 	movw	r2, #613	; 0x265
 800eb14:	490f      	ldr	r1, [pc, #60]	; (800eb54 <tcpip_init+0x88>)
 800eb16:	480d      	ldr	r0, [pc, #52]	; (800eb4c <tcpip_init+0x80>)
 800eb18:	f00b f924 	bl	8019d64 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	9300      	str	r3, [sp, #0]
 800eb20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eb24:	2200      	movs	r2, #0
 800eb26:	490c      	ldr	r1, [pc, #48]	; (800eb58 <tcpip_init+0x8c>)
 800eb28:	480c      	ldr	r0, [pc, #48]	; (800eb5c <tcpip_init+0x90>)
 800eb2a:	f00a ff3b 	bl	80199a4 <sys_thread_new>
}
 800eb2e:	bf00      	nop
 800eb30:	3708      	adds	r7, #8
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop
 800eb38:	240040e4 	.word	0x240040e4
 800eb3c:	240040e8 	.word	0x240040e8
 800eb40:	240040ec 	.word	0x240040ec
 800eb44:	0801ae50 	.word	0x0801ae50
 800eb48:	0801aed8 	.word	0x0801aed8
 800eb4c:	0801aea0 	.word	0x0801aea0
 800eb50:	240047d8 	.word	0x240047d8
 800eb54:	0801aefc 	.word	0x0801aefc
 800eb58:	0800e889 	.word	0x0800e889
 800eb5c:	0801af20 	.word	0x0801af20

0800eb60 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800eb60:	b480      	push	{r7}
 800eb62:	b083      	sub	sp, #12
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	4603      	mov	r3, r0
 800eb68:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800eb6a:	88fb      	ldrh	r3, [r7, #6]
 800eb6c:	021b      	lsls	r3, r3, #8
 800eb6e:	b21a      	sxth	r2, r3
 800eb70:	88fb      	ldrh	r3, [r7, #6]
 800eb72:	0a1b      	lsrs	r3, r3, #8
 800eb74:	b29b      	uxth	r3, r3
 800eb76:	b21b      	sxth	r3, r3
 800eb78:	4313      	orrs	r3, r2
 800eb7a:	b21b      	sxth	r3, r3
 800eb7c:	b29b      	uxth	r3, r3
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	370c      	adds	r7, #12
 800eb82:	46bd      	mov	sp, r7
 800eb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb88:	4770      	bx	lr

0800eb8a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eb8a:	b480      	push	{r7}
 800eb8c:	b083      	sub	sp, #12
 800eb8e:	af00      	add	r7, sp, #0
 800eb90:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	061a      	lsls	r2, r3, #24
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	021b      	lsls	r3, r3, #8
 800eb9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800eb9e:	431a      	orrs	r2, r3
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	0a1b      	lsrs	r3, r3, #8
 800eba4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eba8:	431a      	orrs	r2, r3
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	0e1b      	lsrs	r3, r3, #24
 800ebae:	4313      	orrs	r3, r2
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b089      	sub	sp, #36	; 0x24
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800ebca:	2300      	movs	r3, #0
 800ebcc:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800ebd2:	69fb      	ldr	r3, [r7, #28]
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800ebda:	693b      	ldr	r3, [r7, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00d      	beq.n	800ebfc <lwip_standard_chksum+0x40>
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	dd0a      	ble.n	800ebfc <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800ebe6:	69fa      	ldr	r2, [r7, #28]
 800ebe8:	1c53      	adds	r3, r2, #1
 800ebea:	61fb      	str	r3, [r7, #28]
 800ebec:	f107 030e 	add.w	r3, r7, #14
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	7812      	ldrb	r2, [r2, #0]
 800ebf4:	701a      	strb	r2, [r3, #0]
    len--;
 800ebf6:	683b      	ldr	r3, [r7, #0]
 800ebf8:	3b01      	subs	r3, #1
 800ebfa:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800ebfc:	69fb      	ldr	r3, [r7, #28]
 800ebfe:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800ec00:	e00a      	b.n	800ec18 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800ec02:	69bb      	ldr	r3, [r7, #24]
 800ec04:	1c9a      	adds	r2, r3, #2
 800ec06:	61ba      	str	r2, [r7, #24]
 800ec08:	881b      	ldrh	r3, [r3, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	697b      	ldr	r3, [r7, #20]
 800ec0e:	4413      	add	r3, r2
 800ec10:	617b      	str	r3, [r7, #20]
    len -= 2;
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	3b02      	subs	r3, #2
 800ec16:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	2b01      	cmp	r3, #1
 800ec1c:	dcf1      	bgt.n	800ec02 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	dd04      	ble.n	800ec2e <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800ec24:	f107 030e 	add.w	r3, r7, #14
 800ec28:	69ba      	ldr	r2, [r7, #24]
 800ec2a:	7812      	ldrb	r2, [r2, #0]
 800ec2c:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800ec2e:	89fb      	ldrh	r3, [r7, #14]
 800ec30:	461a      	mov	r2, r3
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	4413      	add	r3, r2
 800ec36:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	0c1a      	lsrs	r2, r3, #16
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	b29b      	uxth	r3, r3
 800ec40:	4413      	add	r3, r2
 800ec42:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	0c1a      	lsrs	r2, r3, #16
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	b29b      	uxth	r3, r3
 800ec4c:	4413      	add	r3, r2
 800ec4e:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d007      	beq.n	800ec66 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	021b      	lsls	r3, r3, #8
 800ec5a:	b29a      	uxth	r2, r3
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	0a1b      	lsrs	r3, r3, #8
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	4313      	orrs	r3, r2
 800ec64:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800ec66:	697b      	ldr	r3, [r7, #20]
 800ec68:	b29b      	uxth	r3, r3
}
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3724      	adds	r7, #36	; 0x24
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec74:	4770      	bx	lr

0800ec76 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800ec76:	b580      	push	{r7, lr}
 800ec78:	b082      	sub	sp, #8
 800ec7a:	af00      	add	r7, sp, #0
 800ec7c:	6078      	str	r0, [r7, #4]
 800ec7e:	460b      	mov	r3, r1
 800ec80:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800ec82:	887b      	ldrh	r3, [r7, #2]
 800ec84:	4619      	mov	r1, r3
 800ec86:	6878      	ldr	r0, [r7, #4]
 800ec88:	f7ff ff98 	bl	800ebbc <lwip_standard_chksum>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	43db      	mvns	r3, r3
 800ec90:	b29b      	uxth	r3, r3
}
 800ec92:	4618      	mov	r0, r3
 800ec94:	3708      	adds	r7, #8
 800ec96:	46bd      	mov	sp, r7
 800ec98:	bd80      	pop	{r7, pc}

0800ec9a <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800ec9a:	b580      	push	{r7, lr}
 800ec9c:	b086      	sub	sp, #24
 800ec9e:	af00      	add	r7, sp, #0
 800eca0:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	613b      	str	r3, [r7, #16]
 800ecae:	e02b      	b.n	800ed08 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800ecb0:	693b      	ldr	r3, [r7, #16]
 800ecb2:	685a      	ldr	r2, [r3, #4]
 800ecb4:	693b      	ldr	r3, [r7, #16]
 800ecb6:	895b      	ldrh	r3, [r3, #10]
 800ecb8:	4619      	mov	r1, r3
 800ecba:	4610      	mov	r0, r2
 800ecbc:	f7ff ff7e 	bl	800ebbc <lwip_standard_chksum>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	461a      	mov	r2, r3
 800ecc4:	697b      	ldr	r3, [r7, #20]
 800ecc6:	4413      	add	r3, r2
 800ecc8:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800ecca:	697b      	ldr	r3, [r7, #20]
 800eccc:	0c1a      	lsrs	r2, r3, #16
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	b29b      	uxth	r3, r3
 800ecd2:	4413      	add	r3, r2
 800ecd4:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	895b      	ldrh	r3, [r3, #10]
 800ecda:	f003 0301 	and.w	r3, r3, #1
 800ecde:	b29b      	uxth	r3, r3
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d00e      	beq.n	800ed02 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	bf0c      	ite	eq
 800ecea:	2301      	moveq	r3, #1
 800ecec:	2300      	movne	r3, #0
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800ecf2:	697b      	ldr	r3, [r7, #20]
 800ecf4:	021b      	lsls	r3, r3, #8
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	697b      	ldr	r3, [r7, #20]
 800ecfa:	0a1b      	lsrs	r3, r3, #8
 800ecfc:	b2db      	uxtb	r3, r3
 800ecfe:	4313      	orrs	r3, r2
 800ed00:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	613b      	str	r3, [r7, #16]
 800ed08:	693b      	ldr	r3, [r7, #16]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d1d0      	bne.n	800ecb0 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d007      	beq.n	800ed24 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ed14:	697b      	ldr	r3, [r7, #20]
 800ed16:	021b      	lsls	r3, r3, #8
 800ed18:	b29a      	uxth	r2, r3
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	0a1b      	lsrs	r3, r3, #8
 800ed1e:	b2db      	uxtb	r3, r3
 800ed20:	4313      	orrs	r3, r2
 800ed22:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	b29b      	uxth	r3, r3
 800ed28:	43db      	mvns	r3, r3
 800ed2a:	b29b      	uxth	r3, r3
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3718      	adds	r7, #24
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}

0800ed34 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800ed3e:	f00a fdeb 	bl	8019918 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800ed42:	f000 f8d5 	bl	800eef0 <mem_init>
  memp_init();
 800ed46:	f000 fc2d 	bl	800f5a4 <memp_init>
  pbuf_init();
  netif_init();
 800ed4a:	f000 fd39 	bl	800f7c0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ed4e:	f008 f825 	bl	8016d9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ed52:	f001 fe59 	bl	8010a08 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ed56:	f007 ff67 	bl	8016c28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ed5a:	bf00      	nop
 800ed5c:	3708      	adds	r7, #8
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	bd80      	pop	{r7, pc}
	...

0800ed64 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ed64:	b480      	push	{r7}
 800ed66:	b083      	sub	sp, #12
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800ed6e:	4b05      	ldr	r3, [pc, #20]	; (800ed84 <ptr_to_mem+0x20>)
 800ed70:	681a      	ldr	r2, [r3, #0]
 800ed72:	88fb      	ldrh	r3, [r7, #6]
 800ed74:	4413      	add	r3, r2
}
 800ed76:	4618      	mov	r0, r3
 800ed78:	370c      	adds	r7, #12
 800ed7a:	46bd      	mov	sp, r7
 800ed7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed80:	4770      	bx	lr
 800ed82:	bf00      	nop
 800ed84:	240040f0 	.word	0x240040f0

0800ed88 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b083      	sub	sp, #12
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ed90:	4b05      	ldr	r3, [pc, #20]	; (800eda8 <mem_to_ptr+0x20>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	687a      	ldr	r2, [r7, #4]
 800ed96:	1ad3      	subs	r3, r2, r3
 800ed98:	b29b      	uxth	r3, r3
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	370c      	adds	r7, #12
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	240040f0 	.word	0x240040f0

0800edac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800edac:	b590      	push	{r4, r7, lr}
 800edae:	b085      	sub	sp, #20
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800edb4:	4b45      	ldr	r3, [pc, #276]	; (800eecc <plug_holes+0x120>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	687a      	ldr	r2, [r7, #4]
 800edba:	429a      	cmp	r2, r3
 800edbc:	d206      	bcs.n	800edcc <plug_holes+0x20>
 800edbe:	4b44      	ldr	r3, [pc, #272]	; (800eed0 <plug_holes+0x124>)
 800edc0:	f240 12df 	movw	r2, #479	; 0x1df
 800edc4:	4943      	ldr	r1, [pc, #268]	; (800eed4 <plug_holes+0x128>)
 800edc6:	4844      	ldr	r0, [pc, #272]	; (800eed8 <plug_holes+0x12c>)
 800edc8:	f00a ffcc 	bl	8019d64 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800edcc:	4b43      	ldr	r3, [pc, #268]	; (800eedc <plug_holes+0x130>)
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d306      	bcc.n	800ede4 <plug_holes+0x38>
 800edd6:	4b3e      	ldr	r3, [pc, #248]	; (800eed0 <plug_holes+0x124>)
 800edd8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800eddc:	4940      	ldr	r1, [pc, #256]	; (800eee0 <plug_holes+0x134>)
 800edde:	483e      	ldr	r0, [pc, #248]	; (800eed8 <plug_holes+0x12c>)
 800ede0:	f00a ffc0 	bl	8019d64 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	791b      	ldrb	r3, [r3, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d006      	beq.n	800edfa <plug_holes+0x4e>
 800edec:	4b38      	ldr	r3, [pc, #224]	; (800eed0 <plug_holes+0x124>)
 800edee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800edf2:	493c      	ldr	r1, [pc, #240]	; (800eee4 <plug_holes+0x138>)
 800edf4:	4838      	ldr	r0, [pc, #224]	; (800eed8 <plug_holes+0x12c>)
 800edf6:	f00a ffb5 	bl	8019d64 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	881b      	ldrh	r3, [r3, #0]
 800edfe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ee02:	d906      	bls.n	800ee12 <plug_holes+0x66>
 800ee04:	4b32      	ldr	r3, [pc, #200]	; (800eed0 <plug_holes+0x124>)
 800ee06:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ee0a:	4937      	ldr	r1, [pc, #220]	; (800eee8 <plug_holes+0x13c>)
 800ee0c:	4832      	ldr	r0, [pc, #200]	; (800eed8 <plug_holes+0x12c>)
 800ee0e:	f00a ffa9 	bl	8019d64 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	881b      	ldrh	r3, [r3, #0]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7ff ffa4 	bl	800ed64 <ptr_to_mem>
 800ee1c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ee1e:	687a      	ldr	r2, [r7, #4]
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	429a      	cmp	r2, r3
 800ee24:	d024      	beq.n	800ee70 <plug_holes+0xc4>
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	791b      	ldrb	r3, [r3, #4]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	d120      	bne.n	800ee70 <plug_holes+0xc4>
 800ee2e:	4b2b      	ldr	r3, [pc, #172]	; (800eedc <plug_holes+0x130>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	68fa      	ldr	r2, [r7, #12]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d01b      	beq.n	800ee70 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ee38:	4b2c      	ldr	r3, [pc, #176]	; (800eeec <plug_holes+0x140>)
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d102      	bne.n	800ee48 <plug_holes+0x9c>
      lfree = mem;
 800ee42:	4a2a      	ldr	r2, [pc, #168]	; (800eeec <plug_holes+0x140>)
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	881a      	ldrh	r2, [r3, #0]
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ee50:	68fb      	ldr	r3, [r7, #12]
 800ee52:	881b      	ldrh	r3, [r3, #0]
 800ee54:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ee58:	d00a      	beq.n	800ee70 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	881b      	ldrh	r3, [r3, #0]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f7ff ff80 	bl	800ed64 <ptr_to_mem>
 800ee64:	4604      	mov	r4, r0
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f7ff ff8e 	bl	800ed88 <mem_to_ptr>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	885b      	ldrh	r3, [r3, #2]
 800ee74:	4618      	mov	r0, r3
 800ee76:	f7ff ff75 	bl	800ed64 <ptr_to_mem>
 800ee7a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ee7c:	68ba      	ldr	r2, [r7, #8]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	429a      	cmp	r2, r3
 800ee82:	d01f      	beq.n	800eec4 <plug_holes+0x118>
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	791b      	ldrb	r3, [r3, #4]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d11b      	bne.n	800eec4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800ee8c:	4b17      	ldr	r3, [pc, #92]	; (800eeec <plug_holes+0x140>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	687a      	ldr	r2, [r7, #4]
 800ee92:	429a      	cmp	r2, r3
 800ee94:	d102      	bne.n	800ee9c <plug_holes+0xf0>
      lfree = pmem;
 800ee96:	4a15      	ldr	r2, [pc, #84]	; (800eeec <plug_holes+0x140>)
 800ee98:	68bb      	ldr	r3, [r7, #8]
 800ee9a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	881a      	ldrh	r2, [r3, #0]
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	881b      	ldrh	r3, [r3, #0]
 800eea8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800eeac:	d00a      	beq.n	800eec4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	881b      	ldrh	r3, [r3, #0]
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7ff ff56 	bl	800ed64 <ptr_to_mem>
 800eeb8:	4604      	mov	r4, r0
 800eeba:	68b8      	ldr	r0, [r7, #8]
 800eebc:	f7ff ff64 	bl	800ed88 <mem_to_ptr>
 800eec0:	4603      	mov	r3, r0
 800eec2:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800eec4:	bf00      	nop
 800eec6:	3714      	adds	r7, #20
 800eec8:	46bd      	mov	sp, r7
 800eeca:	bd90      	pop	{r4, r7, pc}
 800eecc:	240040f0 	.word	0x240040f0
 800eed0:	0801af30 	.word	0x0801af30
 800eed4:	0801af60 	.word	0x0801af60
 800eed8:	0801af78 	.word	0x0801af78
 800eedc:	240040f4 	.word	0x240040f4
 800eee0:	0801afa0 	.word	0x0801afa0
 800eee4:	0801afbc 	.word	0x0801afbc
 800eee8:	0801afd8 	.word	0x0801afd8
 800eeec:	240040fc 	.word	0x240040fc

0800eef0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b082      	sub	sp, #8
 800eef4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800eef6:	4b1d      	ldr	r3, [pc, #116]	; (800ef6c <mem_init+0x7c>)
 800eef8:	4a1d      	ldr	r2, [pc, #116]	; (800ef70 <mem_init+0x80>)
 800eefa:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800eefc:	4b1b      	ldr	r3, [pc, #108]	; (800ef6c <mem_init+0x7c>)
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ef08:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	2200      	movs	r2, #0
 800ef0e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ef16:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800ef1a:	f7ff ff23 	bl	800ed64 <ptr_to_mem>
 800ef1e:	4603      	mov	r3, r0
 800ef20:	4a14      	ldr	r2, [pc, #80]	; (800ef74 <mem_init+0x84>)
 800ef22:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ef24:	4b13      	ldr	r3, [pc, #76]	; (800ef74 <mem_init+0x84>)
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ef2c:	4b11      	ldr	r3, [pc, #68]	; (800ef74 <mem_init+0x84>)
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ef34:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ef36:	4b0f      	ldr	r3, [pc, #60]	; (800ef74 <mem_init+0x84>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800ef3e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ef40:	4b0a      	ldr	r3, [pc, #40]	; (800ef6c <mem_init+0x7c>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	4a0c      	ldr	r2, [pc, #48]	; (800ef78 <mem_init+0x88>)
 800ef46:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ef48:	480c      	ldr	r0, [pc, #48]	; (800ef7c <mem_init+0x8c>)
 800ef4a:	f00a fcf3 	bl	8019934 <sys_mutex_new>
 800ef4e:	4603      	mov	r3, r0
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d006      	beq.n	800ef62 <mem_init+0x72>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ef54:	4b0a      	ldr	r3, [pc, #40]	; (800ef80 <mem_init+0x90>)
 800ef56:	f240 221f 	movw	r2, #543	; 0x21f
 800ef5a:	490a      	ldr	r1, [pc, #40]	; (800ef84 <mem_init+0x94>)
 800ef5c:	480a      	ldr	r0, [pc, #40]	; (800ef88 <mem_init+0x98>)
 800ef5e:	f00a ff01 	bl	8019d64 <iprintf>
  }
}
 800ef62:	bf00      	nop
 800ef64:	3708      	adds	r7, #8
 800ef66:	46bd      	mov	sp, r7
 800ef68:	bd80      	pop	{r7, pc}
 800ef6a:	bf00      	nop
 800ef6c:	240040f0 	.word	0x240040f0
 800ef70:	30002000 	.word	0x30002000
 800ef74:	240040f4 	.word	0x240040f4
 800ef78:	240040fc 	.word	0x240040fc
 800ef7c:	240040f8 	.word	0x240040f8
 800ef80:	0801af30 	.word	0x0801af30
 800ef84:	0801b004 	.word	0x0801b004
 800ef88:	0801af78 	.word	0x0801af78

0800ef8c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b086      	sub	sp, #24
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7ff fef7 	bl	800ed88 <mem_to_ptr>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	881b      	ldrh	r3, [r3, #0]
 800efa2:	4618      	mov	r0, r3
 800efa4:	f7ff fede 	bl	800ed64 <ptr_to_mem>
 800efa8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	885b      	ldrh	r3, [r3, #2]
 800efae:	4618      	mov	r0, r3
 800efb0:	f7ff fed8 	bl	800ed64 <ptr_to_mem>
 800efb4:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	881b      	ldrh	r3, [r3, #0]
 800efba:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800efbe:	d818      	bhi.n	800eff2 <mem_link_valid+0x66>
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	885b      	ldrh	r3, [r3, #2]
 800efc4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800efc8:	d813      	bhi.n	800eff2 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800efce:	8afa      	ldrh	r2, [r7, #22]
 800efd0:	429a      	cmp	r2, r3
 800efd2:	d004      	beq.n	800efde <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	881b      	ldrh	r3, [r3, #0]
 800efd8:	8afa      	ldrh	r2, [r7, #22]
 800efda:	429a      	cmp	r2, r3
 800efdc:	d109      	bne.n	800eff2 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800efde:	4b08      	ldr	r3, [pc, #32]	; (800f000 <mem_link_valid+0x74>)
 800efe0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800efe2:	693a      	ldr	r2, [r7, #16]
 800efe4:	429a      	cmp	r2, r3
 800efe6:	d006      	beq.n	800eff6 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	885b      	ldrh	r3, [r3, #2]
 800efec:	8afa      	ldrh	r2, [r7, #22]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d001      	beq.n	800eff6 <mem_link_valid+0x6a>
    return 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	e000      	b.n	800eff8 <mem_link_valid+0x6c>
  }
  return 1;
 800eff6:	2301      	movs	r3, #1
}
 800eff8:	4618      	mov	r0, r3
 800effa:	3718      	adds	r7, #24
 800effc:	46bd      	mov	sp, r7
 800effe:	bd80      	pop	{r7, pc}
 800f000:	240040f4 	.word	0x240040f4

0800f004 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b088      	sub	sp, #32
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d070      	beq.n	800f0f4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f003 0303 	and.w	r3, r3, #3
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d00d      	beq.n	800f038 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f01c:	4b37      	ldr	r3, [pc, #220]	; (800f0fc <mem_free+0xf8>)
 800f01e:	f240 2273 	movw	r2, #627	; 0x273
 800f022:	4937      	ldr	r1, [pc, #220]	; (800f100 <mem_free+0xfc>)
 800f024:	4837      	ldr	r0, [pc, #220]	; (800f104 <mem_free+0x100>)
 800f026:	f00a fe9d 	bl	8019d64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f02a:	f00a fce1 	bl	80199f0 <sys_arch_protect>
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	68f8      	ldr	r0, [r7, #12]
 800f032:	f00a fceb 	bl	8019a0c <sys_arch_unprotect>
    return;
 800f036:	e05e      	b.n	800f0f6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	3b08      	subs	r3, #8
 800f03c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f03e:	4b32      	ldr	r3, [pc, #200]	; (800f108 <mem_free+0x104>)
 800f040:	681b      	ldr	r3, [r3, #0]
 800f042:	69fa      	ldr	r2, [r7, #28]
 800f044:	429a      	cmp	r2, r3
 800f046:	d306      	bcc.n	800f056 <mem_free+0x52>
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f103 020c 	add.w	r2, r3, #12
 800f04e:	4b2f      	ldr	r3, [pc, #188]	; (800f10c <mem_free+0x108>)
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	429a      	cmp	r2, r3
 800f054:	d90d      	bls.n	800f072 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f056:	4b29      	ldr	r3, [pc, #164]	; (800f0fc <mem_free+0xf8>)
 800f058:	f240 227f 	movw	r2, #639	; 0x27f
 800f05c:	492c      	ldr	r1, [pc, #176]	; (800f110 <mem_free+0x10c>)
 800f05e:	4829      	ldr	r0, [pc, #164]	; (800f104 <mem_free+0x100>)
 800f060:	f00a fe80 	bl	8019d64 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f064:	f00a fcc4 	bl	80199f0 <sys_arch_protect>
 800f068:	6138      	str	r0, [r7, #16]
 800f06a:	6938      	ldr	r0, [r7, #16]
 800f06c:	f00a fcce 	bl	8019a0c <sys_arch_unprotect>
    return;
 800f070:	e041      	b.n	800f0f6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f072:	4828      	ldr	r0, [pc, #160]	; (800f114 <mem_free+0x110>)
 800f074:	f00a fc7a 	bl	801996c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f078:	69fb      	ldr	r3, [r7, #28]
 800f07a:	791b      	ldrb	r3, [r3, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d110      	bne.n	800f0a2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f080:	4b1e      	ldr	r3, [pc, #120]	; (800f0fc <mem_free+0xf8>)
 800f082:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f086:	4924      	ldr	r1, [pc, #144]	; (800f118 <mem_free+0x114>)
 800f088:	481e      	ldr	r0, [pc, #120]	; (800f104 <mem_free+0x100>)
 800f08a:	f00a fe6b 	bl	8019d64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f08e:	4821      	ldr	r0, [pc, #132]	; (800f114 <mem_free+0x110>)
 800f090:	f00a fc7b 	bl	801998a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f094:	f00a fcac 	bl	80199f0 <sys_arch_protect>
 800f098:	6178      	str	r0, [r7, #20]
 800f09a:	6978      	ldr	r0, [r7, #20]
 800f09c:	f00a fcb6 	bl	8019a0c <sys_arch_unprotect>
    return;
 800f0a0:	e029      	b.n	800f0f6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f0a2:	69f8      	ldr	r0, [r7, #28]
 800f0a4:	f7ff ff72 	bl	800ef8c <mem_link_valid>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d110      	bne.n	800f0d0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f0ae:	4b13      	ldr	r3, [pc, #76]	; (800f0fc <mem_free+0xf8>)
 800f0b0:	f240 2295 	movw	r2, #661	; 0x295
 800f0b4:	4919      	ldr	r1, [pc, #100]	; (800f11c <mem_free+0x118>)
 800f0b6:	4813      	ldr	r0, [pc, #76]	; (800f104 <mem_free+0x100>)
 800f0b8:	f00a fe54 	bl	8019d64 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f0bc:	4815      	ldr	r0, [pc, #84]	; (800f114 <mem_free+0x110>)
 800f0be:	f00a fc64 	bl	801998a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f0c2:	f00a fc95 	bl	80199f0 <sys_arch_protect>
 800f0c6:	61b8      	str	r0, [r7, #24]
 800f0c8:	69b8      	ldr	r0, [r7, #24]
 800f0ca:	f00a fc9f 	bl	8019a0c <sys_arch_unprotect>
    return;
 800f0ce:	e012      	b.n	800f0f6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f0d0:	69fb      	ldr	r3, [r7, #28]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f0d6:	4b12      	ldr	r3, [pc, #72]	; (800f120 <mem_free+0x11c>)
 800f0d8:	681b      	ldr	r3, [r3, #0]
 800f0da:	69fa      	ldr	r2, [r7, #28]
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d202      	bcs.n	800f0e6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f0e0:	4a0f      	ldr	r2, [pc, #60]	; (800f120 <mem_free+0x11c>)
 800f0e2:	69fb      	ldr	r3, [r7, #28]
 800f0e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f0e6:	69f8      	ldr	r0, [r7, #28]
 800f0e8:	f7ff fe60 	bl	800edac <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f0ec:	4809      	ldr	r0, [pc, #36]	; (800f114 <mem_free+0x110>)
 800f0ee:	f00a fc4c 	bl	801998a <sys_mutex_unlock>
 800f0f2:	e000      	b.n	800f0f6 <mem_free+0xf2>
    return;
 800f0f4:	bf00      	nop
}
 800f0f6:	3720      	adds	r7, #32
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	0801af30 	.word	0x0801af30
 800f100:	0801b020 	.word	0x0801b020
 800f104:	0801af78 	.word	0x0801af78
 800f108:	240040f0 	.word	0x240040f0
 800f10c:	240040f4 	.word	0x240040f4
 800f110:	0801b044 	.word	0x0801b044
 800f114:	240040f8 	.word	0x240040f8
 800f118:	0801b060 	.word	0x0801b060
 800f11c:	0801b088 	.word	0x0801b088
 800f120:	240040fc 	.word	0x240040fc

0800f124 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b088      	sub	sp, #32
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f130:	887b      	ldrh	r3, [r7, #2]
 800f132:	3303      	adds	r3, #3
 800f134:	b29b      	uxth	r3, r3
 800f136:	f023 0303 	bic.w	r3, r3, #3
 800f13a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f13c:	8bfb      	ldrh	r3, [r7, #30]
 800f13e:	2b0b      	cmp	r3, #11
 800f140:	d801      	bhi.n	800f146 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f142:	230c      	movs	r3, #12
 800f144:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f146:	8bfb      	ldrh	r3, [r7, #30]
 800f148:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f14c:	d803      	bhi.n	800f156 <mem_trim+0x32>
 800f14e:	8bfa      	ldrh	r2, [r7, #30]
 800f150:	887b      	ldrh	r3, [r7, #2]
 800f152:	429a      	cmp	r2, r3
 800f154:	d201      	bcs.n	800f15a <mem_trim+0x36>
    return NULL;
 800f156:	2300      	movs	r3, #0
 800f158:	e0d8      	b.n	800f30c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f15a:	4b6e      	ldr	r3, [pc, #440]	; (800f314 <mem_trim+0x1f0>)
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	687a      	ldr	r2, [r7, #4]
 800f160:	429a      	cmp	r2, r3
 800f162:	d304      	bcc.n	800f16e <mem_trim+0x4a>
 800f164:	4b6c      	ldr	r3, [pc, #432]	; (800f318 <mem_trim+0x1f4>)
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	687a      	ldr	r2, [r7, #4]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d306      	bcc.n	800f17c <mem_trim+0x58>
 800f16e:	4b6b      	ldr	r3, [pc, #428]	; (800f31c <mem_trim+0x1f8>)
 800f170:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f174:	496a      	ldr	r1, [pc, #424]	; (800f320 <mem_trim+0x1fc>)
 800f176:	486b      	ldr	r0, [pc, #428]	; (800f324 <mem_trim+0x200>)
 800f178:	f00a fdf4 	bl	8019d64 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f17c:	4b65      	ldr	r3, [pc, #404]	; (800f314 <mem_trim+0x1f0>)
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	687a      	ldr	r2, [r7, #4]
 800f182:	429a      	cmp	r2, r3
 800f184:	d304      	bcc.n	800f190 <mem_trim+0x6c>
 800f186:	4b64      	ldr	r3, [pc, #400]	; (800f318 <mem_trim+0x1f4>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	429a      	cmp	r2, r3
 800f18e:	d307      	bcc.n	800f1a0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f190:	f00a fc2e 	bl	80199f0 <sys_arch_protect>
 800f194:	60b8      	str	r0, [r7, #8]
 800f196:	68b8      	ldr	r0, [r7, #8]
 800f198:	f00a fc38 	bl	8019a0c <sys_arch_unprotect>
    return rmem;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	e0b5      	b.n	800f30c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	3b08      	subs	r3, #8
 800f1a4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f1a6:	69b8      	ldr	r0, [r7, #24]
 800f1a8:	f7ff fdee 	bl	800ed88 <mem_to_ptr>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	881a      	ldrh	r2, [r3, #0]
 800f1b4:	8afb      	ldrh	r3, [r7, #22]
 800f1b6:	1ad3      	subs	r3, r2, r3
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	3b08      	subs	r3, #8
 800f1bc:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f1be:	8bfa      	ldrh	r2, [r7, #30]
 800f1c0:	8abb      	ldrh	r3, [r7, #20]
 800f1c2:	429a      	cmp	r2, r3
 800f1c4:	d906      	bls.n	800f1d4 <mem_trim+0xb0>
 800f1c6:	4b55      	ldr	r3, [pc, #340]	; (800f31c <mem_trim+0x1f8>)
 800f1c8:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f1cc:	4956      	ldr	r1, [pc, #344]	; (800f328 <mem_trim+0x204>)
 800f1ce:	4855      	ldr	r0, [pc, #340]	; (800f324 <mem_trim+0x200>)
 800f1d0:	f00a fdc8 	bl	8019d64 <iprintf>
  if (newsize > size) {
 800f1d4:	8bfa      	ldrh	r2, [r7, #30]
 800f1d6:	8abb      	ldrh	r3, [r7, #20]
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d901      	bls.n	800f1e0 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	e095      	b.n	800f30c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f1e0:	8bfa      	ldrh	r2, [r7, #30]
 800f1e2:	8abb      	ldrh	r3, [r7, #20]
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d101      	bne.n	800f1ec <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	e08f      	b.n	800f30c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f1ec:	484f      	ldr	r0, [pc, #316]	; (800f32c <mem_trim+0x208>)
 800f1ee:	f00a fbbd 	bl	801996c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f1f2:	69bb      	ldr	r3, [r7, #24]
 800f1f4:	881b      	ldrh	r3, [r3, #0]
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7ff fdb4 	bl	800ed64 <ptr_to_mem>
 800f1fc:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f1fe:	693b      	ldr	r3, [r7, #16]
 800f200:	791b      	ldrb	r3, [r3, #4]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d13f      	bne.n	800f286 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f206:	69bb      	ldr	r3, [r7, #24]
 800f208:	881b      	ldrh	r3, [r3, #0]
 800f20a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f20e:	d106      	bne.n	800f21e <mem_trim+0xfa>
 800f210:	4b42      	ldr	r3, [pc, #264]	; (800f31c <mem_trim+0x1f8>)
 800f212:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f216:	4946      	ldr	r1, [pc, #280]	; (800f330 <mem_trim+0x20c>)
 800f218:	4842      	ldr	r0, [pc, #264]	; (800f324 <mem_trim+0x200>)
 800f21a:	f00a fda3 	bl	8019d64 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f21e:	693b      	ldr	r3, [r7, #16]
 800f220:	881b      	ldrh	r3, [r3, #0]
 800f222:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f224:	8afa      	ldrh	r2, [r7, #22]
 800f226:	8bfb      	ldrh	r3, [r7, #30]
 800f228:	4413      	add	r3, r2
 800f22a:	b29b      	uxth	r3, r3
 800f22c:	3308      	adds	r3, #8
 800f22e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f230:	4b40      	ldr	r3, [pc, #256]	; (800f334 <mem_trim+0x210>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	693a      	ldr	r2, [r7, #16]
 800f236:	429a      	cmp	r2, r3
 800f238:	d106      	bne.n	800f248 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f23a:	89fb      	ldrh	r3, [r7, #14]
 800f23c:	4618      	mov	r0, r3
 800f23e:	f7ff fd91 	bl	800ed64 <ptr_to_mem>
 800f242:	4603      	mov	r3, r0
 800f244:	4a3b      	ldr	r2, [pc, #236]	; (800f334 <mem_trim+0x210>)
 800f246:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f248:	89fb      	ldrh	r3, [r7, #14]
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff fd8a 	bl	800ed64 <ptr_to_mem>
 800f250:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	2200      	movs	r2, #0
 800f256:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f258:	693b      	ldr	r3, [r7, #16]
 800f25a:	89ba      	ldrh	r2, [r7, #12]
 800f25c:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	8afa      	ldrh	r2, [r7, #22]
 800f262:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	89fa      	ldrh	r2, [r7, #14]
 800f268:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	881b      	ldrh	r3, [r3, #0]
 800f26e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f272:	d047      	beq.n	800f304 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f274:	693b      	ldr	r3, [r7, #16]
 800f276:	881b      	ldrh	r3, [r3, #0]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7ff fd73 	bl	800ed64 <ptr_to_mem>
 800f27e:	4602      	mov	r2, r0
 800f280:	89fb      	ldrh	r3, [r7, #14]
 800f282:	8053      	strh	r3, [r2, #2]
 800f284:	e03e      	b.n	800f304 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f286:	8bfb      	ldrh	r3, [r7, #30]
 800f288:	f103 0214 	add.w	r2, r3, #20
 800f28c:	8abb      	ldrh	r3, [r7, #20]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d838      	bhi.n	800f304 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f292:	8afa      	ldrh	r2, [r7, #22]
 800f294:	8bfb      	ldrh	r3, [r7, #30]
 800f296:	4413      	add	r3, r2
 800f298:	b29b      	uxth	r3, r3
 800f29a:	3308      	adds	r3, #8
 800f29c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f29e:	69bb      	ldr	r3, [r7, #24]
 800f2a0:	881b      	ldrh	r3, [r3, #0]
 800f2a2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f2a6:	d106      	bne.n	800f2b6 <mem_trim+0x192>
 800f2a8:	4b1c      	ldr	r3, [pc, #112]	; (800f31c <mem_trim+0x1f8>)
 800f2aa:	f240 3216 	movw	r2, #790	; 0x316
 800f2ae:	4920      	ldr	r1, [pc, #128]	; (800f330 <mem_trim+0x20c>)
 800f2b0:	481c      	ldr	r0, [pc, #112]	; (800f324 <mem_trim+0x200>)
 800f2b2:	f00a fd57 	bl	8019d64 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f2b6:	89fb      	ldrh	r3, [r7, #14]
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	f7ff fd53 	bl	800ed64 <ptr_to_mem>
 800f2be:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f2c0:	4b1c      	ldr	r3, [pc, #112]	; (800f334 <mem_trim+0x210>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	693a      	ldr	r2, [r7, #16]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d202      	bcs.n	800f2d0 <mem_trim+0x1ac>
      lfree = mem2;
 800f2ca:	4a1a      	ldr	r2, [pc, #104]	; (800f334 <mem_trim+0x210>)
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f2d0:	693b      	ldr	r3, [r7, #16]
 800f2d2:	2200      	movs	r2, #0
 800f2d4:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f2d6:	69bb      	ldr	r3, [r7, #24]
 800f2d8:	881a      	ldrh	r2, [r3, #0]
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f2de:	693b      	ldr	r3, [r7, #16]
 800f2e0:	8afa      	ldrh	r2, [r7, #22]
 800f2e2:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	89fa      	ldrh	r2, [r7, #14]
 800f2e8:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	881b      	ldrh	r3, [r3, #0]
 800f2ee:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f2f2:	d007      	beq.n	800f304 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	881b      	ldrh	r3, [r3, #0]
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	f7ff fd33 	bl	800ed64 <ptr_to_mem>
 800f2fe:	4602      	mov	r2, r0
 800f300:	89fb      	ldrh	r3, [r7, #14]
 800f302:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f304:	4809      	ldr	r0, [pc, #36]	; (800f32c <mem_trim+0x208>)
 800f306:	f00a fb40 	bl	801998a <sys_mutex_unlock>
  return rmem;
 800f30a:	687b      	ldr	r3, [r7, #4]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3720      	adds	r7, #32
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}
 800f314:	240040f0 	.word	0x240040f0
 800f318:	240040f4 	.word	0x240040f4
 800f31c:	0801af30 	.word	0x0801af30
 800f320:	0801b0bc 	.word	0x0801b0bc
 800f324:	0801af78 	.word	0x0801af78
 800f328:	0801b0d4 	.word	0x0801b0d4
 800f32c:	240040f8 	.word	0x240040f8
 800f330:	0801b0f4 	.word	0x0801b0f4
 800f334:	240040fc 	.word	0x240040fc

0800f338 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b088      	sub	sp, #32
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	4603      	mov	r3, r0
 800f340:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f342:	88fb      	ldrh	r3, [r7, #6]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d101      	bne.n	800f34c <mem_malloc+0x14>
    return NULL;
 800f348:	2300      	movs	r3, #0
 800f34a:	e0e2      	b.n	800f512 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f34c:	88fb      	ldrh	r3, [r7, #6]
 800f34e:	3303      	adds	r3, #3
 800f350:	b29b      	uxth	r3, r3
 800f352:	f023 0303 	bic.w	r3, r3, #3
 800f356:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f358:	8bbb      	ldrh	r3, [r7, #28]
 800f35a:	2b0b      	cmp	r3, #11
 800f35c:	d801      	bhi.n	800f362 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f35e:	230c      	movs	r3, #12
 800f360:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f362:	8bbb      	ldrh	r3, [r7, #28]
 800f364:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f368:	d803      	bhi.n	800f372 <mem_malloc+0x3a>
 800f36a:	8bba      	ldrh	r2, [r7, #28]
 800f36c:	88fb      	ldrh	r3, [r7, #6]
 800f36e:	429a      	cmp	r2, r3
 800f370:	d201      	bcs.n	800f376 <mem_malloc+0x3e>
    return NULL;
 800f372:	2300      	movs	r3, #0
 800f374:	e0cd      	b.n	800f512 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f376:	4869      	ldr	r0, [pc, #420]	; (800f51c <mem_malloc+0x1e4>)
 800f378:	f00a faf8 	bl	801996c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f37c:	4b68      	ldr	r3, [pc, #416]	; (800f520 <mem_malloc+0x1e8>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff fd01 	bl	800ed88 <mem_to_ptr>
 800f386:	4603      	mov	r3, r0
 800f388:	83fb      	strh	r3, [r7, #30]
 800f38a:	e0b7      	b.n	800f4fc <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f38c:	8bfb      	ldrh	r3, [r7, #30]
 800f38e:	4618      	mov	r0, r3
 800f390:	f7ff fce8 	bl	800ed64 <ptr_to_mem>
 800f394:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f396:	697b      	ldr	r3, [r7, #20]
 800f398:	791b      	ldrb	r3, [r3, #4]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	f040 80a7 	bne.w	800f4ee <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	881b      	ldrh	r3, [r3, #0]
 800f3a4:	461a      	mov	r2, r3
 800f3a6:	8bfb      	ldrh	r3, [r7, #30]
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	f1a3 0208 	sub.w	r2, r3, #8
 800f3ae:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f3b0:	429a      	cmp	r2, r3
 800f3b2:	f0c0 809c 	bcc.w	800f4ee <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	881b      	ldrh	r3, [r3, #0]
 800f3ba:	461a      	mov	r2, r3
 800f3bc:	8bfb      	ldrh	r3, [r7, #30]
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	f1a3 0208 	sub.w	r2, r3, #8
 800f3c4:	8bbb      	ldrh	r3, [r7, #28]
 800f3c6:	3314      	adds	r3, #20
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d333      	bcc.n	800f434 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f3cc:	8bfa      	ldrh	r2, [r7, #30]
 800f3ce:	8bbb      	ldrh	r3, [r7, #28]
 800f3d0:	4413      	add	r3, r2
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	3308      	adds	r3, #8
 800f3d6:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f3d8:	8a7b      	ldrh	r3, [r7, #18]
 800f3da:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f3de:	d106      	bne.n	800f3ee <mem_malloc+0xb6>
 800f3e0:	4b50      	ldr	r3, [pc, #320]	; (800f524 <mem_malloc+0x1ec>)
 800f3e2:	f240 3287 	movw	r2, #903	; 0x387
 800f3e6:	4950      	ldr	r1, [pc, #320]	; (800f528 <mem_malloc+0x1f0>)
 800f3e8:	4850      	ldr	r0, [pc, #320]	; (800f52c <mem_malloc+0x1f4>)
 800f3ea:	f00a fcbb 	bl	8019d64 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f3ee:	8a7b      	ldrh	r3, [r7, #18]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	f7ff fcb7 	bl	800ed64 <ptr_to_mem>
 800f3f6:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	881a      	ldrh	r2, [r3, #0]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	8bfa      	ldrh	r2, [r7, #30]
 800f40a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f40c:	697b      	ldr	r3, [r7, #20]
 800f40e:	8a7a      	ldrh	r2, [r7, #18]
 800f410:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f412:	697b      	ldr	r3, [r7, #20]
 800f414:	2201      	movs	r2, #1
 800f416:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	881b      	ldrh	r3, [r3, #0]
 800f41c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800f420:	d00b      	beq.n	800f43a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	881b      	ldrh	r3, [r3, #0]
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff fc9c 	bl	800ed64 <ptr_to_mem>
 800f42c:	4602      	mov	r2, r0
 800f42e:	8a7b      	ldrh	r3, [r7, #18]
 800f430:	8053      	strh	r3, [r2, #2]
 800f432:	e002      	b.n	800f43a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f434:	697b      	ldr	r3, [r7, #20]
 800f436:	2201      	movs	r2, #1
 800f438:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f43a:	4b39      	ldr	r3, [pc, #228]	; (800f520 <mem_malloc+0x1e8>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	697a      	ldr	r2, [r7, #20]
 800f440:	429a      	cmp	r2, r3
 800f442:	d127      	bne.n	800f494 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f444:	4b36      	ldr	r3, [pc, #216]	; (800f520 <mem_malloc+0x1e8>)
 800f446:	681b      	ldr	r3, [r3, #0]
 800f448:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f44a:	e005      	b.n	800f458 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f44c:	69bb      	ldr	r3, [r7, #24]
 800f44e:	881b      	ldrh	r3, [r3, #0]
 800f450:	4618      	mov	r0, r3
 800f452:	f7ff fc87 	bl	800ed64 <ptr_to_mem>
 800f456:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f458:	69bb      	ldr	r3, [r7, #24]
 800f45a:	791b      	ldrb	r3, [r3, #4]
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d004      	beq.n	800f46a <mem_malloc+0x132>
 800f460:	4b33      	ldr	r3, [pc, #204]	; (800f530 <mem_malloc+0x1f8>)
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	69ba      	ldr	r2, [r7, #24]
 800f466:	429a      	cmp	r2, r3
 800f468:	d1f0      	bne.n	800f44c <mem_malloc+0x114>
          }
          lfree = cur;
 800f46a:	4a2d      	ldr	r2, [pc, #180]	; (800f520 <mem_malloc+0x1e8>)
 800f46c:	69bb      	ldr	r3, [r7, #24]
 800f46e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f470:	4b2b      	ldr	r3, [pc, #172]	; (800f520 <mem_malloc+0x1e8>)
 800f472:	681a      	ldr	r2, [r3, #0]
 800f474:	4b2e      	ldr	r3, [pc, #184]	; (800f530 <mem_malloc+0x1f8>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d00b      	beq.n	800f494 <mem_malloc+0x15c>
 800f47c:	4b28      	ldr	r3, [pc, #160]	; (800f520 <mem_malloc+0x1e8>)
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	791b      	ldrb	r3, [r3, #4]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d006      	beq.n	800f494 <mem_malloc+0x15c>
 800f486:	4b27      	ldr	r3, [pc, #156]	; (800f524 <mem_malloc+0x1ec>)
 800f488:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f48c:	4929      	ldr	r1, [pc, #164]	; (800f534 <mem_malloc+0x1fc>)
 800f48e:	4827      	ldr	r0, [pc, #156]	; (800f52c <mem_malloc+0x1f4>)
 800f490:	f00a fc68 	bl	8019d64 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f494:	4821      	ldr	r0, [pc, #132]	; (800f51c <mem_malloc+0x1e4>)
 800f496:	f00a fa78 	bl	801998a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f49a:	8bba      	ldrh	r2, [r7, #28]
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	4413      	add	r3, r2
 800f4a0:	3308      	adds	r3, #8
 800f4a2:	4a23      	ldr	r2, [pc, #140]	; (800f530 <mem_malloc+0x1f8>)
 800f4a4:	6812      	ldr	r2, [r2, #0]
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	d906      	bls.n	800f4b8 <mem_malloc+0x180>
 800f4aa:	4b1e      	ldr	r3, [pc, #120]	; (800f524 <mem_malloc+0x1ec>)
 800f4ac:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f4b0:	4921      	ldr	r1, [pc, #132]	; (800f538 <mem_malloc+0x200>)
 800f4b2:	481e      	ldr	r0, [pc, #120]	; (800f52c <mem_malloc+0x1f4>)
 800f4b4:	f00a fc56 	bl	8019d64 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	f003 0303 	and.w	r3, r3, #3
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	d006      	beq.n	800f4d0 <mem_malloc+0x198>
 800f4c2:	4b18      	ldr	r3, [pc, #96]	; (800f524 <mem_malloc+0x1ec>)
 800f4c4:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f4c8:	491c      	ldr	r1, [pc, #112]	; (800f53c <mem_malloc+0x204>)
 800f4ca:	4818      	ldr	r0, [pc, #96]	; (800f52c <mem_malloc+0x1f4>)
 800f4cc:	f00a fc4a 	bl	8019d64 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f4d0:	697b      	ldr	r3, [r7, #20]
 800f4d2:	f003 0303 	and.w	r3, r3, #3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d006      	beq.n	800f4e8 <mem_malloc+0x1b0>
 800f4da:	4b12      	ldr	r3, [pc, #72]	; (800f524 <mem_malloc+0x1ec>)
 800f4dc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f4e0:	4917      	ldr	r1, [pc, #92]	; (800f540 <mem_malloc+0x208>)
 800f4e2:	4812      	ldr	r0, [pc, #72]	; (800f52c <mem_malloc+0x1f4>)
 800f4e4:	f00a fc3e 	bl	8019d64 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	3308      	adds	r3, #8
 800f4ec:	e011      	b.n	800f512 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f4ee:	8bfb      	ldrh	r3, [r7, #30]
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7ff fc37 	bl	800ed64 <ptr_to_mem>
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	881b      	ldrh	r3, [r3, #0]
 800f4fa:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f4fc:	8bfa      	ldrh	r2, [r7, #30]
 800f4fe:	8bbb      	ldrh	r3, [r7, #28]
 800f500:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800f504:	429a      	cmp	r2, r3
 800f506:	f4ff af41 	bcc.w	800f38c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f50a:	4804      	ldr	r0, [pc, #16]	; (800f51c <mem_malloc+0x1e4>)
 800f50c:	f00a fa3d 	bl	801998a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f510:	2300      	movs	r3, #0
}
 800f512:	4618      	mov	r0, r3
 800f514:	3720      	adds	r7, #32
 800f516:	46bd      	mov	sp, r7
 800f518:	bd80      	pop	{r7, pc}
 800f51a:	bf00      	nop
 800f51c:	240040f8 	.word	0x240040f8
 800f520:	240040fc 	.word	0x240040fc
 800f524:	0801af30 	.word	0x0801af30
 800f528:	0801b0f4 	.word	0x0801b0f4
 800f52c:	0801af78 	.word	0x0801af78
 800f530:	240040f4 	.word	0x240040f4
 800f534:	0801b108 	.word	0x0801b108
 800f538:	0801b124 	.word	0x0801b124
 800f53c:	0801b154 	.word	0x0801b154
 800f540:	0801b184 	.word	0x0801b184

0800f544 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	689b      	ldr	r3, [r3, #8]
 800f550:	2200      	movs	r2, #0
 800f552:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	685b      	ldr	r3, [r3, #4]
 800f558:	3303      	adds	r3, #3
 800f55a:	f023 0303 	bic.w	r3, r3, #3
 800f55e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f560:	2300      	movs	r3, #0
 800f562:	60fb      	str	r3, [r7, #12]
 800f564:	e011      	b.n	800f58a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	689b      	ldr	r3, [r3, #8]
 800f56a:	681a      	ldr	r2, [r3, #0]
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	689b      	ldr	r3, [r3, #8]
 800f574:	68ba      	ldr	r2, [r7, #8]
 800f576:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	881b      	ldrh	r3, [r3, #0]
 800f57c:	461a      	mov	r2, r3
 800f57e:	68bb      	ldr	r3, [r7, #8]
 800f580:	4413      	add	r3, r2
 800f582:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	3301      	adds	r3, #1
 800f588:	60fb      	str	r3, [r7, #12]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	885b      	ldrh	r3, [r3, #2]
 800f58e:	461a      	mov	r2, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	4293      	cmp	r3, r2
 800f594:	dbe7      	blt.n	800f566 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800f596:	bf00      	nop
 800f598:	bf00      	nop
 800f59a:	3714      	adds	r7, #20
 800f59c:	46bd      	mov	sp, r7
 800f59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a2:	4770      	bx	lr

0800f5a4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b082      	sub	sp, #8
 800f5a8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	80fb      	strh	r3, [r7, #6]
 800f5ae:	e009      	b.n	800f5c4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800f5b0:	88fb      	ldrh	r3, [r7, #6]
 800f5b2:	4a08      	ldr	r2, [pc, #32]	; (800f5d4 <memp_init+0x30>)
 800f5b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	f7ff ffc3 	bl	800f544 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800f5be:	88fb      	ldrh	r3, [r7, #6]
 800f5c0:	3301      	adds	r3, #1
 800f5c2:	80fb      	strh	r3, [r7, #6]
 800f5c4:	88fb      	ldrh	r3, [r7, #6]
 800f5c6:	2b0c      	cmp	r3, #12
 800f5c8:	d9f2      	bls.n	800f5b0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800f5ca:	bf00      	nop
 800f5cc:	bf00      	nop
 800f5ce:	3708      	adds	r7, #8
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}
 800f5d4:	0801e1a8 	.word	0x0801e1a8

0800f5d8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b084      	sub	sp, #16
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800f5e0:	f00a fa06 	bl	80199f0 <sys_arch_protect>
 800f5e4:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	689b      	ldr	r3, [r3, #8]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d015      	beq.n	800f620 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	689b      	ldr	r3, [r3, #8]
 800f5f8:	68ba      	ldr	r2, [r7, #8]
 800f5fa:	6812      	ldr	r2, [r2, #0]
 800f5fc:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800f5fe:	68bb      	ldr	r3, [r7, #8]
 800f600:	f003 0303 	and.w	r3, r3, #3
 800f604:	2b00      	cmp	r3, #0
 800f606:	d006      	beq.n	800f616 <do_memp_malloc_pool+0x3e>
 800f608:	4b09      	ldr	r3, [pc, #36]	; (800f630 <do_memp_malloc_pool+0x58>)
 800f60a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800f60e:	4909      	ldr	r1, [pc, #36]	; (800f634 <do_memp_malloc_pool+0x5c>)
 800f610:	4809      	ldr	r0, [pc, #36]	; (800f638 <do_memp_malloc_pool+0x60>)
 800f612:	f00a fba7 	bl	8019d64 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f616:	68f8      	ldr	r0, [r7, #12]
 800f618:	f00a f9f8 	bl	8019a0c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	e003      	b.n	800f628 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800f620:	68f8      	ldr	r0, [r7, #12]
 800f622:	f00a f9f3 	bl	8019a0c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800f626:	2300      	movs	r3, #0
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}
 800f630:	0801b1a8 	.word	0x0801b1a8
 800f634:	0801b1d8 	.word	0x0801b1d8
 800f638:	0801b1fc 	.word	0x0801b1fc

0800f63c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b082      	sub	sp, #8
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d106      	bne.n	800f658 <memp_malloc_pool+0x1c>
 800f64a:	4b0a      	ldr	r3, [pc, #40]	; (800f674 <memp_malloc_pool+0x38>)
 800f64c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800f650:	4909      	ldr	r1, [pc, #36]	; (800f678 <memp_malloc_pool+0x3c>)
 800f652:	480a      	ldr	r0, [pc, #40]	; (800f67c <memp_malloc_pool+0x40>)
 800f654:	f00a fb86 	bl	8019d64 <iprintf>
  if (desc == NULL) {
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d101      	bne.n	800f662 <memp_malloc_pool+0x26>
    return NULL;
 800f65e:	2300      	movs	r3, #0
 800f660:	e003      	b.n	800f66a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800f662:	6878      	ldr	r0, [r7, #4]
 800f664:	f7ff ffb8 	bl	800f5d8 <do_memp_malloc_pool>
 800f668:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	0801b1a8 	.word	0x0801b1a8
 800f678:	0801b224 	.word	0x0801b224
 800f67c:	0801b1fc 	.word	0x0801b1fc

0800f680 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b084      	sub	sp, #16
 800f684:	af00      	add	r7, sp, #0
 800f686:	4603      	mov	r3, r0
 800f688:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800f68a:	79fb      	ldrb	r3, [r7, #7]
 800f68c:	2b0c      	cmp	r3, #12
 800f68e:	d908      	bls.n	800f6a2 <memp_malloc+0x22>
 800f690:	4b0a      	ldr	r3, [pc, #40]	; (800f6bc <memp_malloc+0x3c>)
 800f692:	f240 1257 	movw	r2, #343	; 0x157
 800f696:	490a      	ldr	r1, [pc, #40]	; (800f6c0 <memp_malloc+0x40>)
 800f698:	480a      	ldr	r0, [pc, #40]	; (800f6c4 <memp_malloc+0x44>)
 800f69a:	f00a fb63 	bl	8019d64 <iprintf>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	e008      	b.n	800f6b4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800f6a2:	79fb      	ldrb	r3, [r7, #7]
 800f6a4:	4a08      	ldr	r2, [pc, #32]	; (800f6c8 <memp_malloc+0x48>)
 800f6a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7ff ff94 	bl	800f5d8 <do_memp_malloc_pool>
 800f6b0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3710      	adds	r7, #16
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	0801b1a8 	.word	0x0801b1a8
 800f6c0:	0801b238 	.word	0x0801b238
 800f6c4:	0801b1fc 	.word	0x0801b1fc
 800f6c8:	0801e1a8 	.word	0x0801e1a8

0800f6cc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b084      	sub	sp, #16
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	f003 0303 	and.w	r3, r3, #3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d006      	beq.n	800f6ee <do_memp_free_pool+0x22>
 800f6e0:	4b0d      	ldr	r3, [pc, #52]	; (800f718 <do_memp_free_pool+0x4c>)
 800f6e2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800f6e6:	490d      	ldr	r1, [pc, #52]	; (800f71c <do_memp_free_pool+0x50>)
 800f6e8:	480d      	ldr	r0, [pc, #52]	; (800f720 <do_memp_free_pool+0x54>)
 800f6ea:	f00a fb3b 	bl	8019d64 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800f6ee:	683b      	ldr	r3, [r7, #0]
 800f6f0:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800f6f2:	f00a f97d 	bl	80199f0 <sys_arch_protect>
 800f6f6:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	689b      	ldr	r3, [r3, #8]
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	689b      	ldr	r3, [r3, #8]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800f70a:	68b8      	ldr	r0, [r7, #8]
 800f70c:	f00a f97e 	bl	8019a0c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800f710:	bf00      	nop
 800f712:	3710      	adds	r7, #16
 800f714:	46bd      	mov	sp, r7
 800f716:	bd80      	pop	{r7, pc}
 800f718:	0801b1a8 	.word	0x0801b1a8
 800f71c:	0801b258 	.word	0x0801b258
 800f720:	0801b1fc 	.word	0x0801b1fc

0800f724 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b082      	sub	sp, #8
 800f728:	af00      	add	r7, sp, #0
 800f72a:	6078      	str	r0, [r7, #4]
 800f72c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d106      	bne.n	800f742 <memp_free_pool+0x1e>
 800f734:	4b0a      	ldr	r3, [pc, #40]	; (800f760 <memp_free_pool+0x3c>)
 800f736:	f240 1295 	movw	r2, #405	; 0x195
 800f73a:	490a      	ldr	r1, [pc, #40]	; (800f764 <memp_free_pool+0x40>)
 800f73c:	480a      	ldr	r0, [pc, #40]	; (800f768 <memp_free_pool+0x44>)
 800f73e:	f00a fb11 	bl	8019d64 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d007      	beq.n	800f758 <memp_free_pool+0x34>
 800f748:	683b      	ldr	r3, [r7, #0]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d004      	beq.n	800f758 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f7ff ffbb 	bl	800f6cc <do_memp_free_pool>
 800f756:	e000      	b.n	800f75a <memp_free_pool+0x36>
    return;
 800f758:	bf00      	nop
}
 800f75a:	3708      	adds	r7, #8
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd80      	pop	{r7, pc}
 800f760:	0801b1a8 	.word	0x0801b1a8
 800f764:	0801b224 	.word	0x0801b224
 800f768:	0801b1fc 	.word	0x0801b1fc

0800f76c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	4603      	mov	r3, r0
 800f774:	6039      	str	r1, [r7, #0]
 800f776:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f778:	79fb      	ldrb	r3, [r7, #7]
 800f77a:	2b0c      	cmp	r3, #12
 800f77c:	d907      	bls.n	800f78e <memp_free+0x22>
 800f77e:	4b0c      	ldr	r3, [pc, #48]	; (800f7b0 <memp_free+0x44>)
 800f780:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f784:	490b      	ldr	r1, [pc, #44]	; (800f7b4 <memp_free+0x48>)
 800f786:	480c      	ldr	r0, [pc, #48]	; (800f7b8 <memp_free+0x4c>)
 800f788:	f00a faec 	bl	8019d64 <iprintf>
 800f78c:	e00c      	b.n	800f7a8 <memp_free+0x3c>

  if (mem == NULL) {
 800f78e:	683b      	ldr	r3, [r7, #0]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d008      	beq.n	800f7a6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f794:	79fb      	ldrb	r3, [r7, #7]
 800f796:	4a09      	ldr	r2, [pc, #36]	; (800f7bc <memp_free+0x50>)
 800f798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f79c:	6839      	ldr	r1, [r7, #0]
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f7ff ff94 	bl	800f6cc <do_memp_free_pool>
 800f7a4:	e000      	b.n	800f7a8 <memp_free+0x3c>
    return;
 800f7a6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f7a8:	3708      	adds	r7, #8
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	0801b1a8 	.word	0x0801b1a8
 800f7b4:	0801b278 	.word	0x0801b278
 800f7b8:	0801b1fc 	.word	0x0801b1fc
 800f7bc:	0801e1a8 	.word	0x0801e1a8

0800f7c0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f7c0:	b480      	push	{r7}
 800f7c2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f7c4:	bf00      	nop
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr
	...

0800f7d0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b086      	sub	sp, #24
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
 800f7dc:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d108      	bne.n	800f7f6 <netif_add+0x26>
 800f7e4:	4b57      	ldr	r3, [pc, #348]	; (800f944 <netif_add+0x174>)
 800f7e6:	f240 1227 	movw	r2, #295	; 0x127
 800f7ea:	4957      	ldr	r1, [pc, #348]	; (800f948 <netif_add+0x178>)
 800f7ec:	4857      	ldr	r0, [pc, #348]	; (800f94c <netif_add+0x17c>)
 800f7ee:	f00a fab9 	bl	8019d64 <iprintf>
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	e0a2      	b.n	800f93c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f7f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d108      	bne.n	800f80e <netif_add+0x3e>
 800f7fc:	4b51      	ldr	r3, [pc, #324]	; (800f944 <netif_add+0x174>)
 800f7fe:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f802:	4953      	ldr	r1, [pc, #332]	; (800f950 <netif_add+0x180>)
 800f804:	4851      	ldr	r0, [pc, #324]	; (800f94c <netif_add+0x17c>)
 800f806:	f00a faad 	bl	8019d64 <iprintf>
 800f80a:	2300      	movs	r3, #0
 800f80c:	e096      	b.n	800f93c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	2b00      	cmp	r3, #0
 800f812:	d101      	bne.n	800f818 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f814:	4b4f      	ldr	r3, [pc, #316]	; (800f954 <netif_add+0x184>)
 800f816:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d101      	bne.n	800f822 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f81e:	4b4d      	ldr	r3, [pc, #308]	; (800f954 <netif_add+0x184>)
 800f820:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f822:	683b      	ldr	r3, [r7, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d101      	bne.n	800f82c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f828:	4b4a      	ldr	r3, [pc, #296]	; (800f954 <netif_add+0x184>)
 800f82a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	2200      	movs	r2, #0
 800f836:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2200      	movs	r2, #0
 800f83c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	4a45      	ldr	r2, [pc, #276]	; (800f958 <netif_add+0x188>)
 800f842:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2200      	movs	r2, #0
 800f848:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2200      	movs	r2, #0
 800f84e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2200      	movs	r2, #0
 800f856:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	6a3a      	ldr	r2, [r7, #32]
 800f85c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f85e:	4b3f      	ldr	r3, [pc, #252]	; (800f95c <netif_add+0x18c>)
 800f860:	781a      	ldrb	r2, [r3, #0]
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f86c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	687a      	ldr	r2, [r7, #4]
 800f872:	68b9      	ldr	r1, [r7, #8]
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f000 f913 	bl	800faa0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f87c:	68f8      	ldr	r0, [r7, #12]
 800f87e:	4798      	blx	r3
 800f880:	4603      	mov	r3, r0
 800f882:	2b00      	cmp	r3, #0
 800f884:	d001      	beq.n	800f88a <netif_add+0xba>
    return NULL;
 800f886:	2300      	movs	r3, #0
 800f888:	e058      	b.n	800f93c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f890:	2bff      	cmp	r3, #255	; 0xff
 800f892:	d103      	bne.n	800f89c <netif_add+0xcc>
        netif->num = 0;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	2200      	movs	r2, #0
 800f898:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f8a0:	4b2f      	ldr	r3, [pc, #188]	; (800f960 <netif_add+0x190>)
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	617b      	str	r3, [r7, #20]
 800f8a6:	e02b      	b.n	800f900 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f8a8:	697a      	ldr	r2, [r7, #20]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	429a      	cmp	r2, r3
 800f8ae:	d106      	bne.n	800f8be <netif_add+0xee>
 800f8b0:	4b24      	ldr	r3, [pc, #144]	; (800f944 <netif_add+0x174>)
 800f8b2:	f240 128b 	movw	r2, #395	; 0x18b
 800f8b6:	492b      	ldr	r1, [pc, #172]	; (800f964 <netif_add+0x194>)
 800f8b8:	4824      	ldr	r0, [pc, #144]	; (800f94c <netif_add+0x17c>)
 800f8ba:	f00a fa53 	bl	8019d64 <iprintf>
        num_netifs++;
 800f8be:	693b      	ldr	r3, [r7, #16]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	2bff      	cmp	r3, #255	; 0xff
 800f8c8:	dd06      	ble.n	800f8d8 <netif_add+0x108>
 800f8ca:	4b1e      	ldr	r3, [pc, #120]	; (800f944 <netif_add+0x174>)
 800f8cc:	f240 128d 	movw	r2, #397	; 0x18d
 800f8d0:	4925      	ldr	r1, [pc, #148]	; (800f968 <netif_add+0x198>)
 800f8d2:	481e      	ldr	r0, [pc, #120]	; (800f94c <netif_add+0x17c>)
 800f8d4:	f00a fa46 	bl	8019d64 <iprintf>
        if (netif2->num == netif->num) {
 800f8d8:	697b      	ldr	r3, [r7, #20]
 800f8da:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8e4:	429a      	cmp	r2, r3
 800f8e6:	d108      	bne.n	800f8fa <netif_add+0x12a>
          netif->num++;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	b2da      	uxtb	r2, r3
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f8f8:	e005      	b.n	800f906 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	617b      	str	r3, [r7, #20]
 800f900:	697b      	ldr	r3, [r7, #20]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1d0      	bne.n	800f8a8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d1be      	bne.n	800f88a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f912:	2bfe      	cmp	r3, #254	; 0xfe
 800f914:	d103      	bne.n	800f91e <netif_add+0x14e>
    netif_num = 0;
 800f916:	4b11      	ldr	r3, [pc, #68]	; (800f95c <netif_add+0x18c>)
 800f918:	2200      	movs	r2, #0
 800f91a:	701a      	strb	r2, [r3, #0]
 800f91c:	e006      	b.n	800f92c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f924:	3301      	adds	r3, #1
 800f926:	b2da      	uxtb	r2, r3
 800f928:	4b0c      	ldr	r3, [pc, #48]	; (800f95c <netif_add+0x18c>)
 800f92a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f92c:	4b0c      	ldr	r3, [pc, #48]	; (800f960 <netif_add+0x190>)
 800f92e:	681a      	ldr	r2, [r3, #0]
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f934:	4a0a      	ldr	r2, [pc, #40]	; (800f960 <netif_add+0x190>)
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f93a:	68fb      	ldr	r3, [r7, #12]
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3718      	adds	r7, #24
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	0801b294 	.word	0x0801b294
 800f948:	0801b328 	.word	0x0801b328
 800f94c:	0801b2e4 	.word	0x0801b2e4
 800f950:	0801b344 	.word	0x0801b344
 800f954:	0801e21c 	.word	0x0801e21c
 800f958:	0800fd7b 	.word	0x0800fd7b
 800f95c:	24004134 	.word	0x24004134
 800f960:	2400788c 	.word	0x2400788c
 800f964:	0801b368 	.word	0x0801b368
 800f968:	0801b37c 	.word	0x0801b37c

0800f96c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b082      	sub	sp, #8
 800f970:	af00      	add	r7, sp, #0
 800f972:	6078      	str	r0, [r7, #4]
 800f974:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f976:	6839      	ldr	r1, [r7, #0]
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	f002 fe2d 	bl	80125d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f97e:	6839      	ldr	r1, [r7, #0]
 800f980:	6878      	ldr	r0, [r7, #4]
 800f982:	f007 fb95 	bl	80170b0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f986:	bf00      	nop
 800f988:	3708      	adds	r7, #8
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
	...

0800f990 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f99c:	68bb      	ldr	r3, [r7, #8]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d106      	bne.n	800f9b0 <netif_do_set_ipaddr+0x20>
 800f9a2:	4b1d      	ldr	r3, [pc, #116]	; (800fa18 <netif_do_set_ipaddr+0x88>)
 800f9a4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f9a8:	491c      	ldr	r1, [pc, #112]	; (800fa1c <netif_do_set_ipaddr+0x8c>)
 800f9aa:	481d      	ldr	r0, [pc, #116]	; (800fa20 <netif_do_set_ipaddr+0x90>)
 800f9ac:	f00a f9da 	bl	8019d64 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d106      	bne.n	800f9c4 <netif_do_set_ipaddr+0x34>
 800f9b6:	4b18      	ldr	r3, [pc, #96]	; (800fa18 <netif_do_set_ipaddr+0x88>)
 800f9b8:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f9bc:	4917      	ldr	r1, [pc, #92]	; (800fa1c <netif_do_set_ipaddr+0x8c>)
 800f9be:	4818      	ldr	r0, [pc, #96]	; (800fa20 <netif_do_set_ipaddr+0x90>)
 800f9c0:	f00a f9d0 	bl	8019d64 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f9c4:	68bb      	ldr	r3, [r7, #8]
 800f9c6:	681a      	ldr	r2, [r3, #0]
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	429a      	cmp	r2, r3
 800f9d0:	d01c      	beq.n	800fa0c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f9d2:	68bb      	ldr	r3, [r7, #8]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	3304      	adds	r3, #4
 800f9dc:	681a      	ldr	r2, [r3, #0]
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f9e2:	f107 0314 	add.w	r3, r7, #20
 800f9e6:	4619      	mov	r1, r3
 800f9e8:	6878      	ldr	r0, [r7, #4]
 800f9ea:	f7ff ffbf 	bl	800f96c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d002      	beq.n	800f9fa <netif_do_set_ipaddr+0x6a>
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	681b      	ldr	r3, [r3, #0]
 800f9f8:	e000      	b.n	800f9fc <netif_do_set_ipaddr+0x6c>
 800f9fa:	2300      	movs	r3, #0
 800f9fc:	68fa      	ldr	r2, [r7, #12]
 800f9fe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fa00:	2101      	movs	r1, #1
 800fa02:	68f8      	ldr	r0, [r7, #12]
 800fa04:	f000 f8d2 	bl	800fbac <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fa08:	2301      	movs	r3, #1
 800fa0a:	e000      	b.n	800fa0e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fa0c:	2300      	movs	r3, #0
}
 800fa0e:	4618      	mov	r0, r3
 800fa10:	3718      	adds	r7, #24
 800fa12:	46bd      	mov	sp, r7
 800fa14:	bd80      	pop	{r7, pc}
 800fa16:	bf00      	nop
 800fa18:	0801b294 	.word	0x0801b294
 800fa1c:	0801b3ac 	.word	0x0801b3ac
 800fa20:	0801b2e4 	.word	0x0801b2e4

0800fa24 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fa24:	b480      	push	{r7}
 800fa26:	b085      	sub	sp, #20
 800fa28:	af00      	add	r7, sp, #0
 800fa2a:	60f8      	str	r0, [r7, #12]
 800fa2c:	60b9      	str	r1, [r7, #8]
 800fa2e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	681a      	ldr	r2, [r3, #0]
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	3308      	adds	r3, #8
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	429a      	cmp	r2, r3
 800fa3c:	d00a      	beq.n	800fa54 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d002      	beq.n	800fa4a <netif_do_set_netmask+0x26>
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	e000      	b.n	800fa4c <netif_do_set_netmask+0x28>
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	68fa      	ldr	r2, [r7, #12]
 800fa4e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fa50:	2301      	movs	r3, #1
 800fa52:	e000      	b.n	800fa56 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fa54:	2300      	movs	r3, #0
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	3714      	adds	r7, #20
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr

0800fa62 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fa62:	b480      	push	{r7}
 800fa64:	b085      	sub	sp, #20
 800fa66:	af00      	add	r7, sp, #0
 800fa68:	60f8      	str	r0, [r7, #12]
 800fa6a:	60b9      	str	r1, [r7, #8]
 800fa6c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fa6e:	68bb      	ldr	r3, [r7, #8]
 800fa70:	681a      	ldr	r2, [r3, #0]
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	330c      	adds	r3, #12
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	429a      	cmp	r2, r3
 800fa7a:	d00a      	beq.n	800fa92 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fa7c:	68bb      	ldr	r3, [r7, #8]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d002      	beq.n	800fa88 <netif_do_set_gw+0x26>
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	e000      	b.n	800fa8a <netif_do_set_gw+0x28>
 800fa88:	2300      	movs	r3, #0
 800fa8a:	68fa      	ldr	r2, [r7, #12]
 800fa8c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fa8e:	2301      	movs	r3, #1
 800fa90:	e000      	b.n	800fa94 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	3714      	adds	r7, #20
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b088      	sub	sp, #32
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
 800faac:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800faae:	2300      	movs	r3, #0
 800fab0:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800fab2:	2300      	movs	r3, #0
 800fab4:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800fab6:	68bb      	ldr	r3, [r7, #8]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d101      	bne.n	800fac0 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800fabc:	4b1c      	ldr	r3, [pc, #112]	; (800fb30 <netif_set_addr+0x90>)
 800fabe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d101      	bne.n	800faca <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800fac6:	4b1a      	ldr	r3, [pc, #104]	; (800fb30 <netif_set_addr+0x90>)
 800fac8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fad0:	4b17      	ldr	r3, [pc, #92]	; (800fb30 <netif_set_addr+0x90>)
 800fad2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d003      	beq.n	800fae2 <netif_set_addr+0x42>
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d101      	bne.n	800fae6 <netif_set_addr+0x46>
 800fae2:	2301      	movs	r3, #1
 800fae4:	e000      	b.n	800fae8 <netif_set_addr+0x48>
 800fae6:	2300      	movs	r3, #0
 800fae8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800faea:	697b      	ldr	r3, [r7, #20]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d006      	beq.n	800fafe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800faf0:	f107 0310 	add.w	r3, r7, #16
 800faf4:	461a      	mov	r2, r3
 800faf6:	68b9      	ldr	r1, [r7, #8]
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	f7ff ff49 	bl	800f990 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fafe:	69fa      	ldr	r2, [r7, #28]
 800fb00:	6879      	ldr	r1, [r7, #4]
 800fb02:	68f8      	ldr	r0, [r7, #12]
 800fb04:	f7ff ff8e 	bl	800fa24 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800fb08:	69ba      	ldr	r2, [r7, #24]
 800fb0a:	6839      	ldr	r1, [r7, #0]
 800fb0c:	68f8      	ldr	r0, [r7, #12]
 800fb0e:	f7ff ffa8 	bl	800fa62 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800fb12:	697b      	ldr	r3, [r7, #20]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d106      	bne.n	800fb26 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fb18:	f107 0310 	add.w	r3, r7, #16
 800fb1c:	461a      	mov	r2, r3
 800fb1e:	68b9      	ldr	r1, [r7, #8]
 800fb20:	68f8      	ldr	r0, [r7, #12]
 800fb22:	f7ff ff35 	bl	800f990 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800fb26:	bf00      	nop
 800fb28:	3720      	adds	r7, #32
 800fb2a:	46bd      	mov	sp, r7
 800fb2c:	bd80      	pop	{r7, pc}
 800fb2e:	bf00      	nop
 800fb30:	0801e21c 	.word	0x0801e21c

0800fb34 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800fb34:	b480      	push	{r7}
 800fb36:	b083      	sub	sp, #12
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800fb3c:	4a04      	ldr	r2, [pc, #16]	; (800fb50 <netif_set_default+0x1c>)
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800fb42:	bf00      	nop
 800fb44:	370c      	adds	r7, #12
 800fb46:	46bd      	mov	sp, r7
 800fb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4c:	4770      	bx	lr
 800fb4e:	bf00      	nop
 800fb50:	24007890 	.word	0x24007890

0800fb54 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b082      	sub	sp, #8
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d107      	bne.n	800fb72 <netif_set_up+0x1e>
 800fb62:	4b0f      	ldr	r3, [pc, #60]	; (800fba0 <netif_set_up+0x4c>)
 800fb64:	f44f 7254 	mov.w	r2, #848	; 0x350
 800fb68:	490e      	ldr	r1, [pc, #56]	; (800fba4 <netif_set_up+0x50>)
 800fb6a:	480f      	ldr	r0, [pc, #60]	; (800fba8 <netif_set_up+0x54>)
 800fb6c:	f00a f8fa 	bl	8019d64 <iprintf>
 800fb70:	e013      	b.n	800fb9a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb78:	f003 0301 	and.w	r3, r3, #1
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d10c      	bne.n	800fb9a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb86:	f043 0301 	orr.w	r3, r3, #1
 800fb8a:	b2da      	uxtb	r2, r3
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fb92:	2103      	movs	r1, #3
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f000 f809 	bl	800fbac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800fb9a:	3708      	adds	r7, #8
 800fb9c:	46bd      	mov	sp, r7
 800fb9e:	bd80      	pop	{r7, pc}
 800fba0:	0801b294 	.word	0x0801b294
 800fba4:	0801b41c 	.word	0x0801b41c
 800fba8:	0801b2e4 	.word	0x0801b2e4

0800fbac <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d106      	bne.n	800fbcc <netif_issue_reports+0x20>
 800fbbe:	4b18      	ldr	r3, [pc, #96]	; (800fc20 <netif_issue_reports+0x74>)
 800fbc0:	f240 326d 	movw	r2, #877	; 0x36d
 800fbc4:	4917      	ldr	r1, [pc, #92]	; (800fc24 <netif_issue_reports+0x78>)
 800fbc6:	4818      	ldr	r0, [pc, #96]	; (800fc28 <netif_issue_reports+0x7c>)
 800fbc8:	f00a f8cc 	bl	8019d64 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbd2:	f003 0304 	and.w	r3, r3, #4
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d01e      	beq.n	800fc18 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fbe0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d017      	beq.n	800fc18 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fbe8:	78fb      	ldrb	r3, [r7, #3]
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d013      	beq.n	800fc1a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d00e      	beq.n	800fc1a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc02:	f003 0308 	and.w	r3, r3, #8
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d007      	beq.n	800fc1a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	3304      	adds	r3, #4
 800fc0e:	4619      	mov	r1, r3
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f008 f9b7 	bl	8017f84 <etharp_request>
 800fc16:	e000      	b.n	800fc1a <netif_issue_reports+0x6e>
    return;
 800fc18:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800fc1a:	3708      	adds	r7, #8
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}
 800fc20:	0801b294 	.word	0x0801b294
 800fc24:	0801b438 	.word	0x0801b438
 800fc28:	0801b2e4 	.word	0x0801b2e4

0800fc2c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b082      	sub	sp, #8
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d107      	bne.n	800fc4a <netif_set_down+0x1e>
 800fc3a:	4b12      	ldr	r3, [pc, #72]	; (800fc84 <netif_set_down+0x58>)
 800fc3c:	f240 329b 	movw	r2, #923	; 0x39b
 800fc40:	4911      	ldr	r1, [pc, #68]	; (800fc88 <netif_set_down+0x5c>)
 800fc42:	4812      	ldr	r0, [pc, #72]	; (800fc8c <netif_set_down+0x60>)
 800fc44:	f00a f88e 	bl	8019d64 <iprintf>
 800fc48:	e019      	b.n	800fc7e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc50:	f003 0301 	and.w	r3, r3, #1
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d012      	beq.n	800fc7e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc5e:	f023 0301 	bic.w	r3, r3, #1
 800fc62:	b2da      	uxtb	r2, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fc70:	f003 0308 	and.w	r3, r3, #8
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d002      	beq.n	800fc7e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800fc78:	6878      	ldr	r0, [r7, #4]
 800fc7a:	f007 fd41 	bl	8017700 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800fc7e:	3708      	adds	r7, #8
 800fc80:	46bd      	mov	sp, r7
 800fc82:	bd80      	pop	{r7, pc}
 800fc84:	0801b294 	.word	0x0801b294
 800fc88:	0801b45c 	.word	0x0801b45c
 800fc8c:	0801b2e4 	.word	0x0801b2e4

0800fc90 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800fc90:	b580      	push	{r7, lr}
 800fc92:	b082      	sub	sp, #8
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d107      	bne.n	800fcae <netif_set_link_up+0x1e>
 800fc9e:	4b13      	ldr	r3, [pc, #76]	; (800fcec <netif_set_link_up+0x5c>)
 800fca0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800fca4:	4912      	ldr	r1, [pc, #72]	; (800fcf0 <netif_set_link_up+0x60>)
 800fca6:	4813      	ldr	r0, [pc, #76]	; (800fcf4 <netif_set_link_up+0x64>)
 800fca8:	f00a f85c 	bl	8019d64 <iprintf>
 800fcac:	e01b      	b.n	800fce6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcb4:	f003 0304 	and.w	r3, r3, #4
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d114      	bne.n	800fce6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fcc2:	f043 0304 	orr.w	r3, r3, #4
 800fcc6:	b2da      	uxtb	r2, r3
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800fcce:	2103      	movs	r1, #3
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f7ff ff6b 	bl	800fbac <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	69db      	ldr	r3, [r3, #28]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d003      	beq.n	800fce6 <netif_set_link_up+0x56>
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	69db      	ldr	r3, [r3, #28]
 800fce2:	6878      	ldr	r0, [r7, #4]
 800fce4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fce6:	3708      	adds	r7, #8
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}
 800fcec:	0801b294 	.word	0x0801b294
 800fcf0:	0801b47c 	.word	0x0801b47c
 800fcf4:	0801b2e4 	.word	0x0801b2e4

0800fcf8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b082      	sub	sp, #8
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d107      	bne.n	800fd16 <netif_set_link_down+0x1e>
 800fd06:	4b11      	ldr	r3, [pc, #68]	; (800fd4c <netif_set_link_down+0x54>)
 800fd08:	f240 4206 	movw	r2, #1030	; 0x406
 800fd0c:	4910      	ldr	r1, [pc, #64]	; (800fd50 <netif_set_link_down+0x58>)
 800fd0e:	4811      	ldr	r0, [pc, #68]	; (800fd54 <netif_set_link_down+0x5c>)
 800fd10:	f00a f828 	bl	8019d64 <iprintf>
 800fd14:	e017      	b.n	800fd46 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd1c:	f003 0304 	and.w	r3, r3, #4
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d010      	beq.n	800fd46 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fd2a:	f023 0304 	bic.w	r3, r3, #4
 800fd2e:	b2da      	uxtb	r2, r3
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	69db      	ldr	r3, [r3, #28]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d003      	beq.n	800fd46 <netif_set_link_down+0x4e>
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	69db      	ldr	r3, [r3, #28]
 800fd42:	6878      	ldr	r0, [r7, #4]
 800fd44:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800fd46:	3708      	adds	r7, #8
 800fd48:	46bd      	mov	sp, r7
 800fd4a:	bd80      	pop	{r7, pc}
 800fd4c:	0801b294 	.word	0x0801b294
 800fd50:	0801b4a0 	.word	0x0801b4a0
 800fd54:	0801b2e4 	.word	0x0801b2e4

0800fd58 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800fd58:	b480      	push	{r7}
 800fd5a:	b083      	sub	sp, #12
 800fd5c:	af00      	add	r7, sp, #0
 800fd5e:	6078      	str	r0, [r7, #4]
 800fd60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	d002      	beq.n	800fd6e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	683a      	ldr	r2, [r7, #0]
 800fd6c:	61da      	str	r2, [r3, #28]
  }
}
 800fd6e:	bf00      	nop
 800fd70:	370c      	adds	r7, #12
 800fd72:	46bd      	mov	sp, r7
 800fd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd78:	4770      	bx	lr

0800fd7a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800fd7a:	b480      	push	{r7}
 800fd7c:	b085      	sub	sp, #20
 800fd7e:	af00      	add	r7, sp, #0
 800fd80:	60f8      	str	r0, [r7, #12]
 800fd82:	60b9      	str	r1, [r7, #8]
 800fd84:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800fd86:	f06f 030b 	mvn.w	r3, #11
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	3714      	adds	r7, #20
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr
	...

0800fd98 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800fd98:	b480      	push	{r7}
 800fd9a:	b085      	sub	sp, #20
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	4603      	mov	r3, r0
 800fda0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800fda2:	79fb      	ldrb	r3, [r7, #7]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d013      	beq.n	800fdd0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800fda8:	4b0d      	ldr	r3, [pc, #52]	; (800fde0 <netif_get_by_index+0x48>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	60fb      	str	r3, [r7, #12]
 800fdae:	e00c      	b.n	800fdca <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fdb6:	3301      	adds	r3, #1
 800fdb8:	b2db      	uxtb	r3, r3
 800fdba:	79fa      	ldrb	r2, [r7, #7]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d101      	bne.n	800fdc4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	e006      	b.n	800fdd2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	681b      	ldr	r3, [r3, #0]
 800fdc8:	60fb      	str	r3, [r7, #12]
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d1ef      	bne.n	800fdb0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800fdd0:	2300      	movs	r3, #0
}
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	3714      	adds	r7, #20
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr
 800fdde:	bf00      	nop
 800fde0:	2400788c 	.word	0x2400788c

0800fde4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800fdea:	f009 fe01 	bl	80199f0 <sys_arch_protect>
 800fdee:	6038      	str	r0, [r7, #0]
 800fdf0:	4b0d      	ldr	r3, [pc, #52]	; (800fe28 <pbuf_free_ooseq+0x44>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	701a      	strb	r2, [r3, #0]
 800fdf6:	6838      	ldr	r0, [r7, #0]
 800fdf8:	f009 fe08 	bl	8019a0c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fdfc:	4b0b      	ldr	r3, [pc, #44]	; (800fe2c <pbuf_free_ooseq+0x48>)
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	607b      	str	r3, [r7, #4]
 800fe02:	e00a      	b.n	800fe1a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d003      	beq.n	800fe14 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f002 fc21 	bl	8012654 <tcp_free_ooseq>
      return;
 800fe12:	e005      	b.n	800fe20 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	68db      	ldr	r3, [r3, #12]
 800fe18:	607b      	str	r3, [r7, #4]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d1f1      	bne.n	800fe04 <pbuf_free_ooseq+0x20>
    }
  }
}
 800fe20:	3708      	adds	r7, #8
 800fe22:	46bd      	mov	sp, r7
 800fe24:	bd80      	pop	{r7, pc}
 800fe26:	bf00      	nop
 800fe28:	24007894 	.word	0x24007894
 800fe2c:	2400789c 	.word	0x2400789c

0800fe30 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b082      	sub	sp, #8
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800fe38:	f7ff ffd4 	bl	800fde4 <pbuf_free_ooseq>
}
 800fe3c:	bf00      	nop
 800fe3e:	3708      	adds	r7, #8
 800fe40:	46bd      	mov	sp, r7
 800fe42:	bd80      	pop	{r7, pc}

0800fe44 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800fe44:	b580      	push	{r7, lr}
 800fe46:	b082      	sub	sp, #8
 800fe48:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800fe4a:	f009 fdd1 	bl	80199f0 <sys_arch_protect>
 800fe4e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800fe50:	4b0f      	ldr	r3, [pc, #60]	; (800fe90 <pbuf_pool_is_empty+0x4c>)
 800fe52:	781b      	ldrb	r3, [r3, #0]
 800fe54:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800fe56:	4b0e      	ldr	r3, [pc, #56]	; (800fe90 <pbuf_pool_is_empty+0x4c>)
 800fe58:	2201      	movs	r2, #1
 800fe5a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800fe5c:	6878      	ldr	r0, [r7, #4]
 800fe5e:	f009 fdd5 	bl	8019a0c <sys_arch_unprotect>

  if (!queued) {
 800fe62:	78fb      	ldrb	r3, [r7, #3]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d10f      	bne.n	800fe88 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800fe68:	2100      	movs	r1, #0
 800fe6a:	480a      	ldr	r0, [pc, #40]	; (800fe94 <pbuf_pool_is_empty+0x50>)
 800fe6c:	f7fe fdee 	bl	800ea4c <tcpip_try_callback>
 800fe70:	4603      	mov	r3, r0
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d008      	beq.n	800fe88 <pbuf_pool_is_empty+0x44>
 800fe76:	f009 fdbb 	bl	80199f0 <sys_arch_protect>
 800fe7a:	6078      	str	r0, [r7, #4]
 800fe7c:	4b04      	ldr	r3, [pc, #16]	; (800fe90 <pbuf_pool_is_empty+0x4c>)
 800fe7e:	2200      	movs	r2, #0
 800fe80:	701a      	strb	r2, [r3, #0]
 800fe82:	6878      	ldr	r0, [r7, #4]
 800fe84:	f009 fdc2 	bl	8019a0c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800fe88:	bf00      	nop
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}
 800fe90:	24007894 	.word	0x24007894
 800fe94:	0800fe31 	.word	0x0800fe31

0800fe98 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	4611      	mov	r1, r2
 800fea4:	461a      	mov	r2, r3
 800fea6:	460b      	mov	r3, r1
 800fea8:	80fb      	strh	r3, [r7, #6]
 800feaa:	4613      	mov	r3, r2
 800feac:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	2200      	movs	r2, #0
 800feb2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	68ba      	ldr	r2, [r7, #8]
 800feb8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	88fa      	ldrh	r2, [r7, #6]
 800febe:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800fec0:	68fb      	ldr	r3, [r7, #12]
 800fec2:	88ba      	ldrh	r2, [r7, #4]
 800fec4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800fec6:	8b3b      	ldrh	r3, [r7, #24]
 800fec8:	b2da      	uxtb	r2, r3
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	7f3a      	ldrb	r2, [r7, #28]
 800fed2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2201      	movs	r2, #1
 800fed8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2200      	movs	r2, #0
 800fede:	73da      	strb	r2, [r3, #15]
}
 800fee0:	bf00      	nop
 800fee2:	3714      	adds	r7, #20
 800fee4:	46bd      	mov	sp, r7
 800fee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feea:	4770      	bx	lr

0800feec <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b08c      	sub	sp, #48	; 0x30
 800fef0:	af02      	add	r7, sp, #8
 800fef2:	4603      	mov	r3, r0
 800fef4:	71fb      	strb	r3, [r7, #7]
 800fef6:	460b      	mov	r3, r1
 800fef8:	80bb      	strh	r3, [r7, #4]
 800fefa:	4613      	mov	r3, r2
 800fefc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800fefe:	79fb      	ldrb	r3, [r7, #7]
 800ff00:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ff02:	887b      	ldrh	r3, [r7, #2]
 800ff04:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ff08:	d07f      	beq.n	801000a <pbuf_alloc+0x11e>
 800ff0a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ff0e:	f300 80c8 	bgt.w	80100a2 <pbuf_alloc+0x1b6>
 800ff12:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ff16:	d010      	beq.n	800ff3a <pbuf_alloc+0x4e>
 800ff18:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ff1c:	f300 80c1 	bgt.w	80100a2 <pbuf_alloc+0x1b6>
 800ff20:	2b01      	cmp	r3, #1
 800ff22:	d002      	beq.n	800ff2a <pbuf_alloc+0x3e>
 800ff24:	2b41      	cmp	r3, #65	; 0x41
 800ff26:	f040 80bc 	bne.w	80100a2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ff2a:	887a      	ldrh	r2, [r7, #2]
 800ff2c:	88bb      	ldrh	r3, [r7, #4]
 800ff2e:	4619      	mov	r1, r3
 800ff30:	2000      	movs	r0, #0
 800ff32:	f000 f8d1 	bl	80100d8 <pbuf_alloc_reference>
 800ff36:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ff38:	e0bd      	b.n	80100b6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ff42:	88bb      	ldrh	r3, [r7, #4]
 800ff44:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ff46:	200c      	movs	r0, #12
 800ff48:	f7ff fb9a 	bl	800f680 <memp_malloc>
 800ff4c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800ff4e:	693b      	ldr	r3, [r7, #16]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d109      	bne.n	800ff68 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800ff54:	f7ff ff76 	bl	800fe44 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d002      	beq.n	800ff64 <pbuf_alloc+0x78>
            pbuf_free(p);
 800ff5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff60:	f000 faa8 	bl	80104b4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800ff64:	2300      	movs	r3, #0
 800ff66:	e0a7      	b.n	80100b8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800ff68:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff6a:	3303      	adds	r3, #3
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	f023 0303 	bic.w	r3, r3, #3
 800ff72:	b29b      	uxth	r3, r3
 800ff74:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	8b7a      	ldrh	r2, [r7, #26]
 800ff7c:	4293      	cmp	r3, r2
 800ff7e:	bf28      	it	cs
 800ff80:	4613      	movcs	r3, r2
 800ff82:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ff84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ff86:	3310      	adds	r3, #16
 800ff88:	693a      	ldr	r2, [r7, #16]
 800ff8a:	4413      	add	r3, r2
 800ff8c:	3303      	adds	r3, #3
 800ff8e:	f023 0303 	bic.w	r3, r3, #3
 800ff92:	4618      	mov	r0, r3
 800ff94:	89f9      	ldrh	r1, [r7, #14]
 800ff96:	8b7a      	ldrh	r2, [r7, #26]
 800ff98:	2300      	movs	r3, #0
 800ff9a:	9301      	str	r3, [sp, #4]
 800ff9c:	887b      	ldrh	r3, [r7, #2]
 800ff9e:	9300      	str	r3, [sp, #0]
 800ffa0:	460b      	mov	r3, r1
 800ffa2:	4601      	mov	r1, r0
 800ffa4:	6938      	ldr	r0, [r7, #16]
 800ffa6:	f7ff ff77 	bl	800fe98 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ffaa:	693b      	ldr	r3, [r7, #16]
 800ffac:	685b      	ldr	r3, [r3, #4]
 800ffae:	f003 0303 	and.w	r3, r3, #3
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d006      	beq.n	800ffc4 <pbuf_alloc+0xd8>
 800ffb6:	4b42      	ldr	r3, [pc, #264]	; (80100c0 <pbuf_alloc+0x1d4>)
 800ffb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ffbc:	4941      	ldr	r1, [pc, #260]	; (80100c4 <pbuf_alloc+0x1d8>)
 800ffbe:	4842      	ldr	r0, [pc, #264]	; (80100c8 <pbuf_alloc+0x1dc>)
 800ffc0:	f009 fed0 	bl	8019d64 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ffc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ffc6:	3303      	adds	r3, #3
 800ffc8:	f023 0303 	bic.w	r3, r3, #3
 800ffcc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ffd0:	d106      	bne.n	800ffe0 <pbuf_alloc+0xf4>
 800ffd2:	4b3b      	ldr	r3, [pc, #236]	; (80100c0 <pbuf_alloc+0x1d4>)
 800ffd4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ffd8:	493c      	ldr	r1, [pc, #240]	; (80100cc <pbuf_alloc+0x1e0>)
 800ffda:	483b      	ldr	r0, [pc, #236]	; (80100c8 <pbuf_alloc+0x1dc>)
 800ffdc:	f009 fec2 	bl	8019d64 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ffe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d102      	bne.n	800ffec <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	627b      	str	r3, [r7, #36]	; 0x24
 800ffea:	e002      	b.n	800fff2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ffec:	69fb      	ldr	r3, [r7, #28]
 800ffee:	693a      	ldr	r2, [r7, #16]
 800fff0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800fff6:	8b7a      	ldrh	r2, [r7, #26]
 800fff8:	89fb      	ldrh	r3, [r7, #14]
 800fffa:	1ad3      	subs	r3, r2, r3
 800fffc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800fffe:	2300      	movs	r3, #0
 8010000:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010002:	8b7b      	ldrh	r3, [r7, #26]
 8010004:	2b00      	cmp	r3, #0
 8010006:	d19e      	bne.n	800ff46 <pbuf_alloc+0x5a>
      break;
 8010008:	e055      	b.n	80100b6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801000a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801000c:	3303      	adds	r3, #3
 801000e:	b29b      	uxth	r3, r3
 8010010:	f023 0303 	bic.w	r3, r3, #3
 8010014:	b29a      	uxth	r2, r3
 8010016:	88bb      	ldrh	r3, [r7, #4]
 8010018:	3303      	adds	r3, #3
 801001a:	b29b      	uxth	r3, r3
 801001c:	f023 0303 	bic.w	r3, r3, #3
 8010020:	b29b      	uxth	r3, r3
 8010022:	4413      	add	r3, r2
 8010024:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010026:	8b3b      	ldrh	r3, [r7, #24]
 8010028:	3310      	adds	r3, #16
 801002a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801002c:	8b3a      	ldrh	r2, [r7, #24]
 801002e:	88bb      	ldrh	r3, [r7, #4]
 8010030:	3303      	adds	r3, #3
 8010032:	f023 0303 	bic.w	r3, r3, #3
 8010036:	429a      	cmp	r2, r3
 8010038:	d306      	bcc.n	8010048 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801003a:	8afa      	ldrh	r2, [r7, #22]
 801003c:	88bb      	ldrh	r3, [r7, #4]
 801003e:	3303      	adds	r3, #3
 8010040:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010044:	429a      	cmp	r2, r3
 8010046:	d201      	bcs.n	801004c <pbuf_alloc+0x160>
        return NULL;
 8010048:	2300      	movs	r3, #0
 801004a:	e035      	b.n	80100b8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801004c:	8afb      	ldrh	r3, [r7, #22]
 801004e:	4618      	mov	r0, r3
 8010050:	f7ff f972 	bl	800f338 <mem_malloc>
 8010054:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <pbuf_alloc+0x174>
        return NULL;
 801005c:	2300      	movs	r3, #0
 801005e:	e02b      	b.n	80100b8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010062:	3310      	adds	r3, #16
 8010064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010066:	4413      	add	r3, r2
 8010068:	3303      	adds	r3, #3
 801006a:	f023 0303 	bic.w	r3, r3, #3
 801006e:	4618      	mov	r0, r3
 8010070:	88b9      	ldrh	r1, [r7, #4]
 8010072:	88ba      	ldrh	r2, [r7, #4]
 8010074:	2300      	movs	r3, #0
 8010076:	9301      	str	r3, [sp, #4]
 8010078:	887b      	ldrh	r3, [r7, #2]
 801007a:	9300      	str	r3, [sp, #0]
 801007c:	460b      	mov	r3, r1
 801007e:	4601      	mov	r1, r0
 8010080:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010082:	f7ff ff09 	bl	800fe98 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f003 0303 	and.w	r3, r3, #3
 801008e:	2b00      	cmp	r3, #0
 8010090:	d010      	beq.n	80100b4 <pbuf_alloc+0x1c8>
 8010092:	4b0b      	ldr	r3, [pc, #44]	; (80100c0 <pbuf_alloc+0x1d4>)
 8010094:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010098:	490d      	ldr	r1, [pc, #52]	; (80100d0 <pbuf_alloc+0x1e4>)
 801009a:	480b      	ldr	r0, [pc, #44]	; (80100c8 <pbuf_alloc+0x1dc>)
 801009c:	f009 fe62 	bl	8019d64 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80100a0:	e008      	b.n	80100b4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80100a2:	4b07      	ldr	r3, [pc, #28]	; (80100c0 <pbuf_alloc+0x1d4>)
 80100a4:	f240 1227 	movw	r2, #295	; 0x127
 80100a8:	490a      	ldr	r1, [pc, #40]	; (80100d4 <pbuf_alloc+0x1e8>)
 80100aa:	4807      	ldr	r0, [pc, #28]	; (80100c8 <pbuf_alloc+0x1dc>)
 80100ac:	f009 fe5a 	bl	8019d64 <iprintf>
      return NULL;
 80100b0:	2300      	movs	r3, #0
 80100b2:	e001      	b.n	80100b8 <pbuf_alloc+0x1cc>
      break;
 80100b4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80100b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3728      	adds	r7, #40	; 0x28
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}
 80100c0:	0801b4c4 	.word	0x0801b4c4
 80100c4:	0801b4f4 	.word	0x0801b4f4
 80100c8:	0801b524 	.word	0x0801b524
 80100cc:	0801b54c 	.word	0x0801b54c
 80100d0:	0801b580 	.word	0x0801b580
 80100d4:	0801b5ac 	.word	0x0801b5ac

080100d8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b086      	sub	sp, #24
 80100dc:	af02      	add	r7, sp, #8
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	460b      	mov	r3, r1
 80100e2:	807b      	strh	r3, [r7, #2]
 80100e4:	4613      	mov	r3, r2
 80100e6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80100e8:	883b      	ldrh	r3, [r7, #0]
 80100ea:	2b41      	cmp	r3, #65	; 0x41
 80100ec:	d009      	beq.n	8010102 <pbuf_alloc_reference+0x2a>
 80100ee:	883b      	ldrh	r3, [r7, #0]
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	d006      	beq.n	8010102 <pbuf_alloc_reference+0x2a>
 80100f4:	4b0f      	ldr	r3, [pc, #60]	; (8010134 <pbuf_alloc_reference+0x5c>)
 80100f6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80100fa:	490f      	ldr	r1, [pc, #60]	; (8010138 <pbuf_alloc_reference+0x60>)
 80100fc:	480f      	ldr	r0, [pc, #60]	; (801013c <pbuf_alloc_reference+0x64>)
 80100fe:	f009 fe31 	bl	8019d64 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010102:	200b      	movs	r0, #11
 8010104:	f7ff fabc 	bl	800f680 <memp_malloc>
 8010108:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d101      	bne.n	8010114 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010110:	2300      	movs	r3, #0
 8010112:	e00b      	b.n	801012c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010114:	8879      	ldrh	r1, [r7, #2]
 8010116:	887a      	ldrh	r2, [r7, #2]
 8010118:	2300      	movs	r3, #0
 801011a:	9301      	str	r3, [sp, #4]
 801011c:	883b      	ldrh	r3, [r7, #0]
 801011e:	9300      	str	r3, [sp, #0]
 8010120:	460b      	mov	r3, r1
 8010122:	6879      	ldr	r1, [r7, #4]
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f7ff feb7 	bl	800fe98 <pbuf_init_alloced_pbuf>
  return p;
 801012a:	68fb      	ldr	r3, [r7, #12]
}
 801012c:	4618      	mov	r0, r3
 801012e:	3710      	adds	r7, #16
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	0801b4c4 	.word	0x0801b4c4
 8010138:	0801b5c8 	.word	0x0801b5c8
 801013c:	0801b524 	.word	0x0801b524

08010140 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	b088      	sub	sp, #32
 8010144:	af02      	add	r7, sp, #8
 8010146:	607b      	str	r3, [r7, #4]
 8010148:	4603      	mov	r3, r0
 801014a:	73fb      	strb	r3, [r7, #15]
 801014c:	460b      	mov	r3, r1
 801014e:	81bb      	strh	r3, [r7, #12]
 8010150:	4613      	mov	r3, r2
 8010152:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010154:	7bfb      	ldrb	r3, [r7, #15]
 8010156:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010158:	8a7b      	ldrh	r3, [r7, #18]
 801015a:	3303      	adds	r3, #3
 801015c:	f023 0203 	bic.w	r2, r3, #3
 8010160:	89bb      	ldrh	r3, [r7, #12]
 8010162:	441a      	add	r2, r3
 8010164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010166:	429a      	cmp	r2, r3
 8010168:	d901      	bls.n	801016e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801016a:	2300      	movs	r3, #0
 801016c:	e018      	b.n	80101a0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801016e:	6a3b      	ldr	r3, [r7, #32]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d007      	beq.n	8010184 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010174:	8a7b      	ldrh	r3, [r7, #18]
 8010176:	3303      	adds	r3, #3
 8010178:	f023 0303 	bic.w	r3, r3, #3
 801017c:	6a3a      	ldr	r2, [r7, #32]
 801017e:	4413      	add	r3, r2
 8010180:	617b      	str	r3, [r7, #20]
 8010182:	e001      	b.n	8010188 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010184:	2300      	movs	r3, #0
 8010186:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	89b9      	ldrh	r1, [r7, #12]
 801018c:	89ba      	ldrh	r2, [r7, #12]
 801018e:	2302      	movs	r3, #2
 8010190:	9301      	str	r3, [sp, #4]
 8010192:	897b      	ldrh	r3, [r7, #10]
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	460b      	mov	r3, r1
 8010198:	6979      	ldr	r1, [r7, #20]
 801019a:	f7ff fe7d 	bl	800fe98 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801019e:	687b      	ldr	r3, [r7, #4]
}
 80101a0:	4618      	mov	r0, r3
 80101a2:	3718      	adds	r7, #24
 80101a4:	46bd      	mov	sp, r7
 80101a6:	bd80      	pop	{r7, pc}

080101a8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80101a8:	b580      	push	{r7, lr}
 80101aa:	b084      	sub	sp, #16
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
 80101b0:	460b      	mov	r3, r1
 80101b2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d106      	bne.n	80101c8 <pbuf_realloc+0x20>
 80101ba:	4b3a      	ldr	r3, [pc, #232]	; (80102a4 <pbuf_realloc+0xfc>)
 80101bc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80101c0:	4939      	ldr	r1, [pc, #228]	; (80102a8 <pbuf_realloc+0x100>)
 80101c2:	483a      	ldr	r0, [pc, #232]	; (80102ac <pbuf_realloc+0x104>)
 80101c4:	f009 fdce 	bl	8019d64 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	891b      	ldrh	r3, [r3, #8]
 80101cc:	887a      	ldrh	r2, [r7, #2]
 80101ce:	429a      	cmp	r2, r3
 80101d0:	d263      	bcs.n	801029a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	891a      	ldrh	r2, [r3, #8]
 80101d6:	887b      	ldrh	r3, [r7, #2]
 80101d8:	1ad3      	subs	r3, r2, r3
 80101da:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80101dc:	887b      	ldrh	r3, [r7, #2]
 80101de:	817b      	strh	r3, [r7, #10]
  q = p;
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80101e4:	e018      	b.n	8010218 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	895b      	ldrh	r3, [r3, #10]
 80101ea:	897a      	ldrh	r2, [r7, #10]
 80101ec:	1ad3      	subs	r3, r2, r3
 80101ee:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	891a      	ldrh	r2, [r3, #8]
 80101f4:	893b      	ldrh	r3, [r7, #8]
 80101f6:	1ad3      	subs	r3, r2, r3
 80101f8:	b29a      	uxth	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d106      	bne.n	8010218 <pbuf_realloc+0x70>
 801020a:	4b26      	ldr	r3, [pc, #152]	; (80102a4 <pbuf_realloc+0xfc>)
 801020c:	f240 12af 	movw	r2, #431	; 0x1af
 8010210:	4927      	ldr	r1, [pc, #156]	; (80102b0 <pbuf_realloc+0x108>)
 8010212:	4826      	ldr	r0, [pc, #152]	; (80102ac <pbuf_realloc+0x104>)
 8010214:	f009 fda6 	bl	8019d64 <iprintf>
  while (rem_len > q->len) {
 8010218:	68fb      	ldr	r3, [r7, #12]
 801021a:	895b      	ldrh	r3, [r3, #10]
 801021c:	897a      	ldrh	r2, [r7, #10]
 801021e:	429a      	cmp	r2, r3
 8010220:	d8e1      	bhi.n	80101e6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	7b1b      	ldrb	r3, [r3, #12]
 8010226:	f003 030f 	and.w	r3, r3, #15
 801022a:	2b00      	cmp	r3, #0
 801022c:	d121      	bne.n	8010272 <pbuf_realloc+0xca>
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	895b      	ldrh	r3, [r3, #10]
 8010232:	897a      	ldrh	r2, [r7, #10]
 8010234:	429a      	cmp	r2, r3
 8010236:	d01c      	beq.n	8010272 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	7b5b      	ldrb	r3, [r3, #13]
 801023c:	f003 0302 	and.w	r3, r3, #2
 8010240:	2b00      	cmp	r3, #0
 8010242:	d116      	bne.n	8010272 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010244:	68fb      	ldr	r3, [r7, #12]
 8010246:	685a      	ldr	r2, [r3, #4]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	1ad3      	subs	r3, r2, r3
 801024c:	b29a      	uxth	r2, r3
 801024e:	897b      	ldrh	r3, [r7, #10]
 8010250:	4413      	add	r3, r2
 8010252:	b29b      	uxth	r3, r3
 8010254:	4619      	mov	r1, r3
 8010256:	68f8      	ldr	r0, [r7, #12]
 8010258:	f7fe ff64 	bl	800f124 <mem_trim>
 801025c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d106      	bne.n	8010272 <pbuf_realloc+0xca>
 8010264:	4b0f      	ldr	r3, [pc, #60]	; (80102a4 <pbuf_realloc+0xfc>)
 8010266:	f240 12bd 	movw	r2, #445	; 0x1bd
 801026a:	4912      	ldr	r1, [pc, #72]	; (80102b4 <pbuf_realloc+0x10c>)
 801026c:	480f      	ldr	r0, [pc, #60]	; (80102ac <pbuf_realloc+0x104>)
 801026e:	f009 fd79 	bl	8019d64 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010272:	68fb      	ldr	r3, [r7, #12]
 8010274:	897a      	ldrh	r2, [r7, #10]
 8010276:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	895a      	ldrh	r2, [r3, #10]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d004      	beq.n	8010292 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	4618      	mov	r0, r3
 801028e:	f000 f911 	bl	80104b4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2200      	movs	r2, #0
 8010296:	601a      	str	r2, [r3, #0]
 8010298:	e000      	b.n	801029c <pbuf_realloc+0xf4>
    return;
 801029a:	bf00      	nop

}
 801029c:	3710      	adds	r7, #16
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	0801b4c4 	.word	0x0801b4c4
 80102a8:	0801b5dc 	.word	0x0801b5dc
 80102ac:	0801b524 	.word	0x0801b524
 80102b0:	0801b5f4 	.word	0x0801b5f4
 80102b4:	0801b60c 	.word	0x0801b60c

080102b8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80102b8:	b580      	push	{r7, lr}
 80102ba:	b086      	sub	sp, #24
 80102bc:	af00      	add	r7, sp, #0
 80102be:	60f8      	str	r0, [r7, #12]
 80102c0:	60b9      	str	r1, [r7, #8]
 80102c2:	4613      	mov	r3, r2
 80102c4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80102c6:	68fb      	ldr	r3, [r7, #12]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d106      	bne.n	80102da <pbuf_add_header_impl+0x22>
 80102cc:	4b2b      	ldr	r3, [pc, #172]	; (801037c <pbuf_add_header_impl+0xc4>)
 80102ce:	f240 12df 	movw	r2, #479	; 0x1df
 80102d2:	492b      	ldr	r1, [pc, #172]	; (8010380 <pbuf_add_header_impl+0xc8>)
 80102d4:	482b      	ldr	r0, [pc, #172]	; (8010384 <pbuf_add_header_impl+0xcc>)
 80102d6:	f009 fd45 	bl	8019d64 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d003      	beq.n	80102e8 <pbuf_add_header_impl+0x30>
 80102e0:	68bb      	ldr	r3, [r7, #8]
 80102e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80102e6:	d301      	bcc.n	80102ec <pbuf_add_header_impl+0x34>
    return 1;
 80102e8:	2301      	movs	r3, #1
 80102ea:	e043      	b.n	8010374 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80102ec:	68bb      	ldr	r3, [r7, #8]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d101      	bne.n	80102f6 <pbuf_add_header_impl+0x3e>
    return 0;
 80102f2:	2300      	movs	r3, #0
 80102f4:	e03e      	b.n	8010374 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80102f6:	68bb      	ldr	r3, [r7, #8]
 80102f8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80102fa:	68fb      	ldr	r3, [r7, #12]
 80102fc:	891a      	ldrh	r2, [r3, #8]
 80102fe:	8a7b      	ldrh	r3, [r7, #18]
 8010300:	4413      	add	r3, r2
 8010302:	b29b      	uxth	r3, r3
 8010304:	8a7a      	ldrh	r2, [r7, #18]
 8010306:	429a      	cmp	r2, r3
 8010308:	d901      	bls.n	801030e <pbuf_add_header_impl+0x56>
    return 1;
 801030a:	2301      	movs	r3, #1
 801030c:	e032      	b.n	8010374 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	7b1b      	ldrb	r3, [r3, #12]
 8010312:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010314:	8a3b      	ldrh	r3, [r7, #16]
 8010316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801031a:	2b00      	cmp	r3, #0
 801031c:	d00c      	beq.n	8010338 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	685a      	ldr	r2, [r3, #4]
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	425b      	negs	r3, r3
 8010326:	4413      	add	r3, r2
 8010328:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801032a:	68fb      	ldr	r3, [r7, #12]
 801032c:	3310      	adds	r3, #16
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	429a      	cmp	r2, r3
 8010332:	d20d      	bcs.n	8010350 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010334:	2301      	movs	r3, #1
 8010336:	e01d      	b.n	8010374 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010338:	79fb      	ldrb	r3, [r7, #7]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d006      	beq.n	801034c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	425b      	negs	r3, r3
 8010346:	4413      	add	r3, r2
 8010348:	617b      	str	r3, [r7, #20]
 801034a:	e001      	b.n	8010350 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801034c:	2301      	movs	r3, #1
 801034e:	e011      	b.n	8010374 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	697a      	ldr	r2, [r7, #20]
 8010354:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	895a      	ldrh	r2, [r3, #10]
 801035a:	8a7b      	ldrh	r3, [r7, #18]
 801035c:	4413      	add	r3, r2
 801035e:	b29a      	uxth	r2, r3
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	891a      	ldrh	r2, [r3, #8]
 8010368:	8a7b      	ldrh	r3, [r7, #18]
 801036a:	4413      	add	r3, r2
 801036c:	b29a      	uxth	r2, r3
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	811a      	strh	r2, [r3, #8]


  return 0;
 8010372:	2300      	movs	r3, #0
}
 8010374:	4618      	mov	r0, r3
 8010376:	3718      	adds	r7, #24
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}
 801037c:	0801b4c4 	.word	0x0801b4c4
 8010380:	0801b628 	.word	0x0801b628
 8010384:	0801b524 	.word	0x0801b524

08010388 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b082      	sub	sp, #8
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
 8010390:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010392:	2200      	movs	r2, #0
 8010394:	6839      	ldr	r1, [r7, #0]
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f7ff ff8e 	bl	80102b8 <pbuf_add_header_impl>
 801039c:	4603      	mov	r3, r0
}
 801039e:	4618      	mov	r0, r3
 80103a0:	3708      	adds	r7, #8
 80103a2:	46bd      	mov	sp, r7
 80103a4:	bd80      	pop	{r7, pc}
	...

080103a8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80103a8:	b580      	push	{r7, lr}
 80103aa:	b084      	sub	sp, #16
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
 80103b0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d106      	bne.n	80103c6 <pbuf_remove_header+0x1e>
 80103b8:	4b20      	ldr	r3, [pc, #128]	; (801043c <pbuf_remove_header+0x94>)
 80103ba:	f240 224b 	movw	r2, #587	; 0x24b
 80103be:	4920      	ldr	r1, [pc, #128]	; (8010440 <pbuf_remove_header+0x98>)
 80103c0:	4820      	ldr	r0, [pc, #128]	; (8010444 <pbuf_remove_header+0x9c>)
 80103c2:	f009 fccf 	bl	8019d64 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80103c6:	687b      	ldr	r3, [r7, #4]
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d003      	beq.n	80103d4 <pbuf_remove_header+0x2c>
 80103cc:	683b      	ldr	r3, [r7, #0]
 80103ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103d2:	d301      	bcc.n	80103d8 <pbuf_remove_header+0x30>
    return 1;
 80103d4:	2301      	movs	r3, #1
 80103d6:	e02c      	b.n	8010432 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80103d8:	683b      	ldr	r3, [r7, #0]
 80103da:	2b00      	cmp	r3, #0
 80103dc:	d101      	bne.n	80103e2 <pbuf_remove_header+0x3a>
    return 0;
 80103de:	2300      	movs	r3, #0
 80103e0:	e027      	b.n	8010432 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	895b      	ldrh	r3, [r3, #10]
 80103ea:	89fa      	ldrh	r2, [r7, #14]
 80103ec:	429a      	cmp	r2, r3
 80103ee:	d908      	bls.n	8010402 <pbuf_remove_header+0x5a>
 80103f0:	4b12      	ldr	r3, [pc, #72]	; (801043c <pbuf_remove_header+0x94>)
 80103f2:	f240 2255 	movw	r2, #597	; 0x255
 80103f6:	4914      	ldr	r1, [pc, #80]	; (8010448 <pbuf_remove_header+0xa0>)
 80103f8:	4812      	ldr	r0, [pc, #72]	; (8010444 <pbuf_remove_header+0x9c>)
 80103fa:	f009 fcb3 	bl	8019d64 <iprintf>
 80103fe:	2301      	movs	r3, #1
 8010400:	e017      	b.n	8010432 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	685a      	ldr	r2, [r3, #4]
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	441a      	add	r2, r3
 8010410:	687b      	ldr	r3, [r7, #4]
 8010412:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	895a      	ldrh	r2, [r3, #10]
 8010418:	89fb      	ldrh	r3, [r7, #14]
 801041a:	1ad3      	subs	r3, r2, r3
 801041c:	b29a      	uxth	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	891a      	ldrh	r2, [r3, #8]
 8010426:	89fb      	ldrh	r3, [r7, #14]
 8010428:	1ad3      	subs	r3, r2, r3
 801042a:	b29a      	uxth	r2, r3
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010430:	2300      	movs	r3, #0
}
 8010432:	4618      	mov	r0, r3
 8010434:	3710      	adds	r7, #16
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	0801b4c4 	.word	0x0801b4c4
 8010440:	0801b628 	.word	0x0801b628
 8010444:	0801b524 	.word	0x0801b524
 8010448:	0801b634 	.word	0x0801b634

0801044c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	460b      	mov	r3, r1
 8010456:	807b      	strh	r3, [r7, #2]
 8010458:	4613      	mov	r3, r2
 801045a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801045c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010460:	2b00      	cmp	r3, #0
 8010462:	da08      	bge.n	8010476 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010464:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010468:	425b      	negs	r3, r3
 801046a:	4619      	mov	r1, r3
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f7ff ff9b 	bl	80103a8 <pbuf_remove_header>
 8010472:	4603      	mov	r3, r0
 8010474:	e007      	b.n	8010486 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010476:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801047a:	787a      	ldrb	r2, [r7, #1]
 801047c:	4619      	mov	r1, r3
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	f7ff ff1a 	bl	80102b8 <pbuf_add_header_impl>
 8010484:	4603      	mov	r3, r0
  }
}
 8010486:	4618      	mov	r0, r3
 8010488:	3708      	adds	r7, #8
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}

0801048e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801048e:	b580      	push	{r7, lr}
 8010490:	b082      	sub	sp, #8
 8010492:	af00      	add	r7, sp, #0
 8010494:	6078      	str	r0, [r7, #4]
 8010496:	460b      	mov	r3, r1
 8010498:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801049a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801049e:	2201      	movs	r2, #1
 80104a0:	4619      	mov	r1, r3
 80104a2:	6878      	ldr	r0, [r7, #4]
 80104a4:	f7ff ffd2 	bl	801044c <pbuf_header_impl>
 80104a8:	4603      	mov	r3, r0
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3708      	adds	r7, #8
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}
	...

080104b4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80104b4:	b580      	push	{r7, lr}
 80104b6:	b088      	sub	sp, #32
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10b      	bne.n	80104da <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d106      	bne.n	80104d6 <pbuf_free+0x22>
 80104c8:	4b3b      	ldr	r3, [pc, #236]	; (80105b8 <pbuf_free+0x104>)
 80104ca:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80104ce:	493b      	ldr	r1, [pc, #236]	; (80105bc <pbuf_free+0x108>)
 80104d0:	483b      	ldr	r0, [pc, #236]	; (80105c0 <pbuf_free+0x10c>)
 80104d2:	f009 fc47 	bl	8019d64 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80104d6:	2300      	movs	r3, #0
 80104d8:	e069      	b.n	80105ae <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80104da:	2300      	movs	r3, #0
 80104dc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80104de:	e062      	b.n	80105a6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80104e0:	f009 fa86 	bl	80199f0 <sys_arch_protect>
 80104e4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	7b9b      	ldrb	r3, [r3, #14]
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d106      	bne.n	80104fc <pbuf_free+0x48>
 80104ee:	4b32      	ldr	r3, [pc, #200]	; (80105b8 <pbuf_free+0x104>)
 80104f0:	f240 22f1 	movw	r2, #753	; 0x2f1
 80104f4:	4933      	ldr	r1, [pc, #204]	; (80105c4 <pbuf_free+0x110>)
 80104f6:	4832      	ldr	r0, [pc, #200]	; (80105c0 <pbuf_free+0x10c>)
 80104f8:	f009 fc34 	bl	8019d64 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	7b9b      	ldrb	r3, [r3, #14]
 8010500:	3b01      	subs	r3, #1
 8010502:	b2da      	uxtb	r2, r3
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	739a      	strb	r2, [r3, #14]
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	7b9b      	ldrb	r3, [r3, #14]
 801050c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801050e:	69b8      	ldr	r0, [r7, #24]
 8010510:	f009 fa7c 	bl	8019a0c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010514:	7dfb      	ldrb	r3, [r7, #23]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d143      	bne.n	80105a2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	7b1b      	ldrb	r3, [r3, #12]
 8010524:	f003 030f 	and.w	r3, r3, #15
 8010528:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	7b5b      	ldrb	r3, [r3, #13]
 801052e:	f003 0302 	and.w	r3, r3, #2
 8010532:	2b00      	cmp	r3, #0
 8010534:	d011      	beq.n	801055a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801053a:	68bb      	ldr	r3, [r7, #8]
 801053c:	691b      	ldr	r3, [r3, #16]
 801053e:	2b00      	cmp	r3, #0
 8010540:	d106      	bne.n	8010550 <pbuf_free+0x9c>
 8010542:	4b1d      	ldr	r3, [pc, #116]	; (80105b8 <pbuf_free+0x104>)
 8010544:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010548:	491f      	ldr	r1, [pc, #124]	; (80105c8 <pbuf_free+0x114>)
 801054a:	481d      	ldr	r0, [pc, #116]	; (80105c0 <pbuf_free+0x10c>)
 801054c:	f009 fc0a 	bl	8019d64 <iprintf>
        pc->custom_free_function(p);
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	691b      	ldr	r3, [r3, #16]
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	4798      	blx	r3
 8010558:	e01d      	b.n	8010596 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801055a:	7bfb      	ldrb	r3, [r7, #15]
 801055c:	2b02      	cmp	r3, #2
 801055e:	d104      	bne.n	801056a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010560:	6879      	ldr	r1, [r7, #4]
 8010562:	200c      	movs	r0, #12
 8010564:	f7ff f902 	bl	800f76c <memp_free>
 8010568:	e015      	b.n	8010596 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801056a:	7bfb      	ldrb	r3, [r7, #15]
 801056c:	2b01      	cmp	r3, #1
 801056e:	d104      	bne.n	801057a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010570:	6879      	ldr	r1, [r7, #4]
 8010572:	200b      	movs	r0, #11
 8010574:	f7ff f8fa 	bl	800f76c <memp_free>
 8010578:	e00d      	b.n	8010596 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801057a:	7bfb      	ldrb	r3, [r7, #15]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d103      	bne.n	8010588 <pbuf_free+0xd4>
          mem_free(p);
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7fe fd3f 	bl	800f004 <mem_free>
 8010586:	e006      	b.n	8010596 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010588:	4b0b      	ldr	r3, [pc, #44]	; (80105b8 <pbuf_free+0x104>)
 801058a:	f240 320f 	movw	r2, #783	; 0x30f
 801058e:	490f      	ldr	r1, [pc, #60]	; (80105cc <pbuf_free+0x118>)
 8010590:	480b      	ldr	r0, [pc, #44]	; (80105c0 <pbuf_free+0x10c>)
 8010592:	f009 fbe7 	bl	8019d64 <iprintf>
        }
      }
      count++;
 8010596:	7ffb      	ldrb	r3, [r7, #31]
 8010598:	3301      	adds	r3, #1
 801059a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801059c:	693b      	ldr	r3, [r7, #16]
 801059e:	607b      	str	r3, [r7, #4]
 80105a0:	e001      	b.n	80105a6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80105a2:	2300      	movs	r3, #0
 80105a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	d199      	bne.n	80104e0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80105ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80105ae:	4618      	mov	r0, r3
 80105b0:	3720      	adds	r7, #32
 80105b2:	46bd      	mov	sp, r7
 80105b4:	bd80      	pop	{r7, pc}
 80105b6:	bf00      	nop
 80105b8:	0801b4c4 	.word	0x0801b4c4
 80105bc:	0801b628 	.word	0x0801b628
 80105c0:	0801b524 	.word	0x0801b524
 80105c4:	0801b654 	.word	0x0801b654
 80105c8:	0801b66c 	.word	0x0801b66c
 80105cc:	0801b690 	.word	0x0801b690

080105d0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80105d0:	b480      	push	{r7}
 80105d2:	b085      	sub	sp, #20
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80105d8:	2300      	movs	r3, #0
 80105da:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80105dc:	e005      	b.n	80105ea <pbuf_clen+0x1a>
    ++len;
 80105de:	89fb      	ldrh	r3, [r7, #14]
 80105e0:	3301      	adds	r3, #1
 80105e2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d1f6      	bne.n	80105de <pbuf_clen+0xe>
  }
  return len;
 80105f0:	89fb      	ldrh	r3, [r7, #14]
}
 80105f2:	4618      	mov	r0, r3
 80105f4:	3714      	adds	r7, #20
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr
	...

08010600 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b084      	sub	sp, #16
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d016      	beq.n	801063c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801060e:	f009 f9ef 	bl	80199f0 <sys_arch_protect>
 8010612:	60f8      	str	r0, [r7, #12]
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	7b9b      	ldrb	r3, [r3, #14]
 8010618:	3301      	adds	r3, #1
 801061a:	b2da      	uxtb	r2, r3
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	739a      	strb	r2, [r3, #14]
 8010620:	68f8      	ldr	r0, [r7, #12]
 8010622:	f009 f9f3 	bl	8019a0c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	7b9b      	ldrb	r3, [r3, #14]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d106      	bne.n	801063c <pbuf_ref+0x3c>
 801062e:	4b05      	ldr	r3, [pc, #20]	; (8010644 <pbuf_ref+0x44>)
 8010630:	f240 3242 	movw	r2, #834	; 0x342
 8010634:	4904      	ldr	r1, [pc, #16]	; (8010648 <pbuf_ref+0x48>)
 8010636:	4805      	ldr	r0, [pc, #20]	; (801064c <pbuf_ref+0x4c>)
 8010638:	f009 fb94 	bl	8019d64 <iprintf>
  }
}
 801063c:	bf00      	nop
 801063e:	3710      	adds	r7, #16
 8010640:	46bd      	mov	sp, r7
 8010642:	bd80      	pop	{r7, pc}
 8010644:	0801b4c4 	.word	0x0801b4c4
 8010648:	0801b6a4 	.word	0x0801b6a4
 801064c:	0801b524 	.word	0x0801b524

08010650 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010650:	b580      	push	{r7, lr}
 8010652:	b084      	sub	sp, #16
 8010654:	af00      	add	r7, sp, #0
 8010656:	6078      	str	r0, [r7, #4]
 8010658:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	2b00      	cmp	r3, #0
 801065e:	d002      	beq.n	8010666 <pbuf_cat+0x16>
 8010660:	683b      	ldr	r3, [r7, #0]
 8010662:	2b00      	cmp	r3, #0
 8010664:	d107      	bne.n	8010676 <pbuf_cat+0x26>
 8010666:	4b20      	ldr	r3, [pc, #128]	; (80106e8 <pbuf_cat+0x98>)
 8010668:	f240 3259 	movw	r2, #857	; 0x359
 801066c:	491f      	ldr	r1, [pc, #124]	; (80106ec <pbuf_cat+0x9c>)
 801066e:	4820      	ldr	r0, [pc, #128]	; (80106f0 <pbuf_cat+0xa0>)
 8010670:	f009 fb78 	bl	8019d64 <iprintf>
 8010674:	e034      	b.n	80106e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	60fb      	str	r3, [r7, #12]
 801067a:	e00a      	b.n	8010692 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	891a      	ldrh	r2, [r3, #8]
 8010680:	683b      	ldr	r3, [r7, #0]
 8010682:	891b      	ldrh	r3, [r3, #8]
 8010684:	4413      	add	r3, r2
 8010686:	b29a      	uxth	r2, r3
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801068c:	68fb      	ldr	r3, [r7, #12]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	60fb      	str	r3, [r7, #12]
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	2b00      	cmp	r3, #0
 8010698:	d1f0      	bne.n	801067c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	891a      	ldrh	r2, [r3, #8]
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	895b      	ldrh	r3, [r3, #10]
 80106a2:	429a      	cmp	r2, r3
 80106a4:	d006      	beq.n	80106b4 <pbuf_cat+0x64>
 80106a6:	4b10      	ldr	r3, [pc, #64]	; (80106e8 <pbuf_cat+0x98>)
 80106a8:	f240 3262 	movw	r2, #866	; 0x362
 80106ac:	4911      	ldr	r1, [pc, #68]	; (80106f4 <pbuf_cat+0xa4>)
 80106ae:	4810      	ldr	r0, [pc, #64]	; (80106f0 <pbuf_cat+0xa0>)
 80106b0:	f009 fb58 	bl	8019d64 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d006      	beq.n	80106ca <pbuf_cat+0x7a>
 80106bc:	4b0a      	ldr	r3, [pc, #40]	; (80106e8 <pbuf_cat+0x98>)
 80106be:	f240 3263 	movw	r2, #867	; 0x363
 80106c2:	490d      	ldr	r1, [pc, #52]	; (80106f8 <pbuf_cat+0xa8>)
 80106c4:	480a      	ldr	r0, [pc, #40]	; (80106f0 <pbuf_cat+0xa0>)
 80106c6:	f009 fb4d 	bl	8019d64 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80106ca:	68fb      	ldr	r3, [r7, #12]
 80106cc:	891a      	ldrh	r2, [r3, #8]
 80106ce:	683b      	ldr	r3, [r7, #0]
 80106d0:	891b      	ldrh	r3, [r3, #8]
 80106d2:	4413      	add	r3, r2
 80106d4:	b29a      	uxth	r2, r3
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	683a      	ldr	r2, [r7, #0]
 80106de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80106e0:	3710      	adds	r7, #16
 80106e2:	46bd      	mov	sp, r7
 80106e4:	bd80      	pop	{r7, pc}
 80106e6:	bf00      	nop
 80106e8:	0801b4c4 	.word	0x0801b4c4
 80106ec:	0801b6b8 	.word	0x0801b6b8
 80106f0:	0801b524 	.word	0x0801b524
 80106f4:	0801b6f0 	.word	0x0801b6f0
 80106f8:	0801b720 	.word	0x0801b720

080106fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010706:	6839      	ldr	r1, [r7, #0]
 8010708:	6878      	ldr	r0, [r7, #4]
 801070a:	f7ff ffa1 	bl	8010650 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801070e:	6838      	ldr	r0, [r7, #0]
 8010710:	f7ff ff76 	bl	8010600 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010714:	bf00      	nop
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}

0801071c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b086      	sub	sp, #24
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
 8010724:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010726:	2300      	movs	r3, #0
 8010728:	617b      	str	r3, [r7, #20]
 801072a:	2300      	movs	r3, #0
 801072c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d008      	beq.n	8010746 <pbuf_copy+0x2a>
 8010734:	683b      	ldr	r3, [r7, #0]
 8010736:	2b00      	cmp	r3, #0
 8010738:	d005      	beq.n	8010746 <pbuf_copy+0x2a>
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	891a      	ldrh	r2, [r3, #8]
 801073e:	683b      	ldr	r3, [r7, #0]
 8010740:	891b      	ldrh	r3, [r3, #8]
 8010742:	429a      	cmp	r2, r3
 8010744:	d209      	bcs.n	801075a <pbuf_copy+0x3e>
 8010746:	4b57      	ldr	r3, [pc, #348]	; (80108a4 <pbuf_copy+0x188>)
 8010748:	f240 32c9 	movw	r2, #969	; 0x3c9
 801074c:	4956      	ldr	r1, [pc, #344]	; (80108a8 <pbuf_copy+0x18c>)
 801074e:	4857      	ldr	r0, [pc, #348]	; (80108ac <pbuf_copy+0x190>)
 8010750:	f009 fb08 	bl	8019d64 <iprintf>
 8010754:	f06f 030f 	mvn.w	r3, #15
 8010758:	e09f      	b.n	801089a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	895b      	ldrh	r3, [r3, #10]
 801075e:	461a      	mov	r2, r3
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	1ad2      	subs	r2, r2, r3
 8010764:	683b      	ldr	r3, [r7, #0]
 8010766:	895b      	ldrh	r3, [r3, #10]
 8010768:	4619      	mov	r1, r3
 801076a:	693b      	ldr	r3, [r7, #16]
 801076c:	1acb      	subs	r3, r1, r3
 801076e:	429a      	cmp	r2, r3
 8010770:	d306      	bcc.n	8010780 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	895b      	ldrh	r3, [r3, #10]
 8010776:	461a      	mov	r2, r3
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	1ad3      	subs	r3, r2, r3
 801077c:	60fb      	str	r3, [r7, #12]
 801077e:	e005      	b.n	801078c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	895b      	ldrh	r3, [r3, #10]
 8010784:	461a      	mov	r2, r3
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	1ad3      	subs	r3, r2, r3
 801078a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	685a      	ldr	r2, [r3, #4]
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	18d0      	adds	r0, r2, r3
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	685a      	ldr	r2, [r3, #4]
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	4413      	add	r3, r2
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	4619      	mov	r1, r3
 80107a0:	f009 fa6f 	bl	8019c82 <memcpy>
    offset_to += len;
 80107a4:	697a      	ldr	r2, [r7, #20]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	4413      	add	r3, r2
 80107aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80107ac:	693a      	ldr	r2, [r7, #16]
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	4413      	add	r3, r2
 80107b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	895b      	ldrh	r3, [r3, #10]
 80107b8:	461a      	mov	r2, r3
 80107ba:	697b      	ldr	r3, [r7, #20]
 80107bc:	4293      	cmp	r3, r2
 80107be:	d906      	bls.n	80107ce <pbuf_copy+0xb2>
 80107c0:	4b38      	ldr	r3, [pc, #224]	; (80108a4 <pbuf_copy+0x188>)
 80107c2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80107c6:	493a      	ldr	r1, [pc, #232]	; (80108b0 <pbuf_copy+0x194>)
 80107c8:	4838      	ldr	r0, [pc, #224]	; (80108ac <pbuf_copy+0x190>)
 80107ca:	f009 facb 	bl	8019d64 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80107ce:	683b      	ldr	r3, [r7, #0]
 80107d0:	895b      	ldrh	r3, [r3, #10]
 80107d2:	461a      	mov	r2, r3
 80107d4:	693b      	ldr	r3, [r7, #16]
 80107d6:	4293      	cmp	r3, r2
 80107d8:	d906      	bls.n	80107e8 <pbuf_copy+0xcc>
 80107da:	4b32      	ldr	r3, [pc, #200]	; (80108a4 <pbuf_copy+0x188>)
 80107dc:	f240 32da 	movw	r2, #986	; 0x3da
 80107e0:	4934      	ldr	r1, [pc, #208]	; (80108b4 <pbuf_copy+0x198>)
 80107e2:	4832      	ldr	r0, [pc, #200]	; (80108ac <pbuf_copy+0x190>)
 80107e4:	f009 fabe 	bl	8019d64 <iprintf>
    if (offset_from >= p_from->len) {
 80107e8:	683b      	ldr	r3, [r7, #0]
 80107ea:	895b      	ldrh	r3, [r3, #10]
 80107ec:	461a      	mov	r2, r3
 80107ee:	693b      	ldr	r3, [r7, #16]
 80107f0:	4293      	cmp	r3, r2
 80107f2:	d304      	bcc.n	80107fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80107f4:	2300      	movs	r3, #0
 80107f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	895b      	ldrh	r3, [r3, #10]
 8010802:	461a      	mov	r2, r3
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	4293      	cmp	r3, r2
 8010808:	d114      	bne.n	8010834 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2b00      	cmp	r3, #0
 8010818:	d10c      	bne.n	8010834 <pbuf_copy+0x118>
 801081a:	683b      	ldr	r3, [r7, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d009      	beq.n	8010834 <pbuf_copy+0x118>
 8010820:	4b20      	ldr	r3, [pc, #128]	; (80108a4 <pbuf_copy+0x188>)
 8010822:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010826:	4924      	ldr	r1, [pc, #144]	; (80108b8 <pbuf_copy+0x19c>)
 8010828:	4820      	ldr	r0, [pc, #128]	; (80108ac <pbuf_copy+0x190>)
 801082a:	f009 fa9b 	bl	8019d64 <iprintf>
 801082e:	f06f 030f 	mvn.w	r3, #15
 8010832:	e032      	b.n	801089a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010834:	683b      	ldr	r3, [r7, #0]
 8010836:	2b00      	cmp	r3, #0
 8010838:	d013      	beq.n	8010862 <pbuf_copy+0x146>
 801083a:	683b      	ldr	r3, [r7, #0]
 801083c:	895a      	ldrh	r2, [r3, #10]
 801083e:	683b      	ldr	r3, [r7, #0]
 8010840:	891b      	ldrh	r3, [r3, #8]
 8010842:	429a      	cmp	r2, r3
 8010844:	d10d      	bne.n	8010862 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010846:	683b      	ldr	r3, [r7, #0]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d009      	beq.n	8010862 <pbuf_copy+0x146>
 801084e:	4b15      	ldr	r3, [pc, #84]	; (80108a4 <pbuf_copy+0x188>)
 8010850:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010854:	4919      	ldr	r1, [pc, #100]	; (80108bc <pbuf_copy+0x1a0>)
 8010856:	4815      	ldr	r0, [pc, #84]	; (80108ac <pbuf_copy+0x190>)
 8010858:	f009 fa84 	bl	8019d64 <iprintf>
 801085c:	f06f 0305 	mvn.w	r3, #5
 8010860:	e01b      	b.n	801089a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d013      	beq.n	8010890 <pbuf_copy+0x174>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	895a      	ldrh	r2, [r3, #10]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	891b      	ldrh	r3, [r3, #8]
 8010870:	429a      	cmp	r2, r3
 8010872:	d10d      	bne.n	8010890 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d009      	beq.n	8010890 <pbuf_copy+0x174>
 801087c:	4b09      	ldr	r3, [pc, #36]	; (80108a4 <pbuf_copy+0x188>)
 801087e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010882:	490e      	ldr	r1, [pc, #56]	; (80108bc <pbuf_copy+0x1a0>)
 8010884:	4809      	ldr	r0, [pc, #36]	; (80108ac <pbuf_copy+0x190>)
 8010886:	f009 fa6d 	bl	8019d64 <iprintf>
 801088a:	f06f 0305 	mvn.w	r3, #5
 801088e:	e004      	b.n	801089a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010890:	683b      	ldr	r3, [r7, #0]
 8010892:	2b00      	cmp	r3, #0
 8010894:	f47f af61 	bne.w	801075a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010898:	2300      	movs	r3, #0
}
 801089a:	4618      	mov	r0, r3
 801089c:	3718      	adds	r7, #24
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	0801b4c4 	.word	0x0801b4c4
 80108a8:	0801b76c 	.word	0x0801b76c
 80108ac:	0801b524 	.word	0x0801b524
 80108b0:	0801b79c 	.word	0x0801b79c
 80108b4:	0801b7b4 	.word	0x0801b7b4
 80108b8:	0801b7d0 	.word	0x0801b7d0
 80108bc:	0801b7e0 	.word	0x0801b7e0

080108c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80108c0:	b580      	push	{r7, lr}
 80108c2:	b088      	sub	sp, #32
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	60f8      	str	r0, [r7, #12]
 80108c8:	60b9      	str	r1, [r7, #8]
 80108ca:	4611      	mov	r1, r2
 80108cc:	461a      	mov	r2, r3
 80108ce:	460b      	mov	r3, r1
 80108d0:	80fb      	strh	r3, [r7, #6]
 80108d2:	4613      	mov	r3, r2
 80108d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80108d6:	2300      	movs	r3, #0
 80108d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80108da:	2300      	movs	r3, #0
 80108dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d108      	bne.n	80108f6 <pbuf_copy_partial+0x36>
 80108e4:	4b2b      	ldr	r3, [pc, #172]	; (8010994 <pbuf_copy_partial+0xd4>)
 80108e6:	f240 420a 	movw	r2, #1034	; 0x40a
 80108ea:	492b      	ldr	r1, [pc, #172]	; (8010998 <pbuf_copy_partial+0xd8>)
 80108ec:	482b      	ldr	r0, [pc, #172]	; (801099c <pbuf_copy_partial+0xdc>)
 80108ee:	f009 fa39 	bl	8019d64 <iprintf>
 80108f2:	2300      	movs	r3, #0
 80108f4:	e04a      	b.n	801098c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d108      	bne.n	801090e <pbuf_copy_partial+0x4e>
 80108fc:	4b25      	ldr	r3, [pc, #148]	; (8010994 <pbuf_copy_partial+0xd4>)
 80108fe:	f240 420b 	movw	r2, #1035	; 0x40b
 8010902:	4927      	ldr	r1, [pc, #156]	; (80109a0 <pbuf_copy_partial+0xe0>)
 8010904:	4825      	ldr	r0, [pc, #148]	; (801099c <pbuf_copy_partial+0xdc>)
 8010906:	f009 fa2d 	bl	8019d64 <iprintf>
 801090a:	2300      	movs	r3, #0
 801090c:	e03e      	b.n	801098c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	61fb      	str	r3, [r7, #28]
 8010912:	e034      	b.n	801097e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010914:	88bb      	ldrh	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d00a      	beq.n	8010930 <pbuf_copy_partial+0x70>
 801091a:	69fb      	ldr	r3, [r7, #28]
 801091c:	895b      	ldrh	r3, [r3, #10]
 801091e:	88ba      	ldrh	r2, [r7, #4]
 8010920:	429a      	cmp	r2, r3
 8010922:	d305      	bcc.n	8010930 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010924:	69fb      	ldr	r3, [r7, #28]
 8010926:	895b      	ldrh	r3, [r3, #10]
 8010928:	88ba      	ldrh	r2, [r7, #4]
 801092a:	1ad3      	subs	r3, r2, r3
 801092c:	80bb      	strh	r3, [r7, #4]
 801092e:	e023      	b.n	8010978 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010930:	69fb      	ldr	r3, [r7, #28]
 8010932:	895a      	ldrh	r2, [r3, #10]
 8010934:	88bb      	ldrh	r3, [r7, #4]
 8010936:	1ad3      	subs	r3, r2, r3
 8010938:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801093a:	8b3a      	ldrh	r2, [r7, #24]
 801093c:	88fb      	ldrh	r3, [r7, #6]
 801093e:	429a      	cmp	r2, r3
 8010940:	d901      	bls.n	8010946 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010942:	88fb      	ldrh	r3, [r7, #6]
 8010944:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010946:	8b7b      	ldrh	r3, [r7, #26]
 8010948:	68ba      	ldr	r2, [r7, #8]
 801094a:	18d0      	adds	r0, r2, r3
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	685a      	ldr	r2, [r3, #4]
 8010950:	88bb      	ldrh	r3, [r7, #4]
 8010952:	4413      	add	r3, r2
 8010954:	8b3a      	ldrh	r2, [r7, #24]
 8010956:	4619      	mov	r1, r3
 8010958:	f009 f993 	bl	8019c82 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801095c:	8afa      	ldrh	r2, [r7, #22]
 801095e:	8b3b      	ldrh	r3, [r7, #24]
 8010960:	4413      	add	r3, r2
 8010962:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010964:	8b7a      	ldrh	r2, [r7, #26]
 8010966:	8b3b      	ldrh	r3, [r7, #24]
 8010968:	4413      	add	r3, r2
 801096a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 801096c:	88fa      	ldrh	r2, [r7, #6]
 801096e:	8b3b      	ldrh	r3, [r7, #24]
 8010970:	1ad3      	subs	r3, r2, r3
 8010972:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010974:	2300      	movs	r3, #0
 8010976:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010978:	69fb      	ldr	r3, [r7, #28]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	61fb      	str	r3, [r7, #28]
 801097e:	88fb      	ldrh	r3, [r7, #6]
 8010980:	2b00      	cmp	r3, #0
 8010982:	d002      	beq.n	801098a <pbuf_copy_partial+0xca>
 8010984:	69fb      	ldr	r3, [r7, #28]
 8010986:	2b00      	cmp	r3, #0
 8010988:	d1c4      	bne.n	8010914 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801098a:	8afb      	ldrh	r3, [r7, #22]
}
 801098c:	4618      	mov	r0, r3
 801098e:	3720      	adds	r7, #32
 8010990:	46bd      	mov	sp, r7
 8010992:	bd80      	pop	{r7, pc}
 8010994:	0801b4c4 	.word	0x0801b4c4
 8010998:	0801b80c 	.word	0x0801b80c
 801099c:	0801b524 	.word	0x0801b524
 80109a0:	0801b82c 	.word	0x0801b82c

080109a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b084      	sub	sp, #16
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	4603      	mov	r3, r0
 80109ac:	603a      	str	r2, [r7, #0]
 80109ae:	71fb      	strb	r3, [r7, #7]
 80109b0:	460b      	mov	r3, r1
 80109b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80109b4:	683b      	ldr	r3, [r7, #0]
 80109b6:	8919      	ldrh	r1, [r3, #8]
 80109b8:	88ba      	ldrh	r2, [r7, #4]
 80109ba:	79fb      	ldrb	r3, [r7, #7]
 80109bc:	4618      	mov	r0, r3
 80109be:	f7ff fa95 	bl	800feec <pbuf_alloc>
 80109c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d101      	bne.n	80109ce <pbuf_clone+0x2a>
    return NULL;
 80109ca:	2300      	movs	r3, #0
 80109cc:	e011      	b.n	80109f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80109ce:	6839      	ldr	r1, [r7, #0]
 80109d0:	68f8      	ldr	r0, [r7, #12]
 80109d2:	f7ff fea3 	bl	801071c <pbuf_copy>
 80109d6:	4603      	mov	r3, r0
 80109d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80109da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d006      	beq.n	80109f0 <pbuf_clone+0x4c>
 80109e2:	4b06      	ldr	r3, [pc, #24]	; (80109fc <pbuf_clone+0x58>)
 80109e4:	f240 5224 	movw	r2, #1316	; 0x524
 80109e8:	4905      	ldr	r1, [pc, #20]	; (8010a00 <pbuf_clone+0x5c>)
 80109ea:	4806      	ldr	r0, [pc, #24]	; (8010a04 <pbuf_clone+0x60>)
 80109ec:	f009 f9ba 	bl	8019d64 <iprintf>
  return q;
 80109f0:	68fb      	ldr	r3, [r7, #12]
}
 80109f2:	4618      	mov	r0, r3
 80109f4:	3710      	adds	r7, #16
 80109f6:	46bd      	mov	sp, r7
 80109f8:	bd80      	pop	{r7, pc}
 80109fa:	bf00      	nop
 80109fc:	0801b4c4 	.word	0x0801b4c4
 8010a00:	0801b938 	.word	0x0801b938
 8010a04:	0801b524 	.word	0x0801b524

08010a08 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010a0c:	f009 f9c2 	bl	8019d94 <rand>
 8010a10:	4603      	mov	r3, r0
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010a18:	b29b      	uxth	r3, r3
 8010a1a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010a1e:	b29a      	uxth	r2, r3
 8010a20:	4b01      	ldr	r3, [pc, #4]	; (8010a28 <tcp_init+0x20>)
 8010a22:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010a24:	bf00      	nop
 8010a26:	bd80      	pop	{r7, pc}
 8010a28:	24000030 	.word	0x24000030

08010a2c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	7d1b      	ldrb	r3, [r3, #20]
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	d105      	bne.n	8010a48 <tcp_free+0x1c>
 8010a3c:	4b06      	ldr	r3, [pc, #24]	; (8010a58 <tcp_free+0x2c>)
 8010a3e:	22d4      	movs	r2, #212	; 0xd4
 8010a40:	4906      	ldr	r1, [pc, #24]	; (8010a5c <tcp_free+0x30>)
 8010a42:	4807      	ldr	r0, [pc, #28]	; (8010a60 <tcp_free+0x34>)
 8010a44:	f009 f98e 	bl	8019d64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010a48:	6879      	ldr	r1, [r7, #4]
 8010a4a:	2001      	movs	r0, #1
 8010a4c:	f7fe fe8e 	bl	800f76c <memp_free>
}
 8010a50:	bf00      	nop
 8010a52:	3708      	adds	r7, #8
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd80      	pop	{r7, pc}
 8010a58:	0801b9c4 	.word	0x0801b9c4
 8010a5c:	0801b9f4 	.word	0x0801b9f4
 8010a60:	0801ba08 	.word	0x0801ba08

08010a64 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b082      	sub	sp, #8
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	7d1b      	ldrb	r3, [r3, #20]
 8010a70:	2b01      	cmp	r3, #1
 8010a72:	d105      	bne.n	8010a80 <tcp_free_listen+0x1c>
 8010a74:	4b06      	ldr	r3, [pc, #24]	; (8010a90 <tcp_free_listen+0x2c>)
 8010a76:	22df      	movs	r2, #223	; 0xdf
 8010a78:	4906      	ldr	r1, [pc, #24]	; (8010a94 <tcp_free_listen+0x30>)
 8010a7a:	4807      	ldr	r0, [pc, #28]	; (8010a98 <tcp_free_listen+0x34>)
 8010a7c:	f009 f972 	bl	8019d64 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010a80:	6879      	ldr	r1, [r7, #4]
 8010a82:	2002      	movs	r0, #2
 8010a84:	f7fe fe72 	bl	800f76c <memp_free>
}
 8010a88:	bf00      	nop
 8010a8a:	3708      	adds	r7, #8
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	bd80      	pop	{r7, pc}
 8010a90:	0801b9c4 	.word	0x0801b9c4
 8010a94:	0801ba30 	.word	0x0801ba30
 8010a98:	0801ba08 	.word	0x0801ba08

08010a9c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010a9c:	b580      	push	{r7, lr}
 8010a9e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010aa0:	f001 f85c 	bl	8011b5c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010aa4:	4b07      	ldr	r3, [pc, #28]	; (8010ac4 <tcp_tmr+0x28>)
 8010aa6:	781b      	ldrb	r3, [r3, #0]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	b2da      	uxtb	r2, r3
 8010aac:	4b05      	ldr	r3, [pc, #20]	; (8010ac4 <tcp_tmr+0x28>)
 8010aae:	701a      	strb	r2, [r3, #0]
 8010ab0:	4b04      	ldr	r3, [pc, #16]	; (8010ac4 <tcp_tmr+0x28>)
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f003 0301 	and.w	r3, r3, #1
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d001      	beq.n	8010ac0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010abc:	f000 fd0e 	bl	80114dc <tcp_slowtmr>
  }
}
 8010ac0:	bf00      	nop
 8010ac2:	bd80      	pop	{r7, pc}
 8010ac4:	24004135 	.word	0x24004135

08010ac8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	b084      	sub	sp, #16
 8010acc:	af00      	add	r7, sp, #0
 8010ace:	6078      	str	r0, [r7, #4]
 8010ad0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010ad2:	683b      	ldr	r3, [r7, #0]
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d105      	bne.n	8010ae4 <tcp_remove_listener+0x1c>
 8010ad8:	4b0d      	ldr	r3, [pc, #52]	; (8010b10 <tcp_remove_listener+0x48>)
 8010ada:	22ff      	movs	r2, #255	; 0xff
 8010adc:	490d      	ldr	r1, [pc, #52]	; (8010b14 <tcp_remove_listener+0x4c>)
 8010ade:	480e      	ldr	r0, [pc, #56]	; (8010b18 <tcp_remove_listener+0x50>)
 8010ae0:	f009 f940 	bl	8019d64 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	60fb      	str	r3, [r7, #12]
 8010ae8:	e00a      	b.n	8010b00 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010aee:	683a      	ldr	r2, [r7, #0]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d102      	bne.n	8010afa <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2200      	movs	r2, #0
 8010af8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	68db      	ldr	r3, [r3, #12]
 8010afe:	60fb      	str	r3, [r7, #12]
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d1f1      	bne.n	8010aea <tcp_remove_listener+0x22>
    }
  }
}
 8010b06:	bf00      	nop
 8010b08:	bf00      	nop
 8010b0a:	3710      	adds	r7, #16
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	0801b9c4 	.word	0x0801b9c4
 8010b14:	0801ba4c 	.word	0x0801ba4c
 8010b18:	0801ba08 	.word	0x0801ba08

08010b1c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d106      	bne.n	8010b38 <tcp_listen_closed+0x1c>
 8010b2a:	4b14      	ldr	r3, [pc, #80]	; (8010b7c <tcp_listen_closed+0x60>)
 8010b2c:	f240 1211 	movw	r2, #273	; 0x111
 8010b30:	4913      	ldr	r1, [pc, #76]	; (8010b80 <tcp_listen_closed+0x64>)
 8010b32:	4814      	ldr	r0, [pc, #80]	; (8010b84 <tcp_listen_closed+0x68>)
 8010b34:	f009 f916 	bl	8019d64 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	7d1b      	ldrb	r3, [r3, #20]
 8010b3c:	2b01      	cmp	r3, #1
 8010b3e:	d006      	beq.n	8010b4e <tcp_listen_closed+0x32>
 8010b40:	4b0e      	ldr	r3, [pc, #56]	; (8010b7c <tcp_listen_closed+0x60>)
 8010b42:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010b46:	4910      	ldr	r1, [pc, #64]	; (8010b88 <tcp_listen_closed+0x6c>)
 8010b48:	480e      	ldr	r0, [pc, #56]	; (8010b84 <tcp_listen_closed+0x68>)
 8010b4a:	f009 f90b 	bl	8019d64 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010b4e:	2301      	movs	r3, #1
 8010b50:	60fb      	str	r3, [r7, #12]
 8010b52:	e00b      	b.n	8010b6c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010b54:	4a0d      	ldr	r2, [pc, #52]	; (8010b8c <tcp_listen_closed+0x70>)
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	6879      	ldr	r1, [r7, #4]
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7ff ffb1 	bl	8010ac8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	3301      	adds	r3, #1
 8010b6a:	60fb      	str	r3, [r7, #12]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2b03      	cmp	r3, #3
 8010b70:	d9f0      	bls.n	8010b54 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010b72:	bf00      	nop
 8010b74:	bf00      	nop
 8010b76:	3710      	adds	r7, #16
 8010b78:	46bd      	mov	sp, r7
 8010b7a:	bd80      	pop	{r7, pc}
 8010b7c:	0801b9c4 	.word	0x0801b9c4
 8010b80:	0801ba74 	.word	0x0801ba74
 8010b84:	0801ba08 	.word	0x0801ba08
 8010b88:	0801ba80 	.word	0x0801ba80
 8010b8c:	0801e1f4 	.word	0x0801e1f4

08010b90 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010b90:	b5b0      	push	{r4, r5, r7, lr}
 8010b92:	b088      	sub	sp, #32
 8010b94:	af04      	add	r7, sp, #16
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d106      	bne.n	8010bb0 <tcp_close_shutdown+0x20>
 8010ba2:	4b63      	ldr	r3, [pc, #396]	; (8010d30 <tcp_close_shutdown+0x1a0>)
 8010ba4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010ba8:	4962      	ldr	r1, [pc, #392]	; (8010d34 <tcp_close_shutdown+0x1a4>)
 8010baa:	4863      	ldr	r0, [pc, #396]	; (8010d38 <tcp_close_shutdown+0x1a8>)
 8010bac:	f009 f8da 	bl	8019d64 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010bb0:	78fb      	ldrb	r3, [r7, #3]
 8010bb2:	2b00      	cmp	r3, #0
 8010bb4:	d066      	beq.n	8010c84 <tcp_close_shutdown+0xf4>
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	7d1b      	ldrb	r3, [r3, #20]
 8010bba:	2b04      	cmp	r3, #4
 8010bbc:	d003      	beq.n	8010bc6 <tcp_close_shutdown+0x36>
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	7d1b      	ldrb	r3, [r3, #20]
 8010bc2:	2b07      	cmp	r3, #7
 8010bc4:	d15e      	bne.n	8010c84 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d104      	bne.n	8010bd8 <tcp_close_shutdown+0x48>
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010bd2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010bd6:	d055      	beq.n	8010c84 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	8b5b      	ldrh	r3, [r3, #26]
 8010bdc:	f003 0310 	and.w	r3, r3, #16
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d106      	bne.n	8010bf2 <tcp_close_shutdown+0x62>
 8010be4:	4b52      	ldr	r3, [pc, #328]	; (8010d30 <tcp_close_shutdown+0x1a0>)
 8010be6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010bea:	4954      	ldr	r1, [pc, #336]	; (8010d3c <tcp_close_shutdown+0x1ac>)
 8010bec:	4852      	ldr	r0, [pc, #328]	; (8010d38 <tcp_close_shutdown+0x1a8>)
 8010bee:	f009 f8b9 	bl	8019d64 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010bfa:	687d      	ldr	r5, [r7, #4]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	3304      	adds	r3, #4
 8010c00:	687a      	ldr	r2, [r7, #4]
 8010c02:	8ad2      	ldrh	r2, [r2, #22]
 8010c04:	6879      	ldr	r1, [r7, #4]
 8010c06:	8b09      	ldrh	r1, [r1, #24]
 8010c08:	9102      	str	r1, [sp, #8]
 8010c0a:	9201      	str	r2, [sp, #4]
 8010c0c:	9300      	str	r3, [sp, #0]
 8010c0e:	462b      	mov	r3, r5
 8010c10:	4622      	mov	r2, r4
 8010c12:	4601      	mov	r1, r0
 8010c14:	6878      	ldr	r0, [r7, #4]
 8010c16:	f005 fd85 	bl	8016724 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f001 fb66 	bl	80122ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010c20:	4b47      	ldr	r3, [pc, #284]	; (8010d40 <tcp_close_shutdown+0x1b0>)
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	687a      	ldr	r2, [r7, #4]
 8010c26:	429a      	cmp	r2, r3
 8010c28:	d105      	bne.n	8010c36 <tcp_close_shutdown+0xa6>
 8010c2a:	4b45      	ldr	r3, [pc, #276]	; (8010d40 <tcp_close_shutdown+0x1b0>)
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	68db      	ldr	r3, [r3, #12]
 8010c30:	4a43      	ldr	r2, [pc, #268]	; (8010d40 <tcp_close_shutdown+0x1b0>)
 8010c32:	6013      	str	r3, [r2, #0]
 8010c34:	e013      	b.n	8010c5e <tcp_close_shutdown+0xce>
 8010c36:	4b42      	ldr	r3, [pc, #264]	; (8010d40 <tcp_close_shutdown+0x1b0>)
 8010c38:	681b      	ldr	r3, [r3, #0]
 8010c3a:	60fb      	str	r3, [r7, #12]
 8010c3c:	e00c      	b.n	8010c58 <tcp_close_shutdown+0xc8>
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	68db      	ldr	r3, [r3, #12]
 8010c42:	687a      	ldr	r2, [r7, #4]
 8010c44:	429a      	cmp	r2, r3
 8010c46:	d104      	bne.n	8010c52 <tcp_close_shutdown+0xc2>
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	68da      	ldr	r2, [r3, #12]
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	60da      	str	r2, [r3, #12]
 8010c50:	e005      	b.n	8010c5e <tcp_close_shutdown+0xce>
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	68db      	ldr	r3, [r3, #12]
 8010c56:	60fb      	str	r3, [r7, #12]
 8010c58:	68fb      	ldr	r3, [r7, #12]
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d1ef      	bne.n	8010c3e <tcp_close_shutdown+0xae>
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2200      	movs	r2, #0
 8010c62:	60da      	str	r2, [r3, #12]
 8010c64:	4b37      	ldr	r3, [pc, #220]	; (8010d44 <tcp_close_shutdown+0x1b4>)
 8010c66:	2201      	movs	r2, #1
 8010c68:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010c6a:	4b37      	ldr	r3, [pc, #220]	; (8010d48 <tcp_close_shutdown+0x1b8>)
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	687a      	ldr	r2, [r7, #4]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d102      	bne.n	8010c7a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010c74:	f003 fffa 	bl	8014c6c <tcp_trigger_input_pcb_close>
 8010c78:	e002      	b.n	8010c80 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010c7a:	6878      	ldr	r0, [r7, #4]
 8010c7c:	f7ff fed6 	bl	8010a2c <tcp_free>
      }
      return ERR_OK;
 8010c80:	2300      	movs	r3, #0
 8010c82:	e050      	b.n	8010d26 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	7d1b      	ldrb	r3, [r3, #20]
 8010c88:	2b02      	cmp	r3, #2
 8010c8a:	d03b      	beq.n	8010d04 <tcp_close_shutdown+0x174>
 8010c8c:	2b02      	cmp	r3, #2
 8010c8e:	dc44      	bgt.n	8010d1a <tcp_close_shutdown+0x18a>
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d002      	beq.n	8010c9a <tcp_close_shutdown+0x10a>
 8010c94:	2b01      	cmp	r3, #1
 8010c96:	d02a      	beq.n	8010cee <tcp_close_shutdown+0x15e>
 8010c98:	e03f      	b.n	8010d1a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	8adb      	ldrh	r3, [r3, #22]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d021      	beq.n	8010ce6 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010ca2:	4b2a      	ldr	r3, [pc, #168]	; (8010d4c <tcp_close_shutdown+0x1bc>)
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	687a      	ldr	r2, [r7, #4]
 8010ca8:	429a      	cmp	r2, r3
 8010caa:	d105      	bne.n	8010cb8 <tcp_close_shutdown+0x128>
 8010cac:	4b27      	ldr	r3, [pc, #156]	; (8010d4c <tcp_close_shutdown+0x1bc>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	4a26      	ldr	r2, [pc, #152]	; (8010d4c <tcp_close_shutdown+0x1bc>)
 8010cb4:	6013      	str	r3, [r2, #0]
 8010cb6:	e013      	b.n	8010ce0 <tcp_close_shutdown+0x150>
 8010cb8:	4b24      	ldr	r3, [pc, #144]	; (8010d4c <tcp_close_shutdown+0x1bc>)
 8010cba:	681b      	ldr	r3, [r3, #0]
 8010cbc:	60bb      	str	r3, [r7, #8]
 8010cbe:	e00c      	b.n	8010cda <tcp_close_shutdown+0x14a>
 8010cc0:	68bb      	ldr	r3, [r7, #8]
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	687a      	ldr	r2, [r7, #4]
 8010cc6:	429a      	cmp	r2, r3
 8010cc8:	d104      	bne.n	8010cd4 <tcp_close_shutdown+0x144>
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	68da      	ldr	r2, [r3, #12]
 8010cce:	68bb      	ldr	r3, [r7, #8]
 8010cd0:	60da      	str	r2, [r3, #12]
 8010cd2:	e005      	b.n	8010ce0 <tcp_close_shutdown+0x150>
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	68db      	ldr	r3, [r3, #12]
 8010cd8:	60bb      	str	r3, [r7, #8]
 8010cda:	68bb      	ldr	r3, [r7, #8]
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d1ef      	bne.n	8010cc0 <tcp_close_shutdown+0x130>
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	2200      	movs	r2, #0
 8010ce4:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f7ff fea0 	bl	8010a2c <tcp_free>
      break;
 8010cec:	e01a      	b.n	8010d24 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8010cee:	6878      	ldr	r0, [r7, #4]
 8010cf0:	f7ff ff14 	bl	8010b1c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8010cf4:	6879      	ldr	r1, [r7, #4]
 8010cf6:	4816      	ldr	r0, [pc, #88]	; (8010d50 <tcp_close_shutdown+0x1c0>)
 8010cf8:	f001 fb48 	bl	801238c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8010cfc:	6878      	ldr	r0, [r7, #4]
 8010cfe:	f7ff feb1 	bl	8010a64 <tcp_free_listen>
      break;
 8010d02:	e00f      	b.n	8010d24 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010d04:	6879      	ldr	r1, [r7, #4]
 8010d06:	480e      	ldr	r0, [pc, #56]	; (8010d40 <tcp_close_shutdown+0x1b0>)
 8010d08:	f001 fb40 	bl	801238c <tcp_pcb_remove>
 8010d0c:	4b0d      	ldr	r3, [pc, #52]	; (8010d44 <tcp_close_shutdown+0x1b4>)
 8010d0e:	2201      	movs	r2, #1
 8010d10:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8010d12:	6878      	ldr	r0, [r7, #4]
 8010d14:	f7ff fe8a 	bl	8010a2c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8010d18:	e004      	b.n	8010d24 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8010d1a:	6878      	ldr	r0, [r7, #4]
 8010d1c:	f000 f81a 	bl	8010d54 <tcp_close_shutdown_fin>
 8010d20:	4603      	mov	r3, r0
 8010d22:	e000      	b.n	8010d26 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8010d24:	2300      	movs	r3, #0
}
 8010d26:	4618      	mov	r0, r3
 8010d28:	3710      	adds	r7, #16
 8010d2a:	46bd      	mov	sp, r7
 8010d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8010d2e:	bf00      	nop
 8010d30:	0801b9c4 	.word	0x0801b9c4
 8010d34:	0801ba98 	.word	0x0801ba98
 8010d38:	0801ba08 	.word	0x0801ba08
 8010d3c:	0801bab8 	.word	0x0801bab8
 8010d40:	2400789c 	.word	0x2400789c
 8010d44:	24007898 	.word	0x24007898
 8010d48:	240078b0 	.word	0x240078b0
 8010d4c:	240078a8 	.word	0x240078a8
 8010d50:	240078a4 	.word	0x240078a4

08010d54 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8010d54:	b580      	push	{r7, lr}
 8010d56:	b084      	sub	sp, #16
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d106      	bne.n	8010d70 <tcp_close_shutdown_fin+0x1c>
 8010d62:	4b2e      	ldr	r3, [pc, #184]	; (8010e1c <tcp_close_shutdown_fin+0xc8>)
 8010d64:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010d68:	492d      	ldr	r1, [pc, #180]	; (8010e20 <tcp_close_shutdown_fin+0xcc>)
 8010d6a:	482e      	ldr	r0, [pc, #184]	; (8010e24 <tcp_close_shutdown_fin+0xd0>)
 8010d6c:	f008 fffa 	bl	8019d64 <iprintf>

  switch (pcb->state) {
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	7d1b      	ldrb	r3, [r3, #20]
 8010d74:	2b07      	cmp	r3, #7
 8010d76:	d020      	beq.n	8010dba <tcp_close_shutdown_fin+0x66>
 8010d78:	2b07      	cmp	r3, #7
 8010d7a:	dc2b      	bgt.n	8010dd4 <tcp_close_shutdown_fin+0x80>
 8010d7c:	2b03      	cmp	r3, #3
 8010d7e:	d002      	beq.n	8010d86 <tcp_close_shutdown_fin+0x32>
 8010d80:	2b04      	cmp	r3, #4
 8010d82:	d00d      	beq.n	8010da0 <tcp_close_shutdown_fin+0x4c>
 8010d84:	e026      	b.n	8010dd4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f004 fdda 	bl	8015940 <tcp_send_fin>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d11f      	bne.n	8010dd8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2205      	movs	r2, #5
 8010d9c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010d9e:	e01b      	b.n	8010dd8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f004 fdcd 	bl	8015940 <tcp_send_fin>
 8010da6:	4603      	mov	r3, r0
 8010da8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d114      	bne.n	8010ddc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	2205      	movs	r2, #5
 8010db6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010db8:	e010      	b.n	8010ddc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f004 fdc0 	bl	8015940 <tcp_send_fin>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dc8:	2b00      	cmp	r3, #0
 8010dca:	d109      	bne.n	8010de0 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	2209      	movs	r2, #9
 8010dd0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010dd2:	e005      	b.n	8010de0 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e01c      	b.n	8010e12 <tcp_close_shutdown_fin+0xbe>
      break;
 8010dd8:	bf00      	nop
 8010dda:	e002      	b.n	8010de2 <tcp_close_shutdown_fin+0x8e>
      break;
 8010ddc:	bf00      	nop
 8010dde:	e000      	b.n	8010de2 <tcp_close_shutdown_fin+0x8e>
      break;
 8010de0:	bf00      	nop
  }

  if (err == ERR_OK) {
 8010de2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d103      	bne.n	8010df2 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8010dea:	6878      	ldr	r0, [r7, #4]
 8010dec:	f004 fee6 	bl	8015bbc <tcp_output>
 8010df0:	e00d      	b.n	8010e0e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8010df2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010dfa:	d108      	bne.n	8010e0e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	8b5b      	ldrh	r3, [r3, #26]
 8010e00:	f043 0308 	orr.w	r3, r3, #8
 8010e04:	b29a      	uxth	r2, r3
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8010e0a:	2300      	movs	r3, #0
 8010e0c:	e001      	b.n	8010e12 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8010e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010e12:	4618      	mov	r0, r3
 8010e14:	3710      	adds	r7, #16
 8010e16:	46bd      	mov	sp, r7
 8010e18:	bd80      	pop	{r7, pc}
 8010e1a:	bf00      	nop
 8010e1c:	0801b9c4 	.word	0x0801b9c4
 8010e20:	0801ba74 	.word	0x0801ba74
 8010e24:	0801ba08 	.word	0x0801ba08

08010e28 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8010e28:	b580      	push	{r7, lr}
 8010e2a:	b082      	sub	sp, #8
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d109      	bne.n	8010e4a <tcp_close+0x22>
 8010e36:	4b0f      	ldr	r3, [pc, #60]	; (8010e74 <tcp_close+0x4c>)
 8010e38:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8010e3c:	490e      	ldr	r1, [pc, #56]	; (8010e78 <tcp_close+0x50>)
 8010e3e:	480f      	ldr	r0, [pc, #60]	; (8010e7c <tcp_close+0x54>)
 8010e40:	f008 ff90 	bl	8019d64 <iprintf>
 8010e44:	f06f 030f 	mvn.w	r3, #15
 8010e48:	e00f      	b.n	8010e6a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	7d1b      	ldrb	r3, [r3, #20]
 8010e4e:	2b01      	cmp	r3, #1
 8010e50:	d006      	beq.n	8010e60 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	8b5b      	ldrh	r3, [r3, #26]
 8010e56:	f043 0310 	orr.w	r3, r3, #16
 8010e5a:	b29a      	uxth	r2, r3
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010e60:	2101      	movs	r1, #1
 8010e62:	6878      	ldr	r0, [r7, #4]
 8010e64:	f7ff fe94 	bl	8010b90 <tcp_close_shutdown>
 8010e68:	4603      	mov	r3, r0
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3708      	adds	r7, #8
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	bd80      	pop	{r7, pc}
 8010e72:	bf00      	nop
 8010e74:	0801b9c4 	.word	0x0801b9c4
 8010e78:	0801bad4 	.word	0x0801bad4
 8010e7c:	0801ba08 	.word	0x0801ba08

08010e80 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b08e      	sub	sp, #56	; 0x38
 8010e84:	af04      	add	r7, sp, #16
 8010e86:	6078      	str	r0, [r7, #4]
 8010e88:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d107      	bne.n	8010ea0 <tcp_abandon+0x20>
 8010e90:	4b52      	ldr	r3, [pc, #328]	; (8010fdc <tcp_abandon+0x15c>)
 8010e92:	f240 223d 	movw	r2, #573	; 0x23d
 8010e96:	4952      	ldr	r1, [pc, #328]	; (8010fe0 <tcp_abandon+0x160>)
 8010e98:	4852      	ldr	r0, [pc, #328]	; (8010fe4 <tcp_abandon+0x164>)
 8010e9a:	f008 ff63 	bl	8019d64 <iprintf>
 8010e9e:	e099      	b.n	8010fd4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	7d1b      	ldrb	r3, [r3, #20]
 8010ea4:	2b01      	cmp	r3, #1
 8010ea6:	d106      	bne.n	8010eb6 <tcp_abandon+0x36>
 8010ea8:	4b4c      	ldr	r3, [pc, #304]	; (8010fdc <tcp_abandon+0x15c>)
 8010eaa:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010eae:	494e      	ldr	r1, [pc, #312]	; (8010fe8 <tcp_abandon+0x168>)
 8010eb0:	484c      	ldr	r0, [pc, #304]	; (8010fe4 <tcp_abandon+0x164>)
 8010eb2:	f008 ff57 	bl	8019d64 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	7d1b      	ldrb	r3, [r3, #20]
 8010eba:	2b0a      	cmp	r3, #10
 8010ebc:	d107      	bne.n	8010ece <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010ebe:	6879      	ldr	r1, [r7, #4]
 8010ec0:	484a      	ldr	r0, [pc, #296]	; (8010fec <tcp_abandon+0x16c>)
 8010ec2:	f001 fa63 	bl	801238c <tcp_pcb_remove>
    tcp_free(pcb);
 8010ec6:	6878      	ldr	r0, [r7, #4]
 8010ec8:	f7ff fdb0 	bl	8010a2c <tcp_free>
 8010ecc:	e082      	b.n	8010fd4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010ece:	2300      	movs	r3, #0
 8010ed0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010eda:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ee0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010ee8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	691b      	ldr	r3, [r3, #16]
 8010eee:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	7d1b      	ldrb	r3, [r3, #20]
 8010ef4:	2b00      	cmp	r3, #0
 8010ef6:	d126      	bne.n	8010f46 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	8adb      	ldrh	r3, [r3, #22]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d02e      	beq.n	8010f5e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010f00:	4b3b      	ldr	r3, [pc, #236]	; (8010ff0 <tcp_abandon+0x170>)
 8010f02:	681b      	ldr	r3, [r3, #0]
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	429a      	cmp	r2, r3
 8010f08:	d105      	bne.n	8010f16 <tcp_abandon+0x96>
 8010f0a:	4b39      	ldr	r3, [pc, #228]	; (8010ff0 <tcp_abandon+0x170>)
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	68db      	ldr	r3, [r3, #12]
 8010f10:	4a37      	ldr	r2, [pc, #220]	; (8010ff0 <tcp_abandon+0x170>)
 8010f12:	6013      	str	r3, [r2, #0]
 8010f14:	e013      	b.n	8010f3e <tcp_abandon+0xbe>
 8010f16:	4b36      	ldr	r3, [pc, #216]	; (8010ff0 <tcp_abandon+0x170>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	61fb      	str	r3, [r7, #28]
 8010f1c:	e00c      	b.n	8010f38 <tcp_abandon+0xb8>
 8010f1e:	69fb      	ldr	r3, [r7, #28]
 8010f20:	68db      	ldr	r3, [r3, #12]
 8010f22:	687a      	ldr	r2, [r7, #4]
 8010f24:	429a      	cmp	r2, r3
 8010f26:	d104      	bne.n	8010f32 <tcp_abandon+0xb2>
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	68da      	ldr	r2, [r3, #12]
 8010f2c:	69fb      	ldr	r3, [r7, #28]
 8010f2e:	60da      	str	r2, [r3, #12]
 8010f30:	e005      	b.n	8010f3e <tcp_abandon+0xbe>
 8010f32:	69fb      	ldr	r3, [r7, #28]
 8010f34:	68db      	ldr	r3, [r3, #12]
 8010f36:	61fb      	str	r3, [r7, #28]
 8010f38:	69fb      	ldr	r3, [r7, #28]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d1ef      	bne.n	8010f1e <tcp_abandon+0x9e>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2200      	movs	r2, #0
 8010f42:	60da      	str	r2, [r3, #12]
 8010f44:	e00b      	b.n	8010f5e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8010f46:	683b      	ldr	r3, [r7, #0]
 8010f48:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	8adb      	ldrh	r3, [r3, #22]
 8010f4e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010f50:	6879      	ldr	r1, [r7, #4]
 8010f52:	4828      	ldr	r0, [pc, #160]	; (8010ff4 <tcp_abandon+0x174>)
 8010f54:	f001 fa1a 	bl	801238c <tcp_pcb_remove>
 8010f58:	4b27      	ldr	r3, [pc, #156]	; (8010ff8 <tcp_abandon+0x178>)
 8010f5a:	2201      	movs	r2, #1
 8010f5c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d004      	beq.n	8010f70 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f000 fed6 	bl	8011d1c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d004      	beq.n	8010f82 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f000 fecd 	bl	8011d1c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d004      	beq.n	8010f94 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f000 fec4 	bl	8011d1c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8010f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d00e      	beq.n	8010fb8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010f9a:	6879      	ldr	r1, [r7, #4]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	687a      	ldr	r2, [r7, #4]
 8010fa2:	8b12      	ldrh	r2, [r2, #24]
 8010fa4:	9202      	str	r2, [sp, #8]
 8010fa6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010fa8:	9201      	str	r2, [sp, #4]
 8010faa:	9300      	str	r3, [sp, #0]
 8010fac:	460b      	mov	r3, r1
 8010fae:	697a      	ldr	r2, [r7, #20]
 8010fb0:	69b9      	ldr	r1, [r7, #24]
 8010fb2:	6878      	ldr	r0, [r7, #4]
 8010fb4:	f005 fbb6 	bl	8016724 <tcp_rst>
    }
    last_state = pcb->state;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	7d1b      	ldrb	r3, [r3, #20]
 8010fbc:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010fbe:	6878      	ldr	r0, [r7, #4]
 8010fc0:	f7ff fd34 	bl	8010a2c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8010fc4:	693b      	ldr	r3, [r7, #16]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d004      	beq.n	8010fd4 <tcp_abandon+0x154>
 8010fca:	693b      	ldr	r3, [r7, #16]
 8010fcc:	f06f 010c 	mvn.w	r1, #12
 8010fd0:	68f8      	ldr	r0, [r7, #12]
 8010fd2:	4798      	blx	r3
  }
}
 8010fd4:	3728      	adds	r7, #40	; 0x28
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	bd80      	pop	{r7, pc}
 8010fda:	bf00      	nop
 8010fdc:	0801b9c4 	.word	0x0801b9c4
 8010fe0:	0801bb08 	.word	0x0801bb08
 8010fe4:	0801ba08 	.word	0x0801ba08
 8010fe8:	0801bb24 	.word	0x0801bb24
 8010fec:	240078ac 	.word	0x240078ac
 8010ff0:	240078a8 	.word	0x240078a8
 8010ff4:	2400789c 	.word	0x2400789c
 8010ff8:	24007898 	.word	0x24007898

08010ffc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b082      	sub	sp, #8
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011004:	2101      	movs	r1, #1
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f7ff ff3a 	bl	8010e80 <tcp_abandon>
}
 801100c:	bf00      	nop
 801100e:	3708      	adds	r7, #8
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}

08011014 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011014:	b580      	push	{r7, lr}
 8011016:	b088      	sub	sp, #32
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	4613      	mov	r3, r2
 8011020:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8011022:	2304      	movs	r3, #4
 8011024:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d101      	bne.n	8011030 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 801102c:	4b3e      	ldr	r3, [pc, #248]	; (8011128 <tcp_bind+0x114>)
 801102e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d109      	bne.n	801104a <tcp_bind+0x36>
 8011036:	4b3d      	ldr	r3, [pc, #244]	; (801112c <tcp_bind+0x118>)
 8011038:	f240 22a9 	movw	r2, #681	; 0x2a9
 801103c:	493c      	ldr	r1, [pc, #240]	; (8011130 <tcp_bind+0x11c>)
 801103e:	483d      	ldr	r0, [pc, #244]	; (8011134 <tcp_bind+0x120>)
 8011040:	f008 fe90 	bl	8019d64 <iprintf>
 8011044:	f06f 030f 	mvn.w	r3, #15
 8011048:	e06a      	b.n	8011120 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	7d1b      	ldrb	r3, [r3, #20]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d009      	beq.n	8011066 <tcp_bind+0x52>
 8011052:	4b36      	ldr	r3, [pc, #216]	; (801112c <tcp_bind+0x118>)
 8011054:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011058:	4937      	ldr	r1, [pc, #220]	; (8011138 <tcp_bind+0x124>)
 801105a:	4836      	ldr	r0, [pc, #216]	; (8011134 <tcp_bind+0x120>)
 801105c:	f008 fe82 	bl	8019d64 <iprintf>
 8011060:	f06f 0305 	mvn.w	r3, #5
 8011064:	e05c      	b.n	8011120 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8011066:	88fb      	ldrh	r3, [r7, #6]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d109      	bne.n	8011080 <tcp_bind+0x6c>
    port = tcp_new_port();
 801106c:	f000 f9f0 	bl	8011450 <tcp_new_port>
 8011070:	4603      	mov	r3, r0
 8011072:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011074:	88fb      	ldrh	r3, [r7, #6]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d135      	bne.n	80110e6 <tcp_bind+0xd2>
      return ERR_BUF;
 801107a:	f06f 0301 	mvn.w	r3, #1
 801107e:	e04f      	b.n	8011120 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011080:	2300      	movs	r3, #0
 8011082:	61fb      	str	r3, [r7, #28]
 8011084:	e02b      	b.n	80110de <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8011086:	4a2d      	ldr	r2, [pc, #180]	; (801113c <tcp_bind+0x128>)
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801108e:	681b      	ldr	r3, [r3, #0]
 8011090:	61bb      	str	r3, [r7, #24]
 8011092:	e01e      	b.n	80110d2 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8011094:	69bb      	ldr	r3, [r7, #24]
 8011096:	8adb      	ldrh	r3, [r3, #22]
 8011098:	88fa      	ldrh	r2, [r7, #6]
 801109a:	429a      	cmp	r2, r3
 801109c:	d116      	bne.n	80110cc <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801109e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d010      	beq.n	80110c6 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 80110a4:	69bb      	ldr	r3, [r7, #24]
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d00c      	beq.n	80110c6 <tcp_bind+0xb2>
 80110ac:	68bb      	ldr	r3, [r7, #8]
 80110ae:	2b00      	cmp	r3, #0
 80110b0:	d009      	beq.n	80110c6 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 80110b2:	68bb      	ldr	r3, [r7, #8]
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d005      	beq.n	80110c6 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	68bb      	ldr	r3, [r7, #8]
 80110c0:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d102      	bne.n	80110cc <tcp_bind+0xb8>
              return ERR_USE;
 80110c6:	f06f 0307 	mvn.w	r3, #7
 80110ca:	e029      	b.n	8011120 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	61bb      	str	r3, [r7, #24]
 80110d2:	69bb      	ldr	r3, [r7, #24]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d1dd      	bne.n	8011094 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80110d8:	69fb      	ldr	r3, [r7, #28]
 80110da:	3301      	adds	r3, #1
 80110dc:	61fb      	str	r3, [r7, #28]
 80110de:	69fa      	ldr	r2, [r7, #28]
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	429a      	cmp	r2, r3
 80110e4:	dbcf      	blt.n	8011086 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d00c      	beq.n	8011106 <tcp_bind+0xf2>
 80110ec:	68bb      	ldr	r3, [r7, #8]
 80110ee:	681b      	ldr	r3, [r3, #0]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d008      	beq.n	8011106 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80110f4:	68bb      	ldr	r3, [r7, #8]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d002      	beq.n	8011100 <tcp_bind+0xec>
 80110fa:	68bb      	ldr	r3, [r7, #8]
 80110fc:	681b      	ldr	r3, [r3, #0]
 80110fe:	e000      	b.n	8011102 <tcp_bind+0xee>
 8011100:	2300      	movs	r3, #0
 8011102:	68fa      	ldr	r2, [r7, #12]
 8011104:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	88fa      	ldrh	r2, [r7, #6]
 801110a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801110c:	4b0c      	ldr	r3, [pc, #48]	; (8011140 <tcp_bind+0x12c>)
 801110e:	681a      	ldr	r2, [r3, #0]
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	60da      	str	r2, [r3, #12]
 8011114:	4a0a      	ldr	r2, [pc, #40]	; (8011140 <tcp_bind+0x12c>)
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	6013      	str	r3, [r2, #0]
 801111a:	f005 fcc5 	bl	8016aa8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 801111e:	2300      	movs	r3, #0
}
 8011120:	4618      	mov	r0, r3
 8011122:	3720      	adds	r7, #32
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}
 8011128:	0801e21c 	.word	0x0801e21c
 801112c:	0801b9c4 	.word	0x0801b9c4
 8011130:	0801bb58 	.word	0x0801bb58
 8011134:	0801ba08 	.word	0x0801ba08
 8011138:	0801bb70 	.word	0x0801bb70
 801113c:	0801e1f4 	.word	0x0801e1f4
 8011140:	240078a8 	.word	0x240078a8

08011144 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8011144:	b580      	push	{r7, lr}
 8011146:	b084      	sub	sp, #16
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	4613      	mov	r3, r2
 8011150:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d106      	bne.n	8011166 <tcp_accept_null+0x22>
 8011158:	4b07      	ldr	r3, [pc, #28]	; (8011178 <tcp_accept_null+0x34>)
 801115a:	f240 320f 	movw	r2, #783	; 0x30f
 801115e:	4907      	ldr	r1, [pc, #28]	; (801117c <tcp_accept_null+0x38>)
 8011160:	4807      	ldr	r0, [pc, #28]	; (8011180 <tcp_accept_null+0x3c>)
 8011162:	f008 fdff 	bl	8019d64 <iprintf>

  tcp_abort(pcb);
 8011166:	68b8      	ldr	r0, [r7, #8]
 8011168:	f7ff ff48 	bl	8010ffc <tcp_abort>

  return ERR_ABRT;
 801116c:	f06f 030c 	mvn.w	r3, #12
}
 8011170:	4618      	mov	r0, r3
 8011172:	3710      	adds	r7, #16
 8011174:	46bd      	mov	sp, r7
 8011176:	bd80      	pop	{r7, pc}
 8011178:	0801b9c4 	.word	0x0801b9c4
 801117c:	0801bb98 	.word	0x0801bb98
 8011180:	0801ba08 	.word	0x0801ba08

08011184 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 8011184:	b580      	push	{r7, lr}
 8011186:	b082      	sub	sp, #8
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	460b      	mov	r3, r1
 801118e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8011190:	78fb      	ldrb	r3, [r7, #3]
 8011192:	2200      	movs	r2, #0
 8011194:	4619      	mov	r1, r3
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f806 	bl	80111a8 <tcp_listen_with_backlog_and_err>
 801119c:	4603      	mov	r3, r0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3708      	adds	r7, #8
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b088      	sub	sp, #32
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	460b      	mov	r3, r1
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 80111b6:	2300      	movs	r3, #0
 80111b8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d109      	bne.n	80111d4 <tcp_listen_with_backlog_and_err+0x2c>
 80111c0:	4b47      	ldr	r3, [pc, #284]	; (80112e0 <tcp_listen_with_backlog_and_err+0x138>)
 80111c2:	f240 3259 	movw	r2, #857	; 0x359
 80111c6:	4947      	ldr	r1, [pc, #284]	; (80112e4 <tcp_listen_with_backlog_and_err+0x13c>)
 80111c8:	4847      	ldr	r0, [pc, #284]	; (80112e8 <tcp_listen_with_backlog_and_err+0x140>)
 80111ca:	f008 fdcb 	bl	8019d64 <iprintf>
 80111ce:	23f0      	movs	r3, #240	; 0xf0
 80111d0:	76fb      	strb	r3, [r7, #27]
 80111d2:	e079      	b.n	80112c8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	7d1b      	ldrb	r3, [r3, #20]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d009      	beq.n	80111f0 <tcp_listen_with_backlog_and_err+0x48>
 80111dc:	4b40      	ldr	r3, [pc, #256]	; (80112e0 <tcp_listen_with_backlog_and_err+0x138>)
 80111de:	f240 325a 	movw	r2, #858	; 0x35a
 80111e2:	4942      	ldr	r1, [pc, #264]	; (80112ec <tcp_listen_with_backlog_and_err+0x144>)
 80111e4:	4840      	ldr	r0, [pc, #256]	; (80112e8 <tcp_listen_with_backlog_and_err+0x140>)
 80111e6:	f008 fdbd 	bl	8019d64 <iprintf>
 80111ea:	23f1      	movs	r3, #241	; 0xf1
 80111ec:	76fb      	strb	r3, [r7, #27]
 80111ee:	e06b      	b.n	80112c8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 80111f0:	68fb      	ldr	r3, [r7, #12]
 80111f2:	7d1b      	ldrb	r3, [r3, #20]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	d104      	bne.n	8011202 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 80111fc:	23f7      	movs	r3, #247	; 0xf7
 80111fe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011200:	e062      	b.n	80112c8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8011202:	2002      	movs	r0, #2
 8011204:	f7fe fa3c 	bl	800f680 <memp_malloc>
 8011208:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 801120a:	69fb      	ldr	r3, [r7, #28]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d102      	bne.n	8011216 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8011210:	23ff      	movs	r3, #255	; 0xff
 8011212:	76fb      	strb	r3, [r7, #27]
    goto done;
 8011214:	e058      	b.n	80112c8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8011216:	68fb      	ldr	r3, [r7, #12]
 8011218:	691a      	ldr	r2, [r3, #16]
 801121a:	69fb      	ldr	r3, [r7, #28]
 801121c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801121e:	68fb      	ldr	r3, [r7, #12]
 8011220:	8ada      	ldrh	r2, [r3, #22]
 8011222:	69fb      	ldr	r3, [r7, #28]
 8011224:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8011226:	69fb      	ldr	r3, [r7, #28]
 8011228:	2201      	movs	r2, #1
 801122a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	7d5a      	ldrb	r2, [r3, #21]
 8011230:	69fb      	ldr	r3, [r7, #28]
 8011232:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	7a5a      	ldrb	r2, [r3, #9]
 8011238:	69fb      	ldr	r3, [r7, #28]
 801123a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801123c:	69fb      	ldr	r3, [r7, #28]
 801123e:	2200      	movs	r2, #0
 8011240:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	7ada      	ldrb	r2, [r3, #11]
 8011246:	69fb      	ldr	r3, [r7, #28]
 8011248:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 801124a:	68fb      	ldr	r3, [r7, #12]
 801124c:	7a9a      	ldrb	r2, [r3, #10]
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	681a      	ldr	r2, [r3, #0]
 8011256:	69fb      	ldr	r3, [r7, #28]
 8011258:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	8adb      	ldrh	r3, [r3, #22]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d021      	beq.n	80112a6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8011262:	4b23      	ldr	r3, [pc, #140]	; (80112f0 <tcp_listen_with_backlog_and_err+0x148>)
 8011264:	681b      	ldr	r3, [r3, #0]
 8011266:	68fa      	ldr	r2, [r7, #12]
 8011268:	429a      	cmp	r2, r3
 801126a:	d105      	bne.n	8011278 <tcp_listen_with_backlog_and_err+0xd0>
 801126c:	4b20      	ldr	r3, [pc, #128]	; (80112f0 <tcp_listen_with_backlog_and_err+0x148>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	68db      	ldr	r3, [r3, #12]
 8011272:	4a1f      	ldr	r2, [pc, #124]	; (80112f0 <tcp_listen_with_backlog_and_err+0x148>)
 8011274:	6013      	str	r3, [r2, #0]
 8011276:	e013      	b.n	80112a0 <tcp_listen_with_backlog_and_err+0xf8>
 8011278:	4b1d      	ldr	r3, [pc, #116]	; (80112f0 <tcp_listen_with_backlog_and_err+0x148>)
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	617b      	str	r3, [r7, #20]
 801127e:	e00c      	b.n	801129a <tcp_listen_with_backlog_and_err+0xf2>
 8011280:	697b      	ldr	r3, [r7, #20]
 8011282:	68db      	ldr	r3, [r3, #12]
 8011284:	68fa      	ldr	r2, [r7, #12]
 8011286:	429a      	cmp	r2, r3
 8011288:	d104      	bne.n	8011294 <tcp_listen_with_backlog_and_err+0xec>
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	68da      	ldr	r2, [r3, #12]
 801128e:	697b      	ldr	r3, [r7, #20]
 8011290:	60da      	str	r2, [r3, #12]
 8011292:	e005      	b.n	80112a0 <tcp_listen_with_backlog_and_err+0xf8>
 8011294:	697b      	ldr	r3, [r7, #20]
 8011296:	68db      	ldr	r3, [r3, #12]
 8011298:	617b      	str	r3, [r7, #20]
 801129a:	697b      	ldr	r3, [r7, #20]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d1ef      	bne.n	8011280 <tcp_listen_with_backlog_and_err+0xd8>
 80112a0:	68fb      	ldr	r3, [r7, #12]
 80112a2:	2200      	movs	r2, #0
 80112a4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 80112a6:	68f8      	ldr	r0, [r7, #12]
 80112a8:	f7ff fbc0 	bl	8010a2c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80112ac:	69fb      	ldr	r3, [r7, #28]
 80112ae:	4a11      	ldr	r2, [pc, #68]	; (80112f4 <tcp_listen_with_backlog_and_err+0x14c>)
 80112b0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80112b2:	4b11      	ldr	r3, [pc, #68]	; (80112f8 <tcp_listen_with_backlog_and_err+0x150>)
 80112b4:	681a      	ldr	r2, [r3, #0]
 80112b6:	69fb      	ldr	r3, [r7, #28]
 80112b8:	60da      	str	r2, [r3, #12]
 80112ba:	4a0f      	ldr	r2, [pc, #60]	; (80112f8 <tcp_listen_with_backlog_and_err+0x150>)
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	6013      	str	r3, [r2, #0]
 80112c0:	f005 fbf2 	bl	8016aa8 <tcp_timer_needed>
  res = ERR_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d002      	beq.n	80112d4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	7efa      	ldrb	r2, [r7, #27]
 80112d2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 80112d4:	69fb      	ldr	r3, [r7, #28]
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3720      	adds	r7, #32
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	bf00      	nop
 80112e0:	0801b9c4 	.word	0x0801b9c4
 80112e4:	0801bbb8 	.word	0x0801bbb8
 80112e8:	0801ba08 	.word	0x0801ba08
 80112ec:	0801bbe8 	.word	0x0801bbe8
 80112f0:	240078a8 	.word	0x240078a8
 80112f4:	08011145 	.word	0x08011145
 80112f8:	240078a4 	.word	0x240078a4

080112fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d106      	bne.n	8011318 <tcp_update_rcv_ann_wnd+0x1c>
 801130a:	4b25      	ldr	r3, [pc, #148]	; (80113a0 <tcp_update_rcv_ann_wnd+0xa4>)
 801130c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011310:	4924      	ldr	r1, [pc, #144]	; (80113a4 <tcp_update_rcv_ann_wnd+0xa8>)
 8011312:	4825      	ldr	r0, [pc, #148]	; (80113a8 <tcp_update_rcv_ann_wnd+0xac>)
 8011314:	f008 fd26 	bl	8019d64 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801131c:	687a      	ldr	r2, [r7, #4]
 801131e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011320:	4413      	add	r3, r2
 8011322:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801132c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011330:	bf28      	it	cs
 8011332:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011336:	b292      	uxth	r2, r2
 8011338:	4413      	add	r3, r2
 801133a:	68fa      	ldr	r2, [r7, #12]
 801133c:	1ad3      	subs	r3, r2, r3
 801133e:	2b00      	cmp	r3, #0
 8011340:	db08      	blt.n	8011354 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801134e:	68fa      	ldr	r2, [r7, #12]
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	e020      	b.n	8011396 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801135c:	1ad3      	subs	r3, r2, r3
 801135e:	2b00      	cmp	r3, #0
 8011360:	dd03      	ble.n	801136a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2200      	movs	r2, #0
 8011366:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011368:	e014      	b.n	8011394 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801137c:	d306      	bcc.n	801138c <tcp_update_rcv_ann_wnd+0x90>
 801137e:	4b08      	ldr	r3, [pc, #32]	; (80113a0 <tcp_update_rcv_ann_wnd+0xa4>)
 8011380:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011384:	4909      	ldr	r1, [pc, #36]	; (80113ac <tcp_update_rcv_ann_wnd+0xb0>)
 8011386:	4808      	ldr	r0, [pc, #32]	; (80113a8 <tcp_update_rcv_ann_wnd+0xac>)
 8011388:	f008 fcec 	bl	8019d64 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801138c:	68bb      	ldr	r3, [r7, #8]
 801138e:	b29a      	uxth	r2, r3
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011394:	2300      	movs	r3, #0
  }
}
 8011396:	4618      	mov	r0, r3
 8011398:	3710      	adds	r7, #16
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	0801b9c4 	.word	0x0801b9c4
 80113a4:	0801bc20 	.word	0x0801bc20
 80113a8:	0801ba08 	.word	0x0801ba08
 80113ac:	0801bc44 	.word	0x0801bc44

080113b0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
 80113b8:	460b      	mov	r3, r1
 80113ba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80113bc:	687b      	ldr	r3, [r7, #4]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d107      	bne.n	80113d2 <tcp_recved+0x22>
 80113c2:	4b1f      	ldr	r3, [pc, #124]	; (8011440 <tcp_recved+0x90>)
 80113c4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80113c8:	491e      	ldr	r1, [pc, #120]	; (8011444 <tcp_recved+0x94>)
 80113ca:	481f      	ldr	r0, [pc, #124]	; (8011448 <tcp_recved+0x98>)
 80113cc:	f008 fcca 	bl	8019d64 <iprintf>
 80113d0:	e032      	b.n	8011438 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	7d1b      	ldrb	r3, [r3, #20]
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d106      	bne.n	80113e8 <tcp_recved+0x38>
 80113da:	4b19      	ldr	r3, [pc, #100]	; (8011440 <tcp_recved+0x90>)
 80113dc:	f240 32d2 	movw	r2, #978	; 0x3d2
 80113e0:	491a      	ldr	r1, [pc, #104]	; (801144c <tcp_recved+0x9c>)
 80113e2:	4819      	ldr	r0, [pc, #100]	; (8011448 <tcp_recved+0x98>)
 80113e4:	f008 fcbe 	bl	8019d64 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80113ec:	887b      	ldrh	r3, [r7, #2]
 80113ee:	4413      	add	r3, r2
 80113f0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80113f2:	89fb      	ldrh	r3, [r7, #14]
 80113f4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80113f8:	d804      	bhi.n	8011404 <tcp_recved+0x54>
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80113fe:	89fa      	ldrh	r2, [r7, #14]
 8011400:	429a      	cmp	r2, r3
 8011402:	d204      	bcs.n	801140e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801140a:	851a      	strh	r2, [r3, #40]	; 0x28
 801140c:	e002      	b.n	8011414 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801140e:	687b      	ldr	r3, [r7, #4]
 8011410:	89fa      	ldrh	r2, [r7, #14]
 8011412:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f7ff ff71 	bl	80112fc <tcp_update_rcv_ann_wnd>
 801141a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011422:	d309      	bcc.n	8011438 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	8b5b      	ldrh	r3, [r3, #26]
 8011428:	f043 0302 	orr.w	r3, r3, #2
 801142c:	b29a      	uxth	r2, r3
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011432:	6878      	ldr	r0, [r7, #4]
 8011434:	f004 fbc2 	bl	8015bbc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011438:	3710      	adds	r7, #16
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	0801b9c4 	.word	0x0801b9c4
 8011444:	0801bc60 	.word	0x0801bc60
 8011448:	0801ba08 	.word	0x0801ba08
 801144c:	0801bc78 	.word	0x0801bc78

08011450 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011450:	b480      	push	{r7}
 8011452:	b083      	sub	sp, #12
 8011454:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011456:	2300      	movs	r3, #0
 8011458:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801145a:	4b1e      	ldr	r3, [pc, #120]	; (80114d4 <tcp_new_port+0x84>)
 801145c:	881b      	ldrh	r3, [r3, #0]
 801145e:	3301      	adds	r3, #1
 8011460:	b29a      	uxth	r2, r3
 8011462:	4b1c      	ldr	r3, [pc, #112]	; (80114d4 <tcp_new_port+0x84>)
 8011464:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8011466:	4b1b      	ldr	r3, [pc, #108]	; (80114d4 <tcp_new_port+0x84>)
 8011468:	881b      	ldrh	r3, [r3, #0]
 801146a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801146e:	4293      	cmp	r3, r2
 8011470:	d103      	bne.n	801147a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011472:	4b18      	ldr	r3, [pc, #96]	; (80114d4 <tcp_new_port+0x84>)
 8011474:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011478:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801147a:	2300      	movs	r3, #0
 801147c:	71fb      	strb	r3, [r7, #7]
 801147e:	e01e      	b.n	80114be <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011480:	79fb      	ldrb	r3, [r7, #7]
 8011482:	4a15      	ldr	r2, [pc, #84]	; (80114d8 <tcp_new_port+0x88>)
 8011484:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	603b      	str	r3, [r7, #0]
 801148c:	e011      	b.n	80114b2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 801148e:	683b      	ldr	r3, [r7, #0]
 8011490:	8ada      	ldrh	r2, [r3, #22]
 8011492:	4b10      	ldr	r3, [pc, #64]	; (80114d4 <tcp_new_port+0x84>)
 8011494:	881b      	ldrh	r3, [r3, #0]
 8011496:	429a      	cmp	r2, r3
 8011498:	d108      	bne.n	80114ac <tcp_new_port+0x5c>
        n++;
 801149a:	88bb      	ldrh	r3, [r7, #4]
 801149c:	3301      	adds	r3, #1
 801149e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80114a0:	88bb      	ldrh	r3, [r7, #4]
 80114a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80114a6:	d3d8      	bcc.n	801145a <tcp_new_port+0xa>
          return 0;
 80114a8:	2300      	movs	r3, #0
 80114aa:	e00d      	b.n	80114c8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	68db      	ldr	r3, [r3, #12]
 80114b0:	603b      	str	r3, [r7, #0]
 80114b2:	683b      	ldr	r3, [r7, #0]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d1ea      	bne.n	801148e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80114b8:	79fb      	ldrb	r3, [r7, #7]
 80114ba:	3301      	adds	r3, #1
 80114bc:	71fb      	strb	r3, [r7, #7]
 80114be:	79fb      	ldrb	r3, [r7, #7]
 80114c0:	2b03      	cmp	r3, #3
 80114c2:	d9dd      	bls.n	8011480 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80114c4:	4b03      	ldr	r3, [pc, #12]	; (80114d4 <tcp_new_port+0x84>)
 80114c6:	881b      	ldrh	r3, [r3, #0]
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	370c      	adds	r7, #12
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr
 80114d4:	24000030 	.word	0x24000030
 80114d8:	0801e1f4 	.word	0x0801e1f4

080114dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80114dc:	b5b0      	push	{r4, r5, r7, lr}
 80114de:	b090      	sub	sp, #64	; 0x40
 80114e0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80114e2:	2300      	movs	r3, #0
 80114e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80114e8:	4b94      	ldr	r3, [pc, #592]	; (801173c <tcp_slowtmr+0x260>)
 80114ea:	681b      	ldr	r3, [r3, #0]
 80114ec:	3301      	adds	r3, #1
 80114ee:	4a93      	ldr	r2, [pc, #588]	; (801173c <tcp_slowtmr+0x260>)
 80114f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80114f2:	4b93      	ldr	r3, [pc, #588]	; (8011740 <tcp_slowtmr+0x264>)
 80114f4:	781b      	ldrb	r3, [r3, #0]
 80114f6:	3301      	adds	r3, #1
 80114f8:	b2da      	uxtb	r2, r3
 80114fa:	4b91      	ldr	r3, [pc, #580]	; (8011740 <tcp_slowtmr+0x264>)
 80114fc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80114fe:	2300      	movs	r3, #0
 8011500:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011502:	4b90      	ldr	r3, [pc, #576]	; (8011744 <tcp_slowtmr+0x268>)
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011508:	e29d      	b.n	8011a46 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801150c:	7d1b      	ldrb	r3, [r3, #20]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d106      	bne.n	8011520 <tcp_slowtmr+0x44>
 8011512:	4b8d      	ldr	r3, [pc, #564]	; (8011748 <tcp_slowtmr+0x26c>)
 8011514:	f240 42be 	movw	r2, #1214	; 0x4be
 8011518:	498c      	ldr	r1, [pc, #560]	; (801174c <tcp_slowtmr+0x270>)
 801151a:	488d      	ldr	r0, [pc, #564]	; (8011750 <tcp_slowtmr+0x274>)
 801151c:	f008 fc22 	bl	8019d64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011522:	7d1b      	ldrb	r3, [r3, #20]
 8011524:	2b01      	cmp	r3, #1
 8011526:	d106      	bne.n	8011536 <tcp_slowtmr+0x5a>
 8011528:	4b87      	ldr	r3, [pc, #540]	; (8011748 <tcp_slowtmr+0x26c>)
 801152a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801152e:	4989      	ldr	r1, [pc, #548]	; (8011754 <tcp_slowtmr+0x278>)
 8011530:	4887      	ldr	r0, [pc, #540]	; (8011750 <tcp_slowtmr+0x274>)
 8011532:	f008 fc17 	bl	8019d64 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011538:	7d1b      	ldrb	r3, [r3, #20]
 801153a:	2b0a      	cmp	r3, #10
 801153c:	d106      	bne.n	801154c <tcp_slowtmr+0x70>
 801153e:	4b82      	ldr	r3, [pc, #520]	; (8011748 <tcp_slowtmr+0x26c>)
 8011540:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011544:	4984      	ldr	r1, [pc, #528]	; (8011758 <tcp_slowtmr+0x27c>)
 8011546:	4882      	ldr	r0, [pc, #520]	; (8011750 <tcp_slowtmr+0x274>)
 8011548:	f008 fc0c 	bl	8019d64 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154e:	7f9a      	ldrb	r2, [r3, #30]
 8011550:	4b7b      	ldr	r3, [pc, #492]	; (8011740 <tcp_slowtmr+0x264>)
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	429a      	cmp	r2, r3
 8011556:	d105      	bne.n	8011564 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801155c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155e:	68db      	ldr	r3, [r3, #12]
 8011560:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011562:	e270      	b.n	8011a46 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011564:	4b76      	ldr	r3, [pc, #472]	; (8011740 <tcp_slowtmr+0x264>)
 8011566:	781a      	ldrb	r2, [r3, #0]
 8011568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801156a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801156c:	2300      	movs	r3, #0
 801156e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011572:	2300      	movs	r3, #0
 8011574:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801157a:	7d1b      	ldrb	r3, [r3, #20]
 801157c:	2b02      	cmp	r3, #2
 801157e:	d10a      	bne.n	8011596 <tcp_slowtmr+0xba>
 8011580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011582:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011586:	2b05      	cmp	r3, #5
 8011588:	d905      	bls.n	8011596 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801158a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801158e:	3301      	adds	r3, #1
 8011590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011594:	e11e      	b.n	80117d4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011598:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801159c:	2b0b      	cmp	r3, #11
 801159e:	d905      	bls.n	80115ac <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80115a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115a4:	3301      	adds	r3, #1
 80115a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80115aa:	e113      	b.n	80117d4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80115ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ae:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d075      	beq.n	80116a2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80115b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d006      	beq.n	80115cc <tcp_slowtmr+0xf0>
 80115be:	4b62      	ldr	r3, [pc, #392]	; (8011748 <tcp_slowtmr+0x26c>)
 80115c0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80115c4:	4965      	ldr	r1, [pc, #404]	; (801175c <tcp_slowtmr+0x280>)
 80115c6:	4862      	ldr	r0, [pc, #392]	; (8011750 <tcp_slowtmr+0x274>)
 80115c8:	f008 fbcc 	bl	8019d64 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80115cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d106      	bne.n	80115e2 <tcp_slowtmr+0x106>
 80115d4:	4b5c      	ldr	r3, [pc, #368]	; (8011748 <tcp_slowtmr+0x26c>)
 80115d6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80115da:	4961      	ldr	r1, [pc, #388]	; (8011760 <tcp_slowtmr+0x284>)
 80115dc:	485c      	ldr	r0, [pc, #368]	; (8011750 <tcp_slowtmr+0x274>)
 80115de:	f008 fbc1 	bl	8019d64 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80115e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80115e8:	2b0b      	cmp	r3, #11
 80115ea:	d905      	bls.n	80115f8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80115ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80115f0:	3301      	adds	r3, #1
 80115f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80115f6:	e0ed      	b.n	80117d4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80115f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115fa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80115fe:	3b01      	subs	r3, #1
 8011600:	4a58      	ldr	r2, [pc, #352]	; (8011764 <tcp_slowtmr+0x288>)
 8011602:	5cd3      	ldrb	r3, [r2, r3]
 8011604:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011608:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801160c:	7c7a      	ldrb	r2, [r7, #17]
 801160e:	429a      	cmp	r2, r3
 8011610:	d907      	bls.n	8011622 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011614:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011618:	3301      	adds	r3, #1
 801161a:	b2da      	uxtb	r2, r3
 801161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801161e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011624:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011628:	7c7a      	ldrb	r2, [r7, #17]
 801162a:	429a      	cmp	r2, r3
 801162c:	f200 80d2 	bhi.w	80117d4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011630:	2301      	movs	r3, #1
 8011632:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011636:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801163a:	2b00      	cmp	r3, #0
 801163c:	d108      	bne.n	8011650 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801163e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011640:	f005 f964 	bl	801690c <tcp_zero_window_probe>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d014      	beq.n	8011674 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801164a:	2300      	movs	r3, #0
 801164c:	623b      	str	r3, [r7, #32]
 801164e:	e011      	b.n	8011674 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011652:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011656:	4619      	mov	r1, r3
 8011658:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801165a:	f004 f829 	bl	80156b0 <tcp_split_unsent_seg>
 801165e:	4603      	mov	r3, r0
 8011660:	2b00      	cmp	r3, #0
 8011662:	d107      	bne.n	8011674 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011666:	f004 faa9 	bl	8015bbc <tcp_output>
 801166a:	4603      	mov	r3, r0
 801166c:	2b00      	cmp	r3, #0
 801166e:	d101      	bne.n	8011674 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011670:	2300      	movs	r3, #0
 8011672:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011674:	6a3b      	ldr	r3, [r7, #32]
 8011676:	2b00      	cmp	r3, #0
 8011678:	f000 80ac 	beq.w	80117d4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801167c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801167e:	2200      	movs	r2, #0
 8011680:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011686:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801168a:	2b06      	cmp	r3, #6
 801168c:	f200 80a2 	bhi.w	80117d4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011692:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011696:	3301      	adds	r3, #1
 8011698:	b2da      	uxtb	r2, r3
 801169a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80116a0:	e098      	b.n	80117d4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80116a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	db0f      	blt.n	80116cc <tcp_slowtmr+0x1f0>
 80116ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80116b2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80116b6:	4293      	cmp	r3, r2
 80116b8:	d008      	beq.n	80116cc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80116ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116bc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80116c0:	b29b      	uxth	r3, r3
 80116c2:	3301      	adds	r3, #1
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	b21a      	sxth	r2, r3
 80116c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ca:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80116cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ce:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80116d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116d4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80116d8:	429a      	cmp	r2, r3
 80116da:	db7b      	blt.n	80117d4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80116dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116de:	f004 fd5f 	bl	80161a0 <tcp_rexmit_rto_prepare>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d007      	beq.n	80116f8 <tcp_slowtmr+0x21c>
 80116e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ec:	2b00      	cmp	r3, #0
 80116ee:	d171      	bne.n	80117d4 <tcp_slowtmr+0x2f8>
 80116f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d06d      	beq.n	80117d4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80116f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116fa:	7d1b      	ldrb	r3, [r3, #20]
 80116fc:	2b02      	cmp	r3, #2
 80116fe:	d03a      	beq.n	8011776 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011702:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011706:	2b0c      	cmp	r3, #12
 8011708:	bf28      	it	cs
 801170a:	230c      	movcs	r3, #12
 801170c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801170e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011710:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011714:	10db      	asrs	r3, r3, #3
 8011716:	b21b      	sxth	r3, r3
 8011718:	461a      	mov	r2, r3
 801171a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011720:	4413      	add	r3, r2
 8011722:	7efa      	ldrb	r2, [r7, #27]
 8011724:	4910      	ldr	r1, [pc, #64]	; (8011768 <tcp_slowtmr+0x28c>)
 8011726:	5c8a      	ldrb	r2, [r1, r2]
 8011728:	4093      	lsls	r3, r2
 801172a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011732:	4293      	cmp	r3, r2
 8011734:	dc1a      	bgt.n	801176c <tcp_slowtmr+0x290>
 8011736:	697b      	ldr	r3, [r7, #20]
 8011738:	b21a      	sxth	r2, r3
 801173a:	e019      	b.n	8011770 <tcp_slowtmr+0x294>
 801173c:	240078a0 	.word	0x240078a0
 8011740:	24004136 	.word	0x24004136
 8011744:	2400789c 	.word	0x2400789c
 8011748:	0801b9c4 	.word	0x0801b9c4
 801174c:	0801bd08 	.word	0x0801bd08
 8011750:	0801ba08 	.word	0x0801ba08
 8011754:	0801bd34 	.word	0x0801bd34
 8011758:	0801bd60 	.word	0x0801bd60
 801175c:	0801bd90 	.word	0x0801bd90
 8011760:	0801bdc4 	.word	0x0801bdc4
 8011764:	0801e1ec 	.word	0x0801e1ec
 8011768:	0801e1dc 	.word	0x0801e1dc
 801176c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011772:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8011776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011778:	2200      	movs	r2, #0
 801177a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011784:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011788:	4293      	cmp	r3, r2
 801178a:	bf28      	it	cs
 801178c:	4613      	movcs	r3, r2
 801178e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8011790:	8a7b      	ldrh	r3, [r7, #18]
 8011792:	085b      	lsrs	r3, r3, #1
 8011794:	b29a      	uxth	r2, r3
 8011796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011798:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80117a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117a6:	005b      	lsls	r3, r3, #1
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	429a      	cmp	r2, r3
 80117ac:	d206      	bcs.n	80117bc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80117ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117b2:	005b      	lsls	r3, r3, #1
 80117b4:	b29a      	uxth	r2, r3
 80117b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80117bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117be:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80117c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80117c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c8:	2200      	movs	r2, #0
 80117ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80117ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80117d0:	f004 fd56 	bl	8016280 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80117d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117d6:	7d1b      	ldrb	r3, [r3, #20]
 80117d8:	2b06      	cmp	r3, #6
 80117da:	d111      	bne.n	8011800 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80117dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117de:	8b5b      	ldrh	r3, [r3, #26]
 80117e0:	f003 0310 	and.w	r3, r3, #16
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00b      	beq.n	8011800 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80117e8:	4b9c      	ldr	r3, [pc, #624]	; (8011a5c <tcp_slowtmr+0x580>)
 80117ea:	681a      	ldr	r2, [r3, #0]
 80117ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117ee:	6a1b      	ldr	r3, [r3, #32]
 80117f0:	1ad3      	subs	r3, r2, r3
 80117f2:	2b28      	cmp	r3, #40	; 0x28
 80117f4:	d904      	bls.n	8011800 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80117f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117fa:	3301      	adds	r3, #1
 80117fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011802:	7a5b      	ldrb	r3, [r3, #9]
 8011804:	f003 0308 	and.w	r3, r3, #8
 8011808:	2b00      	cmp	r3, #0
 801180a:	d04a      	beq.n	80118a2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801180e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011810:	2b04      	cmp	r3, #4
 8011812:	d003      	beq.n	801181c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011816:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011818:	2b07      	cmp	r3, #7
 801181a:	d142      	bne.n	80118a2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801181c:	4b8f      	ldr	r3, [pc, #572]	; (8011a5c <tcp_slowtmr+0x580>)
 801181e:	681a      	ldr	r2, [r3, #0]
 8011820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011822:	6a1b      	ldr	r3, [r3, #32]
 8011824:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011828:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801182c:	4b8c      	ldr	r3, [pc, #560]	; (8011a60 <tcp_slowtmr+0x584>)
 801182e:	440b      	add	r3, r1
 8011830:	498c      	ldr	r1, [pc, #560]	; (8011a64 <tcp_slowtmr+0x588>)
 8011832:	fba1 1303 	umull	r1, r3, r1, r3
 8011836:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011838:	429a      	cmp	r2, r3
 801183a:	d90a      	bls.n	8011852 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801183c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011840:	3301      	adds	r3, #1
 8011842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011846:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801184a:	3301      	adds	r3, #1
 801184c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011850:	e027      	b.n	80118a2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011852:	4b82      	ldr	r3, [pc, #520]	; (8011a5c <tcp_slowtmr+0x580>)
 8011854:	681a      	ldr	r2, [r3, #0]
 8011856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011858:	6a1b      	ldr	r3, [r3, #32]
 801185a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801185c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801185e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011864:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011868:	4618      	mov	r0, r3
 801186a:	4b7f      	ldr	r3, [pc, #508]	; (8011a68 <tcp_slowtmr+0x58c>)
 801186c:	fb03 f300 	mul.w	r3, r3, r0
 8011870:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011872:	497c      	ldr	r1, [pc, #496]	; (8011a64 <tcp_slowtmr+0x588>)
 8011874:	fba1 1303 	umull	r1, r3, r1, r3
 8011878:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801187a:	429a      	cmp	r2, r3
 801187c:	d911      	bls.n	80118a2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801187e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011880:	f005 f804 	bl	801688c <tcp_keepalive>
 8011884:	4603      	mov	r3, r0
 8011886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801188a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801188e:	2b00      	cmp	r3, #0
 8011890:	d107      	bne.n	80118a2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8011892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011894:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011898:	3301      	adds	r3, #1
 801189a:	b2da      	uxtb	r2, r3
 801189c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801189e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80118a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d011      	beq.n	80118ce <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80118aa:	4b6c      	ldr	r3, [pc, #432]	; (8011a5c <tcp_slowtmr+0x580>)
 80118ac:	681a      	ldr	r2, [r3, #0]
 80118ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b0:	6a1b      	ldr	r3, [r3, #32]
 80118b2:	1ad2      	subs	r2, r2, r3
 80118b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80118ba:	4619      	mov	r1, r3
 80118bc:	460b      	mov	r3, r1
 80118be:	005b      	lsls	r3, r3, #1
 80118c0:	440b      	add	r3, r1
 80118c2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80118c4:	429a      	cmp	r2, r3
 80118c6:	d302      	bcc.n	80118ce <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80118c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80118ca:	f000 fec3 	bl	8012654 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80118ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d0:	7d1b      	ldrb	r3, [r3, #20]
 80118d2:	2b03      	cmp	r3, #3
 80118d4:	d10b      	bne.n	80118ee <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80118d6:	4b61      	ldr	r3, [pc, #388]	; (8011a5c <tcp_slowtmr+0x580>)
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118dc:	6a1b      	ldr	r3, [r3, #32]
 80118de:	1ad3      	subs	r3, r2, r3
 80118e0:	2b28      	cmp	r3, #40	; 0x28
 80118e2:	d904      	bls.n	80118ee <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80118e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80118e8:	3301      	adds	r3, #1
 80118ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80118ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118f0:	7d1b      	ldrb	r3, [r3, #20]
 80118f2:	2b09      	cmp	r3, #9
 80118f4:	d10b      	bne.n	801190e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80118f6:	4b59      	ldr	r3, [pc, #356]	; (8011a5c <tcp_slowtmr+0x580>)
 80118f8:	681a      	ldr	r2, [r3, #0]
 80118fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fc:	6a1b      	ldr	r3, [r3, #32]
 80118fe:	1ad3      	subs	r3, r2, r3
 8011900:	2bf0      	cmp	r3, #240	; 0xf0
 8011902:	d904      	bls.n	801190e <tcp_slowtmr+0x432>
        ++pcb_remove;
 8011904:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011908:	3301      	adds	r3, #1
 801190a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801190e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011912:	2b00      	cmp	r3, #0
 8011914:	d060      	beq.n	80119d8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801191c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801191e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011920:	f000 fce4 	bl	80122ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011926:	2b00      	cmp	r3, #0
 8011928:	d010      	beq.n	801194c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801192a:	4b50      	ldr	r3, [pc, #320]	; (8011a6c <tcp_slowtmr+0x590>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011930:	429a      	cmp	r2, r3
 8011932:	d106      	bne.n	8011942 <tcp_slowtmr+0x466>
 8011934:	4b4e      	ldr	r3, [pc, #312]	; (8011a70 <tcp_slowtmr+0x594>)
 8011936:	f240 526d 	movw	r2, #1389	; 0x56d
 801193a:	494e      	ldr	r1, [pc, #312]	; (8011a74 <tcp_slowtmr+0x598>)
 801193c:	484e      	ldr	r0, [pc, #312]	; (8011a78 <tcp_slowtmr+0x59c>)
 801193e:	f008 fa11 	bl	8019d64 <iprintf>
        prev->next = pcb->next;
 8011942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011944:	68da      	ldr	r2, [r3, #12]
 8011946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011948:	60da      	str	r2, [r3, #12]
 801194a:	e00f      	b.n	801196c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801194c:	4b47      	ldr	r3, [pc, #284]	; (8011a6c <tcp_slowtmr+0x590>)
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011952:	429a      	cmp	r2, r3
 8011954:	d006      	beq.n	8011964 <tcp_slowtmr+0x488>
 8011956:	4b46      	ldr	r3, [pc, #280]	; (8011a70 <tcp_slowtmr+0x594>)
 8011958:	f240 5271 	movw	r2, #1393	; 0x571
 801195c:	4947      	ldr	r1, [pc, #284]	; (8011a7c <tcp_slowtmr+0x5a0>)
 801195e:	4846      	ldr	r0, [pc, #280]	; (8011a78 <tcp_slowtmr+0x59c>)
 8011960:	f008 fa00 	bl	8019d64 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011966:	68db      	ldr	r3, [r3, #12]
 8011968:	4a40      	ldr	r2, [pc, #256]	; (8011a6c <tcp_slowtmr+0x590>)
 801196a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801196c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011970:	2b00      	cmp	r3, #0
 8011972:	d013      	beq.n	801199c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011976:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801197a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801197c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011980:	3304      	adds	r3, #4
 8011982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011984:	8ad2      	ldrh	r2, [r2, #22]
 8011986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011988:	8b09      	ldrh	r1, [r1, #24]
 801198a:	9102      	str	r1, [sp, #8]
 801198c:	9201      	str	r2, [sp, #4]
 801198e:	9300      	str	r3, [sp, #0]
 8011990:	462b      	mov	r3, r5
 8011992:	4622      	mov	r2, r4
 8011994:	4601      	mov	r1, r0
 8011996:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011998:	f004 fec4 	bl	8016724 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801199c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801199e:	691b      	ldr	r3, [r3, #16]
 80119a0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80119a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a4:	7d1b      	ldrb	r3, [r3, #20]
 80119a6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80119a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119aa:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80119ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ae:	68db      	ldr	r3, [r3, #12]
 80119b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80119b2:	6838      	ldr	r0, [r7, #0]
 80119b4:	f7ff f83a 	bl	8010a2c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80119b8:	4b31      	ldr	r3, [pc, #196]	; (8011a80 <tcp_slowtmr+0x5a4>)
 80119ba:	2200      	movs	r2, #0
 80119bc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80119be:	68fb      	ldr	r3, [r7, #12]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d004      	beq.n	80119ce <tcp_slowtmr+0x4f2>
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	f06f 010c 	mvn.w	r1, #12
 80119ca:	68b8      	ldr	r0, [r7, #8]
 80119cc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80119ce:	4b2c      	ldr	r3, [pc, #176]	; (8011a80 <tcp_slowtmr+0x5a4>)
 80119d0:	781b      	ldrb	r3, [r3, #0]
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d037      	beq.n	8011a46 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80119d6:	e592      	b.n	80114fe <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80119d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119da:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80119dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119de:	68db      	ldr	r3, [r3, #12]
 80119e0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80119e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119e4:	7f1b      	ldrb	r3, [r3, #28]
 80119e6:	3301      	adds	r3, #1
 80119e8:	b2da      	uxtb	r2, r3
 80119ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119ec:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80119ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f0:	7f1a      	ldrb	r2, [r3, #28]
 80119f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f4:	7f5b      	ldrb	r3, [r3, #29]
 80119f6:	429a      	cmp	r2, r3
 80119f8:	d325      	bcc.n	8011a46 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80119fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119fc:	2200      	movs	r2, #0
 80119fe:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011a00:	4b1f      	ldr	r3, [pc, #124]	; (8011a80 <tcp_slowtmr+0x5a4>)
 8011a02:	2200      	movs	r2, #0
 8011a04:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d00b      	beq.n	8011a28 <tcp_slowtmr+0x54c>
 8011a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011a18:	6912      	ldr	r2, [r2, #16]
 8011a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a1c:	4610      	mov	r0, r2
 8011a1e:	4798      	blx	r3
 8011a20:	4603      	mov	r3, r0
 8011a22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011a26:	e002      	b.n	8011a2e <tcp_slowtmr+0x552>
 8011a28:	2300      	movs	r3, #0
 8011a2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011a2e:	4b14      	ldr	r3, [pc, #80]	; (8011a80 <tcp_slowtmr+0x5a4>)
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d000      	beq.n	8011a38 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8011a36:	e562      	b.n	80114fe <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011a38:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d102      	bne.n	8011a46 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8011a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011a42:	f004 f8bb 	bl	8015bbc <tcp_output>
  while (pcb != NULL) {
 8011a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	f47f ad5e 	bne.w	801150a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011a4e:	2300      	movs	r3, #0
 8011a50:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011a52:	4b0c      	ldr	r3, [pc, #48]	; (8011a84 <tcp_slowtmr+0x5a8>)
 8011a54:	681b      	ldr	r3, [r3, #0]
 8011a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011a58:	e069      	b.n	8011b2e <tcp_slowtmr+0x652>
 8011a5a:	bf00      	nop
 8011a5c:	240078a0 	.word	0x240078a0
 8011a60:	000a4cb8 	.word	0x000a4cb8
 8011a64:	10624dd3 	.word	0x10624dd3
 8011a68:	000124f8 	.word	0x000124f8
 8011a6c:	2400789c 	.word	0x2400789c
 8011a70:	0801b9c4 	.word	0x0801b9c4
 8011a74:	0801bdfc 	.word	0x0801bdfc
 8011a78:	0801ba08 	.word	0x0801ba08
 8011a7c:	0801be28 	.word	0x0801be28
 8011a80:	24007898 	.word	0x24007898
 8011a84:	240078ac 	.word	0x240078ac
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8a:	7d1b      	ldrb	r3, [r3, #20]
 8011a8c:	2b0a      	cmp	r3, #10
 8011a8e:	d006      	beq.n	8011a9e <tcp_slowtmr+0x5c2>
 8011a90:	4b2b      	ldr	r3, [pc, #172]	; (8011b40 <tcp_slowtmr+0x664>)
 8011a92:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011a96:	492b      	ldr	r1, [pc, #172]	; (8011b44 <tcp_slowtmr+0x668>)
 8011a98:	482b      	ldr	r0, [pc, #172]	; (8011b48 <tcp_slowtmr+0x66c>)
 8011a9a:	f008 f963 	bl	8019d64 <iprintf>
    pcb_remove = 0;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011aa4:	4b29      	ldr	r3, [pc, #164]	; (8011b4c <tcp_slowtmr+0x670>)
 8011aa6:	681a      	ldr	r2, [r3, #0]
 8011aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aaa:	6a1b      	ldr	r3, [r3, #32]
 8011aac:	1ad3      	subs	r3, r2, r3
 8011aae:	2bf0      	cmp	r3, #240	; 0xf0
 8011ab0:	d904      	bls.n	8011abc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ab6:	3301      	adds	r3, #1
 8011ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011abc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d02f      	beq.n	8011b24 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011ac4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ac6:	f000 fc11 	bl	80122ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d010      	beq.n	8011af2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011ad0:	4b1f      	ldr	r3, [pc, #124]	; (8011b50 <tcp_slowtmr+0x674>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d106      	bne.n	8011ae8 <tcp_slowtmr+0x60c>
 8011ada:	4b19      	ldr	r3, [pc, #100]	; (8011b40 <tcp_slowtmr+0x664>)
 8011adc:	f240 52af 	movw	r2, #1455	; 0x5af
 8011ae0:	491c      	ldr	r1, [pc, #112]	; (8011b54 <tcp_slowtmr+0x678>)
 8011ae2:	4819      	ldr	r0, [pc, #100]	; (8011b48 <tcp_slowtmr+0x66c>)
 8011ae4:	f008 f93e 	bl	8019d64 <iprintf>
        prev->next = pcb->next;
 8011ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aea:	68da      	ldr	r2, [r3, #12]
 8011aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aee:	60da      	str	r2, [r3, #12]
 8011af0:	e00f      	b.n	8011b12 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011af2:	4b17      	ldr	r3, [pc, #92]	; (8011b50 <tcp_slowtmr+0x674>)
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d006      	beq.n	8011b0a <tcp_slowtmr+0x62e>
 8011afc:	4b10      	ldr	r3, [pc, #64]	; (8011b40 <tcp_slowtmr+0x664>)
 8011afe:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011b02:	4915      	ldr	r1, [pc, #84]	; (8011b58 <tcp_slowtmr+0x67c>)
 8011b04:	4810      	ldr	r0, [pc, #64]	; (8011b48 <tcp_slowtmr+0x66c>)
 8011b06:	f008 f92d 	bl	8019d64 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b0c:	68db      	ldr	r3, [r3, #12]
 8011b0e:	4a10      	ldr	r2, [pc, #64]	; (8011b50 <tcp_slowtmr+0x674>)
 8011b10:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b14:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b18:	68db      	ldr	r3, [r3, #12]
 8011b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011b1c:	69f8      	ldr	r0, [r7, #28]
 8011b1e:	f7fe ff85 	bl	8010a2c <tcp_free>
 8011b22:	e004      	b.n	8011b2e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b26:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d1a9      	bne.n	8011a88 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011b34:	bf00      	nop
 8011b36:	bf00      	nop
 8011b38:	3730      	adds	r7, #48	; 0x30
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bdb0      	pop	{r4, r5, r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	0801b9c4 	.word	0x0801b9c4
 8011b44:	0801be54 	.word	0x0801be54
 8011b48:	0801ba08 	.word	0x0801ba08
 8011b4c:	240078a0 	.word	0x240078a0
 8011b50:	240078ac 	.word	0x240078ac
 8011b54:	0801be84 	.word	0x0801be84
 8011b58:	0801beac 	.word	0x0801beac

08011b5c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011b5c:	b580      	push	{r7, lr}
 8011b5e:	b082      	sub	sp, #8
 8011b60:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011b62:	4b2d      	ldr	r3, [pc, #180]	; (8011c18 <tcp_fasttmr+0xbc>)
 8011b64:	781b      	ldrb	r3, [r3, #0]
 8011b66:	3301      	adds	r3, #1
 8011b68:	b2da      	uxtb	r2, r3
 8011b6a:	4b2b      	ldr	r3, [pc, #172]	; (8011c18 <tcp_fasttmr+0xbc>)
 8011b6c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011b6e:	4b2b      	ldr	r3, [pc, #172]	; (8011c1c <tcp_fasttmr+0xc0>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011b74:	e048      	b.n	8011c08 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	7f9a      	ldrb	r2, [r3, #30]
 8011b7a:	4b27      	ldr	r3, [pc, #156]	; (8011c18 <tcp_fasttmr+0xbc>)
 8011b7c:	781b      	ldrb	r3, [r3, #0]
 8011b7e:	429a      	cmp	r2, r3
 8011b80:	d03f      	beq.n	8011c02 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011b82:	4b25      	ldr	r3, [pc, #148]	; (8011c18 <tcp_fasttmr+0xbc>)
 8011b84:	781a      	ldrb	r2, [r3, #0]
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	8b5b      	ldrh	r3, [r3, #26]
 8011b8e:	f003 0301 	and.w	r3, r3, #1
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d010      	beq.n	8011bb8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	8b5b      	ldrh	r3, [r3, #26]
 8011b9a:	f043 0302 	orr.w	r3, r3, #2
 8011b9e:	b29a      	uxth	r2, r3
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011ba4:	6878      	ldr	r0, [r7, #4]
 8011ba6:	f004 f809 	bl	8015bbc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8b5b      	ldrh	r3, [r3, #26]
 8011bae:	f023 0303 	bic.w	r3, r3, #3
 8011bb2:	b29a      	uxth	r2, r3
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	8b5b      	ldrh	r3, [r3, #26]
 8011bbc:	f003 0308 	and.w	r3, r3, #8
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d009      	beq.n	8011bd8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	8b5b      	ldrh	r3, [r3, #26]
 8011bc8:	f023 0308 	bic.w	r3, r3, #8
 8011bcc:	b29a      	uxth	r2, r3
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f7ff f8be 	bl	8010d54 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	68db      	ldr	r3, [r3, #12]
 8011bdc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	d00a      	beq.n	8011bfc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011be6:	4b0e      	ldr	r3, [pc, #56]	; (8011c20 <tcp_fasttmr+0xc4>)
 8011be8:	2200      	movs	r2, #0
 8011bea:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f000 f819 	bl	8011c24 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011bf2:	4b0b      	ldr	r3, [pc, #44]	; (8011c20 <tcp_fasttmr+0xc4>)
 8011bf4:	781b      	ldrb	r3, [r3, #0]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d000      	beq.n	8011bfc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011bfa:	e7b8      	b.n	8011b6e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	607b      	str	r3, [r7, #4]
 8011c00:	e002      	b.n	8011c08 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	68db      	ldr	r3, [r3, #12]
 8011c06:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d1b3      	bne.n	8011b76 <tcp_fasttmr+0x1a>
    }
  }
}
 8011c0e:	bf00      	nop
 8011c10:	bf00      	nop
 8011c12:	3708      	adds	r7, #8
 8011c14:	46bd      	mov	sp, r7
 8011c16:	bd80      	pop	{r7, pc}
 8011c18:	24004136 	.word	0x24004136
 8011c1c:	2400789c 	.word	0x2400789c
 8011c20:	24007898 	.word	0x24007898

08011c24 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011c24:	b590      	push	{r4, r7, lr}
 8011c26:	b085      	sub	sp, #20
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d109      	bne.n	8011c46 <tcp_process_refused_data+0x22>
 8011c32:	4b37      	ldr	r3, [pc, #220]	; (8011d10 <tcp_process_refused_data+0xec>)
 8011c34:	f240 6209 	movw	r2, #1545	; 0x609
 8011c38:	4936      	ldr	r1, [pc, #216]	; (8011d14 <tcp_process_refused_data+0xf0>)
 8011c3a:	4837      	ldr	r0, [pc, #220]	; (8011d18 <tcp_process_refused_data+0xf4>)
 8011c3c:	f008 f892 	bl	8019d64 <iprintf>
 8011c40:	f06f 030f 	mvn.w	r3, #15
 8011c44:	e060      	b.n	8011d08 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c4a:	7b5b      	ldrb	r3, [r3, #13]
 8011c4c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011c52:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	2200      	movs	r2, #0
 8011c58:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011c5a:	687b      	ldr	r3, [r7, #4]
 8011c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00b      	beq.n	8011c7c <tcp_process_refused_data+0x58>
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	6918      	ldr	r0, [r3, #16]
 8011c6e:	2300      	movs	r3, #0
 8011c70:	68ba      	ldr	r2, [r7, #8]
 8011c72:	6879      	ldr	r1, [r7, #4]
 8011c74:	47a0      	blx	r4
 8011c76:	4603      	mov	r3, r0
 8011c78:	73fb      	strb	r3, [r7, #15]
 8011c7a:	e007      	b.n	8011c8c <tcp_process_refused_data+0x68>
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	68ba      	ldr	r2, [r7, #8]
 8011c80:	6879      	ldr	r1, [r7, #4]
 8011c82:	2000      	movs	r0, #0
 8011c84:	f000 f8c2 	bl	8011e0c <tcp_recv_null>
 8011c88:	4603      	mov	r3, r0
 8011c8a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d12a      	bne.n	8011cea <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011c94:	7bbb      	ldrb	r3, [r7, #14]
 8011c96:	f003 0320 	and.w	r3, r3, #32
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d033      	beq.n	8011d06 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ca2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011ca6:	d005      	beq.n	8011cb4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011cac:	3301      	adds	r3, #1
 8011cae:	b29a      	uxth	r2, r3
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d00b      	beq.n	8011cd6 <tcp_process_refused_data+0xb2>
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	6918      	ldr	r0, [r3, #16]
 8011cc8:	2300      	movs	r3, #0
 8011cca:	2200      	movs	r2, #0
 8011ccc:	6879      	ldr	r1, [r7, #4]
 8011cce:	47a0      	blx	r4
 8011cd0:	4603      	mov	r3, r0
 8011cd2:	73fb      	strb	r3, [r7, #15]
 8011cd4:	e001      	b.n	8011cda <tcp_process_refused_data+0xb6>
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cde:	f113 0f0d 	cmn.w	r3, #13
 8011ce2:	d110      	bne.n	8011d06 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011ce4:	f06f 030c 	mvn.w	r3, #12
 8011ce8:	e00e      	b.n	8011d08 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011cee:	f113 0f0d 	cmn.w	r3, #13
 8011cf2:	d102      	bne.n	8011cfa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011cf4:	f06f 030c 	mvn.w	r3, #12
 8011cf8:	e006      	b.n	8011d08 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	68ba      	ldr	r2, [r7, #8]
 8011cfe:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011d00:	f06f 0304 	mvn.w	r3, #4
 8011d04:	e000      	b.n	8011d08 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011d06:	2300      	movs	r3, #0
}
 8011d08:	4618      	mov	r0, r3
 8011d0a:	3714      	adds	r7, #20
 8011d0c:	46bd      	mov	sp, r7
 8011d0e:	bd90      	pop	{r4, r7, pc}
 8011d10:	0801b9c4 	.word	0x0801b9c4
 8011d14:	0801bed4 	.word	0x0801bed4
 8011d18:	0801ba08 	.word	0x0801ba08

08011d1c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b084      	sub	sp, #16
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011d24:	e007      	b.n	8011d36 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011d2c:	6878      	ldr	r0, [r7, #4]
 8011d2e:	f000 f80a 	bl	8011d46 <tcp_seg_free>
    seg = next;
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d1f4      	bne.n	8011d26 <tcp_segs_free+0xa>
  }
}
 8011d3c:	bf00      	nop
 8011d3e:	bf00      	nop
 8011d40:	3710      	adds	r7, #16
 8011d42:	46bd      	mov	sp, r7
 8011d44:	bd80      	pop	{r7, pc}

08011d46 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011d46:	b580      	push	{r7, lr}
 8011d48:	b082      	sub	sp, #8
 8011d4a:	af00      	add	r7, sp, #0
 8011d4c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d00c      	beq.n	8011d6e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	685b      	ldr	r3, [r3, #4]
 8011d58:	2b00      	cmp	r3, #0
 8011d5a:	d004      	beq.n	8011d66 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011d5c:	687b      	ldr	r3, [r7, #4]
 8011d5e:	685b      	ldr	r3, [r3, #4]
 8011d60:	4618      	mov	r0, r3
 8011d62:	f7fe fba7 	bl	80104b4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011d66:	6879      	ldr	r1, [r7, #4]
 8011d68:	2003      	movs	r0, #3
 8011d6a:	f7fd fcff 	bl	800f76c <memp_free>
  }
}
 8011d6e:	bf00      	nop
 8011d70:	3708      	adds	r7, #8
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
	...

08011d78 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
 8011d80:	460b      	mov	r3, r1
 8011d82:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d107      	bne.n	8011d9a <tcp_setprio+0x22>
 8011d8a:	4b07      	ldr	r3, [pc, #28]	; (8011da8 <tcp_setprio+0x30>)
 8011d8c:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8011d90:	4906      	ldr	r1, [pc, #24]	; (8011dac <tcp_setprio+0x34>)
 8011d92:	4807      	ldr	r0, [pc, #28]	; (8011db0 <tcp_setprio+0x38>)
 8011d94:	f007 ffe6 	bl	8019d64 <iprintf>
 8011d98:	e002      	b.n	8011da0 <tcp_setprio+0x28>

  pcb->prio = prio;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	78fa      	ldrb	r2, [r7, #3]
 8011d9e:	755a      	strb	r2, [r3, #21]
}
 8011da0:	3708      	adds	r7, #8
 8011da2:	46bd      	mov	sp, r7
 8011da4:	bd80      	pop	{r7, pc}
 8011da6:	bf00      	nop
 8011da8:	0801b9c4 	.word	0x0801b9c4
 8011dac:	0801befc 	.word	0x0801befc
 8011db0:	0801ba08 	.word	0x0801ba08

08011db4 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011db4:	b580      	push	{r7, lr}
 8011db6:	b084      	sub	sp, #16
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d106      	bne.n	8011dd0 <tcp_seg_copy+0x1c>
 8011dc2:	4b0f      	ldr	r3, [pc, #60]	; (8011e00 <tcp_seg_copy+0x4c>)
 8011dc4:	f240 6282 	movw	r2, #1666	; 0x682
 8011dc8:	490e      	ldr	r1, [pc, #56]	; (8011e04 <tcp_seg_copy+0x50>)
 8011dca:	480f      	ldr	r0, [pc, #60]	; (8011e08 <tcp_seg_copy+0x54>)
 8011dcc:	f007 ffca 	bl	8019d64 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011dd0:	2003      	movs	r0, #3
 8011dd2:	f7fd fc55 	bl	800f680 <memp_malloc>
 8011dd6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011dd8:	68fb      	ldr	r3, [r7, #12]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d101      	bne.n	8011de2 <tcp_seg_copy+0x2e>
    return NULL;
 8011dde:	2300      	movs	r3, #0
 8011de0:	e00a      	b.n	8011df8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011de2:	2210      	movs	r2, #16
 8011de4:	6879      	ldr	r1, [r7, #4]
 8011de6:	68f8      	ldr	r0, [r7, #12]
 8011de8:	f007 ff4b 	bl	8019c82 <memcpy>
  pbuf_ref(cseg->p);
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	4618      	mov	r0, r3
 8011df2:	f7fe fc05 	bl	8010600 <pbuf_ref>
  return cseg;
 8011df6:	68fb      	ldr	r3, [r7, #12]
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}
 8011e00:	0801b9c4 	.word	0x0801b9c4
 8011e04:	0801bf18 	.word	0x0801bf18
 8011e08:	0801ba08 	.word	0x0801ba08

08011e0c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	60f8      	str	r0, [r7, #12]
 8011e14:	60b9      	str	r1, [r7, #8]
 8011e16:	607a      	str	r2, [r7, #4]
 8011e18:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e1a:	68bb      	ldr	r3, [r7, #8]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d109      	bne.n	8011e34 <tcp_recv_null+0x28>
 8011e20:	4b12      	ldr	r3, [pc, #72]	; (8011e6c <tcp_recv_null+0x60>)
 8011e22:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011e26:	4912      	ldr	r1, [pc, #72]	; (8011e70 <tcp_recv_null+0x64>)
 8011e28:	4812      	ldr	r0, [pc, #72]	; (8011e74 <tcp_recv_null+0x68>)
 8011e2a:	f007 ff9b 	bl	8019d64 <iprintf>
 8011e2e:	f06f 030f 	mvn.w	r3, #15
 8011e32:	e016      	b.n	8011e62 <tcp_recv_null+0x56>

  if (p != NULL) {
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d009      	beq.n	8011e4e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	891b      	ldrh	r3, [r3, #8]
 8011e3e:	4619      	mov	r1, r3
 8011e40:	68b8      	ldr	r0, [r7, #8]
 8011e42:	f7ff fab5 	bl	80113b0 <tcp_recved>
    pbuf_free(p);
 8011e46:	6878      	ldr	r0, [r7, #4]
 8011e48:	f7fe fb34 	bl	80104b4 <pbuf_free>
 8011e4c:	e008      	b.n	8011e60 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011e4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d104      	bne.n	8011e60 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8011e56:	68b8      	ldr	r0, [r7, #8]
 8011e58:	f7fe ffe6 	bl	8010e28 <tcp_close>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	e000      	b.n	8011e62 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011e60:	2300      	movs	r3, #0
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3710      	adds	r7, #16
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bd80      	pop	{r7, pc}
 8011e6a:	bf00      	nop
 8011e6c:	0801b9c4 	.word	0x0801b9c4
 8011e70:	0801bf34 	.word	0x0801bf34
 8011e74:	0801ba08 	.word	0x0801ba08

08011e78 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b086      	sub	sp, #24
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	4603      	mov	r3, r0
 8011e80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8011e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	db01      	blt.n	8011e8e <tcp_kill_prio+0x16>
 8011e8a:	79fb      	ldrb	r3, [r7, #7]
 8011e8c:	e000      	b.n	8011e90 <tcp_kill_prio+0x18>
 8011e8e:	237f      	movs	r3, #127	; 0x7f
 8011e90:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8011e92:	7afb      	ldrb	r3, [r7, #11]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d034      	beq.n	8011f02 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8011e98:	7afb      	ldrb	r3, [r7, #11]
 8011e9a:	3b01      	subs	r3, #1
 8011e9c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ea6:	4b19      	ldr	r3, [pc, #100]	; (8011f0c <tcp_kill_prio+0x94>)
 8011ea8:	681b      	ldr	r3, [r3, #0]
 8011eaa:	617b      	str	r3, [r7, #20]
 8011eac:	e01f      	b.n	8011eee <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8011eae:	697b      	ldr	r3, [r7, #20]
 8011eb0:	7d5b      	ldrb	r3, [r3, #21]
 8011eb2:	7afa      	ldrb	r2, [r7, #11]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d80c      	bhi.n	8011ed2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011eb8:	697b      	ldr	r3, [r7, #20]
 8011eba:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8011ebc:	7afa      	ldrb	r2, [r7, #11]
 8011ebe:	429a      	cmp	r2, r3
 8011ec0:	d112      	bne.n	8011ee8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8011ec2:	4b13      	ldr	r3, [pc, #76]	; (8011f10 <tcp_kill_prio+0x98>)
 8011ec4:	681a      	ldr	r2, [r3, #0]
 8011ec6:	697b      	ldr	r3, [r7, #20]
 8011ec8:	6a1b      	ldr	r3, [r3, #32]
 8011eca:	1ad3      	subs	r3, r2, r3
 8011ecc:	68fa      	ldr	r2, [r7, #12]
 8011ece:	429a      	cmp	r2, r3
 8011ed0:	d80a      	bhi.n	8011ee8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8011ed2:	4b0f      	ldr	r3, [pc, #60]	; (8011f10 <tcp_kill_prio+0x98>)
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	697b      	ldr	r3, [r7, #20]
 8011ed8:	6a1b      	ldr	r3, [r3, #32]
 8011eda:	1ad3      	subs	r3, r2, r3
 8011edc:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	7d5b      	ldrb	r3, [r3, #21]
 8011ee6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	68db      	ldr	r3, [r3, #12]
 8011eec:	617b      	str	r3, [r7, #20]
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d1dc      	bne.n	8011eae <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8011ef4:	693b      	ldr	r3, [r7, #16]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d004      	beq.n	8011f04 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011efa:	6938      	ldr	r0, [r7, #16]
 8011efc:	f7ff f87e 	bl	8010ffc <tcp_abort>
 8011f00:	e000      	b.n	8011f04 <tcp_kill_prio+0x8c>
    return;
 8011f02:	bf00      	nop
  }
}
 8011f04:	3718      	adds	r7, #24
 8011f06:	46bd      	mov	sp, r7
 8011f08:	bd80      	pop	{r7, pc}
 8011f0a:	bf00      	nop
 8011f0c:	2400789c 	.word	0x2400789c
 8011f10:	240078a0 	.word	0x240078a0

08011f14 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8011f14:	b580      	push	{r7, lr}
 8011f16:	b086      	sub	sp, #24
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011f1e:	79fb      	ldrb	r3, [r7, #7]
 8011f20:	2b08      	cmp	r3, #8
 8011f22:	d009      	beq.n	8011f38 <tcp_kill_state+0x24>
 8011f24:	79fb      	ldrb	r3, [r7, #7]
 8011f26:	2b09      	cmp	r3, #9
 8011f28:	d006      	beq.n	8011f38 <tcp_kill_state+0x24>
 8011f2a:	4b1a      	ldr	r3, [pc, #104]	; (8011f94 <tcp_kill_state+0x80>)
 8011f2c:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011f30:	4919      	ldr	r1, [pc, #100]	; (8011f98 <tcp_kill_state+0x84>)
 8011f32:	481a      	ldr	r0, [pc, #104]	; (8011f9c <tcp_kill_state+0x88>)
 8011f34:	f007 ff16 	bl	8019d64 <iprintf>

  inactivity = 0;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011f3c:	2300      	movs	r3, #0
 8011f3e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f40:	4b17      	ldr	r3, [pc, #92]	; (8011fa0 <tcp_kill_state+0x8c>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	617b      	str	r3, [r7, #20]
 8011f46:	e017      	b.n	8011f78 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011f48:	697b      	ldr	r3, [r7, #20]
 8011f4a:	7d1b      	ldrb	r3, [r3, #20]
 8011f4c:	79fa      	ldrb	r2, [r7, #7]
 8011f4e:	429a      	cmp	r2, r3
 8011f50:	d10f      	bne.n	8011f72 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011f52:	4b14      	ldr	r3, [pc, #80]	; (8011fa4 <tcp_kill_state+0x90>)
 8011f54:	681a      	ldr	r2, [r3, #0]
 8011f56:	697b      	ldr	r3, [r7, #20]
 8011f58:	6a1b      	ldr	r3, [r3, #32]
 8011f5a:	1ad3      	subs	r3, r2, r3
 8011f5c:	68fa      	ldr	r2, [r7, #12]
 8011f5e:	429a      	cmp	r2, r3
 8011f60:	d807      	bhi.n	8011f72 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8011f62:	4b10      	ldr	r3, [pc, #64]	; (8011fa4 <tcp_kill_state+0x90>)
 8011f64:	681a      	ldr	r2, [r3, #0]
 8011f66:	697b      	ldr	r3, [r7, #20]
 8011f68:	6a1b      	ldr	r3, [r3, #32]
 8011f6a:	1ad3      	subs	r3, r2, r3
 8011f6c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011f6e:	697b      	ldr	r3, [r7, #20]
 8011f70:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	68db      	ldr	r3, [r3, #12]
 8011f76:	617b      	str	r3, [r7, #20]
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d1e4      	bne.n	8011f48 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d003      	beq.n	8011f8c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8011f84:	2100      	movs	r1, #0
 8011f86:	6938      	ldr	r0, [r7, #16]
 8011f88:	f7fe ff7a 	bl	8010e80 <tcp_abandon>
  }
}
 8011f8c:	bf00      	nop
 8011f8e:	3718      	adds	r7, #24
 8011f90:	46bd      	mov	sp, r7
 8011f92:	bd80      	pop	{r7, pc}
 8011f94:	0801b9c4 	.word	0x0801b9c4
 8011f98:	0801bf50 	.word	0x0801bf50
 8011f9c:	0801ba08 	.word	0x0801ba08
 8011fa0:	2400789c 	.word	0x2400789c
 8011fa4:	240078a0 	.word	0x240078a0

08011fa8 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8011fae:	2300      	movs	r3, #0
 8011fb0:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8011fb2:	2300      	movs	r3, #0
 8011fb4:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fb6:	4b12      	ldr	r3, [pc, #72]	; (8012000 <tcp_kill_timewait+0x58>)
 8011fb8:	681b      	ldr	r3, [r3, #0]
 8011fba:	60fb      	str	r3, [r7, #12]
 8011fbc:	e012      	b.n	8011fe4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8011fbe:	4b11      	ldr	r3, [pc, #68]	; (8012004 <tcp_kill_timewait+0x5c>)
 8011fc0:	681a      	ldr	r2, [r3, #0]
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	6a1b      	ldr	r3, [r3, #32]
 8011fc6:	1ad3      	subs	r3, r2, r3
 8011fc8:	687a      	ldr	r2, [r7, #4]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d807      	bhi.n	8011fde <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8011fce:	4b0d      	ldr	r3, [pc, #52]	; (8012004 <tcp_kill_timewait+0x5c>)
 8011fd0:	681a      	ldr	r2, [r3, #0]
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	6a1b      	ldr	r3, [r3, #32]
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	68db      	ldr	r3, [r3, #12]
 8011fe2:	60fb      	str	r3, [r7, #12]
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d1e9      	bne.n	8011fbe <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8011fea:	68bb      	ldr	r3, [r7, #8]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d002      	beq.n	8011ff6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011ff0:	68b8      	ldr	r0, [r7, #8]
 8011ff2:	f7ff f803 	bl	8010ffc <tcp_abort>
  }
}
 8011ff6:	bf00      	nop
 8011ff8:	3710      	adds	r7, #16
 8011ffa:	46bd      	mov	sp, r7
 8011ffc:	bd80      	pop	{r7, pc}
 8011ffe:	bf00      	nop
 8012000:	240078ac 	.word	0x240078ac
 8012004:	240078a0 	.word	0x240078a0

08012008 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012008:	b580      	push	{r7, lr}
 801200a:	b082      	sub	sp, #8
 801200c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801200e:	4b10      	ldr	r3, [pc, #64]	; (8012050 <tcp_handle_closepend+0x48>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012014:	e014      	b.n	8012040 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	68db      	ldr	r3, [r3, #12]
 801201a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	8b5b      	ldrh	r3, [r3, #26]
 8012020:	f003 0308 	and.w	r3, r3, #8
 8012024:	2b00      	cmp	r3, #0
 8012026:	d009      	beq.n	801203c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	8b5b      	ldrh	r3, [r3, #26]
 801202c:	f023 0308 	bic.w	r3, r3, #8
 8012030:	b29a      	uxth	r2, r3
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012036:	6878      	ldr	r0, [r7, #4]
 8012038:	f7fe fe8c 	bl	8010d54 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d1e7      	bne.n	8012016 <tcp_handle_closepend+0xe>
  }
}
 8012046:	bf00      	nop
 8012048:	bf00      	nop
 801204a:	3708      	adds	r7, #8
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}
 8012050:	2400789c 	.word	0x2400789c

08012054 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012054:	b580      	push	{r7, lr}
 8012056:	b084      	sub	sp, #16
 8012058:	af00      	add	r7, sp, #0
 801205a:	4603      	mov	r3, r0
 801205c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801205e:	2001      	movs	r0, #1
 8012060:	f7fd fb0e 	bl	800f680 <memp_malloc>
 8012064:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d126      	bne.n	80120ba <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801206c:	f7ff ffcc 	bl	8012008 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012070:	f7ff ff9a 	bl	8011fa8 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012074:	2001      	movs	r0, #1
 8012076:	f7fd fb03 	bl	800f680 <memp_malloc>
 801207a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801207c:	68fb      	ldr	r3, [r7, #12]
 801207e:	2b00      	cmp	r3, #0
 8012080:	d11b      	bne.n	80120ba <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012082:	2009      	movs	r0, #9
 8012084:	f7ff ff46 	bl	8011f14 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012088:	2001      	movs	r0, #1
 801208a:	f7fd faf9 	bl	800f680 <memp_malloc>
 801208e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d111      	bne.n	80120ba <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012096:	2008      	movs	r0, #8
 8012098:	f7ff ff3c 	bl	8011f14 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801209c:	2001      	movs	r0, #1
 801209e:	f7fd faef 	bl	800f680 <memp_malloc>
 80120a2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d107      	bne.n	80120ba <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80120aa:	79fb      	ldrb	r3, [r7, #7]
 80120ac:	4618      	mov	r0, r3
 80120ae:	f7ff fee3 	bl	8011e78 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80120b2:	2001      	movs	r0, #1
 80120b4:	f7fd fae4 	bl	800f680 <memp_malloc>
 80120b8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80120ba:	68fb      	ldr	r3, [r7, #12]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d03f      	beq.n	8012140 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80120c0:	229c      	movs	r2, #156	; 0x9c
 80120c2:	2100      	movs	r1, #0
 80120c4:	68f8      	ldr	r0, [r7, #12]
 80120c6:	f007 fdea 	bl	8019c9e <memset>
    pcb->prio = prio;
 80120ca:	68fb      	ldr	r3, [r7, #12]
 80120cc:	79fa      	ldrb	r2, [r7, #7]
 80120ce:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80120d0:	68fb      	ldr	r3, [r7, #12]
 80120d2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80120d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80120e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	22ff      	movs	r2, #255	; 0xff
 80120ee:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80120f6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	2206      	movs	r2, #6
 80120fc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	2206      	movs	r2, #6
 8012104:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801210c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	2201      	movs	r2, #1
 8012112:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8012116:	4b0d      	ldr	r3, [pc, #52]	; (801214c <tcp_alloc+0xf8>)
 8012118:	681a      	ldr	r2, [r3, #0]
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801211e:	4b0c      	ldr	r3, [pc, #48]	; (8012150 <tcp_alloc+0xfc>)
 8012120:	781a      	ldrb	r2, [r3, #0]
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801212c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	4a08      	ldr	r2, [pc, #32]	; (8012154 <tcp_alloc+0x100>)
 8012134:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	4a07      	ldr	r2, [pc, #28]	; (8012158 <tcp_alloc+0x104>)
 801213c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012140:	68fb      	ldr	r3, [r7, #12]
}
 8012142:	4618      	mov	r0, r3
 8012144:	3710      	adds	r7, #16
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	240078a0 	.word	0x240078a0
 8012150:	24004136 	.word	0x24004136
 8012154:	08011e0d 	.word	0x08011e0d
 8012158:	006ddd00 	.word	0x006ddd00

0801215c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 801215c:	b580      	push	{r7, lr}
 801215e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8012160:	2040      	movs	r0, #64	; 0x40
 8012162:	f7ff ff77 	bl	8012054 <tcp_alloc>
 8012166:	4603      	mov	r3, r0
}
 8012168:	4618      	mov	r0, r3
 801216a:	bd80      	pop	{r7, pc}

0801216c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801216c:	b480      	push	{r7}
 801216e:	b083      	sub	sp, #12
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d002      	beq.n	8012182 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	683a      	ldr	r2, [r7, #0]
 8012180:	611a      	str	r2, [r3, #16]
  }
}
 8012182:	bf00      	nop
 8012184:	370c      	adds	r7, #12
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr
	...

08012190 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b082      	sub	sp, #8
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00e      	beq.n	80121be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	7d1b      	ldrb	r3, [r3, #20]
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d106      	bne.n	80121b6 <tcp_recv+0x26>
 80121a8:	4b07      	ldr	r3, [pc, #28]	; (80121c8 <tcp_recv+0x38>)
 80121aa:	f240 72df 	movw	r2, #2015	; 0x7df
 80121ae:	4907      	ldr	r1, [pc, #28]	; (80121cc <tcp_recv+0x3c>)
 80121b0:	4807      	ldr	r0, [pc, #28]	; (80121d0 <tcp_recv+0x40>)
 80121b2:	f007 fdd7 	bl	8019d64 <iprintf>
    pcb->recv = recv;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	683a      	ldr	r2, [r7, #0]
 80121ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80121be:	bf00      	nop
 80121c0:	3708      	adds	r7, #8
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
 80121c6:	bf00      	nop
 80121c8:	0801b9c4 	.word	0x0801b9c4
 80121cc:	0801bf60 	.word	0x0801bf60
 80121d0:	0801ba08 	.word	0x0801ba08

080121d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	b082      	sub	sp, #8
 80121d8:	af00      	add	r7, sp, #0
 80121da:	6078      	str	r0, [r7, #4]
 80121dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d00e      	beq.n	8012202 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	7d1b      	ldrb	r3, [r3, #20]
 80121e8:	2b01      	cmp	r3, #1
 80121ea:	d106      	bne.n	80121fa <tcp_sent+0x26>
 80121ec:	4b07      	ldr	r3, [pc, #28]	; (801220c <tcp_sent+0x38>)
 80121ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80121f2:	4907      	ldr	r1, [pc, #28]	; (8012210 <tcp_sent+0x3c>)
 80121f4:	4807      	ldr	r0, [pc, #28]	; (8012214 <tcp_sent+0x40>)
 80121f6:	f007 fdb5 	bl	8019d64 <iprintf>
    pcb->sent = sent;
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	683a      	ldr	r2, [r7, #0]
 80121fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012202:	bf00      	nop
 8012204:	3708      	adds	r7, #8
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	bf00      	nop
 801220c:	0801b9c4 	.word	0x0801b9c4
 8012210:	0801bf88 	.word	0x0801bf88
 8012214:	0801ba08 	.word	0x0801ba08

08012218 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b082      	sub	sp, #8
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
 8012220:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	2b00      	cmp	r3, #0
 8012226:	d00e      	beq.n	8012246 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	7d1b      	ldrb	r3, [r3, #20]
 801222c:	2b01      	cmp	r3, #1
 801222e:	d106      	bne.n	801223e <tcp_err+0x26>
 8012230:	4b07      	ldr	r3, [pc, #28]	; (8012250 <tcp_err+0x38>)
 8012232:	f640 020d 	movw	r2, #2061	; 0x80d
 8012236:	4907      	ldr	r1, [pc, #28]	; (8012254 <tcp_err+0x3c>)
 8012238:	4807      	ldr	r0, [pc, #28]	; (8012258 <tcp_err+0x40>)
 801223a:	f007 fd93 	bl	8019d64 <iprintf>
    pcb->errf = err;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	683a      	ldr	r2, [r7, #0]
 8012242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8012246:	bf00      	nop
 8012248:	3708      	adds	r7, #8
 801224a:	46bd      	mov	sp, r7
 801224c:	bd80      	pop	{r7, pc}
 801224e:	bf00      	nop
 8012250:	0801b9c4 	.word	0x0801b9c4
 8012254:	0801bfb0 	.word	0x0801bfb0
 8012258:	0801ba08 	.word	0x0801ba08

0801225c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801225c:	b480      	push	{r7}
 801225e:	b085      	sub	sp, #20
 8012260:	af00      	add	r7, sp, #0
 8012262:	6078      	str	r0, [r7, #4]
 8012264:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d008      	beq.n	801227e <tcp_accept+0x22>
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	7d1b      	ldrb	r3, [r3, #20]
 8012270:	2b01      	cmp	r3, #1
 8012272:	d104      	bne.n	801227e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	683a      	ldr	r2, [r7, #0]
 801227c:	619a      	str	r2, [r3, #24]
  }
}
 801227e:	bf00      	nop
 8012280:	3714      	adds	r7, #20
 8012282:	46bd      	mov	sp, r7
 8012284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012288:	4770      	bx	lr
	...

0801228c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b084      	sub	sp, #16
 8012290:	af00      	add	r7, sp, #0
 8012292:	60f8      	str	r0, [r7, #12]
 8012294:	60b9      	str	r1, [r7, #8]
 8012296:	4613      	mov	r3, r2
 8012298:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d107      	bne.n	80122b0 <tcp_poll+0x24>
 80122a0:	4b0e      	ldr	r3, [pc, #56]	; (80122dc <tcp_poll+0x50>)
 80122a2:	f640 023d 	movw	r2, #2109	; 0x83d
 80122a6:	490e      	ldr	r1, [pc, #56]	; (80122e0 <tcp_poll+0x54>)
 80122a8:	480e      	ldr	r0, [pc, #56]	; (80122e4 <tcp_poll+0x58>)
 80122aa:	f007 fd5b 	bl	8019d64 <iprintf>
 80122ae:	e011      	b.n	80122d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	7d1b      	ldrb	r3, [r3, #20]
 80122b4:	2b01      	cmp	r3, #1
 80122b6:	d106      	bne.n	80122c6 <tcp_poll+0x3a>
 80122b8:	4b08      	ldr	r3, [pc, #32]	; (80122dc <tcp_poll+0x50>)
 80122ba:	f640 023e 	movw	r2, #2110	; 0x83e
 80122be:	490a      	ldr	r1, [pc, #40]	; (80122e8 <tcp_poll+0x5c>)
 80122c0:	4808      	ldr	r0, [pc, #32]	; (80122e4 <tcp_poll+0x58>)
 80122c2:	f007 fd4f 	bl	8019d64 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	68ba      	ldr	r2, [r7, #8]
 80122ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	79fa      	ldrb	r2, [r7, #7]
 80122d2:	775a      	strb	r2, [r3, #29]
}
 80122d4:	3710      	adds	r7, #16
 80122d6:	46bd      	mov	sp, r7
 80122d8:	bd80      	pop	{r7, pc}
 80122da:	bf00      	nop
 80122dc:	0801b9c4 	.word	0x0801b9c4
 80122e0:	0801bfd8 	.word	0x0801bfd8
 80122e4:	0801ba08 	.word	0x0801ba08
 80122e8:	0801bff0 	.word	0x0801bff0

080122ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	d107      	bne.n	801230a <tcp_pcb_purge+0x1e>
 80122fa:	4b21      	ldr	r3, [pc, #132]	; (8012380 <tcp_pcb_purge+0x94>)
 80122fc:	f640 0251 	movw	r2, #2129	; 0x851
 8012300:	4920      	ldr	r1, [pc, #128]	; (8012384 <tcp_pcb_purge+0x98>)
 8012302:	4821      	ldr	r0, [pc, #132]	; (8012388 <tcp_pcb_purge+0x9c>)
 8012304:	f007 fd2e 	bl	8019d64 <iprintf>
 8012308:	e037      	b.n	801237a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	7d1b      	ldrb	r3, [r3, #20]
 801230e:	2b00      	cmp	r3, #0
 8012310:	d033      	beq.n	801237a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012316:	2b0a      	cmp	r3, #10
 8012318:	d02f      	beq.n	801237a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801231e:	2b01      	cmp	r3, #1
 8012320:	d02b      	beq.n	801237a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012326:	2b00      	cmp	r3, #0
 8012328:	d007      	beq.n	801233a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801232e:	4618      	mov	r0, r3
 8012330:	f7fe f8c0 	bl	80104b4 <pbuf_free>
      pcb->refused_data = NULL;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	2200      	movs	r2, #0
 8012338:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801233e:	2b00      	cmp	r3, #0
 8012340:	d002      	beq.n	8012348 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012342:	6878      	ldr	r0, [r7, #4]
 8012344:	f000 f986 	bl	8012654 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801234e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012354:	4618      	mov	r0, r3
 8012356:	f7ff fce1 	bl	8011d1c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801235e:	4618      	mov	r0, r3
 8012360:	f7ff fcdc 	bl	8011d1c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2200      	movs	r2, #0
 8012368:	66da      	str	r2, [r3, #108]	; 0x6c
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	2200      	movs	r2, #0
 8012376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801237a:	3708      	adds	r7, #8
 801237c:	46bd      	mov	sp, r7
 801237e:	bd80      	pop	{r7, pc}
 8012380:	0801b9c4 	.word	0x0801b9c4
 8012384:	0801c010 	.word	0x0801c010
 8012388:	0801ba08 	.word	0x0801ba08

0801238c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b084      	sub	sp, #16
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d106      	bne.n	80123aa <tcp_pcb_remove+0x1e>
 801239c:	4b3e      	ldr	r3, [pc, #248]	; (8012498 <tcp_pcb_remove+0x10c>)
 801239e:	f640 0283 	movw	r2, #2179	; 0x883
 80123a2:	493e      	ldr	r1, [pc, #248]	; (801249c <tcp_pcb_remove+0x110>)
 80123a4:	483e      	ldr	r0, [pc, #248]	; (80124a0 <tcp_pcb_remove+0x114>)
 80123a6:	f007 fcdd 	bl	8019d64 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	2b00      	cmp	r3, #0
 80123ae:	d106      	bne.n	80123be <tcp_pcb_remove+0x32>
 80123b0:	4b39      	ldr	r3, [pc, #228]	; (8012498 <tcp_pcb_remove+0x10c>)
 80123b2:	f640 0284 	movw	r2, #2180	; 0x884
 80123b6:	493b      	ldr	r1, [pc, #236]	; (80124a4 <tcp_pcb_remove+0x118>)
 80123b8:	4839      	ldr	r0, [pc, #228]	; (80124a0 <tcp_pcb_remove+0x114>)
 80123ba:	f007 fcd3 	bl	8019d64 <iprintf>

  TCP_RMV(pcblist, pcb);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	683a      	ldr	r2, [r7, #0]
 80123c4:	429a      	cmp	r2, r3
 80123c6:	d105      	bne.n	80123d4 <tcp_pcb_remove+0x48>
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	68da      	ldr	r2, [r3, #12]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	601a      	str	r2, [r3, #0]
 80123d2:	e013      	b.n	80123fc <tcp_pcb_remove+0x70>
 80123d4:	687b      	ldr	r3, [r7, #4]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	60fb      	str	r3, [r7, #12]
 80123da:	e00c      	b.n	80123f6 <tcp_pcb_remove+0x6a>
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	68db      	ldr	r3, [r3, #12]
 80123e0:	683a      	ldr	r2, [r7, #0]
 80123e2:	429a      	cmp	r2, r3
 80123e4:	d104      	bne.n	80123f0 <tcp_pcb_remove+0x64>
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	68da      	ldr	r2, [r3, #12]
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	60da      	str	r2, [r3, #12]
 80123ee:	e005      	b.n	80123fc <tcp_pcb_remove+0x70>
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	68db      	ldr	r3, [r3, #12]
 80123f4:	60fb      	str	r3, [r7, #12]
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2b00      	cmp	r3, #0
 80123fa:	d1ef      	bne.n	80123dc <tcp_pcb_remove+0x50>
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	2200      	movs	r2, #0
 8012400:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012402:	6838      	ldr	r0, [r7, #0]
 8012404:	f7ff ff72 	bl	80122ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012408:	683b      	ldr	r3, [r7, #0]
 801240a:	7d1b      	ldrb	r3, [r3, #20]
 801240c:	2b0a      	cmp	r3, #10
 801240e:	d013      	beq.n	8012438 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012410:	683b      	ldr	r3, [r7, #0]
 8012412:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012414:	2b01      	cmp	r3, #1
 8012416:	d00f      	beq.n	8012438 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012418:	683b      	ldr	r3, [r7, #0]
 801241a:	8b5b      	ldrh	r3, [r3, #26]
 801241c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012420:	2b00      	cmp	r3, #0
 8012422:	d009      	beq.n	8012438 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	8b5b      	ldrh	r3, [r3, #26]
 8012428:	f043 0302 	orr.w	r3, r3, #2
 801242c:	b29a      	uxth	r2, r3
 801242e:	683b      	ldr	r3, [r7, #0]
 8012430:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012432:	6838      	ldr	r0, [r7, #0]
 8012434:	f003 fbc2 	bl	8015bbc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012438:	683b      	ldr	r3, [r7, #0]
 801243a:	7d1b      	ldrb	r3, [r3, #20]
 801243c:	2b01      	cmp	r3, #1
 801243e:	d020      	beq.n	8012482 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012444:	2b00      	cmp	r3, #0
 8012446:	d006      	beq.n	8012456 <tcp_pcb_remove+0xca>
 8012448:	4b13      	ldr	r3, [pc, #76]	; (8012498 <tcp_pcb_remove+0x10c>)
 801244a:	f640 0293 	movw	r2, #2195	; 0x893
 801244e:	4916      	ldr	r1, [pc, #88]	; (80124a8 <tcp_pcb_remove+0x11c>)
 8012450:	4813      	ldr	r0, [pc, #76]	; (80124a0 <tcp_pcb_remove+0x114>)
 8012452:	f007 fc87 	bl	8019d64 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801245a:	2b00      	cmp	r3, #0
 801245c:	d006      	beq.n	801246c <tcp_pcb_remove+0xe0>
 801245e:	4b0e      	ldr	r3, [pc, #56]	; (8012498 <tcp_pcb_remove+0x10c>)
 8012460:	f640 0294 	movw	r2, #2196	; 0x894
 8012464:	4911      	ldr	r1, [pc, #68]	; (80124ac <tcp_pcb_remove+0x120>)
 8012466:	480e      	ldr	r0, [pc, #56]	; (80124a0 <tcp_pcb_remove+0x114>)
 8012468:	f007 fc7c 	bl	8019d64 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012470:	2b00      	cmp	r3, #0
 8012472:	d006      	beq.n	8012482 <tcp_pcb_remove+0xf6>
 8012474:	4b08      	ldr	r3, [pc, #32]	; (8012498 <tcp_pcb_remove+0x10c>)
 8012476:	f640 0296 	movw	r2, #2198	; 0x896
 801247a:	490d      	ldr	r1, [pc, #52]	; (80124b0 <tcp_pcb_remove+0x124>)
 801247c:	4808      	ldr	r0, [pc, #32]	; (80124a0 <tcp_pcb_remove+0x114>)
 801247e:	f007 fc71 	bl	8019d64 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	2200      	movs	r2, #0
 8012486:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012488:	683b      	ldr	r3, [r7, #0]
 801248a:	2200      	movs	r2, #0
 801248c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801248e:	bf00      	nop
 8012490:	3710      	adds	r7, #16
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
 8012496:	bf00      	nop
 8012498:	0801b9c4 	.word	0x0801b9c4
 801249c:	0801c02c 	.word	0x0801c02c
 80124a0:	0801ba08 	.word	0x0801ba08
 80124a4:	0801c048 	.word	0x0801c048
 80124a8:	0801c068 	.word	0x0801c068
 80124ac:	0801c080 	.word	0x0801c080
 80124b0:	0801c09c 	.word	0x0801c09c

080124b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80124b4:	b580      	push	{r7, lr}
 80124b6:	b082      	sub	sp, #8
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d106      	bne.n	80124d0 <tcp_next_iss+0x1c>
 80124c2:	4b0a      	ldr	r3, [pc, #40]	; (80124ec <tcp_next_iss+0x38>)
 80124c4:	f640 02af 	movw	r2, #2223	; 0x8af
 80124c8:	4909      	ldr	r1, [pc, #36]	; (80124f0 <tcp_next_iss+0x3c>)
 80124ca:	480a      	ldr	r0, [pc, #40]	; (80124f4 <tcp_next_iss+0x40>)
 80124cc:	f007 fc4a 	bl	8019d64 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80124d0:	4b09      	ldr	r3, [pc, #36]	; (80124f8 <tcp_next_iss+0x44>)
 80124d2:	681a      	ldr	r2, [r3, #0]
 80124d4:	4b09      	ldr	r3, [pc, #36]	; (80124fc <tcp_next_iss+0x48>)
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	4413      	add	r3, r2
 80124da:	4a07      	ldr	r2, [pc, #28]	; (80124f8 <tcp_next_iss+0x44>)
 80124dc:	6013      	str	r3, [r2, #0]
  return iss;
 80124de:	4b06      	ldr	r3, [pc, #24]	; (80124f8 <tcp_next_iss+0x44>)
 80124e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3708      	adds	r7, #8
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	0801b9c4 	.word	0x0801b9c4
 80124f0:	0801c0b4 	.word	0x0801c0b4
 80124f4:	0801ba08 	.word	0x0801ba08
 80124f8:	24000034 	.word	0x24000034
 80124fc:	240078a0 	.word	0x240078a0

08012500 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b086      	sub	sp, #24
 8012504:	af00      	add	r7, sp, #0
 8012506:	4603      	mov	r3, r0
 8012508:	60b9      	str	r1, [r7, #8]
 801250a:	607a      	str	r2, [r7, #4]
 801250c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d106      	bne.n	8012522 <tcp_eff_send_mss_netif+0x22>
 8012514:	4b14      	ldr	r3, [pc, #80]	; (8012568 <tcp_eff_send_mss_netif+0x68>)
 8012516:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801251a:	4914      	ldr	r1, [pc, #80]	; (801256c <tcp_eff_send_mss_netif+0x6c>)
 801251c:	4814      	ldr	r0, [pc, #80]	; (8012570 <tcp_eff_send_mss_netif+0x70>)
 801251e:	f007 fc21 	bl	8019d64 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d101      	bne.n	801252c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012528:	89fb      	ldrh	r3, [r7, #14]
 801252a:	e019      	b.n	8012560 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801252c:	68bb      	ldr	r3, [r7, #8]
 801252e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012530:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012532:	8afb      	ldrh	r3, [r7, #22]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d012      	beq.n	801255e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012538:	2328      	movs	r3, #40	; 0x28
 801253a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801253c:	8afa      	ldrh	r2, [r7, #22]
 801253e:	8abb      	ldrh	r3, [r7, #20]
 8012540:	429a      	cmp	r2, r3
 8012542:	d904      	bls.n	801254e <tcp_eff_send_mss_netif+0x4e>
 8012544:	8afa      	ldrh	r2, [r7, #22]
 8012546:	8abb      	ldrh	r3, [r7, #20]
 8012548:	1ad3      	subs	r3, r2, r3
 801254a:	b29b      	uxth	r3, r3
 801254c:	e000      	b.n	8012550 <tcp_eff_send_mss_netif+0x50>
 801254e:	2300      	movs	r3, #0
 8012550:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012552:	8a7a      	ldrh	r2, [r7, #18]
 8012554:	89fb      	ldrh	r3, [r7, #14]
 8012556:	4293      	cmp	r3, r2
 8012558:	bf28      	it	cs
 801255a:	4613      	movcs	r3, r2
 801255c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801255e:	89fb      	ldrh	r3, [r7, #14]
}
 8012560:	4618      	mov	r0, r3
 8012562:	3718      	adds	r7, #24
 8012564:	46bd      	mov	sp, r7
 8012566:	bd80      	pop	{r7, pc}
 8012568:	0801b9c4 	.word	0x0801b9c4
 801256c:	0801c0d0 	.word	0x0801c0d0
 8012570:	0801ba08 	.word	0x0801ba08

08012574 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012574:	b580      	push	{r7, lr}
 8012576:	b084      	sub	sp, #16
 8012578:	af00      	add	r7, sp, #0
 801257a:	6078      	str	r0, [r7, #4]
 801257c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801257e:	683b      	ldr	r3, [r7, #0]
 8012580:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d119      	bne.n	80125bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012588:	4b10      	ldr	r3, [pc, #64]	; (80125cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801258a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801258e:	4910      	ldr	r1, [pc, #64]	; (80125d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012590:	4810      	ldr	r0, [pc, #64]	; (80125d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012592:	f007 fbe7 	bl	8019d64 <iprintf>

  while (pcb != NULL) {
 8012596:	e011      	b.n	80125bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	681a      	ldr	r2, [r3, #0]
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d108      	bne.n	80125b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	68db      	ldr	r3, [r3, #12]
 80125a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80125aa:	68f8      	ldr	r0, [r7, #12]
 80125ac:	f7fe fd26 	bl	8010ffc <tcp_abort>
      pcb = next;
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	60fb      	str	r3, [r7, #12]
 80125b4:	e002      	b.n	80125bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	68db      	ldr	r3, [r3, #12]
 80125ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	2b00      	cmp	r3, #0
 80125c0:	d1ea      	bne.n	8012598 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80125c2:	bf00      	nop
 80125c4:	bf00      	nop
 80125c6:	3710      	adds	r7, #16
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	0801b9c4 	.word	0x0801b9c4
 80125d0:	0801c0f8 	.word	0x0801c0f8
 80125d4:	0801ba08 	.word	0x0801ba08

080125d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b084      	sub	sp, #16
 80125dc:	af00      	add	r7, sp, #0
 80125de:	6078      	str	r0, [r7, #4]
 80125e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d02a      	beq.n	801263e <tcp_netif_ip_addr_changed+0x66>
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d026      	beq.n	801263e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80125f0:	4b15      	ldr	r3, [pc, #84]	; (8012648 <tcp_netif_ip_addr_changed+0x70>)
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	4619      	mov	r1, r3
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f7ff ffbc 	bl	8012574 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80125fc:	4b13      	ldr	r3, [pc, #76]	; (801264c <tcp_netif_ip_addr_changed+0x74>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	4619      	mov	r1, r3
 8012602:	6878      	ldr	r0, [r7, #4]
 8012604:	f7ff ffb6 	bl	8012574 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d017      	beq.n	801263e <tcp_netif_ip_addr_changed+0x66>
 801260e:	683b      	ldr	r3, [r7, #0]
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d013      	beq.n	801263e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012616:	4b0e      	ldr	r3, [pc, #56]	; (8012650 <tcp_netif_ip_addr_changed+0x78>)
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	60fb      	str	r3, [r7, #12]
 801261c:	e00c      	b.n	8012638 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	681a      	ldr	r2, [r3, #0]
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	429a      	cmp	r2, r3
 8012628:	d103      	bne.n	8012632 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801262a:	683b      	ldr	r3, [r7, #0]
 801262c:	681a      	ldr	r2, [r3, #0]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	68db      	ldr	r3, [r3, #12]
 8012636:	60fb      	str	r3, [r7, #12]
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d1ef      	bne.n	801261e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801263e:	bf00      	nop
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	2400789c 	.word	0x2400789c
 801264c:	240078a8 	.word	0x240078a8
 8012650:	240078a4 	.word	0x240078a4

08012654 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012654:	b580      	push	{r7, lr}
 8012656:	b082      	sub	sp, #8
 8012658:	af00      	add	r7, sp, #0
 801265a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012660:	2b00      	cmp	r3, #0
 8012662:	d007      	beq.n	8012674 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012668:	4618      	mov	r0, r3
 801266a:	f7ff fb57 	bl	8011d1c <tcp_segs_free>
    pcb->ooseq = NULL;
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	2200      	movs	r2, #0
 8012672:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012674:	bf00      	nop
 8012676:	3708      	adds	r7, #8
 8012678:	46bd      	mov	sp, r7
 801267a:	bd80      	pop	{r7, pc}

0801267c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801267c:	b590      	push	{r4, r7, lr}
 801267e:	b08d      	sub	sp, #52	; 0x34
 8012680:	af04      	add	r7, sp, #16
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d105      	bne.n	8012698 <tcp_input+0x1c>
 801268c:	4b9b      	ldr	r3, [pc, #620]	; (80128fc <tcp_input+0x280>)
 801268e:	2283      	movs	r2, #131	; 0x83
 8012690:	499b      	ldr	r1, [pc, #620]	; (8012900 <tcp_input+0x284>)
 8012692:	489c      	ldr	r0, [pc, #624]	; (8012904 <tcp_input+0x288>)
 8012694:	f007 fb66 	bl	8019d64 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	685b      	ldr	r3, [r3, #4]
 801269c:	4a9a      	ldr	r2, [pc, #616]	; (8012908 <tcp_input+0x28c>)
 801269e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80126a0:	687b      	ldr	r3, [r7, #4]
 80126a2:	895b      	ldrh	r3, [r3, #10]
 80126a4:	2b13      	cmp	r3, #19
 80126a6:	f240 83c4 	bls.w	8012e32 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80126aa:	4b98      	ldr	r3, [pc, #608]	; (801290c <tcp_input+0x290>)
 80126ac:	695b      	ldr	r3, [r3, #20]
 80126ae:	4a97      	ldr	r2, [pc, #604]	; (801290c <tcp_input+0x290>)
 80126b0:	6812      	ldr	r2, [r2, #0]
 80126b2:	4611      	mov	r1, r2
 80126b4:	4618      	mov	r0, r3
 80126b6:	f006 f8c1 	bl	801883c <ip4_addr_isbroadcast_u32>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	f040 83ba 	bne.w	8012e36 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80126c2:	4b92      	ldr	r3, [pc, #584]	; (801290c <tcp_input+0x290>)
 80126c4:	695b      	ldr	r3, [r3, #20]
 80126c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80126ca:	2be0      	cmp	r3, #224	; 0xe0
 80126cc:	f000 83b3 	beq.w	8012e36 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80126d0:	4b8d      	ldr	r3, [pc, #564]	; (8012908 <tcp_input+0x28c>)
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	899b      	ldrh	r3, [r3, #12]
 80126d6:	b29b      	uxth	r3, r3
 80126d8:	4618      	mov	r0, r3
 80126da:	f7fc fa41 	bl	800eb60 <lwip_htons>
 80126de:	4603      	mov	r3, r0
 80126e0:	0b1b      	lsrs	r3, r3, #12
 80126e2:	b29b      	uxth	r3, r3
 80126e4:	b2db      	uxtb	r3, r3
 80126e6:	009b      	lsls	r3, r3, #2
 80126e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80126ea:	7cbb      	ldrb	r3, [r7, #18]
 80126ec:	2b13      	cmp	r3, #19
 80126ee:	f240 83a4 	bls.w	8012e3a <tcp_input+0x7be>
 80126f2:	7cbb      	ldrb	r3, [r7, #18]
 80126f4:	b29a      	uxth	r2, r3
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	891b      	ldrh	r3, [r3, #8]
 80126fa:	429a      	cmp	r2, r3
 80126fc:	f200 839d 	bhi.w	8012e3a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012700:	7cbb      	ldrb	r3, [r7, #18]
 8012702:	b29b      	uxth	r3, r3
 8012704:	3b14      	subs	r3, #20
 8012706:	b29a      	uxth	r2, r3
 8012708:	4b81      	ldr	r3, [pc, #516]	; (8012910 <tcp_input+0x294>)
 801270a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801270c:	4b81      	ldr	r3, [pc, #516]	; (8012914 <tcp_input+0x298>)
 801270e:	2200      	movs	r2, #0
 8012710:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	895a      	ldrh	r2, [r3, #10]
 8012716:	7cbb      	ldrb	r3, [r7, #18]
 8012718:	b29b      	uxth	r3, r3
 801271a:	429a      	cmp	r2, r3
 801271c:	d309      	bcc.n	8012732 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801271e:	4b7c      	ldr	r3, [pc, #496]	; (8012910 <tcp_input+0x294>)
 8012720:	881a      	ldrh	r2, [r3, #0]
 8012722:	4b7d      	ldr	r3, [pc, #500]	; (8012918 <tcp_input+0x29c>)
 8012724:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012726:	7cbb      	ldrb	r3, [r7, #18]
 8012728:	4619      	mov	r1, r3
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f7fd fe3c 	bl	80103a8 <pbuf_remove_header>
 8012730:	e04e      	b.n	80127d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d105      	bne.n	8012746 <tcp_input+0xca>
 801273a:	4b70      	ldr	r3, [pc, #448]	; (80128fc <tcp_input+0x280>)
 801273c:	22c2      	movs	r2, #194	; 0xc2
 801273e:	4977      	ldr	r1, [pc, #476]	; (801291c <tcp_input+0x2a0>)
 8012740:	4870      	ldr	r0, [pc, #448]	; (8012904 <tcp_input+0x288>)
 8012742:	f007 fb0f 	bl	8019d64 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012746:	2114      	movs	r1, #20
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7fd fe2d 	bl	80103a8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	895a      	ldrh	r2, [r3, #10]
 8012752:	4b71      	ldr	r3, [pc, #452]	; (8012918 <tcp_input+0x29c>)
 8012754:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012756:	4b6e      	ldr	r3, [pc, #440]	; (8012910 <tcp_input+0x294>)
 8012758:	881a      	ldrh	r2, [r3, #0]
 801275a:	4b6f      	ldr	r3, [pc, #444]	; (8012918 <tcp_input+0x29c>)
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	1ad3      	subs	r3, r2, r3
 8012760:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012762:	4b6d      	ldr	r3, [pc, #436]	; (8012918 <tcp_input+0x29c>)
 8012764:	881b      	ldrh	r3, [r3, #0]
 8012766:	4619      	mov	r1, r3
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f7fd fe1d 	bl	80103a8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	681b      	ldr	r3, [r3, #0]
 8012772:	895b      	ldrh	r3, [r3, #10]
 8012774:	8a3a      	ldrh	r2, [r7, #16]
 8012776:	429a      	cmp	r2, r3
 8012778:	f200 8361 	bhi.w	8012e3e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801277c:	687b      	ldr	r3, [r7, #4]
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	4a64      	ldr	r2, [pc, #400]	; (8012914 <tcp_input+0x298>)
 8012784:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	8a3a      	ldrh	r2, [r7, #16]
 801278c:	4611      	mov	r1, r2
 801278e:	4618      	mov	r0, r3
 8012790:	f7fd fe0a 	bl	80103a8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	891a      	ldrh	r2, [r3, #8]
 8012798:	8a3b      	ldrh	r3, [r7, #16]
 801279a:	1ad3      	subs	r3, r2, r3
 801279c:	b29a      	uxth	r2, r3
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	895b      	ldrh	r3, [r3, #10]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d005      	beq.n	80127b6 <tcp_input+0x13a>
 80127aa:	4b54      	ldr	r3, [pc, #336]	; (80128fc <tcp_input+0x280>)
 80127ac:	22df      	movs	r2, #223	; 0xdf
 80127ae:	495c      	ldr	r1, [pc, #368]	; (8012920 <tcp_input+0x2a4>)
 80127b0:	4854      	ldr	r0, [pc, #336]	; (8012904 <tcp_input+0x288>)
 80127b2:	f007 fad7 	bl	8019d64 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	891a      	ldrh	r2, [r3, #8]
 80127ba:	687b      	ldr	r3, [r7, #4]
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	891b      	ldrh	r3, [r3, #8]
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d005      	beq.n	80127d0 <tcp_input+0x154>
 80127c4:	4b4d      	ldr	r3, [pc, #308]	; (80128fc <tcp_input+0x280>)
 80127c6:	22e0      	movs	r2, #224	; 0xe0
 80127c8:	4956      	ldr	r1, [pc, #344]	; (8012924 <tcp_input+0x2a8>)
 80127ca:	484e      	ldr	r0, [pc, #312]	; (8012904 <tcp_input+0x288>)
 80127cc:	f007 faca 	bl	8019d64 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80127d0:	4b4d      	ldr	r3, [pc, #308]	; (8012908 <tcp_input+0x28c>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	881b      	ldrh	r3, [r3, #0]
 80127d6:	b29b      	uxth	r3, r3
 80127d8:	4a4b      	ldr	r2, [pc, #300]	; (8012908 <tcp_input+0x28c>)
 80127da:	6814      	ldr	r4, [r2, #0]
 80127dc:	4618      	mov	r0, r3
 80127de:	f7fc f9bf 	bl	800eb60 <lwip_htons>
 80127e2:	4603      	mov	r3, r0
 80127e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80127e6:	4b48      	ldr	r3, [pc, #288]	; (8012908 <tcp_input+0x28c>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	885b      	ldrh	r3, [r3, #2]
 80127ec:	b29b      	uxth	r3, r3
 80127ee:	4a46      	ldr	r2, [pc, #280]	; (8012908 <tcp_input+0x28c>)
 80127f0:	6814      	ldr	r4, [r2, #0]
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7fc f9b4 	bl	800eb60 <lwip_htons>
 80127f8:	4603      	mov	r3, r0
 80127fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80127fc:	4b42      	ldr	r3, [pc, #264]	; (8012908 <tcp_input+0x28c>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	685b      	ldr	r3, [r3, #4]
 8012802:	4a41      	ldr	r2, [pc, #260]	; (8012908 <tcp_input+0x28c>)
 8012804:	6814      	ldr	r4, [r2, #0]
 8012806:	4618      	mov	r0, r3
 8012808:	f7fc f9bf 	bl	800eb8a <lwip_htonl>
 801280c:	4603      	mov	r3, r0
 801280e:	6063      	str	r3, [r4, #4]
 8012810:	6863      	ldr	r3, [r4, #4]
 8012812:	4a45      	ldr	r2, [pc, #276]	; (8012928 <tcp_input+0x2ac>)
 8012814:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012816:	4b3c      	ldr	r3, [pc, #240]	; (8012908 <tcp_input+0x28c>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	689b      	ldr	r3, [r3, #8]
 801281c:	4a3a      	ldr	r2, [pc, #232]	; (8012908 <tcp_input+0x28c>)
 801281e:	6814      	ldr	r4, [r2, #0]
 8012820:	4618      	mov	r0, r3
 8012822:	f7fc f9b2 	bl	800eb8a <lwip_htonl>
 8012826:	4603      	mov	r3, r0
 8012828:	60a3      	str	r3, [r4, #8]
 801282a:	68a3      	ldr	r3, [r4, #8]
 801282c:	4a3f      	ldr	r2, [pc, #252]	; (801292c <tcp_input+0x2b0>)
 801282e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012830:	4b35      	ldr	r3, [pc, #212]	; (8012908 <tcp_input+0x28c>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	89db      	ldrh	r3, [r3, #14]
 8012836:	b29b      	uxth	r3, r3
 8012838:	4a33      	ldr	r2, [pc, #204]	; (8012908 <tcp_input+0x28c>)
 801283a:	6814      	ldr	r4, [r2, #0]
 801283c:	4618      	mov	r0, r3
 801283e:	f7fc f98f 	bl	800eb60 <lwip_htons>
 8012842:	4603      	mov	r3, r0
 8012844:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012846:	4b30      	ldr	r3, [pc, #192]	; (8012908 <tcp_input+0x28c>)
 8012848:	681b      	ldr	r3, [r3, #0]
 801284a:	899b      	ldrh	r3, [r3, #12]
 801284c:	b29b      	uxth	r3, r3
 801284e:	4618      	mov	r0, r3
 8012850:	f7fc f986 	bl	800eb60 <lwip_htons>
 8012854:	4603      	mov	r3, r0
 8012856:	b2db      	uxtb	r3, r3
 8012858:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801285c:	b2da      	uxtb	r2, r3
 801285e:	4b34      	ldr	r3, [pc, #208]	; (8012930 <tcp_input+0x2b4>)
 8012860:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	891a      	ldrh	r2, [r3, #8]
 8012866:	4b33      	ldr	r3, [pc, #204]	; (8012934 <tcp_input+0x2b8>)
 8012868:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801286a:	4b31      	ldr	r3, [pc, #196]	; (8012930 <tcp_input+0x2b4>)
 801286c:	781b      	ldrb	r3, [r3, #0]
 801286e:	f003 0303 	and.w	r3, r3, #3
 8012872:	2b00      	cmp	r3, #0
 8012874:	d00c      	beq.n	8012890 <tcp_input+0x214>
    tcplen++;
 8012876:	4b2f      	ldr	r3, [pc, #188]	; (8012934 <tcp_input+0x2b8>)
 8012878:	881b      	ldrh	r3, [r3, #0]
 801287a:	3301      	adds	r3, #1
 801287c:	b29a      	uxth	r2, r3
 801287e:	4b2d      	ldr	r3, [pc, #180]	; (8012934 <tcp_input+0x2b8>)
 8012880:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	891a      	ldrh	r2, [r3, #8]
 8012886:	4b2b      	ldr	r3, [pc, #172]	; (8012934 <tcp_input+0x2b8>)
 8012888:	881b      	ldrh	r3, [r3, #0]
 801288a:	429a      	cmp	r2, r3
 801288c:	f200 82d9 	bhi.w	8012e42 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012890:	2300      	movs	r3, #0
 8012892:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012894:	4b28      	ldr	r3, [pc, #160]	; (8012938 <tcp_input+0x2bc>)
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	61fb      	str	r3, [r7, #28]
 801289a:	e09d      	b.n	80129d8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801289c:	69fb      	ldr	r3, [r7, #28]
 801289e:	7d1b      	ldrb	r3, [r3, #20]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d105      	bne.n	80128b0 <tcp_input+0x234>
 80128a4:	4b15      	ldr	r3, [pc, #84]	; (80128fc <tcp_input+0x280>)
 80128a6:	22fb      	movs	r2, #251	; 0xfb
 80128a8:	4924      	ldr	r1, [pc, #144]	; (801293c <tcp_input+0x2c0>)
 80128aa:	4816      	ldr	r0, [pc, #88]	; (8012904 <tcp_input+0x288>)
 80128ac:	f007 fa5a 	bl	8019d64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80128b0:	69fb      	ldr	r3, [r7, #28]
 80128b2:	7d1b      	ldrb	r3, [r3, #20]
 80128b4:	2b0a      	cmp	r3, #10
 80128b6:	d105      	bne.n	80128c4 <tcp_input+0x248>
 80128b8:	4b10      	ldr	r3, [pc, #64]	; (80128fc <tcp_input+0x280>)
 80128ba:	22fc      	movs	r2, #252	; 0xfc
 80128bc:	4920      	ldr	r1, [pc, #128]	; (8012940 <tcp_input+0x2c4>)
 80128be:	4811      	ldr	r0, [pc, #68]	; (8012904 <tcp_input+0x288>)
 80128c0:	f007 fa50 	bl	8019d64 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80128c4:	69fb      	ldr	r3, [r7, #28]
 80128c6:	7d1b      	ldrb	r3, [r3, #20]
 80128c8:	2b01      	cmp	r3, #1
 80128ca:	d105      	bne.n	80128d8 <tcp_input+0x25c>
 80128cc:	4b0b      	ldr	r3, [pc, #44]	; (80128fc <tcp_input+0x280>)
 80128ce:	22fd      	movs	r2, #253	; 0xfd
 80128d0:	491c      	ldr	r1, [pc, #112]	; (8012944 <tcp_input+0x2c8>)
 80128d2:	480c      	ldr	r0, [pc, #48]	; (8012904 <tcp_input+0x288>)
 80128d4:	f007 fa46 	bl	8019d64 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80128d8:	69fb      	ldr	r3, [r7, #28]
 80128da:	7a1b      	ldrb	r3, [r3, #8]
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d033      	beq.n	8012948 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80128e0:	69fb      	ldr	r3, [r7, #28]
 80128e2:	7a1a      	ldrb	r2, [r3, #8]
 80128e4:	4b09      	ldr	r3, [pc, #36]	; (801290c <tcp_input+0x290>)
 80128e6:	685b      	ldr	r3, [r3, #4]
 80128e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80128ec:	3301      	adds	r3, #1
 80128ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d029      	beq.n	8012948 <tcp_input+0x2cc>
      prev = pcb;
 80128f4:	69fb      	ldr	r3, [r7, #28]
 80128f6:	61bb      	str	r3, [r7, #24]
      continue;
 80128f8:	e06b      	b.n	80129d2 <tcp_input+0x356>
 80128fa:	bf00      	nop
 80128fc:	0801c12c 	.word	0x0801c12c
 8012900:	0801c160 	.word	0x0801c160
 8012904:	0801c178 	.word	0x0801c178
 8012908:	24004148 	.word	0x24004148
 801290c:	240047dc 	.word	0x240047dc
 8012910:	2400414c 	.word	0x2400414c
 8012914:	24004150 	.word	0x24004150
 8012918:	2400414e 	.word	0x2400414e
 801291c:	0801c1a0 	.word	0x0801c1a0
 8012920:	0801c1b0 	.word	0x0801c1b0
 8012924:	0801c1bc 	.word	0x0801c1bc
 8012928:	24004158 	.word	0x24004158
 801292c:	2400415c 	.word	0x2400415c
 8012930:	24004164 	.word	0x24004164
 8012934:	24004162 	.word	0x24004162
 8012938:	2400789c 	.word	0x2400789c
 801293c:	0801c1dc 	.word	0x0801c1dc
 8012940:	0801c204 	.word	0x0801c204
 8012944:	0801c230 	.word	0x0801c230
    }

    if (pcb->remote_port == tcphdr->src &&
 8012948:	69fb      	ldr	r3, [r7, #28]
 801294a:	8b1a      	ldrh	r2, [r3, #24]
 801294c:	4b94      	ldr	r3, [pc, #592]	; (8012ba0 <tcp_input+0x524>)
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	881b      	ldrh	r3, [r3, #0]
 8012952:	b29b      	uxth	r3, r3
 8012954:	429a      	cmp	r2, r3
 8012956:	d13a      	bne.n	80129ce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012958:	69fb      	ldr	r3, [r7, #28]
 801295a:	8ada      	ldrh	r2, [r3, #22]
 801295c:	4b90      	ldr	r3, [pc, #576]	; (8012ba0 <tcp_input+0x524>)
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	885b      	ldrh	r3, [r3, #2]
 8012962:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012964:	429a      	cmp	r2, r3
 8012966:	d132      	bne.n	80129ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012968:	69fb      	ldr	r3, [r7, #28]
 801296a:	685a      	ldr	r2, [r3, #4]
 801296c:	4b8d      	ldr	r3, [pc, #564]	; (8012ba4 <tcp_input+0x528>)
 801296e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012970:	429a      	cmp	r2, r3
 8012972:	d12c      	bne.n	80129ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012974:	69fb      	ldr	r3, [r7, #28]
 8012976:	681a      	ldr	r2, [r3, #0]
 8012978:	4b8a      	ldr	r3, [pc, #552]	; (8012ba4 <tcp_input+0x528>)
 801297a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801297c:	429a      	cmp	r2, r3
 801297e:	d126      	bne.n	80129ce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	69fa      	ldr	r2, [r7, #28]
 8012986:	429a      	cmp	r2, r3
 8012988:	d106      	bne.n	8012998 <tcp_input+0x31c>
 801298a:	4b87      	ldr	r3, [pc, #540]	; (8012ba8 <tcp_input+0x52c>)
 801298c:	f240 120d 	movw	r2, #269	; 0x10d
 8012990:	4986      	ldr	r1, [pc, #536]	; (8012bac <tcp_input+0x530>)
 8012992:	4887      	ldr	r0, [pc, #540]	; (8012bb0 <tcp_input+0x534>)
 8012994:	f007 f9e6 	bl	8019d64 <iprintf>
      if (prev != NULL) {
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d00a      	beq.n	80129b4 <tcp_input+0x338>
        prev->next = pcb->next;
 801299e:	69fb      	ldr	r3, [r7, #28]
 80129a0:	68da      	ldr	r2, [r3, #12]
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80129a6:	4b83      	ldr	r3, [pc, #524]	; (8012bb4 <tcp_input+0x538>)
 80129a8:	681a      	ldr	r2, [r3, #0]
 80129aa:	69fb      	ldr	r3, [r7, #28]
 80129ac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80129ae:	4a81      	ldr	r2, [pc, #516]	; (8012bb4 <tcp_input+0x538>)
 80129b0:	69fb      	ldr	r3, [r7, #28]
 80129b2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80129b4:	69fb      	ldr	r3, [r7, #28]
 80129b6:	68db      	ldr	r3, [r3, #12]
 80129b8:	69fa      	ldr	r2, [r7, #28]
 80129ba:	429a      	cmp	r2, r3
 80129bc:	d111      	bne.n	80129e2 <tcp_input+0x366>
 80129be:	4b7a      	ldr	r3, [pc, #488]	; (8012ba8 <tcp_input+0x52c>)
 80129c0:	f240 1215 	movw	r2, #277	; 0x115
 80129c4:	497c      	ldr	r1, [pc, #496]	; (8012bb8 <tcp_input+0x53c>)
 80129c6:	487a      	ldr	r0, [pc, #488]	; (8012bb0 <tcp_input+0x534>)
 80129c8:	f007 f9cc 	bl	8019d64 <iprintf>
      break;
 80129cc:	e009      	b.n	80129e2 <tcp_input+0x366>
    }
    prev = pcb;
 80129ce:	69fb      	ldr	r3, [r7, #28]
 80129d0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80129d2:	69fb      	ldr	r3, [r7, #28]
 80129d4:	68db      	ldr	r3, [r3, #12]
 80129d6:	61fb      	str	r3, [r7, #28]
 80129d8:	69fb      	ldr	r3, [r7, #28]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f47f af5e 	bne.w	801289c <tcp_input+0x220>
 80129e0:	e000      	b.n	80129e4 <tcp_input+0x368>
      break;
 80129e2:	bf00      	nop
  }

  if (pcb == NULL) {
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	f040 8095 	bne.w	8012b16 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80129ec:	4b73      	ldr	r3, [pc, #460]	; (8012bbc <tcp_input+0x540>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	61fb      	str	r3, [r7, #28]
 80129f2:	e03f      	b.n	8012a74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80129f4:	69fb      	ldr	r3, [r7, #28]
 80129f6:	7d1b      	ldrb	r3, [r3, #20]
 80129f8:	2b0a      	cmp	r3, #10
 80129fa:	d006      	beq.n	8012a0a <tcp_input+0x38e>
 80129fc:	4b6a      	ldr	r3, [pc, #424]	; (8012ba8 <tcp_input+0x52c>)
 80129fe:	f240 121f 	movw	r2, #287	; 0x11f
 8012a02:	496f      	ldr	r1, [pc, #444]	; (8012bc0 <tcp_input+0x544>)
 8012a04:	486a      	ldr	r0, [pc, #424]	; (8012bb0 <tcp_input+0x534>)
 8012a06:	f007 f9ad 	bl	8019d64 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	7a1b      	ldrb	r3, [r3, #8]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d009      	beq.n	8012a26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a12:	69fb      	ldr	r3, [r7, #28]
 8012a14:	7a1a      	ldrb	r2, [r3, #8]
 8012a16:	4b63      	ldr	r3, [pc, #396]	; (8012ba4 <tcp_input+0x528>)
 8012a18:	685b      	ldr	r3, [r3, #4]
 8012a1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a1e:	3301      	adds	r3, #1
 8012a20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012a22:	429a      	cmp	r2, r3
 8012a24:	d122      	bne.n	8012a6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012a26:	69fb      	ldr	r3, [r7, #28]
 8012a28:	8b1a      	ldrh	r2, [r3, #24]
 8012a2a:	4b5d      	ldr	r3, [pc, #372]	; (8012ba0 <tcp_input+0x524>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	881b      	ldrh	r3, [r3, #0]
 8012a30:	b29b      	uxth	r3, r3
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d11b      	bne.n	8012a6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012a36:	69fb      	ldr	r3, [r7, #28]
 8012a38:	8ada      	ldrh	r2, [r3, #22]
 8012a3a:	4b59      	ldr	r3, [pc, #356]	; (8012ba0 <tcp_input+0x524>)
 8012a3c:	681b      	ldr	r3, [r3, #0]
 8012a3e:	885b      	ldrh	r3, [r3, #2]
 8012a40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012a42:	429a      	cmp	r2, r3
 8012a44:	d113      	bne.n	8012a6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a46:	69fb      	ldr	r3, [r7, #28]
 8012a48:	685a      	ldr	r2, [r3, #4]
 8012a4a:	4b56      	ldr	r3, [pc, #344]	; (8012ba4 <tcp_input+0x528>)
 8012a4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d10d      	bne.n	8012a6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012a52:	69fb      	ldr	r3, [r7, #28]
 8012a54:	681a      	ldr	r2, [r3, #0]
 8012a56:	4b53      	ldr	r3, [pc, #332]	; (8012ba4 <tcp_input+0x528>)
 8012a58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d107      	bne.n	8012a6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012a5e:	69f8      	ldr	r0, [r7, #28]
 8012a60:	f000 fb54 	bl	801310c <tcp_timewait_input>
        }
        pbuf_free(p);
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	f7fd fd25 	bl	80104b4 <pbuf_free>
        return;
 8012a6a:	e1f0      	b.n	8012e4e <tcp_input+0x7d2>
        continue;
 8012a6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a6e:	69fb      	ldr	r3, [r7, #28]
 8012a70:	68db      	ldr	r3, [r3, #12]
 8012a72:	61fb      	str	r3, [r7, #28]
 8012a74:	69fb      	ldr	r3, [r7, #28]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d1bc      	bne.n	80129f4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012a7e:	4b51      	ldr	r3, [pc, #324]	; (8012bc4 <tcp_input+0x548>)
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	617b      	str	r3, [r7, #20]
 8012a84:	e02a      	b.n	8012adc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012a86:	697b      	ldr	r3, [r7, #20]
 8012a88:	7a1b      	ldrb	r3, [r3, #8]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d00c      	beq.n	8012aa8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	7a1a      	ldrb	r2, [r3, #8]
 8012a92:	4b44      	ldr	r3, [pc, #272]	; (8012ba4 <tcp_input+0x528>)
 8012a94:	685b      	ldr	r3, [r3, #4]
 8012a96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d002      	beq.n	8012aa8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	61bb      	str	r3, [r7, #24]
        continue;
 8012aa6:	e016      	b.n	8012ad6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	8ada      	ldrh	r2, [r3, #22]
 8012aac:	4b3c      	ldr	r3, [pc, #240]	; (8012ba0 <tcp_input+0x524>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	885b      	ldrh	r3, [r3, #2]
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d10c      	bne.n	8012ad2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	681a      	ldr	r2, [r3, #0]
 8012abc:	4b39      	ldr	r3, [pc, #228]	; (8012ba4 <tcp_input+0x528>)
 8012abe:	695b      	ldr	r3, [r3, #20]
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d00f      	beq.n	8012ae4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012ac4:	697b      	ldr	r3, [r7, #20]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d00d      	beq.n	8012ae6 <tcp_input+0x46a>
 8012aca:	697b      	ldr	r3, [r7, #20]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d009      	beq.n	8012ae6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012ad2:	697b      	ldr	r3, [r7, #20]
 8012ad4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012ad6:	697b      	ldr	r3, [r7, #20]
 8012ad8:	68db      	ldr	r3, [r3, #12]
 8012ada:	617b      	str	r3, [r7, #20]
 8012adc:	697b      	ldr	r3, [r7, #20]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d1d1      	bne.n	8012a86 <tcp_input+0x40a>
 8012ae2:	e000      	b.n	8012ae6 <tcp_input+0x46a>
            break;
 8012ae4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012ae6:	697b      	ldr	r3, [r7, #20]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d014      	beq.n	8012b16 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d00a      	beq.n	8012b08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012af2:	697b      	ldr	r3, [r7, #20]
 8012af4:	68da      	ldr	r2, [r3, #12]
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012afa:	4b32      	ldr	r3, [pc, #200]	; (8012bc4 <tcp_input+0x548>)
 8012afc:	681a      	ldr	r2, [r3, #0]
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012b02:	4a30      	ldr	r2, [pc, #192]	; (8012bc4 <tcp_input+0x548>)
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012b08:	6978      	ldr	r0, [r7, #20]
 8012b0a:	f000 fa01 	bl	8012f10 <tcp_listen_input>
      }
      pbuf_free(p);
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7fd fcd0 	bl	80104b4 <pbuf_free>
      return;
 8012b14:	e19b      	b.n	8012e4e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012b16:	69fb      	ldr	r3, [r7, #28]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	f000 8160 	beq.w	8012dde <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012b1e:	4b2a      	ldr	r3, [pc, #168]	; (8012bc8 <tcp_input+0x54c>)
 8012b20:	2200      	movs	r2, #0
 8012b22:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	891a      	ldrh	r2, [r3, #8]
 8012b28:	4b27      	ldr	r3, [pc, #156]	; (8012bc8 <tcp_input+0x54c>)
 8012b2a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012b2c:	4a26      	ldr	r2, [pc, #152]	; (8012bc8 <tcp_input+0x54c>)
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012b32:	4b1b      	ldr	r3, [pc, #108]	; (8012ba0 <tcp_input+0x524>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	4a24      	ldr	r2, [pc, #144]	; (8012bc8 <tcp_input+0x54c>)
 8012b38:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012b3a:	4b24      	ldr	r3, [pc, #144]	; (8012bcc <tcp_input+0x550>)
 8012b3c:	2200      	movs	r2, #0
 8012b3e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012b40:	4b23      	ldr	r3, [pc, #140]	; (8012bd0 <tcp_input+0x554>)
 8012b42:	2200      	movs	r2, #0
 8012b44:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012b46:	4b23      	ldr	r3, [pc, #140]	; (8012bd4 <tcp_input+0x558>)
 8012b48:	2200      	movs	r2, #0
 8012b4a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012b4c:	4b22      	ldr	r3, [pc, #136]	; (8012bd8 <tcp_input+0x55c>)
 8012b4e:	781b      	ldrb	r3, [r3, #0]
 8012b50:	f003 0308 	and.w	r3, r3, #8
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d006      	beq.n	8012b66 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	7b5b      	ldrb	r3, [r3, #13]
 8012b5c:	f043 0301 	orr.w	r3, r3, #1
 8012b60:	b2da      	uxtb	r2, r3
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012b66:	69fb      	ldr	r3, [r7, #28]
 8012b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d038      	beq.n	8012be0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012b6e:	69f8      	ldr	r0, [r7, #28]
 8012b70:	f7ff f858 	bl	8011c24 <tcp_process_refused_data>
 8012b74:	4603      	mov	r3, r0
 8012b76:	f113 0f0d 	cmn.w	r3, #13
 8012b7a:	d007      	beq.n	8012b8c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012b7c:	69fb      	ldr	r3, [r7, #28]
 8012b7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d02d      	beq.n	8012be0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012b84:	4b15      	ldr	r3, [pc, #84]	; (8012bdc <tcp_input+0x560>)
 8012b86:	881b      	ldrh	r3, [r3, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d029      	beq.n	8012be0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	f040 8104 	bne.w	8012d9e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012b96:	69f8      	ldr	r0, [r7, #28]
 8012b98:	f003 fe16 	bl	80167c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012b9c:	e0ff      	b.n	8012d9e <tcp_input+0x722>
 8012b9e:	bf00      	nop
 8012ba0:	24004148 	.word	0x24004148
 8012ba4:	240047dc 	.word	0x240047dc
 8012ba8:	0801c12c 	.word	0x0801c12c
 8012bac:	0801c258 	.word	0x0801c258
 8012bb0:	0801c178 	.word	0x0801c178
 8012bb4:	2400789c 	.word	0x2400789c
 8012bb8:	0801c284 	.word	0x0801c284
 8012bbc:	240078ac 	.word	0x240078ac
 8012bc0:	0801c2b0 	.word	0x0801c2b0
 8012bc4:	240078a4 	.word	0x240078a4
 8012bc8:	24004138 	.word	0x24004138
 8012bcc:	24004168 	.word	0x24004168
 8012bd0:	24004165 	.word	0x24004165
 8012bd4:	24004160 	.word	0x24004160
 8012bd8:	24004164 	.word	0x24004164
 8012bdc:	24004162 	.word	0x24004162
      }
    }
    tcp_input_pcb = pcb;
 8012be0:	4a9c      	ldr	r2, [pc, #624]	; (8012e54 <tcp_input+0x7d8>)
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012be6:	69f8      	ldr	r0, [r7, #28]
 8012be8:	f000 fb0a 	bl	8013200 <tcp_process>
 8012bec:	4603      	mov	r3, r0
 8012bee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012bf0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012bf4:	f113 0f0d 	cmn.w	r3, #13
 8012bf8:	f000 80d3 	beq.w	8012da2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8012bfc:	4b96      	ldr	r3, [pc, #600]	; (8012e58 <tcp_input+0x7dc>)
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	f003 0308 	and.w	r3, r3, #8
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d015      	beq.n	8012c34 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012c08:	69fb      	ldr	r3, [r7, #28]
 8012c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d008      	beq.n	8012c24 <tcp_input+0x5a8>
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012c18:	69fa      	ldr	r2, [r7, #28]
 8012c1a:	6912      	ldr	r2, [r2, #16]
 8012c1c:	f06f 010d 	mvn.w	r1, #13
 8012c20:	4610      	mov	r0, r2
 8012c22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012c24:	69f9      	ldr	r1, [r7, #28]
 8012c26:	488d      	ldr	r0, [pc, #564]	; (8012e5c <tcp_input+0x7e0>)
 8012c28:	f7ff fbb0 	bl	801238c <tcp_pcb_remove>
        tcp_free(pcb);
 8012c2c:	69f8      	ldr	r0, [r7, #28]
 8012c2e:	f7fd fefd 	bl	8010a2c <tcp_free>
 8012c32:	e0c1      	b.n	8012db8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012c34:	2300      	movs	r3, #0
 8012c36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012c38:	4b89      	ldr	r3, [pc, #548]	; (8012e60 <tcp_input+0x7e4>)
 8012c3a:	881b      	ldrh	r3, [r3, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d01d      	beq.n	8012c7c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012c40:	4b87      	ldr	r3, [pc, #540]	; (8012e60 <tcp_input+0x7e4>)
 8012c42:	881b      	ldrh	r3, [r3, #0]
 8012c44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d00a      	beq.n	8012c66 <tcp_input+0x5ea>
 8012c50:	69fb      	ldr	r3, [r7, #28]
 8012c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012c56:	69fa      	ldr	r2, [r7, #28]
 8012c58:	6910      	ldr	r0, [r2, #16]
 8012c5a:	89fa      	ldrh	r2, [r7, #14]
 8012c5c:	69f9      	ldr	r1, [r7, #28]
 8012c5e:	4798      	blx	r3
 8012c60:	4603      	mov	r3, r0
 8012c62:	74fb      	strb	r3, [r7, #19]
 8012c64:	e001      	b.n	8012c6a <tcp_input+0x5ee>
 8012c66:	2300      	movs	r3, #0
 8012c68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012c6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c6e:	f113 0f0d 	cmn.w	r3, #13
 8012c72:	f000 8098 	beq.w	8012da6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012c76:	4b7a      	ldr	r3, [pc, #488]	; (8012e60 <tcp_input+0x7e4>)
 8012c78:	2200      	movs	r2, #0
 8012c7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012c7c:	69f8      	ldr	r0, [r7, #28]
 8012c7e:	f000 f907 	bl	8012e90 <tcp_input_delayed_close>
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	f040 8090 	bne.w	8012daa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012c8a:	4b76      	ldr	r3, [pc, #472]	; (8012e64 <tcp_input+0x7e8>)
 8012c8c:	681b      	ldr	r3, [r3, #0]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d041      	beq.n	8012d16 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012c92:	69fb      	ldr	r3, [r7, #28]
 8012c94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d006      	beq.n	8012ca8 <tcp_input+0x62c>
 8012c9a:	4b73      	ldr	r3, [pc, #460]	; (8012e68 <tcp_input+0x7ec>)
 8012c9c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012ca0:	4972      	ldr	r1, [pc, #456]	; (8012e6c <tcp_input+0x7f0>)
 8012ca2:	4873      	ldr	r0, [pc, #460]	; (8012e70 <tcp_input+0x7f4>)
 8012ca4:	f007 f85e 	bl	8019d64 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012ca8:	69fb      	ldr	r3, [r7, #28]
 8012caa:	8b5b      	ldrh	r3, [r3, #26]
 8012cac:	f003 0310 	and.w	r3, r3, #16
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d008      	beq.n	8012cc6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012cb4:	4b6b      	ldr	r3, [pc, #428]	; (8012e64 <tcp_input+0x7e8>)
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f7fd fbfb 	bl	80104b4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012cbe:	69f8      	ldr	r0, [r7, #28]
 8012cc0:	f7fe f99c 	bl	8010ffc <tcp_abort>
            goto aborted;
 8012cc4:	e078      	b.n	8012db8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012cc6:	69fb      	ldr	r3, [r7, #28]
 8012cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d00c      	beq.n	8012cea <tcp_input+0x66e>
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012cd6:	69fb      	ldr	r3, [r7, #28]
 8012cd8:	6918      	ldr	r0, [r3, #16]
 8012cda:	4b62      	ldr	r3, [pc, #392]	; (8012e64 <tcp_input+0x7e8>)
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	2300      	movs	r3, #0
 8012ce0:	69f9      	ldr	r1, [r7, #28]
 8012ce2:	47a0      	blx	r4
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	74fb      	strb	r3, [r7, #19]
 8012ce8:	e008      	b.n	8012cfc <tcp_input+0x680>
 8012cea:	4b5e      	ldr	r3, [pc, #376]	; (8012e64 <tcp_input+0x7e8>)
 8012cec:	681a      	ldr	r2, [r3, #0]
 8012cee:	2300      	movs	r3, #0
 8012cf0:	69f9      	ldr	r1, [r7, #28]
 8012cf2:	2000      	movs	r0, #0
 8012cf4:	f7ff f88a 	bl	8011e0c <tcp_recv_null>
 8012cf8:	4603      	mov	r3, r0
 8012cfa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012cfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d00:	f113 0f0d 	cmn.w	r3, #13
 8012d04:	d053      	beq.n	8012dae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012d06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d003      	beq.n	8012d16 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012d0e:	4b55      	ldr	r3, [pc, #340]	; (8012e64 <tcp_input+0x7e8>)
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	69fb      	ldr	r3, [r7, #28]
 8012d14:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012d16:	4b50      	ldr	r3, [pc, #320]	; (8012e58 <tcp_input+0x7dc>)
 8012d18:	781b      	ldrb	r3, [r3, #0]
 8012d1a:	f003 0320 	and.w	r3, r3, #32
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d030      	beq.n	8012d84 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8012d22:	69fb      	ldr	r3, [r7, #28]
 8012d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d009      	beq.n	8012d3e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012d2a:	69fb      	ldr	r3, [r7, #28]
 8012d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d2e:	7b5a      	ldrb	r2, [r3, #13]
 8012d30:	69fb      	ldr	r3, [r7, #28]
 8012d32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d34:	f042 0220 	orr.w	r2, r2, #32
 8012d38:	b2d2      	uxtb	r2, r2
 8012d3a:	735a      	strb	r2, [r3, #13]
 8012d3c:	e022      	b.n	8012d84 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012d3e:	69fb      	ldr	r3, [r7, #28]
 8012d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012d46:	d005      	beq.n	8012d54 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012d48:	69fb      	ldr	r3, [r7, #28]
 8012d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d4c:	3301      	adds	r3, #1
 8012d4e:	b29a      	uxth	r2, r3
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012d54:	69fb      	ldr	r3, [r7, #28]
 8012d56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d00b      	beq.n	8012d76 <tcp_input+0x6fa>
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d64:	69fb      	ldr	r3, [r7, #28]
 8012d66:	6918      	ldr	r0, [r3, #16]
 8012d68:	2300      	movs	r3, #0
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	69f9      	ldr	r1, [r7, #28]
 8012d6e:	47a0      	blx	r4
 8012d70:	4603      	mov	r3, r0
 8012d72:	74fb      	strb	r3, [r7, #19]
 8012d74:	e001      	b.n	8012d7a <tcp_input+0x6fe>
 8012d76:	2300      	movs	r3, #0
 8012d78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012d7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012d7e:	f113 0f0d 	cmn.w	r3, #13
 8012d82:	d016      	beq.n	8012db2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012d84:	4b33      	ldr	r3, [pc, #204]	; (8012e54 <tcp_input+0x7d8>)
 8012d86:	2200      	movs	r2, #0
 8012d88:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012d8a:	69f8      	ldr	r0, [r7, #28]
 8012d8c:	f000 f880 	bl	8012e90 <tcp_input_delayed_close>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d10f      	bne.n	8012db6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012d96:	69f8      	ldr	r0, [r7, #28]
 8012d98:	f002 ff10 	bl	8015bbc <tcp_output>
 8012d9c:	e00c      	b.n	8012db8 <tcp_input+0x73c>
        goto aborted;
 8012d9e:	bf00      	nop
 8012da0:	e00a      	b.n	8012db8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012da2:	bf00      	nop
 8012da4:	e008      	b.n	8012db8 <tcp_input+0x73c>
              goto aborted;
 8012da6:	bf00      	nop
 8012da8:	e006      	b.n	8012db8 <tcp_input+0x73c>
          goto aborted;
 8012daa:	bf00      	nop
 8012dac:	e004      	b.n	8012db8 <tcp_input+0x73c>
            goto aborted;
 8012dae:	bf00      	nop
 8012db0:	e002      	b.n	8012db8 <tcp_input+0x73c>
              goto aborted;
 8012db2:	bf00      	nop
 8012db4:	e000      	b.n	8012db8 <tcp_input+0x73c>
          goto aborted;
 8012db6:	bf00      	nop
    tcp_input_pcb = NULL;
 8012db8:	4b26      	ldr	r3, [pc, #152]	; (8012e54 <tcp_input+0x7d8>)
 8012dba:	2200      	movs	r2, #0
 8012dbc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012dbe:	4b29      	ldr	r3, [pc, #164]	; (8012e64 <tcp_input+0x7e8>)
 8012dc0:	2200      	movs	r2, #0
 8012dc2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012dc4:	4b2b      	ldr	r3, [pc, #172]	; (8012e74 <tcp_input+0x7f8>)
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d03f      	beq.n	8012e4c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8012dcc:	4b29      	ldr	r3, [pc, #164]	; (8012e74 <tcp_input+0x7f8>)
 8012dce:	685b      	ldr	r3, [r3, #4]
 8012dd0:	4618      	mov	r0, r3
 8012dd2:	f7fd fb6f 	bl	80104b4 <pbuf_free>
      inseg.p = NULL;
 8012dd6:	4b27      	ldr	r3, [pc, #156]	; (8012e74 <tcp_input+0x7f8>)
 8012dd8:	2200      	movs	r2, #0
 8012dda:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012ddc:	e036      	b.n	8012e4c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012dde:	4b26      	ldr	r3, [pc, #152]	; (8012e78 <tcp_input+0x7fc>)
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	899b      	ldrh	r3, [r3, #12]
 8012de4:	b29b      	uxth	r3, r3
 8012de6:	4618      	mov	r0, r3
 8012de8:	f7fb feba 	bl	800eb60 <lwip_htons>
 8012dec:	4603      	mov	r3, r0
 8012dee:	b2db      	uxtb	r3, r3
 8012df0:	f003 0304 	and.w	r3, r3, #4
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d118      	bne.n	8012e2a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012df8:	4b20      	ldr	r3, [pc, #128]	; (8012e7c <tcp_input+0x800>)
 8012dfa:	6819      	ldr	r1, [r3, #0]
 8012dfc:	4b20      	ldr	r3, [pc, #128]	; (8012e80 <tcp_input+0x804>)
 8012dfe:	881b      	ldrh	r3, [r3, #0]
 8012e00:	461a      	mov	r2, r3
 8012e02:	4b20      	ldr	r3, [pc, #128]	; (8012e84 <tcp_input+0x808>)
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e08:	4b1b      	ldr	r3, [pc, #108]	; (8012e78 <tcp_input+0x7fc>)
 8012e0a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e0c:	885b      	ldrh	r3, [r3, #2]
 8012e0e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012e10:	4a19      	ldr	r2, [pc, #100]	; (8012e78 <tcp_input+0x7fc>)
 8012e12:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012e14:	8812      	ldrh	r2, [r2, #0]
 8012e16:	b292      	uxth	r2, r2
 8012e18:	9202      	str	r2, [sp, #8]
 8012e1a:	9301      	str	r3, [sp, #4]
 8012e1c:	4b1a      	ldr	r3, [pc, #104]	; (8012e88 <tcp_input+0x80c>)
 8012e1e:	9300      	str	r3, [sp, #0]
 8012e20:	4b1a      	ldr	r3, [pc, #104]	; (8012e8c <tcp_input+0x810>)
 8012e22:	4602      	mov	r2, r0
 8012e24:	2000      	movs	r0, #0
 8012e26:	f003 fc7d 	bl	8016724 <tcp_rst>
    pbuf_free(p);
 8012e2a:	6878      	ldr	r0, [r7, #4]
 8012e2c:	f7fd fb42 	bl	80104b4 <pbuf_free>
  return;
 8012e30:	e00c      	b.n	8012e4c <tcp_input+0x7d0>
    goto dropped;
 8012e32:	bf00      	nop
 8012e34:	e006      	b.n	8012e44 <tcp_input+0x7c8>
    goto dropped;
 8012e36:	bf00      	nop
 8012e38:	e004      	b.n	8012e44 <tcp_input+0x7c8>
    goto dropped;
 8012e3a:	bf00      	nop
 8012e3c:	e002      	b.n	8012e44 <tcp_input+0x7c8>
      goto dropped;
 8012e3e:	bf00      	nop
 8012e40:	e000      	b.n	8012e44 <tcp_input+0x7c8>
      goto dropped;
 8012e42:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8012e44:	6878      	ldr	r0, [r7, #4]
 8012e46:	f7fd fb35 	bl	80104b4 <pbuf_free>
 8012e4a:	e000      	b.n	8012e4e <tcp_input+0x7d2>
  return;
 8012e4c:	bf00      	nop
}
 8012e4e:	3724      	adds	r7, #36	; 0x24
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd90      	pop	{r4, r7, pc}
 8012e54:	240078b0 	.word	0x240078b0
 8012e58:	24004165 	.word	0x24004165
 8012e5c:	2400789c 	.word	0x2400789c
 8012e60:	24004160 	.word	0x24004160
 8012e64:	24004168 	.word	0x24004168
 8012e68:	0801c12c 	.word	0x0801c12c
 8012e6c:	0801c2e0 	.word	0x0801c2e0
 8012e70:	0801c178 	.word	0x0801c178
 8012e74:	24004138 	.word	0x24004138
 8012e78:	24004148 	.word	0x24004148
 8012e7c:	2400415c 	.word	0x2400415c
 8012e80:	24004162 	.word	0x24004162
 8012e84:	24004158 	.word	0x24004158
 8012e88:	240047ec 	.word	0x240047ec
 8012e8c:	240047f0 	.word	0x240047f0

08012e90 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d106      	bne.n	8012eac <tcp_input_delayed_close+0x1c>
 8012e9e:	4b17      	ldr	r3, [pc, #92]	; (8012efc <tcp_input_delayed_close+0x6c>)
 8012ea0:	f240 225a 	movw	r2, #602	; 0x25a
 8012ea4:	4916      	ldr	r1, [pc, #88]	; (8012f00 <tcp_input_delayed_close+0x70>)
 8012ea6:	4817      	ldr	r0, [pc, #92]	; (8012f04 <tcp_input_delayed_close+0x74>)
 8012ea8:	f006 ff5c 	bl	8019d64 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012eac:	4b16      	ldr	r3, [pc, #88]	; (8012f08 <tcp_input_delayed_close+0x78>)
 8012eae:	781b      	ldrb	r3, [r3, #0]
 8012eb0:	f003 0310 	and.w	r3, r3, #16
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d01c      	beq.n	8012ef2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	8b5b      	ldrh	r3, [r3, #26]
 8012ebc:	f003 0310 	and.w	r3, r3, #16
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d10d      	bne.n	8012ee0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d008      	beq.n	8012ee0 <tcp_input_delayed_close+0x50>
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ed4:	687a      	ldr	r2, [r7, #4]
 8012ed6:	6912      	ldr	r2, [r2, #16]
 8012ed8:	f06f 010e 	mvn.w	r1, #14
 8012edc:	4610      	mov	r0, r2
 8012ede:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012ee0:	6879      	ldr	r1, [r7, #4]
 8012ee2:	480a      	ldr	r0, [pc, #40]	; (8012f0c <tcp_input_delayed_close+0x7c>)
 8012ee4:	f7ff fa52 	bl	801238c <tcp_pcb_remove>
    tcp_free(pcb);
 8012ee8:	6878      	ldr	r0, [r7, #4]
 8012eea:	f7fd fd9f 	bl	8010a2c <tcp_free>
    return 1;
 8012eee:	2301      	movs	r3, #1
 8012ef0:	e000      	b.n	8012ef4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8012ef2:	2300      	movs	r3, #0
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	3708      	adds	r7, #8
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	bd80      	pop	{r7, pc}
 8012efc:	0801c12c 	.word	0x0801c12c
 8012f00:	0801c2fc 	.word	0x0801c2fc
 8012f04:	0801c178 	.word	0x0801c178
 8012f08:	24004165 	.word	0x24004165
 8012f0c:	2400789c 	.word	0x2400789c

08012f10 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8012f10:	b590      	push	{r4, r7, lr}
 8012f12:	b08b      	sub	sp, #44	; 0x2c
 8012f14:	af04      	add	r7, sp, #16
 8012f16:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012f18:	4b6f      	ldr	r3, [pc, #444]	; (80130d8 <tcp_listen_input+0x1c8>)
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	f003 0304 	and.w	r3, r3, #4
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	f040 80d2 	bne.w	80130ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d106      	bne.n	8012f3a <tcp_listen_input+0x2a>
 8012f2c:	4b6b      	ldr	r3, [pc, #428]	; (80130dc <tcp_listen_input+0x1cc>)
 8012f2e:	f240 2281 	movw	r2, #641	; 0x281
 8012f32:	496b      	ldr	r1, [pc, #428]	; (80130e0 <tcp_listen_input+0x1d0>)
 8012f34:	486b      	ldr	r0, [pc, #428]	; (80130e4 <tcp_listen_input+0x1d4>)
 8012f36:	f006 ff15 	bl	8019d64 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8012f3a:	4b67      	ldr	r3, [pc, #412]	; (80130d8 <tcp_listen_input+0x1c8>)
 8012f3c:	781b      	ldrb	r3, [r3, #0]
 8012f3e:	f003 0310 	and.w	r3, r3, #16
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d019      	beq.n	8012f7a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f46:	4b68      	ldr	r3, [pc, #416]	; (80130e8 <tcp_listen_input+0x1d8>)
 8012f48:	6819      	ldr	r1, [r3, #0]
 8012f4a:	4b68      	ldr	r3, [pc, #416]	; (80130ec <tcp_listen_input+0x1dc>)
 8012f4c:	881b      	ldrh	r3, [r3, #0]
 8012f4e:	461a      	mov	r2, r3
 8012f50:	4b67      	ldr	r3, [pc, #412]	; (80130f0 <tcp_listen_input+0x1e0>)
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f56:	4b67      	ldr	r3, [pc, #412]	; (80130f4 <tcp_listen_input+0x1e4>)
 8012f58:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f5a:	885b      	ldrh	r3, [r3, #2]
 8012f5c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012f5e:	4a65      	ldr	r2, [pc, #404]	; (80130f4 <tcp_listen_input+0x1e4>)
 8012f60:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012f62:	8812      	ldrh	r2, [r2, #0]
 8012f64:	b292      	uxth	r2, r2
 8012f66:	9202      	str	r2, [sp, #8]
 8012f68:	9301      	str	r3, [sp, #4]
 8012f6a:	4b63      	ldr	r3, [pc, #396]	; (80130f8 <tcp_listen_input+0x1e8>)
 8012f6c:	9300      	str	r3, [sp, #0]
 8012f6e:	4b63      	ldr	r3, [pc, #396]	; (80130fc <tcp_listen_input+0x1ec>)
 8012f70:	4602      	mov	r2, r0
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f003 fbd6 	bl	8016724 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8012f78:	e0a9      	b.n	80130ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8012f7a:	4b57      	ldr	r3, [pc, #348]	; (80130d8 <tcp_listen_input+0x1c8>)
 8012f7c:	781b      	ldrb	r3, [r3, #0]
 8012f7e:	f003 0302 	and.w	r3, r3, #2
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	f000 80a3 	beq.w	80130ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	7d5b      	ldrb	r3, [r3, #21]
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	f7ff f861 	bl	8012054 <tcp_alloc>
 8012f92:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012f94:	697b      	ldr	r3, [r7, #20]
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d111      	bne.n	8012fbe <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	699b      	ldr	r3, [r3, #24]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d00a      	beq.n	8012fb8 <tcp_listen_input+0xa8>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	699b      	ldr	r3, [r3, #24]
 8012fa6:	687a      	ldr	r2, [r7, #4]
 8012fa8:	6910      	ldr	r0, [r2, #16]
 8012faa:	f04f 32ff 	mov.w	r2, #4294967295
 8012fae:	2100      	movs	r1, #0
 8012fb0:	4798      	blx	r3
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	73bb      	strb	r3, [r7, #14]
      return;
 8012fb6:	e08b      	b.n	80130d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012fb8:	23f0      	movs	r3, #240	; 0xf0
 8012fba:	73bb      	strb	r3, [r7, #14]
      return;
 8012fbc:	e088      	b.n	80130d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8012fbe:	4b50      	ldr	r3, [pc, #320]	; (8013100 <tcp_listen_input+0x1f0>)
 8012fc0:	695a      	ldr	r2, [r3, #20]
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012fc6:	4b4e      	ldr	r3, [pc, #312]	; (8013100 <tcp_listen_input+0x1f0>)
 8012fc8:	691a      	ldr	r2, [r3, #16]
 8012fca:	697b      	ldr	r3, [r7, #20]
 8012fcc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	8ada      	ldrh	r2, [r3, #22]
 8012fd2:	697b      	ldr	r3, [r7, #20]
 8012fd4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012fd6:	4b47      	ldr	r3, [pc, #284]	; (80130f4 <tcp_listen_input+0x1e4>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	881b      	ldrh	r3, [r3, #0]
 8012fdc:	b29a      	uxth	r2, r3
 8012fde:	697b      	ldr	r3, [r7, #20]
 8012fe0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	2203      	movs	r2, #3
 8012fe6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012fe8:	4b41      	ldr	r3, [pc, #260]	; (80130f0 <tcp_listen_input+0x1e0>)
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	1c5a      	adds	r2, r3, #1
 8012fee:	697b      	ldr	r3, [r7, #20]
 8012ff0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8012ff2:	697b      	ldr	r3, [r7, #20]
 8012ff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012ffa:	6978      	ldr	r0, [r7, #20]
 8012ffc:	f7ff fa5a 	bl	80124b4 <tcp_next_iss>
 8013000:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	693a      	ldr	r2, [r7, #16]
 8013006:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	693a      	ldr	r2, [r7, #16]
 801300c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801300e:	697b      	ldr	r3, [r7, #20]
 8013010:	693a      	ldr	r2, [r7, #16]
 8013012:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013014:	697b      	ldr	r3, [r7, #20]
 8013016:	693a      	ldr	r2, [r7, #16]
 8013018:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801301a:	4b35      	ldr	r3, [pc, #212]	; (80130f0 <tcp_listen_input+0x1e0>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	1e5a      	subs	r2, r3, #1
 8013020:	697b      	ldr	r3, [r7, #20]
 8013022:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	691a      	ldr	r2, [r3, #16]
 8013028:	697b      	ldr	r3, [r7, #20]
 801302a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	687a      	ldr	r2, [r7, #4]
 8013030:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	7a5b      	ldrb	r3, [r3, #9]
 8013036:	f003 030c 	and.w	r3, r3, #12
 801303a:	b2da      	uxtb	r2, r3
 801303c:	697b      	ldr	r3, [r7, #20]
 801303e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	7a1a      	ldrb	r2, [r3, #8]
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013048:	4b2e      	ldr	r3, [pc, #184]	; (8013104 <tcp_listen_input+0x1f4>)
 801304a:	681a      	ldr	r2, [r3, #0]
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	60da      	str	r2, [r3, #12]
 8013050:	4a2c      	ldr	r2, [pc, #176]	; (8013104 <tcp_listen_input+0x1f4>)
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	6013      	str	r3, [r2, #0]
 8013056:	f003 fd27 	bl	8016aa8 <tcp_timer_needed>
 801305a:	4b2b      	ldr	r3, [pc, #172]	; (8013108 <tcp_listen_input+0x1f8>)
 801305c:	2201      	movs	r2, #1
 801305e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013060:	6978      	ldr	r0, [r7, #20]
 8013062:	f001 fd8d 	bl	8014b80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013066:	4b23      	ldr	r3, [pc, #140]	; (80130f4 <tcp_listen_input+0x1e4>)
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	89db      	ldrh	r3, [r3, #14]
 801306c:	b29a      	uxth	r2, r3
 801306e:	697b      	ldr	r3, [r7, #20]
 8013070:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013074:	697b      	ldr	r3, [r7, #20]
 8013076:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801307a:	697b      	ldr	r3, [r7, #20]
 801307c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013080:	697b      	ldr	r3, [r7, #20]
 8013082:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	3304      	adds	r3, #4
 8013088:	4618      	mov	r0, r3
 801308a:	f005 f941 	bl	8018310 <ip4_route>
 801308e:	4601      	mov	r1, r0
 8013090:	697b      	ldr	r3, [r7, #20]
 8013092:	3304      	adds	r3, #4
 8013094:	461a      	mov	r2, r3
 8013096:	4620      	mov	r0, r4
 8013098:	f7ff fa32 	bl	8012500 <tcp_eff_send_mss_netif>
 801309c:	4603      	mov	r3, r0
 801309e:	461a      	mov	r2, r3
 80130a0:	697b      	ldr	r3, [r7, #20]
 80130a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80130a4:	2112      	movs	r1, #18
 80130a6:	6978      	ldr	r0, [r7, #20]
 80130a8:	f002 fc9a 	bl	80159e0 <tcp_enqueue_flags>
 80130ac:	4603      	mov	r3, r0
 80130ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80130b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d004      	beq.n	80130c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80130b8:	2100      	movs	r1, #0
 80130ba:	6978      	ldr	r0, [r7, #20]
 80130bc:	f7fd fee0 	bl	8010e80 <tcp_abandon>
      return;
 80130c0:	e006      	b.n	80130d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80130c2:	6978      	ldr	r0, [r7, #20]
 80130c4:	f002 fd7a 	bl	8015bbc <tcp_output>
  return;
 80130c8:	e001      	b.n	80130ce <tcp_listen_input+0x1be>
    return;
 80130ca:	bf00      	nop
 80130cc:	e000      	b.n	80130d0 <tcp_listen_input+0x1c0>
  return;
 80130ce:	bf00      	nop
}
 80130d0:	371c      	adds	r7, #28
 80130d2:	46bd      	mov	sp, r7
 80130d4:	bd90      	pop	{r4, r7, pc}
 80130d6:	bf00      	nop
 80130d8:	24004164 	.word	0x24004164
 80130dc:	0801c12c 	.word	0x0801c12c
 80130e0:	0801c324 	.word	0x0801c324
 80130e4:	0801c178 	.word	0x0801c178
 80130e8:	2400415c 	.word	0x2400415c
 80130ec:	24004162 	.word	0x24004162
 80130f0:	24004158 	.word	0x24004158
 80130f4:	24004148 	.word	0x24004148
 80130f8:	240047ec 	.word	0x240047ec
 80130fc:	240047f0 	.word	0x240047f0
 8013100:	240047dc 	.word	0x240047dc
 8013104:	2400789c 	.word	0x2400789c
 8013108:	24007898 	.word	0x24007898

0801310c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b086      	sub	sp, #24
 8013110:	af04      	add	r7, sp, #16
 8013112:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013114:	4b2f      	ldr	r3, [pc, #188]	; (80131d4 <tcp_timewait_input+0xc8>)
 8013116:	781b      	ldrb	r3, [r3, #0]
 8013118:	f003 0304 	and.w	r3, r3, #4
 801311c:	2b00      	cmp	r3, #0
 801311e:	d153      	bne.n	80131c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	2b00      	cmp	r3, #0
 8013124:	d106      	bne.n	8013134 <tcp_timewait_input+0x28>
 8013126:	4b2c      	ldr	r3, [pc, #176]	; (80131d8 <tcp_timewait_input+0xcc>)
 8013128:	f240 22ee 	movw	r2, #750	; 0x2ee
 801312c:	492b      	ldr	r1, [pc, #172]	; (80131dc <tcp_timewait_input+0xd0>)
 801312e:	482c      	ldr	r0, [pc, #176]	; (80131e0 <tcp_timewait_input+0xd4>)
 8013130:	f006 fe18 	bl	8019d64 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013134:	4b27      	ldr	r3, [pc, #156]	; (80131d4 <tcp_timewait_input+0xc8>)
 8013136:	781b      	ldrb	r3, [r3, #0]
 8013138:	f003 0302 	and.w	r3, r3, #2
 801313c:	2b00      	cmp	r3, #0
 801313e:	d02a      	beq.n	8013196 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013140:	4b28      	ldr	r3, [pc, #160]	; (80131e4 <tcp_timewait_input+0xd8>)
 8013142:	681a      	ldr	r2, [r3, #0]
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013148:	1ad3      	subs	r3, r2, r3
 801314a:	2b00      	cmp	r3, #0
 801314c:	db2d      	blt.n	80131aa <tcp_timewait_input+0x9e>
 801314e:	4b25      	ldr	r3, [pc, #148]	; (80131e4 <tcp_timewait_input+0xd8>)
 8013150:	681a      	ldr	r2, [r3, #0]
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013156:	6879      	ldr	r1, [r7, #4]
 8013158:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801315a:	440b      	add	r3, r1
 801315c:	1ad3      	subs	r3, r2, r3
 801315e:	2b00      	cmp	r3, #0
 8013160:	dc23      	bgt.n	80131aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013162:	4b21      	ldr	r3, [pc, #132]	; (80131e8 <tcp_timewait_input+0xdc>)
 8013164:	6819      	ldr	r1, [r3, #0]
 8013166:	4b21      	ldr	r3, [pc, #132]	; (80131ec <tcp_timewait_input+0xe0>)
 8013168:	881b      	ldrh	r3, [r3, #0]
 801316a:	461a      	mov	r2, r3
 801316c:	4b1d      	ldr	r3, [pc, #116]	; (80131e4 <tcp_timewait_input+0xd8>)
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013172:	4b1f      	ldr	r3, [pc, #124]	; (80131f0 <tcp_timewait_input+0xe4>)
 8013174:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013176:	885b      	ldrh	r3, [r3, #2]
 8013178:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801317a:	4a1d      	ldr	r2, [pc, #116]	; (80131f0 <tcp_timewait_input+0xe4>)
 801317c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801317e:	8812      	ldrh	r2, [r2, #0]
 8013180:	b292      	uxth	r2, r2
 8013182:	9202      	str	r2, [sp, #8]
 8013184:	9301      	str	r3, [sp, #4]
 8013186:	4b1b      	ldr	r3, [pc, #108]	; (80131f4 <tcp_timewait_input+0xe8>)
 8013188:	9300      	str	r3, [sp, #0]
 801318a:	4b1b      	ldr	r3, [pc, #108]	; (80131f8 <tcp_timewait_input+0xec>)
 801318c:	4602      	mov	r2, r0
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f003 fac8 	bl	8016724 <tcp_rst>
      return;
 8013194:	e01b      	b.n	80131ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013196:	4b0f      	ldr	r3, [pc, #60]	; (80131d4 <tcp_timewait_input+0xc8>)
 8013198:	781b      	ldrb	r3, [r3, #0]
 801319a:	f003 0301 	and.w	r3, r3, #1
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d003      	beq.n	80131aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80131a2:	4b16      	ldr	r3, [pc, #88]	; (80131fc <tcp_timewait_input+0xf0>)
 80131a4:	681a      	ldr	r2, [r3, #0]
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80131aa:	4b10      	ldr	r3, [pc, #64]	; (80131ec <tcp_timewait_input+0xe0>)
 80131ac:	881b      	ldrh	r3, [r3, #0]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00c      	beq.n	80131cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	8b5b      	ldrh	r3, [r3, #26]
 80131b6:	f043 0302 	orr.w	r3, r3, #2
 80131ba:	b29a      	uxth	r2, r3
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80131c0:	6878      	ldr	r0, [r7, #4]
 80131c2:	f002 fcfb 	bl	8015bbc <tcp_output>
  }
  return;
 80131c6:	e001      	b.n	80131cc <tcp_timewait_input+0xc0>
    return;
 80131c8:	bf00      	nop
 80131ca:	e000      	b.n	80131ce <tcp_timewait_input+0xc2>
  return;
 80131cc:	bf00      	nop
}
 80131ce:	3708      	adds	r7, #8
 80131d0:	46bd      	mov	sp, r7
 80131d2:	bd80      	pop	{r7, pc}
 80131d4:	24004164 	.word	0x24004164
 80131d8:	0801c12c 	.word	0x0801c12c
 80131dc:	0801c344 	.word	0x0801c344
 80131e0:	0801c178 	.word	0x0801c178
 80131e4:	24004158 	.word	0x24004158
 80131e8:	2400415c 	.word	0x2400415c
 80131ec:	24004162 	.word	0x24004162
 80131f0:	24004148 	.word	0x24004148
 80131f4:	240047ec 	.word	0x240047ec
 80131f8:	240047f0 	.word	0x240047f0
 80131fc:	240078a0 	.word	0x240078a0

08013200 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013200:	b590      	push	{r4, r7, lr}
 8013202:	b08d      	sub	sp, #52	; 0x34
 8013204:	af04      	add	r7, sp, #16
 8013206:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013208:	2300      	movs	r3, #0
 801320a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801320c:	2300      	movs	r3, #0
 801320e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d106      	bne.n	8013224 <tcp_process+0x24>
 8013216:	4ba5      	ldr	r3, [pc, #660]	; (80134ac <tcp_process+0x2ac>)
 8013218:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801321c:	49a4      	ldr	r1, [pc, #656]	; (80134b0 <tcp_process+0x2b0>)
 801321e:	48a5      	ldr	r0, [pc, #660]	; (80134b4 <tcp_process+0x2b4>)
 8013220:	f006 fda0 	bl	8019d64 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013224:	4ba4      	ldr	r3, [pc, #656]	; (80134b8 <tcp_process+0x2b8>)
 8013226:	781b      	ldrb	r3, [r3, #0]
 8013228:	f003 0304 	and.w	r3, r3, #4
 801322c:	2b00      	cmp	r3, #0
 801322e:	d04e      	beq.n	80132ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	7d1b      	ldrb	r3, [r3, #20]
 8013234:	2b02      	cmp	r3, #2
 8013236:	d108      	bne.n	801324a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801323c:	4b9f      	ldr	r3, [pc, #636]	; (80134bc <tcp_process+0x2bc>)
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	429a      	cmp	r2, r3
 8013242:	d123      	bne.n	801328c <tcp_process+0x8c>
        acceptable = 1;
 8013244:	2301      	movs	r3, #1
 8013246:	76fb      	strb	r3, [r7, #27]
 8013248:	e020      	b.n	801328c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801324e:	4b9c      	ldr	r3, [pc, #624]	; (80134c0 <tcp_process+0x2c0>)
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	429a      	cmp	r2, r3
 8013254:	d102      	bne.n	801325c <tcp_process+0x5c>
        acceptable = 1;
 8013256:	2301      	movs	r3, #1
 8013258:	76fb      	strb	r3, [r7, #27]
 801325a:	e017      	b.n	801328c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801325c:	4b98      	ldr	r3, [pc, #608]	; (80134c0 <tcp_process+0x2c0>)
 801325e:	681a      	ldr	r2, [r3, #0]
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013264:	1ad3      	subs	r3, r2, r3
 8013266:	2b00      	cmp	r3, #0
 8013268:	db10      	blt.n	801328c <tcp_process+0x8c>
 801326a:	4b95      	ldr	r3, [pc, #596]	; (80134c0 <tcp_process+0x2c0>)
 801326c:	681a      	ldr	r2, [r3, #0]
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013272:	6879      	ldr	r1, [r7, #4]
 8013274:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013276:	440b      	add	r3, r1
 8013278:	1ad3      	subs	r3, r2, r3
 801327a:	2b00      	cmp	r3, #0
 801327c:	dc06      	bgt.n	801328c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	8b5b      	ldrh	r3, [r3, #26]
 8013282:	f043 0302 	orr.w	r3, r3, #2
 8013286:	b29a      	uxth	r2, r3
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801328c:	7efb      	ldrb	r3, [r7, #27]
 801328e:	2b00      	cmp	r3, #0
 8013290:	d01b      	beq.n	80132ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013292:	687b      	ldr	r3, [r7, #4]
 8013294:	7d1b      	ldrb	r3, [r3, #20]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d106      	bne.n	80132a8 <tcp_process+0xa8>
 801329a:	4b84      	ldr	r3, [pc, #528]	; (80134ac <tcp_process+0x2ac>)
 801329c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80132a0:	4988      	ldr	r1, [pc, #544]	; (80134c4 <tcp_process+0x2c4>)
 80132a2:	4884      	ldr	r0, [pc, #528]	; (80134b4 <tcp_process+0x2b4>)
 80132a4:	f006 fd5e 	bl	8019d64 <iprintf>
      recv_flags |= TF_RESET;
 80132a8:	4b87      	ldr	r3, [pc, #540]	; (80134c8 <tcp_process+0x2c8>)
 80132aa:	781b      	ldrb	r3, [r3, #0]
 80132ac:	f043 0308 	orr.w	r3, r3, #8
 80132b0:	b2da      	uxtb	r2, r3
 80132b2:	4b85      	ldr	r3, [pc, #532]	; (80134c8 <tcp_process+0x2c8>)
 80132b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	8b5b      	ldrh	r3, [r3, #26]
 80132ba:	f023 0301 	bic.w	r3, r3, #1
 80132be:	b29a      	uxth	r2, r3
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80132c4:	f06f 030d 	mvn.w	r3, #13
 80132c8:	e37a      	b.n	80139c0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80132ca:	2300      	movs	r3, #0
 80132cc:	e378      	b.n	80139c0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80132ce:	4b7a      	ldr	r3, [pc, #488]	; (80134b8 <tcp_process+0x2b8>)
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	f003 0302 	and.w	r3, r3, #2
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d010      	beq.n	80132fc <tcp_process+0xfc>
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	7d1b      	ldrb	r3, [r3, #20]
 80132de:	2b02      	cmp	r3, #2
 80132e0:	d00c      	beq.n	80132fc <tcp_process+0xfc>
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	7d1b      	ldrb	r3, [r3, #20]
 80132e6:	2b03      	cmp	r3, #3
 80132e8:	d008      	beq.n	80132fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	8b5b      	ldrh	r3, [r3, #26]
 80132ee:	f043 0302 	orr.w	r3, r3, #2
 80132f2:	b29a      	uxth	r2, r3
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80132f8:	2300      	movs	r3, #0
 80132fa:	e361      	b.n	80139c0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	8b5b      	ldrh	r3, [r3, #26]
 8013300:	f003 0310 	and.w	r3, r3, #16
 8013304:	2b00      	cmp	r3, #0
 8013306:	d103      	bne.n	8013310 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013308:	4b70      	ldr	r3, [pc, #448]	; (80134cc <tcp_process+0x2cc>)
 801330a:	681a      	ldr	r2, [r3, #0]
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2200      	movs	r2, #0
 8013314:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	2200      	movs	r2, #0
 801331c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013320:	6878      	ldr	r0, [r7, #4]
 8013322:	f001 fc2d 	bl	8014b80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	7d1b      	ldrb	r3, [r3, #20]
 801332a:	3b02      	subs	r3, #2
 801332c:	2b07      	cmp	r3, #7
 801332e:	f200 8337 	bhi.w	80139a0 <tcp_process+0x7a0>
 8013332:	a201      	add	r2, pc, #4	; (adr r2, 8013338 <tcp_process+0x138>)
 8013334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013338:	08013359 	.word	0x08013359
 801333c:	08013589 	.word	0x08013589
 8013340:	08013701 	.word	0x08013701
 8013344:	0801372b 	.word	0x0801372b
 8013348:	0801384f 	.word	0x0801384f
 801334c:	08013701 	.word	0x08013701
 8013350:	080138db 	.word	0x080138db
 8013354:	0801396b 	.word	0x0801396b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013358:	4b57      	ldr	r3, [pc, #348]	; (80134b8 <tcp_process+0x2b8>)
 801335a:	781b      	ldrb	r3, [r3, #0]
 801335c:	f003 0310 	and.w	r3, r3, #16
 8013360:	2b00      	cmp	r3, #0
 8013362:	f000 80e4 	beq.w	801352e <tcp_process+0x32e>
 8013366:	4b54      	ldr	r3, [pc, #336]	; (80134b8 <tcp_process+0x2b8>)
 8013368:	781b      	ldrb	r3, [r3, #0]
 801336a:	f003 0302 	and.w	r3, r3, #2
 801336e:	2b00      	cmp	r3, #0
 8013370:	f000 80dd 	beq.w	801352e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013378:	1c5a      	adds	r2, r3, #1
 801337a:	4b50      	ldr	r3, [pc, #320]	; (80134bc <tcp_process+0x2bc>)
 801337c:	681b      	ldr	r3, [r3, #0]
 801337e:	429a      	cmp	r2, r3
 8013380:	f040 80d5 	bne.w	801352e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013384:	4b4e      	ldr	r3, [pc, #312]	; (80134c0 <tcp_process+0x2c0>)
 8013386:	681b      	ldr	r3, [r3, #0]
 8013388:	1c5a      	adds	r2, r3, #1
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013396:	4b49      	ldr	r3, [pc, #292]	; (80134bc <tcp_process+0x2bc>)
 8013398:	681a      	ldr	r2, [r3, #0]
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801339e:	4b4c      	ldr	r3, [pc, #304]	; (80134d0 <tcp_process+0x2d0>)
 80133a0:	681b      	ldr	r3, [r3, #0]
 80133a2:	89db      	ldrh	r3, [r3, #14]
 80133a4:	b29a      	uxth	r2, r3
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80133b8:	4b41      	ldr	r3, [pc, #260]	; (80134c0 <tcp_process+0x2c0>)
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	1e5a      	subs	r2, r3, #1
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	2204      	movs	r2, #4
 80133c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80133cc:	687b      	ldr	r3, [r7, #4]
 80133ce:	3304      	adds	r3, #4
 80133d0:	4618      	mov	r0, r3
 80133d2:	f004 ff9d 	bl	8018310 <ip4_route>
 80133d6:	4601      	mov	r1, r0
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	3304      	adds	r3, #4
 80133dc:	461a      	mov	r2, r3
 80133de:	4620      	mov	r0, r4
 80133e0:	f7ff f88e 	bl	8012500 <tcp_eff_send_mss_netif>
 80133e4:	4603      	mov	r3, r0
 80133e6:	461a      	mov	r2, r3
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133f0:	009a      	lsls	r2, r3, #2
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80133f6:	005b      	lsls	r3, r3, #1
 80133f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80133fc:	428b      	cmp	r3, r1
 80133fe:	bf38      	it	cc
 8013400:	460b      	movcc	r3, r1
 8013402:	429a      	cmp	r2, r3
 8013404:	d204      	bcs.n	8013410 <tcp_process+0x210>
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801340a:	009b      	lsls	r3, r3, #2
 801340c:	b29b      	uxth	r3, r3
 801340e:	e00d      	b.n	801342c <tcp_process+0x22c>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013414:	005b      	lsls	r3, r3, #1
 8013416:	f241 121c 	movw	r2, #4380	; 0x111c
 801341a:	4293      	cmp	r3, r2
 801341c:	d904      	bls.n	8013428 <tcp_process+0x228>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013422:	005b      	lsls	r3, r3, #1
 8013424:	b29b      	uxth	r3, r3
 8013426:	e001      	b.n	801342c <tcp_process+0x22c>
 8013428:	f241 131c 	movw	r3, #4380	; 0x111c
 801342c:	687a      	ldr	r2, [r7, #4]
 801342e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013438:	2b00      	cmp	r3, #0
 801343a:	d106      	bne.n	801344a <tcp_process+0x24a>
 801343c:	4b1b      	ldr	r3, [pc, #108]	; (80134ac <tcp_process+0x2ac>)
 801343e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013442:	4924      	ldr	r1, [pc, #144]	; (80134d4 <tcp_process+0x2d4>)
 8013444:	481b      	ldr	r0, [pc, #108]	; (80134b4 <tcp_process+0x2b4>)
 8013446:	f006 fc8d 	bl	8019d64 <iprintf>
        --pcb->snd_queuelen;
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013450:	3b01      	subs	r3, #1
 8013452:	b29a      	uxth	r2, r3
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801345e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	2b00      	cmp	r3, #0
 8013464:	d111      	bne.n	801348a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801346a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801346c:	69fb      	ldr	r3, [r7, #28]
 801346e:	2b00      	cmp	r3, #0
 8013470:	d106      	bne.n	8013480 <tcp_process+0x280>
 8013472:	4b0e      	ldr	r3, [pc, #56]	; (80134ac <tcp_process+0x2ac>)
 8013474:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013478:	4917      	ldr	r1, [pc, #92]	; (80134d8 <tcp_process+0x2d8>)
 801347a:	480e      	ldr	r0, [pc, #56]	; (80134b4 <tcp_process+0x2b4>)
 801347c:	f006 fc72 	bl	8019d64 <iprintf>
          pcb->unsent = rseg->next;
 8013480:	69fb      	ldr	r3, [r7, #28]
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	66da      	str	r2, [r3, #108]	; 0x6c
 8013488:	e003      	b.n	8013492 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801348a:	69fb      	ldr	r3, [r7, #28]
 801348c:	681a      	ldr	r2, [r3, #0]
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013492:	69f8      	ldr	r0, [r7, #28]
 8013494:	f7fe fc57 	bl	8011d46 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801349c:	2b00      	cmp	r3, #0
 801349e:	d11d      	bne.n	80134dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80134a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80134a8:	e01f      	b.n	80134ea <tcp_process+0x2ea>
 80134aa:	bf00      	nop
 80134ac:	0801c12c 	.word	0x0801c12c
 80134b0:	0801c364 	.word	0x0801c364
 80134b4:	0801c178 	.word	0x0801c178
 80134b8:	24004164 	.word	0x24004164
 80134bc:	2400415c 	.word	0x2400415c
 80134c0:	24004158 	.word	0x24004158
 80134c4:	0801c380 	.word	0x0801c380
 80134c8:	24004165 	.word	0x24004165
 80134cc:	240078a0 	.word	0x240078a0
 80134d0:	24004148 	.word	0x24004148
 80134d4:	0801c3a0 	.word	0x0801c3a0
 80134d8:	0801c3b8 	.word	0x0801c3b8
        } else {
          pcb->rtime = 0;
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	2200      	movs	r2, #0
 80134e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	2200      	movs	r2, #0
 80134e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d00a      	beq.n	801350a <tcp_process+0x30a>
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	6910      	ldr	r0, [r2, #16]
 80134fe:	2200      	movs	r2, #0
 8013500:	6879      	ldr	r1, [r7, #4]
 8013502:	4798      	blx	r3
 8013504:	4603      	mov	r3, r0
 8013506:	76bb      	strb	r3, [r7, #26]
 8013508:	e001      	b.n	801350e <tcp_process+0x30e>
 801350a:	2300      	movs	r3, #0
 801350c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801350e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013512:	f113 0f0d 	cmn.w	r3, #13
 8013516:	d102      	bne.n	801351e <tcp_process+0x31e>
          return ERR_ABRT;
 8013518:	f06f 030c 	mvn.w	r3, #12
 801351c:	e250      	b.n	80139c0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	8b5b      	ldrh	r3, [r3, #26]
 8013522:	f043 0302 	orr.w	r3, r3, #2
 8013526:	b29a      	uxth	r2, r3
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801352c:	e23a      	b.n	80139a4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801352e:	4b9d      	ldr	r3, [pc, #628]	; (80137a4 <tcp_process+0x5a4>)
 8013530:	781b      	ldrb	r3, [r3, #0]
 8013532:	f003 0310 	and.w	r3, r3, #16
 8013536:	2b00      	cmp	r3, #0
 8013538:	f000 8234 	beq.w	80139a4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801353c:	4b9a      	ldr	r3, [pc, #616]	; (80137a8 <tcp_process+0x5a8>)
 801353e:	6819      	ldr	r1, [r3, #0]
 8013540:	4b9a      	ldr	r3, [pc, #616]	; (80137ac <tcp_process+0x5ac>)
 8013542:	881b      	ldrh	r3, [r3, #0]
 8013544:	461a      	mov	r2, r3
 8013546:	4b9a      	ldr	r3, [pc, #616]	; (80137b0 <tcp_process+0x5b0>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801354c:	4b99      	ldr	r3, [pc, #612]	; (80137b4 <tcp_process+0x5b4>)
 801354e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013550:	885b      	ldrh	r3, [r3, #2]
 8013552:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013554:	4a97      	ldr	r2, [pc, #604]	; (80137b4 <tcp_process+0x5b4>)
 8013556:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013558:	8812      	ldrh	r2, [r2, #0]
 801355a:	b292      	uxth	r2, r2
 801355c:	9202      	str	r2, [sp, #8]
 801355e:	9301      	str	r3, [sp, #4]
 8013560:	4b95      	ldr	r3, [pc, #596]	; (80137b8 <tcp_process+0x5b8>)
 8013562:	9300      	str	r3, [sp, #0]
 8013564:	4b95      	ldr	r3, [pc, #596]	; (80137bc <tcp_process+0x5bc>)
 8013566:	4602      	mov	r2, r0
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	f003 f8db 	bl	8016724 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013574:	2b05      	cmp	r3, #5
 8013576:	f200 8215 	bhi.w	80139a4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2200      	movs	r2, #0
 801357e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013580:	6878      	ldr	r0, [r7, #4]
 8013582:	f002 fea5 	bl	80162d0 <tcp_rexmit_rto>
      break;
 8013586:	e20d      	b.n	80139a4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013588:	4b86      	ldr	r3, [pc, #536]	; (80137a4 <tcp_process+0x5a4>)
 801358a:	781b      	ldrb	r3, [r3, #0]
 801358c:	f003 0310 	and.w	r3, r3, #16
 8013590:	2b00      	cmp	r3, #0
 8013592:	f000 80a1 	beq.w	80136d8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013596:	4b84      	ldr	r3, [pc, #528]	; (80137a8 <tcp_process+0x5a8>)
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801359e:	1ad3      	subs	r3, r2, r3
 80135a0:	3b01      	subs	r3, #1
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	db7e      	blt.n	80136a4 <tcp_process+0x4a4>
 80135a6:	4b80      	ldr	r3, [pc, #512]	; (80137a8 <tcp_process+0x5a8>)
 80135a8:	681a      	ldr	r2, [r3, #0]
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80135ae:	1ad3      	subs	r3, r2, r3
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	dc77      	bgt.n	80136a4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2204      	movs	r2, #4
 80135b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d102      	bne.n	80135c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80135c2:	23fa      	movs	r3, #250	; 0xfa
 80135c4:	76bb      	strb	r3, [r7, #26]
 80135c6:	e01d      	b.n	8013604 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135cc:	699b      	ldr	r3, [r3, #24]
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d106      	bne.n	80135e0 <tcp_process+0x3e0>
 80135d2:	4b7b      	ldr	r3, [pc, #492]	; (80137c0 <tcp_process+0x5c0>)
 80135d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80135d8:	497a      	ldr	r1, [pc, #488]	; (80137c4 <tcp_process+0x5c4>)
 80135da:	487b      	ldr	r0, [pc, #492]	; (80137c8 <tcp_process+0x5c8>)
 80135dc:	f006 fbc2 	bl	8019d64 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135e4:	699b      	ldr	r3, [r3, #24]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d00a      	beq.n	8013600 <tcp_process+0x400>
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135ee:	699b      	ldr	r3, [r3, #24]
 80135f0:	687a      	ldr	r2, [r7, #4]
 80135f2:	6910      	ldr	r0, [r2, #16]
 80135f4:	2200      	movs	r2, #0
 80135f6:	6879      	ldr	r1, [r7, #4]
 80135f8:	4798      	blx	r3
 80135fa:	4603      	mov	r3, r0
 80135fc:	76bb      	strb	r3, [r7, #26]
 80135fe:	e001      	b.n	8013604 <tcp_process+0x404>
 8013600:	23f0      	movs	r3, #240	; 0xf0
 8013602:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013604:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d00a      	beq.n	8013622 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801360c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013610:	f113 0f0d 	cmn.w	r3, #13
 8013614:	d002      	beq.n	801361c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013616:	6878      	ldr	r0, [r7, #4]
 8013618:	f7fd fcf0 	bl	8010ffc <tcp_abort>
            }
            return ERR_ABRT;
 801361c:	f06f 030c 	mvn.w	r3, #12
 8013620:	e1ce      	b.n	80139c0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013622:	6878      	ldr	r0, [r7, #4]
 8013624:	f000 fae0 	bl	8013be8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013628:	4b68      	ldr	r3, [pc, #416]	; (80137cc <tcp_process+0x5cc>)
 801362a:	881b      	ldrh	r3, [r3, #0]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d005      	beq.n	801363c <tcp_process+0x43c>
            recv_acked--;
 8013630:	4b66      	ldr	r3, [pc, #408]	; (80137cc <tcp_process+0x5cc>)
 8013632:	881b      	ldrh	r3, [r3, #0]
 8013634:	3b01      	subs	r3, #1
 8013636:	b29a      	uxth	r2, r3
 8013638:	4b64      	ldr	r3, [pc, #400]	; (80137cc <tcp_process+0x5cc>)
 801363a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013640:	009a      	lsls	r2, r3, #2
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013646:	005b      	lsls	r3, r3, #1
 8013648:	f241 111c 	movw	r1, #4380	; 0x111c
 801364c:	428b      	cmp	r3, r1
 801364e:	bf38      	it	cc
 8013650:	460b      	movcc	r3, r1
 8013652:	429a      	cmp	r2, r3
 8013654:	d204      	bcs.n	8013660 <tcp_process+0x460>
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801365a:	009b      	lsls	r3, r3, #2
 801365c:	b29b      	uxth	r3, r3
 801365e:	e00d      	b.n	801367c <tcp_process+0x47c>
 8013660:	687b      	ldr	r3, [r7, #4]
 8013662:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	f241 121c 	movw	r2, #4380	; 0x111c
 801366a:	4293      	cmp	r3, r2
 801366c:	d904      	bls.n	8013678 <tcp_process+0x478>
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013672:	005b      	lsls	r3, r3, #1
 8013674:	b29b      	uxth	r3, r3
 8013676:	e001      	b.n	801367c <tcp_process+0x47c>
 8013678:	f241 131c 	movw	r3, #4380	; 0x111c
 801367c:	687a      	ldr	r2, [r7, #4]
 801367e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013682:	4b53      	ldr	r3, [pc, #332]	; (80137d0 <tcp_process+0x5d0>)
 8013684:	781b      	ldrb	r3, [r3, #0]
 8013686:	f003 0320 	and.w	r3, r3, #32
 801368a:	2b00      	cmp	r3, #0
 801368c:	d037      	beq.n	80136fe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	8b5b      	ldrh	r3, [r3, #26]
 8013692:	f043 0302 	orr.w	r3, r3, #2
 8013696:	b29a      	uxth	r2, r3
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	2207      	movs	r2, #7
 80136a0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80136a2:	e02c      	b.n	80136fe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80136a4:	4b40      	ldr	r3, [pc, #256]	; (80137a8 <tcp_process+0x5a8>)
 80136a6:	6819      	ldr	r1, [r3, #0]
 80136a8:	4b40      	ldr	r3, [pc, #256]	; (80137ac <tcp_process+0x5ac>)
 80136aa:	881b      	ldrh	r3, [r3, #0]
 80136ac:	461a      	mov	r2, r3
 80136ae:	4b40      	ldr	r3, [pc, #256]	; (80137b0 <tcp_process+0x5b0>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80136b4:	4b3f      	ldr	r3, [pc, #252]	; (80137b4 <tcp_process+0x5b4>)
 80136b6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80136b8:	885b      	ldrh	r3, [r3, #2]
 80136ba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80136bc:	4a3d      	ldr	r2, [pc, #244]	; (80137b4 <tcp_process+0x5b4>)
 80136be:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80136c0:	8812      	ldrh	r2, [r2, #0]
 80136c2:	b292      	uxth	r2, r2
 80136c4:	9202      	str	r2, [sp, #8]
 80136c6:	9301      	str	r3, [sp, #4]
 80136c8:	4b3b      	ldr	r3, [pc, #236]	; (80137b8 <tcp_process+0x5b8>)
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	4b3b      	ldr	r3, [pc, #236]	; (80137bc <tcp_process+0x5bc>)
 80136ce:	4602      	mov	r2, r0
 80136d0:	6878      	ldr	r0, [r7, #4]
 80136d2:	f003 f827 	bl	8016724 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80136d6:	e167      	b.n	80139a8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80136d8:	4b32      	ldr	r3, [pc, #200]	; (80137a4 <tcp_process+0x5a4>)
 80136da:	781b      	ldrb	r3, [r3, #0]
 80136dc:	f003 0302 	and.w	r3, r3, #2
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	f000 8161 	beq.w	80139a8 <tcp_process+0x7a8>
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ea:	1e5a      	subs	r2, r3, #1
 80136ec:	4b30      	ldr	r3, [pc, #192]	; (80137b0 <tcp_process+0x5b0>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	429a      	cmp	r2, r3
 80136f2:	f040 8159 	bne.w	80139a8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f002 fe0c 	bl	8016314 <tcp_rexmit>
      break;
 80136fc:	e154      	b.n	80139a8 <tcp_process+0x7a8>
 80136fe:	e153      	b.n	80139a8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013700:	6878      	ldr	r0, [r7, #4]
 8013702:	f000 fa71 	bl	8013be8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013706:	4b32      	ldr	r3, [pc, #200]	; (80137d0 <tcp_process+0x5d0>)
 8013708:	781b      	ldrb	r3, [r3, #0]
 801370a:	f003 0320 	and.w	r3, r3, #32
 801370e:	2b00      	cmp	r3, #0
 8013710:	f000 814c 	beq.w	80139ac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	8b5b      	ldrh	r3, [r3, #26]
 8013718:	f043 0302 	orr.w	r3, r3, #2
 801371c:	b29a      	uxth	r2, r3
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	2207      	movs	r2, #7
 8013726:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013728:	e140      	b.n	80139ac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801372a:	6878      	ldr	r0, [r7, #4]
 801372c:	f000 fa5c 	bl	8013be8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013730:	4b27      	ldr	r3, [pc, #156]	; (80137d0 <tcp_process+0x5d0>)
 8013732:	781b      	ldrb	r3, [r3, #0]
 8013734:	f003 0320 	and.w	r3, r3, #32
 8013738:	2b00      	cmp	r3, #0
 801373a:	d071      	beq.n	8013820 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801373c:	4b19      	ldr	r3, [pc, #100]	; (80137a4 <tcp_process+0x5a4>)
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	f003 0310 	and.w	r3, r3, #16
 8013744:	2b00      	cmp	r3, #0
 8013746:	d060      	beq.n	801380a <tcp_process+0x60a>
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801374c:	4b16      	ldr	r3, [pc, #88]	; (80137a8 <tcp_process+0x5a8>)
 801374e:	681b      	ldr	r3, [r3, #0]
 8013750:	429a      	cmp	r2, r3
 8013752:	d15a      	bne.n	801380a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013758:	2b00      	cmp	r3, #0
 801375a:	d156      	bne.n	801380a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	8b5b      	ldrh	r3, [r3, #26]
 8013760:	f043 0302 	orr.w	r3, r3, #2
 8013764:	b29a      	uxth	r2, r3
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801376a:	6878      	ldr	r0, [r7, #4]
 801376c:	f7fe fdbe 	bl	80122ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013770:	4b18      	ldr	r3, [pc, #96]	; (80137d4 <tcp_process+0x5d4>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	687a      	ldr	r2, [r7, #4]
 8013776:	429a      	cmp	r2, r3
 8013778:	d105      	bne.n	8013786 <tcp_process+0x586>
 801377a:	4b16      	ldr	r3, [pc, #88]	; (80137d4 <tcp_process+0x5d4>)
 801377c:	681b      	ldr	r3, [r3, #0]
 801377e:	68db      	ldr	r3, [r3, #12]
 8013780:	4a14      	ldr	r2, [pc, #80]	; (80137d4 <tcp_process+0x5d4>)
 8013782:	6013      	str	r3, [r2, #0]
 8013784:	e02e      	b.n	80137e4 <tcp_process+0x5e4>
 8013786:	4b13      	ldr	r3, [pc, #76]	; (80137d4 <tcp_process+0x5d4>)
 8013788:	681b      	ldr	r3, [r3, #0]
 801378a:	617b      	str	r3, [r7, #20]
 801378c:	e027      	b.n	80137de <tcp_process+0x5de>
 801378e:	697b      	ldr	r3, [r7, #20]
 8013790:	68db      	ldr	r3, [r3, #12]
 8013792:	687a      	ldr	r2, [r7, #4]
 8013794:	429a      	cmp	r2, r3
 8013796:	d11f      	bne.n	80137d8 <tcp_process+0x5d8>
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	68da      	ldr	r2, [r3, #12]
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	60da      	str	r2, [r3, #12]
 80137a0:	e020      	b.n	80137e4 <tcp_process+0x5e4>
 80137a2:	bf00      	nop
 80137a4:	24004164 	.word	0x24004164
 80137a8:	2400415c 	.word	0x2400415c
 80137ac:	24004162 	.word	0x24004162
 80137b0:	24004158 	.word	0x24004158
 80137b4:	24004148 	.word	0x24004148
 80137b8:	240047ec 	.word	0x240047ec
 80137bc:	240047f0 	.word	0x240047f0
 80137c0:	0801c12c 	.word	0x0801c12c
 80137c4:	0801c3cc 	.word	0x0801c3cc
 80137c8:	0801c178 	.word	0x0801c178
 80137cc:	24004160 	.word	0x24004160
 80137d0:	24004165 	.word	0x24004165
 80137d4:	2400789c 	.word	0x2400789c
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	68db      	ldr	r3, [r3, #12]
 80137dc:	617b      	str	r3, [r7, #20]
 80137de:	697b      	ldr	r3, [r7, #20]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d1d4      	bne.n	801378e <tcp_process+0x58e>
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2200      	movs	r2, #0
 80137e8:	60da      	str	r2, [r3, #12]
 80137ea:	4b77      	ldr	r3, [pc, #476]	; (80139c8 <tcp_process+0x7c8>)
 80137ec:	2201      	movs	r2, #1
 80137ee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	220a      	movs	r2, #10
 80137f4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80137f6:	4b75      	ldr	r3, [pc, #468]	; (80139cc <tcp_process+0x7cc>)
 80137f8:	681a      	ldr	r2, [r3, #0]
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	60da      	str	r2, [r3, #12]
 80137fe:	4a73      	ldr	r2, [pc, #460]	; (80139cc <tcp_process+0x7cc>)
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6013      	str	r3, [r2, #0]
 8013804:	f003 f950 	bl	8016aa8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013808:	e0d2      	b.n	80139b0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	8b5b      	ldrh	r3, [r3, #26]
 801380e:	f043 0302 	orr.w	r3, r3, #2
 8013812:	b29a      	uxth	r2, r3
 8013814:	687b      	ldr	r3, [r7, #4]
 8013816:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	2208      	movs	r2, #8
 801381c:	751a      	strb	r2, [r3, #20]
      break;
 801381e:	e0c7      	b.n	80139b0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013820:	4b6b      	ldr	r3, [pc, #428]	; (80139d0 <tcp_process+0x7d0>)
 8013822:	781b      	ldrb	r3, [r3, #0]
 8013824:	f003 0310 	and.w	r3, r3, #16
 8013828:	2b00      	cmp	r3, #0
 801382a:	f000 80c1 	beq.w	80139b0 <tcp_process+0x7b0>
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013832:	4b68      	ldr	r3, [pc, #416]	; (80139d4 <tcp_process+0x7d4>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	429a      	cmp	r2, r3
 8013838:	f040 80ba 	bne.w	80139b0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013840:	2b00      	cmp	r3, #0
 8013842:	f040 80b5 	bne.w	80139b0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	2206      	movs	r2, #6
 801384a:	751a      	strb	r2, [r3, #20]
      break;
 801384c:	e0b0      	b.n	80139b0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f000 f9ca 	bl	8013be8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013854:	4b60      	ldr	r3, [pc, #384]	; (80139d8 <tcp_process+0x7d8>)
 8013856:	781b      	ldrb	r3, [r3, #0]
 8013858:	f003 0320 	and.w	r3, r3, #32
 801385c:	2b00      	cmp	r3, #0
 801385e:	f000 80a9 	beq.w	80139b4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	8b5b      	ldrh	r3, [r3, #26]
 8013866:	f043 0302 	orr.w	r3, r3, #2
 801386a:	b29a      	uxth	r2, r3
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013870:	6878      	ldr	r0, [r7, #4]
 8013872:	f7fe fd3b 	bl	80122ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013876:	4b59      	ldr	r3, [pc, #356]	; (80139dc <tcp_process+0x7dc>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	429a      	cmp	r2, r3
 801387e:	d105      	bne.n	801388c <tcp_process+0x68c>
 8013880:	4b56      	ldr	r3, [pc, #344]	; (80139dc <tcp_process+0x7dc>)
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	68db      	ldr	r3, [r3, #12]
 8013886:	4a55      	ldr	r2, [pc, #340]	; (80139dc <tcp_process+0x7dc>)
 8013888:	6013      	str	r3, [r2, #0]
 801388a:	e013      	b.n	80138b4 <tcp_process+0x6b4>
 801388c:	4b53      	ldr	r3, [pc, #332]	; (80139dc <tcp_process+0x7dc>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	613b      	str	r3, [r7, #16]
 8013892:	e00c      	b.n	80138ae <tcp_process+0x6ae>
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	68db      	ldr	r3, [r3, #12]
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	429a      	cmp	r2, r3
 801389c:	d104      	bne.n	80138a8 <tcp_process+0x6a8>
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	68da      	ldr	r2, [r3, #12]
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	60da      	str	r2, [r3, #12]
 80138a6:	e005      	b.n	80138b4 <tcp_process+0x6b4>
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	68db      	ldr	r3, [r3, #12]
 80138ac:	613b      	str	r3, [r7, #16]
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d1ef      	bne.n	8013894 <tcp_process+0x694>
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	2200      	movs	r2, #0
 80138b8:	60da      	str	r2, [r3, #12]
 80138ba:	4b43      	ldr	r3, [pc, #268]	; (80139c8 <tcp_process+0x7c8>)
 80138bc:	2201      	movs	r2, #1
 80138be:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	220a      	movs	r2, #10
 80138c4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80138c6:	4b41      	ldr	r3, [pc, #260]	; (80139cc <tcp_process+0x7cc>)
 80138c8:	681a      	ldr	r2, [r3, #0]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	60da      	str	r2, [r3, #12]
 80138ce:	4a3f      	ldr	r2, [pc, #252]	; (80139cc <tcp_process+0x7cc>)
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6013      	str	r3, [r2, #0]
 80138d4:	f003 f8e8 	bl	8016aa8 <tcp_timer_needed>
      }
      break;
 80138d8:	e06c      	b.n	80139b4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80138da:	6878      	ldr	r0, [r7, #4]
 80138dc:	f000 f984 	bl	8013be8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80138e0:	4b3b      	ldr	r3, [pc, #236]	; (80139d0 <tcp_process+0x7d0>)
 80138e2:	781b      	ldrb	r3, [r3, #0]
 80138e4:	f003 0310 	and.w	r3, r3, #16
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d065      	beq.n	80139b8 <tcp_process+0x7b8>
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138f0:	4b38      	ldr	r3, [pc, #224]	; (80139d4 <tcp_process+0x7d4>)
 80138f2:	681b      	ldr	r3, [r3, #0]
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d15f      	bne.n	80139b8 <tcp_process+0x7b8>
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d15b      	bne.n	80139b8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f7fe fcf3 	bl	80122ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013906:	4b35      	ldr	r3, [pc, #212]	; (80139dc <tcp_process+0x7dc>)
 8013908:	681b      	ldr	r3, [r3, #0]
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	429a      	cmp	r2, r3
 801390e:	d105      	bne.n	801391c <tcp_process+0x71c>
 8013910:	4b32      	ldr	r3, [pc, #200]	; (80139dc <tcp_process+0x7dc>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	68db      	ldr	r3, [r3, #12]
 8013916:	4a31      	ldr	r2, [pc, #196]	; (80139dc <tcp_process+0x7dc>)
 8013918:	6013      	str	r3, [r2, #0]
 801391a:	e013      	b.n	8013944 <tcp_process+0x744>
 801391c:	4b2f      	ldr	r3, [pc, #188]	; (80139dc <tcp_process+0x7dc>)
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	60fb      	str	r3, [r7, #12]
 8013922:	e00c      	b.n	801393e <tcp_process+0x73e>
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	68db      	ldr	r3, [r3, #12]
 8013928:	687a      	ldr	r2, [r7, #4]
 801392a:	429a      	cmp	r2, r3
 801392c:	d104      	bne.n	8013938 <tcp_process+0x738>
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	68da      	ldr	r2, [r3, #12]
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	60da      	str	r2, [r3, #12]
 8013936:	e005      	b.n	8013944 <tcp_process+0x744>
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	68db      	ldr	r3, [r3, #12]
 801393c:	60fb      	str	r3, [r7, #12]
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d1ef      	bne.n	8013924 <tcp_process+0x724>
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2200      	movs	r2, #0
 8013948:	60da      	str	r2, [r3, #12]
 801394a:	4b1f      	ldr	r3, [pc, #124]	; (80139c8 <tcp_process+0x7c8>)
 801394c:	2201      	movs	r2, #1
 801394e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	220a      	movs	r2, #10
 8013954:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013956:	4b1d      	ldr	r3, [pc, #116]	; (80139cc <tcp_process+0x7cc>)
 8013958:	681a      	ldr	r2, [r3, #0]
 801395a:	687b      	ldr	r3, [r7, #4]
 801395c:	60da      	str	r2, [r3, #12]
 801395e:	4a1b      	ldr	r2, [pc, #108]	; (80139cc <tcp_process+0x7cc>)
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	6013      	str	r3, [r2, #0]
 8013964:	f003 f8a0 	bl	8016aa8 <tcp_timer_needed>
      }
      break;
 8013968:	e026      	b.n	80139b8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f000 f93c 	bl	8013be8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013970:	4b17      	ldr	r3, [pc, #92]	; (80139d0 <tcp_process+0x7d0>)
 8013972:	781b      	ldrb	r3, [r3, #0]
 8013974:	f003 0310 	and.w	r3, r3, #16
 8013978:	2b00      	cmp	r3, #0
 801397a:	d01f      	beq.n	80139bc <tcp_process+0x7bc>
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013980:	4b14      	ldr	r3, [pc, #80]	; (80139d4 <tcp_process+0x7d4>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	429a      	cmp	r2, r3
 8013986:	d119      	bne.n	80139bc <tcp_process+0x7bc>
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801398c:	2b00      	cmp	r3, #0
 801398e:	d115      	bne.n	80139bc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013990:	4b11      	ldr	r3, [pc, #68]	; (80139d8 <tcp_process+0x7d8>)
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	f043 0310 	orr.w	r3, r3, #16
 8013998:	b2da      	uxtb	r2, r3
 801399a:	4b0f      	ldr	r3, [pc, #60]	; (80139d8 <tcp_process+0x7d8>)
 801399c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801399e:	e00d      	b.n	80139bc <tcp_process+0x7bc>
    default:
      break;
 80139a0:	bf00      	nop
 80139a2:	e00c      	b.n	80139be <tcp_process+0x7be>
      break;
 80139a4:	bf00      	nop
 80139a6:	e00a      	b.n	80139be <tcp_process+0x7be>
      break;
 80139a8:	bf00      	nop
 80139aa:	e008      	b.n	80139be <tcp_process+0x7be>
      break;
 80139ac:	bf00      	nop
 80139ae:	e006      	b.n	80139be <tcp_process+0x7be>
      break;
 80139b0:	bf00      	nop
 80139b2:	e004      	b.n	80139be <tcp_process+0x7be>
      break;
 80139b4:	bf00      	nop
 80139b6:	e002      	b.n	80139be <tcp_process+0x7be>
      break;
 80139b8:	bf00      	nop
 80139ba:	e000      	b.n	80139be <tcp_process+0x7be>
      break;
 80139bc:	bf00      	nop
  }
  return ERR_OK;
 80139be:	2300      	movs	r3, #0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	3724      	adds	r7, #36	; 0x24
 80139c4:	46bd      	mov	sp, r7
 80139c6:	bd90      	pop	{r4, r7, pc}
 80139c8:	24007898 	.word	0x24007898
 80139cc:	240078ac 	.word	0x240078ac
 80139d0:	24004164 	.word	0x24004164
 80139d4:	2400415c 	.word	0x2400415c
 80139d8:	24004165 	.word	0x24004165
 80139dc:	2400789c 	.word	0x2400789c

080139e0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80139e0:	b590      	push	{r4, r7, lr}
 80139e2:	b085      	sub	sp, #20
 80139e4:	af00      	add	r7, sp, #0
 80139e6:	6078      	str	r0, [r7, #4]
 80139e8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d106      	bne.n	80139fe <tcp_oos_insert_segment+0x1e>
 80139f0:	4b3b      	ldr	r3, [pc, #236]	; (8013ae0 <tcp_oos_insert_segment+0x100>)
 80139f2:	f240 421f 	movw	r2, #1055	; 0x41f
 80139f6:	493b      	ldr	r1, [pc, #236]	; (8013ae4 <tcp_oos_insert_segment+0x104>)
 80139f8:	483b      	ldr	r0, [pc, #236]	; (8013ae8 <tcp_oos_insert_segment+0x108>)
 80139fa:	f006 f9b3 	bl	8019d64 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	899b      	ldrh	r3, [r3, #12]
 8013a04:	b29b      	uxth	r3, r3
 8013a06:	4618      	mov	r0, r3
 8013a08:	f7fb f8aa 	bl	800eb60 <lwip_htons>
 8013a0c:	4603      	mov	r3, r0
 8013a0e:	b2db      	uxtb	r3, r3
 8013a10:	f003 0301 	and.w	r3, r3, #1
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d028      	beq.n	8013a6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013a18:	6838      	ldr	r0, [r7, #0]
 8013a1a:	f7fe f97f 	bl	8011d1c <tcp_segs_free>
    next = NULL;
 8013a1e:	2300      	movs	r3, #0
 8013a20:	603b      	str	r3, [r7, #0]
 8013a22:	e056      	b.n	8013ad2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	68db      	ldr	r3, [r3, #12]
 8013a28:	899b      	ldrh	r3, [r3, #12]
 8013a2a:	b29b      	uxth	r3, r3
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fb f897 	bl	800eb60 <lwip_htons>
 8013a32:	4603      	mov	r3, r0
 8013a34:	b2db      	uxtb	r3, r3
 8013a36:	f003 0301 	and.w	r3, r3, #1
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d00d      	beq.n	8013a5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	68db      	ldr	r3, [r3, #12]
 8013a42:	899b      	ldrh	r3, [r3, #12]
 8013a44:	b29c      	uxth	r4, r3
 8013a46:	2001      	movs	r0, #1
 8013a48:	f7fb f88a 	bl	800eb60 <lwip_htons>
 8013a4c:	4603      	mov	r3, r0
 8013a4e:	461a      	mov	r2, r3
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	68db      	ldr	r3, [r3, #12]
 8013a54:	4322      	orrs	r2, r4
 8013a56:	b292      	uxth	r2, r2
 8013a58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013a5a:	683b      	ldr	r3, [r7, #0]
 8013a5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	f7fe f96e 	bl	8011d46 <tcp_seg_free>
    while (next &&
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	d00e      	beq.n	8013a8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	891b      	ldrh	r3, [r3, #8]
 8013a74:	461a      	mov	r2, r3
 8013a76:	4b1d      	ldr	r3, [pc, #116]	; (8013aec <tcp_oos_insert_segment+0x10c>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	441a      	add	r2, r3
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	68db      	ldr	r3, [r3, #12]
 8013a80:	685b      	ldr	r3, [r3, #4]
 8013a82:	6839      	ldr	r1, [r7, #0]
 8013a84:	8909      	ldrh	r1, [r1, #8]
 8013a86:	440b      	add	r3, r1
 8013a88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	daca      	bge.n	8013a24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013a8e:	683b      	ldr	r3, [r7, #0]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d01e      	beq.n	8013ad2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	891b      	ldrh	r3, [r3, #8]
 8013a98:	461a      	mov	r2, r3
 8013a9a:	4b14      	ldr	r3, [pc, #80]	; (8013aec <tcp_oos_insert_segment+0x10c>)
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	441a      	add	r2, r3
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	68db      	ldr	r3, [r3, #12]
 8013aa4:	685b      	ldr	r3, [r3, #4]
 8013aa6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	dd12      	ble.n	8013ad2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013aac:	683b      	ldr	r3, [r7, #0]
 8013aae:	68db      	ldr	r3, [r3, #12]
 8013ab0:	685b      	ldr	r3, [r3, #4]
 8013ab2:	b29a      	uxth	r2, r3
 8013ab4:	4b0d      	ldr	r3, [pc, #52]	; (8013aec <tcp_oos_insert_segment+0x10c>)
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	1ad3      	subs	r3, r2, r3
 8013abc:	b29a      	uxth	r2, r3
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	685a      	ldr	r2, [r3, #4]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	891b      	ldrh	r3, [r3, #8]
 8013aca:	4619      	mov	r1, r3
 8013acc:	4610      	mov	r0, r2
 8013ace:	f7fc fb6b 	bl	80101a8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	683a      	ldr	r2, [r7, #0]
 8013ad6:	601a      	str	r2, [r3, #0]
}
 8013ad8:	bf00      	nop
 8013ada:	3714      	adds	r7, #20
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd90      	pop	{r4, r7, pc}
 8013ae0:	0801c12c 	.word	0x0801c12c
 8013ae4:	0801c3ec 	.word	0x0801c3ec
 8013ae8:	0801c178 	.word	0x0801c178
 8013aec:	24004158 	.word	0x24004158

08013af0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013af0:	b5b0      	push	{r4, r5, r7, lr}
 8013af2:	b086      	sub	sp, #24
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	60f8      	str	r0, [r7, #12]
 8013af8:	60b9      	str	r1, [r7, #8]
 8013afa:	607a      	str	r2, [r7, #4]
 8013afc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013afe:	e03e      	b.n	8013b7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013b0a:	697b      	ldr	r3, [r7, #20]
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	4618      	mov	r0, r3
 8013b10:	f7fc fd5e 	bl	80105d0 <pbuf_clen>
 8013b14:	4603      	mov	r3, r0
 8013b16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b1e:	8a7a      	ldrh	r2, [r7, #18]
 8013b20:	429a      	cmp	r2, r3
 8013b22:	d906      	bls.n	8013b32 <tcp_free_acked_segments+0x42>
 8013b24:	4b2a      	ldr	r3, [pc, #168]	; (8013bd0 <tcp_free_acked_segments+0xe0>)
 8013b26:	f240 4257 	movw	r2, #1111	; 0x457
 8013b2a:	492a      	ldr	r1, [pc, #168]	; (8013bd4 <tcp_free_acked_segments+0xe4>)
 8013b2c:	482a      	ldr	r0, [pc, #168]	; (8013bd8 <tcp_free_acked_segments+0xe8>)
 8013b2e:	f006 f919 	bl	8019d64 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013b38:	8a7b      	ldrh	r3, [r7, #18]
 8013b3a:	1ad3      	subs	r3, r2, r3
 8013b3c:	b29a      	uxth	r2, r3
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013b44:	697b      	ldr	r3, [r7, #20]
 8013b46:	891a      	ldrh	r2, [r3, #8]
 8013b48:	4b24      	ldr	r3, [pc, #144]	; (8013bdc <tcp_free_acked_segments+0xec>)
 8013b4a:	881b      	ldrh	r3, [r3, #0]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	b29a      	uxth	r2, r3
 8013b50:	4b22      	ldr	r3, [pc, #136]	; (8013bdc <tcp_free_acked_segments+0xec>)
 8013b52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013b54:	6978      	ldr	r0, [r7, #20]
 8013b56:	f7fe f8f6 	bl	8011d46 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d00c      	beq.n	8013b7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013b64:	68bb      	ldr	r3, [r7, #8]
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d109      	bne.n	8013b7e <tcp_free_acked_segments+0x8e>
 8013b6a:	683b      	ldr	r3, [r7, #0]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d106      	bne.n	8013b7e <tcp_free_acked_segments+0x8e>
 8013b70:	4b17      	ldr	r3, [pc, #92]	; (8013bd0 <tcp_free_acked_segments+0xe0>)
 8013b72:	f240 4261 	movw	r2, #1121	; 0x461
 8013b76:	491a      	ldr	r1, [pc, #104]	; (8013be0 <tcp_free_acked_segments+0xf0>)
 8013b78:	4817      	ldr	r0, [pc, #92]	; (8013bd8 <tcp_free_acked_segments+0xe8>)
 8013b7a:	f006 f8f3 	bl	8019d64 <iprintf>
  while (seg_list != NULL &&
 8013b7e:	68bb      	ldr	r3, [r7, #8]
 8013b80:	2b00      	cmp	r3, #0
 8013b82:	d020      	beq.n	8013bc6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	68db      	ldr	r3, [r3, #12]
 8013b88:	685b      	ldr	r3, [r3, #4]
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fa fffd 	bl	800eb8a <lwip_htonl>
 8013b90:	4604      	mov	r4, r0
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	891b      	ldrh	r3, [r3, #8]
 8013b96:	461d      	mov	r5, r3
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	899b      	ldrh	r3, [r3, #12]
 8013b9e:	b29b      	uxth	r3, r3
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7fa ffdd 	bl	800eb60 <lwip_htons>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	b2db      	uxtb	r3, r3
 8013baa:	f003 0303 	and.w	r3, r3, #3
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d001      	beq.n	8013bb6 <tcp_free_acked_segments+0xc6>
 8013bb2:	2301      	movs	r3, #1
 8013bb4:	e000      	b.n	8013bb8 <tcp_free_acked_segments+0xc8>
 8013bb6:	2300      	movs	r3, #0
 8013bb8:	442b      	add	r3, r5
 8013bba:	18e2      	adds	r2, r4, r3
 8013bbc:	4b09      	ldr	r3, [pc, #36]	; (8013be4 <tcp_free_acked_segments+0xf4>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	dd9c      	ble.n	8013b00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013bc6:	68bb      	ldr	r3, [r7, #8]
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3718      	adds	r7, #24
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bdb0      	pop	{r4, r5, r7, pc}
 8013bd0:	0801c12c 	.word	0x0801c12c
 8013bd4:	0801c414 	.word	0x0801c414
 8013bd8:	0801c178 	.word	0x0801c178
 8013bdc:	24004160 	.word	0x24004160
 8013be0:	0801c43c 	.word	0x0801c43c
 8013be4:	2400415c 	.word	0x2400415c

08013be8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013be8:	b5b0      	push	{r4, r5, r7, lr}
 8013bea:	b094      	sub	sp, #80	; 0x50
 8013bec:	af00      	add	r7, sp, #0
 8013bee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d106      	bne.n	8013c08 <tcp_receive+0x20>
 8013bfa:	4ba6      	ldr	r3, [pc, #664]	; (8013e94 <tcp_receive+0x2ac>)
 8013bfc:	f240 427b 	movw	r2, #1147	; 0x47b
 8013c00:	49a5      	ldr	r1, [pc, #660]	; (8013e98 <tcp_receive+0x2b0>)
 8013c02:	48a6      	ldr	r0, [pc, #664]	; (8013e9c <tcp_receive+0x2b4>)
 8013c04:	f006 f8ae 	bl	8019d64 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	7d1b      	ldrb	r3, [r3, #20]
 8013c0c:	2b03      	cmp	r3, #3
 8013c0e:	d806      	bhi.n	8013c1e <tcp_receive+0x36>
 8013c10:	4ba0      	ldr	r3, [pc, #640]	; (8013e94 <tcp_receive+0x2ac>)
 8013c12:	f240 427c 	movw	r2, #1148	; 0x47c
 8013c16:	49a2      	ldr	r1, [pc, #648]	; (8013ea0 <tcp_receive+0x2b8>)
 8013c18:	48a0      	ldr	r0, [pc, #640]	; (8013e9c <tcp_receive+0x2b4>)
 8013c1a:	f006 f8a3 	bl	8019d64 <iprintf>

  if (flags & TCP_ACK) {
 8013c1e:	4ba1      	ldr	r3, [pc, #644]	; (8013ea4 <tcp_receive+0x2bc>)
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	f003 0310 	and.w	r3, r3, #16
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	f000 8263 	beq.w	80140f2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c32:	461a      	mov	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013c38:	4413      	add	r3, r2
 8013c3a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013c40:	4b99      	ldr	r3, [pc, #612]	; (8013ea8 <tcp_receive+0x2c0>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	1ad3      	subs	r3, r2, r3
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	db1b      	blt.n	8013c82 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013c4e:	4b96      	ldr	r3, [pc, #600]	; (8013ea8 <tcp_receive+0x2c0>)
 8013c50:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013c52:	429a      	cmp	r2, r3
 8013c54:	d106      	bne.n	8013c64 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013c5a:	4b94      	ldr	r3, [pc, #592]	; (8013eac <tcp_receive+0x2c4>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	1ad3      	subs	r3, r2, r3
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	db0e      	blt.n	8013c82 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013c68:	4b90      	ldr	r3, [pc, #576]	; (8013eac <tcp_receive+0x2c4>)
 8013c6a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013c6c:	429a      	cmp	r2, r3
 8013c6e:	d125      	bne.n	8013cbc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013c70:	4b8f      	ldr	r3, [pc, #572]	; (8013eb0 <tcp_receive+0x2c8>)
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	89db      	ldrh	r3, [r3, #14]
 8013c76:	b29a      	uxth	r2, r3
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c7e:	429a      	cmp	r2, r3
 8013c80:	d91c      	bls.n	8013cbc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013c82:	4b8b      	ldr	r3, [pc, #556]	; (8013eb0 <tcp_receive+0x2c8>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	89db      	ldrh	r3, [r3, #14]
 8013c88:	b29a      	uxth	r2, r3
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d205      	bcs.n	8013cac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013cac:	4b7e      	ldr	r3, [pc, #504]	; (8013ea8 <tcp_receive+0x2c0>)
 8013cae:	681a      	ldr	r2, [r3, #0]
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013cb4:	4b7d      	ldr	r3, [pc, #500]	; (8013eac <tcp_receive+0x2c4>)
 8013cb6:	681a      	ldr	r2, [r3, #0]
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013cbc:	4b7b      	ldr	r3, [pc, #492]	; (8013eac <tcp_receive+0x2c4>)
 8013cbe:	681a      	ldr	r2, [r3, #0]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cc4:	1ad3      	subs	r3, r2, r3
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	dc58      	bgt.n	8013d7c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013cca:	4b7a      	ldr	r3, [pc, #488]	; (8013eb4 <tcp_receive+0x2cc>)
 8013ccc:	881b      	ldrh	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d14b      	bne.n	8013d6a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013cd6:	687a      	ldr	r2, [r7, #4]
 8013cd8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013cdc:	4413      	add	r3, r2
 8013cde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ce0:	429a      	cmp	r2, r3
 8013ce2:	d142      	bne.n	8013d6a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	db3d      	blt.n	8013d6a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013cf2:	4b6e      	ldr	r3, [pc, #440]	; (8013eac <tcp_receive+0x2c4>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	429a      	cmp	r2, r3
 8013cf8:	d137      	bne.n	8013d6a <tcp_receive+0x182>
              found_dupack = 1;
 8013cfa:	2301      	movs	r3, #1
 8013cfc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d04:	2bff      	cmp	r3, #255	; 0xff
 8013d06:	d007      	beq.n	8013d18 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d0e:	3301      	adds	r3, #1
 8013d10:	b2da      	uxtb	r2, r3
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d1e:	2b03      	cmp	r3, #3
 8013d20:	d91b      	bls.n	8013d5a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d2c:	4413      	add	r3, r2
 8013d2e:	b29a      	uxth	r2, r3
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013d36:	429a      	cmp	r2, r3
 8013d38:	d30a      	bcc.n	8013d50 <tcp_receive+0x168>
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d44:	4413      	add	r3, r2
 8013d46:	b29a      	uxth	r2, r3
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013d4e:	e004      	b.n	8013d5a <tcp_receive+0x172>
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013d60:	2b02      	cmp	r3, #2
 8013d62:	d902      	bls.n	8013d6a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013d64:	6878      	ldr	r0, [r7, #4]
 8013d66:	f002 fb41 	bl	80163ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	f040 8160 	bne.w	8014032 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	2200      	movs	r2, #0
 8013d76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013d7a:	e15a      	b.n	8014032 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013d7c:	4b4b      	ldr	r3, [pc, #300]	; (8013eac <tcp_receive+0x2c4>)
 8013d7e:	681a      	ldr	r2, [r3, #0]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013d84:	1ad3      	subs	r3, r2, r3
 8013d86:	3b01      	subs	r3, #1
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	f2c0 814d 	blt.w	8014028 <tcp_receive+0x440>
 8013d8e:	4b47      	ldr	r3, [pc, #284]	; (8013eac <tcp_receive+0x2c4>)
 8013d90:	681a      	ldr	r2, [r3, #0]
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d96:	1ad3      	subs	r3, r2, r3
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	f300 8145 	bgt.w	8014028 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	8b5b      	ldrh	r3, [r3, #26]
 8013da2:	f003 0304 	and.w	r3, r3, #4
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d010      	beq.n	8013dcc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	8b5b      	ldrh	r3, [r3, #26]
 8013dae:	f023 0304 	bic.w	r3, r3, #4
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013dda:	10db      	asrs	r3, r3, #3
 8013ddc:	b21b      	sxth	r3, r3
 8013dde:	b29a      	uxth	r2, r3
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013de6:	b29b      	uxth	r3, r3
 8013de8:	4413      	add	r3, r2
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	b21a      	sxth	r2, r3
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013df4:	4b2d      	ldr	r3, [pc, #180]	; (8013eac <tcp_receive+0x2c4>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	b29a      	uxth	r2, r3
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	1ad3      	subs	r3, r2, r3
 8013e02:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2200      	movs	r2, #0
 8013e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013e0c:	4b27      	ldr	r3, [pc, #156]	; (8013eac <tcp_receive+0x2c4>)
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	7d1b      	ldrb	r3, [r3, #20]
 8013e18:	2b03      	cmp	r3, #3
 8013e1a:	f240 8096 	bls.w	8013f4a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8013e2a:	429a      	cmp	r2, r3
 8013e2c:	d244      	bcs.n	8013eb8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	8b5b      	ldrh	r3, [r3, #26]
 8013e32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d001      	beq.n	8013e3e <tcp_receive+0x256>
 8013e3a:	2301      	movs	r3, #1
 8013e3c:	e000      	b.n	8013e40 <tcp_receive+0x258>
 8013e3e:	2302      	movs	r3, #2
 8013e40:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8013e44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8013e48:	b29a      	uxth	r2, r3
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013e4e:	fb12 f303 	smulbb	r3, r2, r3
 8013e52:	b29b      	uxth	r3, r3
 8013e54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013e56:	4293      	cmp	r3, r2
 8013e58:	bf28      	it	cs
 8013e5a:	4613      	movcs	r3, r2
 8013e5c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e64:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e66:	4413      	add	r3, r2
 8013e68:	b29a      	uxth	r2, r3
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d309      	bcc.n	8013e88 <tcp_receive+0x2a0>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013e7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013e7c:	4413      	add	r3, r2
 8013e7e:	b29a      	uxth	r2, r3
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013e86:	e060      	b.n	8013f4a <tcp_receive+0x362>
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e8e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013e92:	e05a      	b.n	8013f4a <tcp_receive+0x362>
 8013e94:	0801c12c 	.word	0x0801c12c
 8013e98:	0801c45c 	.word	0x0801c45c
 8013e9c:	0801c178 	.word	0x0801c178
 8013ea0:	0801c478 	.word	0x0801c478
 8013ea4:	24004164 	.word	0x24004164
 8013ea8:	24004158 	.word	0x24004158
 8013eac:	2400415c 	.word	0x2400415c
 8013eb0:	24004148 	.word	0x24004148
 8013eb4:	24004162 	.word	0x24004162
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ebe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ec0:	4413      	add	r3, r2
 8013ec2:	b29a      	uxth	r2, r3
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013eca:	429a      	cmp	r2, r3
 8013ecc:	d309      	bcc.n	8013ee2 <tcp_receive+0x2fa>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ed6:	4413      	add	r3, r2
 8013ed8:	b29a      	uxth	r2, r3
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8013ee0:	e004      	b.n	8013eec <tcp_receive+0x304>
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013ee8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d326      	bcc.n	8013f4a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f08:	1ad3      	subs	r3, r2, r3
 8013f0a:	b29a      	uxth	r2, r3
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f1c:	4413      	add	r3, r2
 8013f1e:	b29a      	uxth	r2, r3
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f26:	429a      	cmp	r2, r3
 8013f28:	d30a      	bcc.n	8013f40 <tcp_receive+0x358>
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f34:	4413      	add	r3, r2
 8013f36:	b29a      	uxth	r2, r3
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013f3e:	e004      	b.n	8013f4a <tcp_receive+0x362>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f52:	4a98      	ldr	r2, [pc, #608]	; (80141b4 <tcp_receive+0x5cc>)
 8013f54:	6878      	ldr	r0, [r7, #4]
 8013f56:	f7ff fdcb 	bl	8013af0 <tcp_free_acked_segments>
 8013f5a:	4602      	mov	r2, r0
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f68:	4a93      	ldr	r2, [pc, #588]	; (80141b8 <tcp_receive+0x5d0>)
 8013f6a:	6878      	ldr	r0, [r7, #4]
 8013f6c:	f7ff fdc0 	bl	8013af0 <tcp_free_acked_segments>
 8013f70:	4602      	mov	r2, r0
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d104      	bne.n	8013f88 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f84:	861a      	strh	r2, [r3, #48]	; 0x30
 8013f86:	e002      	b.n	8013f8e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	2200      	movs	r2, #0
 8013f8c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	2200      	movs	r2, #0
 8013f92:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d103      	bne.n	8013fa4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013faa:	4b84      	ldr	r3, [pc, #528]	; (80141bc <tcp_receive+0x5d4>)
 8013fac:	881b      	ldrh	r3, [r3, #0]
 8013fae:	4413      	add	r3, r2
 8013fb0:	b29a      	uxth	r2, r3
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	8b5b      	ldrh	r3, [r3, #26]
 8013fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d035      	beq.n	8014030 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d118      	bne.n	8013ffe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d00c      	beq.n	8013fee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013fdc:	68db      	ldr	r3, [r3, #12]
 8013fde:	685b      	ldr	r3, [r3, #4]
 8013fe0:	4618      	mov	r0, r3
 8013fe2:	f7fa fdd2 	bl	800eb8a <lwip_htonl>
 8013fe6:	4603      	mov	r3, r0
 8013fe8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	dc20      	bgt.n	8014030 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	8b5b      	ldrh	r3, [r3, #26]
 8013ff2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013ff6:	b29a      	uxth	r2, r3
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013ffc:	e018      	b.n	8014030 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014002:	687b      	ldr	r3, [r7, #4]
 8014004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014006:	68db      	ldr	r3, [r3, #12]
 8014008:	685b      	ldr	r3, [r3, #4]
 801400a:	4618      	mov	r0, r3
 801400c:	f7fa fdbd 	bl	800eb8a <lwip_htonl>
 8014010:	4603      	mov	r3, r0
 8014012:	1ae3      	subs	r3, r4, r3
 8014014:	2b00      	cmp	r3, #0
 8014016:	dc0b      	bgt.n	8014030 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	8b5b      	ldrh	r3, [r3, #26]
 801401c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014020:	b29a      	uxth	r2, r3
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014026:	e003      	b.n	8014030 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014028:	6878      	ldr	r0, [r7, #4]
 801402a:	f002 fbcd 	bl	80167c8 <tcp_send_empty_ack>
 801402e:	e000      	b.n	8014032 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014030:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014036:	2b00      	cmp	r3, #0
 8014038:	d05b      	beq.n	80140f2 <tcp_receive+0x50a>
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801403e:	4b60      	ldr	r3, [pc, #384]	; (80141c0 <tcp_receive+0x5d8>)
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	1ad3      	subs	r3, r2, r3
 8014044:	2b00      	cmp	r3, #0
 8014046:	da54      	bge.n	80140f2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014048:	4b5e      	ldr	r3, [pc, #376]	; (80141c4 <tcp_receive+0x5dc>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	b29a      	uxth	r2, r3
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014052:	b29b      	uxth	r3, r3
 8014054:	1ad3      	subs	r3, r2, r3
 8014056:	b29b      	uxth	r3, r3
 8014058:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801405c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014066:	10db      	asrs	r3, r3, #3
 8014068:	b21b      	sxth	r3, r3
 801406a:	b29b      	uxth	r3, r3
 801406c:	1ad3      	subs	r3, r2, r3
 801406e:	b29b      	uxth	r3, r3
 8014070:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801407a:	b29a      	uxth	r2, r3
 801407c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014080:	4413      	add	r3, r2
 8014082:	b29b      	uxth	r3, r3
 8014084:	b21a      	sxth	r2, r3
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801408a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801408e:	2b00      	cmp	r3, #0
 8014090:	da05      	bge.n	801409e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8014092:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014096:	425b      	negs	r3, r3
 8014098:	b29b      	uxth	r3, r3
 801409a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801409e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80140a8:	109b      	asrs	r3, r3, #2
 80140aa:	b21b      	sxth	r3, r3
 80140ac:	b29b      	uxth	r3, r3
 80140ae:	1ad3      	subs	r3, r2, r3
 80140b0:	b29b      	uxth	r3, r3
 80140b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80140bc:	b29a      	uxth	r2, r3
 80140be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80140c2:	4413      	add	r3, r2
 80140c4:	b29b      	uxth	r3, r3
 80140c6:	b21a      	sxth	r2, r3
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80140d2:	10db      	asrs	r3, r3, #3
 80140d4:	b21b      	sxth	r3, r3
 80140d6:	b29a      	uxth	r2, r3
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80140de:	b29b      	uxth	r3, r3
 80140e0:	4413      	add	r3, r2
 80140e2:	b29b      	uxth	r3, r3
 80140e4:	b21a      	sxth	r2, r3
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	2200      	movs	r2, #0
 80140f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80140f2:	4b35      	ldr	r3, [pc, #212]	; (80141c8 <tcp_receive+0x5e0>)
 80140f4:	881b      	ldrh	r3, [r3, #0]
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	f000 84e1 	beq.w	8014abe <tcp_receive+0xed6>
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	7d1b      	ldrb	r3, [r3, #20]
 8014100:	2b06      	cmp	r3, #6
 8014102:	f200 84dc 	bhi.w	8014abe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014106:	687b      	ldr	r3, [r7, #4]
 8014108:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801410a:	4b30      	ldr	r3, [pc, #192]	; (80141cc <tcp_receive+0x5e4>)
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	1ad3      	subs	r3, r2, r3
 8014110:	3b01      	subs	r3, #1
 8014112:	2b00      	cmp	r3, #0
 8014114:	f2c0 808e 	blt.w	8014234 <tcp_receive+0x64c>
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801411c:	4b2a      	ldr	r3, [pc, #168]	; (80141c8 <tcp_receive+0x5e0>)
 801411e:	881b      	ldrh	r3, [r3, #0]
 8014120:	4619      	mov	r1, r3
 8014122:	4b2a      	ldr	r3, [pc, #168]	; (80141cc <tcp_receive+0x5e4>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	440b      	add	r3, r1
 8014128:	1ad3      	subs	r3, r2, r3
 801412a:	3301      	adds	r3, #1
 801412c:	2b00      	cmp	r3, #0
 801412e:	f300 8081 	bgt.w	8014234 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014132:	4b27      	ldr	r3, [pc, #156]	; (80141d0 <tcp_receive+0x5e8>)
 8014134:	685b      	ldr	r3, [r3, #4]
 8014136:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801413c:	4b23      	ldr	r3, [pc, #140]	; (80141cc <tcp_receive+0x5e4>)
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	1ad3      	subs	r3, r2, r3
 8014142:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014144:	4b22      	ldr	r3, [pc, #136]	; (80141d0 <tcp_receive+0x5e8>)
 8014146:	685b      	ldr	r3, [r3, #4]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d106      	bne.n	801415a <tcp_receive+0x572>
 801414c:	4b21      	ldr	r3, [pc, #132]	; (80141d4 <tcp_receive+0x5ec>)
 801414e:	f240 5294 	movw	r2, #1428	; 0x594
 8014152:	4921      	ldr	r1, [pc, #132]	; (80141d8 <tcp_receive+0x5f0>)
 8014154:	4821      	ldr	r0, [pc, #132]	; (80141dc <tcp_receive+0x5f4>)
 8014156:	f005 fe05 	bl	8019d64 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801415c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014160:	4293      	cmp	r3, r2
 8014162:	d906      	bls.n	8014172 <tcp_receive+0x58a>
 8014164:	4b1b      	ldr	r3, [pc, #108]	; (80141d4 <tcp_receive+0x5ec>)
 8014166:	f240 5295 	movw	r2, #1429	; 0x595
 801416a:	491d      	ldr	r1, [pc, #116]	; (80141e0 <tcp_receive+0x5f8>)
 801416c:	481b      	ldr	r0, [pc, #108]	; (80141dc <tcp_receive+0x5f4>)
 801416e:	f005 fdf9 	bl	8019d64 <iprintf>
      off = (u16_t)off32;
 8014172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014174:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014178:	4b15      	ldr	r3, [pc, #84]	; (80141d0 <tcp_receive+0x5e8>)
 801417a:	685b      	ldr	r3, [r3, #4]
 801417c:	891b      	ldrh	r3, [r3, #8]
 801417e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014182:	429a      	cmp	r2, r3
 8014184:	d906      	bls.n	8014194 <tcp_receive+0x5ac>
 8014186:	4b13      	ldr	r3, [pc, #76]	; (80141d4 <tcp_receive+0x5ec>)
 8014188:	f240 5297 	movw	r2, #1431	; 0x597
 801418c:	4915      	ldr	r1, [pc, #84]	; (80141e4 <tcp_receive+0x5fc>)
 801418e:	4813      	ldr	r0, [pc, #76]	; (80141dc <tcp_receive+0x5f4>)
 8014190:	f005 fde8 	bl	8019d64 <iprintf>
      inseg.len -= off;
 8014194:	4b0e      	ldr	r3, [pc, #56]	; (80141d0 <tcp_receive+0x5e8>)
 8014196:	891a      	ldrh	r2, [r3, #8]
 8014198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801419c:	1ad3      	subs	r3, r2, r3
 801419e:	b29a      	uxth	r2, r3
 80141a0:	4b0b      	ldr	r3, [pc, #44]	; (80141d0 <tcp_receive+0x5e8>)
 80141a2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80141a4:	4b0a      	ldr	r3, [pc, #40]	; (80141d0 <tcp_receive+0x5e8>)
 80141a6:	685b      	ldr	r3, [r3, #4]
 80141a8:	891a      	ldrh	r2, [r3, #8]
 80141aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80141ae:	1ad3      	subs	r3, r2, r3
 80141b0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80141b2:	e029      	b.n	8014208 <tcp_receive+0x620>
 80141b4:	0801c494 	.word	0x0801c494
 80141b8:	0801c49c 	.word	0x0801c49c
 80141bc:	24004160 	.word	0x24004160
 80141c0:	2400415c 	.word	0x2400415c
 80141c4:	240078a0 	.word	0x240078a0
 80141c8:	24004162 	.word	0x24004162
 80141cc:	24004158 	.word	0x24004158
 80141d0:	24004138 	.word	0x24004138
 80141d4:	0801c12c 	.word	0x0801c12c
 80141d8:	0801c4a4 	.word	0x0801c4a4
 80141dc:	0801c178 	.word	0x0801c178
 80141e0:	0801c4b4 	.word	0x0801c4b4
 80141e4:	0801c4c4 	.word	0x0801c4c4
        off -= p->len;
 80141e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141ea:	895b      	ldrh	r3, [r3, #10]
 80141ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80141f0:	1ad3      	subs	r3, r2, r3
 80141f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80141f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80141fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80141fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80141fe:	2200      	movs	r2, #0
 8014200:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014202:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801420a:	895b      	ldrh	r3, [r3, #10]
 801420c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014210:	429a      	cmp	r2, r3
 8014212:	d8e9      	bhi.n	80141e8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014214:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014218:	4619      	mov	r1, r3
 801421a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801421c:	f7fc f8c4 	bl	80103a8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014224:	4a91      	ldr	r2, [pc, #580]	; (801446c <tcp_receive+0x884>)
 8014226:	6013      	str	r3, [r2, #0]
 8014228:	4b91      	ldr	r3, [pc, #580]	; (8014470 <tcp_receive+0x888>)
 801422a:	68db      	ldr	r3, [r3, #12]
 801422c:	4a8f      	ldr	r2, [pc, #572]	; (801446c <tcp_receive+0x884>)
 801422e:	6812      	ldr	r2, [r2, #0]
 8014230:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014232:	e00d      	b.n	8014250 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014234:	4b8d      	ldr	r3, [pc, #564]	; (801446c <tcp_receive+0x884>)
 8014236:	681a      	ldr	r2, [r3, #0]
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801423c:	1ad3      	subs	r3, r2, r3
 801423e:	2b00      	cmp	r3, #0
 8014240:	da06      	bge.n	8014250 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	8b5b      	ldrh	r3, [r3, #26]
 8014246:	f043 0302 	orr.w	r3, r3, #2
 801424a:	b29a      	uxth	r2, r3
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014250:	4b86      	ldr	r3, [pc, #536]	; (801446c <tcp_receive+0x884>)
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014258:	1ad3      	subs	r3, r2, r3
 801425a:	2b00      	cmp	r3, #0
 801425c:	f2c0 842a 	blt.w	8014ab4 <tcp_receive+0xecc>
 8014260:	4b82      	ldr	r3, [pc, #520]	; (801446c <tcp_receive+0x884>)
 8014262:	681a      	ldr	r2, [r3, #0]
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014268:	6879      	ldr	r1, [r7, #4]
 801426a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801426c:	440b      	add	r3, r1
 801426e:	1ad3      	subs	r3, r2, r3
 8014270:	3301      	adds	r3, #1
 8014272:	2b00      	cmp	r3, #0
 8014274:	f300 841e 	bgt.w	8014ab4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801427c:	4b7b      	ldr	r3, [pc, #492]	; (801446c <tcp_receive+0x884>)
 801427e:	681b      	ldr	r3, [r3, #0]
 8014280:	429a      	cmp	r2, r3
 8014282:	f040 829a 	bne.w	80147ba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014286:	4b7a      	ldr	r3, [pc, #488]	; (8014470 <tcp_receive+0x888>)
 8014288:	891c      	ldrh	r4, [r3, #8]
 801428a:	4b79      	ldr	r3, [pc, #484]	; (8014470 <tcp_receive+0x888>)
 801428c:	68db      	ldr	r3, [r3, #12]
 801428e:	899b      	ldrh	r3, [r3, #12]
 8014290:	b29b      	uxth	r3, r3
 8014292:	4618      	mov	r0, r3
 8014294:	f7fa fc64 	bl	800eb60 <lwip_htons>
 8014298:	4603      	mov	r3, r0
 801429a:	b2db      	uxtb	r3, r3
 801429c:	f003 0303 	and.w	r3, r3, #3
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d001      	beq.n	80142a8 <tcp_receive+0x6c0>
 80142a4:	2301      	movs	r3, #1
 80142a6:	e000      	b.n	80142aa <tcp_receive+0x6c2>
 80142a8:	2300      	movs	r3, #0
 80142aa:	4423      	add	r3, r4
 80142ac:	b29a      	uxth	r2, r3
 80142ae:	4b71      	ldr	r3, [pc, #452]	; (8014474 <tcp_receive+0x88c>)
 80142b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80142b6:	4b6f      	ldr	r3, [pc, #444]	; (8014474 <tcp_receive+0x88c>)
 80142b8:	881b      	ldrh	r3, [r3, #0]
 80142ba:	429a      	cmp	r2, r3
 80142bc:	d275      	bcs.n	80143aa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80142be:	4b6c      	ldr	r3, [pc, #432]	; (8014470 <tcp_receive+0x888>)
 80142c0:	68db      	ldr	r3, [r3, #12]
 80142c2:	899b      	ldrh	r3, [r3, #12]
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	4618      	mov	r0, r3
 80142c8:	f7fa fc4a 	bl	800eb60 <lwip_htons>
 80142cc:	4603      	mov	r3, r0
 80142ce:	b2db      	uxtb	r3, r3
 80142d0:	f003 0301 	and.w	r3, r3, #1
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d01f      	beq.n	8014318 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80142d8:	4b65      	ldr	r3, [pc, #404]	; (8014470 <tcp_receive+0x888>)
 80142da:	68db      	ldr	r3, [r3, #12]
 80142dc:	899b      	ldrh	r3, [r3, #12]
 80142de:	b29b      	uxth	r3, r3
 80142e0:	b21b      	sxth	r3, r3
 80142e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80142e6:	b21c      	sxth	r4, r3
 80142e8:	4b61      	ldr	r3, [pc, #388]	; (8014470 <tcp_receive+0x888>)
 80142ea:	68db      	ldr	r3, [r3, #12]
 80142ec:	899b      	ldrh	r3, [r3, #12]
 80142ee:	b29b      	uxth	r3, r3
 80142f0:	4618      	mov	r0, r3
 80142f2:	f7fa fc35 	bl	800eb60 <lwip_htons>
 80142f6:	4603      	mov	r3, r0
 80142f8:	b2db      	uxtb	r3, r3
 80142fa:	b29b      	uxth	r3, r3
 80142fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014300:	b29b      	uxth	r3, r3
 8014302:	4618      	mov	r0, r3
 8014304:	f7fa fc2c 	bl	800eb60 <lwip_htons>
 8014308:	4603      	mov	r3, r0
 801430a:	b21b      	sxth	r3, r3
 801430c:	4323      	orrs	r3, r4
 801430e:	b21a      	sxth	r2, r3
 8014310:	4b57      	ldr	r3, [pc, #348]	; (8014470 <tcp_receive+0x888>)
 8014312:	68db      	ldr	r3, [r3, #12]
 8014314:	b292      	uxth	r2, r2
 8014316:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801431c:	4b54      	ldr	r3, [pc, #336]	; (8014470 <tcp_receive+0x888>)
 801431e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014320:	4b53      	ldr	r3, [pc, #332]	; (8014470 <tcp_receive+0x888>)
 8014322:	68db      	ldr	r3, [r3, #12]
 8014324:	899b      	ldrh	r3, [r3, #12]
 8014326:	b29b      	uxth	r3, r3
 8014328:	4618      	mov	r0, r3
 801432a:	f7fa fc19 	bl	800eb60 <lwip_htons>
 801432e:	4603      	mov	r3, r0
 8014330:	b2db      	uxtb	r3, r3
 8014332:	f003 0302 	and.w	r3, r3, #2
 8014336:	2b00      	cmp	r3, #0
 8014338:	d005      	beq.n	8014346 <tcp_receive+0x75e>
            inseg.len -= 1;
 801433a:	4b4d      	ldr	r3, [pc, #308]	; (8014470 <tcp_receive+0x888>)
 801433c:	891b      	ldrh	r3, [r3, #8]
 801433e:	3b01      	subs	r3, #1
 8014340:	b29a      	uxth	r2, r3
 8014342:	4b4b      	ldr	r3, [pc, #300]	; (8014470 <tcp_receive+0x888>)
 8014344:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014346:	4b4a      	ldr	r3, [pc, #296]	; (8014470 <tcp_receive+0x888>)
 8014348:	685b      	ldr	r3, [r3, #4]
 801434a:	4a49      	ldr	r2, [pc, #292]	; (8014470 <tcp_receive+0x888>)
 801434c:	8912      	ldrh	r2, [r2, #8]
 801434e:	4611      	mov	r1, r2
 8014350:	4618      	mov	r0, r3
 8014352:	f7fb ff29 	bl	80101a8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014356:	4b46      	ldr	r3, [pc, #280]	; (8014470 <tcp_receive+0x888>)
 8014358:	891c      	ldrh	r4, [r3, #8]
 801435a:	4b45      	ldr	r3, [pc, #276]	; (8014470 <tcp_receive+0x888>)
 801435c:	68db      	ldr	r3, [r3, #12]
 801435e:	899b      	ldrh	r3, [r3, #12]
 8014360:	b29b      	uxth	r3, r3
 8014362:	4618      	mov	r0, r3
 8014364:	f7fa fbfc 	bl	800eb60 <lwip_htons>
 8014368:	4603      	mov	r3, r0
 801436a:	b2db      	uxtb	r3, r3
 801436c:	f003 0303 	and.w	r3, r3, #3
 8014370:	2b00      	cmp	r3, #0
 8014372:	d001      	beq.n	8014378 <tcp_receive+0x790>
 8014374:	2301      	movs	r3, #1
 8014376:	e000      	b.n	801437a <tcp_receive+0x792>
 8014378:	2300      	movs	r3, #0
 801437a:	4423      	add	r3, r4
 801437c:	b29a      	uxth	r2, r3
 801437e:	4b3d      	ldr	r3, [pc, #244]	; (8014474 <tcp_receive+0x88c>)
 8014380:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014382:	4b3c      	ldr	r3, [pc, #240]	; (8014474 <tcp_receive+0x88c>)
 8014384:	881b      	ldrh	r3, [r3, #0]
 8014386:	461a      	mov	r2, r3
 8014388:	4b38      	ldr	r3, [pc, #224]	; (801446c <tcp_receive+0x884>)
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	441a      	add	r2, r3
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014392:	6879      	ldr	r1, [r7, #4]
 8014394:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014396:	440b      	add	r3, r1
 8014398:	429a      	cmp	r2, r3
 801439a:	d006      	beq.n	80143aa <tcp_receive+0x7c2>
 801439c:	4b36      	ldr	r3, [pc, #216]	; (8014478 <tcp_receive+0x890>)
 801439e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80143a2:	4936      	ldr	r1, [pc, #216]	; (801447c <tcp_receive+0x894>)
 80143a4:	4836      	ldr	r0, [pc, #216]	; (8014480 <tcp_receive+0x898>)
 80143a6:	f005 fcdd 	bl	8019d64 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	f000 80e7 	beq.w	8014582 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80143b4:	4b2e      	ldr	r3, [pc, #184]	; (8014470 <tcp_receive+0x888>)
 80143b6:	68db      	ldr	r3, [r3, #12]
 80143b8:	899b      	ldrh	r3, [r3, #12]
 80143ba:	b29b      	uxth	r3, r3
 80143bc:	4618      	mov	r0, r3
 80143be:	f7fa fbcf 	bl	800eb60 <lwip_htons>
 80143c2:	4603      	mov	r3, r0
 80143c4:	b2db      	uxtb	r3, r3
 80143c6:	f003 0301 	and.w	r3, r3, #1
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d010      	beq.n	80143f0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80143ce:	e00a      	b.n	80143e6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80143e0:	68f8      	ldr	r0, [r7, #12]
 80143e2:	f7fd fcb0 	bl	8011d46 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d1f0      	bne.n	80143d0 <tcp_receive+0x7e8>
 80143ee:	e0c8      	b.n	8014582 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80143f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80143f6:	e052      	b.n	801449e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80143f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80143fa:	68db      	ldr	r3, [r3, #12]
 80143fc:	899b      	ldrh	r3, [r3, #12]
 80143fe:	b29b      	uxth	r3, r3
 8014400:	4618      	mov	r0, r3
 8014402:	f7fa fbad 	bl	800eb60 <lwip_htons>
 8014406:	4603      	mov	r3, r0
 8014408:	b2db      	uxtb	r3, r3
 801440a:	f003 0301 	and.w	r3, r3, #1
 801440e:	2b00      	cmp	r3, #0
 8014410:	d03d      	beq.n	801448e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014412:	4b17      	ldr	r3, [pc, #92]	; (8014470 <tcp_receive+0x888>)
 8014414:	68db      	ldr	r3, [r3, #12]
 8014416:	899b      	ldrh	r3, [r3, #12]
 8014418:	b29b      	uxth	r3, r3
 801441a:	4618      	mov	r0, r3
 801441c:	f7fa fba0 	bl	800eb60 <lwip_htons>
 8014420:	4603      	mov	r3, r0
 8014422:	b2db      	uxtb	r3, r3
 8014424:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014428:	2b00      	cmp	r3, #0
 801442a:	d130      	bne.n	801448e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801442c:	4b10      	ldr	r3, [pc, #64]	; (8014470 <tcp_receive+0x888>)
 801442e:	68db      	ldr	r3, [r3, #12]
 8014430:	899b      	ldrh	r3, [r3, #12]
 8014432:	b29c      	uxth	r4, r3
 8014434:	2001      	movs	r0, #1
 8014436:	f7fa fb93 	bl	800eb60 <lwip_htons>
 801443a:	4603      	mov	r3, r0
 801443c:	461a      	mov	r2, r3
 801443e:	4b0c      	ldr	r3, [pc, #48]	; (8014470 <tcp_receive+0x888>)
 8014440:	68db      	ldr	r3, [r3, #12]
 8014442:	4322      	orrs	r2, r4
 8014444:	b292      	uxth	r2, r2
 8014446:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014448:	4b09      	ldr	r3, [pc, #36]	; (8014470 <tcp_receive+0x888>)
 801444a:	891c      	ldrh	r4, [r3, #8]
 801444c:	4b08      	ldr	r3, [pc, #32]	; (8014470 <tcp_receive+0x888>)
 801444e:	68db      	ldr	r3, [r3, #12]
 8014450:	899b      	ldrh	r3, [r3, #12]
 8014452:	b29b      	uxth	r3, r3
 8014454:	4618      	mov	r0, r3
 8014456:	f7fa fb83 	bl	800eb60 <lwip_htons>
 801445a:	4603      	mov	r3, r0
 801445c:	b2db      	uxtb	r3, r3
 801445e:	f003 0303 	and.w	r3, r3, #3
 8014462:	2b00      	cmp	r3, #0
 8014464:	d00e      	beq.n	8014484 <tcp_receive+0x89c>
 8014466:	2301      	movs	r3, #1
 8014468:	e00d      	b.n	8014486 <tcp_receive+0x89e>
 801446a:	bf00      	nop
 801446c:	24004158 	.word	0x24004158
 8014470:	24004138 	.word	0x24004138
 8014474:	24004162 	.word	0x24004162
 8014478:	0801c12c 	.word	0x0801c12c
 801447c:	0801c4d4 	.word	0x0801c4d4
 8014480:	0801c178 	.word	0x0801c178
 8014484:	2300      	movs	r3, #0
 8014486:	4423      	add	r3, r4
 8014488:	b29a      	uxth	r2, r3
 801448a:	4b98      	ldr	r3, [pc, #608]	; (80146ec <tcp_receive+0xb04>)
 801448c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801448e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014490:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014498:	6938      	ldr	r0, [r7, #16]
 801449a:	f7fd fc54 	bl	8011d46 <tcp_seg_free>
            while (next &&
 801449e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d00e      	beq.n	80144c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80144a4:	4b91      	ldr	r3, [pc, #580]	; (80146ec <tcp_receive+0xb04>)
 80144a6:	881b      	ldrh	r3, [r3, #0]
 80144a8:	461a      	mov	r2, r3
 80144aa:	4b91      	ldr	r3, [pc, #580]	; (80146f0 <tcp_receive+0xb08>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	441a      	add	r2, r3
 80144b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144b2:	68db      	ldr	r3, [r3, #12]
 80144b4:	685b      	ldr	r3, [r3, #4]
 80144b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80144b8:	8909      	ldrh	r1, [r1, #8]
 80144ba:	440b      	add	r3, r1
 80144bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80144be:	2b00      	cmp	r3, #0
 80144c0:	da9a      	bge.n	80143f8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80144c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d059      	beq.n	801457c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80144c8:	4b88      	ldr	r3, [pc, #544]	; (80146ec <tcp_receive+0xb04>)
 80144ca:	881b      	ldrh	r3, [r3, #0]
 80144cc:	461a      	mov	r2, r3
 80144ce:	4b88      	ldr	r3, [pc, #544]	; (80146f0 <tcp_receive+0xb08>)
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	441a      	add	r2, r3
 80144d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144d6:	68db      	ldr	r3, [r3, #12]
 80144d8:	685b      	ldr	r3, [r3, #4]
 80144da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80144dc:	2b00      	cmp	r3, #0
 80144de:	dd4d      	ble.n	801457c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80144e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80144e2:	68db      	ldr	r3, [r3, #12]
 80144e4:	685b      	ldr	r3, [r3, #4]
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	4b81      	ldr	r3, [pc, #516]	; (80146f0 <tcp_receive+0xb08>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	b29b      	uxth	r3, r3
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	b29a      	uxth	r2, r3
 80144f2:	4b80      	ldr	r3, [pc, #512]	; (80146f4 <tcp_receive+0xb0c>)
 80144f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80144f6:	4b7f      	ldr	r3, [pc, #508]	; (80146f4 <tcp_receive+0xb0c>)
 80144f8:	68db      	ldr	r3, [r3, #12]
 80144fa:	899b      	ldrh	r3, [r3, #12]
 80144fc:	b29b      	uxth	r3, r3
 80144fe:	4618      	mov	r0, r3
 8014500:	f7fa fb2e 	bl	800eb60 <lwip_htons>
 8014504:	4603      	mov	r3, r0
 8014506:	b2db      	uxtb	r3, r3
 8014508:	f003 0302 	and.w	r3, r3, #2
 801450c:	2b00      	cmp	r3, #0
 801450e:	d005      	beq.n	801451c <tcp_receive+0x934>
                inseg.len -= 1;
 8014510:	4b78      	ldr	r3, [pc, #480]	; (80146f4 <tcp_receive+0xb0c>)
 8014512:	891b      	ldrh	r3, [r3, #8]
 8014514:	3b01      	subs	r3, #1
 8014516:	b29a      	uxth	r2, r3
 8014518:	4b76      	ldr	r3, [pc, #472]	; (80146f4 <tcp_receive+0xb0c>)
 801451a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801451c:	4b75      	ldr	r3, [pc, #468]	; (80146f4 <tcp_receive+0xb0c>)
 801451e:	685b      	ldr	r3, [r3, #4]
 8014520:	4a74      	ldr	r2, [pc, #464]	; (80146f4 <tcp_receive+0xb0c>)
 8014522:	8912      	ldrh	r2, [r2, #8]
 8014524:	4611      	mov	r1, r2
 8014526:	4618      	mov	r0, r3
 8014528:	f7fb fe3e 	bl	80101a8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801452c:	4b71      	ldr	r3, [pc, #452]	; (80146f4 <tcp_receive+0xb0c>)
 801452e:	891c      	ldrh	r4, [r3, #8]
 8014530:	4b70      	ldr	r3, [pc, #448]	; (80146f4 <tcp_receive+0xb0c>)
 8014532:	68db      	ldr	r3, [r3, #12]
 8014534:	899b      	ldrh	r3, [r3, #12]
 8014536:	b29b      	uxth	r3, r3
 8014538:	4618      	mov	r0, r3
 801453a:	f7fa fb11 	bl	800eb60 <lwip_htons>
 801453e:	4603      	mov	r3, r0
 8014540:	b2db      	uxtb	r3, r3
 8014542:	f003 0303 	and.w	r3, r3, #3
 8014546:	2b00      	cmp	r3, #0
 8014548:	d001      	beq.n	801454e <tcp_receive+0x966>
 801454a:	2301      	movs	r3, #1
 801454c:	e000      	b.n	8014550 <tcp_receive+0x968>
 801454e:	2300      	movs	r3, #0
 8014550:	4423      	add	r3, r4
 8014552:	b29a      	uxth	r2, r3
 8014554:	4b65      	ldr	r3, [pc, #404]	; (80146ec <tcp_receive+0xb04>)
 8014556:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014558:	4b64      	ldr	r3, [pc, #400]	; (80146ec <tcp_receive+0xb04>)
 801455a:	881b      	ldrh	r3, [r3, #0]
 801455c:	461a      	mov	r2, r3
 801455e:	4b64      	ldr	r3, [pc, #400]	; (80146f0 <tcp_receive+0xb08>)
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	441a      	add	r2, r3
 8014564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014566:	68db      	ldr	r3, [r3, #12]
 8014568:	685b      	ldr	r3, [r3, #4]
 801456a:	429a      	cmp	r2, r3
 801456c:	d006      	beq.n	801457c <tcp_receive+0x994>
 801456e:	4b62      	ldr	r3, [pc, #392]	; (80146f8 <tcp_receive+0xb10>)
 8014570:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014574:	4961      	ldr	r1, [pc, #388]	; (80146fc <tcp_receive+0xb14>)
 8014576:	4862      	ldr	r0, [pc, #392]	; (8014700 <tcp_receive+0xb18>)
 8014578:	f005 fbf4 	bl	8019d64 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014580:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014582:	4b5a      	ldr	r3, [pc, #360]	; (80146ec <tcp_receive+0xb04>)
 8014584:	881b      	ldrh	r3, [r3, #0]
 8014586:	461a      	mov	r2, r3
 8014588:	4b59      	ldr	r3, [pc, #356]	; (80146f0 <tcp_receive+0xb08>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	441a      	add	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014596:	4b55      	ldr	r3, [pc, #340]	; (80146ec <tcp_receive+0xb04>)
 8014598:	881b      	ldrh	r3, [r3, #0]
 801459a:	429a      	cmp	r2, r3
 801459c:	d206      	bcs.n	80145ac <tcp_receive+0x9c4>
 801459e:	4b56      	ldr	r3, [pc, #344]	; (80146f8 <tcp_receive+0xb10>)
 80145a0:	f240 6207 	movw	r2, #1543	; 0x607
 80145a4:	4957      	ldr	r1, [pc, #348]	; (8014704 <tcp_receive+0xb1c>)
 80145a6:	4856      	ldr	r0, [pc, #344]	; (8014700 <tcp_receive+0xb18>)
 80145a8:	f005 fbdc 	bl	8019d64 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80145ac:	687b      	ldr	r3, [r7, #4]
 80145ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80145b0:	4b4e      	ldr	r3, [pc, #312]	; (80146ec <tcp_receive+0xb04>)
 80145b2:	881b      	ldrh	r3, [r3, #0]
 80145b4:	1ad3      	subs	r3, r2, r3
 80145b6:	b29a      	uxth	r2, r3
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80145bc:	6878      	ldr	r0, [r7, #4]
 80145be:	f7fc fe9d 	bl	80112fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80145c2:	4b4c      	ldr	r3, [pc, #304]	; (80146f4 <tcp_receive+0xb0c>)
 80145c4:	685b      	ldr	r3, [r3, #4]
 80145c6:	891b      	ldrh	r3, [r3, #8]
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d006      	beq.n	80145da <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80145cc:	4b49      	ldr	r3, [pc, #292]	; (80146f4 <tcp_receive+0xb0c>)
 80145ce:	685b      	ldr	r3, [r3, #4]
 80145d0:	4a4d      	ldr	r2, [pc, #308]	; (8014708 <tcp_receive+0xb20>)
 80145d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80145d4:	4b47      	ldr	r3, [pc, #284]	; (80146f4 <tcp_receive+0xb0c>)
 80145d6:	2200      	movs	r2, #0
 80145d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80145da:	4b46      	ldr	r3, [pc, #280]	; (80146f4 <tcp_receive+0xb0c>)
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	899b      	ldrh	r3, [r3, #12]
 80145e0:	b29b      	uxth	r3, r3
 80145e2:	4618      	mov	r0, r3
 80145e4:	f7fa fabc 	bl	800eb60 <lwip_htons>
 80145e8:	4603      	mov	r3, r0
 80145ea:	b2db      	uxtb	r3, r3
 80145ec:	f003 0301 	and.w	r3, r3, #1
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	f000 80b8 	beq.w	8014766 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80145f6:	4b45      	ldr	r3, [pc, #276]	; (801470c <tcp_receive+0xb24>)
 80145f8:	781b      	ldrb	r3, [r3, #0]
 80145fa:	f043 0320 	orr.w	r3, r3, #32
 80145fe:	b2da      	uxtb	r2, r3
 8014600:	4b42      	ldr	r3, [pc, #264]	; (801470c <tcp_receive+0xb24>)
 8014602:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014604:	e0af      	b.n	8014766 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801460a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014610:	68db      	ldr	r3, [r3, #12]
 8014612:	685b      	ldr	r3, [r3, #4]
 8014614:	4a36      	ldr	r2, [pc, #216]	; (80146f0 <tcp_receive+0xb08>)
 8014616:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	891b      	ldrh	r3, [r3, #8]
 801461c:	461c      	mov	r4, r3
 801461e:	68bb      	ldr	r3, [r7, #8]
 8014620:	68db      	ldr	r3, [r3, #12]
 8014622:	899b      	ldrh	r3, [r3, #12]
 8014624:	b29b      	uxth	r3, r3
 8014626:	4618      	mov	r0, r3
 8014628:	f7fa fa9a 	bl	800eb60 <lwip_htons>
 801462c:	4603      	mov	r3, r0
 801462e:	b2db      	uxtb	r3, r3
 8014630:	f003 0303 	and.w	r3, r3, #3
 8014634:	2b00      	cmp	r3, #0
 8014636:	d001      	beq.n	801463c <tcp_receive+0xa54>
 8014638:	2301      	movs	r3, #1
 801463a:	e000      	b.n	801463e <tcp_receive+0xa56>
 801463c:	2300      	movs	r3, #0
 801463e:	191a      	adds	r2, r3, r4
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014644:	441a      	add	r2, r3
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801464e:	461c      	mov	r4, r3
 8014650:	68bb      	ldr	r3, [r7, #8]
 8014652:	891b      	ldrh	r3, [r3, #8]
 8014654:	461d      	mov	r5, r3
 8014656:	68bb      	ldr	r3, [r7, #8]
 8014658:	68db      	ldr	r3, [r3, #12]
 801465a:	899b      	ldrh	r3, [r3, #12]
 801465c:	b29b      	uxth	r3, r3
 801465e:	4618      	mov	r0, r3
 8014660:	f7fa fa7e 	bl	800eb60 <lwip_htons>
 8014664:	4603      	mov	r3, r0
 8014666:	b2db      	uxtb	r3, r3
 8014668:	f003 0303 	and.w	r3, r3, #3
 801466c:	2b00      	cmp	r3, #0
 801466e:	d001      	beq.n	8014674 <tcp_receive+0xa8c>
 8014670:	2301      	movs	r3, #1
 8014672:	e000      	b.n	8014676 <tcp_receive+0xa8e>
 8014674:	2300      	movs	r3, #0
 8014676:	442b      	add	r3, r5
 8014678:	429c      	cmp	r4, r3
 801467a:	d206      	bcs.n	801468a <tcp_receive+0xaa2>
 801467c:	4b1e      	ldr	r3, [pc, #120]	; (80146f8 <tcp_receive+0xb10>)
 801467e:	f240 622b 	movw	r2, #1579	; 0x62b
 8014682:	4923      	ldr	r1, [pc, #140]	; (8014710 <tcp_receive+0xb28>)
 8014684:	481e      	ldr	r0, [pc, #120]	; (8014700 <tcp_receive+0xb18>)
 8014686:	f005 fb6d 	bl	8019d64 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801468a:	68bb      	ldr	r3, [r7, #8]
 801468c:	891b      	ldrh	r3, [r3, #8]
 801468e:	461c      	mov	r4, r3
 8014690:	68bb      	ldr	r3, [r7, #8]
 8014692:	68db      	ldr	r3, [r3, #12]
 8014694:	899b      	ldrh	r3, [r3, #12]
 8014696:	b29b      	uxth	r3, r3
 8014698:	4618      	mov	r0, r3
 801469a:	f7fa fa61 	bl	800eb60 <lwip_htons>
 801469e:	4603      	mov	r3, r0
 80146a0:	b2db      	uxtb	r3, r3
 80146a2:	f003 0303 	and.w	r3, r3, #3
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	d001      	beq.n	80146ae <tcp_receive+0xac6>
 80146aa:	2301      	movs	r3, #1
 80146ac:	e000      	b.n	80146b0 <tcp_receive+0xac8>
 80146ae:	2300      	movs	r3, #0
 80146b0:	1919      	adds	r1, r3, r4
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80146b6:	b28b      	uxth	r3, r1
 80146b8:	1ad3      	subs	r3, r2, r3
 80146ba:	b29a      	uxth	r2, r3
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80146c0:	6878      	ldr	r0, [r7, #4]
 80146c2:	f7fc fe1b 	bl	80112fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	891b      	ldrh	r3, [r3, #8]
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d028      	beq.n	8014722 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80146d0:	4b0d      	ldr	r3, [pc, #52]	; (8014708 <tcp_receive+0xb20>)
 80146d2:	681b      	ldr	r3, [r3, #0]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d01d      	beq.n	8014714 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80146d8:	4b0b      	ldr	r3, [pc, #44]	; (8014708 <tcp_receive+0xb20>)
 80146da:	681a      	ldr	r2, [r3, #0]
 80146dc:	68bb      	ldr	r3, [r7, #8]
 80146de:	685b      	ldr	r3, [r3, #4]
 80146e0:	4619      	mov	r1, r3
 80146e2:	4610      	mov	r0, r2
 80146e4:	f7fb ffb4 	bl	8010650 <pbuf_cat>
 80146e8:	e018      	b.n	801471c <tcp_receive+0xb34>
 80146ea:	bf00      	nop
 80146ec:	24004162 	.word	0x24004162
 80146f0:	24004158 	.word	0x24004158
 80146f4:	24004138 	.word	0x24004138
 80146f8:	0801c12c 	.word	0x0801c12c
 80146fc:	0801c50c 	.word	0x0801c50c
 8014700:	0801c178 	.word	0x0801c178
 8014704:	0801c548 	.word	0x0801c548
 8014708:	24004168 	.word	0x24004168
 801470c:	24004165 	.word	0x24004165
 8014710:	0801c568 	.word	0x0801c568
            } else {
              recv_data = cseg->p;
 8014714:	68bb      	ldr	r3, [r7, #8]
 8014716:	685b      	ldr	r3, [r3, #4]
 8014718:	4a70      	ldr	r2, [pc, #448]	; (80148dc <tcp_receive+0xcf4>)
 801471a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801471c:	68bb      	ldr	r3, [r7, #8]
 801471e:	2200      	movs	r2, #0
 8014720:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014722:	68bb      	ldr	r3, [r7, #8]
 8014724:	68db      	ldr	r3, [r3, #12]
 8014726:	899b      	ldrh	r3, [r3, #12]
 8014728:	b29b      	uxth	r3, r3
 801472a:	4618      	mov	r0, r3
 801472c:	f7fa fa18 	bl	800eb60 <lwip_htons>
 8014730:	4603      	mov	r3, r0
 8014732:	b2db      	uxtb	r3, r3
 8014734:	f003 0301 	and.w	r3, r3, #1
 8014738:	2b00      	cmp	r3, #0
 801473a:	d00d      	beq.n	8014758 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801473c:	4b68      	ldr	r3, [pc, #416]	; (80148e0 <tcp_receive+0xcf8>)
 801473e:	781b      	ldrb	r3, [r3, #0]
 8014740:	f043 0320 	orr.w	r3, r3, #32
 8014744:	b2da      	uxtb	r2, r3
 8014746:	4b66      	ldr	r3, [pc, #408]	; (80148e0 <tcp_receive+0xcf8>)
 8014748:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	7d1b      	ldrb	r3, [r3, #20]
 801474e:	2b04      	cmp	r3, #4
 8014750:	d102      	bne.n	8014758 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2207      	movs	r2, #7
 8014756:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014758:	68bb      	ldr	r3, [r7, #8]
 801475a:	681a      	ldr	r2, [r3, #0]
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014760:	68b8      	ldr	r0, [r7, #8]
 8014762:	f7fd faf0 	bl	8011d46 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801476a:	2b00      	cmp	r3, #0
 801476c:	d008      	beq.n	8014780 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	685a      	ldr	r2, [r3, #4]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801477a:	429a      	cmp	r2, r3
 801477c:	f43f af43 	beq.w	8014606 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	8b5b      	ldrh	r3, [r3, #26]
 8014784:	f003 0301 	and.w	r3, r3, #1
 8014788:	2b00      	cmp	r3, #0
 801478a:	d00e      	beq.n	80147aa <tcp_receive+0xbc2>
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	8b5b      	ldrh	r3, [r3, #26]
 8014790:	f023 0301 	bic.w	r3, r3, #1
 8014794:	b29a      	uxth	r2, r3
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	835a      	strh	r2, [r3, #26]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	8b5b      	ldrh	r3, [r3, #26]
 801479e:	f043 0302 	orr.w	r3, r3, #2
 80147a2:	b29a      	uxth	r2, r3
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80147a8:	e188      	b.n	8014abc <tcp_receive+0xed4>
        tcp_ack(pcb);
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	8b5b      	ldrh	r3, [r3, #26]
 80147ae:	f043 0301 	orr.w	r3, r3, #1
 80147b2:	b29a      	uxth	r2, r3
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80147b8:	e180      	b.n	8014abc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147be:	2b00      	cmp	r3, #0
 80147c0:	d106      	bne.n	80147d0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80147c2:	4848      	ldr	r0, [pc, #288]	; (80148e4 <tcp_receive+0xcfc>)
 80147c4:	f7fd faf6 	bl	8011db4 <tcp_seg_copy>
 80147c8:	4602      	mov	r2, r0
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	675a      	str	r2, [r3, #116]	; 0x74
 80147ce:	e16d      	b.n	8014aac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80147d0:	2300      	movs	r3, #0
 80147d2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80147da:	e157      	b.n	8014a8c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80147dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147de:	68db      	ldr	r3, [r3, #12]
 80147e0:	685a      	ldr	r2, [r3, #4]
 80147e2:	4b41      	ldr	r3, [pc, #260]	; (80148e8 <tcp_receive+0xd00>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	d11d      	bne.n	8014826 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80147ea:	4b3e      	ldr	r3, [pc, #248]	; (80148e4 <tcp_receive+0xcfc>)
 80147ec:	891a      	ldrh	r2, [r3, #8]
 80147ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f0:	891b      	ldrh	r3, [r3, #8]
 80147f2:	429a      	cmp	r2, r3
 80147f4:	f240 814f 	bls.w	8014a96 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80147f8:	483a      	ldr	r0, [pc, #232]	; (80148e4 <tcp_receive+0xcfc>)
 80147fa:	f7fd fadb 	bl	8011db4 <tcp_seg_copy>
 80147fe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	2b00      	cmp	r3, #0
 8014804:	f000 8149 	beq.w	8014a9a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801480a:	2b00      	cmp	r3, #0
 801480c:	d003      	beq.n	8014816 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801480e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014810:	697a      	ldr	r2, [r7, #20]
 8014812:	601a      	str	r2, [r3, #0]
 8014814:	e002      	b.n	801481c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	697a      	ldr	r2, [r7, #20]
 801481a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801481c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801481e:	6978      	ldr	r0, [r7, #20]
 8014820:	f7ff f8de 	bl	80139e0 <tcp_oos_insert_segment>
                }
                break;
 8014824:	e139      	b.n	8014a9a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014828:	2b00      	cmp	r3, #0
 801482a:	d117      	bne.n	801485c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801482c:	4b2e      	ldr	r3, [pc, #184]	; (80148e8 <tcp_receive+0xd00>)
 801482e:	681a      	ldr	r2, [r3, #0]
 8014830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014832:	68db      	ldr	r3, [r3, #12]
 8014834:	685b      	ldr	r3, [r3, #4]
 8014836:	1ad3      	subs	r3, r2, r3
 8014838:	2b00      	cmp	r3, #0
 801483a:	da57      	bge.n	80148ec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801483c:	4829      	ldr	r0, [pc, #164]	; (80148e4 <tcp_receive+0xcfc>)
 801483e:	f7fd fab9 	bl	8011db4 <tcp_seg_copy>
 8014842:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014844:	69bb      	ldr	r3, [r7, #24]
 8014846:	2b00      	cmp	r3, #0
 8014848:	f000 8129 	beq.w	8014a9e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	69ba      	ldr	r2, [r7, #24]
 8014850:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014854:	69b8      	ldr	r0, [r7, #24]
 8014856:	f7ff f8c3 	bl	80139e0 <tcp_oos_insert_segment>
                  }
                  break;
 801485a:	e120      	b.n	8014a9e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801485c:	4b22      	ldr	r3, [pc, #136]	; (80148e8 <tcp_receive+0xd00>)
 801485e:	681a      	ldr	r2, [r3, #0]
 8014860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014862:	68db      	ldr	r3, [r3, #12]
 8014864:	685b      	ldr	r3, [r3, #4]
 8014866:	1ad3      	subs	r3, r2, r3
 8014868:	3b01      	subs	r3, #1
 801486a:	2b00      	cmp	r3, #0
 801486c:	db3e      	blt.n	80148ec <tcp_receive+0xd04>
 801486e:	4b1e      	ldr	r3, [pc, #120]	; (80148e8 <tcp_receive+0xd00>)
 8014870:	681a      	ldr	r2, [r3, #0]
 8014872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014874:	68db      	ldr	r3, [r3, #12]
 8014876:	685b      	ldr	r3, [r3, #4]
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	3301      	adds	r3, #1
 801487c:	2b00      	cmp	r3, #0
 801487e:	dc35      	bgt.n	80148ec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014880:	4818      	ldr	r0, [pc, #96]	; (80148e4 <tcp_receive+0xcfc>)
 8014882:	f7fd fa97 	bl	8011db4 <tcp_seg_copy>
 8014886:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014888:	69fb      	ldr	r3, [r7, #28]
 801488a:	2b00      	cmp	r3, #0
 801488c:	f000 8109 	beq.w	8014aa2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	685b      	ldr	r3, [r3, #4]
 8014896:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014898:	8912      	ldrh	r2, [r2, #8]
 801489a:	441a      	add	r2, r3
 801489c:	4b12      	ldr	r3, [pc, #72]	; (80148e8 <tcp_receive+0xd00>)
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	1ad3      	subs	r3, r2, r3
 80148a2:	2b00      	cmp	r3, #0
 80148a4:	dd12      	ble.n	80148cc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80148a6:	4b10      	ldr	r3, [pc, #64]	; (80148e8 <tcp_receive+0xd00>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	b29a      	uxth	r2, r3
 80148ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ae:	68db      	ldr	r3, [r3, #12]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	b29b      	uxth	r3, r3
 80148b4:	1ad3      	subs	r3, r2, r3
 80148b6:	b29a      	uxth	r2, r3
 80148b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80148bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148be:	685a      	ldr	r2, [r3, #4]
 80148c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148c2:	891b      	ldrh	r3, [r3, #8]
 80148c4:	4619      	mov	r1, r3
 80148c6:	4610      	mov	r0, r2
 80148c8:	f7fb fc6e 	bl	80101a8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80148cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80148ce:	69fa      	ldr	r2, [r7, #28]
 80148d0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80148d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80148d4:	69f8      	ldr	r0, [r7, #28]
 80148d6:	f7ff f883 	bl	80139e0 <tcp_oos_insert_segment>
                  }
                  break;
 80148da:	e0e2      	b.n	8014aa2 <tcp_receive+0xeba>
 80148dc:	24004168 	.word	0x24004168
 80148e0:	24004165 	.word	0x24004165
 80148e4:	24004138 	.word	0x24004138
 80148e8:	24004158 	.word	0x24004158
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80148ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80148f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	2b00      	cmp	r3, #0
 80148f6:	f040 80c6 	bne.w	8014a86 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80148fa:	4b80      	ldr	r3, [pc, #512]	; (8014afc <tcp_receive+0xf14>)
 80148fc:	681a      	ldr	r2, [r3, #0]
 80148fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014900:	68db      	ldr	r3, [r3, #12]
 8014902:	685b      	ldr	r3, [r3, #4]
 8014904:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014906:	2b00      	cmp	r3, #0
 8014908:	f340 80bd 	ble.w	8014a86 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801490c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	899b      	ldrh	r3, [r3, #12]
 8014912:	b29b      	uxth	r3, r3
 8014914:	4618      	mov	r0, r3
 8014916:	f7fa f923 	bl	800eb60 <lwip_htons>
 801491a:	4603      	mov	r3, r0
 801491c:	b2db      	uxtb	r3, r3
 801491e:	f003 0301 	and.w	r3, r3, #1
 8014922:	2b00      	cmp	r3, #0
 8014924:	f040 80bf 	bne.w	8014aa6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014928:	4875      	ldr	r0, [pc, #468]	; (8014b00 <tcp_receive+0xf18>)
 801492a:	f7fd fa43 	bl	8011db4 <tcp_seg_copy>
 801492e:	4602      	mov	r2, r0
 8014930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014932:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2b00      	cmp	r3, #0
 801493a:	f000 80b6 	beq.w	8014aaa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801493e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014940:	68db      	ldr	r3, [r3, #12]
 8014942:	685b      	ldr	r3, [r3, #4]
 8014944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014946:	8912      	ldrh	r2, [r2, #8]
 8014948:	441a      	add	r2, r3
 801494a:	4b6c      	ldr	r3, [pc, #432]	; (8014afc <tcp_receive+0xf14>)
 801494c:	681b      	ldr	r3, [r3, #0]
 801494e:	1ad3      	subs	r3, r2, r3
 8014950:	2b00      	cmp	r3, #0
 8014952:	dd12      	ble.n	801497a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014954:	4b69      	ldr	r3, [pc, #420]	; (8014afc <tcp_receive+0xf14>)
 8014956:	681b      	ldr	r3, [r3, #0]
 8014958:	b29a      	uxth	r2, r3
 801495a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801495c:	68db      	ldr	r3, [r3, #12]
 801495e:	685b      	ldr	r3, [r3, #4]
 8014960:	b29b      	uxth	r3, r3
 8014962:	1ad3      	subs	r3, r2, r3
 8014964:	b29a      	uxth	r2, r3
 8014966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014968:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801496c:	685a      	ldr	r2, [r3, #4]
 801496e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014970:	891b      	ldrh	r3, [r3, #8]
 8014972:	4619      	mov	r1, r3
 8014974:	4610      	mov	r0, r2
 8014976:	f7fb fc17 	bl	80101a8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801497a:	4b62      	ldr	r3, [pc, #392]	; (8014b04 <tcp_receive+0xf1c>)
 801497c:	881b      	ldrh	r3, [r3, #0]
 801497e:	461a      	mov	r2, r3
 8014980:	4b5e      	ldr	r3, [pc, #376]	; (8014afc <tcp_receive+0xf14>)
 8014982:	681b      	ldr	r3, [r3, #0]
 8014984:	441a      	add	r2, r3
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801498a:	6879      	ldr	r1, [r7, #4]
 801498c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801498e:	440b      	add	r3, r1
 8014990:	1ad3      	subs	r3, r2, r3
 8014992:	2b00      	cmp	r3, #0
 8014994:	f340 8089 	ble.w	8014aaa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	68db      	ldr	r3, [r3, #12]
 801499e:	899b      	ldrh	r3, [r3, #12]
 80149a0:	b29b      	uxth	r3, r3
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7fa f8dc 	bl	800eb60 <lwip_htons>
 80149a8:	4603      	mov	r3, r0
 80149aa:	b2db      	uxtb	r3, r3
 80149ac:	f003 0301 	and.w	r3, r3, #1
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d022      	beq.n	80149fa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80149b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	68db      	ldr	r3, [r3, #12]
 80149ba:	899b      	ldrh	r3, [r3, #12]
 80149bc:	b29b      	uxth	r3, r3
 80149be:	b21b      	sxth	r3, r3
 80149c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80149c4:	b21c      	sxth	r4, r3
 80149c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	68db      	ldr	r3, [r3, #12]
 80149cc:	899b      	ldrh	r3, [r3, #12]
 80149ce:	b29b      	uxth	r3, r3
 80149d0:	4618      	mov	r0, r3
 80149d2:	f7fa f8c5 	bl	800eb60 <lwip_htons>
 80149d6:	4603      	mov	r3, r0
 80149d8:	b2db      	uxtb	r3, r3
 80149da:	b29b      	uxth	r3, r3
 80149dc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80149e0:	b29b      	uxth	r3, r3
 80149e2:	4618      	mov	r0, r3
 80149e4:	f7fa f8bc 	bl	800eb60 <lwip_htons>
 80149e8:	4603      	mov	r3, r0
 80149ea:	b21b      	sxth	r3, r3
 80149ec:	4323      	orrs	r3, r4
 80149ee:	b21a      	sxth	r2, r3
 80149f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	68db      	ldr	r3, [r3, #12]
 80149f6:	b292      	uxth	r2, r2
 80149f8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149fe:	b29a      	uxth	r2, r3
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014a04:	4413      	add	r3, r2
 8014a06:	b299      	uxth	r1, r3
 8014a08:	4b3c      	ldr	r3, [pc, #240]	; (8014afc <tcp_receive+0xf14>)
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	b29a      	uxth	r2, r3
 8014a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	1a8a      	subs	r2, r1, r2
 8014a14:	b292      	uxth	r2, r2
 8014a16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	685a      	ldr	r2, [r3, #4]
 8014a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a20:	681b      	ldr	r3, [r3, #0]
 8014a22:	891b      	ldrh	r3, [r3, #8]
 8014a24:	4619      	mov	r1, r3
 8014a26:	4610      	mov	r0, r2
 8014a28:	f7fb fbbe 	bl	80101a8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	891c      	ldrh	r4, [r3, #8]
 8014a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	68db      	ldr	r3, [r3, #12]
 8014a38:	899b      	ldrh	r3, [r3, #12]
 8014a3a:	b29b      	uxth	r3, r3
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	f7fa f88f 	bl	800eb60 <lwip_htons>
 8014a42:	4603      	mov	r3, r0
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	f003 0303 	and.w	r3, r3, #3
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d001      	beq.n	8014a52 <tcp_receive+0xe6a>
 8014a4e:	2301      	movs	r3, #1
 8014a50:	e000      	b.n	8014a54 <tcp_receive+0xe6c>
 8014a52:	2300      	movs	r3, #0
 8014a54:	4423      	add	r3, r4
 8014a56:	b29a      	uxth	r2, r3
 8014a58:	4b2a      	ldr	r3, [pc, #168]	; (8014b04 <tcp_receive+0xf1c>)
 8014a5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014a5c:	4b29      	ldr	r3, [pc, #164]	; (8014b04 <tcp_receive+0xf1c>)
 8014a5e:	881b      	ldrh	r3, [r3, #0]
 8014a60:	461a      	mov	r2, r3
 8014a62:	4b26      	ldr	r3, [pc, #152]	; (8014afc <tcp_receive+0xf14>)
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	441a      	add	r2, r3
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a6c:	6879      	ldr	r1, [r7, #4]
 8014a6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014a70:	440b      	add	r3, r1
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d019      	beq.n	8014aaa <tcp_receive+0xec2>
 8014a76:	4b24      	ldr	r3, [pc, #144]	; (8014b08 <tcp_receive+0xf20>)
 8014a78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014a7c:	4923      	ldr	r1, [pc, #140]	; (8014b0c <tcp_receive+0xf24>)
 8014a7e:	4824      	ldr	r0, [pc, #144]	; (8014b10 <tcp_receive+0xf28>)
 8014a80:	f005 f970 	bl	8019d64 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014a84:	e011      	b.n	8014aaa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a88:	681b      	ldr	r3, [r3, #0]
 8014a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8014a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	f47f aea4 	bne.w	80147dc <tcp_receive+0xbf4>
 8014a94:	e00a      	b.n	8014aac <tcp_receive+0xec4>
                break;
 8014a96:	bf00      	nop
 8014a98:	e008      	b.n	8014aac <tcp_receive+0xec4>
                break;
 8014a9a:	bf00      	nop
 8014a9c:	e006      	b.n	8014aac <tcp_receive+0xec4>
                  break;
 8014a9e:	bf00      	nop
 8014aa0:	e004      	b.n	8014aac <tcp_receive+0xec4>
                  break;
 8014aa2:	bf00      	nop
 8014aa4:	e002      	b.n	8014aac <tcp_receive+0xec4>
                  break;
 8014aa6:	bf00      	nop
 8014aa8:	e000      	b.n	8014aac <tcp_receive+0xec4>
                break;
 8014aaa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f001 fe8b 	bl	80167c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014ab2:	e003      	b.n	8014abc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014ab4:	6878      	ldr	r0, [r7, #4]
 8014ab6:	f001 fe87 	bl	80167c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014aba:	e01a      	b.n	8014af2 <tcp_receive+0xf0a>
 8014abc:	e019      	b.n	8014af2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014abe:	4b0f      	ldr	r3, [pc, #60]	; (8014afc <tcp_receive+0xf14>)
 8014ac0:	681a      	ldr	r2, [r3, #0]
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ac6:	1ad3      	subs	r3, r2, r3
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	db0a      	blt.n	8014ae2 <tcp_receive+0xefa>
 8014acc:	4b0b      	ldr	r3, [pc, #44]	; (8014afc <tcp_receive+0xf14>)
 8014ace:	681a      	ldr	r2, [r3, #0]
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ad4:	6879      	ldr	r1, [r7, #4]
 8014ad6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014ad8:	440b      	add	r3, r1
 8014ada:	1ad3      	subs	r3, r2, r3
 8014adc:	3301      	adds	r3, #1
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	dd07      	ble.n	8014af2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	8b5b      	ldrh	r3, [r3, #26]
 8014ae6:	f043 0302 	orr.w	r3, r3, #2
 8014aea:	b29a      	uxth	r2, r3
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014af0:	e7ff      	b.n	8014af2 <tcp_receive+0xf0a>
 8014af2:	bf00      	nop
 8014af4:	3750      	adds	r7, #80	; 0x50
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bdb0      	pop	{r4, r5, r7, pc}
 8014afa:	bf00      	nop
 8014afc:	24004158 	.word	0x24004158
 8014b00:	24004138 	.word	0x24004138
 8014b04:	24004162 	.word	0x24004162
 8014b08:	0801c12c 	.word	0x0801c12c
 8014b0c:	0801c4d4 	.word	0x0801c4d4
 8014b10:	0801c178 	.word	0x0801c178

08014b14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014b14:	b480      	push	{r7}
 8014b16:	b083      	sub	sp, #12
 8014b18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014b1a:	4b15      	ldr	r3, [pc, #84]	; (8014b70 <tcp_get_next_optbyte+0x5c>)
 8014b1c:	881b      	ldrh	r3, [r3, #0]
 8014b1e:	1c5a      	adds	r2, r3, #1
 8014b20:	b291      	uxth	r1, r2
 8014b22:	4a13      	ldr	r2, [pc, #76]	; (8014b70 <tcp_get_next_optbyte+0x5c>)
 8014b24:	8011      	strh	r1, [r2, #0]
 8014b26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014b28:	4b12      	ldr	r3, [pc, #72]	; (8014b74 <tcp_get_next_optbyte+0x60>)
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d004      	beq.n	8014b3a <tcp_get_next_optbyte+0x26>
 8014b30:	4b11      	ldr	r3, [pc, #68]	; (8014b78 <tcp_get_next_optbyte+0x64>)
 8014b32:	881b      	ldrh	r3, [r3, #0]
 8014b34:	88fa      	ldrh	r2, [r7, #6]
 8014b36:	429a      	cmp	r2, r3
 8014b38:	d208      	bcs.n	8014b4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014b3a:	4b10      	ldr	r3, [pc, #64]	; (8014b7c <tcp_get_next_optbyte+0x68>)
 8014b3c:	681b      	ldr	r3, [r3, #0]
 8014b3e:	3314      	adds	r3, #20
 8014b40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014b42:	88fb      	ldrh	r3, [r7, #6]
 8014b44:	683a      	ldr	r2, [r7, #0]
 8014b46:	4413      	add	r3, r2
 8014b48:	781b      	ldrb	r3, [r3, #0]
 8014b4a:	e00b      	b.n	8014b64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014b4c:	88fb      	ldrh	r3, [r7, #6]
 8014b4e:	b2da      	uxtb	r2, r3
 8014b50:	4b09      	ldr	r3, [pc, #36]	; (8014b78 <tcp_get_next_optbyte+0x64>)
 8014b52:	881b      	ldrh	r3, [r3, #0]
 8014b54:	b2db      	uxtb	r3, r3
 8014b56:	1ad3      	subs	r3, r2, r3
 8014b58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014b5a:	4b06      	ldr	r3, [pc, #24]	; (8014b74 <tcp_get_next_optbyte+0x60>)
 8014b5c:	681a      	ldr	r2, [r3, #0]
 8014b5e:	797b      	ldrb	r3, [r7, #5]
 8014b60:	4413      	add	r3, r2
 8014b62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014b64:	4618      	mov	r0, r3
 8014b66:	370c      	adds	r7, #12
 8014b68:	46bd      	mov	sp, r7
 8014b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b6e:	4770      	bx	lr
 8014b70:	24004154 	.word	0x24004154
 8014b74:	24004150 	.word	0x24004150
 8014b78:	2400414e 	.word	0x2400414e
 8014b7c:	24004148 	.word	0x24004148

08014b80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b084      	sub	sp, #16
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014b88:	687b      	ldr	r3, [r7, #4]
 8014b8a:	2b00      	cmp	r3, #0
 8014b8c:	d106      	bne.n	8014b9c <tcp_parseopt+0x1c>
 8014b8e:	4b32      	ldr	r3, [pc, #200]	; (8014c58 <tcp_parseopt+0xd8>)
 8014b90:	f240 727d 	movw	r2, #1917	; 0x77d
 8014b94:	4931      	ldr	r1, [pc, #196]	; (8014c5c <tcp_parseopt+0xdc>)
 8014b96:	4832      	ldr	r0, [pc, #200]	; (8014c60 <tcp_parseopt+0xe0>)
 8014b98:	f005 f8e4 	bl	8019d64 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014b9c:	4b31      	ldr	r3, [pc, #196]	; (8014c64 <tcp_parseopt+0xe4>)
 8014b9e:	881b      	ldrh	r3, [r3, #0]
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d055      	beq.n	8014c50 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014ba4:	4b30      	ldr	r3, [pc, #192]	; (8014c68 <tcp_parseopt+0xe8>)
 8014ba6:	2200      	movs	r2, #0
 8014ba8:	801a      	strh	r2, [r3, #0]
 8014baa:	e045      	b.n	8014c38 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014bac:	f7ff ffb2 	bl	8014b14 <tcp_get_next_optbyte>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014bb4:	7bfb      	ldrb	r3, [r7, #15]
 8014bb6:	2b02      	cmp	r3, #2
 8014bb8:	d006      	beq.n	8014bc8 <tcp_parseopt+0x48>
 8014bba:	2b02      	cmp	r3, #2
 8014bbc:	dc2b      	bgt.n	8014c16 <tcp_parseopt+0x96>
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d041      	beq.n	8014c46 <tcp_parseopt+0xc6>
 8014bc2:	2b01      	cmp	r3, #1
 8014bc4:	d127      	bne.n	8014c16 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014bc6:	e037      	b.n	8014c38 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014bc8:	f7ff ffa4 	bl	8014b14 <tcp_get_next_optbyte>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	2b04      	cmp	r3, #4
 8014bd0:	d13b      	bne.n	8014c4a <tcp_parseopt+0xca>
 8014bd2:	4b25      	ldr	r3, [pc, #148]	; (8014c68 <tcp_parseopt+0xe8>)
 8014bd4:	881b      	ldrh	r3, [r3, #0]
 8014bd6:	3301      	adds	r3, #1
 8014bd8:	4a22      	ldr	r2, [pc, #136]	; (8014c64 <tcp_parseopt+0xe4>)
 8014bda:	8812      	ldrh	r2, [r2, #0]
 8014bdc:	4293      	cmp	r3, r2
 8014bde:	da34      	bge.n	8014c4a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014be0:	f7ff ff98 	bl	8014b14 <tcp_get_next_optbyte>
 8014be4:	4603      	mov	r3, r0
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	021b      	lsls	r3, r3, #8
 8014bea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014bec:	f7ff ff92 	bl	8014b14 <tcp_get_next_optbyte>
 8014bf0:	4603      	mov	r3, r0
 8014bf2:	b29a      	uxth	r2, r3
 8014bf4:	89bb      	ldrh	r3, [r7, #12]
 8014bf6:	4313      	orrs	r3, r2
 8014bf8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014bfa:	89bb      	ldrh	r3, [r7, #12]
 8014bfc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014c00:	d804      	bhi.n	8014c0c <tcp_parseopt+0x8c>
 8014c02:	89bb      	ldrh	r3, [r7, #12]
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d001      	beq.n	8014c0c <tcp_parseopt+0x8c>
 8014c08:	89ba      	ldrh	r2, [r7, #12]
 8014c0a:	e001      	b.n	8014c10 <tcp_parseopt+0x90>
 8014c0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014c10:	687b      	ldr	r3, [r7, #4]
 8014c12:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014c14:	e010      	b.n	8014c38 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014c16:	f7ff ff7d 	bl	8014b14 <tcp_get_next_optbyte>
 8014c1a:	4603      	mov	r3, r0
 8014c1c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014c1e:	7afb      	ldrb	r3, [r7, #11]
 8014c20:	2b01      	cmp	r3, #1
 8014c22:	d914      	bls.n	8014c4e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014c24:	7afb      	ldrb	r3, [r7, #11]
 8014c26:	b29a      	uxth	r2, r3
 8014c28:	4b0f      	ldr	r3, [pc, #60]	; (8014c68 <tcp_parseopt+0xe8>)
 8014c2a:	881b      	ldrh	r3, [r3, #0]
 8014c2c:	4413      	add	r3, r2
 8014c2e:	b29b      	uxth	r3, r3
 8014c30:	3b02      	subs	r3, #2
 8014c32:	b29a      	uxth	r2, r3
 8014c34:	4b0c      	ldr	r3, [pc, #48]	; (8014c68 <tcp_parseopt+0xe8>)
 8014c36:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014c38:	4b0b      	ldr	r3, [pc, #44]	; (8014c68 <tcp_parseopt+0xe8>)
 8014c3a:	881a      	ldrh	r2, [r3, #0]
 8014c3c:	4b09      	ldr	r3, [pc, #36]	; (8014c64 <tcp_parseopt+0xe4>)
 8014c3e:	881b      	ldrh	r3, [r3, #0]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d3b3      	bcc.n	8014bac <tcp_parseopt+0x2c>
 8014c44:	e004      	b.n	8014c50 <tcp_parseopt+0xd0>
          return;
 8014c46:	bf00      	nop
 8014c48:	e002      	b.n	8014c50 <tcp_parseopt+0xd0>
            return;
 8014c4a:	bf00      	nop
 8014c4c:	e000      	b.n	8014c50 <tcp_parseopt+0xd0>
            return;
 8014c4e:	bf00      	nop
      }
    }
  }
}
 8014c50:	3710      	adds	r7, #16
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	0801c12c 	.word	0x0801c12c
 8014c5c:	0801c590 	.word	0x0801c590
 8014c60:	0801c178 	.word	0x0801c178
 8014c64:	2400414c 	.word	0x2400414c
 8014c68:	24004154 	.word	0x24004154

08014c6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014c6c:	b480      	push	{r7}
 8014c6e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014c70:	4b05      	ldr	r3, [pc, #20]	; (8014c88 <tcp_trigger_input_pcb_close+0x1c>)
 8014c72:	781b      	ldrb	r3, [r3, #0]
 8014c74:	f043 0310 	orr.w	r3, r3, #16
 8014c78:	b2da      	uxtb	r2, r3
 8014c7a:	4b03      	ldr	r3, [pc, #12]	; (8014c88 <tcp_trigger_input_pcb_close+0x1c>)
 8014c7c:	701a      	strb	r2, [r3, #0]
}
 8014c7e:	bf00      	nop
 8014c80:	46bd      	mov	sp, r7
 8014c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c86:	4770      	bx	lr
 8014c88:	24004165 	.word	0x24004165

08014c8c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014c8c:	b580      	push	{r7, lr}
 8014c8e:	b084      	sub	sp, #16
 8014c90:	af00      	add	r7, sp, #0
 8014c92:	60f8      	str	r0, [r7, #12]
 8014c94:	60b9      	str	r1, [r7, #8]
 8014c96:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d00a      	beq.n	8014cb4 <tcp_route+0x28>
 8014c9e:	68fb      	ldr	r3, [r7, #12]
 8014ca0:	7a1b      	ldrb	r3, [r3, #8]
 8014ca2:	2b00      	cmp	r3, #0
 8014ca4:	d006      	beq.n	8014cb4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014ca6:	68fb      	ldr	r3, [r7, #12]
 8014ca8:	7a1b      	ldrb	r3, [r3, #8]
 8014caa:	4618      	mov	r0, r3
 8014cac:	f7fb f874 	bl	800fd98 <netif_get_by_index>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	e003      	b.n	8014cbc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014cb4:	6878      	ldr	r0, [r7, #4]
 8014cb6:	f003 fb2b 	bl	8018310 <ip4_route>
 8014cba:	4603      	mov	r3, r0
  }
}
 8014cbc:	4618      	mov	r0, r3
 8014cbe:	3710      	adds	r7, #16
 8014cc0:	46bd      	mov	sp, r7
 8014cc2:	bd80      	pop	{r7, pc}

08014cc4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014cc4:	b590      	push	{r4, r7, lr}
 8014cc6:	b087      	sub	sp, #28
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	603b      	str	r3, [r7, #0]
 8014cd0:	4613      	mov	r3, r2
 8014cd2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d105      	bne.n	8014ce6 <tcp_create_segment+0x22>
 8014cda:	4b44      	ldr	r3, [pc, #272]	; (8014dec <tcp_create_segment+0x128>)
 8014cdc:	22a3      	movs	r2, #163	; 0xa3
 8014cde:	4944      	ldr	r1, [pc, #272]	; (8014df0 <tcp_create_segment+0x12c>)
 8014ce0:	4844      	ldr	r0, [pc, #272]	; (8014df4 <tcp_create_segment+0x130>)
 8014ce2:	f005 f83f 	bl	8019d64 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	2b00      	cmp	r3, #0
 8014cea:	d105      	bne.n	8014cf8 <tcp_create_segment+0x34>
 8014cec:	4b3f      	ldr	r3, [pc, #252]	; (8014dec <tcp_create_segment+0x128>)
 8014cee:	22a4      	movs	r2, #164	; 0xa4
 8014cf0:	4941      	ldr	r1, [pc, #260]	; (8014df8 <tcp_create_segment+0x134>)
 8014cf2:	4840      	ldr	r0, [pc, #256]	; (8014df4 <tcp_create_segment+0x130>)
 8014cf4:	f005 f836 	bl	8019d64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014cf8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014cfc:	009b      	lsls	r3, r3, #2
 8014cfe:	b2db      	uxtb	r3, r3
 8014d00:	f003 0304 	and.w	r3, r3, #4
 8014d04:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014d06:	2003      	movs	r0, #3
 8014d08:	f7fa fcba 	bl	800f680 <memp_malloc>
 8014d0c:	6138      	str	r0, [r7, #16]
 8014d0e:	693b      	ldr	r3, [r7, #16]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	d104      	bne.n	8014d1e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014d14:	68b8      	ldr	r0, [r7, #8]
 8014d16:	f7fb fbcd 	bl	80104b4 <pbuf_free>
    return NULL;
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	e061      	b.n	8014de2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014d24:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	2200      	movs	r2, #0
 8014d2a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014d2c:	693b      	ldr	r3, [r7, #16]
 8014d2e:	68ba      	ldr	r2, [r7, #8]
 8014d30:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014d32:	68bb      	ldr	r3, [r7, #8]
 8014d34:	891a      	ldrh	r2, [r3, #8]
 8014d36:	7dfb      	ldrb	r3, [r7, #23]
 8014d38:	b29b      	uxth	r3, r3
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d205      	bcs.n	8014d4a <tcp_create_segment+0x86>
 8014d3e:	4b2b      	ldr	r3, [pc, #172]	; (8014dec <tcp_create_segment+0x128>)
 8014d40:	22b0      	movs	r2, #176	; 0xb0
 8014d42:	492e      	ldr	r1, [pc, #184]	; (8014dfc <tcp_create_segment+0x138>)
 8014d44:	482b      	ldr	r0, [pc, #172]	; (8014df4 <tcp_create_segment+0x130>)
 8014d46:	f005 f80d 	bl	8019d64 <iprintf>
  seg->len = p->tot_len - optlen;
 8014d4a:	68bb      	ldr	r3, [r7, #8]
 8014d4c:	891a      	ldrh	r2, [r3, #8]
 8014d4e:	7dfb      	ldrb	r3, [r7, #23]
 8014d50:	b29b      	uxth	r3, r3
 8014d52:	1ad3      	subs	r3, r2, r3
 8014d54:	b29a      	uxth	r2, r3
 8014d56:	693b      	ldr	r3, [r7, #16]
 8014d58:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014d5a:	2114      	movs	r1, #20
 8014d5c:	68b8      	ldr	r0, [r7, #8]
 8014d5e:	f7fb fb13 	bl	8010388 <pbuf_add_header>
 8014d62:	4603      	mov	r3, r0
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d004      	beq.n	8014d72 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014d68:	6938      	ldr	r0, [r7, #16]
 8014d6a:	f7fc ffec 	bl	8011d46 <tcp_seg_free>
    return NULL;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	e037      	b.n	8014de2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014d72:	693b      	ldr	r3, [r7, #16]
 8014d74:	685b      	ldr	r3, [r3, #4]
 8014d76:	685a      	ldr	r2, [r3, #4]
 8014d78:	693b      	ldr	r3, [r7, #16]
 8014d7a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	8ada      	ldrh	r2, [r3, #22]
 8014d80:	693b      	ldr	r3, [r7, #16]
 8014d82:	68dc      	ldr	r4, [r3, #12]
 8014d84:	4610      	mov	r0, r2
 8014d86:	f7f9 feeb 	bl	800eb60 <lwip_htons>
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	8b1a      	ldrh	r2, [r3, #24]
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	68dc      	ldr	r4, [r3, #12]
 8014d96:	4610      	mov	r0, r2
 8014d98:	f7f9 fee2 	bl	800eb60 <lwip_htons>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014da0:	693b      	ldr	r3, [r7, #16]
 8014da2:	68dc      	ldr	r4, [r3, #12]
 8014da4:	6838      	ldr	r0, [r7, #0]
 8014da6:	f7f9 fef0 	bl	800eb8a <lwip_htonl>
 8014daa:	4603      	mov	r3, r0
 8014dac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014dae:	7dfb      	ldrb	r3, [r7, #23]
 8014db0:	089b      	lsrs	r3, r3, #2
 8014db2:	b2db      	uxtb	r3, r3
 8014db4:	b29b      	uxth	r3, r3
 8014db6:	3305      	adds	r3, #5
 8014db8:	b29b      	uxth	r3, r3
 8014dba:	031b      	lsls	r3, r3, #12
 8014dbc:	b29a      	uxth	r2, r3
 8014dbe:	79fb      	ldrb	r3, [r7, #7]
 8014dc0:	b29b      	uxth	r3, r3
 8014dc2:	4313      	orrs	r3, r2
 8014dc4:	b29a      	uxth	r2, r3
 8014dc6:	693b      	ldr	r3, [r7, #16]
 8014dc8:	68dc      	ldr	r4, [r3, #12]
 8014dca:	4610      	mov	r0, r2
 8014dcc:	f7f9 fec8 	bl	800eb60 <lwip_htons>
 8014dd0:	4603      	mov	r3, r0
 8014dd2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014dd4:	693b      	ldr	r3, [r7, #16]
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	2200      	movs	r2, #0
 8014dda:	749a      	strb	r2, [r3, #18]
 8014ddc:	2200      	movs	r2, #0
 8014dde:	74da      	strb	r2, [r3, #19]
  return seg;
 8014de0:	693b      	ldr	r3, [r7, #16]
}
 8014de2:	4618      	mov	r0, r3
 8014de4:	371c      	adds	r7, #28
 8014de6:	46bd      	mov	sp, r7
 8014de8:	bd90      	pop	{r4, r7, pc}
 8014dea:	bf00      	nop
 8014dec:	0801c5ac 	.word	0x0801c5ac
 8014df0:	0801c5e0 	.word	0x0801c5e0
 8014df4:	0801c600 	.word	0x0801c600
 8014df8:	0801c628 	.word	0x0801c628
 8014dfc:	0801c64c 	.word	0x0801c64c

08014e00 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b086      	sub	sp, #24
 8014e04:	af00      	add	r7, sp, #0
 8014e06:	607b      	str	r3, [r7, #4]
 8014e08:	4603      	mov	r3, r0
 8014e0a:	73fb      	strb	r3, [r7, #15]
 8014e0c:	460b      	mov	r3, r1
 8014e0e:	81bb      	strh	r3, [r7, #12]
 8014e10:	4613      	mov	r3, r2
 8014e12:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8014e14:	89bb      	ldrh	r3, [r7, #12]
 8014e16:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d105      	bne.n	8014e2a <tcp_pbuf_prealloc+0x2a>
 8014e1e:	4b30      	ldr	r3, [pc, #192]	; (8014ee0 <tcp_pbuf_prealloc+0xe0>)
 8014e20:	22e8      	movs	r2, #232	; 0xe8
 8014e22:	4930      	ldr	r1, [pc, #192]	; (8014ee4 <tcp_pbuf_prealloc+0xe4>)
 8014e24:	4830      	ldr	r0, [pc, #192]	; (8014ee8 <tcp_pbuf_prealloc+0xe8>)
 8014e26:	f004 ff9d 	bl	8019d64 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8014e2a:	6a3b      	ldr	r3, [r7, #32]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d105      	bne.n	8014e3c <tcp_pbuf_prealloc+0x3c>
 8014e30:	4b2b      	ldr	r3, [pc, #172]	; (8014ee0 <tcp_pbuf_prealloc+0xe0>)
 8014e32:	22e9      	movs	r2, #233	; 0xe9
 8014e34:	492d      	ldr	r1, [pc, #180]	; (8014eec <tcp_pbuf_prealloc+0xec>)
 8014e36:	482c      	ldr	r0, [pc, #176]	; (8014ee8 <tcp_pbuf_prealloc+0xe8>)
 8014e38:	f004 ff94 	bl	8019d64 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8014e3c:	89ba      	ldrh	r2, [r7, #12]
 8014e3e:	897b      	ldrh	r3, [r7, #10]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d221      	bcs.n	8014e88 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014e44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014e48:	f003 0302 	and.w	r3, r3, #2
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d111      	bne.n	8014e74 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8014e50:	6a3b      	ldr	r3, [r7, #32]
 8014e52:	8b5b      	ldrh	r3, [r3, #26]
 8014e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d115      	bne.n	8014e88 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8014e5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d007      	beq.n	8014e74 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8014e64:	6a3b      	ldr	r3, [r7, #32]
 8014e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d103      	bne.n	8014e74 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8014e6c:	6a3b      	ldr	r3, [r7, #32]
 8014e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d009      	beq.n	8014e88 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8014e74:	89bb      	ldrh	r3, [r7, #12]
 8014e76:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8014e7a:	f023 0203 	bic.w	r2, r3, #3
 8014e7e:	897b      	ldrh	r3, [r7, #10]
 8014e80:	4293      	cmp	r3, r2
 8014e82:	bf28      	it	cs
 8014e84:	4613      	movcs	r3, r2
 8014e86:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8014e88:	8af9      	ldrh	r1, [r7, #22]
 8014e8a:	7bfb      	ldrb	r3, [r7, #15]
 8014e8c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014e90:	4618      	mov	r0, r3
 8014e92:	f7fb f82b 	bl	800feec <pbuf_alloc>
 8014e96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014e98:	693b      	ldr	r3, [r7, #16]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d101      	bne.n	8014ea2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8014e9e:	2300      	movs	r3, #0
 8014ea0:	e019      	b.n	8014ed6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d006      	beq.n	8014eb8 <tcp_pbuf_prealloc+0xb8>
 8014eaa:	4b0d      	ldr	r3, [pc, #52]	; (8014ee0 <tcp_pbuf_prealloc+0xe0>)
 8014eac:	f240 120b 	movw	r2, #267	; 0x10b
 8014eb0:	490f      	ldr	r1, [pc, #60]	; (8014ef0 <tcp_pbuf_prealloc+0xf0>)
 8014eb2:	480d      	ldr	r0, [pc, #52]	; (8014ee8 <tcp_pbuf_prealloc+0xe8>)
 8014eb4:	f004 ff56 	bl	8019d64 <iprintf>
  *oversize = p->len - length;
 8014eb8:	693b      	ldr	r3, [r7, #16]
 8014eba:	895a      	ldrh	r2, [r3, #10]
 8014ebc:	89bb      	ldrh	r3, [r7, #12]
 8014ebe:	1ad3      	subs	r3, r2, r3
 8014ec0:	b29a      	uxth	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8014ec6:	693b      	ldr	r3, [r7, #16]
 8014ec8:	89ba      	ldrh	r2, [r7, #12]
 8014eca:	811a      	strh	r2, [r3, #8]
 8014ecc:	693b      	ldr	r3, [r7, #16]
 8014ece:	891a      	ldrh	r2, [r3, #8]
 8014ed0:	693b      	ldr	r3, [r7, #16]
 8014ed2:	815a      	strh	r2, [r3, #10]
  return p;
 8014ed4:	693b      	ldr	r3, [r7, #16]
}
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	3718      	adds	r7, #24
 8014eda:	46bd      	mov	sp, r7
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	0801c5ac 	.word	0x0801c5ac
 8014ee4:	0801c664 	.word	0x0801c664
 8014ee8:	0801c600 	.word	0x0801c600
 8014eec:	0801c688 	.word	0x0801c688
 8014ef0:	0801c6a8 	.word	0x0801c6a8

08014ef4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b082      	sub	sp, #8
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	460b      	mov	r3, r1
 8014efe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d106      	bne.n	8014f14 <tcp_write_checks+0x20>
 8014f06:	4b33      	ldr	r3, [pc, #204]	; (8014fd4 <tcp_write_checks+0xe0>)
 8014f08:	f240 1233 	movw	r2, #307	; 0x133
 8014f0c:	4932      	ldr	r1, [pc, #200]	; (8014fd8 <tcp_write_checks+0xe4>)
 8014f0e:	4833      	ldr	r0, [pc, #204]	; (8014fdc <tcp_write_checks+0xe8>)
 8014f10:	f004 ff28 	bl	8019d64 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	7d1b      	ldrb	r3, [r3, #20]
 8014f18:	2b04      	cmp	r3, #4
 8014f1a:	d00e      	beq.n	8014f3a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8014f20:	2b07      	cmp	r3, #7
 8014f22:	d00a      	beq.n	8014f3a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8014f28:	2b02      	cmp	r3, #2
 8014f2a:	d006      	beq.n	8014f3a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8014f30:	2b03      	cmp	r3, #3
 8014f32:	d002      	beq.n	8014f3a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8014f34:	f06f 030a 	mvn.w	r3, #10
 8014f38:	e048      	b.n	8014fcc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8014f3a:	887b      	ldrh	r3, [r7, #2]
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d101      	bne.n	8014f44 <tcp_write_checks+0x50>
    return ERR_OK;
 8014f40:	2300      	movs	r3, #0
 8014f42:	e043      	b.n	8014fcc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8014f4a:	887a      	ldrh	r2, [r7, #2]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d909      	bls.n	8014f64 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	8b5b      	ldrh	r3, [r3, #26]
 8014f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f62:	e033      	b.n	8014fcc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f6a:	2b08      	cmp	r3, #8
 8014f6c:	d909      	bls.n	8014f82 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	8b5b      	ldrh	r3, [r3, #26]
 8014f72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f76:	b29a      	uxth	r2, r3
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8014f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f80:	e024      	b.n	8014fcc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d00f      	beq.n	8014fac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d11a      	bne.n	8014fca <tcp_write_checks+0xd6>
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d116      	bne.n	8014fca <tcp_write_checks+0xd6>
 8014f9c:	4b0d      	ldr	r3, [pc, #52]	; (8014fd4 <tcp_write_checks+0xe0>)
 8014f9e:	f240 1255 	movw	r2, #341	; 0x155
 8014fa2:	490f      	ldr	r1, [pc, #60]	; (8014fe0 <tcp_write_checks+0xec>)
 8014fa4:	480d      	ldr	r0, [pc, #52]	; (8014fdc <tcp_write_checks+0xe8>)
 8014fa6:	f004 fedd 	bl	8019d64 <iprintf>
 8014faa:	e00e      	b.n	8014fca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d103      	bne.n	8014fbc <tcp_write_checks+0xc8>
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d006      	beq.n	8014fca <tcp_write_checks+0xd6>
 8014fbc:	4b05      	ldr	r3, [pc, #20]	; (8014fd4 <tcp_write_checks+0xe0>)
 8014fbe:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8014fc2:	4908      	ldr	r1, [pc, #32]	; (8014fe4 <tcp_write_checks+0xf0>)
 8014fc4:	4805      	ldr	r0, [pc, #20]	; (8014fdc <tcp_write_checks+0xe8>)
 8014fc6:	f004 fecd 	bl	8019d64 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8014fca:	2300      	movs	r3, #0
}
 8014fcc:	4618      	mov	r0, r3
 8014fce:	3708      	adds	r7, #8
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	bd80      	pop	{r7, pc}
 8014fd4:	0801c5ac 	.word	0x0801c5ac
 8014fd8:	0801c6bc 	.word	0x0801c6bc
 8014fdc:	0801c600 	.word	0x0801c600
 8014fe0:	0801c6dc 	.word	0x0801c6dc
 8014fe4:	0801c718 	.word	0x0801c718

08014fe8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8014fe8:	b590      	push	{r4, r7, lr}
 8014fea:	b09b      	sub	sp, #108	; 0x6c
 8014fec:	af04      	add	r7, sp, #16
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	4611      	mov	r1, r2
 8014ff4:	461a      	mov	r2, r3
 8014ff6:	460b      	mov	r3, r1
 8014ff8:	80fb      	strh	r3, [r7, #6]
 8014ffa:	4613      	mov	r3, r2
 8014ffc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8014ffe:	2300      	movs	r3, #0
 8015000:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015002:	2300      	movs	r3, #0
 8015004:	653b      	str	r3, [r7, #80]	; 0x50
 8015006:	2300      	movs	r3, #0
 8015008:	64fb      	str	r3, [r7, #76]	; 0x4c
 801500a:	2300      	movs	r3, #0
 801500c:	64bb      	str	r3, [r7, #72]	; 0x48
 801500e:	2300      	movs	r3, #0
 8015010:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015012:	2300      	movs	r3, #0
 8015014:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015018:	2300      	movs	r3, #0
 801501a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801501e:	2300      	movs	r3, #0
 8015020:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015022:	2300      	movs	r3, #0
 8015024:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015026:	2300      	movs	r3, #0
 8015028:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d109      	bne.n	8015044 <tcp_write+0x5c>
 8015030:	4ba4      	ldr	r3, [pc, #656]	; (80152c4 <tcp_write+0x2dc>)
 8015032:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015036:	49a4      	ldr	r1, [pc, #656]	; (80152c8 <tcp_write+0x2e0>)
 8015038:	48a4      	ldr	r0, [pc, #656]	; (80152cc <tcp_write+0x2e4>)
 801503a:	f004 fe93 	bl	8019d64 <iprintf>
 801503e:	f06f 030f 	mvn.w	r3, #15
 8015042:	e32a      	b.n	801569a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801504a:	085b      	lsrs	r3, r3, #1
 801504c:	b29a      	uxth	r2, r3
 801504e:	68fb      	ldr	r3, [r7, #12]
 8015050:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015052:	4293      	cmp	r3, r2
 8015054:	bf28      	it	cs
 8015056:	4613      	movcs	r3, r2
 8015058:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801505a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801505c:	2b00      	cmp	r3, #0
 801505e:	d102      	bne.n	8015066 <tcp_write+0x7e>
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015064:	e000      	b.n	8015068 <tcp_write+0x80>
 8015066:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015068:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801506a:	68bb      	ldr	r3, [r7, #8]
 801506c:	2b00      	cmp	r3, #0
 801506e:	d109      	bne.n	8015084 <tcp_write+0x9c>
 8015070:	4b94      	ldr	r3, [pc, #592]	; (80152c4 <tcp_write+0x2dc>)
 8015072:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015076:	4996      	ldr	r1, [pc, #600]	; (80152d0 <tcp_write+0x2e8>)
 8015078:	4894      	ldr	r0, [pc, #592]	; (80152cc <tcp_write+0x2e4>)
 801507a:	f004 fe73 	bl	8019d64 <iprintf>
 801507e:	f06f 030f 	mvn.w	r3, #15
 8015082:	e30a      	b.n	801569a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015084:	88fb      	ldrh	r3, [r7, #6]
 8015086:	4619      	mov	r1, r3
 8015088:	68f8      	ldr	r0, [r7, #12]
 801508a:	f7ff ff33 	bl	8014ef4 <tcp_write_checks>
 801508e:	4603      	mov	r3, r0
 8015090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015094:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015098:	2b00      	cmp	r3, #0
 801509a:	d002      	beq.n	80150a2 <tcp_write+0xba>
    return err;
 801509c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80150a0:	e2fb      	b.n	801569a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80150a2:	68fb      	ldr	r3, [r7, #12]
 80150a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80150a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80150ac:	2300      	movs	r3, #0
 80150ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150b6:	2b00      	cmp	r3, #0
 80150b8:	f000 80f6 	beq.w	80152a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80150bc:	68fb      	ldr	r3, [r7, #12]
 80150be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80150c0:	653b      	str	r3, [r7, #80]	; 0x50
 80150c2:	e002      	b.n	80150ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80150c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80150ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d1f8      	bne.n	80150c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80150d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150d4:	7a9b      	ldrb	r3, [r3, #10]
 80150d6:	009b      	lsls	r3, r3, #2
 80150d8:	b29b      	uxth	r3, r3
 80150da:	f003 0304 	and.w	r3, r3, #4
 80150de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80150e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80150e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80150e4:	891b      	ldrh	r3, [r3, #8]
 80150e6:	4619      	mov	r1, r3
 80150e8:	8c3b      	ldrh	r3, [r7, #32]
 80150ea:	440b      	add	r3, r1
 80150ec:	429a      	cmp	r2, r3
 80150ee:	da06      	bge.n	80150fe <tcp_write+0x116>
 80150f0:	4b74      	ldr	r3, [pc, #464]	; (80152c4 <tcp_write+0x2dc>)
 80150f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80150f6:	4977      	ldr	r1, [pc, #476]	; (80152d4 <tcp_write+0x2ec>)
 80150f8:	4874      	ldr	r0, [pc, #464]	; (80152cc <tcp_write+0x2e4>)
 80150fa:	f004 fe33 	bl	8019d64 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80150fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015100:	891a      	ldrh	r2, [r3, #8]
 8015102:	8c3b      	ldrh	r3, [r7, #32]
 8015104:	4413      	add	r3, r2
 8015106:	b29b      	uxth	r3, r3
 8015108:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801510a:	1ad3      	subs	r3, r2, r3
 801510c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015114:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015116:	8a7b      	ldrh	r3, [r7, #18]
 8015118:	2b00      	cmp	r3, #0
 801511a:	d026      	beq.n	801516a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801511c:	8a7b      	ldrh	r3, [r7, #18]
 801511e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015120:	429a      	cmp	r2, r3
 8015122:	d206      	bcs.n	8015132 <tcp_write+0x14a>
 8015124:	4b67      	ldr	r3, [pc, #412]	; (80152c4 <tcp_write+0x2dc>)
 8015126:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801512a:	496b      	ldr	r1, [pc, #428]	; (80152d8 <tcp_write+0x2f0>)
 801512c:	4867      	ldr	r0, [pc, #412]	; (80152cc <tcp_write+0x2e4>)
 801512e:	f004 fe19 	bl	8019d64 <iprintf>
      seg = last_unsent;
 8015132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015134:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015136:	8a7b      	ldrh	r3, [r7, #18]
 8015138:	88fa      	ldrh	r2, [r7, #6]
 801513a:	4293      	cmp	r3, r2
 801513c:	bf28      	it	cs
 801513e:	4613      	movcs	r3, r2
 8015140:	b29b      	uxth	r3, r3
 8015142:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015144:	4293      	cmp	r3, r2
 8015146:	bf28      	it	cs
 8015148:	4613      	movcs	r3, r2
 801514a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801514c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015150:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015152:	4413      	add	r3, r2
 8015154:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015158:	8a7a      	ldrh	r2, [r7, #18]
 801515a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801515c:	1ad3      	subs	r3, r2, r3
 801515e:	b29b      	uxth	r3, r3
 8015160:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015162:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015164:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015166:	1ad3      	subs	r3, r2, r3
 8015168:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801516a:	8a7b      	ldrh	r3, [r7, #18]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d00b      	beq.n	8015188 <tcp_write+0x1a0>
 8015170:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015174:	88fb      	ldrh	r3, [r7, #6]
 8015176:	429a      	cmp	r2, r3
 8015178:	d006      	beq.n	8015188 <tcp_write+0x1a0>
 801517a:	4b52      	ldr	r3, [pc, #328]	; (80152c4 <tcp_write+0x2dc>)
 801517c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015180:	4956      	ldr	r1, [pc, #344]	; (80152dc <tcp_write+0x2f4>)
 8015182:	4852      	ldr	r0, [pc, #328]	; (80152cc <tcp_write+0x2e4>)
 8015184:	f004 fdee 	bl	8019d64 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015188:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801518c:	88fb      	ldrh	r3, [r7, #6]
 801518e:	429a      	cmp	r2, r3
 8015190:	f080 8167 	bcs.w	8015462 <tcp_write+0x47a>
 8015194:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015196:	2b00      	cmp	r3, #0
 8015198:	f000 8163 	beq.w	8015462 <tcp_write+0x47a>
 801519c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801519e:	891b      	ldrh	r3, [r3, #8]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	f000 815e 	beq.w	8015462 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80151a6:	88fa      	ldrh	r2, [r7, #6]
 80151a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151ac:	1ad2      	subs	r2, r2, r3
 80151ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80151b0:	4293      	cmp	r3, r2
 80151b2:	bfa8      	it	ge
 80151b4:	4613      	movge	r3, r2
 80151b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80151b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80151ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80151bc:	797b      	ldrb	r3, [r7, #5]
 80151be:	f003 0301 	and.w	r3, r3, #1
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d027      	beq.n	8015216 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80151c6:	f107 0012 	add.w	r0, r7, #18
 80151ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80151cc:	8bf9      	ldrh	r1, [r7, #30]
 80151ce:	2301      	movs	r3, #1
 80151d0:	9302      	str	r3, [sp, #8]
 80151d2:	797b      	ldrb	r3, [r7, #5]
 80151d4:	9301      	str	r3, [sp, #4]
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	9300      	str	r3, [sp, #0]
 80151da:	4603      	mov	r3, r0
 80151dc:	2000      	movs	r0, #0
 80151de:	f7ff fe0f 	bl	8014e00 <tcp_pbuf_prealloc>
 80151e2:	6578      	str	r0, [r7, #84]	; 0x54
 80151e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	f000 8225 	beq.w	8015636 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80151ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80151ee:	6858      	ldr	r0, [r3, #4]
 80151f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80151f4:	68ba      	ldr	r2, [r7, #8]
 80151f6:	4413      	add	r3, r2
 80151f8:	8bfa      	ldrh	r2, [r7, #30]
 80151fa:	4619      	mov	r1, r3
 80151fc:	f004 fd41 	bl	8019c82 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015200:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015202:	f7fb f9e5 	bl	80105d0 <pbuf_clen>
 8015206:	4603      	mov	r3, r0
 8015208:	461a      	mov	r2, r3
 801520a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801520e:	4413      	add	r3, r2
 8015210:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015214:	e041      	b.n	801529a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015218:	685b      	ldr	r3, [r3, #4]
 801521a:	637b      	str	r3, [r7, #52]	; 0x34
 801521c:	e002      	b.n	8015224 <tcp_write+0x23c>
 801521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	637b      	str	r3, [r7, #52]	; 0x34
 8015224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	2b00      	cmp	r3, #0
 801522a:	d1f8      	bne.n	801521e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801522c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801522e:	7b1b      	ldrb	r3, [r3, #12]
 8015230:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015234:	2b00      	cmp	r3, #0
 8015236:	d115      	bne.n	8015264 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801523a:	685b      	ldr	r3, [r3, #4]
 801523c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801523e:	8952      	ldrh	r2, [r2, #10]
 8015240:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015242:	68ba      	ldr	r2, [r7, #8]
 8015244:	429a      	cmp	r2, r3
 8015246:	d10d      	bne.n	8015264 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801524c:	2b00      	cmp	r3, #0
 801524e:	d006      	beq.n	801525e <tcp_write+0x276>
 8015250:	4b1c      	ldr	r3, [pc, #112]	; (80152c4 <tcp_write+0x2dc>)
 8015252:	f240 2231 	movw	r2, #561	; 0x231
 8015256:	4922      	ldr	r1, [pc, #136]	; (80152e0 <tcp_write+0x2f8>)
 8015258:	481c      	ldr	r0, [pc, #112]	; (80152cc <tcp_write+0x2e4>)
 801525a:	f004 fd83 	bl	8019d64 <iprintf>
          extendlen = seglen;
 801525e:	8bfb      	ldrh	r3, [r7, #30]
 8015260:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015262:	e01a      	b.n	801529a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015264:	8bfb      	ldrh	r3, [r7, #30]
 8015266:	2201      	movs	r2, #1
 8015268:	4619      	mov	r1, r3
 801526a:	2000      	movs	r0, #0
 801526c:	f7fa fe3e 	bl	800feec <pbuf_alloc>
 8015270:	6578      	str	r0, [r7, #84]	; 0x54
 8015272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015274:	2b00      	cmp	r3, #0
 8015276:	f000 81e0 	beq.w	801563a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801527a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801527e:	68ba      	ldr	r2, [r7, #8]
 8015280:	441a      	add	r2, r3
 8015282:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015284:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015286:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015288:	f7fb f9a2 	bl	80105d0 <pbuf_clen>
 801528c:	4603      	mov	r3, r0
 801528e:	461a      	mov	r2, r3
 8015290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015294:	4413      	add	r3, r2
 8015296:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801529a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801529e:	8bfb      	ldrh	r3, [r7, #30]
 80152a0:	4413      	add	r3, r2
 80152a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80152a6:	e0dc      	b.n	8015462 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80152a8:	68fb      	ldr	r3, [r7, #12]
 80152aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	f000 80d7 	beq.w	8015462 <tcp_write+0x47a>
 80152b4:	4b03      	ldr	r3, [pc, #12]	; (80152c4 <tcp_write+0x2dc>)
 80152b6:	f240 224a 	movw	r2, #586	; 0x24a
 80152ba:	490a      	ldr	r1, [pc, #40]	; (80152e4 <tcp_write+0x2fc>)
 80152bc:	4803      	ldr	r0, [pc, #12]	; (80152cc <tcp_write+0x2e4>)
 80152be:	f004 fd51 	bl	8019d64 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80152c2:	e0ce      	b.n	8015462 <tcp_write+0x47a>
 80152c4:	0801c5ac 	.word	0x0801c5ac
 80152c8:	0801c74c 	.word	0x0801c74c
 80152cc:	0801c600 	.word	0x0801c600
 80152d0:	0801c764 	.word	0x0801c764
 80152d4:	0801c798 	.word	0x0801c798
 80152d8:	0801c7b0 	.word	0x0801c7b0
 80152dc:	0801c7d0 	.word	0x0801c7d0
 80152e0:	0801c7f0 	.word	0x0801c7f0
 80152e4:	0801c81c 	.word	0x0801c81c
    struct pbuf *p;
    u16_t left = len - pos;
 80152e8:	88fa      	ldrh	r2, [r7, #6]
 80152ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152ee:	1ad3      	subs	r3, r2, r3
 80152f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80152f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80152f6:	b29b      	uxth	r3, r3
 80152f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80152fa:	1ad3      	subs	r3, r2, r3
 80152fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80152fe:	8b7a      	ldrh	r2, [r7, #26]
 8015300:	8bbb      	ldrh	r3, [r7, #28]
 8015302:	4293      	cmp	r3, r2
 8015304:	bf28      	it	cs
 8015306:	4613      	movcs	r3, r2
 8015308:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801530a:	797b      	ldrb	r3, [r7, #5]
 801530c:	f003 0301 	and.w	r3, r3, #1
 8015310:	2b00      	cmp	r3, #0
 8015312:	d036      	beq.n	8015382 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015314:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015318:	b29a      	uxth	r2, r3
 801531a:	8b3b      	ldrh	r3, [r7, #24]
 801531c:	4413      	add	r3, r2
 801531e:	b299      	uxth	r1, r3
 8015320:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015322:	2b00      	cmp	r3, #0
 8015324:	bf0c      	ite	eq
 8015326:	2301      	moveq	r3, #1
 8015328:	2300      	movne	r3, #0
 801532a:	b2db      	uxtb	r3, r3
 801532c:	f107 0012 	add.w	r0, r7, #18
 8015330:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015332:	9302      	str	r3, [sp, #8]
 8015334:	797b      	ldrb	r3, [r7, #5]
 8015336:	9301      	str	r3, [sp, #4]
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	9300      	str	r3, [sp, #0]
 801533c:	4603      	mov	r3, r0
 801533e:	2036      	movs	r0, #54	; 0x36
 8015340:	f7ff fd5e 	bl	8014e00 <tcp_pbuf_prealloc>
 8015344:	6338      	str	r0, [r7, #48]	; 0x30
 8015346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015348:	2b00      	cmp	r3, #0
 801534a:	f000 8178 	beq.w	801563e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015350:	895b      	ldrh	r3, [r3, #10]
 8015352:	8b3a      	ldrh	r2, [r7, #24]
 8015354:	429a      	cmp	r2, r3
 8015356:	d906      	bls.n	8015366 <tcp_write+0x37e>
 8015358:	4b8c      	ldr	r3, [pc, #560]	; (801558c <tcp_write+0x5a4>)
 801535a:	f240 2266 	movw	r2, #614	; 0x266
 801535e:	498c      	ldr	r1, [pc, #560]	; (8015590 <tcp_write+0x5a8>)
 8015360:	488c      	ldr	r0, [pc, #560]	; (8015594 <tcp_write+0x5ac>)
 8015362:	f004 fcff 	bl	8019d64 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8015366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015368:	685a      	ldr	r2, [r3, #4]
 801536a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801536e:	18d0      	adds	r0, r2, r3
 8015370:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015374:	68ba      	ldr	r2, [r7, #8]
 8015376:	4413      	add	r3, r2
 8015378:	8b3a      	ldrh	r2, [r7, #24]
 801537a:	4619      	mov	r1, r3
 801537c:	f004 fc81 	bl	8019c82 <memcpy>
 8015380:	e02f      	b.n	80153e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015382:	8a7b      	ldrh	r3, [r7, #18]
 8015384:	2b00      	cmp	r3, #0
 8015386:	d006      	beq.n	8015396 <tcp_write+0x3ae>
 8015388:	4b80      	ldr	r3, [pc, #512]	; (801558c <tcp_write+0x5a4>)
 801538a:	f240 2271 	movw	r2, #625	; 0x271
 801538e:	4982      	ldr	r1, [pc, #520]	; (8015598 <tcp_write+0x5b0>)
 8015390:	4880      	ldr	r0, [pc, #512]	; (8015594 <tcp_write+0x5ac>)
 8015392:	f004 fce7 	bl	8019d64 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015396:	8b3b      	ldrh	r3, [r7, #24]
 8015398:	2201      	movs	r2, #1
 801539a:	4619      	mov	r1, r3
 801539c:	2036      	movs	r0, #54	; 0x36
 801539e:	f7fa fda5 	bl	800feec <pbuf_alloc>
 80153a2:	6178      	str	r0, [r7, #20]
 80153a4:	697b      	ldr	r3, [r7, #20]
 80153a6:	2b00      	cmp	r3, #0
 80153a8:	f000 814b 	beq.w	8015642 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80153ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153b0:	68ba      	ldr	r2, [r7, #8]
 80153b2:	441a      	add	r2, r3
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80153b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80153bc:	b29b      	uxth	r3, r3
 80153be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80153c2:	4619      	mov	r1, r3
 80153c4:	2036      	movs	r0, #54	; 0x36
 80153c6:	f7fa fd91 	bl	800feec <pbuf_alloc>
 80153ca:	6338      	str	r0, [r7, #48]	; 0x30
 80153cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d103      	bne.n	80153da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80153d2:	6978      	ldr	r0, [r7, #20]
 80153d4:	f7fb f86e 	bl	80104b4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80153d8:	e136      	b.n	8015648 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80153da:	6979      	ldr	r1, [r7, #20]
 80153dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153de:	f7fb f937 	bl	8010650 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80153e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153e4:	f7fb f8f4 	bl	80105d0 <pbuf_clen>
 80153e8:	4603      	mov	r3, r0
 80153ea:	461a      	mov	r2, r3
 80153ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80153f0:	4413      	add	r3, r2
 80153f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80153f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80153fa:	2b09      	cmp	r3, #9
 80153fc:	d903      	bls.n	8015406 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80153fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015400:	f7fb f858 	bl	80104b4 <pbuf_free>
      goto memerr;
 8015404:	e120      	b.n	8015648 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801540a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801540e:	441a      	add	r2, r3
 8015410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015414:	9300      	str	r3, [sp, #0]
 8015416:	4613      	mov	r3, r2
 8015418:	2200      	movs	r2, #0
 801541a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801541c:	68f8      	ldr	r0, [r7, #12]
 801541e:	f7ff fc51 	bl	8014cc4 <tcp_create_segment>
 8015422:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015426:	2b00      	cmp	r3, #0
 8015428:	f000 810d 	beq.w	8015646 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801542c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801542e:	2b00      	cmp	r3, #0
 8015430:	d102      	bne.n	8015438 <tcp_write+0x450>
      queue = seg;
 8015432:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015434:	647b      	str	r3, [r7, #68]	; 0x44
 8015436:	e00c      	b.n	8015452 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801543a:	2b00      	cmp	r3, #0
 801543c:	d106      	bne.n	801544c <tcp_write+0x464>
 801543e:	4b53      	ldr	r3, [pc, #332]	; (801558c <tcp_write+0x5a4>)
 8015440:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015444:	4955      	ldr	r1, [pc, #340]	; (801559c <tcp_write+0x5b4>)
 8015446:	4853      	ldr	r0, [pc, #332]	; (8015594 <tcp_write+0x5ac>)
 8015448:	f004 fc8c 	bl	8019d64 <iprintf>
      prev_seg->next = seg;
 801544c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801544e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015450:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015454:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015456:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801545a:	8b3b      	ldrh	r3, [r7, #24]
 801545c:	4413      	add	r3, r2
 801545e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015462:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015466:	88fb      	ldrh	r3, [r7, #6]
 8015468:	429a      	cmp	r2, r3
 801546a:	f4ff af3d 	bcc.w	80152e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801546e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015470:	2b00      	cmp	r3, #0
 8015472:	d02c      	beq.n	80154ce <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015474:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015476:	685b      	ldr	r3, [r3, #4]
 8015478:	62fb      	str	r3, [r7, #44]	; 0x2c
 801547a:	e01e      	b.n	80154ba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801547e:	891a      	ldrh	r2, [r3, #8]
 8015480:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015482:	4413      	add	r3, r2
 8015484:	b29a      	uxth	r2, r3
 8015486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015488:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	2b00      	cmp	r3, #0
 8015490:	d110      	bne.n	80154b4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015498:	8952      	ldrh	r2, [r2, #10]
 801549a:	4413      	add	r3, r2
 801549c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801549e:	68b9      	ldr	r1, [r7, #8]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f004 fbee 	bl	8019c82 <memcpy>
        p->len += oversize_used;
 80154a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154a8:	895a      	ldrh	r2, [r3, #10]
 80154aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154ac:	4413      	add	r3, r2
 80154ae:	b29a      	uxth	r2, r3
 80154b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80154b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80154ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d1dd      	bne.n	801547c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80154c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154c2:	891a      	ldrh	r2, [r3, #8]
 80154c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80154c6:	4413      	add	r3, r2
 80154c8:	b29a      	uxth	r2, r3
 80154ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80154ce:	8a7a      	ldrh	r2, [r7, #18]
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80154d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d018      	beq.n	801550e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80154dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d106      	bne.n	80154f0 <tcp_write+0x508>
 80154e2:	4b2a      	ldr	r3, [pc, #168]	; (801558c <tcp_write+0x5a4>)
 80154e4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80154e8:	492d      	ldr	r1, [pc, #180]	; (80155a0 <tcp_write+0x5b8>)
 80154ea:	482a      	ldr	r0, [pc, #168]	; (8015594 <tcp_write+0x5ac>)
 80154ec:	f004 fc3a 	bl	8019d64 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80154f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154f2:	685b      	ldr	r3, [r3, #4]
 80154f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7fb f8aa 	bl	8010650 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80154fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154fe:	891a      	ldrh	r2, [r3, #8]
 8015500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015502:	891b      	ldrh	r3, [r3, #8]
 8015504:	4413      	add	r3, r2
 8015506:	b29a      	uxth	r2, r3
 8015508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801550a:	811a      	strh	r2, [r3, #8]
 801550c:	e037      	b.n	801557e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801550e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015510:	2b00      	cmp	r3, #0
 8015512:	d034      	beq.n	801557e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015516:	2b00      	cmp	r3, #0
 8015518:	d003      	beq.n	8015522 <tcp_write+0x53a>
 801551a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d106      	bne.n	8015530 <tcp_write+0x548>
 8015522:	4b1a      	ldr	r3, [pc, #104]	; (801558c <tcp_write+0x5a4>)
 8015524:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015528:	491e      	ldr	r1, [pc, #120]	; (80155a4 <tcp_write+0x5bc>)
 801552a:	481a      	ldr	r0, [pc, #104]	; (8015594 <tcp_write+0x5ac>)
 801552c:	f004 fc1a 	bl	8019d64 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015532:	685b      	ldr	r3, [r3, #4]
 8015534:	62bb      	str	r3, [r7, #40]	; 0x28
 8015536:	e009      	b.n	801554c <tcp_write+0x564>
      p->tot_len += extendlen;
 8015538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801553a:	891a      	ldrh	r2, [r3, #8]
 801553c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801553e:	4413      	add	r3, r2
 8015540:	b29a      	uxth	r2, r3
 8015542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015544:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	62bb      	str	r3, [r7, #40]	; 0x28
 801554c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554e:	681b      	ldr	r3, [r3, #0]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d1f1      	bne.n	8015538 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015556:	891a      	ldrh	r2, [r3, #8]
 8015558:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801555a:	4413      	add	r3, r2
 801555c:	b29a      	uxth	r2, r3
 801555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015560:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015564:	895a      	ldrh	r2, [r3, #10]
 8015566:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015568:	4413      	add	r3, r2
 801556a:	b29a      	uxth	r2, r3
 801556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801556e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015572:	891a      	ldrh	r2, [r3, #8]
 8015574:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015576:	4413      	add	r3, r2
 8015578:	b29a      	uxth	r2, r3
 801557a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801557c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801557e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015580:	2b00      	cmp	r3, #0
 8015582:	d111      	bne.n	80155a8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015588:	66da      	str	r2, [r3, #108]	; 0x6c
 801558a:	e010      	b.n	80155ae <tcp_write+0x5c6>
 801558c:	0801c5ac 	.word	0x0801c5ac
 8015590:	0801c84c 	.word	0x0801c84c
 8015594:	0801c600 	.word	0x0801c600
 8015598:	0801c88c 	.word	0x0801c88c
 801559c:	0801c89c 	.word	0x0801c89c
 80155a0:	0801c8b0 	.word	0x0801c8b0
 80155a4:	0801c8e8 	.word	0x0801c8e8
  } else {
    last_unsent->next = queue;
 80155a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80155ac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80155b2:	88fb      	ldrh	r3, [r7, #6]
 80155b4:	441a      	add	r2, r3
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80155c0:	88fb      	ldrh	r3, [r7, #6]
 80155c2:	1ad3      	subs	r3, r2, r3
 80155c4:	b29a      	uxth	r2, r3
 80155c6:	68fb      	ldr	r3, [r7, #12]
 80155c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80155cc:	68fb      	ldr	r3, [r7, #12]
 80155ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80155d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80155dc:	2b00      	cmp	r3, #0
 80155de:	d00e      	beq.n	80155fe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d10a      	bne.n	80155fe <tcp_write+0x616>
 80155e8:	68fb      	ldr	r3, [r7, #12]
 80155ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d106      	bne.n	80155fe <tcp_write+0x616>
 80155f0:	4b2c      	ldr	r3, [pc, #176]	; (80156a4 <tcp_write+0x6bc>)
 80155f2:	f240 3212 	movw	r2, #786	; 0x312
 80155f6:	492c      	ldr	r1, [pc, #176]	; (80156a8 <tcp_write+0x6c0>)
 80155f8:	482c      	ldr	r0, [pc, #176]	; (80156ac <tcp_write+0x6c4>)
 80155fa:	f004 fbb3 	bl	8019d64 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80155fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015600:	2b00      	cmp	r3, #0
 8015602:	d016      	beq.n	8015632 <tcp_write+0x64a>
 8015604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015606:	68db      	ldr	r3, [r3, #12]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d012      	beq.n	8015632 <tcp_write+0x64a>
 801560c:	797b      	ldrb	r3, [r7, #5]
 801560e:	f003 0302 	and.w	r3, r3, #2
 8015612:	2b00      	cmp	r3, #0
 8015614:	d10d      	bne.n	8015632 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015618:	68db      	ldr	r3, [r3, #12]
 801561a:	899b      	ldrh	r3, [r3, #12]
 801561c:	b29c      	uxth	r4, r3
 801561e:	2008      	movs	r0, #8
 8015620:	f7f9 fa9e 	bl	800eb60 <lwip_htons>
 8015624:	4603      	mov	r3, r0
 8015626:	461a      	mov	r2, r3
 8015628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801562a:	68db      	ldr	r3, [r3, #12]
 801562c:	4322      	orrs	r2, r4
 801562e:	b292      	uxth	r2, r2
 8015630:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015632:	2300      	movs	r3, #0
 8015634:	e031      	b.n	801569a <tcp_write+0x6b2>
          goto memerr;
 8015636:	bf00      	nop
 8015638:	e006      	b.n	8015648 <tcp_write+0x660>
            goto memerr;
 801563a:	bf00      	nop
 801563c:	e004      	b.n	8015648 <tcp_write+0x660>
        goto memerr;
 801563e:	bf00      	nop
 8015640:	e002      	b.n	8015648 <tcp_write+0x660>
        goto memerr;
 8015642:	bf00      	nop
 8015644:	e000      	b.n	8015648 <tcp_write+0x660>
      goto memerr;
 8015646:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	8b5b      	ldrh	r3, [r3, #26]
 801564c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015650:	b29a      	uxth	r2, r3
 8015652:	68fb      	ldr	r3, [r7, #12]
 8015654:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015656:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015658:	2b00      	cmp	r3, #0
 801565a:	d002      	beq.n	8015662 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801565c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801565e:	f7fa ff29 	bl	80104b4 <pbuf_free>
  }
  if (queue != NULL) {
 8015662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015664:	2b00      	cmp	r3, #0
 8015666:	d002      	beq.n	801566e <tcp_write+0x686>
    tcp_segs_free(queue);
 8015668:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801566a:	f7fc fb57 	bl	8011d1c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015674:	2b00      	cmp	r3, #0
 8015676:	d00e      	beq.n	8015696 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801567c:	2b00      	cmp	r3, #0
 801567e:	d10a      	bne.n	8015696 <tcp_write+0x6ae>
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015684:	2b00      	cmp	r3, #0
 8015686:	d106      	bne.n	8015696 <tcp_write+0x6ae>
 8015688:	4b06      	ldr	r3, [pc, #24]	; (80156a4 <tcp_write+0x6bc>)
 801568a:	f240 3227 	movw	r2, #807	; 0x327
 801568e:	4906      	ldr	r1, [pc, #24]	; (80156a8 <tcp_write+0x6c0>)
 8015690:	4806      	ldr	r0, [pc, #24]	; (80156ac <tcp_write+0x6c4>)
 8015692:	f004 fb67 	bl	8019d64 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015696:	f04f 33ff 	mov.w	r3, #4294967295
}
 801569a:	4618      	mov	r0, r3
 801569c:	375c      	adds	r7, #92	; 0x5c
 801569e:	46bd      	mov	sp, r7
 80156a0:	bd90      	pop	{r4, r7, pc}
 80156a2:	bf00      	nop
 80156a4:	0801c5ac 	.word	0x0801c5ac
 80156a8:	0801c920 	.word	0x0801c920
 80156ac:	0801c600 	.word	0x0801c600

080156b0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80156b0:	b590      	push	{r4, r7, lr}
 80156b2:	b08b      	sub	sp, #44	; 0x2c
 80156b4:	af02      	add	r7, sp, #8
 80156b6:	6078      	str	r0, [r7, #4]
 80156b8:	460b      	mov	r3, r1
 80156ba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80156bc:	2300      	movs	r3, #0
 80156be:	61fb      	str	r3, [r7, #28]
 80156c0:	2300      	movs	r3, #0
 80156c2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80156c4:	2300      	movs	r3, #0
 80156c6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d106      	bne.n	80156dc <tcp_split_unsent_seg+0x2c>
 80156ce:	4b95      	ldr	r3, [pc, #596]	; (8015924 <tcp_split_unsent_seg+0x274>)
 80156d0:	f240 324b 	movw	r2, #843	; 0x34b
 80156d4:	4994      	ldr	r1, [pc, #592]	; (8015928 <tcp_split_unsent_seg+0x278>)
 80156d6:	4895      	ldr	r0, [pc, #596]	; (801592c <tcp_split_unsent_seg+0x27c>)
 80156d8:	f004 fb44 	bl	8019d64 <iprintf>

  useg = pcb->unsent;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80156e0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d102      	bne.n	80156ee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80156e8:	f04f 33ff 	mov.w	r3, #4294967295
 80156ec:	e116      	b.n	801591c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80156ee:	887b      	ldrh	r3, [r7, #2]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d109      	bne.n	8015708 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80156f4:	4b8b      	ldr	r3, [pc, #556]	; (8015924 <tcp_split_unsent_seg+0x274>)
 80156f6:	f240 3253 	movw	r2, #851	; 0x353
 80156fa:	498d      	ldr	r1, [pc, #564]	; (8015930 <tcp_split_unsent_seg+0x280>)
 80156fc:	488b      	ldr	r0, [pc, #556]	; (801592c <tcp_split_unsent_seg+0x27c>)
 80156fe:	f004 fb31 	bl	8019d64 <iprintf>
    return ERR_VAL;
 8015702:	f06f 0305 	mvn.w	r3, #5
 8015706:	e109      	b.n	801591c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015708:	697b      	ldr	r3, [r7, #20]
 801570a:	891b      	ldrh	r3, [r3, #8]
 801570c:	887a      	ldrh	r2, [r7, #2]
 801570e:	429a      	cmp	r2, r3
 8015710:	d301      	bcc.n	8015716 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015712:	2300      	movs	r3, #0
 8015714:	e102      	b.n	801591c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801571a:	887a      	ldrh	r2, [r7, #2]
 801571c:	429a      	cmp	r2, r3
 801571e:	d906      	bls.n	801572e <tcp_split_unsent_seg+0x7e>
 8015720:	4b80      	ldr	r3, [pc, #512]	; (8015924 <tcp_split_unsent_seg+0x274>)
 8015722:	f240 325b 	movw	r2, #859	; 0x35b
 8015726:	4983      	ldr	r1, [pc, #524]	; (8015934 <tcp_split_unsent_seg+0x284>)
 8015728:	4880      	ldr	r0, [pc, #512]	; (801592c <tcp_split_unsent_seg+0x27c>)
 801572a:	f004 fb1b 	bl	8019d64 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	891b      	ldrh	r3, [r3, #8]
 8015732:	2b00      	cmp	r3, #0
 8015734:	d106      	bne.n	8015744 <tcp_split_unsent_seg+0x94>
 8015736:	4b7b      	ldr	r3, [pc, #492]	; (8015924 <tcp_split_unsent_seg+0x274>)
 8015738:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801573c:	497e      	ldr	r1, [pc, #504]	; (8015938 <tcp_split_unsent_seg+0x288>)
 801573e:	487b      	ldr	r0, [pc, #492]	; (801592c <tcp_split_unsent_seg+0x27c>)
 8015740:	f004 fb10 	bl	8019d64 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015744:	697b      	ldr	r3, [r7, #20]
 8015746:	7a9b      	ldrb	r3, [r3, #10]
 8015748:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801574a:	7bfb      	ldrb	r3, [r7, #15]
 801574c:	009b      	lsls	r3, r3, #2
 801574e:	b2db      	uxtb	r3, r3
 8015750:	f003 0304 	and.w	r3, r3, #4
 8015754:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	891a      	ldrh	r2, [r3, #8]
 801575a:	887b      	ldrh	r3, [r7, #2]
 801575c:	1ad3      	subs	r3, r2, r3
 801575e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015760:	7bbb      	ldrb	r3, [r7, #14]
 8015762:	b29a      	uxth	r2, r3
 8015764:	89bb      	ldrh	r3, [r7, #12]
 8015766:	4413      	add	r3, r2
 8015768:	b29b      	uxth	r3, r3
 801576a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801576e:	4619      	mov	r1, r3
 8015770:	2036      	movs	r0, #54	; 0x36
 8015772:	f7fa fbbb 	bl	800feec <pbuf_alloc>
 8015776:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	2b00      	cmp	r3, #0
 801577c:	f000 80b7 	beq.w	80158ee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015780:	697b      	ldr	r3, [r7, #20]
 8015782:	685b      	ldr	r3, [r3, #4]
 8015784:	891a      	ldrh	r2, [r3, #8]
 8015786:	697b      	ldr	r3, [r7, #20]
 8015788:	891b      	ldrh	r3, [r3, #8]
 801578a:	1ad3      	subs	r3, r2, r3
 801578c:	b29a      	uxth	r2, r3
 801578e:	887b      	ldrh	r3, [r7, #2]
 8015790:	4413      	add	r3, r2
 8015792:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	6858      	ldr	r0, [r3, #4]
 8015798:	693b      	ldr	r3, [r7, #16]
 801579a:	685a      	ldr	r2, [r3, #4]
 801579c:	7bbb      	ldrb	r3, [r7, #14]
 801579e:	18d1      	adds	r1, r2, r3
 80157a0:	897b      	ldrh	r3, [r7, #10]
 80157a2:	89ba      	ldrh	r2, [r7, #12]
 80157a4:	f7fb f88c 	bl	80108c0 <pbuf_copy_partial>
 80157a8:	4603      	mov	r3, r0
 80157aa:	461a      	mov	r2, r3
 80157ac:	89bb      	ldrh	r3, [r7, #12]
 80157ae:	4293      	cmp	r3, r2
 80157b0:	f040 809f 	bne.w	80158f2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	899b      	ldrh	r3, [r3, #12]
 80157ba:	b29b      	uxth	r3, r3
 80157bc:	4618      	mov	r0, r3
 80157be:	f7f9 f9cf 	bl	800eb60 <lwip_htons>
 80157c2:	4603      	mov	r3, r0
 80157c4:	b2db      	uxtb	r3, r3
 80157c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80157ca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80157cc:	2300      	movs	r3, #0
 80157ce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80157d0:	7efb      	ldrb	r3, [r7, #27]
 80157d2:	f003 0308 	and.w	r3, r3, #8
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d007      	beq.n	80157ea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80157da:	7efb      	ldrb	r3, [r7, #27]
 80157dc:	f023 0308 	bic.w	r3, r3, #8
 80157e0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80157e2:	7ebb      	ldrb	r3, [r7, #26]
 80157e4:	f043 0308 	orr.w	r3, r3, #8
 80157e8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80157ea:	7efb      	ldrb	r3, [r7, #27]
 80157ec:	f003 0301 	and.w	r3, r3, #1
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d007      	beq.n	8015804 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80157f4:	7efb      	ldrb	r3, [r7, #27]
 80157f6:	f023 0301 	bic.w	r3, r3, #1
 80157fa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80157fc:	7ebb      	ldrb	r3, [r7, #26]
 80157fe:	f043 0301 	orr.w	r3, r3, #1
 8015802:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015804:	697b      	ldr	r3, [r7, #20]
 8015806:	68db      	ldr	r3, [r3, #12]
 8015808:	685b      	ldr	r3, [r3, #4]
 801580a:	4618      	mov	r0, r3
 801580c:	f7f9 f9bd 	bl	800eb8a <lwip_htonl>
 8015810:	4602      	mov	r2, r0
 8015812:	887b      	ldrh	r3, [r7, #2]
 8015814:	18d1      	adds	r1, r2, r3
 8015816:	7eba      	ldrb	r2, [r7, #26]
 8015818:	7bfb      	ldrb	r3, [r7, #15]
 801581a:	9300      	str	r3, [sp, #0]
 801581c:	460b      	mov	r3, r1
 801581e:	6939      	ldr	r1, [r7, #16]
 8015820:	6878      	ldr	r0, [r7, #4]
 8015822:	f7ff fa4f 	bl	8014cc4 <tcp_create_segment>
 8015826:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015828:	69fb      	ldr	r3, [r7, #28]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d063      	beq.n	80158f6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	685b      	ldr	r3, [r3, #4]
 8015832:	4618      	mov	r0, r3
 8015834:	f7fa fecc 	bl	80105d0 <pbuf_clen>
 8015838:	4603      	mov	r3, r0
 801583a:	461a      	mov	r2, r3
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015842:	1a9b      	subs	r3, r3, r2
 8015844:	b29a      	uxth	r2, r3
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801584c:	697b      	ldr	r3, [r7, #20]
 801584e:	6858      	ldr	r0, [r3, #4]
 8015850:	697b      	ldr	r3, [r7, #20]
 8015852:	685b      	ldr	r3, [r3, #4]
 8015854:	891a      	ldrh	r2, [r3, #8]
 8015856:	89bb      	ldrh	r3, [r7, #12]
 8015858:	1ad3      	subs	r3, r2, r3
 801585a:	b29b      	uxth	r3, r3
 801585c:	4619      	mov	r1, r3
 801585e:	f7fa fca3 	bl	80101a8 <pbuf_realloc>
  useg->len -= remainder;
 8015862:	697b      	ldr	r3, [r7, #20]
 8015864:	891a      	ldrh	r2, [r3, #8]
 8015866:	89bb      	ldrh	r3, [r7, #12]
 8015868:	1ad3      	subs	r3, r2, r3
 801586a:	b29a      	uxth	r2, r3
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	68db      	ldr	r3, [r3, #12]
 8015874:	899b      	ldrh	r3, [r3, #12]
 8015876:	b29c      	uxth	r4, r3
 8015878:	7efb      	ldrb	r3, [r7, #27]
 801587a:	b29b      	uxth	r3, r3
 801587c:	4618      	mov	r0, r3
 801587e:	f7f9 f96f 	bl	800eb60 <lwip_htons>
 8015882:	4603      	mov	r3, r0
 8015884:	461a      	mov	r2, r3
 8015886:	697b      	ldr	r3, [r7, #20]
 8015888:	68db      	ldr	r3, [r3, #12]
 801588a:	4322      	orrs	r2, r4
 801588c:	b292      	uxth	r2, r2
 801588e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015890:	697b      	ldr	r3, [r7, #20]
 8015892:	685b      	ldr	r3, [r3, #4]
 8015894:	4618      	mov	r0, r3
 8015896:	f7fa fe9b 	bl	80105d0 <pbuf_clen>
 801589a:	4603      	mov	r3, r0
 801589c:	461a      	mov	r2, r3
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80158a4:	4413      	add	r3, r2
 80158a6:	b29a      	uxth	r2, r3
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80158ae:	69fb      	ldr	r3, [r7, #28]
 80158b0:	685b      	ldr	r3, [r3, #4]
 80158b2:	4618      	mov	r0, r3
 80158b4:	f7fa fe8c 	bl	80105d0 <pbuf_clen>
 80158b8:	4603      	mov	r3, r0
 80158ba:	461a      	mov	r2, r3
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80158c2:	4413      	add	r3, r2
 80158c4:	b29a      	uxth	r2, r3
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80158cc:	697b      	ldr	r3, [r7, #20]
 80158ce:	681a      	ldr	r2, [r3, #0]
 80158d0:	69fb      	ldr	r3, [r7, #28]
 80158d2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80158d4:	697b      	ldr	r3, [r7, #20]
 80158d6:	69fa      	ldr	r2, [r7, #28]
 80158d8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80158da:	69fb      	ldr	r3, [r7, #28]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d103      	bne.n	80158ea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	2200      	movs	r2, #0
 80158e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80158ea:	2300      	movs	r3, #0
 80158ec:	e016      	b.n	801591c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80158ee:	bf00      	nop
 80158f0:	e002      	b.n	80158f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80158f2:	bf00      	nop
 80158f4:	e000      	b.n	80158f8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80158f6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80158f8:	69fb      	ldr	r3, [r7, #28]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d006      	beq.n	801590c <tcp_split_unsent_seg+0x25c>
 80158fe:	4b09      	ldr	r3, [pc, #36]	; (8015924 <tcp_split_unsent_seg+0x274>)
 8015900:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015904:	490d      	ldr	r1, [pc, #52]	; (801593c <tcp_split_unsent_seg+0x28c>)
 8015906:	4809      	ldr	r0, [pc, #36]	; (801592c <tcp_split_unsent_seg+0x27c>)
 8015908:	f004 fa2c 	bl	8019d64 <iprintf>
  if (p != NULL) {
 801590c:	693b      	ldr	r3, [r7, #16]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d002      	beq.n	8015918 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015912:	6938      	ldr	r0, [r7, #16]
 8015914:	f7fa fdce 	bl	80104b4 <pbuf_free>
  }

  return ERR_MEM;
 8015918:	f04f 33ff 	mov.w	r3, #4294967295
}
 801591c:	4618      	mov	r0, r3
 801591e:	3724      	adds	r7, #36	; 0x24
 8015920:	46bd      	mov	sp, r7
 8015922:	bd90      	pop	{r4, r7, pc}
 8015924:	0801c5ac 	.word	0x0801c5ac
 8015928:	0801c940 	.word	0x0801c940
 801592c:	0801c600 	.word	0x0801c600
 8015930:	0801c964 	.word	0x0801c964
 8015934:	0801c988 	.word	0x0801c988
 8015938:	0801c998 	.word	0x0801c998
 801593c:	0801c9a8 	.word	0x0801c9a8

08015940 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015940:	b590      	push	{r4, r7, lr}
 8015942:	b085      	sub	sp, #20
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d106      	bne.n	801595c <tcp_send_fin+0x1c>
 801594e:	4b21      	ldr	r3, [pc, #132]	; (80159d4 <tcp_send_fin+0x94>)
 8015950:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015954:	4920      	ldr	r1, [pc, #128]	; (80159d8 <tcp_send_fin+0x98>)
 8015956:	4821      	ldr	r0, [pc, #132]	; (80159dc <tcp_send_fin+0x9c>)
 8015958:	f004 fa04 	bl	8019d64 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801595c:	687b      	ldr	r3, [r7, #4]
 801595e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015960:	2b00      	cmp	r3, #0
 8015962:	d02e      	beq.n	80159c2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015968:	60fb      	str	r3, [r7, #12]
 801596a:	e002      	b.n	8015972 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d1f8      	bne.n	801596c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	68db      	ldr	r3, [r3, #12]
 801597e:	899b      	ldrh	r3, [r3, #12]
 8015980:	b29b      	uxth	r3, r3
 8015982:	4618      	mov	r0, r3
 8015984:	f7f9 f8ec 	bl	800eb60 <lwip_htons>
 8015988:	4603      	mov	r3, r0
 801598a:	b2db      	uxtb	r3, r3
 801598c:	f003 0307 	and.w	r3, r3, #7
 8015990:	2b00      	cmp	r3, #0
 8015992:	d116      	bne.n	80159c2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	899b      	ldrh	r3, [r3, #12]
 801599a:	b29c      	uxth	r4, r3
 801599c:	2001      	movs	r0, #1
 801599e:	f7f9 f8df 	bl	800eb60 <lwip_htons>
 80159a2:	4603      	mov	r3, r0
 80159a4:	461a      	mov	r2, r3
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	68db      	ldr	r3, [r3, #12]
 80159aa:	4322      	orrs	r2, r4
 80159ac:	b292      	uxth	r2, r2
 80159ae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	8b5b      	ldrh	r3, [r3, #26]
 80159b4:	f043 0320 	orr.w	r3, r3, #32
 80159b8:	b29a      	uxth	r2, r3
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80159be:	2300      	movs	r3, #0
 80159c0:	e004      	b.n	80159cc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80159c2:	2101      	movs	r1, #1
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f000 f80b 	bl	80159e0 <tcp_enqueue_flags>
 80159ca:	4603      	mov	r3, r0
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3714      	adds	r7, #20
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd90      	pop	{r4, r7, pc}
 80159d4:	0801c5ac 	.word	0x0801c5ac
 80159d8:	0801c9b4 	.word	0x0801c9b4
 80159dc:	0801c600 	.word	0x0801c600

080159e0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b08a      	sub	sp, #40	; 0x28
 80159e4:	af02      	add	r7, sp, #8
 80159e6:	6078      	str	r0, [r7, #4]
 80159e8:	460b      	mov	r3, r1
 80159ea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80159ec:	2300      	movs	r3, #0
 80159ee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80159f0:	2300      	movs	r3, #0
 80159f2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80159f4:	78fb      	ldrb	r3, [r7, #3]
 80159f6:	f003 0303 	and.w	r3, r3, #3
 80159fa:	2b00      	cmp	r3, #0
 80159fc:	d106      	bne.n	8015a0c <tcp_enqueue_flags+0x2c>
 80159fe:	4b67      	ldr	r3, [pc, #412]	; (8015b9c <tcp_enqueue_flags+0x1bc>)
 8015a00:	f240 4211 	movw	r2, #1041	; 0x411
 8015a04:	4966      	ldr	r1, [pc, #408]	; (8015ba0 <tcp_enqueue_flags+0x1c0>)
 8015a06:	4867      	ldr	r0, [pc, #412]	; (8015ba4 <tcp_enqueue_flags+0x1c4>)
 8015a08:	f004 f9ac 	bl	8019d64 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d106      	bne.n	8015a20 <tcp_enqueue_flags+0x40>
 8015a12:	4b62      	ldr	r3, [pc, #392]	; (8015b9c <tcp_enqueue_flags+0x1bc>)
 8015a14:	f240 4213 	movw	r2, #1043	; 0x413
 8015a18:	4963      	ldr	r1, [pc, #396]	; (8015ba8 <tcp_enqueue_flags+0x1c8>)
 8015a1a:	4862      	ldr	r0, [pc, #392]	; (8015ba4 <tcp_enqueue_flags+0x1c4>)
 8015a1c:	f004 f9a2 	bl	8019d64 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015a20:	78fb      	ldrb	r3, [r7, #3]
 8015a22:	f003 0302 	and.w	r3, r3, #2
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d001      	beq.n	8015a2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015a2a:	2301      	movs	r3, #1
 8015a2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015a2e:	7ffb      	ldrb	r3, [r7, #31]
 8015a30:	009b      	lsls	r3, r3, #2
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	f003 0304 	and.w	r3, r3, #4
 8015a38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015a3a:	7dfb      	ldrb	r3, [r7, #23]
 8015a3c:	b29b      	uxth	r3, r3
 8015a3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015a42:	4619      	mov	r1, r3
 8015a44:	2036      	movs	r0, #54	; 0x36
 8015a46:	f7fa fa51 	bl	800feec <pbuf_alloc>
 8015a4a:	6138      	str	r0, [r7, #16]
 8015a4c:	693b      	ldr	r3, [r7, #16]
 8015a4e:	2b00      	cmp	r3, #0
 8015a50:	d109      	bne.n	8015a66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	8b5b      	ldrh	r3, [r3, #26]
 8015a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a5a:	b29a      	uxth	r2, r3
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015a60:	f04f 33ff 	mov.w	r3, #4294967295
 8015a64:	e095      	b.n	8015b92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015a66:	693b      	ldr	r3, [r7, #16]
 8015a68:	895a      	ldrh	r2, [r3, #10]
 8015a6a:	7dfb      	ldrb	r3, [r7, #23]
 8015a6c:	b29b      	uxth	r3, r3
 8015a6e:	429a      	cmp	r2, r3
 8015a70:	d206      	bcs.n	8015a80 <tcp_enqueue_flags+0xa0>
 8015a72:	4b4a      	ldr	r3, [pc, #296]	; (8015b9c <tcp_enqueue_flags+0x1bc>)
 8015a74:	f240 4239 	movw	r2, #1081	; 0x439
 8015a78:	494c      	ldr	r1, [pc, #304]	; (8015bac <tcp_enqueue_flags+0x1cc>)
 8015a7a:	484a      	ldr	r0, [pc, #296]	; (8015ba4 <tcp_enqueue_flags+0x1c4>)
 8015a7c:	f004 f972 	bl	8019d64 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015a84:	78fa      	ldrb	r2, [r7, #3]
 8015a86:	7ffb      	ldrb	r3, [r7, #31]
 8015a88:	9300      	str	r3, [sp, #0]
 8015a8a:	460b      	mov	r3, r1
 8015a8c:	6939      	ldr	r1, [r7, #16]
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f7ff f918 	bl	8014cc4 <tcp_create_segment>
 8015a94:	60f8      	str	r0, [r7, #12]
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d109      	bne.n	8015ab0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	8b5b      	ldrh	r3, [r3, #26]
 8015aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015aa4:	b29a      	uxth	r2, r3
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8015aae:	e070      	b.n	8015b92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	68db      	ldr	r3, [r3, #12]
 8015ab4:	f003 0303 	and.w	r3, r3, #3
 8015ab8:	2b00      	cmp	r3, #0
 8015aba:	d006      	beq.n	8015aca <tcp_enqueue_flags+0xea>
 8015abc:	4b37      	ldr	r3, [pc, #220]	; (8015b9c <tcp_enqueue_flags+0x1bc>)
 8015abe:	f240 4242 	movw	r2, #1090	; 0x442
 8015ac2:	493b      	ldr	r1, [pc, #236]	; (8015bb0 <tcp_enqueue_flags+0x1d0>)
 8015ac4:	4837      	ldr	r0, [pc, #220]	; (8015ba4 <tcp_enqueue_flags+0x1c4>)
 8015ac6:	f004 f94d 	bl	8019d64 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	891b      	ldrh	r3, [r3, #8]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d006      	beq.n	8015ae0 <tcp_enqueue_flags+0x100>
 8015ad2:	4b32      	ldr	r3, [pc, #200]	; (8015b9c <tcp_enqueue_flags+0x1bc>)
 8015ad4:	f240 4243 	movw	r2, #1091	; 0x443
 8015ad8:	4936      	ldr	r1, [pc, #216]	; (8015bb4 <tcp_enqueue_flags+0x1d4>)
 8015ada:	4832      	ldr	r0, [pc, #200]	; (8015ba4 <tcp_enqueue_flags+0x1c4>)
 8015adc:	f004 f942 	bl	8019d64 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ae4:	2b00      	cmp	r3, #0
 8015ae6:	d103      	bne.n	8015af0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	68fa      	ldr	r2, [r7, #12]
 8015aec:	66da      	str	r2, [r3, #108]	; 0x6c
 8015aee:	e00d      	b.n	8015b0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015af4:	61bb      	str	r3, [r7, #24]
 8015af6:	e002      	b.n	8015afe <tcp_enqueue_flags+0x11e>
 8015af8:	69bb      	ldr	r3, [r7, #24]
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	61bb      	str	r3, [r7, #24]
 8015afe:	69bb      	ldr	r3, [r7, #24]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d1f8      	bne.n	8015af8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015b06:	69bb      	ldr	r3, [r7, #24]
 8015b08:	68fa      	ldr	r2, [r7, #12]
 8015b0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2200      	movs	r2, #0
 8015b10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015b14:	78fb      	ldrb	r3, [r7, #3]
 8015b16:	f003 0302 	and.w	r3, r3, #2
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d104      	bne.n	8015b28 <tcp_enqueue_flags+0x148>
 8015b1e:	78fb      	ldrb	r3, [r7, #3]
 8015b20:	f003 0301 	and.w	r3, r3, #1
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d004      	beq.n	8015b32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015b2c:	1c5a      	adds	r2, r3, #1
 8015b2e:	687b      	ldr	r3, [r7, #4]
 8015b30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015b32:	78fb      	ldrb	r3, [r7, #3]
 8015b34:	f003 0301 	and.w	r3, r3, #1
 8015b38:	2b00      	cmp	r3, #0
 8015b3a:	d006      	beq.n	8015b4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	8b5b      	ldrh	r3, [r3, #26]
 8015b40:	f043 0320 	orr.w	r3, r3, #32
 8015b44:	b29a      	uxth	r2, r3
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	685b      	ldr	r3, [r3, #4]
 8015b4e:	4618      	mov	r0, r3
 8015b50:	f7fa fd3e 	bl	80105d0 <pbuf_clen>
 8015b54:	4603      	mov	r3, r0
 8015b56:	461a      	mov	r2, r3
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015b5e:	4413      	add	r3, r2
 8015b60:	b29a      	uxth	r2, r3
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d00e      	beq.n	8015b90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d10a      	bne.n	8015b90 <tcp_enqueue_flags+0x1b0>
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d106      	bne.n	8015b90 <tcp_enqueue_flags+0x1b0>
 8015b82:	4b06      	ldr	r3, [pc, #24]	; (8015b9c <tcp_enqueue_flags+0x1bc>)
 8015b84:	f240 4265 	movw	r2, #1125	; 0x465
 8015b88:	490b      	ldr	r1, [pc, #44]	; (8015bb8 <tcp_enqueue_flags+0x1d8>)
 8015b8a:	4806      	ldr	r0, [pc, #24]	; (8015ba4 <tcp_enqueue_flags+0x1c4>)
 8015b8c:	f004 f8ea 	bl	8019d64 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015b90:	2300      	movs	r3, #0
}
 8015b92:	4618      	mov	r0, r3
 8015b94:	3720      	adds	r7, #32
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}
 8015b9a:	bf00      	nop
 8015b9c:	0801c5ac 	.word	0x0801c5ac
 8015ba0:	0801c9d0 	.word	0x0801c9d0
 8015ba4:	0801c600 	.word	0x0801c600
 8015ba8:	0801ca28 	.word	0x0801ca28
 8015bac:	0801ca48 	.word	0x0801ca48
 8015bb0:	0801ca84 	.word	0x0801ca84
 8015bb4:	0801ca9c 	.word	0x0801ca9c
 8015bb8:	0801cac8 	.word	0x0801cac8

08015bbc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015bbc:	b5b0      	push	{r4, r5, r7, lr}
 8015bbe:	b08a      	sub	sp, #40	; 0x28
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d106      	bne.n	8015bd8 <tcp_output+0x1c>
 8015bca:	4b9e      	ldr	r3, [pc, #632]	; (8015e44 <tcp_output+0x288>)
 8015bcc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015bd0:	499d      	ldr	r1, [pc, #628]	; (8015e48 <tcp_output+0x28c>)
 8015bd2:	489e      	ldr	r0, [pc, #632]	; (8015e4c <tcp_output+0x290>)
 8015bd4:	f004 f8c6 	bl	8019d64 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	7d1b      	ldrb	r3, [r3, #20]
 8015bdc:	2b01      	cmp	r3, #1
 8015bde:	d106      	bne.n	8015bee <tcp_output+0x32>
 8015be0:	4b98      	ldr	r3, [pc, #608]	; (8015e44 <tcp_output+0x288>)
 8015be2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015be6:	499a      	ldr	r1, [pc, #616]	; (8015e50 <tcp_output+0x294>)
 8015be8:	4898      	ldr	r0, [pc, #608]	; (8015e4c <tcp_output+0x290>)
 8015bea:	f004 f8bb 	bl	8019d64 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015bee:	4b99      	ldr	r3, [pc, #612]	; (8015e54 <tcp_output+0x298>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	687a      	ldr	r2, [r7, #4]
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d101      	bne.n	8015bfc <tcp_output+0x40>
    return ERR_OK;
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	e1ce      	b.n	8015f9a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015c08:	4293      	cmp	r3, r2
 8015c0a:	bf28      	it	cs
 8015c0c:	4613      	movcs	r3, r2
 8015c0e:	b29b      	uxth	r3, r3
 8015c10:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015c16:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d10b      	bne.n	8015c36 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015c1e:	687b      	ldr	r3, [r7, #4]
 8015c20:	8b5b      	ldrh	r3, [r3, #26]
 8015c22:	f003 0302 	and.w	r3, r3, #2
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	f000 81aa 	beq.w	8015f80 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015c2c:	6878      	ldr	r0, [r7, #4]
 8015c2e:	f000 fdcb 	bl	80167c8 <tcp_send_empty_ack>
 8015c32:	4603      	mov	r3, r0
 8015c34:	e1b1      	b.n	8015f9a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015c36:	6879      	ldr	r1, [r7, #4]
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	3304      	adds	r3, #4
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	6878      	ldr	r0, [r7, #4]
 8015c40:	f7ff f824 	bl	8014c8c <tcp_route>
 8015c44:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015c46:	697b      	ldr	r3, [r7, #20]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d102      	bne.n	8015c52 <tcp_output+0x96>
    return ERR_RTE;
 8015c4c:	f06f 0303 	mvn.w	r3, #3
 8015c50:	e1a3      	b.n	8015f9a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d003      	beq.n	8015c60 <tcp_output+0xa4>
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d111      	bne.n	8015c84 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015c60:	697b      	ldr	r3, [r7, #20]
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d002      	beq.n	8015c6c <tcp_output+0xb0>
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	3304      	adds	r3, #4
 8015c6a:	e000      	b.n	8015c6e <tcp_output+0xb2>
 8015c6c:	2300      	movs	r3, #0
 8015c6e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015c70:	693b      	ldr	r3, [r7, #16]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d102      	bne.n	8015c7c <tcp_output+0xc0>
      return ERR_RTE;
 8015c76:	f06f 0303 	mvn.w	r3, #3
 8015c7a:	e18e      	b.n	8015f9a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015c7c:	693b      	ldr	r3, [r7, #16]
 8015c7e:	681a      	ldr	r2, [r3, #0]
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c86:	68db      	ldr	r3, [r3, #12]
 8015c88:	685b      	ldr	r3, [r3, #4]
 8015c8a:	4618      	mov	r0, r3
 8015c8c:	f7f8 ff7d 	bl	800eb8a <lwip_htonl>
 8015c90:	4602      	mov	r2, r0
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c96:	1ad3      	subs	r3, r2, r3
 8015c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015c9a:	8912      	ldrh	r2, [r2, #8]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	69ba      	ldr	r2, [r7, #24]
 8015ca0:	429a      	cmp	r2, r3
 8015ca2:	d227      	bcs.n	8015cf4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015caa:	461a      	mov	r2, r3
 8015cac:	69bb      	ldr	r3, [r7, #24]
 8015cae:	4293      	cmp	r3, r2
 8015cb0:	d114      	bne.n	8015cdc <tcp_output+0x120>
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d110      	bne.n	8015cdc <tcp_output+0x120>
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d10b      	bne.n	8015cdc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	2200      	movs	r2, #0
 8015cc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	2201      	movs	r2, #1
 8015cd0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	2200      	movs	r2, #0
 8015cd8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015cdc:	687b      	ldr	r3, [r7, #4]
 8015cde:	8b5b      	ldrh	r3, [r3, #26]
 8015ce0:	f003 0302 	and.w	r3, r3, #2
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	f000 814d 	beq.w	8015f84 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015cea:	6878      	ldr	r0, [r7, #4]
 8015cec:	f000 fd6c 	bl	80167c8 <tcp_send_empty_ack>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	e152      	b.n	8015f9a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	2200      	movs	r2, #0
 8015cf8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d00:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015d02:	6a3b      	ldr	r3, [r7, #32]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	f000 811c 	beq.w	8015f42 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015d0a:	e002      	b.n	8015d12 <tcp_output+0x156>
 8015d0c:	6a3b      	ldr	r3, [r7, #32]
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	623b      	str	r3, [r7, #32]
 8015d12:	6a3b      	ldr	r3, [r7, #32]
 8015d14:	681b      	ldr	r3, [r3, #0]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d1f8      	bne.n	8015d0c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015d1a:	e112      	b.n	8015f42 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d1e:	68db      	ldr	r3, [r3, #12]
 8015d20:	899b      	ldrh	r3, [r3, #12]
 8015d22:	b29b      	uxth	r3, r3
 8015d24:	4618      	mov	r0, r3
 8015d26:	f7f8 ff1b 	bl	800eb60 <lwip_htons>
 8015d2a:	4603      	mov	r3, r0
 8015d2c:	b2db      	uxtb	r3, r3
 8015d2e:	f003 0304 	and.w	r3, r3, #4
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d006      	beq.n	8015d44 <tcp_output+0x188>
 8015d36:	4b43      	ldr	r3, [pc, #268]	; (8015e44 <tcp_output+0x288>)
 8015d38:	f240 5236 	movw	r2, #1334	; 0x536
 8015d3c:	4946      	ldr	r1, [pc, #280]	; (8015e58 <tcp_output+0x29c>)
 8015d3e:	4843      	ldr	r0, [pc, #268]	; (8015e4c <tcp_output+0x290>)
 8015d40:	f004 f810 	bl	8019d64 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d01f      	beq.n	8015d8c <tcp_output+0x1d0>
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	8b5b      	ldrh	r3, [r3, #26]
 8015d50:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d119      	bne.n	8015d8c <tcp_output+0x1d0>
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d00b      	beq.n	8015d78 <tcp_output+0x1bc>
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d110      	bne.n	8015d8c <tcp_output+0x1d0>
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d6e:	891a      	ldrh	r2, [r3, #8]
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d209      	bcs.n	8015d8c <tcp_output+0x1d0>
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d004      	beq.n	8015d8c <tcp_output+0x1d0>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d88:	2b08      	cmp	r3, #8
 8015d8a:	d901      	bls.n	8015d90 <tcp_output+0x1d4>
 8015d8c:	2301      	movs	r3, #1
 8015d8e:	e000      	b.n	8015d92 <tcp_output+0x1d6>
 8015d90:	2300      	movs	r3, #0
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d106      	bne.n	8015da4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	8b5b      	ldrh	r3, [r3, #26]
 8015d9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	f000 80e4 	beq.w	8015f6c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	7d1b      	ldrb	r3, [r3, #20]
 8015da8:	2b02      	cmp	r3, #2
 8015daa:	d00d      	beq.n	8015dc8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dae:	68db      	ldr	r3, [r3, #12]
 8015db0:	899b      	ldrh	r3, [r3, #12]
 8015db2:	b29c      	uxth	r4, r3
 8015db4:	2010      	movs	r0, #16
 8015db6:	f7f8 fed3 	bl	800eb60 <lwip_htons>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	461a      	mov	r2, r3
 8015dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc0:	68db      	ldr	r3, [r3, #12]
 8015dc2:	4322      	orrs	r2, r4
 8015dc4:	b292      	uxth	r2, r2
 8015dc6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015dc8:	697a      	ldr	r2, [r7, #20]
 8015dca:	6879      	ldr	r1, [r7, #4]
 8015dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015dce:	f000 f909 	bl	8015fe4 <tcp_output_segment>
 8015dd2:	4603      	mov	r3, r0
 8015dd4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d009      	beq.n	8015df2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	8b5b      	ldrh	r3, [r3, #26]
 8015de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015de6:	b29a      	uxth	r2, r3
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	835a      	strh	r2, [r3, #26]
      return err;
 8015dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015df0:	e0d3      	b.n	8015f9a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df4:	681a      	ldr	r2, [r3, #0]
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	7d1b      	ldrb	r3, [r3, #20]
 8015dfe:	2b02      	cmp	r3, #2
 8015e00:	d006      	beq.n	8015e10 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	8b5b      	ldrh	r3, [r3, #26]
 8015e06:	f023 0303 	bic.w	r3, r3, #3
 8015e0a:	b29a      	uxth	r2, r3
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e12:	68db      	ldr	r3, [r3, #12]
 8015e14:	685b      	ldr	r3, [r3, #4]
 8015e16:	4618      	mov	r0, r3
 8015e18:	f7f8 feb7 	bl	800eb8a <lwip_htonl>
 8015e1c:	4604      	mov	r4, r0
 8015e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e20:	891b      	ldrh	r3, [r3, #8]
 8015e22:	461d      	mov	r5, r3
 8015e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e26:	68db      	ldr	r3, [r3, #12]
 8015e28:	899b      	ldrh	r3, [r3, #12]
 8015e2a:	b29b      	uxth	r3, r3
 8015e2c:	4618      	mov	r0, r3
 8015e2e:	f7f8 fe97 	bl	800eb60 <lwip_htons>
 8015e32:	4603      	mov	r3, r0
 8015e34:	b2db      	uxtb	r3, r3
 8015e36:	f003 0303 	and.w	r3, r3, #3
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d00e      	beq.n	8015e5c <tcp_output+0x2a0>
 8015e3e:	2301      	movs	r3, #1
 8015e40:	e00d      	b.n	8015e5e <tcp_output+0x2a2>
 8015e42:	bf00      	nop
 8015e44:	0801c5ac 	.word	0x0801c5ac
 8015e48:	0801caf0 	.word	0x0801caf0
 8015e4c:	0801c600 	.word	0x0801c600
 8015e50:	0801cb08 	.word	0x0801cb08
 8015e54:	240078b0 	.word	0x240078b0
 8015e58:	0801cb30 	.word	0x0801cb30
 8015e5c:	2300      	movs	r3, #0
 8015e5e:	442b      	add	r3, r5
 8015e60:	4423      	add	r3, r4
 8015e62:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015e68:	68bb      	ldr	r3, [r7, #8]
 8015e6a:	1ad3      	subs	r3, r2, r3
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	da02      	bge.n	8015e76 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	68ba      	ldr	r2, [r7, #8]
 8015e74:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e78:	891b      	ldrh	r3, [r3, #8]
 8015e7a:	461c      	mov	r4, r3
 8015e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e7e:	68db      	ldr	r3, [r3, #12]
 8015e80:	899b      	ldrh	r3, [r3, #12]
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	4618      	mov	r0, r3
 8015e86:	f7f8 fe6b 	bl	800eb60 <lwip_htons>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	b2db      	uxtb	r3, r3
 8015e8e:	f003 0303 	and.w	r3, r3, #3
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d001      	beq.n	8015e9a <tcp_output+0x2de>
 8015e96:	2301      	movs	r3, #1
 8015e98:	e000      	b.n	8015e9c <tcp_output+0x2e0>
 8015e9a:	2300      	movs	r3, #0
 8015e9c:	4423      	add	r3, r4
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d049      	beq.n	8015f36 <tcp_output+0x37a>
      seg->next = NULL;
 8015ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ea4:	2200      	movs	r2, #0
 8015ea6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015eac:	2b00      	cmp	r3, #0
 8015eae:	d105      	bne.n	8015ebc <tcp_output+0x300>
        pcb->unacked = seg;
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015eb4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eb8:	623b      	str	r3, [r7, #32]
 8015eba:	e03f      	b.n	8015f3c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ebe:	68db      	ldr	r3, [r3, #12]
 8015ec0:	685b      	ldr	r3, [r3, #4]
 8015ec2:	4618      	mov	r0, r3
 8015ec4:	f7f8 fe61 	bl	800eb8a <lwip_htonl>
 8015ec8:	4604      	mov	r4, r0
 8015eca:	6a3b      	ldr	r3, [r7, #32]
 8015ecc:	68db      	ldr	r3, [r3, #12]
 8015ece:	685b      	ldr	r3, [r3, #4]
 8015ed0:	4618      	mov	r0, r3
 8015ed2:	f7f8 fe5a 	bl	800eb8a <lwip_htonl>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	1ae3      	subs	r3, r4, r3
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	da24      	bge.n	8015f28 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	3370      	adds	r3, #112	; 0x70
 8015ee2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015ee4:	e002      	b.n	8015eec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015ee6:	69fb      	ldr	r3, [r7, #28]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015eec:	69fb      	ldr	r3, [r7, #28]
 8015eee:	681b      	ldr	r3, [r3, #0]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d011      	beq.n	8015f18 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015ef4:	69fb      	ldr	r3, [r7, #28]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	68db      	ldr	r3, [r3, #12]
 8015efa:	685b      	ldr	r3, [r3, #4]
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7f8 fe44 	bl	800eb8a <lwip_htonl>
 8015f02:	4604      	mov	r4, r0
 8015f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f06:	68db      	ldr	r3, [r3, #12]
 8015f08:	685b      	ldr	r3, [r3, #4]
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	f7f8 fe3d 	bl	800eb8a <lwip_htonl>
 8015f10:	4603      	mov	r3, r0
 8015f12:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	dbe6      	blt.n	8015ee6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015f18:	69fb      	ldr	r3, [r7, #28]
 8015f1a:	681a      	ldr	r2, [r3, #0]
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015f20:	69fb      	ldr	r3, [r7, #28]
 8015f22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f24:	601a      	str	r2, [r3, #0]
 8015f26:	e009      	b.n	8015f3c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015f28:	6a3b      	ldr	r3, [r7, #32]
 8015f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f2c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015f2e:	6a3b      	ldr	r3, [r7, #32]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	623b      	str	r3, [r7, #32]
 8015f34:	e002      	b.n	8015f3c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015f36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015f38:	f7fb ff05 	bl	8011d46 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f40:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f44:	2b00      	cmp	r3, #0
 8015f46:	d012      	beq.n	8015f6e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4a:	68db      	ldr	r3, [r3, #12]
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7f8 fe1b 	bl	800eb8a <lwip_htonl>
 8015f54:	4602      	mov	r2, r0
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015f5a:	1ad3      	subs	r3, r2, r3
 8015f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f5e:	8912      	ldrh	r2, [r2, #8]
 8015f60:	4413      	add	r3, r2
  while (seg != NULL &&
 8015f62:	69ba      	ldr	r2, [r7, #24]
 8015f64:	429a      	cmp	r2, r3
 8015f66:	f4bf aed9 	bcs.w	8015d1c <tcp_output+0x160>
 8015f6a:	e000      	b.n	8015f6e <tcp_output+0x3b2>
      break;
 8015f6c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d108      	bne.n	8015f88 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	2200      	movs	r2, #0
 8015f7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015f7e:	e004      	b.n	8015f8a <tcp_output+0x3ce>
    goto output_done;
 8015f80:	bf00      	nop
 8015f82:	e002      	b.n	8015f8a <tcp_output+0x3ce>
    goto output_done;
 8015f84:	bf00      	nop
 8015f86:	e000      	b.n	8015f8a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015f88:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	8b5b      	ldrh	r3, [r3, #26]
 8015f8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015f92:	b29a      	uxth	r2, r3
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015f98:	2300      	movs	r3, #0
}
 8015f9a:	4618      	mov	r0, r3
 8015f9c:	3728      	adds	r7, #40	; 0x28
 8015f9e:	46bd      	mov	sp, r7
 8015fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8015fa2:	bf00      	nop

08015fa4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015fa4:	b580      	push	{r7, lr}
 8015fa6:	b082      	sub	sp, #8
 8015fa8:	af00      	add	r7, sp, #0
 8015faa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d106      	bne.n	8015fc0 <tcp_output_segment_busy+0x1c>
 8015fb2:	4b09      	ldr	r3, [pc, #36]	; (8015fd8 <tcp_output_segment_busy+0x34>)
 8015fb4:	f240 529a 	movw	r2, #1434	; 0x59a
 8015fb8:	4908      	ldr	r1, [pc, #32]	; (8015fdc <tcp_output_segment_busy+0x38>)
 8015fba:	4809      	ldr	r0, [pc, #36]	; (8015fe0 <tcp_output_segment_busy+0x3c>)
 8015fbc:	f003 fed2 	bl	8019d64 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	7b9b      	ldrb	r3, [r3, #14]
 8015fc6:	2b01      	cmp	r3, #1
 8015fc8:	d001      	beq.n	8015fce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015fca:	2301      	movs	r3, #1
 8015fcc:	e000      	b.n	8015fd0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015fce:	2300      	movs	r3, #0
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3708      	adds	r7, #8
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	bd80      	pop	{r7, pc}
 8015fd8:	0801c5ac 	.word	0x0801c5ac
 8015fdc:	0801cb48 	.word	0x0801cb48
 8015fe0:	0801c600 	.word	0x0801c600

08015fe4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015fe4:	b5b0      	push	{r4, r5, r7, lr}
 8015fe6:	b08c      	sub	sp, #48	; 0x30
 8015fe8:	af04      	add	r7, sp, #16
 8015fea:	60f8      	str	r0, [r7, #12]
 8015fec:	60b9      	str	r1, [r7, #8]
 8015fee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015ff0:	68fb      	ldr	r3, [r7, #12]
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d106      	bne.n	8016004 <tcp_output_segment+0x20>
 8015ff6:	4b63      	ldr	r3, [pc, #396]	; (8016184 <tcp_output_segment+0x1a0>)
 8015ff8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015ffc:	4962      	ldr	r1, [pc, #392]	; (8016188 <tcp_output_segment+0x1a4>)
 8015ffe:	4863      	ldr	r0, [pc, #396]	; (801618c <tcp_output_segment+0x1a8>)
 8016000:	f003 feb0 	bl	8019d64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016004:	68bb      	ldr	r3, [r7, #8]
 8016006:	2b00      	cmp	r3, #0
 8016008:	d106      	bne.n	8016018 <tcp_output_segment+0x34>
 801600a:	4b5e      	ldr	r3, [pc, #376]	; (8016184 <tcp_output_segment+0x1a0>)
 801600c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016010:	495f      	ldr	r1, [pc, #380]	; (8016190 <tcp_output_segment+0x1ac>)
 8016012:	485e      	ldr	r0, [pc, #376]	; (801618c <tcp_output_segment+0x1a8>)
 8016014:	f003 fea6 	bl	8019d64 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d106      	bne.n	801602c <tcp_output_segment+0x48>
 801601e:	4b59      	ldr	r3, [pc, #356]	; (8016184 <tcp_output_segment+0x1a0>)
 8016020:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016024:	495b      	ldr	r1, [pc, #364]	; (8016194 <tcp_output_segment+0x1b0>)
 8016026:	4859      	ldr	r0, [pc, #356]	; (801618c <tcp_output_segment+0x1a8>)
 8016028:	f003 fe9c 	bl	8019d64 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801602c:	68f8      	ldr	r0, [r7, #12]
 801602e:	f7ff ffb9 	bl	8015fa4 <tcp_output_segment_busy>
 8016032:	4603      	mov	r3, r0
 8016034:	2b00      	cmp	r3, #0
 8016036:	d001      	beq.n	801603c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016038:	2300      	movs	r3, #0
 801603a:	e09f      	b.n	801617c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016040:	68fb      	ldr	r3, [r7, #12]
 8016042:	68dc      	ldr	r4, [r3, #12]
 8016044:	4610      	mov	r0, r2
 8016046:	f7f8 fda0 	bl	800eb8a <lwip_htonl>
 801604a:	4603      	mov	r3, r0
 801604c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801604e:	68bb      	ldr	r3, [r7, #8]
 8016050:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016052:	68fb      	ldr	r3, [r7, #12]
 8016054:	68dc      	ldr	r4, [r3, #12]
 8016056:	4610      	mov	r0, r2
 8016058:	f7f8 fd82 	bl	800eb60 <lwip_htons>
 801605c:	4603      	mov	r3, r0
 801605e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016060:	68bb      	ldr	r3, [r7, #8]
 8016062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016064:	68ba      	ldr	r2, [r7, #8]
 8016066:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016068:	441a      	add	r2, r3
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	68db      	ldr	r3, [r3, #12]
 8016072:	3314      	adds	r3, #20
 8016074:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016076:	68fb      	ldr	r3, [r7, #12]
 8016078:	7a9b      	ldrb	r3, [r3, #10]
 801607a:	f003 0301 	and.w	r3, r3, #1
 801607e:	2b00      	cmp	r3, #0
 8016080:	d015      	beq.n	80160ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016082:	68bb      	ldr	r3, [r7, #8]
 8016084:	3304      	adds	r3, #4
 8016086:	461a      	mov	r2, r3
 8016088:	6879      	ldr	r1, [r7, #4]
 801608a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801608e:	f7fc fa37 	bl	8012500 <tcp_eff_send_mss_netif>
 8016092:	4603      	mov	r3, r0
 8016094:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016096:	8b7b      	ldrh	r3, [r7, #26]
 8016098:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801609c:	4618      	mov	r0, r3
 801609e:	f7f8 fd74 	bl	800eb8a <lwip_htonl>
 80160a2:	4602      	mov	r2, r0
 80160a4:	69fb      	ldr	r3, [r7, #28]
 80160a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80160a8:	69fb      	ldr	r3, [r7, #28]
 80160aa:	3304      	adds	r3, #4
 80160ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80160ae:	68bb      	ldr	r3, [r7, #8]
 80160b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	da02      	bge.n	80160be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80160b8:	68bb      	ldr	r3, [r7, #8]
 80160ba:	2200      	movs	r2, #0
 80160bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80160be:	68bb      	ldr	r3, [r7, #8]
 80160c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d10c      	bne.n	80160e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80160c6:	4b34      	ldr	r3, [pc, #208]	; (8016198 <tcp_output_segment+0x1b4>)
 80160c8:	681a      	ldr	r2, [r3, #0]
 80160ca:	68bb      	ldr	r3, [r7, #8]
 80160cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	68db      	ldr	r3, [r3, #12]
 80160d2:	685b      	ldr	r3, [r3, #4]
 80160d4:	4618      	mov	r0, r3
 80160d6:	f7f8 fd58 	bl	800eb8a <lwip_htonl>
 80160da:	4602      	mov	r2, r0
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80160e0:	68fb      	ldr	r3, [r7, #12]
 80160e2:	68da      	ldr	r2, [r3, #12]
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	685b      	ldr	r3, [r3, #4]
 80160e8:	685b      	ldr	r3, [r3, #4]
 80160ea:	1ad3      	subs	r3, r2, r3
 80160ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80160ee:	68fb      	ldr	r3, [r7, #12]
 80160f0:	685b      	ldr	r3, [r3, #4]
 80160f2:	8959      	ldrh	r1, [r3, #10]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	685b      	ldr	r3, [r3, #4]
 80160f8:	8b3a      	ldrh	r2, [r7, #24]
 80160fa:	1a8a      	subs	r2, r1, r2
 80160fc:	b292      	uxth	r2, r2
 80160fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016100:	68fb      	ldr	r3, [r7, #12]
 8016102:	685b      	ldr	r3, [r3, #4]
 8016104:	8919      	ldrh	r1, [r3, #8]
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	685b      	ldr	r3, [r3, #4]
 801610a:	8b3a      	ldrh	r2, [r7, #24]
 801610c:	1a8a      	subs	r2, r1, r2
 801610e:	b292      	uxth	r2, r2
 8016110:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	685b      	ldr	r3, [r3, #4]
 8016116:	68fa      	ldr	r2, [r7, #12]
 8016118:	68d2      	ldr	r2, [r2, #12]
 801611a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	68db      	ldr	r3, [r3, #12]
 8016120:	2200      	movs	r2, #0
 8016122:	741a      	strb	r2, [r3, #16]
 8016124:	2200      	movs	r2, #0
 8016126:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	f103 0214 	add.w	r2, r3, #20
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	7a9b      	ldrb	r3, [r3, #10]
 8016134:	009b      	lsls	r3, r3, #2
 8016136:	f003 0304 	and.w	r3, r3, #4
 801613a:	4413      	add	r3, r2
 801613c:	69fa      	ldr	r2, [r7, #28]
 801613e:	429a      	cmp	r2, r3
 8016140:	d006      	beq.n	8016150 <tcp_output_segment+0x16c>
 8016142:	4b10      	ldr	r3, [pc, #64]	; (8016184 <tcp_output_segment+0x1a0>)
 8016144:	f240 621c 	movw	r2, #1564	; 0x61c
 8016148:	4914      	ldr	r1, [pc, #80]	; (801619c <tcp_output_segment+0x1b8>)
 801614a:	4810      	ldr	r0, [pc, #64]	; (801618c <tcp_output_segment+0x1a8>)
 801614c:	f003 fe0a 	bl	8019d64 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	6858      	ldr	r0, [r3, #4]
 8016154:	68b9      	ldr	r1, [r7, #8]
 8016156:	68bb      	ldr	r3, [r7, #8]
 8016158:	1d1c      	adds	r4, r3, #4
 801615a:	68bb      	ldr	r3, [r7, #8]
 801615c:	7add      	ldrb	r5, [r3, #11]
 801615e:	68bb      	ldr	r3, [r7, #8]
 8016160:	7a9b      	ldrb	r3, [r3, #10]
 8016162:	687a      	ldr	r2, [r7, #4]
 8016164:	9202      	str	r2, [sp, #8]
 8016166:	2206      	movs	r2, #6
 8016168:	9201      	str	r2, [sp, #4]
 801616a:	9300      	str	r3, [sp, #0]
 801616c:	462b      	mov	r3, r5
 801616e:	4622      	mov	r2, r4
 8016170:	f002 fa8c 	bl	801868c <ip4_output_if>
 8016174:	4603      	mov	r3, r0
 8016176:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016178:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801617c:	4618      	mov	r0, r3
 801617e:	3720      	adds	r7, #32
 8016180:	46bd      	mov	sp, r7
 8016182:	bdb0      	pop	{r4, r5, r7, pc}
 8016184:	0801c5ac 	.word	0x0801c5ac
 8016188:	0801cb70 	.word	0x0801cb70
 801618c:	0801c600 	.word	0x0801c600
 8016190:	0801cb90 	.word	0x0801cb90
 8016194:	0801cbb0 	.word	0x0801cbb0
 8016198:	240078a0 	.word	0x240078a0
 801619c:	0801cbd4 	.word	0x0801cbd4

080161a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80161a0:	b5b0      	push	{r4, r5, r7, lr}
 80161a2:	b084      	sub	sp, #16
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d106      	bne.n	80161bc <tcp_rexmit_rto_prepare+0x1c>
 80161ae:	4b31      	ldr	r3, [pc, #196]	; (8016274 <tcp_rexmit_rto_prepare+0xd4>)
 80161b0:	f240 6263 	movw	r2, #1635	; 0x663
 80161b4:	4930      	ldr	r1, [pc, #192]	; (8016278 <tcp_rexmit_rto_prepare+0xd8>)
 80161b6:	4831      	ldr	r0, [pc, #196]	; (801627c <tcp_rexmit_rto_prepare+0xdc>)
 80161b8:	f003 fdd4 	bl	8019d64 <iprintf>

  if (pcb->unacked == NULL) {
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d102      	bne.n	80161ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80161c4:	f06f 0305 	mvn.w	r3, #5
 80161c8:	e050      	b.n	801626c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161ce:	60fb      	str	r3, [r7, #12]
 80161d0:	e00b      	b.n	80161ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80161d2:	68f8      	ldr	r0, [r7, #12]
 80161d4:	f7ff fee6 	bl	8015fa4 <tcp_output_segment_busy>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d002      	beq.n	80161e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80161de:	f06f 0305 	mvn.w	r3, #5
 80161e2:	e043      	b.n	801626c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80161e4:	68fb      	ldr	r3, [r7, #12]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	60fb      	str	r3, [r7, #12]
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d1ef      	bne.n	80161d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80161f2:	68f8      	ldr	r0, [r7, #12]
 80161f4:	f7ff fed6 	bl	8015fa4 <tcp_output_segment_busy>
 80161f8:	4603      	mov	r3, r0
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d002      	beq.n	8016204 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80161fe:	f06f 0305 	mvn.w	r3, #5
 8016202:	e033      	b.n	801626c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	2200      	movs	r2, #0
 8016218:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	8b5b      	ldrh	r3, [r3, #26]
 801621e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016222:	b29a      	uxth	r2, r3
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	68db      	ldr	r3, [r3, #12]
 801622c:	685b      	ldr	r3, [r3, #4]
 801622e:	4618      	mov	r0, r3
 8016230:	f7f8 fcab 	bl	800eb8a <lwip_htonl>
 8016234:	4604      	mov	r4, r0
 8016236:	68fb      	ldr	r3, [r7, #12]
 8016238:	891b      	ldrh	r3, [r3, #8]
 801623a:	461d      	mov	r5, r3
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	68db      	ldr	r3, [r3, #12]
 8016240:	899b      	ldrh	r3, [r3, #12]
 8016242:	b29b      	uxth	r3, r3
 8016244:	4618      	mov	r0, r3
 8016246:	f7f8 fc8b 	bl	800eb60 <lwip_htons>
 801624a:	4603      	mov	r3, r0
 801624c:	b2db      	uxtb	r3, r3
 801624e:	f003 0303 	and.w	r3, r3, #3
 8016252:	2b00      	cmp	r3, #0
 8016254:	d001      	beq.n	801625a <tcp_rexmit_rto_prepare+0xba>
 8016256:	2301      	movs	r3, #1
 8016258:	e000      	b.n	801625c <tcp_rexmit_rto_prepare+0xbc>
 801625a:	2300      	movs	r3, #0
 801625c:	442b      	add	r3, r5
 801625e:	18e2      	adds	r2, r4, r3
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	2200      	movs	r2, #0
 8016268:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801626a:	2300      	movs	r3, #0
}
 801626c:	4618      	mov	r0, r3
 801626e:	3710      	adds	r7, #16
 8016270:	46bd      	mov	sp, r7
 8016272:	bdb0      	pop	{r4, r5, r7, pc}
 8016274:	0801c5ac 	.word	0x0801c5ac
 8016278:	0801cbe8 	.word	0x0801cbe8
 801627c:	0801c600 	.word	0x0801c600

08016280 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016280:	b580      	push	{r7, lr}
 8016282:	b082      	sub	sp, #8
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	2b00      	cmp	r3, #0
 801628c:	d106      	bne.n	801629c <tcp_rexmit_rto_commit+0x1c>
 801628e:	4b0d      	ldr	r3, [pc, #52]	; (80162c4 <tcp_rexmit_rto_commit+0x44>)
 8016290:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016294:	490c      	ldr	r1, [pc, #48]	; (80162c8 <tcp_rexmit_rto_commit+0x48>)
 8016296:	480d      	ldr	r0, [pc, #52]	; (80162cc <tcp_rexmit_rto_commit+0x4c>)
 8016298:	f003 fd64 	bl	8019d64 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801629c:	687b      	ldr	r3, [r7, #4]
 801629e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80162a2:	2bff      	cmp	r3, #255	; 0xff
 80162a4:	d007      	beq.n	80162b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80162ac:	3301      	adds	r3, #1
 80162ae:	b2da      	uxtb	r2, r3
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f7ff fc80 	bl	8015bbc <tcp_output>
}
 80162bc:	bf00      	nop
 80162be:	3708      	adds	r7, #8
 80162c0:	46bd      	mov	sp, r7
 80162c2:	bd80      	pop	{r7, pc}
 80162c4:	0801c5ac 	.word	0x0801c5ac
 80162c8:	0801cc0c 	.word	0x0801cc0c
 80162cc:	0801c600 	.word	0x0801c600

080162d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d106      	bne.n	80162ec <tcp_rexmit_rto+0x1c>
 80162de:	4b0a      	ldr	r3, [pc, #40]	; (8016308 <tcp_rexmit_rto+0x38>)
 80162e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80162e4:	4909      	ldr	r1, [pc, #36]	; (801630c <tcp_rexmit_rto+0x3c>)
 80162e6:	480a      	ldr	r0, [pc, #40]	; (8016310 <tcp_rexmit_rto+0x40>)
 80162e8:	f003 fd3c 	bl	8019d64 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80162ec:	6878      	ldr	r0, [r7, #4]
 80162ee:	f7ff ff57 	bl	80161a0 <tcp_rexmit_rto_prepare>
 80162f2:	4603      	mov	r3, r0
 80162f4:	2b00      	cmp	r3, #0
 80162f6:	d102      	bne.n	80162fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f7ff ffc1 	bl	8016280 <tcp_rexmit_rto_commit>
  }
}
 80162fe:	bf00      	nop
 8016300:	3708      	adds	r7, #8
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	0801c5ac 	.word	0x0801c5ac
 801630c:	0801cc30 	.word	0x0801cc30
 8016310:	0801c600 	.word	0x0801c600

08016314 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016314:	b590      	push	{r4, r7, lr}
 8016316:	b085      	sub	sp, #20
 8016318:	af00      	add	r7, sp, #0
 801631a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2b00      	cmp	r3, #0
 8016320:	d106      	bne.n	8016330 <tcp_rexmit+0x1c>
 8016322:	4b2f      	ldr	r3, [pc, #188]	; (80163e0 <tcp_rexmit+0xcc>)
 8016324:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016328:	492e      	ldr	r1, [pc, #184]	; (80163e4 <tcp_rexmit+0xd0>)
 801632a:	482f      	ldr	r0, [pc, #188]	; (80163e8 <tcp_rexmit+0xd4>)
 801632c:	f003 fd1a 	bl	8019d64 <iprintf>

  if (pcb->unacked == NULL) {
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016334:	2b00      	cmp	r3, #0
 8016336:	d102      	bne.n	801633e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016338:	f06f 0305 	mvn.w	r3, #5
 801633c:	e04c      	b.n	80163d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016342:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016344:	68b8      	ldr	r0, [r7, #8]
 8016346:	f7ff fe2d 	bl	8015fa4 <tcp_output_segment_busy>
 801634a:	4603      	mov	r3, r0
 801634c:	2b00      	cmp	r3, #0
 801634e:	d002      	beq.n	8016356 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016350:	f06f 0305 	mvn.w	r3, #5
 8016354:	e040      	b.n	80163d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	681a      	ldr	r2, [r3, #0]
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	336c      	adds	r3, #108	; 0x6c
 8016362:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016364:	e002      	b.n	801636c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2b00      	cmp	r3, #0
 8016372:	d011      	beq.n	8016398 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016374:	68fb      	ldr	r3, [r7, #12]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	68db      	ldr	r3, [r3, #12]
 801637a:	685b      	ldr	r3, [r3, #4]
 801637c:	4618      	mov	r0, r3
 801637e:	f7f8 fc04 	bl	800eb8a <lwip_htonl>
 8016382:	4604      	mov	r4, r0
 8016384:	68bb      	ldr	r3, [r7, #8]
 8016386:	68db      	ldr	r3, [r3, #12]
 8016388:	685b      	ldr	r3, [r3, #4]
 801638a:	4618      	mov	r0, r3
 801638c:	f7f8 fbfd 	bl	800eb8a <lwip_htonl>
 8016390:	4603      	mov	r3, r0
 8016392:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016394:	2b00      	cmp	r3, #0
 8016396:	dbe6      	blt.n	8016366 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	681a      	ldr	r2, [r3, #0]
 801639c:	68bb      	ldr	r3, [r7, #8]
 801639e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80163a0:	68fb      	ldr	r3, [r7, #12]
 80163a2:	68ba      	ldr	r2, [r7, #8]
 80163a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80163a6:	68bb      	ldr	r3, [r7, #8]
 80163a8:	681b      	ldr	r3, [r3, #0]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d103      	bne.n	80163b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	2200      	movs	r2, #0
 80163b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80163bc:	2bff      	cmp	r3, #255	; 0xff
 80163be:	d007      	beq.n	80163d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80163c6:	3301      	adds	r3, #1
 80163c8:	b2da      	uxtb	r2, r3
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	2200      	movs	r2, #0
 80163d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80163d6:	2300      	movs	r3, #0
}
 80163d8:	4618      	mov	r0, r3
 80163da:	3714      	adds	r7, #20
 80163dc:	46bd      	mov	sp, r7
 80163de:	bd90      	pop	{r4, r7, pc}
 80163e0:	0801c5ac 	.word	0x0801c5ac
 80163e4:	0801cc4c 	.word	0x0801cc4c
 80163e8:	0801c600 	.word	0x0801c600

080163ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80163ec:	b580      	push	{r7, lr}
 80163ee:	b082      	sub	sp, #8
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d106      	bne.n	8016408 <tcp_rexmit_fast+0x1c>
 80163fa:	4b2a      	ldr	r3, [pc, #168]	; (80164a4 <tcp_rexmit_fast+0xb8>)
 80163fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016400:	4929      	ldr	r1, [pc, #164]	; (80164a8 <tcp_rexmit_fast+0xbc>)
 8016402:	482a      	ldr	r0, [pc, #168]	; (80164ac <tcp_rexmit_fast+0xc0>)
 8016404:	f003 fcae 	bl	8019d64 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801640c:	2b00      	cmp	r3, #0
 801640e:	d045      	beq.n	801649c <tcp_rexmit_fast+0xb0>
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	8b5b      	ldrh	r3, [r3, #26]
 8016414:	f003 0304 	and.w	r3, r3, #4
 8016418:	2b00      	cmp	r3, #0
 801641a:	d13f      	bne.n	801649c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f7ff ff79 	bl	8016314 <tcp_rexmit>
 8016422:	4603      	mov	r3, r0
 8016424:	2b00      	cmp	r3, #0
 8016426:	d139      	bne.n	801649c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016434:	4293      	cmp	r3, r2
 8016436:	bf28      	it	cs
 8016438:	4613      	movcs	r3, r2
 801643a:	b29b      	uxth	r3, r3
 801643c:	2b00      	cmp	r3, #0
 801643e:	da00      	bge.n	8016442 <tcp_rexmit_fast+0x56>
 8016440:	3301      	adds	r3, #1
 8016442:	105b      	asrs	r3, r3, #1
 8016444:	b29a      	uxth	r2, r3
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016452:	461a      	mov	r2, r3
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016458:	005b      	lsls	r3, r3, #1
 801645a:	429a      	cmp	r2, r3
 801645c:	d206      	bcs.n	801646c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801645e:	687b      	ldr	r3, [r7, #4]
 8016460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016462:	005b      	lsls	r3, r3, #1
 8016464:	b29a      	uxth	r2, r3
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016476:	4619      	mov	r1, r3
 8016478:	0049      	lsls	r1, r1, #1
 801647a:	440b      	add	r3, r1
 801647c:	b29b      	uxth	r3, r3
 801647e:	4413      	add	r3, r2
 8016480:	b29a      	uxth	r2, r3
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	8b5b      	ldrh	r3, [r3, #26]
 801648c:	f043 0304 	orr.w	r3, r3, #4
 8016490:	b29a      	uxth	r2, r3
 8016492:	687b      	ldr	r3, [r7, #4]
 8016494:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016496:	687b      	ldr	r3, [r7, #4]
 8016498:	2200      	movs	r2, #0
 801649a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801649c:	bf00      	nop
 801649e:	3708      	adds	r7, #8
 80164a0:	46bd      	mov	sp, r7
 80164a2:	bd80      	pop	{r7, pc}
 80164a4:	0801c5ac 	.word	0x0801c5ac
 80164a8:	0801cc64 	.word	0x0801cc64
 80164ac:	0801c600 	.word	0x0801c600

080164b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b086      	sub	sp, #24
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	60f8      	str	r0, [r7, #12]
 80164b8:	607b      	str	r3, [r7, #4]
 80164ba:	460b      	mov	r3, r1
 80164bc:	817b      	strh	r3, [r7, #10]
 80164be:	4613      	mov	r3, r2
 80164c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80164c2:	897a      	ldrh	r2, [r7, #10]
 80164c4:	893b      	ldrh	r3, [r7, #8]
 80164c6:	4413      	add	r3, r2
 80164c8:	b29b      	uxth	r3, r3
 80164ca:	3314      	adds	r3, #20
 80164cc:	b29b      	uxth	r3, r3
 80164ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80164d2:	4619      	mov	r1, r3
 80164d4:	2022      	movs	r0, #34	; 0x22
 80164d6:	f7f9 fd09 	bl	800feec <pbuf_alloc>
 80164da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80164dc:	697b      	ldr	r3, [r7, #20]
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d04d      	beq.n	801657e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80164e2:	897b      	ldrh	r3, [r7, #10]
 80164e4:	3313      	adds	r3, #19
 80164e6:	697a      	ldr	r2, [r7, #20]
 80164e8:	8952      	ldrh	r2, [r2, #10]
 80164ea:	4293      	cmp	r3, r2
 80164ec:	db06      	blt.n	80164fc <tcp_output_alloc_header_common+0x4c>
 80164ee:	4b26      	ldr	r3, [pc, #152]	; (8016588 <tcp_output_alloc_header_common+0xd8>)
 80164f0:	f240 7223 	movw	r2, #1827	; 0x723
 80164f4:	4925      	ldr	r1, [pc, #148]	; (801658c <tcp_output_alloc_header_common+0xdc>)
 80164f6:	4826      	ldr	r0, [pc, #152]	; (8016590 <tcp_output_alloc_header_common+0xe0>)
 80164f8:	f003 fc34 	bl	8019d64 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	685b      	ldr	r3, [r3, #4]
 8016500:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016502:	8c3b      	ldrh	r3, [r7, #32]
 8016504:	4618      	mov	r0, r3
 8016506:	f7f8 fb2b 	bl	800eb60 <lwip_htons>
 801650a:	4603      	mov	r3, r0
 801650c:	461a      	mov	r2, r3
 801650e:	693b      	ldr	r3, [r7, #16]
 8016510:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016514:	4618      	mov	r0, r3
 8016516:	f7f8 fb23 	bl	800eb60 <lwip_htons>
 801651a:	4603      	mov	r3, r0
 801651c:	461a      	mov	r2, r3
 801651e:	693b      	ldr	r3, [r7, #16]
 8016520:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016522:	693b      	ldr	r3, [r7, #16]
 8016524:	687a      	ldr	r2, [r7, #4]
 8016526:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016528:	68f8      	ldr	r0, [r7, #12]
 801652a:	f7f8 fb2e 	bl	800eb8a <lwip_htonl>
 801652e:	4602      	mov	r2, r0
 8016530:	693b      	ldr	r3, [r7, #16]
 8016532:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016534:	897b      	ldrh	r3, [r7, #10]
 8016536:	089b      	lsrs	r3, r3, #2
 8016538:	b29b      	uxth	r3, r3
 801653a:	3305      	adds	r3, #5
 801653c:	b29b      	uxth	r3, r3
 801653e:	031b      	lsls	r3, r3, #12
 8016540:	b29a      	uxth	r2, r3
 8016542:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016546:	b29b      	uxth	r3, r3
 8016548:	4313      	orrs	r3, r2
 801654a:	b29b      	uxth	r3, r3
 801654c:	4618      	mov	r0, r3
 801654e:	f7f8 fb07 	bl	800eb60 <lwip_htons>
 8016552:	4603      	mov	r3, r0
 8016554:	461a      	mov	r2, r3
 8016556:	693b      	ldr	r3, [r7, #16]
 8016558:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801655a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801655c:	4618      	mov	r0, r3
 801655e:	f7f8 faff 	bl	800eb60 <lwip_htons>
 8016562:	4603      	mov	r3, r0
 8016564:	461a      	mov	r2, r3
 8016566:	693b      	ldr	r3, [r7, #16]
 8016568:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801656a:	693b      	ldr	r3, [r7, #16]
 801656c:	2200      	movs	r2, #0
 801656e:	741a      	strb	r2, [r3, #16]
 8016570:	2200      	movs	r2, #0
 8016572:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016574:	693b      	ldr	r3, [r7, #16]
 8016576:	2200      	movs	r2, #0
 8016578:	749a      	strb	r2, [r3, #18]
 801657a:	2200      	movs	r2, #0
 801657c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801657e:	697b      	ldr	r3, [r7, #20]
}
 8016580:	4618      	mov	r0, r3
 8016582:	3718      	adds	r7, #24
 8016584:	46bd      	mov	sp, r7
 8016586:	bd80      	pop	{r7, pc}
 8016588:	0801c5ac 	.word	0x0801c5ac
 801658c:	0801cc84 	.word	0x0801cc84
 8016590:	0801c600 	.word	0x0801c600

08016594 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016594:	b5b0      	push	{r4, r5, r7, lr}
 8016596:	b08a      	sub	sp, #40	; 0x28
 8016598:	af04      	add	r7, sp, #16
 801659a:	60f8      	str	r0, [r7, #12]
 801659c:	607b      	str	r3, [r7, #4]
 801659e:	460b      	mov	r3, r1
 80165a0:	817b      	strh	r3, [r7, #10]
 80165a2:	4613      	mov	r3, r2
 80165a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d106      	bne.n	80165ba <tcp_output_alloc_header+0x26>
 80165ac:	4b15      	ldr	r3, [pc, #84]	; (8016604 <tcp_output_alloc_header+0x70>)
 80165ae:	f240 7242 	movw	r2, #1858	; 0x742
 80165b2:	4915      	ldr	r1, [pc, #84]	; (8016608 <tcp_output_alloc_header+0x74>)
 80165b4:	4815      	ldr	r0, [pc, #84]	; (801660c <tcp_output_alloc_header+0x78>)
 80165b6:	f003 fbd5 	bl	8019d64 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80165be:	68fb      	ldr	r3, [r7, #12]
 80165c0:	8adb      	ldrh	r3, [r3, #22]
 80165c2:	68fa      	ldr	r2, [r7, #12]
 80165c4:	8b12      	ldrh	r2, [r2, #24]
 80165c6:	68f9      	ldr	r1, [r7, #12]
 80165c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80165ca:	893d      	ldrh	r5, [r7, #8]
 80165cc:	897c      	ldrh	r4, [r7, #10]
 80165ce:	9103      	str	r1, [sp, #12]
 80165d0:	2110      	movs	r1, #16
 80165d2:	9102      	str	r1, [sp, #8]
 80165d4:	9201      	str	r2, [sp, #4]
 80165d6:	9300      	str	r3, [sp, #0]
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	462a      	mov	r2, r5
 80165dc:	4621      	mov	r1, r4
 80165de:	f7ff ff67 	bl	80164b0 <tcp_output_alloc_header_common>
 80165e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80165e4:	697b      	ldr	r3, [r7, #20]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d006      	beq.n	80165f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80165ea:	68fb      	ldr	r3, [r7, #12]
 80165ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80165ee:	68fa      	ldr	r2, [r7, #12]
 80165f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80165f2:	441a      	add	r2, r3
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80165f8:	697b      	ldr	r3, [r7, #20]
}
 80165fa:	4618      	mov	r0, r3
 80165fc:	3718      	adds	r7, #24
 80165fe:	46bd      	mov	sp, r7
 8016600:	bdb0      	pop	{r4, r5, r7, pc}
 8016602:	bf00      	nop
 8016604:	0801c5ac 	.word	0x0801c5ac
 8016608:	0801ccb4 	.word	0x0801ccb4
 801660c:	0801c600 	.word	0x0801c600

08016610 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b088      	sub	sp, #32
 8016614:	af00      	add	r7, sp, #0
 8016616:	60f8      	str	r0, [r7, #12]
 8016618:	60b9      	str	r1, [r7, #8]
 801661a:	4611      	mov	r1, r2
 801661c:	461a      	mov	r2, r3
 801661e:	460b      	mov	r3, r1
 8016620:	71fb      	strb	r3, [r7, #7]
 8016622:	4613      	mov	r3, r2
 8016624:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016626:	2300      	movs	r3, #0
 8016628:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801662a:	68bb      	ldr	r3, [r7, #8]
 801662c:	2b00      	cmp	r3, #0
 801662e:	d106      	bne.n	801663e <tcp_output_fill_options+0x2e>
 8016630:	4b13      	ldr	r3, [pc, #76]	; (8016680 <tcp_output_fill_options+0x70>)
 8016632:	f240 7256 	movw	r2, #1878	; 0x756
 8016636:	4913      	ldr	r1, [pc, #76]	; (8016684 <tcp_output_fill_options+0x74>)
 8016638:	4813      	ldr	r0, [pc, #76]	; (8016688 <tcp_output_fill_options+0x78>)
 801663a:	f003 fb93 	bl	8019d64 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801663e:	68bb      	ldr	r3, [r7, #8]
 8016640:	685b      	ldr	r3, [r3, #4]
 8016642:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016644:	69bb      	ldr	r3, [r7, #24]
 8016646:	3314      	adds	r3, #20
 8016648:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801664a:	69bb      	ldr	r3, [r7, #24]
 801664c:	f103 0214 	add.w	r2, r3, #20
 8016650:	8bfb      	ldrh	r3, [r7, #30]
 8016652:	009b      	lsls	r3, r3, #2
 8016654:	4619      	mov	r1, r3
 8016656:	79fb      	ldrb	r3, [r7, #7]
 8016658:	009b      	lsls	r3, r3, #2
 801665a:	f003 0304 	and.w	r3, r3, #4
 801665e:	440b      	add	r3, r1
 8016660:	4413      	add	r3, r2
 8016662:	697a      	ldr	r2, [r7, #20]
 8016664:	429a      	cmp	r2, r3
 8016666:	d006      	beq.n	8016676 <tcp_output_fill_options+0x66>
 8016668:	4b05      	ldr	r3, [pc, #20]	; (8016680 <tcp_output_fill_options+0x70>)
 801666a:	f240 7275 	movw	r2, #1909	; 0x775
 801666e:	4907      	ldr	r1, [pc, #28]	; (801668c <tcp_output_fill_options+0x7c>)
 8016670:	4805      	ldr	r0, [pc, #20]	; (8016688 <tcp_output_fill_options+0x78>)
 8016672:	f003 fb77 	bl	8019d64 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016676:	bf00      	nop
 8016678:	3720      	adds	r7, #32
 801667a:	46bd      	mov	sp, r7
 801667c:	bd80      	pop	{r7, pc}
 801667e:	bf00      	nop
 8016680:	0801c5ac 	.word	0x0801c5ac
 8016684:	0801ccdc 	.word	0x0801ccdc
 8016688:	0801c600 	.word	0x0801c600
 801668c:	0801cbd4 	.word	0x0801cbd4

08016690 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016690:	b580      	push	{r7, lr}
 8016692:	b08a      	sub	sp, #40	; 0x28
 8016694:	af04      	add	r7, sp, #16
 8016696:	60f8      	str	r0, [r7, #12]
 8016698:	60b9      	str	r1, [r7, #8]
 801669a:	607a      	str	r2, [r7, #4]
 801669c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801669e:	68bb      	ldr	r3, [r7, #8]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d106      	bne.n	80166b2 <tcp_output_control_segment+0x22>
 80166a4:	4b1c      	ldr	r3, [pc, #112]	; (8016718 <tcp_output_control_segment+0x88>)
 80166a6:	f240 7287 	movw	r2, #1927	; 0x787
 80166aa:	491c      	ldr	r1, [pc, #112]	; (801671c <tcp_output_control_segment+0x8c>)
 80166ac:	481c      	ldr	r0, [pc, #112]	; (8016720 <tcp_output_control_segment+0x90>)
 80166ae:	f003 fb59 	bl	8019d64 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80166b2:	683a      	ldr	r2, [r7, #0]
 80166b4:	6879      	ldr	r1, [r7, #4]
 80166b6:	68f8      	ldr	r0, [r7, #12]
 80166b8:	f7fe fae8 	bl	8014c8c <tcp_route>
 80166bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80166be:	693b      	ldr	r3, [r7, #16]
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d102      	bne.n	80166ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80166c4:	23fc      	movs	r3, #252	; 0xfc
 80166c6:	75fb      	strb	r3, [r7, #23]
 80166c8:	e01c      	b.n	8016704 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80166ca:	68fb      	ldr	r3, [r7, #12]
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d006      	beq.n	80166de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80166d0:	68fb      	ldr	r3, [r7, #12]
 80166d2:	7adb      	ldrb	r3, [r3, #11]
 80166d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	7a9b      	ldrb	r3, [r3, #10]
 80166da:	757b      	strb	r3, [r7, #21]
 80166dc:	e003      	b.n	80166e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80166de:	23ff      	movs	r3, #255	; 0xff
 80166e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80166e2:	2300      	movs	r3, #0
 80166e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80166e6:	7dba      	ldrb	r2, [r7, #22]
 80166e8:	693b      	ldr	r3, [r7, #16]
 80166ea:	9302      	str	r3, [sp, #8]
 80166ec:	2306      	movs	r3, #6
 80166ee:	9301      	str	r3, [sp, #4]
 80166f0:	7d7b      	ldrb	r3, [r7, #21]
 80166f2:	9300      	str	r3, [sp, #0]
 80166f4:	4613      	mov	r3, r2
 80166f6:	683a      	ldr	r2, [r7, #0]
 80166f8:	6879      	ldr	r1, [r7, #4]
 80166fa:	68b8      	ldr	r0, [r7, #8]
 80166fc:	f001 ffc6 	bl	801868c <ip4_output_if>
 8016700:	4603      	mov	r3, r0
 8016702:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016704:	68b8      	ldr	r0, [r7, #8]
 8016706:	f7f9 fed5 	bl	80104b4 <pbuf_free>
  return err;
 801670a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801670e:	4618      	mov	r0, r3
 8016710:	3718      	adds	r7, #24
 8016712:	46bd      	mov	sp, r7
 8016714:	bd80      	pop	{r7, pc}
 8016716:	bf00      	nop
 8016718:	0801c5ac 	.word	0x0801c5ac
 801671c:	0801cd04 	.word	0x0801cd04
 8016720:	0801c600 	.word	0x0801c600

08016724 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016724:	b590      	push	{r4, r7, lr}
 8016726:	b08b      	sub	sp, #44	; 0x2c
 8016728:	af04      	add	r7, sp, #16
 801672a:	60f8      	str	r0, [r7, #12]
 801672c:	60b9      	str	r1, [r7, #8]
 801672e:	607a      	str	r2, [r7, #4]
 8016730:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016732:	683b      	ldr	r3, [r7, #0]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d106      	bne.n	8016746 <tcp_rst+0x22>
 8016738:	4b1f      	ldr	r3, [pc, #124]	; (80167b8 <tcp_rst+0x94>)
 801673a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801673e:	491f      	ldr	r1, [pc, #124]	; (80167bc <tcp_rst+0x98>)
 8016740:	481f      	ldr	r0, [pc, #124]	; (80167c0 <tcp_rst+0x9c>)
 8016742:	f003 fb0f 	bl	8019d64 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016748:	2b00      	cmp	r3, #0
 801674a:	d106      	bne.n	801675a <tcp_rst+0x36>
 801674c:	4b1a      	ldr	r3, [pc, #104]	; (80167b8 <tcp_rst+0x94>)
 801674e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016752:	491c      	ldr	r1, [pc, #112]	; (80167c4 <tcp_rst+0xa0>)
 8016754:	481a      	ldr	r0, [pc, #104]	; (80167c0 <tcp_rst+0x9c>)
 8016756:	f003 fb05 	bl	8019d64 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801675a:	2300      	movs	r3, #0
 801675c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801675e:	f246 0308 	movw	r3, #24584	; 0x6008
 8016762:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016764:	7dfb      	ldrb	r3, [r7, #23]
 8016766:	b29c      	uxth	r4, r3
 8016768:	68b8      	ldr	r0, [r7, #8]
 801676a:	f7f8 fa0e 	bl	800eb8a <lwip_htonl>
 801676e:	4602      	mov	r2, r0
 8016770:	8abb      	ldrh	r3, [r7, #20]
 8016772:	9303      	str	r3, [sp, #12]
 8016774:	2314      	movs	r3, #20
 8016776:	9302      	str	r3, [sp, #8]
 8016778:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801677a:	9301      	str	r3, [sp, #4]
 801677c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801677e:	9300      	str	r3, [sp, #0]
 8016780:	4613      	mov	r3, r2
 8016782:	2200      	movs	r2, #0
 8016784:	4621      	mov	r1, r4
 8016786:	6878      	ldr	r0, [r7, #4]
 8016788:	f7ff fe92 	bl	80164b0 <tcp_output_alloc_header_common>
 801678c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801678e:	693b      	ldr	r3, [r7, #16]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d00c      	beq.n	80167ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016794:	7dfb      	ldrb	r3, [r7, #23]
 8016796:	2200      	movs	r2, #0
 8016798:	6939      	ldr	r1, [r7, #16]
 801679a:	68f8      	ldr	r0, [r7, #12]
 801679c:	f7ff ff38 	bl	8016610 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80167a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80167a2:	683a      	ldr	r2, [r7, #0]
 80167a4:	6939      	ldr	r1, [r7, #16]
 80167a6:	68f8      	ldr	r0, [r7, #12]
 80167a8:	f7ff ff72 	bl	8016690 <tcp_output_control_segment>
 80167ac:	e000      	b.n	80167b0 <tcp_rst+0x8c>
    return;
 80167ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80167b0:	371c      	adds	r7, #28
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd90      	pop	{r4, r7, pc}
 80167b6:	bf00      	nop
 80167b8:	0801c5ac 	.word	0x0801c5ac
 80167bc:	0801cd30 	.word	0x0801cd30
 80167c0:	0801c600 	.word	0x0801c600
 80167c4:	0801cd4c 	.word	0x0801cd4c

080167c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80167c8:	b590      	push	{r4, r7, lr}
 80167ca:	b087      	sub	sp, #28
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80167d0:	2300      	movs	r3, #0
 80167d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80167d4:	2300      	movs	r3, #0
 80167d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d106      	bne.n	80167ec <tcp_send_empty_ack+0x24>
 80167de:	4b28      	ldr	r3, [pc, #160]	; (8016880 <tcp_send_empty_ack+0xb8>)
 80167e0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80167e4:	4927      	ldr	r1, [pc, #156]	; (8016884 <tcp_send_empty_ack+0xbc>)
 80167e6:	4828      	ldr	r0, [pc, #160]	; (8016888 <tcp_send_empty_ack+0xc0>)
 80167e8:	f003 fabc 	bl	8019d64 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80167ec:	7dfb      	ldrb	r3, [r7, #23]
 80167ee:	009b      	lsls	r3, r3, #2
 80167f0:	b2db      	uxtb	r3, r3
 80167f2:	f003 0304 	and.w	r3, r3, #4
 80167f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80167f8:	7d7b      	ldrb	r3, [r7, #21]
 80167fa:	b29c      	uxth	r4, r3
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016800:	4618      	mov	r0, r3
 8016802:	f7f8 f9c2 	bl	800eb8a <lwip_htonl>
 8016806:	4603      	mov	r3, r0
 8016808:	2200      	movs	r2, #0
 801680a:	4621      	mov	r1, r4
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	f7ff fec1 	bl	8016594 <tcp_output_alloc_header>
 8016812:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	2b00      	cmp	r3, #0
 8016818:	d109      	bne.n	801682e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	8b5b      	ldrh	r3, [r3, #26]
 801681e:	f043 0303 	orr.w	r3, r3, #3
 8016822:	b29a      	uxth	r2, r3
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016828:	f06f 0301 	mvn.w	r3, #1
 801682c:	e023      	b.n	8016876 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801682e:	7dbb      	ldrb	r3, [r7, #22]
 8016830:	7dfa      	ldrb	r2, [r7, #23]
 8016832:	6939      	ldr	r1, [r7, #16]
 8016834:	6878      	ldr	r0, [r7, #4]
 8016836:	f7ff feeb 	bl	8016610 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801683a:	687a      	ldr	r2, [r7, #4]
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	3304      	adds	r3, #4
 8016840:	6939      	ldr	r1, [r7, #16]
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7ff ff24 	bl	8016690 <tcp_output_control_segment>
 8016848:	4603      	mov	r3, r0
 801684a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801684c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016850:	2b00      	cmp	r3, #0
 8016852:	d007      	beq.n	8016864 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	8b5b      	ldrh	r3, [r3, #26]
 8016858:	f043 0303 	orr.w	r3, r3, #3
 801685c:	b29a      	uxth	r2, r3
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	835a      	strh	r2, [r3, #26]
 8016862:	e006      	b.n	8016872 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	8b5b      	ldrh	r3, [r3, #26]
 8016868:	f023 0303 	bic.w	r3, r3, #3
 801686c:	b29a      	uxth	r2, r3
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016872:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016876:	4618      	mov	r0, r3
 8016878:	371c      	adds	r7, #28
 801687a:	46bd      	mov	sp, r7
 801687c:	bd90      	pop	{r4, r7, pc}
 801687e:	bf00      	nop
 8016880:	0801c5ac 	.word	0x0801c5ac
 8016884:	0801cd68 	.word	0x0801cd68
 8016888:	0801c600 	.word	0x0801c600

0801688c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801688c:	b590      	push	{r4, r7, lr}
 801688e:	b087      	sub	sp, #28
 8016890:	af00      	add	r7, sp, #0
 8016892:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016894:	2300      	movs	r3, #0
 8016896:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d106      	bne.n	80168ac <tcp_keepalive+0x20>
 801689e:	4b18      	ldr	r3, [pc, #96]	; (8016900 <tcp_keepalive+0x74>)
 80168a0:	f640 0224 	movw	r2, #2084	; 0x824
 80168a4:	4917      	ldr	r1, [pc, #92]	; (8016904 <tcp_keepalive+0x78>)
 80168a6:	4818      	ldr	r0, [pc, #96]	; (8016908 <tcp_keepalive+0x7c>)
 80168a8:	f003 fa5c 	bl	8019d64 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80168ac:	7dfb      	ldrb	r3, [r7, #23]
 80168ae:	b29c      	uxth	r4, r3
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80168b4:	3b01      	subs	r3, #1
 80168b6:	4618      	mov	r0, r3
 80168b8:	f7f8 f967 	bl	800eb8a <lwip_htonl>
 80168bc:	4603      	mov	r3, r0
 80168be:	2200      	movs	r2, #0
 80168c0:	4621      	mov	r1, r4
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f7ff fe66 	bl	8016594 <tcp_output_alloc_header>
 80168c8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d102      	bne.n	80168d6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80168d0:	f04f 33ff 	mov.w	r3, #4294967295
 80168d4:	e010      	b.n	80168f8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80168d6:	7dfb      	ldrb	r3, [r7, #23]
 80168d8:	2200      	movs	r2, #0
 80168da:	6939      	ldr	r1, [r7, #16]
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f7ff fe97 	bl	8016610 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80168e2:	687a      	ldr	r2, [r7, #4]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	3304      	adds	r3, #4
 80168e8:	6939      	ldr	r1, [r7, #16]
 80168ea:	6878      	ldr	r0, [r7, #4]
 80168ec:	f7ff fed0 	bl	8016690 <tcp_output_control_segment>
 80168f0:	4603      	mov	r3, r0
 80168f2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80168f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80168f8:	4618      	mov	r0, r3
 80168fa:	371c      	adds	r7, #28
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd90      	pop	{r4, r7, pc}
 8016900:	0801c5ac 	.word	0x0801c5ac
 8016904:	0801cd88 	.word	0x0801cd88
 8016908:	0801c600 	.word	0x0801c600

0801690c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801690c:	b590      	push	{r4, r7, lr}
 801690e:	b08b      	sub	sp, #44	; 0x2c
 8016910:	af00      	add	r7, sp, #0
 8016912:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016914:	2300      	movs	r3, #0
 8016916:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	2b00      	cmp	r3, #0
 801691e:	d106      	bne.n	801692e <tcp_zero_window_probe+0x22>
 8016920:	4b4c      	ldr	r3, [pc, #304]	; (8016a54 <tcp_zero_window_probe+0x148>)
 8016922:	f640 024f 	movw	r2, #2127	; 0x84f
 8016926:	494c      	ldr	r1, [pc, #304]	; (8016a58 <tcp_zero_window_probe+0x14c>)
 8016928:	484c      	ldr	r0, [pc, #304]	; (8016a5c <tcp_zero_window_probe+0x150>)
 801692a:	f003 fa1b 	bl	8019d64 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016932:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016934:	6a3b      	ldr	r3, [r7, #32]
 8016936:	2b00      	cmp	r3, #0
 8016938:	d101      	bne.n	801693e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801693a:	2300      	movs	r3, #0
 801693c:	e086      	b.n	8016a4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016944:	2bff      	cmp	r3, #255	; 0xff
 8016946:	d007      	beq.n	8016958 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801694e:	3301      	adds	r3, #1
 8016950:	b2da      	uxtb	r2, r3
 8016952:	687b      	ldr	r3, [r7, #4]
 8016954:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016958:	6a3b      	ldr	r3, [r7, #32]
 801695a:	68db      	ldr	r3, [r3, #12]
 801695c:	899b      	ldrh	r3, [r3, #12]
 801695e:	b29b      	uxth	r3, r3
 8016960:	4618      	mov	r0, r3
 8016962:	f7f8 f8fd 	bl	800eb60 <lwip_htons>
 8016966:	4603      	mov	r3, r0
 8016968:	b2db      	uxtb	r3, r3
 801696a:	f003 0301 	and.w	r3, r3, #1
 801696e:	2b00      	cmp	r3, #0
 8016970:	d005      	beq.n	801697e <tcp_zero_window_probe+0x72>
 8016972:	6a3b      	ldr	r3, [r7, #32]
 8016974:	891b      	ldrh	r3, [r3, #8]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d101      	bne.n	801697e <tcp_zero_window_probe+0x72>
 801697a:	2301      	movs	r3, #1
 801697c:	e000      	b.n	8016980 <tcp_zero_window_probe+0x74>
 801697e:	2300      	movs	r3, #0
 8016980:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016982:	7ffb      	ldrb	r3, [r7, #31]
 8016984:	2b00      	cmp	r3, #0
 8016986:	bf0c      	ite	eq
 8016988:	2301      	moveq	r3, #1
 801698a:	2300      	movne	r3, #0
 801698c:	b2db      	uxtb	r3, r3
 801698e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016994:	b299      	uxth	r1, r3
 8016996:	6a3b      	ldr	r3, [r7, #32]
 8016998:	68db      	ldr	r3, [r3, #12]
 801699a:	685b      	ldr	r3, [r3, #4]
 801699c:	8bba      	ldrh	r2, [r7, #28]
 801699e:	6878      	ldr	r0, [r7, #4]
 80169a0:	f7ff fdf8 	bl	8016594 <tcp_output_alloc_header>
 80169a4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80169a6:	69bb      	ldr	r3, [r7, #24]
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d102      	bne.n	80169b2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80169ac:	f04f 33ff 	mov.w	r3, #4294967295
 80169b0:	e04c      	b.n	8016a4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80169b2:	69bb      	ldr	r3, [r7, #24]
 80169b4:	685b      	ldr	r3, [r3, #4]
 80169b6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80169b8:	7ffb      	ldrb	r3, [r7, #31]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d011      	beq.n	80169e2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80169be:	697b      	ldr	r3, [r7, #20]
 80169c0:	899b      	ldrh	r3, [r3, #12]
 80169c2:	b29b      	uxth	r3, r3
 80169c4:	b21b      	sxth	r3, r3
 80169c6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80169ca:	b21c      	sxth	r4, r3
 80169cc:	2011      	movs	r0, #17
 80169ce:	f7f8 f8c7 	bl	800eb60 <lwip_htons>
 80169d2:	4603      	mov	r3, r0
 80169d4:	b21b      	sxth	r3, r3
 80169d6:	4323      	orrs	r3, r4
 80169d8:	b21b      	sxth	r3, r3
 80169da:	b29a      	uxth	r2, r3
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	819a      	strh	r2, [r3, #12]
 80169e0:	e010      	b.n	8016a04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80169e2:	69bb      	ldr	r3, [r7, #24]
 80169e4:	685b      	ldr	r3, [r3, #4]
 80169e6:	3314      	adds	r3, #20
 80169e8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80169ea:	6a3b      	ldr	r3, [r7, #32]
 80169ec:	6858      	ldr	r0, [r3, #4]
 80169ee:	6a3b      	ldr	r3, [r7, #32]
 80169f0:	685b      	ldr	r3, [r3, #4]
 80169f2:	891a      	ldrh	r2, [r3, #8]
 80169f4:	6a3b      	ldr	r3, [r7, #32]
 80169f6:	891b      	ldrh	r3, [r3, #8]
 80169f8:	1ad3      	subs	r3, r2, r3
 80169fa:	b29b      	uxth	r3, r3
 80169fc:	2201      	movs	r2, #1
 80169fe:	6939      	ldr	r1, [r7, #16]
 8016a00:	f7f9 ff5e 	bl	80108c0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016a04:	6a3b      	ldr	r3, [r7, #32]
 8016a06:	68db      	ldr	r3, [r3, #12]
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	f7f8 f8bd 	bl	800eb8a <lwip_htonl>
 8016a10:	4603      	mov	r3, r0
 8016a12:	3301      	adds	r3, #1
 8016a14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	1ad3      	subs	r3, r2, r3
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	da02      	bge.n	8016a28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	68fa      	ldr	r2, [r7, #12]
 8016a26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016a2c:	2200      	movs	r2, #0
 8016a2e:	69b9      	ldr	r1, [r7, #24]
 8016a30:	6878      	ldr	r0, [r7, #4]
 8016a32:	f7ff fded 	bl	8016610 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016a36:	687a      	ldr	r2, [r7, #4]
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	3304      	adds	r3, #4
 8016a3c:	69b9      	ldr	r1, [r7, #24]
 8016a3e:	6878      	ldr	r0, [r7, #4]
 8016a40:	f7ff fe26 	bl	8016690 <tcp_output_control_segment>
 8016a44:	4603      	mov	r3, r0
 8016a46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016a48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	372c      	adds	r7, #44	; 0x2c
 8016a50:	46bd      	mov	sp, r7
 8016a52:	bd90      	pop	{r4, r7, pc}
 8016a54:	0801c5ac 	.word	0x0801c5ac
 8016a58:	0801cda4 	.word	0x0801cda4
 8016a5c:	0801c600 	.word	0x0801c600

08016a60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016a60:	b580      	push	{r7, lr}
 8016a62:	b082      	sub	sp, #8
 8016a64:	af00      	add	r7, sp, #0
 8016a66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016a68:	f7fa f818 	bl	8010a9c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016a6c:	4b0a      	ldr	r3, [pc, #40]	; (8016a98 <tcpip_tcp_timer+0x38>)
 8016a6e:	681b      	ldr	r3, [r3, #0]
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d103      	bne.n	8016a7c <tcpip_tcp_timer+0x1c>
 8016a74:	4b09      	ldr	r3, [pc, #36]	; (8016a9c <tcpip_tcp_timer+0x3c>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	2b00      	cmp	r3, #0
 8016a7a:	d005      	beq.n	8016a88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	4908      	ldr	r1, [pc, #32]	; (8016aa0 <tcpip_tcp_timer+0x40>)
 8016a80:	20fa      	movs	r0, #250	; 0xfa
 8016a82:	f000 f8f3 	bl	8016c6c <sys_timeout>
 8016a86:	e003      	b.n	8016a90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016a88:	4b06      	ldr	r3, [pc, #24]	; (8016aa4 <tcpip_tcp_timer+0x44>)
 8016a8a:	2200      	movs	r2, #0
 8016a8c:	601a      	str	r2, [r3, #0]
  }
}
 8016a8e:	bf00      	nop
 8016a90:	bf00      	nop
 8016a92:	3708      	adds	r7, #8
 8016a94:	46bd      	mov	sp, r7
 8016a96:	bd80      	pop	{r7, pc}
 8016a98:	2400789c 	.word	0x2400789c
 8016a9c:	240078ac 	.word	0x240078ac
 8016aa0:	08016a61 	.word	0x08016a61
 8016aa4:	24004174 	.word	0x24004174

08016aa8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016aac:	4b0a      	ldr	r3, [pc, #40]	; (8016ad8 <tcp_timer_needed+0x30>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d10f      	bne.n	8016ad4 <tcp_timer_needed+0x2c>
 8016ab4:	4b09      	ldr	r3, [pc, #36]	; (8016adc <tcp_timer_needed+0x34>)
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	2b00      	cmp	r3, #0
 8016aba:	d103      	bne.n	8016ac4 <tcp_timer_needed+0x1c>
 8016abc:	4b08      	ldr	r3, [pc, #32]	; (8016ae0 <tcp_timer_needed+0x38>)
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d007      	beq.n	8016ad4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016ac4:	4b04      	ldr	r3, [pc, #16]	; (8016ad8 <tcp_timer_needed+0x30>)
 8016ac6:	2201      	movs	r2, #1
 8016ac8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016aca:	2200      	movs	r2, #0
 8016acc:	4905      	ldr	r1, [pc, #20]	; (8016ae4 <tcp_timer_needed+0x3c>)
 8016ace:	20fa      	movs	r0, #250	; 0xfa
 8016ad0:	f000 f8cc 	bl	8016c6c <sys_timeout>
  }
}
 8016ad4:	bf00      	nop
 8016ad6:	bd80      	pop	{r7, pc}
 8016ad8:	24004174 	.word	0x24004174
 8016adc:	2400789c 	.word	0x2400789c
 8016ae0:	240078ac 	.word	0x240078ac
 8016ae4:	08016a61 	.word	0x08016a61

08016ae8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016ae8:	b580      	push	{r7, lr}
 8016aea:	b086      	sub	sp, #24
 8016aec:	af00      	add	r7, sp, #0
 8016aee:	60f8      	str	r0, [r7, #12]
 8016af0:	60b9      	str	r1, [r7, #8]
 8016af2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016af4:	200a      	movs	r0, #10
 8016af6:	f7f8 fdc3 	bl	800f680 <memp_malloc>
 8016afa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d109      	bne.n	8016b16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016b02:	693b      	ldr	r3, [r7, #16]
 8016b04:	2b00      	cmp	r3, #0
 8016b06:	d151      	bne.n	8016bac <sys_timeout_abs+0xc4>
 8016b08:	4b2a      	ldr	r3, [pc, #168]	; (8016bb4 <sys_timeout_abs+0xcc>)
 8016b0a:	22be      	movs	r2, #190	; 0xbe
 8016b0c:	492a      	ldr	r1, [pc, #168]	; (8016bb8 <sys_timeout_abs+0xd0>)
 8016b0e:	482b      	ldr	r0, [pc, #172]	; (8016bbc <sys_timeout_abs+0xd4>)
 8016b10:	f003 f928 	bl	8019d64 <iprintf>
    return;
 8016b14:	e04a      	b.n	8016bac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016b16:	693b      	ldr	r3, [r7, #16]
 8016b18:	2200      	movs	r2, #0
 8016b1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016b1c:	693b      	ldr	r3, [r7, #16]
 8016b1e:	68ba      	ldr	r2, [r7, #8]
 8016b20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	687a      	ldr	r2, [r7, #4]
 8016b26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016b28:	693b      	ldr	r3, [r7, #16]
 8016b2a:	68fa      	ldr	r2, [r7, #12]
 8016b2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016b2e:	4b24      	ldr	r3, [pc, #144]	; (8016bc0 <sys_timeout_abs+0xd8>)
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d103      	bne.n	8016b3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016b36:	4a22      	ldr	r2, [pc, #136]	; (8016bc0 <sys_timeout_abs+0xd8>)
 8016b38:	693b      	ldr	r3, [r7, #16]
 8016b3a:	6013      	str	r3, [r2, #0]
    return;
 8016b3c:	e037      	b.n	8016bae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016b3e:	693b      	ldr	r3, [r7, #16]
 8016b40:	685a      	ldr	r2, [r3, #4]
 8016b42:	4b1f      	ldr	r3, [pc, #124]	; (8016bc0 <sys_timeout_abs+0xd8>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	685b      	ldr	r3, [r3, #4]
 8016b48:	1ad3      	subs	r3, r2, r3
 8016b4a:	0fdb      	lsrs	r3, r3, #31
 8016b4c:	f003 0301 	and.w	r3, r3, #1
 8016b50:	b2db      	uxtb	r3, r3
 8016b52:	2b00      	cmp	r3, #0
 8016b54:	d007      	beq.n	8016b66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016b56:	4b1a      	ldr	r3, [pc, #104]	; (8016bc0 <sys_timeout_abs+0xd8>)
 8016b58:	681a      	ldr	r2, [r3, #0]
 8016b5a:	693b      	ldr	r3, [r7, #16]
 8016b5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016b5e:	4a18      	ldr	r2, [pc, #96]	; (8016bc0 <sys_timeout_abs+0xd8>)
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	6013      	str	r3, [r2, #0]
 8016b64:	e023      	b.n	8016bae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016b66:	4b16      	ldr	r3, [pc, #88]	; (8016bc0 <sys_timeout_abs+0xd8>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	617b      	str	r3, [r7, #20]
 8016b6c:	e01a      	b.n	8016ba4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	681b      	ldr	r3, [r3, #0]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d00b      	beq.n	8016b8e <sys_timeout_abs+0xa6>
 8016b76:	693b      	ldr	r3, [r7, #16]
 8016b78:	685a      	ldr	r2, [r3, #4]
 8016b7a:	697b      	ldr	r3, [r7, #20]
 8016b7c:	681b      	ldr	r3, [r3, #0]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	1ad3      	subs	r3, r2, r3
 8016b82:	0fdb      	lsrs	r3, r3, #31
 8016b84:	f003 0301 	and.w	r3, r3, #1
 8016b88:	b2db      	uxtb	r3, r3
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	d007      	beq.n	8016b9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	681a      	ldr	r2, [r3, #0]
 8016b92:	693b      	ldr	r3, [r7, #16]
 8016b94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016b96:	697b      	ldr	r3, [r7, #20]
 8016b98:	693a      	ldr	r2, [r7, #16]
 8016b9a:	601a      	str	r2, [r3, #0]
        break;
 8016b9c:	e007      	b.n	8016bae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	617b      	str	r3, [r7, #20]
 8016ba4:	697b      	ldr	r3, [r7, #20]
 8016ba6:	2b00      	cmp	r3, #0
 8016ba8:	d1e1      	bne.n	8016b6e <sys_timeout_abs+0x86>
 8016baa:	e000      	b.n	8016bae <sys_timeout_abs+0xc6>
    return;
 8016bac:	bf00      	nop
      }
    }
  }
}
 8016bae:	3718      	adds	r7, #24
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}
 8016bb4:	0801cdc8 	.word	0x0801cdc8
 8016bb8:	0801cdfc 	.word	0x0801cdfc
 8016bbc:	0801ce3c 	.word	0x0801ce3c
 8016bc0:	2400416c 	.word	0x2400416c

08016bc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b086      	sub	sp, #24
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016bd0:	697b      	ldr	r3, [r7, #20]
 8016bd2:	685b      	ldr	r3, [r3, #4]
 8016bd4:	4798      	blx	r3

  now = sys_now();
 8016bd6:	f7f4 fdc7 	bl	800b768 <sys_now>
 8016bda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	681a      	ldr	r2, [r3, #0]
 8016be0:	4b0f      	ldr	r3, [pc, #60]	; (8016c20 <lwip_cyclic_timer+0x5c>)
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	4413      	add	r3, r2
 8016be6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016be8:	68fa      	ldr	r2, [r7, #12]
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	1ad3      	subs	r3, r2, r3
 8016bee:	0fdb      	lsrs	r3, r3, #31
 8016bf0:	f003 0301 	and.w	r3, r3, #1
 8016bf4:	b2db      	uxtb	r3, r3
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d009      	beq.n	8016c0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016bfa:	697b      	ldr	r3, [r7, #20]
 8016bfc:	681a      	ldr	r2, [r3, #0]
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	4413      	add	r3, r2
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	4907      	ldr	r1, [pc, #28]	; (8016c24 <lwip_cyclic_timer+0x60>)
 8016c06:	4618      	mov	r0, r3
 8016c08:	f7ff ff6e 	bl	8016ae8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016c0c:	e004      	b.n	8016c18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016c0e:	687a      	ldr	r2, [r7, #4]
 8016c10:	4904      	ldr	r1, [pc, #16]	; (8016c24 <lwip_cyclic_timer+0x60>)
 8016c12:	68f8      	ldr	r0, [r7, #12]
 8016c14:	f7ff ff68 	bl	8016ae8 <sys_timeout_abs>
}
 8016c18:	bf00      	nop
 8016c1a:	3718      	adds	r7, #24
 8016c1c:	46bd      	mov	sp, r7
 8016c1e:	bd80      	pop	{r7, pc}
 8016c20:	24004170 	.word	0x24004170
 8016c24:	08016bc5 	.word	0x08016bc5

08016c28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b082      	sub	sp, #8
 8016c2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016c2e:	2301      	movs	r3, #1
 8016c30:	607b      	str	r3, [r7, #4]
 8016c32:	e00e      	b.n	8016c52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016c34:	4a0b      	ldr	r2, [pc, #44]	; (8016c64 <sys_timeouts_init+0x3c>)
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	00db      	lsls	r3, r3, #3
 8016c40:	4a08      	ldr	r2, [pc, #32]	; (8016c64 <sys_timeouts_init+0x3c>)
 8016c42:	4413      	add	r3, r2
 8016c44:	461a      	mov	r2, r3
 8016c46:	4908      	ldr	r1, [pc, #32]	; (8016c68 <sys_timeouts_init+0x40>)
 8016c48:	f000 f810 	bl	8016c6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	3301      	adds	r3, #1
 8016c50:	607b      	str	r3, [r7, #4]
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	2b02      	cmp	r3, #2
 8016c56:	d9ed      	bls.n	8016c34 <sys_timeouts_init+0xc>
  }
}
 8016c58:	bf00      	nop
 8016c5a:	bf00      	nop
 8016c5c:	3708      	adds	r7, #8
 8016c5e:	46bd      	mov	sp, r7
 8016c60:	bd80      	pop	{r7, pc}
 8016c62:	bf00      	nop
 8016c64:	0801e204 	.word	0x0801e204
 8016c68:	08016bc5 	.word	0x08016bc5

08016c6c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b086      	sub	sp, #24
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	60f8      	str	r0, [r7, #12]
 8016c74:	60b9      	str	r1, [r7, #8]
 8016c76:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016c7e:	d306      	bcc.n	8016c8e <sys_timeout+0x22>
 8016c80:	4b0a      	ldr	r3, [pc, #40]	; (8016cac <sys_timeout+0x40>)
 8016c82:	f240 1229 	movw	r2, #297	; 0x129
 8016c86:	490a      	ldr	r1, [pc, #40]	; (8016cb0 <sys_timeout+0x44>)
 8016c88:	480a      	ldr	r0, [pc, #40]	; (8016cb4 <sys_timeout+0x48>)
 8016c8a:	f003 f86b 	bl	8019d64 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016c8e:	f7f4 fd6b 	bl	800b768 <sys_now>
 8016c92:	4602      	mov	r2, r0
 8016c94:	68fb      	ldr	r3, [r7, #12]
 8016c96:	4413      	add	r3, r2
 8016c98:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016c9a:	687a      	ldr	r2, [r7, #4]
 8016c9c:	68b9      	ldr	r1, [r7, #8]
 8016c9e:	6978      	ldr	r0, [r7, #20]
 8016ca0:	f7ff ff22 	bl	8016ae8 <sys_timeout_abs>
#endif
}
 8016ca4:	bf00      	nop
 8016ca6:	3718      	adds	r7, #24
 8016ca8:	46bd      	mov	sp, r7
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	0801cdc8 	.word	0x0801cdc8
 8016cb0:	0801ce64 	.word	0x0801ce64
 8016cb4:	0801ce3c 	.word	0x0801ce3c

08016cb8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016cbe:	f7f4 fd53 	bl	800b768 <sys_now>
 8016cc2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016cc4:	4b17      	ldr	r3, [pc, #92]	; (8016d24 <sys_check_timeouts+0x6c>)
 8016cc6:	681b      	ldr	r3, [r3, #0]
 8016cc8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016cca:	68bb      	ldr	r3, [r7, #8]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d022      	beq.n	8016d16 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016cd0:	68bb      	ldr	r3, [r7, #8]
 8016cd2:	685b      	ldr	r3, [r3, #4]
 8016cd4:	68fa      	ldr	r2, [r7, #12]
 8016cd6:	1ad3      	subs	r3, r2, r3
 8016cd8:	0fdb      	lsrs	r3, r3, #31
 8016cda:	f003 0301 	and.w	r3, r3, #1
 8016cde:	b2db      	uxtb	r3, r3
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d11a      	bne.n	8016d1a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	4a0e      	ldr	r2, [pc, #56]	; (8016d24 <sys_check_timeouts+0x6c>)
 8016cea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016cec:	68bb      	ldr	r3, [r7, #8]
 8016cee:	689b      	ldr	r3, [r3, #8]
 8016cf0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	68db      	ldr	r3, [r3, #12]
 8016cf6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016cf8:	68bb      	ldr	r3, [r7, #8]
 8016cfa:	685b      	ldr	r3, [r3, #4]
 8016cfc:	4a0a      	ldr	r2, [pc, #40]	; (8016d28 <sys_check_timeouts+0x70>)
 8016cfe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016d00:	68b9      	ldr	r1, [r7, #8]
 8016d02:	200a      	movs	r0, #10
 8016d04:	f7f8 fd32 	bl	800f76c <memp_free>
    if (handler != NULL) {
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d0da      	beq.n	8016cc4 <sys_check_timeouts+0xc>
      handler(arg);
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6838      	ldr	r0, [r7, #0]
 8016d12:	4798      	blx	r3
  do {
 8016d14:	e7d6      	b.n	8016cc4 <sys_check_timeouts+0xc>
      return;
 8016d16:	bf00      	nop
 8016d18:	e000      	b.n	8016d1c <sys_check_timeouts+0x64>
      return;
 8016d1a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016d1c:	3710      	adds	r7, #16
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bd80      	pop	{r7, pc}
 8016d22:	bf00      	nop
 8016d24:	2400416c 	.word	0x2400416c
 8016d28:	24004170 	.word	0x24004170

08016d2c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016d2c:	b580      	push	{r7, lr}
 8016d2e:	b082      	sub	sp, #8
 8016d30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016d32:	4b16      	ldr	r3, [pc, #88]	; (8016d8c <sys_timeouts_sleeptime+0x60>)
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	d102      	bne.n	8016d40 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016d3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016d3e:	e020      	b.n	8016d82 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016d40:	f7f4 fd12 	bl	800b768 <sys_now>
 8016d44:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016d46:	4b11      	ldr	r3, [pc, #68]	; (8016d8c <sys_timeouts_sleeptime+0x60>)
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	685a      	ldr	r2, [r3, #4]
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	1ad3      	subs	r3, r2, r3
 8016d50:	0fdb      	lsrs	r3, r3, #31
 8016d52:	f003 0301 	and.w	r3, r3, #1
 8016d56:	b2db      	uxtb	r3, r3
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d001      	beq.n	8016d60 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016d5c:	2300      	movs	r3, #0
 8016d5e:	e010      	b.n	8016d82 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016d60:	4b0a      	ldr	r3, [pc, #40]	; (8016d8c <sys_timeouts_sleeptime+0x60>)
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	685a      	ldr	r2, [r3, #4]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	1ad3      	subs	r3, r2, r3
 8016d6a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	2b00      	cmp	r3, #0
 8016d70:	da06      	bge.n	8016d80 <sys_timeouts_sleeptime+0x54>
 8016d72:	4b07      	ldr	r3, [pc, #28]	; (8016d90 <sys_timeouts_sleeptime+0x64>)
 8016d74:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016d78:	4906      	ldr	r1, [pc, #24]	; (8016d94 <sys_timeouts_sleeptime+0x68>)
 8016d7a:	4807      	ldr	r0, [pc, #28]	; (8016d98 <sys_timeouts_sleeptime+0x6c>)
 8016d7c:	f002 fff2 	bl	8019d64 <iprintf>
    return ret;
 8016d80:	683b      	ldr	r3, [r7, #0]
  }
}
 8016d82:	4618      	mov	r0, r3
 8016d84:	3708      	adds	r7, #8
 8016d86:	46bd      	mov	sp, r7
 8016d88:	bd80      	pop	{r7, pc}
 8016d8a:	bf00      	nop
 8016d8c:	2400416c 	.word	0x2400416c
 8016d90:	0801cdc8 	.word	0x0801cdc8
 8016d94:	0801ce9c 	.word	0x0801ce9c
 8016d98:	0801ce3c 	.word	0x0801ce3c

08016d9c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016d9c:	b580      	push	{r7, lr}
 8016d9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016da0:	f002 fff8 	bl	8019d94 <rand>
 8016da4:	4603      	mov	r3, r0
 8016da6:	b29b      	uxth	r3, r3
 8016da8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016dac:	b29b      	uxth	r3, r3
 8016dae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016db2:	b29a      	uxth	r2, r3
 8016db4:	4b01      	ldr	r3, [pc, #4]	; (8016dbc <udp_init+0x20>)
 8016db6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016db8:	bf00      	nop
 8016dba:	bd80      	pop	{r7, pc}
 8016dbc:	24000038 	.word	0x24000038

08016dc0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b084      	sub	sp, #16
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	60f8      	str	r0, [r7, #12]
 8016dc8:	60b9      	str	r1, [r7, #8]
 8016dca:	4613      	mov	r3, r2
 8016dcc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d105      	bne.n	8016de0 <udp_input_local_match+0x20>
 8016dd4:	4b27      	ldr	r3, [pc, #156]	; (8016e74 <udp_input_local_match+0xb4>)
 8016dd6:	2287      	movs	r2, #135	; 0x87
 8016dd8:	4927      	ldr	r1, [pc, #156]	; (8016e78 <udp_input_local_match+0xb8>)
 8016dda:	4828      	ldr	r0, [pc, #160]	; (8016e7c <udp_input_local_match+0xbc>)
 8016ddc:	f002 ffc2 	bl	8019d64 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016de0:	68bb      	ldr	r3, [r7, #8]
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d105      	bne.n	8016df2 <udp_input_local_match+0x32>
 8016de6:	4b23      	ldr	r3, [pc, #140]	; (8016e74 <udp_input_local_match+0xb4>)
 8016de8:	2288      	movs	r2, #136	; 0x88
 8016dea:	4925      	ldr	r1, [pc, #148]	; (8016e80 <udp_input_local_match+0xc0>)
 8016dec:	4823      	ldr	r0, [pc, #140]	; (8016e7c <udp_input_local_match+0xbc>)
 8016dee:	f002 ffb9 	bl	8019d64 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016df2:	68fb      	ldr	r3, [r7, #12]
 8016df4:	7a1b      	ldrb	r3, [r3, #8]
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d00b      	beq.n	8016e12 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	7a1a      	ldrb	r2, [r3, #8]
 8016dfe:	4b21      	ldr	r3, [pc, #132]	; (8016e84 <udp_input_local_match+0xc4>)
 8016e00:	685b      	ldr	r3, [r3, #4]
 8016e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016e06:	3301      	adds	r3, #1
 8016e08:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016e0a:	429a      	cmp	r2, r3
 8016e0c:	d001      	beq.n	8016e12 <udp_input_local_match+0x52>
    return 0;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	e02b      	b.n	8016e6a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016e12:	79fb      	ldrb	r3, [r7, #7]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d018      	beq.n	8016e4a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	2b00      	cmp	r3, #0
 8016e1c:	d013      	beq.n	8016e46 <udp_input_local_match+0x86>
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	681b      	ldr	r3, [r3, #0]
 8016e22:	2b00      	cmp	r3, #0
 8016e24:	d00f      	beq.n	8016e46 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016e26:	4b17      	ldr	r3, [pc, #92]	; (8016e84 <udp_input_local_match+0xc4>)
 8016e28:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e2e:	d00a      	beq.n	8016e46 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	681a      	ldr	r2, [r3, #0]
 8016e34:	4b13      	ldr	r3, [pc, #76]	; (8016e84 <udp_input_local_match+0xc4>)
 8016e36:	695b      	ldr	r3, [r3, #20]
 8016e38:	405a      	eors	r2, r3
 8016e3a:	68bb      	ldr	r3, [r7, #8]
 8016e3c:	3308      	adds	r3, #8
 8016e3e:	681b      	ldr	r3, [r3, #0]
 8016e40:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016e42:	2b00      	cmp	r3, #0
 8016e44:	d110      	bne.n	8016e68 <udp_input_local_match+0xa8>
          return 1;
 8016e46:	2301      	movs	r3, #1
 8016e48:	e00f      	b.n	8016e6a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d009      	beq.n	8016e64 <udp_input_local_match+0xa4>
 8016e50:	68fb      	ldr	r3, [r7, #12]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d005      	beq.n	8016e64 <udp_input_local_match+0xa4>
 8016e58:	68fb      	ldr	r3, [r7, #12]
 8016e5a:	681a      	ldr	r2, [r3, #0]
 8016e5c:	4b09      	ldr	r3, [pc, #36]	; (8016e84 <udp_input_local_match+0xc4>)
 8016e5e:	695b      	ldr	r3, [r3, #20]
 8016e60:	429a      	cmp	r2, r3
 8016e62:	d101      	bne.n	8016e68 <udp_input_local_match+0xa8>
        return 1;
 8016e64:	2301      	movs	r3, #1
 8016e66:	e000      	b.n	8016e6a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016e68:	2300      	movs	r3, #0
}
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	3710      	adds	r7, #16
 8016e6e:	46bd      	mov	sp, r7
 8016e70:	bd80      	pop	{r7, pc}
 8016e72:	bf00      	nop
 8016e74:	0801ceb0 	.word	0x0801ceb0
 8016e78:	0801cee0 	.word	0x0801cee0
 8016e7c:	0801cf04 	.word	0x0801cf04
 8016e80:	0801cf2c 	.word	0x0801cf2c
 8016e84:	240047dc 	.word	0x240047dc

08016e88 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016e88:	b590      	push	{r4, r7, lr}
 8016e8a:	b08d      	sub	sp, #52	; 0x34
 8016e8c:	af02      	add	r7, sp, #8
 8016e8e:	6078      	str	r0, [r7, #4]
 8016e90:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016e92:	2300      	movs	r3, #0
 8016e94:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d105      	bne.n	8016ea8 <udp_input+0x20>
 8016e9c:	4b7c      	ldr	r3, [pc, #496]	; (8017090 <udp_input+0x208>)
 8016e9e:	22cf      	movs	r2, #207	; 0xcf
 8016ea0:	497c      	ldr	r1, [pc, #496]	; (8017094 <udp_input+0x20c>)
 8016ea2:	487d      	ldr	r0, [pc, #500]	; (8017098 <udp_input+0x210>)
 8016ea4:	f002 ff5e 	bl	8019d64 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016ea8:	683b      	ldr	r3, [r7, #0]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d105      	bne.n	8016eba <udp_input+0x32>
 8016eae:	4b78      	ldr	r3, [pc, #480]	; (8017090 <udp_input+0x208>)
 8016eb0:	22d0      	movs	r2, #208	; 0xd0
 8016eb2:	497a      	ldr	r1, [pc, #488]	; (801709c <udp_input+0x214>)
 8016eb4:	4878      	ldr	r0, [pc, #480]	; (8017098 <udp_input+0x210>)
 8016eb6:	f002 ff55 	bl	8019d64 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	895b      	ldrh	r3, [r3, #10]
 8016ebe:	2b07      	cmp	r3, #7
 8016ec0:	d803      	bhi.n	8016eca <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016ec2:	6878      	ldr	r0, [r7, #4]
 8016ec4:	f7f9 faf6 	bl	80104b4 <pbuf_free>
    goto end;
 8016ec8:	e0de      	b.n	8017088 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	685b      	ldr	r3, [r3, #4]
 8016ece:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016ed0:	4b73      	ldr	r3, [pc, #460]	; (80170a0 <udp_input+0x218>)
 8016ed2:	695b      	ldr	r3, [r3, #20]
 8016ed4:	4a72      	ldr	r2, [pc, #456]	; (80170a0 <udp_input+0x218>)
 8016ed6:	6812      	ldr	r2, [r2, #0]
 8016ed8:	4611      	mov	r1, r2
 8016eda:	4618      	mov	r0, r3
 8016edc:	f001 fcae 	bl	801883c <ip4_addr_isbroadcast_u32>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016ee4:	697b      	ldr	r3, [r7, #20]
 8016ee6:	881b      	ldrh	r3, [r3, #0]
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7f7 fe38 	bl	800eb60 <lwip_htons>
 8016ef0:	4603      	mov	r3, r0
 8016ef2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016ef4:	697b      	ldr	r3, [r7, #20]
 8016ef6:	885b      	ldrh	r3, [r3, #2]
 8016ef8:	b29b      	uxth	r3, r3
 8016efa:	4618      	mov	r0, r3
 8016efc:	f7f7 fe30 	bl	800eb60 <lwip_htons>
 8016f00:	4603      	mov	r3, r0
 8016f02:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016f04:	2300      	movs	r3, #0
 8016f06:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016f0c:	2300      	movs	r3, #0
 8016f0e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016f10:	4b64      	ldr	r3, [pc, #400]	; (80170a4 <udp_input+0x21c>)
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	627b      	str	r3, [r7, #36]	; 0x24
 8016f16:	e054      	b.n	8016fc2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f1a:	8a5b      	ldrh	r3, [r3, #18]
 8016f1c:	89fa      	ldrh	r2, [r7, #14]
 8016f1e:	429a      	cmp	r2, r3
 8016f20:	d14a      	bne.n	8016fb8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016f22:	7cfb      	ldrb	r3, [r7, #19]
 8016f24:	461a      	mov	r2, r3
 8016f26:	6839      	ldr	r1, [r7, #0]
 8016f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f2a:	f7ff ff49 	bl	8016dc0 <udp_input_local_match>
 8016f2e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	d041      	beq.n	8016fb8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f36:	7c1b      	ldrb	r3, [r3, #16]
 8016f38:	f003 0304 	and.w	r3, r3, #4
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d11d      	bne.n	8016f7c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016f40:	69fb      	ldr	r3, [r7, #28]
 8016f42:	2b00      	cmp	r3, #0
 8016f44:	d102      	bne.n	8016f4c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f48:	61fb      	str	r3, [r7, #28]
 8016f4a:	e017      	b.n	8016f7c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016f4c:	7cfb      	ldrb	r3, [r7, #19]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d014      	beq.n	8016f7c <udp_input+0xf4>
 8016f52:	4b53      	ldr	r3, [pc, #332]	; (80170a0 <udp_input+0x218>)
 8016f54:	695b      	ldr	r3, [r3, #20]
 8016f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f5a:	d10f      	bne.n	8016f7c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016f5c:	69fb      	ldr	r3, [r7, #28]
 8016f5e:	681a      	ldr	r2, [r3, #0]
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	3304      	adds	r3, #4
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d008      	beq.n	8016f7c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f6c:	681a      	ldr	r2, [r3, #0]
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	3304      	adds	r3, #4
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	429a      	cmp	r2, r3
 8016f76:	d101      	bne.n	8016f7c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f7a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f7e:	8a9b      	ldrh	r3, [r3, #20]
 8016f80:	8a3a      	ldrh	r2, [r7, #16]
 8016f82:	429a      	cmp	r2, r3
 8016f84:	d118      	bne.n	8016fb8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f88:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d005      	beq.n	8016f9a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f90:	685a      	ldr	r2, [r3, #4]
 8016f92:	4b43      	ldr	r3, [pc, #268]	; (80170a0 <udp_input+0x218>)
 8016f94:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016f96:	429a      	cmp	r2, r3
 8016f98:	d10e      	bne.n	8016fb8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016f9a:	6a3b      	ldr	r3, [r7, #32]
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d014      	beq.n	8016fca <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fa2:	68da      	ldr	r2, [r3, #12]
 8016fa4:	6a3b      	ldr	r3, [r7, #32]
 8016fa6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016fa8:	4b3e      	ldr	r3, [pc, #248]	; (80170a4 <udp_input+0x21c>)
 8016faa:	681a      	ldr	r2, [r3, #0]
 8016fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fae:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016fb0:	4a3c      	ldr	r2, [pc, #240]	; (80170a4 <udp_input+0x21c>)
 8016fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016fb6:	e008      	b.n	8016fca <udp_input+0x142>
      }
    }

    prev = pcb;
 8016fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fba:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fbe:	68db      	ldr	r3, [r3, #12]
 8016fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8016fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d1a7      	bne.n	8016f18 <udp_input+0x90>
 8016fc8:	e000      	b.n	8016fcc <udp_input+0x144>
        break;
 8016fca:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d101      	bne.n	8016fd6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016fd2:	69fb      	ldr	r3, [r7, #28]
 8016fd4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fd8:	2b00      	cmp	r3, #0
 8016fda:	d002      	beq.n	8016fe2 <udp_input+0x15a>
    for_us = 1;
 8016fdc:	2301      	movs	r3, #1
 8016fde:	76fb      	strb	r3, [r7, #27]
 8016fe0:	e00a      	b.n	8016ff8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016fe2:	683b      	ldr	r3, [r7, #0]
 8016fe4:	3304      	adds	r3, #4
 8016fe6:	681a      	ldr	r2, [r3, #0]
 8016fe8:	4b2d      	ldr	r3, [pc, #180]	; (80170a0 <udp_input+0x218>)
 8016fea:	695b      	ldr	r3, [r3, #20]
 8016fec:	429a      	cmp	r2, r3
 8016fee:	bf0c      	ite	eq
 8016ff0:	2301      	moveq	r3, #1
 8016ff2:	2300      	movne	r3, #0
 8016ff4:	b2db      	uxtb	r3, r3
 8016ff6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016ff8:	7efb      	ldrb	r3, [r7, #27]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d041      	beq.n	8017082 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016ffe:	2108      	movs	r1, #8
 8017000:	6878      	ldr	r0, [r7, #4]
 8017002:	f7f9 f9d1 	bl	80103a8 <pbuf_remove_header>
 8017006:	4603      	mov	r3, r0
 8017008:	2b00      	cmp	r3, #0
 801700a:	d00a      	beq.n	8017022 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801700c:	4b20      	ldr	r3, [pc, #128]	; (8017090 <udp_input+0x208>)
 801700e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017012:	4925      	ldr	r1, [pc, #148]	; (80170a8 <udp_input+0x220>)
 8017014:	4820      	ldr	r0, [pc, #128]	; (8017098 <udp_input+0x210>)
 8017016:	f002 fea5 	bl	8019d64 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801701a:	6878      	ldr	r0, [r7, #4]
 801701c:	f7f9 fa4a 	bl	80104b4 <pbuf_free>
      goto end;
 8017020:	e032      	b.n	8017088 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017024:	2b00      	cmp	r3, #0
 8017026:	d012      	beq.n	801704e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801702a:	699b      	ldr	r3, [r3, #24]
 801702c:	2b00      	cmp	r3, #0
 801702e:	d00a      	beq.n	8017046 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017032:	699c      	ldr	r4, [r3, #24]
 8017034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017036:	69d8      	ldr	r0, [r3, #28]
 8017038:	8a3b      	ldrh	r3, [r7, #16]
 801703a:	9300      	str	r3, [sp, #0]
 801703c:	4b1b      	ldr	r3, [pc, #108]	; (80170ac <udp_input+0x224>)
 801703e:	687a      	ldr	r2, [r7, #4]
 8017040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017042:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017044:	e021      	b.n	801708a <udp_input+0x202>
        pbuf_free(p);
 8017046:	6878      	ldr	r0, [r7, #4]
 8017048:	f7f9 fa34 	bl	80104b4 <pbuf_free>
        goto end;
 801704c:	e01c      	b.n	8017088 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801704e:	7cfb      	ldrb	r3, [r7, #19]
 8017050:	2b00      	cmp	r3, #0
 8017052:	d112      	bne.n	801707a <udp_input+0x1f2>
 8017054:	4b12      	ldr	r3, [pc, #72]	; (80170a0 <udp_input+0x218>)
 8017056:	695b      	ldr	r3, [r3, #20]
 8017058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801705c:	2be0      	cmp	r3, #224	; 0xe0
 801705e:	d00c      	beq.n	801707a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017060:	4b0f      	ldr	r3, [pc, #60]	; (80170a0 <udp_input+0x218>)
 8017062:	899b      	ldrh	r3, [r3, #12]
 8017064:	3308      	adds	r3, #8
 8017066:	b29b      	uxth	r3, r3
 8017068:	b21b      	sxth	r3, r3
 801706a:	4619      	mov	r1, r3
 801706c:	6878      	ldr	r0, [r7, #4]
 801706e:	f7f9 fa0e 	bl	801048e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017072:	2103      	movs	r1, #3
 8017074:	6878      	ldr	r0, [r7, #4]
 8017076:	f001 f8b7 	bl	80181e8 <icmp_dest_unreach>
      pbuf_free(p);
 801707a:	6878      	ldr	r0, [r7, #4]
 801707c:	f7f9 fa1a 	bl	80104b4 <pbuf_free>
  return;
 8017080:	e003      	b.n	801708a <udp_input+0x202>
    pbuf_free(p);
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f7f9 fa16 	bl	80104b4 <pbuf_free>
  return;
 8017088:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801708a:	372c      	adds	r7, #44	; 0x2c
 801708c:	46bd      	mov	sp, r7
 801708e:	bd90      	pop	{r4, r7, pc}
 8017090:	0801ceb0 	.word	0x0801ceb0
 8017094:	0801cf54 	.word	0x0801cf54
 8017098:	0801cf04 	.word	0x0801cf04
 801709c:	0801cf6c 	.word	0x0801cf6c
 80170a0:	240047dc 	.word	0x240047dc
 80170a4:	240078b4 	.word	0x240078b4
 80170a8:	0801cf88 	.word	0x0801cf88
 80170ac:	240047ec 	.word	0x240047ec

080170b0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80170b0:	b480      	push	{r7}
 80170b2:	b085      	sub	sp, #20
 80170b4:	af00      	add	r7, sp, #0
 80170b6:	6078      	str	r0, [r7, #4]
 80170b8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d01e      	beq.n	80170fe <udp_netif_ip_addr_changed+0x4e>
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d01a      	beq.n	80170fe <udp_netif_ip_addr_changed+0x4e>
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d017      	beq.n	80170fe <udp_netif_ip_addr_changed+0x4e>
 80170ce:	683b      	ldr	r3, [r7, #0]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d013      	beq.n	80170fe <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80170d6:	4b0d      	ldr	r3, [pc, #52]	; (801710c <udp_netif_ip_addr_changed+0x5c>)
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	60fb      	str	r3, [r7, #12]
 80170dc:	e00c      	b.n	80170f8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80170de:	68fb      	ldr	r3, [r7, #12]
 80170e0:	681a      	ldr	r2, [r3, #0]
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	429a      	cmp	r2, r3
 80170e8:	d103      	bne.n	80170f2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80170ea:	683b      	ldr	r3, [r7, #0]
 80170ec:	681a      	ldr	r2, [r3, #0]
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	68db      	ldr	r3, [r3, #12]
 80170f6:	60fb      	str	r3, [r7, #12]
 80170f8:	68fb      	ldr	r3, [r7, #12]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d1ef      	bne.n	80170de <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80170fe:	bf00      	nop
 8017100:	3714      	adds	r7, #20
 8017102:	46bd      	mov	sp, r7
 8017104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017108:	4770      	bx	lr
 801710a:	bf00      	nop
 801710c:	240078b4 	.word	0x240078b4

08017110 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017110:	b580      	push	{r7, lr}
 8017112:	b082      	sub	sp, #8
 8017114:	af00      	add	r7, sp, #0
 8017116:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017118:	4915      	ldr	r1, [pc, #84]	; (8017170 <etharp_free_entry+0x60>)
 801711a:	687a      	ldr	r2, [r7, #4]
 801711c:	4613      	mov	r3, r2
 801711e:	005b      	lsls	r3, r3, #1
 8017120:	4413      	add	r3, r2
 8017122:	00db      	lsls	r3, r3, #3
 8017124:	440b      	add	r3, r1
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	2b00      	cmp	r3, #0
 801712a:	d013      	beq.n	8017154 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801712c:	4910      	ldr	r1, [pc, #64]	; (8017170 <etharp_free_entry+0x60>)
 801712e:	687a      	ldr	r2, [r7, #4]
 8017130:	4613      	mov	r3, r2
 8017132:	005b      	lsls	r3, r3, #1
 8017134:	4413      	add	r3, r2
 8017136:	00db      	lsls	r3, r3, #3
 8017138:	440b      	add	r3, r1
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	4618      	mov	r0, r3
 801713e:	f7f9 f9b9 	bl	80104b4 <pbuf_free>
    arp_table[i].q = NULL;
 8017142:	490b      	ldr	r1, [pc, #44]	; (8017170 <etharp_free_entry+0x60>)
 8017144:	687a      	ldr	r2, [r7, #4]
 8017146:	4613      	mov	r3, r2
 8017148:	005b      	lsls	r3, r3, #1
 801714a:	4413      	add	r3, r2
 801714c:	00db      	lsls	r3, r3, #3
 801714e:	440b      	add	r3, r1
 8017150:	2200      	movs	r2, #0
 8017152:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017154:	4906      	ldr	r1, [pc, #24]	; (8017170 <etharp_free_entry+0x60>)
 8017156:	687a      	ldr	r2, [r7, #4]
 8017158:	4613      	mov	r3, r2
 801715a:	005b      	lsls	r3, r3, #1
 801715c:	4413      	add	r3, r2
 801715e:	00db      	lsls	r3, r3, #3
 8017160:	440b      	add	r3, r1
 8017162:	3314      	adds	r3, #20
 8017164:	2200      	movs	r2, #0
 8017166:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017168:	bf00      	nop
 801716a:	3708      	adds	r7, #8
 801716c:	46bd      	mov	sp, r7
 801716e:	bd80      	pop	{r7, pc}
 8017170:	24004178 	.word	0x24004178

08017174 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b082      	sub	sp, #8
 8017178:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801717a:	2300      	movs	r3, #0
 801717c:	607b      	str	r3, [r7, #4]
 801717e:	e096      	b.n	80172ae <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017180:	494f      	ldr	r1, [pc, #316]	; (80172c0 <etharp_tmr+0x14c>)
 8017182:	687a      	ldr	r2, [r7, #4]
 8017184:	4613      	mov	r3, r2
 8017186:	005b      	lsls	r3, r3, #1
 8017188:	4413      	add	r3, r2
 801718a:	00db      	lsls	r3, r3, #3
 801718c:	440b      	add	r3, r1
 801718e:	3314      	adds	r3, #20
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8017194:	78fb      	ldrb	r3, [r7, #3]
 8017196:	2b00      	cmp	r3, #0
 8017198:	f000 8086 	beq.w	80172a8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801719c:	4948      	ldr	r1, [pc, #288]	; (80172c0 <etharp_tmr+0x14c>)
 801719e:	687a      	ldr	r2, [r7, #4]
 80171a0:	4613      	mov	r3, r2
 80171a2:	005b      	lsls	r3, r3, #1
 80171a4:	4413      	add	r3, r2
 80171a6:	00db      	lsls	r3, r3, #3
 80171a8:	440b      	add	r3, r1
 80171aa:	3312      	adds	r3, #18
 80171ac:	881b      	ldrh	r3, [r3, #0]
 80171ae:	3301      	adds	r3, #1
 80171b0:	b298      	uxth	r0, r3
 80171b2:	4943      	ldr	r1, [pc, #268]	; (80172c0 <etharp_tmr+0x14c>)
 80171b4:	687a      	ldr	r2, [r7, #4]
 80171b6:	4613      	mov	r3, r2
 80171b8:	005b      	lsls	r3, r3, #1
 80171ba:	4413      	add	r3, r2
 80171bc:	00db      	lsls	r3, r3, #3
 80171be:	440b      	add	r3, r1
 80171c0:	3312      	adds	r3, #18
 80171c2:	4602      	mov	r2, r0
 80171c4:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80171c6:	493e      	ldr	r1, [pc, #248]	; (80172c0 <etharp_tmr+0x14c>)
 80171c8:	687a      	ldr	r2, [r7, #4]
 80171ca:	4613      	mov	r3, r2
 80171cc:	005b      	lsls	r3, r3, #1
 80171ce:	4413      	add	r3, r2
 80171d0:	00db      	lsls	r3, r3, #3
 80171d2:	440b      	add	r3, r1
 80171d4:	3312      	adds	r3, #18
 80171d6:	881b      	ldrh	r3, [r3, #0]
 80171d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80171dc:	d215      	bcs.n	801720a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80171de:	4938      	ldr	r1, [pc, #224]	; (80172c0 <etharp_tmr+0x14c>)
 80171e0:	687a      	ldr	r2, [r7, #4]
 80171e2:	4613      	mov	r3, r2
 80171e4:	005b      	lsls	r3, r3, #1
 80171e6:	4413      	add	r3, r2
 80171e8:	00db      	lsls	r3, r3, #3
 80171ea:	440b      	add	r3, r1
 80171ec:	3314      	adds	r3, #20
 80171ee:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80171f0:	2b01      	cmp	r3, #1
 80171f2:	d10e      	bne.n	8017212 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80171f4:	4932      	ldr	r1, [pc, #200]	; (80172c0 <etharp_tmr+0x14c>)
 80171f6:	687a      	ldr	r2, [r7, #4]
 80171f8:	4613      	mov	r3, r2
 80171fa:	005b      	lsls	r3, r3, #1
 80171fc:	4413      	add	r3, r2
 80171fe:	00db      	lsls	r3, r3, #3
 8017200:	440b      	add	r3, r1
 8017202:	3312      	adds	r3, #18
 8017204:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017206:	2b04      	cmp	r3, #4
 8017208:	d903      	bls.n	8017212 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801720a:	6878      	ldr	r0, [r7, #4]
 801720c:	f7ff ff80 	bl	8017110 <etharp_free_entry>
 8017210:	e04a      	b.n	80172a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017212:	492b      	ldr	r1, [pc, #172]	; (80172c0 <etharp_tmr+0x14c>)
 8017214:	687a      	ldr	r2, [r7, #4]
 8017216:	4613      	mov	r3, r2
 8017218:	005b      	lsls	r3, r3, #1
 801721a:	4413      	add	r3, r2
 801721c:	00db      	lsls	r3, r3, #3
 801721e:	440b      	add	r3, r1
 8017220:	3314      	adds	r3, #20
 8017222:	781b      	ldrb	r3, [r3, #0]
 8017224:	2b03      	cmp	r3, #3
 8017226:	d10a      	bne.n	801723e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017228:	4925      	ldr	r1, [pc, #148]	; (80172c0 <etharp_tmr+0x14c>)
 801722a:	687a      	ldr	r2, [r7, #4]
 801722c:	4613      	mov	r3, r2
 801722e:	005b      	lsls	r3, r3, #1
 8017230:	4413      	add	r3, r2
 8017232:	00db      	lsls	r3, r3, #3
 8017234:	440b      	add	r3, r1
 8017236:	3314      	adds	r3, #20
 8017238:	2204      	movs	r2, #4
 801723a:	701a      	strb	r2, [r3, #0]
 801723c:	e034      	b.n	80172a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801723e:	4920      	ldr	r1, [pc, #128]	; (80172c0 <etharp_tmr+0x14c>)
 8017240:	687a      	ldr	r2, [r7, #4]
 8017242:	4613      	mov	r3, r2
 8017244:	005b      	lsls	r3, r3, #1
 8017246:	4413      	add	r3, r2
 8017248:	00db      	lsls	r3, r3, #3
 801724a:	440b      	add	r3, r1
 801724c:	3314      	adds	r3, #20
 801724e:	781b      	ldrb	r3, [r3, #0]
 8017250:	2b04      	cmp	r3, #4
 8017252:	d10a      	bne.n	801726a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017254:	491a      	ldr	r1, [pc, #104]	; (80172c0 <etharp_tmr+0x14c>)
 8017256:	687a      	ldr	r2, [r7, #4]
 8017258:	4613      	mov	r3, r2
 801725a:	005b      	lsls	r3, r3, #1
 801725c:	4413      	add	r3, r2
 801725e:	00db      	lsls	r3, r3, #3
 8017260:	440b      	add	r3, r1
 8017262:	3314      	adds	r3, #20
 8017264:	2202      	movs	r2, #2
 8017266:	701a      	strb	r2, [r3, #0]
 8017268:	e01e      	b.n	80172a8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801726a:	4915      	ldr	r1, [pc, #84]	; (80172c0 <etharp_tmr+0x14c>)
 801726c:	687a      	ldr	r2, [r7, #4]
 801726e:	4613      	mov	r3, r2
 8017270:	005b      	lsls	r3, r3, #1
 8017272:	4413      	add	r3, r2
 8017274:	00db      	lsls	r3, r3, #3
 8017276:	440b      	add	r3, r1
 8017278:	3314      	adds	r3, #20
 801727a:	781b      	ldrb	r3, [r3, #0]
 801727c:	2b01      	cmp	r3, #1
 801727e:	d113      	bne.n	80172a8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017280:	490f      	ldr	r1, [pc, #60]	; (80172c0 <etharp_tmr+0x14c>)
 8017282:	687a      	ldr	r2, [r7, #4]
 8017284:	4613      	mov	r3, r2
 8017286:	005b      	lsls	r3, r3, #1
 8017288:	4413      	add	r3, r2
 801728a:	00db      	lsls	r3, r3, #3
 801728c:	440b      	add	r3, r1
 801728e:	3308      	adds	r3, #8
 8017290:	6818      	ldr	r0, [r3, #0]
 8017292:	687a      	ldr	r2, [r7, #4]
 8017294:	4613      	mov	r3, r2
 8017296:	005b      	lsls	r3, r3, #1
 8017298:	4413      	add	r3, r2
 801729a:	00db      	lsls	r3, r3, #3
 801729c:	4a08      	ldr	r2, [pc, #32]	; (80172c0 <etharp_tmr+0x14c>)
 801729e:	4413      	add	r3, r2
 80172a0:	3304      	adds	r3, #4
 80172a2:	4619      	mov	r1, r3
 80172a4:	f000 fe6e 	bl	8017f84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	3301      	adds	r3, #1
 80172ac:	607b      	str	r3, [r7, #4]
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	2b09      	cmp	r3, #9
 80172b2:	f77f af65 	ble.w	8017180 <etharp_tmr+0xc>
      }
    }
  }
}
 80172b6:	bf00      	nop
 80172b8:	bf00      	nop
 80172ba:	3708      	adds	r7, #8
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}
 80172c0:	24004178 	.word	0x24004178

080172c4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80172c4:	b580      	push	{r7, lr}
 80172c6:	b08a      	sub	sp, #40	; 0x28
 80172c8:	af00      	add	r7, sp, #0
 80172ca:	60f8      	str	r0, [r7, #12]
 80172cc:	460b      	mov	r3, r1
 80172ce:	607a      	str	r2, [r7, #4]
 80172d0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80172d2:	230a      	movs	r3, #10
 80172d4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80172d6:	230a      	movs	r3, #10
 80172d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80172da:	230a      	movs	r3, #10
 80172dc:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80172de:	2300      	movs	r3, #0
 80172e0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80172e2:	230a      	movs	r3, #10
 80172e4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80172e6:	2300      	movs	r3, #0
 80172e8:	83bb      	strh	r3, [r7, #28]
 80172ea:	2300      	movs	r3, #0
 80172ec:	837b      	strh	r3, [r7, #26]
 80172ee:	2300      	movs	r3, #0
 80172f0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80172f2:	2300      	movs	r3, #0
 80172f4:	843b      	strh	r3, [r7, #32]
 80172f6:	e0ae      	b.n	8017456 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80172f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172fc:	49a6      	ldr	r1, [pc, #664]	; (8017598 <etharp_find_entry+0x2d4>)
 80172fe:	4613      	mov	r3, r2
 8017300:	005b      	lsls	r3, r3, #1
 8017302:	4413      	add	r3, r2
 8017304:	00db      	lsls	r3, r3, #3
 8017306:	440b      	add	r3, r1
 8017308:	3314      	adds	r3, #20
 801730a:	781b      	ldrb	r3, [r3, #0]
 801730c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801730e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017312:	2b0a      	cmp	r3, #10
 8017314:	d105      	bne.n	8017322 <etharp_find_entry+0x5e>
 8017316:	7dfb      	ldrb	r3, [r7, #23]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d102      	bne.n	8017322 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801731c:	8c3b      	ldrh	r3, [r7, #32]
 801731e:	847b      	strh	r3, [r7, #34]	; 0x22
 8017320:	e095      	b.n	801744e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017322:	7dfb      	ldrb	r3, [r7, #23]
 8017324:	2b00      	cmp	r3, #0
 8017326:	f000 8092 	beq.w	801744e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801732a:	7dfb      	ldrb	r3, [r7, #23]
 801732c:	2b01      	cmp	r3, #1
 801732e:	d009      	beq.n	8017344 <etharp_find_entry+0x80>
 8017330:	7dfb      	ldrb	r3, [r7, #23]
 8017332:	2b01      	cmp	r3, #1
 8017334:	d806      	bhi.n	8017344 <etharp_find_entry+0x80>
 8017336:	4b99      	ldr	r3, [pc, #612]	; (801759c <etharp_find_entry+0x2d8>)
 8017338:	f240 1223 	movw	r2, #291	; 0x123
 801733c:	4998      	ldr	r1, [pc, #608]	; (80175a0 <etharp_find_entry+0x2dc>)
 801733e:	4899      	ldr	r0, [pc, #612]	; (80175a4 <etharp_find_entry+0x2e0>)
 8017340:	f002 fd10 	bl	8019d64 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d020      	beq.n	801738c <etharp_find_entry+0xc8>
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	6819      	ldr	r1, [r3, #0]
 801734e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017352:	4891      	ldr	r0, [pc, #580]	; (8017598 <etharp_find_entry+0x2d4>)
 8017354:	4613      	mov	r3, r2
 8017356:	005b      	lsls	r3, r3, #1
 8017358:	4413      	add	r3, r2
 801735a:	00db      	lsls	r3, r3, #3
 801735c:	4403      	add	r3, r0
 801735e:	3304      	adds	r3, #4
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	4299      	cmp	r1, r3
 8017364:	d112      	bne.n	801738c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017366:	687b      	ldr	r3, [r7, #4]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d00c      	beq.n	8017386 <etharp_find_entry+0xc2>
 801736c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017370:	4989      	ldr	r1, [pc, #548]	; (8017598 <etharp_find_entry+0x2d4>)
 8017372:	4613      	mov	r3, r2
 8017374:	005b      	lsls	r3, r3, #1
 8017376:	4413      	add	r3, r2
 8017378:	00db      	lsls	r3, r3, #3
 801737a:	440b      	add	r3, r1
 801737c:	3308      	adds	r3, #8
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	687a      	ldr	r2, [r7, #4]
 8017382:	429a      	cmp	r2, r3
 8017384:	d102      	bne.n	801738c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017386:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801738a:	e100      	b.n	801758e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801738c:	7dfb      	ldrb	r3, [r7, #23]
 801738e:	2b01      	cmp	r3, #1
 8017390:	d140      	bne.n	8017414 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017392:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017396:	4980      	ldr	r1, [pc, #512]	; (8017598 <etharp_find_entry+0x2d4>)
 8017398:	4613      	mov	r3, r2
 801739a:	005b      	lsls	r3, r3, #1
 801739c:	4413      	add	r3, r2
 801739e:	00db      	lsls	r3, r3, #3
 80173a0:	440b      	add	r3, r1
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d01a      	beq.n	80173de <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80173a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80173ac:	497a      	ldr	r1, [pc, #488]	; (8017598 <etharp_find_entry+0x2d4>)
 80173ae:	4613      	mov	r3, r2
 80173b0:	005b      	lsls	r3, r3, #1
 80173b2:	4413      	add	r3, r2
 80173b4:	00db      	lsls	r3, r3, #3
 80173b6:	440b      	add	r3, r1
 80173b8:	3312      	adds	r3, #18
 80173ba:	881b      	ldrh	r3, [r3, #0]
 80173bc:	8bba      	ldrh	r2, [r7, #28]
 80173be:	429a      	cmp	r2, r3
 80173c0:	d845      	bhi.n	801744e <etharp_find_entry+0x18a>
            old_queue = i;
 80173c2:	8c3b      	ldrh	r3, [r7, #32]
 80173c4:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80173c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80173ca:	4973      	ldr	r1, [pc, #460]	; (8017598 <etharp_find_entry+0x2d4>)
 80173cc:	4613      	mov	r3, r2
 80173ce:	005b      	lsls	r3, r3, #1
 80173d0:	4413      	add	r3, r2
 80173d2:	00db      	lsls	r3, r3, #3
 80173d4:	440b      	add	r3, r1
 80173d6:	3312      	adds	r3, #18
 80173d8:	881b      	ldrh	r3, [r3, #0]
 80173da:	83bb      	strh	r3, [r7, #28]
 80173dc:	e037      	b.n	801744e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80173de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80173e2:	496d      	ldr	r1, [pc, #436]	; (8017598 <etharp_find_entry+0x2d4>)
 80173e4:	4613      	mov	r3, r2
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	4413      	add	r3, r2
 80173ea:	00db      	lsls	r3, r3, #3
 80173ec:	440b      	add	r3, r1
 80173ee:	3312      	adds	r3, #18
 80173f0:	881b      	ldrh	r3, [r3, #0]
 80173f2:	8b7a      	ldrh	r2, [r7, #26]
 80173f4:	429a      	cmp	r2, r3
 80173f6:	d82a      	bhi.n	801744e <etharp_find_entry+0x18a>
            old_pending = i;
 80173f8:	8c3b      	ldrh	r3, [r7, #32]
 80173fa:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80173fc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017400:	4965      	ldr	r1, [pc, #404]	; (8017598 <etharp_find_entry+0x2d4>)
 8017402:	4613      	mov	r3, r2
 8017404:	005b      	lsls	r3, r3, #1
 8017406:	4413      	add	r3, r2
 8017408:	00db      	lsls	r3, r3, #3
 801740a:	440b      	add	r3, r1
 801740c:	3312      	adds	r3, #18
 801740e:	881b      	ldrh	r3, [r3, #0]
 8017410:	837b      	strh	r3, [r7, #26]
 8017412:	e01c      	b.n	801744e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017414:	7dfb      	ldrb	r3, [r7, #23]
 8017416:	2b01      	cmp	r3, #1
 8017418:	d919      	bls.n	801744e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801741a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801741e:	495e      	ldr	r1, [pc, #376]	; (8017598 <etharp_find_entry+0x2d4>)
 8017420:	4613      	mov	r3, r2
 8017422:	005b      	lsls	r3, r3, #1
 8017424:	4413      	add	r3, r2
 8017426:	00db      	lsls	r3, r3, #3
 8017428:	440b      	add	r3, r1
 801742a:	3312      	adds	r3, #18
 801742c:	881b      	ldrh	r3, [r3, #0]
 801742e:	8b3a      	ldrh	r2, [r7, #24]
 8017430:	429a      	cmp	r2, r3
 8017432:	d80c      	bhi.n	801744e <etharp_find_entry+0x18a>
            old_stable = i;
 8017434:	8c3b      	ldrh	r3, [r7, #32]
 8017436:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017438:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801743c:	4956      	ldr	r1, [pc, #344]	; (8017598 <etharp_find_entry+0x2d4>)
 801743e:	4613      	mov	r3, r2
 8017440:	005b      	lsls	r3, r3, #1
 8017442:	4413      	add	r3, r2
 8017444:	00db      	lsls	r3, r3, #3
 8017446:	440b      	add	r3, r1
 8017448:	3312      	adds	r3, #18
 801744a:	881b      	ldrh	r3, [r3, #0]
 801744c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801744e:	8c3b      	ldrh	r3, [r7, #32]
 8017450:	3301      	adds	r3, #1
 8017452:	b29b      	uxth	r3, r3
 8017454:	843b      	strh	r3, [r7, #32]
 8017456:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801745a:	2b09      	cmp	r3, #9
 801745c:	f77f af4c 	ble.w	80172f8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017460:	7afb      	ldrb	r3, [r7, #11]
 8017462:	f003 0302 	and.w	r3, r3, #2
 8017466:	2b00      	cmp	r3, #0
 8017468:	d108      	bne.n	801747c <etharp_find_entry+0x1b8>
 801746a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801746e:	2b0a      	cmp	r3, #10
 8017470:	d107      	bne.n	8017482 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017472:	7afb      	ldrb	r3, [r7, #11]
 8017474:	f003 0301 	and.w	r3, r3, #1
 8017478:	2b00      	cmp	r3, #0
 801747a:	d102      	bne.n	8017482 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801747c:	f04f 33ff 	mov.w	r3, #4294967295
 8017480:	e085      	b.n	801758e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017482:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017486:	2b09      	cmp	r3, #9
 8017488:	dc02      	bgt.n	8017490 <etharp_find_entry+0x1cc>
    i = empty;
 801748a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801748c:	843b      	strh	r3, [r7, #32]
 801748e:	e039      	b.n	8017504 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017490:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017494:	2b09      	cmp	r3, #9
 8017496:	dc14      	bgt.n	80174c2 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801749a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801749c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80174a0:	493d      	ldr	r1, [pc, #244]	; (8017598 <etharp_find_entry+0x2d4>)
 80174a2:	4613      	mov	r3, r2
 80174a4:	005b      	lsls	r3, r3, #1
 80174a6:	4413      	add	r3, r2
 80174a8:	00db      	lsls	r3, r3, #3
 80174aa:	440b      	add	r3, r1
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d018      	beq.n	80174e4 <etharp_find_entry+0x220>
 80174b2:	4b3a      	ldr	r3, [pc, #232]	; (801759c <etharp_find_entry+0x2d8>)
 80174b4:	f240 126d 	movw	r2, #365	; 0x16d
 80174b8:	493b      	ldr	r1, [pc, #236]	; (80175a8 <etharp_find_entry+0x2e4>)
 80174ba:	483a      	ldr	r0, [pc, #232]	; (80175a4 <etharp_find_entry+0x2e0>)
 80174bc:	f002 fc52 	bl	8019d64 <iprintf>
 80174c0:	e010      	b.n	80174e4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80174c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80174c6:	2b09      	cmp	r3, #9
 80174c8:	dc02      	bgt.n	80174d0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80174ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80174cc:	843b      	strh	r3, [r7, #32]
 80174ce:	e009      	b.n	80174e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80174d0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80174d4:	2b09      	cmp	r3, #9
 80174d6:	dc02      	bgt.n	80174de <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80174d8:	8bfb      	ldrh	r3, [r7, #30]
 80174da:	843b      	strh	r3, [r7, #32]
 80174dc:	e002      	b.n	80174e4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80174de:	f04f 33ff 	mov.w	r3, #4294967295
 80174e2:	e054      	b.n	801758e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80174e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80174e8:	2b09      	cmp	r3, #9
 80174ea:	dd06      	ble.n	80174fa <etharp_find_entry+0x236>
 80174ec:	4b2b      	ldr	r3, [pc, #172]	; (801759c <etharp_find_entry+0x2d8>)
 80174ee:	f240 127f 	movw	r2, #383	; 0x17f
 80174f2:	492e      	ldr	r1, [pc, #184]	; (80175ac <etharp_find_entry+0x2e8>)
 80174f4:	482b      	ldr	r0, [pc, #172]	; (80175a4 <etharp_find_entry+0x2e0>)
 80174f6:	f002 fc35 	bl	8019d64 <iprintf>
    etharp_free_entry(i);
 80174fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80174fe:	4618      	mov	r0, r3
 8017500:	f7ff fe06 	bl	8017110 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017504:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017508:	2b09      	cmp	r3, #9
 801750a:	dd06      	ble.n	801751a <etharp_find_entry+0x256>
 801750c:	4b23      	ldr	r3, [pc, #140]	; (801759c <etharp_find_entry+0x2d8>)
 801750e:	f240 1283 	movw	r2, #387	; 0x183
 8017512:	4926      	ldr	r1, [pc, #152]	; (80175ac <etharp_find_entry+0x2e8>)
 8017514:	4823      	ldr	r0, [pc, #140]	; (80175a4 <etharp_find_entry+0x2e0>)
 8017516:	f002 fc25 	bl	8019d64 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801751a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801751e:	491e      	ldr	r1, [pc, #120]	; (8017598 <etharp_find_entry+0x2d4>)
 8017520:	4613      	mov	r3, r2
 8017522:	005b      	lsls	r3, r3, #1
 8017524:	4413      	add	r3, r2
 8017526:	00db      	lsls	r3, r3, #3
 8017528:	440b      	add	r3, r1
 801752a:	3314      	adds	r3, #20
 801752c:	781b      	ldrb	r3, [r3, #0]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d006      	beq.n	8017540 <etharp_find_entry+0x27c>
 8017532:	4b1a      	ldr	r3, [pc, #104]	; (801759c <etharp_find_entry+0x2d8>)
 8017534:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017538:	491d      	ldr	r1, [pc, #116]	; (80175b0 <etharp_find_entry+0x2ec>)
 801753a:	481a      	ldr	r0, [pc, #104]	; (80175a4 <etharp_find_entry+0x2e0>)
 801753c:	f002 fc12 	bl	8019d64 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	2b00      	cmp	r3, #0
 8017544:	d00b      	beq.n	801755e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017546:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801754a:	68fb      	ldr	r3, [r7, #12]
 801754c:	6819      	ldr	r1, [r3, #0]
 801754e:	4812      	ldr	r0, [pc, #72]	; (8017598 <etharp_find_entry+0x2d4>)
 8017550:	4613      	mov	r3, r2
 8017552:	005b      	lsls	r3, r3, #1
 8017554:	4413      	add	r3, r2
 8017556:	00db      	lsls	r3, r3, #3
 8017558:	4403      	add	r3, r0
 801755a:	3304      	adds	r3, #4
 801755c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801755e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017562:	490d      	ldr	r1, [pc, #52]	; (8017598 <etharp_find_entry+0x2d4>)
 8017564:	4613      	mov	r3, r2
 8017566:	005b      	lsls	r3, r3, #1
 8017568:	4413      	add	r3, r2
 801756a:	00db      	lsls	r3, r3, #3
 801756c:	440b      	add	r3, r1
 801756e:	3312      	adds	r3, #18
 8017570:	2200      	movs	r2, #0
 8017572:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017574:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017578:	4907      	ldr	r1, [pc, #28]	; (8017598 <etharp_find_entry+0x2d4>)
 801757a:	4613      	mov	r3, r2
 801757c:	005b      	lsls	r3, r3, #1
 801757e:	4413      	add	r3, r2
 8017580:	00db      	lsls	r3, r3, #3
 8017582:	440b      	add	r3, r1
 8017584:	3308      	adds	r3, #8
 8017586:	687a      	ldr	r2, [r7, #4]
 8017588:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801758a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801758e:	4618      	mov	r0, r3
 8017590:	3728      	adds	r7, #40	; 0x28
 8017592:	46bd      	mov	sp, r7
 8017594:	bd80      	pop	{r7, pc}
 8017596:	bf00      	nop
 8017598:	24004178 	.word	0x24004178
 801759c:	0801d214 	.word	0x0801d214
 80175a0:	0801d24c 	.word	0x0801d24c
 80175a4:	0801d28c 	.word	0x0801d28c
 80175a8:	0801d2b4 	.word	0x0801d2b4
 80175ac:	0801d2cc 	.word	0x0801d2cc
 80175b0:	0801d2e0 	.word	0x0801d2e0

080175b4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80175b4:	b580      	push	{r7, lr}
 80175b6:	b088      	sub	sp, #32
 80175b8:	af02      	add	r7, sp, #8
 80175ba:	60f8      	str	r0, [r7, #12]
 80175bc:	60b9      	str	r1, [r7, #8]
 80175be:	607a      	str	r2, [r7, #4]
 80175c0:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80175c8:	2b06      	cmp	r3, #6
 80175ca:	d006      	beq.n	80175da <etharp_update_arp_entry+0x26>
 80175cc:	4b48      	ldr	r3, [pc, #288]	; (80176f0 <etharp_update_arp_entry+0x13c>)
 80175ce:	f240 12a9 	movw	r2, #425	; 0x1a9
 80175d2:	4948      	ldr	r1, [pc, #288]	; (80176f4 <etharp_update_arp_entry+0x140>)
 80175d4:	4848      	ldr	r0, [pc, #288]	; (80176f8 <etharp_update_arp_entry+0x144>)
 80175d6:	f002 fbc5 	bl	8019d64 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d012      	beq.n	8017606 <etharp_update_arp_entry+0x52>
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	681b      	ldr	r3, [r3, #0]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d00e      	beq.n	8017606 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80175e8:	68bb      	ldr	r3, [r7, #8]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	68f9      	ldr	r1, [r7, #12]
 80175ee:	4618      	mov	r0, r3
 80175f0:	f001 f924 	bl	801883c <ip4_addr_isbroadcast_u32>
 80175f4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d105      	bne.n	8017606 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80175fa:	68bb      	ldr	r3, [r7, #8]
 80175fc:	681b      	ldr	r3, [r3, #0]
 80175fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017602:	2be0      	cmp	r3, #224	; 0xe0
 8017604:	d102      	bne.n	801760c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017606:	f06f 030f 	mvn.w	r3, #15
 801760a:	e06c      	b.n	80176e6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801760c:	78fb      	ldrb	r3, [r7, #3]
 801760e:	68fa      	ldr	r2, [r7, #12]
 8017610:	4619      	mov	r1, r3
 8017612:	68b8      	ldr	r0, [r7, #8]
 8017614:	f7ff fe56 	bl	80172c4 <etharp_find_entry>
 8017618:	4603      	mov	r3, r0
 801761a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801761c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017620:	2b00      	cmp	r3, #0
 8017622:	da02      	bge.n	801762a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017624:	8afb      	ldrh	r3, [r7, #22]
 8017626:	b25b      	sxtb	r3, r3
 8017628:	e05d      	b.n	80176e6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801762a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801762e:	4933      	ldr	r1, [pc, #204]	; (80176fc <etharp_update_arp_entry+0x148>)
 8017630:	4613      	mov	r3, r2
 8017632:	005b      	lsls	r3, r3, #1
 8017634:	4413      	add	r3, r2
 8017636:	00db      	lsls	r3, r3, #3
 8017638:	440b      	add	r3, r1
 801763a:	3314      	adds	r3, #20
 801763c:	2202      	movs	r2, #2
 801763e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017640:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017644:	492d      	ldr	r1, [pc, #180]	; (80176fc <etharp_update_arp_entry+0x148>)
 8017646:	4613      	mov	r3, r2
 8017648:	005b      	lsls	r3, r3, #1
 801764a:	4413      	add	r3, r2
 801764c:	00db      	lsls	r3, r3, #3
 801764e:	440b      	add	r3, r1
 8017650:	3308      	adds	r3, #8
 8017652:	68fa      	ldr	r2, [r7, #12]
 8017654:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017656:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801765a:	4613      	mov	r3, r2
 801765c:	005b      	lsls	r3, r3, #1
 801765e:	4413      	add	r3, r2
 8017660:	00db      	lsls	r3, r3, #3
 8017662:	3308      	adds	r3, #8
 8017664:	4a25      	ldr	r2, [pc, #148]	; (80176fc <etharp_update_arp_entry+0x148>)
 8017666:	4413      	add	r3, r2
 8017668:	3304      	adds	r3, #4
 801766a:	2206      	movs	r2, #6
 801766c:	6879      	ldr	r1, [r7, #4]
 801766e:	4618      	mov	r0, r3
 8017670:	f002 fb07 	bl	8019c82 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017674:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017678:	4920      	ldr	r1, [pc, #128]	; (80176fc <etharp_update_arp_entry+0x148>)
 801767a:	4613      	mov	r3, r2
 801767c:	005b      	lsls	r3, r3, #1
 801767e:	4413      	add	r3, r2
 8017680:	00db      	lsls	r3, r3, #3
 8017682:	440b      	add	r3, r1
 8017684:	3312      	adds	r3, #18
 8017686:	2200      	movs	r2, #0
 8017688:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801768a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801768e:	491b      	ldr	r1, [pc, #108]	; (80176fc <etharp_update_arp_entry+0x148>)
 8017690:	4613      	mov	r3, r2
 8017692:	005b      	lsls	r3, r3, #1
 8017694:	4413      	add	r3, r2
 8017696:	00db      	lsls	r3, r3, #3
 8017698:	440b      	add	r3, r1
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d021      	beq.n	80176e4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80176a0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80176a4:	4915      	ldr	r1, [pc, #84]	; (80176fc <etharp_update_arp_entry+0x148>)
 80176a6:	4613      	mov	r3, r2
 80176a8:	005b      	lsls	r3, r3, #1
 80176aa:	4413      	add	r3, r2
 80176ac:	00db      	lsls	r3, r3, #3
 80176ae:	440b      	add	r3, r1
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80176b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80176b8:	4910      	ldr	r1, [pc, #64]	; (80176fc <etharp_update_arp_entry+0x148>)
 80176ba:	4613      	mov	r3, r2
 80176bc:	005b      	lsls	r3, r3, #1
 80176be:	4413      	add	r3, r2
 80176c0:	00db      	lsls	r3, r3, #3
 80176c2:	440b      	add	r3, r1
 80176c4:	2200      	movs	r2, #0
 80176c6:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80176ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80176d2:	9300      	str	r3, [sp, #0]
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6939      	ldr	r1, [r7, #16]
 80176d8:	68f8      	ldr	r0, [r7, #12]
 80176da:	f002 f849 	bl	8019770 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80176de:	6938      	ldr	r0, [r7, #16]
 80176e0:	f7f8 fee8 	bl	80104b4 <pbuf_free>
  }
  return ERR_OK;
 80176e4:	2300      	movs	r3, #0
}
 80176e6:	4618      	mov	r0, r3
 80176e8:	3718      	adds	r7, #24
 80176ea:	46bd      	mov	sp, r7
 80176ec:	bd80      	pop	{r7, pc}
 80176ee:	bf00      	nop
 80176f0:	0801d214 	.word	0x0801d214
 80176f4:	0801d30c 	.word	0x0801d30c
 80176f8:	0801d28c 	.word	0x0801d28c
 80176fc:	24004178 	.word	0x24004178

08017700 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b084      	sub	sp, #16
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017708:	2300      	movs	r3, #0
 801770a:	60fb      	str	r3, [r7, #12]
 801770c:	e01e      	b.n	801774c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801770e:	4913      	ldr	r1, [pc, #76]	; (801775c <etharp_cleanup_netif+0x5c>)
 8017710:	68fa      	ldr	r2, [r7, #12]
 8017712:	4613      	mov	r3, r2
 8017714:	005b      	lsls	r3, r3, #1
 8017716:	4413      	add	r3, r2
 8017718:	00db      	lsls	r3, r3, #3
 801771a:	440b      	add	r3, r1
 801771c:	3314      	adds	r3, #20
 801771e:	781b      	ldrb	r3, [r3, #0]
 8017720:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017722:	7afb      	ldrb	r3, [r7, #11]
 8017724:	2b00      	cmp	r3, #0
 8017726:	d00e      	beq.n	8017746 <etharp_cleanup_netif+0x46>
 8017728:	490c      	ldr	r1, [pc, #48]	; (801775c <etharp_cleanup_netif+0x5c>)
 801772a:	68fa      	ldr	r2, [r7, #12]
 801772c:	4613      	mov	r3, r2
 801772e:	005b      	lsls	r3, r3, #1
 8017730:	4413      	add	r3, r2
 8017732:	00db      	lsls	r3, r3, #3
 8017734:	440b      	add	r3, r1
 8017736:	3308      	adds	r3, #8
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	687a      	ldr	r2, [r7, #4]
 801773c:	429a      	cmp	r2, r3
 801773e:	d102      	bne.n	8017746 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017740:	68f8      	ldr	r0, [r7, #12]
 8017742:	f7ff fce5 	bl	8017110 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	3301      	adds	r3, #1
 801774a:	60fb      	str	r3, [r7, #12]
 801774c:	68fb      	ldr	r3, [r7, #12]
 801774e:	2b09      	cmp	r3, #9
 8017750:	dddd      	ble.n	801770e <etharp_cleanup_netif+0xe>
    }
  }
}
 8017752:	bf00      	nop
 8017754:	bf00      	nop
 8017756:	3710      	adds	r7, #16
 8017758:	46bd      	mov	sp, r7
 801775a:	bd80      	pop	{r7, pc}
 801775c:	24004178 	.word	0x24004178

08017760 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017760:	b5b0      	push	{r4, r5, r7, lr}
 8017762:	b08a      	sub	sp, #40	; 0x28
 8017764:	af04      	add	r7, sp, #16
 8017766:	6078      	str	r0, [r7, #4]
 8017768:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801776a:	683b      	ldr	r3, [r7, #0]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d107      	bne.n	8017780 <etharp_input+0x20>
 8017770:	4b3d      	ldr	r3, [pc, #244]	; (8017868 <etharp_input+0x108>)
 8017772:	f240 228a 	movw	r2, #650	; 0x28a
 8017776:	493d      	ldr	r1, [pc, #244]	; (801786c <etharp_input+0x10c>)
 8017778:	483d      	ldr	r0, [pc, #244]	; (8017870 <etharp_input+0x110>)
 801777a:	f002 faf3 	bl	8019d64 <iprintf>
 801777e:	e06f      	b.n	8017860 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	685b      	ldr	r3, [r3, #4]
 8017784:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017786:	693b      	ldr	r3, [r7, #16]
 8017788:	881b      	ldrh	r3, [r3, #0]
 801778a:	b29b      	uxth	r3, r3
 801778c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017790:	d10c      	bne.n	80177ac <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017792:	693b      	ldr	r3, [r7, #16]
 8017794:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017796:	2b06      	cmp	r3, #6
 8017798:	d108      	bne.n	80177ac <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801779a:	693b      	ldr	r3, [r7, #16]
 801779c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801779e:	2b04      	cmp	r3, #4
 80177a0:	d104      	bne.n	80177ac <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80177a2:	693b      	ldr	r3, [r7, #16]
 80177a4:	885b      	ldrh	r3, [r3, #2]
 80177a6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80177a8:	2b08      	cmp	r3, #8
 80177aa:	d003      	beq.n	80177b4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80177ac:	6878      	ldr	r0, [r7, #4]
 80177ae:	f7f8 fe81 	bl	80104b4 <pbuf_free>
    return;
 80177b2:	e055      	b.n	8017860 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80177b4:	693b      	ldr	r3, [r7, #16]
 80177b6:	330e      	adds	r3, #14
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80177bc:	693b      	ldr	r3, [r7, #16]
 80177be:	3318      	adds	r3, #24
 80177c0:	681b      	ldr	r3, [r3, #0]
 80177c2:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80177c4:	683b      	ldr	r3, [r7, #0]
 80177c6:	3304      	adds	r3, #4
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	2b00      	cmp	r3, #0
 80177cc:	d102      	bne.n	80177d4 <etharp_input+0x74>
    for_us = 0;
 80177ce:	2300      	movs	r3, #0
 80177d0:	75fb      	strb	r3, [r7, #23]
 80177d2:	e009      	b.n	80177e8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80177d4:	68ba      	ldr	r2, [r7, #8]
 80177d6:	683b      	ldr	r3, [r7, #0]
 80177d8:	3304      	adds	r3, #4
 80177da:	681b      	ldr	r3, [r3, #0]
 80177dc:	429a      	cmp	r2, r3
 80177de:	bf0c      	ite	eq
 80177e0:	2301      	moveq	r3, #1
 80177e2:	2300      	movne	r3, #0
 80177e4:	b2db      	uxtb	r3, r3
 80177e6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80177e8:	693b      	ldr	r3, [r7, #16]
 80177ea:	f103 0208 	add.w	r2, r3, #8
 80177ee:	7dfb      	ldrb	r3, [r7, #23]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d001      	beq.n	80177f8 <etharp_input+0x98>
 80177f4:	2301      	movs	r3, #1
 80177f6:	e000      	b.n	80177fa <etharp_input+0x9a>
 80177f8:	2302      	movs	r3, #2
 80177fa:	f107 010c 	add.w	r1, r7, #12
 80177fe:	6838      	ldr	r0, [r7, #0]
 8017800:	f7ff fed8 	bl	80175b4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8017804:	693b      	ldr	r3, [r7, #16]
 8017806:	88db      	ldrh	r3, [r3, #6]
 8017808:	b29b      	uxth	r3, r3
 801780a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801780e:	d003      	beq.n	8017818 <etharp_input+0xb8>
 8017810:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017814:	d01e      	beq.n	8017854 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8017816:	e020      	b.n	801785a <etharp_input+0xfa>
      if (for_us) {
 8017818:	7dfb      	ldrb	r3, [r7, #23]
 801781a:	2b00      	cmp	r3, #0
 801781c:	d01c      	beq.n	8017858 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801781e:	683b      	ldr	r3, [r7, #0]
 8017820:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017824:	693b      	ldr	r3, [r7, #16]
 8017826:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801782a:	683b      	ldr	r3, [r7, #0]
 801782c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8017834:	693a      	ldr	r2, [r7, #16]
 8017836:	3208      	adds	r2, #8
        etharp_raw(netif,
 8017838:	2102      	movs	r1, #2
 801783a:	9103      	str	r1, [sp, #12]
 801783c:	f107 010c 	add.w	r1, r7, #12
 8017840:	9102      	str	r1, [sp, #8]
 8017842:	9201      	str	r2, [sp, #4]
 8017844:	9300      	str	r3, [sp, #0]
 8017846:	462b      	mov	r3, r5
 8017848:	4622      	mov	r2, r4
 801784a:	4601      	mov	r1, r0
 801784c:	6838      	ldr	r0, [r7, #0]
 801784e:	f000 faeb 	bl	8017e28 <etharp_raw>
      break;
 8017852:	e001      	b.n	8017858 <etharp_input+0xf8>
      break;
 8017854:	bf00      	nop
 8017856:	e000      	b.n	801785a <etharp_input+0xfa>
      break;
 8017858:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801785a:	6878      	ldr	r0, [r7, #4]
 801785c:	f7f8 fe2a 	bl	80104b4 <pbuf_free>
}
 8017860:	3718      	adds	r7, #24
 8017862:	46bd      	mov	sp, r7
 8017864:	bdb0      	pop	{r4, r5, r7, pc}
 8017866:	bf00      	nop
 8017868:	0801d214 	.word	0x0801d214
 801786c:	0801d364 	.word	0x0801d364
 8017870:	0801d28c 	.word	0x0801d28c

08017874 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017874:	b580      	push	{r7, lr}
 8017876:	b086      	sub	sp, #24
 8017878:	af02      	add	r7, sp, #8
 801787a:	60f8      	str	r0, [r7, #12]
 801787c:	60b9      	str	r1, [r7, #8]
 801787e:	4613      	mov	r3, r2
 8017880:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8017882:	79fa      	ldrb	r2, [r7, #7]
 8017884:	4944      	ldr	r1, [pc, #272]	; (8017998 <etharp_output_to_arp_index+0x124>)
 8017886:	4613      	mov	r3, r2
 8017888:	005b      	lsls	r3, r3, #1
 801788a:	4413      	add	r3, r2
 801788c:	00db      	lsls	r3, r3, #3
 801788e:	440b      	add	r3, r1
 8017890:	3314      	adds	r3, #20
 8017892:	781b      	ldrb	r3, [r3, #0]
 8017894:	2b01      	cmp	r3, #1
 8017896:	d806      	bhi.n	80178a6 <etharp_output_to_arp_index+0x32>
 8017898:	4b40      	ldr	r3, [pc, #256]	; (801799c <etharp_output_to_arp_index+0x128>)
 801789a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801789e:	4940      	ldr	r1, [pc, #256]	; (80179a0 <etharp_output_to_arp_index+0x12c>)
 80178a0:	4840      	ldr	r0, [pc, #256]	; (80179a4 <etharp_output_to_arp_index+0x130>)
 80178a2:	f002 fa5f 	bl	8019d64 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80178a6:	79fa      	ldrb	r2, [r7, #7]
 80178a8:	493b      	ldr	r1, [pc, #236]	; (8017998 <etharp_output_to_arp_index+0x124>)
 80178aa:	4613      	mov	r3, r2
 80178ac:	005b      	lsls	r3, r3, #1
 80178ae:	4413      	add	r3, r2
 80178b0:	00db      	lsls	r3, r3, #3
 80178b2:	440b      	add	r3, r1
 80178b4:	3314      	adds	r3, #20
 80178b6:	781b      	ldrb	r3, [r3, #0]
 80178b8:	2b02      	cmp	r3, #2
 80178ba:	d153      	bne.n	8017964 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80178bc:	79fa      	ldrb	r2, [r7, #7]
 80178be:	4936      	ldr	r1, [pc, #216]	; (8017998 <etharp_output_to_arp_index+0x124>)
 80178c0:	4613      	mov	r3, r2
 80178c2:	005b      	lsls	r3, r3, #1
 80178c4:	4413      	add	r3, r2
 80178c6:	00db      	lsls	r3, r3, #3
 80178c8:	440b      	add	r3, r1
 80178ca:	3312      	adds	r3, #18
 80178cc:	881b      	ldrh	r3, [r3, #0]
 80178ce:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80178d2:	d919      	bls.n	8017908 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80178d4:	79fa      	ldrb	r2, [r7, #7]
 80178d6:	4613      	mov	r3, r2
 80178d8:	005b      	lsls	r3, r3, #1
 80178da:	4413      	add	r3, r2
 80178dc:	00db      	lsls	r3, r3, #3
 80178de:	4a2e      	ldr	r2, [pc, #184]	; (8017998 <etharp_output_to_arp_index+0x124>)
 80178e0:	4413      	add	r3, r2
 80178e2:	3304      	adds	r3, #4
 80178e4:	4619      	mov	r1, r3
 80178e6:	68f8      	ldr	r0, [r7, #12]
 80178e8:	f000 fb4c 	bl	8017f84 <etharp_request>
 80178ec:	4603      	mov	r3, r0
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d138      	bne.n	8017964 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80178f2:	79fa      	ldrb	r2, [r7, #7]
 80178f4:	4928      	ldr	r1, [pc, #160]	; (8017998 <etharp_output_to_arp_index+0x124>)
 80178f6:	4613      	mov	r3, r2
 80178f8:	005b      	lsls	r3, r3, #1
 80178fa:	4413      	add	r3, r2
 80178fc:	00db      	lsls	r3, r3, #3
 80178fe:	440b      	add	r3, r1
 8017900:	3314      	adds	r3, #20
 8017902:	2203      	movs	r2, #3
 8017904:	701a      	strb	r2, [r3, #0]
 8017906:	e02d      	b.n	8017964 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8017908:	79fa      	ldrb	r2, [r7, #7]
 801790a:	4923      	ldr	r1, [pc, #140]	; (8017998 <etharp_output_to_arp_index+0x124>)
 801790c:	4613      	mov	r3, r2
 801790e:	005b      	lsls	r3, r3, #1
 8017910:	4413      	add	r3, r2
 8017912:	00db      	lsls	r3, r3, #3
 8017914:	440b      	add	r3, r1
 8017916:	3312      	adds	r3, #18
 8017918:	881b      	ldrh	r3, [r3, #0]
 801791a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801791e:	d321      	bcc.n	8017964 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8017920:	79fa      	ldrb	r2, [r7, #7]
 8017922:	4613      	mov	r3, r2
 8017924:	005b      	lsls	r3, r3, #1
 8017926:	4413      	add	r3, r2
 8017928:	00db      	lsls	r3, r3, #3
 801792a:	4a1b      	ldr	r2, [pc, #108]	; (8017998 <etharp_output_to_arp_index+0x124>)
 801792c:	4413      	add	r3, r2
 801792e:	1d19      	adds	r1, r3, #4
 8017930:	79fa      	ldrb	r2, [r7, #7]
 8017932:	4613      	mov	r3, r2
 8017934:	005b      	lsls	r3, r3, #1
 8017936:	4413      	add	r3, r2
 8017938:	00db      	lsls	r3, r3, #3
 801793a:	3308      	adds	r3, #8
 801793c:	4a16      	ldr	r2, [pc, #88]	; (8017998 <etharp_output_to_arp_index+0x124>)
 801793e:	4413      	add	r3, r2
 8017940:	3304      	adds	r3, #4
 8017942:	461a      	mov	r2, r3
 8017944:	68f8      	ldr	r0, [r7, #12]
 8017946:	f000 fafb 	bl	8017f40 <etharp_request_dst>
 801794a:	4603      	mov	r3, r0
 801794c:	2b00      	cmp	r3, #0
 801794e:	d109      	bne.n	8017964 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8017950:	79fa      	ldrb	r2, [r7, #7]
 8017952:	4911      	ldr	r1, [pc, #68]	; (8017998 <etharp_output_to_arp_index+0x124>)
 8017954:	4613      	mov	r3, r2
 8017956:	005b      	lsls	r3, r3, #1
 8017958:	4413      	add	r3, r2
 801795a:	00db      	lsls	r3, r3, #3
 801795c:	440b      	add	r3, r1
 801795e:	3314      	adds	r3, #20
 8017960:	2203      	movs	r2, #3
 8017962:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801796a:	79fa      	ldrb	r2, [r7, #7]
 801796c:	4613      	mov	r3, r2
 801796e:	005b      	lsls	r3, r3, #1
 8017970:	4413      	add	r3, r2
 8017972:	00db      	lsls	r3, r3, #3
 8017974:	3308      	adds	r3, #8
 8017976:	4a08      	ldr	r2, [pc, #32]	; (8017998 <etharp_output_to_arp_index+0x124>)
 8017978:	4413      	add	r3, r2
 801797a:	3304      	adds	r3, #4
 801797c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017980:	9200      	str	r2, [sp, #0]
 8017982:	460a      	mov	r2, r1
 8017984:	68b9      	ldr	r1, [r7, #8]
 8017986:	68f8      	ldr	r0, [r7, #12]
 8017988:	f001 fef2 	bl	8019770 <ethernet_output>
 801798c:	4603      	mov	r3, r0
}
 801798e:	4618      	mov	r0, r3
 8017990:	3710      	adds	r7, #16
 8017992:	46bd      	mov	sp, r7
 8017994:	bd80      	pop	{r7, pc}
 8017996:	bf00      	nop
 8017998:	24004178 	.word	0x24004178
 801799c:	0801d214 	.word	0x0801d214
 80179a0:	0801d384 	.word	0x0801d384
 80179a4:	0801d28c 	.word	0x0801d28c

080179a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80179a8:	b580      	push	{r7, lr}
 80179aa:	b08a      	sub	sp, #40	; 0x28
 80179ac:	af02      	add	r7, sp, #8
 80179ae:	60f8      	str	r0, [r7, #12]
 80179b0:	60b9      	str	r1, [r7, #8]
 80179b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d106      	bne.n	80179cc <etharp_output+0x24>
 80179be:	4b73      	ldr	r3, [pc, #460]	; (8017b8c <etharp_output+0x1e4>)
 80179c0:	f240 321e 	movw	r2, #798	; 0x31e
 80179c4:	4972      	ldr	r1, [pc, #456]	; (8017b90 <etharp_output+0x1e8>)
 80179c6:	4873      	ldr	r0, [pc, #460]	; (8017b94 <etharp_output+0x1ec>)
 80179c8:	f002 f9cc 	bl	8019d64 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80179cc:	68bb      	ldr	r3, [r7, #8]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d106      	bne.n	80179e0 <etharp_output+0x38>
 80179d2:	4b6e      	ldr	r3, [pc, #440]	; (8017b8c <etharp_output+0x1e4>)
 80179d4:	f240 321f 	movw	r2, #799	; 0x31f
 80179d8:	496f      	ldr	r1, [pc, #444]	; (8017b98 <etharp_output+0x1f0>)
 80179da:	486e      	ldr	r0, [pc, #440]	; (8017b94 <etharp_output+0x1ec>)
 80179dc:	f002 f9c2 	bl	8019d64 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2b00      	cmp	r3, #0
 80179e4:	d106      	bne.n	80179f4 <etharp_output+0x4c>
 80179e6:	4b69      	ldr	r3, [pc, #420]	; (8017b8c <etharp_output+0x1e4>)
 80179e8:	f44f 7248 	mov.w	r2, #800	; 0x320
 80179ec:	496b      	ldr	r1, [pc, #428]	; (8017b9c <etharp_output+0x1f4>)
 80179ee:	4869      	ldr	r0, [pc, #420]	; (8017b94 <etharp_output+0x1ec>)
 80179f0:	f002 f9b8 	bl	8019d64 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	68f9      	ldr	r1, [r7, #12]
 80179fa:	4618      	mov	r0, r3
 80179fc:	f000 ff1e 	bl	801883c <ip4_addr_isbroadcast_u32>
 8017a00:	4603      	mov	r3, r0
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d002      	beq.n	8017a0c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8017a06:	4b66      	ldr	r3, [pc, #408]	; (8017ba0 <etharp_output+0x1f8>)
 8017a08:	61fb      	str	r3, [r7, #28]
 8017a0a:	e0af      	b.n	8017b6c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8017a0c:	687b      	ldr	r3, [r7, #4]
 8017a0e:	681b      	ldr	r3, [r3, #0]
 8017a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017a14:	2be0      	cmp	r3, #224	; 0xe0
 8017a16:	d118      	bne.n	8017a4a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8017a18:	2301      	movs	r3, #1
 8017a1a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8017a1c:	2300      	movs	r3, #0
 8017a1e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8017a20:	235e      	movs	r3, #94	; 0x5e
 8017a22:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	3301      	adds	r3, #1
 8017a28:	781b      	ldrb	r3, [r3, #0]
 8017a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8017a2e:	b2db      	uxtb	r3, r3
 8017a30:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	3302      	adds	r3, #2
 8017a36:	781b      	ldrb	r3, [r3, #0]
 8017a38:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	3303      	adds	r3, #3
 8017a3e:	781b      	ldrb	r3, [r3, #0]
 8017a40:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8017a42:	f107 0310 	add.w	r3, r7, #16
 8017a46:	61fb      	str	r3, [r7, #28]
 8017a48:	e090      	b.n	8017b6c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	681a      	ldr	r2, [r3, #0]
 8017a4e:	68fb      	ldr	r3, [r7, #12]
 8017a50:	3304      	adds	r3, #4
 8017a52:	681b      	ldr	r3, [r3, #0]
 8017a54:	405a      	eors	r2, r3
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	3308      	adds	r3, #8
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	4013      	ands	r3, r2
 8017a5e:	2b00      	cmp	r3, #0
 8017a60:	d012      	beq.n	8017a88 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017a68:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017a6c:	4293      	cmp	r3, r2
 8017a6e:	d00b      	beq.n	8017a88 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	330c      	adds	r3, #12
 8017a74:	681b      	ldr	r3, [r3, #0]
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d003      	beq.n	8017a82 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017a7a:	68fb      	ldr	r3, [r7, #12]
 8017a7c:	330c      	adds	r3, #12
 8017a7e:	61bb      	str	r3, [r7, #24]
 8017a80:	e002      	b.n	8017a88 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8017a82:	f06f 0303 	mvn.w	r3, #3
 8017a86:	e07d      	b.n	8017b84 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017a88:	4b46      	ldr	r3, [pc, #280]	; (8017ba4 <etharp_output+0x1fc>)
 8017a8a:	781b      	ldrb	r3, [r3, #0]
 8017a8c:	4619      	mov	r1, r3
 8017a8e:	4a46      	ldr	r2, [pc, #280]	; (8017ba8 <etharp_output+0x200>)
 8017a90:	460b      	mov	r3, r1
 8017a92:	005b      	lsls	r3, r3, #1
 8017a94:	440b      	add	r3, r1
 8017a96:	00db      	lsls	r3, r3, #3
 8017a98:	4413      	add	r3, r2
 8017a9a:	3314      	adds	r3, #20
 8017a9c:	781b      	ldrb	r3, [r3, #0]
 8017a9e:	2b01      	cmp	r3, #1
 8017aa0:	d925      	bls.n	8017aee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017aa2:	4b40      	ldr	r3, [pc, #256]	; (8017ba4 <etharp_output+0x1fc>)
 8017aa4:	781b      	ldrb	r3, [r3, #0]
 8017aa6:	4619      	mov	r1, r3
 8017aa8:	4a3f      	ldr	r2, [pc, #252]	; (8017ba8 <etharp_output+0x200>)
 8017aaa:	460b      	mov	r3, r1
 8017aac:	005b      	lsls	r3, r3, #1
 8017aae:	440b      	add	r3, r1
 8017ab0:	00db      	lsls	r3, r3, #3
 8017ab2:	4413      	add	r3, r2
 8017ab4:	3308      	adds	r3, #8
 8017ab6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017ab8:	68fa      	ldr	r2, [r7, #12]
 8017aba:	429a      	cmp	r2, r3
 8017abc:	d117      	bne.n	8017aee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8017abe:	69bb      	ldr	r3, [r7, #24]
 8017ac0:	681a      	ldr	r2, [r3, #0]
 8017ac2:	4b38      	ldr	r3, [pc, #224]	; (8017ba4 <etharp_output+0x1fc>)
 8017ac4:	781b      	ldrb	r3, [r3, #0]
 8017ac6:	4618      	mov	r0, r3
 8017ac8:	4937      	ldr	r1, [pc, #220]	; (8017ba8 <etharp_output+0x200>)
 8017aca:	4603      	mov	r3, r0
 8017acc:	005b      	lsls	r3, r3, #1
 8017ace:	4403      	add	r3, r0
 8017ad0:	00db      	lsls	r3, r3, #3
 8017ad2:	440b      	add	r3, r1
 8017ad4:	3304      	adds	r3, #4
 8017ad6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017ad8:	429a      	cmp	r2, r3
 8017ada:	d108      	bne.n	8017aee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017adc:	4b31      	ldr	r3, [pc, #196]	; (8017ba4 <etharp_output+0x1fc>)
 8017ade:	781b      	ldrb	r3, [r3, #0]
 8017ae0:	461a      	mov	r2, r3
 8017ae2:	68b9      	ldr	r1, [r7, #8]
 8017ae4:	68f8      	ldr	r0, [r7, #12]
 8017ae6:	f7ff fec5 	bl	8017874 <etharp_output_to_arp_index>
 8017aea:	4603      	mov	r3, r0
 8017aec:	e04a      	b.n	8017b84 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017aee:	2300      	movs	r3, #0
 8017af0:	75fb      	strb	r3, [r7, #23]
 8017af2:	e031      	b.n	8017b58 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017af4:	7dfa      	ldrb	r2, [r7, #23]
 8017af6:	492c      	ldr	r1, [pc, #176]	; (8017ba8 <etharp_output+0x200>)
 8017af8:	4613      	mov	r3, r2
 8017afa:	005b      	lsls	r3, r3, #1
 8017afc:	4413      	add	r3, r2
 8017afe:	00db      	lsls	r3, r3, #3
 8017b00:	440b      	add	r3, r1
 8017b02:	3314      	adds	r3, #20
 8017b04:	781b      	ldrb	r3, [r3, #0]
 8017b06:	2b01      	cmp	r3, #1
 8017b08:	d923      	bls.n	8017b52 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8017b0a:	7dfa      	ldrb	r2, [r7, #23]
 8017b0c:	4926      	ldr	r1, [pc, #152]	; (8017ba8 <etharp_output+0x200>)
 8017b0e:	4613      	mov	r3, r2
 8017b10:	005b      	lsls	r3, r3, #1
 8017b12:	4413      	add	r3, r2
 8017b14:	00db      	lsls	r3, r3, #3
 8017b16:	440b      	add	r3, r1
 8017b18:	3308      	adds	r3, #8
 8017b1a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017b1c:	68fa      	ldr	r2, [r7, #12]
 8017b1e:	429a      	cmp	r2, r3
 8017b20:	d117      	bne.n	8017b52 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8017b22:	69bb      	ldr	r3, [r7, #24]
 8017b24:	6819      	ldr	r1, [r3, #0]
 8017b26:	7dfa      	ldrb	r2, [r7, #23]
 8017b28:	481f      	ldr	r0, [pc, #124]	; (8017ba8 <etharp_output+0x200>)
 8017b2a:	4613      	mov	r3, r2
 8017b2c:	005b      	lsls	r3, r3, #1
 8017b2e:	4413      	add	r3, r2
 8017b30:	00db      	lsls	r3, r3, #3
 8017b32:	4403      	add	r3, r0
 8017b34:	3304      	adds	r3, #4
 8017b36:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8017b38:	4299      	cmp	r1, r3
 8017b3a:	d10a      	bne.n	8017b52 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8017b3c:	4a19      	ldr	r2, [pc, #100]	; (8017ba4 <etharp_output+0x1fc>)
 8017b3e:	7dfb      	ldrb	r3, [r7, #23]
 8017b40:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8017b42:	7dfb      	ldrb	r3, [r7, #23]
 8017b44:	461a      	mov	r2, r3
 8017b46:	68b9      	ldr	r1, [r7, #8]
 8017b48:	68f8      	ldr	r0, [r7, #12]
 8017b4a:	f7ff fe93 	bl	8017874 <etharp_output_to_arp_index>
 8017b4e:	4603      	mov	r3, r0
 8017b50:	e018      	b.n	8017b84 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8017b52:	7dfb      	ldrb	r3, [r7, #23]
 8017b54:	3301      	adds	r3, #1
 8017b56:	75fb      	strb	r3, [r7, #23]
 8017b58:	7dfb      	ldrb	r3, [r7, #23]
 8017b5a:	2b09      	cmp	r3, #9
 8017b5c:	d9ca      	bls.n	8017af4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8017b5e:	68ba      	ldr	r2, [r7, #8]
 8017b60:	69b9      	ldr	r1, [r7, #24]
 8017b62:	68f8      	ldr	r0, [r7, #12]
 8017b64:	f000 f822 	bl	8017bac <etharp_query>
 8017b68:	4603      	mov	r3, r0
 8017b6a:	e00b      	b.n	8017b84 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017b6c:	68fb      	ldr	r3, [r7, #12]
 8017b6e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017b76:	9300      	str	r3, [sp, #0]
 8017b78:	69fb      	ldr	r3, [r7, #28]
 8017b7a:	68b9      	ldr	r1, [r7, #8]
 8017b7c:	68f8      	ldr	r0, [r7, #12]
 8017b7e:	f001 fdf7 	bl	8019770 <ethernet_output>
 8017b82:	4603      	mov	r3, r0
}
 8017b84:	4618      	mov	r0, r3
 8017b86:	3720      	adds	r7, #32
 8017b88:	46bd      	mov	sp, r7
 8017b8a:	bd80      	pop	{r7, pc}
 8017b8c:	0801d214 	.word	0x0801d214
 8017b90:	0801d364 	.word	0x0801d364
 8017b94:	0801d28c 	.word	0x0801d28c
 8017b98:	0801d3b4 	.word	0x0801d3b4
 8017b9c:	0801d354 	.word	0x0801d354
 8017ba0:	0801e220 	.word	0x0801e220
 8017ba4:	24004268 	.word	0x24004268
 8017ba8:	24004178 	.word	0x24004178

08017bac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017bac:	b580      	push	{r7, lr}
 8017bae:	b08c      	sub	sp, #48	; 0x30
 8017bb0:	af02      	add	r7, sp, #8
 8017bb2:	60f8      	str	r0, [r7, #12]
 8017bb4:	60b9      	str	r1, [r7, #8]
 8017bb6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017bb8:	68fb      	ldr	r3, [r7, #12]
 8017bba:	3326      	adds	r3, #38	; 0x26
 8017bbc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8017bbe:	23ff      	movs	r3, #255	; 0xff
 8017bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017bc8:	68bb      	ldr	r3, [r7, #8]
 8017bca:	681b      	ldr	r3, [r3, #0]
 8017bcc:	68f9      	ldr	r1, [r7, #12]
 8017bce:	4618      	mov	r0, r3
 8017bd0:	f000 fe34 	bl	801883c <ip4_addr_isbroadcast_u32>
 8017bd4:	4603      	mov	r3, r0
 8017bd6:	2b00      	cmp	r3, #0
 8017bd8:	d10c      	bne.n	8017bf4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017bda:	68bb      	ldr	r3, [r7, #8]
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017be2:	2be0      	cmp	r3, #224	; 0xe0
 8017be4:	d006      	beq.n	8017bf4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017be6:	68bb      	ldr	r3, [r7, #8]
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d003      	beq.n	8017bf4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017bec:	68bb      	ldr	r3, [r7, #8]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	d102      	bne.n	8017bfa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017bf4:	f06f 030f 	mvn.w	r3, #15
 8017bf8:	e101      	b.n	8017dfe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017bfa:	68fa      	ldr	r2, [r7, #12]
 8017bfc:	2101      	movs	r1, #1
 8017bfe:	68b8      	ldr	r0, [r7, #8]
 8017c00:	f7ff fb60 	bl	80172c4 <etharp_find_entry>
 8017c04:	4603      	mov	r3, r0
 8017c06:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8017c08:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	da02      	bge.n	8017c16 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8017c10:	8a7b      	ldrh	r3, [r7, #18]
 8017c12:	b25b      	sxtb	r3, r3
 8017c14:	e0f3      	b.n	8017dfe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8017c16:	8a7b      	ldrh	r3, [r7, #18]
 8017c18:	2b7e      	cmp	r3, #126	; 0x7e
 8017c1a:	d906      	bls.n	8017c2a <etharp_query+0x7e>
 8017c1c:	4b7a      	ldr	r3, [pc, #488]	; (8017e08 <etharp_query+0x25c>)
 8017c1e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8017c22:	497a      	ldr	r1, [pc, #488]	; (8017e0c <etharp_query+0x260>)
 8017c24:	487a      	ldr	r0, [pc, #488]	; (8017e10 <etharp_query+0x264>)
 8017c26:	f002 f89d 	bl	8019d64 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8017c2a:	8a7b      	ldrh	r3, [r7, #18]
 8017c2c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8017c2e:	7c7a      	ldrb	r2, [r7, #17]
 8017c30:	4978      	ldr	r1, [pc, #480]	; (8017e14 <etharp_query+0x268>)
 8017c32:	4613      	mov	r3, r2
 8017c34:	005b      	lsls	r3, r3, #1
 8017c36:	4413      	add	r3, r2
 8017c38:	00db      	lsls	r3, r3, #3
 8017c3a:	440b      	add	r3, r1
 8017c3c:	3314      	adds	r3, #20
 8017c3e:	781b      	ldrb	r3, [r3, #0]
 8017c40:	2b00      	cmp	r3, #0
 8017c42:	d115      	bne.n	8017c70 <etharp_query+0xc4>
    is_new_entry = 1;
 8017c44:	2301      	movs	r3, #1
 8017c46:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8017c48:	7c7a      	ldrb	r2, [r7, #17]
 8017c4a:	4972      	ldr	r1, [pc, #456]	; (8017e14 <etharp_query+0x268>)
 8017c4c:	4613      	mov	r3, r2
 8017c4e:	005b      	lsls	r3, r3, #1
 8017c50:	4413      	add	r3, r2
 8017c52:	00db      	lsls	r3, r3, #3
 8017c54:	440b      	add	r3, r1
 8017c56:	3314      	adds	r3, #20
 8017c58:	2201      	movs	r2, #1
 8017c5a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8017c5c:	7c7a      	ldrb	r2, [r7, #17]
 8017c5e:	496d      	ldr	r1, [pc, #436]	; (8017e14 <etharp_query+0x268>)
 8017c60:	4613      	mov	r3, r2
 8017c62:	005b      	lsls	r3, r3, #1
 8017c64:	4413      	add	r3, r2
 8017c66:	00db      	lsls	r3, r3, #3
 8017c68:	440b      	add	r3, r1
 8017c6a:	3308      	adds	r3, #8
 8017c6c:	68fa      	ldr	r2, [r7, #12]
 8017c6e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017c70:	7c7a      	ldrb	r2, [r7, #17]
 8017c72:	4968      	ldr	r1, [pc, #416]	; (8017e14 <etharp_query+0x268>)
 8017c74:	4613      	mov	r3, r2
 8017c76:	005b      	lsls	r3, r3, #1
 8017c78:	4413      	add	r3, r2
 8017c7a:	00db      	lsls	r3, r3, #3
 8017c7c:	440b      	add	r3, r1
 8017c7e:	3314      	adds	r3, #20
 8017c80:	781b      	ldrb	r3, [r3, #0]
 8017c82:	2b01      	cmp	r3, #1
 8017c84:	d011      	beq.n	8017caa <etharp_query+0xfe>
 8017c86:	7c7a      	ldrb	r2, [r7, #17]
 8017c88:	4962      	ldr	r1, [pc, #392]	; (8017e14 <etharp_query+0x268>)
 8017c8a:	4613      	mov	r3, r2
 8017c8c:	005b      	lsls	r3, r3, #1
 8017c8e:	4413      	add	r3, r2
 8017c90:	00db      	lsls	r3, r3, #3
 8017c92:	440b      	add	r3, r1
 8017c94:	3314      	adds	r3, #20
 8017c96:	781b      	ldrb	r3, [r3, #0]
 8017c98:	2b01      	cmp	r3, #1
 8017c9a:	d806      	bhi.n	8017caa <etharp_query+0xfe>
 8017c9c:	4b5a      	ldr	r3, [pc, #360]	; (8017e08 <etharp_query+0x25c>)
 8017c9e:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017ca2:	495d      	ldr	r1, [pc, #372]	; (8017e18 <etharp_query+0x26c>)
 8017ca4:	485a      	ldr	r0, [pc, #360]	; (8017e10 <etharp_query+0x264>)
 8017ca6:	f002 f85d 	bl	8019d64 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017caa:	6a3b      	ldr	r3, [r7, #32]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d102      	bne.n	8017cb6 <etharp_query+0x10a>
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d10c      	bne.n	8017cd0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017cb6:	68b9      	ldr	r1, [r7, #8]
 8017cb8:	68f8      	ldr	r0, [r7, #12]
 8017cba:	f000 f963 	bl	8017f84 <etharp_request>
 8017cbe:	4603      	mov	r3, r0
 8017cc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d102      	bne.n	8017cd0 <etharp_query+0x124>
      return result;
 8017cca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017cce:	e096      	b.n	8017dfe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	d106      	bne.n	8017ce4 <etharp_query+0x138>
 8017cd6:	4b4c      	ldr	r3, [pc, #304]	; (8017e08 <etharp_query+0x25c>)
 8017cd8:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017cdc:	494f      	ldr	r1, [pc, #316]	; (8017e1c <etharp_query+0x270>)
 8017cde:	484c      	ldr	r0, [pc, #304]	; (8017e10 <etharp_query+0x264>)
 8017ce0:	f002 f840 	bl	8019d64 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017ce4:	7c7a      	ldrb	r2, [r7, #17]
 8017ce6:	494b      	ldr	r1, [pc, #300]	; (8017e14 <etharp_query+0x268>)
 8017ce8:	4613      	mov	r3, r2
 8017cea:	005b      	lsls	r3, r3, #1
 8017cec:	4413      	add	r3, r2
 8017cee:	00db      	lsls	r3, r3, #3
 8017cf0:	440b      	add	r3, r1
 8017cf2:	3314      	adds	r3, #20
 8017cf4:	781b      	ldrb	r3, [r3, #0]
 8017cf6:	2b01      	cmp	r3, #1
 8017cf8:	d917      	bls.n	8017d2a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017cfa:	4a49      	ldr	r2, [pc, #292]	; (8017e20 <etharp_query+0x274>)
 8017cfc:	7c7b      	ldrb	r3, [r7, #17]
 8017cfe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017d00:	7c7a      	ldrb	r2, [r7, #17]
 8017d02:	4613      	mov	r3, r2
 8017d04:	005b      	lsls	r3, r3, #1
 8017d06:	4413      	add	r3, r2
 8017d08:	00db      	lsls	r3, r3, #3
 8017d0a:	3308      	adds	r3, #8
 8017d0c:	4a41      	ldr	r2, [pc, #260]	; (8017e14 <etharp_query+0x268>)
 8017d0e:	4413      	add	r3, r2
 8017d10:	3304      	adds	r3, #4
 8017d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017d16:	9200      	str	r2, [sp, #0]
 8017d18:	697a      	ldr	r2, [r7, #20]
 8017d1a:	6879      	ldr	r1, [r7, #4]
 8017d1c:	68f8      	ldr	r0, [r7, #12]
 8017d1e:	f001 fd27 	bl	8019770 <ethernet_output>
 8017d22:	4603      	mov	r3, r0
 8017d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017d28:	e067      	b.n	8017dfa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017d2a:	7c7a      	ldrb	r2, [r7, #17]
 8017d2c:	4939      	ldr	r1, [pc, #228]	; (8017e14 <etharp_query+0x268>)
 8017d2e:	4613      	mov	r3, r2
 8017d30:	005b      	lsls	r3, r3, #1
 8017d32:	4413      	add	r3, r2
 8017d34:	00db      	lsls	r3, r3, #3
 8017d36:	440b      	add	r3, r1
 8017d38:	3314      	adds	r3, #20
 8017d3a:	781b      	ldrb	r3, [r3, #0]
 8017d3c:	2b01      	cmp	r3, #1
 8017d3e:	d15c      	bne.n	8017dfa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017d40:	2300      	movs	r3, #0
 8017d42:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017d44:	687b      	ldr	r3, [r7, #4]
 8017d46:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017d48:	e01c      	b.n	8017d84 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017d4a:	69fb      	ldr	r3, [r7, #28]
 8017d4c:	895a      	ldrh	r2, [r3, #10]
 8017d4e:	69fb      	ldr	r3, [r7, #28]
 8017d50:	891b      	ldrh	r3, [r3, #8]
 8017d52:	429a      	cmp	r2, r3
 8017d54:	d10a      	bne.n	8017d6c <etharp_query+0x1c0>
 8017d56:	69fb      	ldr	r3, [r7, #28]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d006      	beq.n	8017d6c <etharp_query+0x1c0>
 8017d5e:	4b2a      	ldr	r3, [pc, #168]	; (8017e08 <etharp_query+0x25c>)
 8017d60:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017d64:	492f      	ldr	r1, [pc, #188]	; (8017e24 <etharp_query+0x278>)
 8017d66:	482a      	ldr	r0, [pc, #168]	; (8017e10 <etharp_query+0x264>)
 8017d68:	f001 fffc 	bl	8019d64 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017d6c:	69fb      	ldr	r3, [r7, #28]
 8017d6e:	7b1b      	ldrb	r3, [r3, #12]
 8017d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	d002      	beq.n	8017d7e <etharp_query+0x1d2>
        copy_needed = 1;
 8017d78:	2301      	movs	r3, #1
 8017d7a:	61bb      	str	r3, [r7, #24]
        break;
 8017d7c:	e005      	b.n	8017d8a <etharp_query+0x1de>
      }
      p = p->next;
 8017d7e:	69fb      	ldr	r3, [r7, #28]
 8017d80:	681b      	ldr	r3, [r3, #0]
 8017d82:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017d84:	69fb      	ldr	r3, [r7, #28]
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d1df      	bne.n	8017d4a <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017d8a:	69bb      	ldr	r3, [r7, #24]
 8017d8c:	2b00      	cmp	r3, #0
 8017d8e:	d007      	beq.n	8017da0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017d90:	687a      	ldr	r2, [r7, #4]
 8017d92:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017d96:	200e      	movs	r0, #14
 8017d98:	f7f8 fe04 	bl	80109a4 <pbuf_clone>
 8017d9c:	61f8      	str	r0, [r7, #28]
 8017d9e:	e004      	b.n	8017daa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017da4:	69f8      	ldr	r0, [r7, #28]
 8017da6:	f7f8 fc2b 	bl	8010600 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017daa:	69fb      	ldr	r3, [r7, #28]
 8017dac:	2b00      	cmp	r3, #0
 8017dae:	d021      	beq.n	8017df4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017db0:	7c7a      	ldrb	r2, [r7, #17]
 8017db2:	4918      	ldr	r1, [pc, #96]	; (8017e14 <etharp_query+0x268>)
 8017db4:	4613      	mov	r3, r2
 8017db6:	005b      	lsls	r3, r3, #1
 8017db8:	4413      	add	r3, r2
 8017dba:	00db      	lsls	r3, r3, #3
 8017dbc:	440b      	add	r3, r1
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d00a      	beq.n	8017dda <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017dc4:	7c7a      	ldrb	r2, [r7, #17]
 8017dc6:	4913      	ldr	r1, [pc, #76]	; (8017e14 <etharp_query+0x268>)
 8017dc8:	4613      	mov	r3, r2
 8017dca:	005b      	lsls	r3, r3, #1
 8017dcc:	4413      	add	r3, r2
 8017dce:	00db      	lsls	r3, r3, #3
 8017dd0:	440b      	add	r3, r1
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7f8 fb6d 	bl	80104b4 <pbuf_free>
      }
      arp_table[i].q = p;
 8017dda:	7c7a      	ldrb	r2, [r7, #17]
 8017ddc:	490d      	ldr	r1, [pc, #52]	; (8017e14 <etharp_query+0x268>)
 8017dde:	4613      	mov	r3, r2
 8017de0:	005b      	lsls	r3, r3, #1
 8017de2:	4413      	add	r3, r2
 8017de4:	00db      	lsls	r3, r3, #3
 8017de6:	440b      	add	r3, r1
 8017de8:	69fa      	ldr	r2, [r7, #28]
 8017dea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017dec:	2300      	movs	r3, #0
 8017dee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017df2:	e002      	b.n	8017dfa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017df4:	23ff      	movs	r3, #255	; 0xff
 8017df6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017dfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017dfe:	4618      	mov	r0, r3
 8017e00:	3728      	adds	r7, #40	; 0x28
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}
 8017e06:	bf00      	nop
 8017e08:	0801d214 	.word	0x0801d214
 8017e0c:	0801d3c0 	.word	0x0801d3c0
 8017e10:	0801d28c 	.word	0x0801d28c
 8017e14:	24004178 	.word	0x24004178
 8017e18:	0801d3d0 	.word	0x0801d3d0
 8017e1c:	0801d3b4 	.word	0x0801d3b4
 8017e20:	24004268 	.word	0x24004268
 8017e24:	0801d3f8 	.word	0x0801d3f8

08017e28 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b08a      	sub	sp, #40	; 0x28
 8017e2c:	af02      	add	r7, sp, #8
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	607a      	str	r2, [r7, #4]
 8017e34:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017e36:	2300      	movs	r3, #0
 8017e38:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d106      	bne.n	8017e4e <etharp_raw+0x26>
 8017e40:	4b3a      	ldr	r3, [pc, #232]	; (8017f2c <etharp_raw+0x104>)
 8017e42:	f240 4257 	movw	r2, #1111	; 0x457
 8017e46:	493a      	ldr	r1, [pc, #232]	; (8017f30 <etharp_raw+0x108>)
 8017e48:	483a      	ldr	r0, [pc, #232]	; (8017f34 <etharp_raw+0x10c>)
 8017e4a:	f001 ff8b 	bl	8019d64 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017e4e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e52:	211c      	movs	r1, #28
 8017e54:	200e      	movs	r0, #14
 8017e56:	f7f8 f849 	bl	800feec <pbuf_alloc>
 8017e5a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017e5c:	69bb      	ldr	r3, [r7, #24]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d102      	bne.n	8017e68 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017e62:	f04f 33ff 	mov.w	r3, #4294967295
 8017e66:	e05d      	b.n	8017f24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017e68:	69bb      	ldr	r3, [r7, #24]
 8017e6a:	895b      	ldrh	r3, [r3, #10]
 8017e6c:	2b1b      	cmp	r3, #27
 8017e6e:	d806      	bhi.n	8017e7e <etharp_raw+0x56>
 8017e70:	4b2e      	ldr	r3, [pc, #184]	; (8017f2c <etharp_raw+0x104>)
 8017e72:	f240 4262 	movw	r2, #1122	; 0x462
 8017e76:	4930      	ldr	r1, [pc, #192]	; (8017f38 <etharp_raw+0x110>)
 8017e78:	482e      	ldr	r0, [pc, #184]	; (8017f34 <etharp_raw+0x10c>)
 8017e7a:	f001 ff73 	bl	8019d64 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017e7e:	69bb      	ldr	r3, [r7, #24]
 8017e80:	685b      	ldr	r3, [r3, #4]
 8017e82:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017e84:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017e86:	4618      	mov	r0, r3
 8017e88:	f7f6 fe6a 	bl	800eb60 <lwip_htons>
 8017e8c:	4603      	mov	r3, r0
 8017e8e:	461a      	mov	r2, r3
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017e9a:	2b06      	cmp	r3, #6
 8017e9c:	d006      	beq.n	8017eac <etharp_raw+0x84>
 8017e9e:	4b23      	ldr	r3, [pc, #140]	; (8017f2c <etharp_raw+0x104>)
 8017ea0:	f240 4269 	movw	r2, #1129	; 0x469
 8017ea4:	4925      	ldr	r1, [pc, #148]	; (8017f3c <etharp_raw+0x114>)
 8017ea6:	4823      	ldr	r0, [pc, #140]	; (8017f34 <etharp_raw+0x10c>)
 8017ea8:	f001 ff5c 	bl	8019d64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017eac:	697b      	ldr	r3, [r7, #20]
 8017eae:	3308      	adds	r3, #8
 8017eb0:	2206      	movs	r2, #6
 8017eb2:	6839      	ldr	r1, [r7, #0]
 8017eb4:	4618      	mov	r0, r3
 8017eb6:	f001 fee4 	bl	8019c82 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	3312      	adds	r3, #18
 8017ebe:	2206      	movs	r2, #6
 8017ec0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f001 fedd 	bl	8019c82 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017ec8:	697b      	ldr	r3, [r7, #20]
 8017eca:	330e      	adds	r3, #14
 8017ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017ece:	6812      	ldr	r2, [r2, #0]
 8017ed0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017ed2:	697b      	ldr	r3, [r7, #20]
 8017ed4:	3318      	adds	r3, #24
 8017ed6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ed8:	6812      	ldr	r2, [r2, #0]
 8017eda:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017edc:	697b      	ldr	r3, [r7, #20]
 8017ede:	2200      	movs	r2, #0
 8017ee0:	701a      	strb	r2, [r3, #0]
 8017ee2:	2200      	movs	r2, #0
 8017ee4:	f042 0201 	orr.w	r2, r2, #1
 8017ee8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017eea:	697b      	ldr	r3, [r7, #20]
 8017eec:	2200      	movs	r2, #0
 8017eee:	f042 0208 	orr.w	r2, r2, #8
 8017ef2:	709a      	strb	r2, [r3, #2]
 8017ef4:	2200      	movs	r2, #0
 8017ef6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017ef8:	697b      	ldr	r3, [r7, #20]
 8017efa:	2206      	movs	r2, #6
 8017efc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	2204      	movs	r2, #4
 8017f02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017f04:	f640 0306 	movw	r3, #2054	; 0x806
 8017f08:	9300      	str	r3, [sp, #0]
 8017f0a:	687b      	ldr	r3, [r7, #4]
 8017f0c:	68ba      	ldr	r2, [r7, #8]
 8017f0e:	69b9      	ldr	r1, [r7, #24]
 8017f10:	68f8      	ldr	r0, [r7, #12]
 8017f12:	f001 fc2d 	bl	8019770 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017f16:	69b8      	ldr	r0, [r7, #24]
 8017f18:	f7f8 facc 	bl	80104b4 <pbuf_free>
  p = NULL;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017f20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017f24:	4618      	mov	r0, r3
 8017f26:	3720      	adds	r7, #32
 8017f28:	46bd      	mov	sp, r7
 8017f2a:	bd80      	pop	{r7, pc}
 8017f2c:	0801d214 	.word	0x0801d214
 8017f30:	0801d364 	.word	0x0801d364
 8017f34:	0801d28c 	.word	0x0801d28c
 8017f38:	0801d414 	.word	0x0801d414
 8017f3c:	0801d448 	.word	0x0801d448

08017f40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017f40:	b580      	push	{r7, lr}
 8017f42:	b088      	sub	sp, #32
 8017f44:	af04      	add	r7, sp, #16
 8017f46:	60f8      	str	r0, [r7, #12]
 8017f48:	60b9      	str	r1, [r7, #8]
 8017f4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017f5c:	2201      	movs	r2, #1
 8017f5e:	9203      	str	r2, [sp, #12]
 8017f60:	68ba      	ldr	r2, [r7, #8]
 8017f62:	9202      	str	r2, [sp, #8]
 8017f64:	4a06      	ldr	r2, [pc, #24]	; (8017f80 <etharp_request_dst+0x40>)
 8017f66:	9201      	str	r2, [sp, #4]
 8017f68:	9300      	str	r3, [sp, #0]
 8017f6a:	4603      	mov	r3, r0
 8017f6c:	687a      	ldr	r2, [r7, #4]
 8017f6e:	68f8      	ldr	r0, [r7, #12]
 8017f70:	f7ff ff5a 	bl	8017e28 <etharp_raw>
 8017f74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017f76:	4618      	mov	r0, r3
 8017f78:	3710      	adds	r7, #16
 8017f7a:	46bd      	mov	sp, r7
 8017f7c:	bd80      	pop	{r7, pc}
 8017f7e:	bf00      	nop
 8017f80:	0801e228 	.word	0x0801e228

08017f84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b082      	sub	sp, #8
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017f8e:	4a05      	ldr	r2, [pc, #20]	; (8017fa4 <etharp_request+0x20>)
 8017f90:	6839      	ldr	r1, [r7, #0]
 8017f92:	6878      	ldr	r0, [r7, #4]
 8017f94:	f7ff ffd4 	bl	8017f40 <etharp_request_dst>
 8017f98:	4603      	mov	r3, r0
}
 8017f9a:	4618      	mov	r0, r3
 8017f9c:	3708      	adds	r7, #8
 8017f9e:	46bd      	mov	sp, r7
 8017fa0:	bd80      	pop	{r7, pc}
 8017fa2:	bf00      	nop
 8017fa4:	0801e220 	.word	0x0801e220

08017fa8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b08e      	sub	sp, #56	; 0x38
 8017fac:	af04      	add	r7, sp, #16
 8017fae:	6078      	str	r0, [r7, #4]
 8017fb0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017fb2:	4b87      	ldr	r3, [pc, #540]	; (80181d0 <icmp_input+0x228>)
 8017fb4:	689b      	ldr	r3, [r3, #8]
 8017fb6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fba:	781b      	ldrb	r3, [r3, #0]
 8017fbc:	f003 030f 	and.w	r3, r3, #15
 8017fc0:	b2db      	uxtb	r3, r3
 8017fc2:	009b      	lsls	r3, r3, #2
 8017fc4:	b2db      	uxtb	r3, r3
 8017fc6:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017fca:	2b13      	cmp	r3, #19
 8017fcc:	f240 80e8 	bls.w	80181a0 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	895b      	ldrh	r3, [r3, #10]
 8017fd4:	2b03      	cmp	r3, #3
 8017fd6:	f240 80e5 	bls.w	80181a4 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	685b      	ldr	r3, [r3, #4]
 8017fde:	781b      	ldrb	r3, [r3, #0]
 8017fe0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017fe4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	f000 80d2 	beq.w	8018192 <icmp_input+0x1ea>
 8017fee:	2b08      	cmp	r3, #8
 8017ff0:	f040 80d2 	bne.w	8018198 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017ff4:	4b77      	ldr	r3, [pc, #476]	; (80181d4 <icmp_input+0x22c>)
 8017ff6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017ff8:	4b75      	ldr	r3, [pc, #468]	; (80181d0 <icmp_input+0x228>)
 8017ffa:	695b      	ldr	r3, [r3, #20]
 8017ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018000:	2be0      	cmp	r3, #224	; 0xe0
 8018002:	f000 80d6 	beq.w	80181b2 <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018006:	4b72      	ldr	r3, [pc, #456]	; (80181d0 <icmp_input+0x228>)
 8018008:	695b      	ldr	r3, [r3, #20]
 801800a:	4a71      	ldr	r2, [pc, #452]	; (80181d0 <icmp_input+0x228>)
 801800c:	6812      	ldr	r2, [r2, #0]
 801800e:	4611      	mov	r1, r2
 8018010:	4618      	mov	r0, r3
 8018012:	f000 fc13 	bl	801883c <ip4_addr_isbroadcast_u32>
 8018016:	4603      	mov	r3, r0
 8018018:	2b00      	cmp	r3, #0
 801801a:	f040 80cc 	bne.w	80181b6 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	891b      	ldrh	r3, [r3, #8]
 8018022:	2b07      	cmp	r3, #7
 8018024:	f240 80c0 	bls.w	80181a8 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8018028:	6878      	ldr	r0, [r7, #4]
 801802a:	f7f6 fe36 	bl	800ec9a <inet_chksum_pbuf>
 801802e:	4603      	mov	r3, r0
 8018030:	2b00      	cmp	r3, #0
 8018032:	d003      	beq.n	801803c <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8018034:	6878      	ldr	r0, [r7, #4]
 8018036:	f7f8 fa3d 	bl	80104b4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 801803a:	e0c5      	b.n	80181c8 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801803c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801803e:	330e      	adds	r3, #14
 8018040:	4619      	mov	r1, r3
 8018042:	6878      	ldr	r0, [r7, #4]
 8018044:	f7f8 f9a0 	bl	8010388 <pbuf_add_header>
 8018048:	4603      	mov	r3, r0
 801804a:	2b00      	cmp	r3, #0
 801804c:	d04b      	beq.n	80180e6 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	891a      	ldrh	r2, [r3, #8]
 8018052:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018054:	4413      	add	r3, r2
 8018056:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	891b      	ldrh	r3, [r3, #8]
 801805c:	8b7a      	ldrh	r2, [r7, #26]
 801805e:	429a      	cmp	r2, r3
 8018060:	f0c0 80ab 	bcc.w	80181ba <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8018064:	8b7b      	ldrh	r3, [r7, #26]
 8018066:	f44f 7220 	mov.w	r2, #640	; 0x280
 801806a:	4619      	mov	r1, r3
 801806c:	200e      	movs	r0, #14
 801806e:	f7f7 ff3d 	bl	800feec <pbuf_alloc>
 8018072:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8018074:	697b      	ldr	r3, [r7, #20]
 8018076:	2b00      	cmp	r3, #0
 8018078:	f000 80a1 	beq.w	80181be <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801807c:	697b      	ldr	r3, [r7, #20]
 801807e:	895b      	ldrh	r3, [r3, #10]
 8018080:	461a      	mov	r2, r3
 8018082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018084:	3308      	adds	r3, #8
 8018086:	429a      	cmp	r2, r3
 8018088:	d203      	bcs.n	8018092 <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801808a:	6978      	ldr	r0, [r7, #20]
 801808c:	f7f8 fa12 	bl	80104b4 <pbuf_free>
          goto icmperr;
 8018090:	e096      	b.n	80181c0 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	685b      	ldr	r3, [r3, #4]
 8018096:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8018098:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801809a:	4618      	mov	r0, r3
 801809c:	f001 fdf1 	bl	8019c82 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80180a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180a2:	4619      	mov	r1, r3
 80180a4:	6978      	ldr	r0, [r7, #20]
 80180a6:	f7f8 f97f 	bl	80103a8 <pbuf_remove_header>
 80180aa:	4603      	mov	r3, r0
 80180ac:	2b00      	cmp	r3, #0
 80180ae:	d009      	beq.n	80180c4 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80180b0:	4b49      	ldr	r3, [pc, #292]	; (80181d8 <icmp_input+0x230>)
 80180b2:	22b6      	movs	r2, #182	; 0xb6
 80180b4:	4949      	ldr	r1, [pc, #292]	; (80181dc <icmp_input+0x234>)
 80180b6:	484a      	ldr	r0, [pc, #296]	; (80181e0 <icmp_input+0x238>)
 80180b8:	f001 fe54 	bl	8019d64 <iprintf>
          pbuf_free(r);
 80180bc:	6978      	ldr	r0, [r7, #20]
 80180be:	f7f8 f9f9 	bl	80104b4 <pbuf_free>
          goto icmperr;
 80180c2:	e07d      	b.n	80181c0 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80180c4:	6879      	ldr	r1, [r7, #4]
 80180c6:	6978      	ldr	r0, [r7, #20]
 80180c8:	f7f8 fb28 	bl	801071c <pbuf_copy>
 80180cc:	4603      	mov	r3, r0
 80180ce:	2b00      	cmp	r3, #0
 80180d0:	d003      	beq.n	80180da <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80180d2:	6978      	ldr	r0, [r7, #20]
 80180d4:	f7f8 f9ee 	bl	80104b4 <pbuf_free>
          goto icmperr;
 80180d8:	e072      	b.n	80181c0 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80180da:	6878      	ldr	r0, [r7, #4]
 80180dc:	f7f8 f9ea 	bl	80104b4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80180e0:	697b      	ldr	r3, [r7, #20]
 80180e2:	607b      	str	r3, [r7, #4]
 80180e4:	e00f      	b.n	8018106 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80180e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80180e8:	330e      	adds	r3, #14
 80180ea:	4619      	mov	r1, r3
 80180ec:	6878      	ldr	r0, [r7, #4]
 80180ee:	f7f8 f95b 	bl	80103a8 <pbuf_remove_header>
 80180f2:	4603      	mov	r3, r0
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d006      	beq.n	8018106 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80180f8:	4b37      	ldr	r3, [pc, #220]	; (80181d8 <icmp_input+0x230>)
 80180fa:	22c7      	movs	r2, #199	; 0xc7
 80180fc:	4939      	ldr	r1, [pc, #228]	; (80181e4 <icmp_input+0x23c>)
 80180fe:	4838      	ldr	r0, [pc, #224]	; (80181e0 <icmp_input+0x238>)
 8018100:	f001 fe30 	bl	8019d64 <iprintf>
          goto icmperr;
 8018104:	e05c      	b.n	80181c0 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	685b      	ldr	r3, [r3, #4]
 801810a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801810c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801810e:	4619      	mov	r1, r3
 8018110:	6878      	ldr	r0, [r7, #4]
 8018112:	f7f8 f939 	bl	8010388 <pbuf_add_header>
 8018116:	4603      	mov	r3, r0
 8018118:	2b00      	cmp	r3, #0
 801811a:	d13c      	bne.n	8018196 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	685b      	ldr	r3, [r3, #4]
 8018120:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8018122:	69fb      	ldr	r3, [r7, #28]
 8018124:	681a      	ldr	r2, [r3, #0]
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801812a:	4b29      	ldr	r3, [pc, #164]	; (80181d0 <icmp_input+0x228>)
 801812c:	691a      	ldr	r2, [r3, #16]
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8018132:	693b      	ldr	r3, [r7, #16]
 8018134:	2200      	movs	r2, #0
 8018136:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8018138:	693b      	ldr	r3, [r7, #16]
 801813a:	885b      	ldrh	r3, [r3, #2]
 801813c:	b29b      	uxth	r3, r3
 801813e:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8018142:	4293      	cmp	r3, r2
 8018144:	d907      	bls.n	8018156 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8018146:	693b      	ldr	r3, [r7, #16]
 8018148:	885b      	ldrh	r3, [r3, #2]
 801814a:	b29b      	uxth	r3, r3
 801814c:	3309      	adds	r3, #9
 801814e:	b29a      	uxth	r2, r3
 8018150:	693b      	ldr	r3, [r7, #16]
 8018152:	805a      	strh	r2, [r3, #2]
 8018154:	e006      	b.n	8018164 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8018156:	693b      	ldr	r3, [r7, #16]
 8018158:	885b      	ldrh	r3, [r3, #2]
 801815a:	b29b      	uxth	r3, r3
 801815c:	3308      	adds	r3, #8
 801815e:	b29a      	uxth	r2, r3
 8018160:	693b      	ldr	r3, [r7, #16]
 8018162:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8018164:	68fb      	ldr	r3, [r7, #12]
 8018166:	22ff      	movs	r2, #255	; 0xff
 8018168:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801816a:	68fb      	ldr	r3, [r7, #12]
 801816c:	2200      	movs	r2, #0
 801816e:	729a      	strb	r2, [r3, #10]
 8018170:	2200      	movs	r2, #0
 8018172:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	9302      	str	r3, [sp, #8]
 8018178:	2301      	movs	r3, #1
 801817a:	9301      	str	r3, [sp, #4]
 801817c:	2300      	movs	r3, #0
 801817e:	9300      	str	r3, [sp, #0]
 8018180:	23ff      	movs	r3, #255	; 0xff
 8018182:	2200      	movs	r2, #0
 8018184:	69f9      	ldr	r1, [r7, #28]
 8018186:	6878      	ldr	r0, [r7, #4]
 8018188:	f000 fa80 	bl	801868c <ip4_output_if>
 801818c:	4603      	mov	r3, r0
 801818e:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8018190:	e001      	b.n	8018196 <icmp_input+0x1ee>
      break;
 8018192:	bf00      	nop
 8018194:	e000      	b.n	8018198 <icmp_input+0x1f0>
      break;
 8018196:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018198:	6878      	ldr	r0, [r7, #4]
 801819a:	f7f8 f98b 	bl	80104b4 <pbuf_free>
  return;
 801819e:	e013      	b.n	80181c8 <icmp_input+0x220>
    goto lenerr;
 80181a0:	bf00      	nop
 80181a2:	e002      	b.n	80181aa <icmp_input+0x202>
    goto lenerr;
 80181a4:	bf00      	nop
 80181a6:	e000      	b.n	80181aa <icmp_input+0x202>
        goto lenerr;
 80181a8:	bf00      	nop
lenerr:
  pbuf_free(p);
 80181aa:	6878      	ldr	r0, [r7, #4]
 80181ac:	f7f8 f982 	bl	80104b4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80181b0:	e00a      	b.n	80181c8 <icmp_input+0x220>
        goto icmperr;
 80181b2:	bf00      	nop
 80181b4:	e004      	b.n	80181c0 <icmp_input+0x218>
        goto icmperr;
 80181b6:	bf00      	nop
 80181b8:	e002      	b.n	80181c0 <icmp_input+0x218>
          goto icmperr;
 80181ba:	bf00      	nop
 80181bc:	e000      	b.n	80181c0 <icmp_input+0x218>
          goto icmperr;
 80181be:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80181c0:	6878      	ldr	r0, [r7, #4]
 80181c2:	f7f8 f977 	bl	80104b4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80181c6:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80181c8:	3728      	adds	r7, #40	; 0x28
 80181ca:	46bd      	mov	sp, r7
 80181cc:	bd80      	pop	{r7, pc}
 80181ce:	bf00      	nop
 80181d0:	240047dc 	.word	0x240047dc
 80181d4:	240047f0 	.word	0x240047f0
 80181d8:	0801d48c 	.word	0x0801d48c
 80181dc:	0801d4c4 	.word	0x0801d4c4
 80181e0:	0801d4fc 	.word	0x0801d4fc
 80181e4:	0801d524 	.word	0x0801d524

080181e8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b082      	sub	sp, #8
 80181ec:	af00      	add	r7, sp, #0
 80181ee:	6078      	str	r0, [r7, #4]
 80181f0:	460b      	mov	r3, r1
 80181f2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80181f4:	78fb      	ldrb	r3, [r7, #3]
 80181f6:	461a      	mov	r2, r3
 80181f8:	2103      	movs	r1, #3
 80181fa:	6878      	ldr	r0, [r7, #4]
 80181fc:	f000 f814 	bl	8018228 <icmp_send_response>
}
 8018200:	bf00      	nop
 8018202:	3708      	adds	r7, #8
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}

08018208 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b082      	sub	sp, #8
 801820c:	af00      	add	r7, sp, #0
 801820e:	6078      	str	r0, [r7, #4]
 8018210:	460b      	mov	r3, r1
 8018212:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018214:	78fb      	ldrb	r3, [r7, #3]
 8018216:	461a      	mov	r2, r3
 8018218:	210b      	movs	r1, #11
 801821a:	6878      	ldr	r0, [r7, #4]
 801821c:	f000 f804 	bl	8018228 <icmp_send_response>
}
 8018220:	bf00      	nop
 8018222:	3708      	adds	r7, #8
 8018224:	46bd      	mov	sp, r7
 8018226:	bd80      	pop	{r7, pc}

08018228 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b08c      	sub	sp, #48	; 0x30
 801822c:	af04      	add	r7, sp, #16
 801822e:	6078      	str	r0, [r7, #4]
 8018230:	460b      	mov	r3, r1
 8018232:	70fb      	strb	r3, [r7, #3]
 8018234:	4613      	mov	r3, r2
 8018236:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018238:	f44f 7220 	mov.w	r2, #640	; 0x280
 801823c:	2124      	movs	r1, #36	; 0x24
 801823e:	2022      	movs	r0, #34	; 0x22
 8018240:	f7f7 fe54 	bl	800feec <pbuf_alloc>
 8018244:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018246:	69fb      	ldr	r3, [r7, #28]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d056      	beq.n	80182fa <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801824c:	69fb      	ldr	r3, [r7, #28]
 801824e:	895b      	ldrh	r3, [r3, #10]
 8018250:	2b23      	cmp	r3, #35	; 0x23
 8018252:	d806      	bhi.n	8018262 <icmp_send_response+0x3a>
 8018254:	4b2b      	ldr	r3, [pc, #172]	; (8018304 <icmp_send_response+0xdc>)
 8018256:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801825a:	492b      	ldr	r1, [pc, #172]	; (8018308 <icmp_send_response+0xe0>)
 801825c:	482b      	ldr	r0, [pc, #172]	; (801830c <icmp_send_response+0xe4>)
 801825e:	f001 fd81 	bl	8019d64 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018262:	687b      	ldr	r3, [r7, #4]
 8018264:	685b      	ldr	r3, [r3, #4]
 8018266:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018268:	69fb      	ldr	r3, [r7, #28]
 801826a:	685b      	ldr	r3, [r3, #4]
 801826c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801826e:	697b      	ldr	r3, [r7, #20]
 8018270:	78fa      	ldrb	r2, [r7, #3]
 8018272:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018274:	697b      	ldr	r3, [r7, #20]
 8018276:	78ba      	ldrb	r2, [r7, #2]
 8018278:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801827a:	697b      	ldr	r3, [r7, #20]
 801827c:	2200      	movs	r2, #0
 801827e:	711a      	strb	r2, [r3, #4]
 8018280:	2200      	movs	r2, #0
 8018282:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018284:	697b      	ldr	r3, [r7, #20]
 8018286:	2200      	movs	r2, #0
 8018288:	719a      	strb	r2, [r3, #6]
 801828a:	2200      	movs	r2, #0
 801828c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801828e:	69fb      	ldr	r3, [r7, #28]
 8018290:	685b      	ldr	r3, [r3, #4]
 8018292:	f103 0008 	add.w	r0, r3, #8
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	685b      	ldr	r3, [r3, #4]
 801829a:	221c      	movs	r2, #28
 801829c:	4619      	mov	r1, r3
 801829e:	f001 fcf0 	bl	8019c82 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80182a2:	69bb      	ldr	r3, [r7, #24]
 80182a4:	68db      	ldr	r3, [r3, #12]
 80182a6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80182a8:	f107 030c 	add.w	r3, r7, #12
 80182ac:	4618      	mov	r0, r3
 80182ae:	f000 f82f 	bl	8018310 <ip4_route>
 80182b2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80182b4:	693b      	ldr	r3, [r7, #16]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d01b      	beq.n	80182f2 <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80182ba:	697b      	ldr	r3, [r7, #20]
 80182bc:	2200      	movs	r2, #0
 80182be:	709a      	strb	r2, [r3, #2]
 80182c0:	2200      	movs	r2, #0
 80182c2:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80182c4:	69fb      	ldr	r3, [r7, #28]
 80182c6:	895b      	ldrh	r3, [r3, #10]
 80182c8:	4619      	mov	r1, r3
 80182ca:	6978      	ldr	r0, [r7, #20]
 80182cc:	f7f6 fcd3 	bl	800ec76 <inet_chksum>
 80182d0:	4603      	mov	r3, r0
 80182d2:	461a      	mov	r2, r3
 80182d4:	697b      	ldr	r3, [r7, #20]
 80182d6:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80182d8:	f107 020c 	add.w	r2, r7, #12
 80182dc:	693b      	ldr	r3, [r7, #16]
 80182de:	9302      	str	r3, [sp, #8]
 80182e0:	2301      	movs	r3, #1
 80182e2:	9301      	str	r3, [sp, #4]
 80182e4:	2300      	movs	r3, #0
 80182e6:	9300      	str	r3, [sp, #0]
 80182e8:	23ff      	movs	r3, #255	; 0xff
 80182ea:	2100      	movs	r1, #0
 80182ec:	69f8      	ldr	r0, [r7, #28]
 80182ee:	f000 f9cd 	bl	801868c <ip4_output_if>
  }
  pbuf_free(q);
 80182f2:	69f8      	ldr	r0, [r7, #28]
 80182f4:	f7f8 f8de 	bl	80104b4 <pbuf_free>
 80182f8:	e000      	b.n	80182fc <icmp_send_response+0xd4>
    return;
 80182fa:	bf00      	nop
}
 80182fc:	3720      	adds	r7, #32
 80182fe:	46bd      	mov	sp, r7
 8018300:	bd80      	pop	{r7, pc}
 8018302:	bf00      	nop
 8018304:	0801d48c 	.word	0x0801d48c
 8018308:	0801d558 	.word	0x0801d558
 801830c:	0801d4fc 	.word	0x0801d4fc

08018310 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018310:	b480      	push	{r7}
 8018312:	b085      	sub	sp, #20
 8018314:	af00      	add	r7, sp, #0
 8018316:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018318:	4b33      	ldr	r3, [pc, #204]	; (80183e8 <ip4_route+0xd8>)
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	60fb      	str	r3, [r7, #12]
 801831e:	e036      	b.n	801838e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018326:	f003 0301 	and.w	r3, r3, #1
 801832a:	b2db      	uxtb	r3, r3
 801832c:	2b00      	cmp	r3, #0
 801832e:	d02b      	beq.n	8018388 <ip4_route+0x78>
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018336:	089b      	lsrs	r3, r3, #2
 8018338:	f003 0301 	and.w	r3, r3, #1
 801833c:	b2db      	uxtb	r3, r3
 801833e:	2b00      	cmp	r3, #0
 8018340:	d022      	beq.n	8018388 <ip4_route+0x78>
 8018342:	68fb      	ldr	r3, [r7, #12]
 8018344:	3304      	adds	r3, #4
 8018346:	681b      	ldr	r3, [r3, #0]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d01d      	beq.n	8018388 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681a      	ldr	r2, [r3, #0]
 8018350:	68fb      	ldr	r3, [r7, #12]
 8018352:	3304      	adds	r3, #4
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	405a      	eors	r2, r3
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	3308      	adds	r3, #8
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	4013      	ands	r3, r2
 8018360:	2b00      	cmp	r3, #0
 8018362:	d101      	bne.n	8018368 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018364:	68fb      	ldr	r3, [r7, #12]
 8018366:	e038      	b.n	80183da <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018368:	68fb      	ldr	r3, [r7, #12]
 801836a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801836e:	f003 0302 	and.w	r3, r3, #2
 8018372:	2b00      	cmp	r3, #0
 8018374:	d108      	bne.n	8018388 <ip4_route+0x78>
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	681a      	ldr	r2, [r3, #0]
 801837a:	68fb      	ldr	r3, [r7, #12]
 801837c:	330c      	adds	r3, #12
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	429a      	cmp	r2, r3
 8018382:	d101      	bne.n	8018388 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	e028      	b.n	80183da <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018388:	68fb      	ldr	r3, [r7, #12]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	60fb      	str	r3, [r7, #12]
 801838e:	68fb      	ldr	r3, [r7, #12]
 8018390:	2b00      	cmp	r3, #0
 8018392:	d1c5      	bne.n	8018320 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018394:	4b15      	ldr	r3, [pc, #84]	; (80183ec <ip4_route+0xdc>)
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	2b00      	cmp	r3, #0
 801839a:	d01a      	beq.n	80183d2 <ip4_route+0xc2>
 801839c:	4b13      	ldr	r3, [pc, #76]	; (80183ec <ip4_route+0xdc>)
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183a4:	f003 0301 	and.w	r3, r3, #1
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d012      	beq.n	80183d2 <ip4_route+0xc2>
 80183ac:	4b0f      	ldr	r3, [pc, #60]	; (80183ec <ip4_route+0xdc>)
 80183ae:	681b      	ldr	r3, [r3, #0]
 80183b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183b4:	f003 0304 	and.w	r3, r3, #4
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d00a      	beq.n	80183d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80183bc:	4b0b      	ldr	r3, [pc, #44]	; (80183ec <ip4_route+0xdc>)
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	3304      	adds	r3, #4
 80183c2:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d004      	beq.n	80183d2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	b2db      	uxtb	r3, r3
 80183ce:	2b7f      	cmp	r3, #127	; 0x7f
 80183d0:	d101      	bne.n	80183d6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80183d2:	2300      	movs	r3, #0
 80183d4:	e001      	b.n	80183da <ip4_route+0xca>
  }

  return netif_default;
 80183d6:	4b05      	ldr	r3, [pc, #20]	; (80183ec <ip4_route+0xdc>)
 80183d8:	681b      	ldr	r3, [r3, #0]
}
 80183da:	4618      	mov	r0, r3
 80183dc:	3714      	adds	r7, #20
 80183de:	46bd      	mov	sp, r7
 80183e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e4:	4770      	bx	lr
 80183e6:	bf00      	nop
 80183e8:	2400788c 	.word	0x2400788c
 80183ec:	24007890 	.word	0x24007890

080183f0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b082      	sub	sp, #8
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80183fe:	f003 0301 	and.w	r3, r3, #1
 8018402:	b2db      	uxtb	r3, r3
 8018404:	2b00      	cmp	r3, #0
 8018406:	d016      	beq.n	8018436 <ip4_input_accept+0x46>
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	3304      	adds	r3, #4
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	2b00      	cmp	r3, #0
 8018410:	d011      	beq.n	8018436 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018412:	4b0b      	ldr	r3, [pc, #44]	; (8018440 <ip4_input_accept+0x50>)
 8018414:	695a      	ldr	r2, [r3, #20]
 8018416:	687b      	ldr	r3, [r7, #4]
 8018418:	3304      	adds	r3, #4
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	429a      	cmp	r2, r3
 801841e:	d008      	beq.n	8018432 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018420:	4b07      	ldr	r3, [pc, #28]	; (8018440 <ip4_input_accept+0x50>)
 8018422:	695b      	ldr	r3, [r3, #20]
 8018424:	6879      	ldr	r1, [r7, #4]
 8018426:	4618      	mov	r0, r3
 8018428:	f000 fa08 	bl	801883c <ip4_addr_isbroadcast_u32>
 801842c:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801842e:	2b00      	cmp	r3, #0
 8018430:	d001      	beq.n	8018436 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018432:	2301      	movs	r3, #1
 8018434:	e000      	b.n	8018438 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018436:	2300      	movs	r3, #0
}
 8018438:	4618      	mov	r0, r3
 801843a:	3708      	adds	r7, #8
 801843c:	46bd      	mov	sp, r7
 801843e:	bd80      	pop	{r7, pc}
 8018440:	240047dc 	.word	0x240047dc

08018444 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018444:	b580      	push	{r7, lr}
 8018446:	b086      	sub	sp, #24
 8018448:	af00      	add	r7, sp, #0
 801844a:	6078      	str	r0, [r7, #4]
 801844c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	685b      	ldr	r3, [r3, #4]
 8018452:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018454:	697b      	ldr	r3, [r7, #20]
 8018456:	781b      	ldrb	r3, [r3, #0]
 8018458:	091b      	lsrs	r3, r3, #4
 801845a:	b2db      	uxtb	r3, r3
 801845c:	2b04      	cmp	r3, #4
 801845e:	d004      	beq.n	801846a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018460:	6878      	ldr	r0, [r7, #4]
 8018462:	f7f8 f827 	bl	80104b4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018466:	2300      	movs	r3, #0
 8018468:	e107      	b.n	801867a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801846a:	697b      	ldr	r3, [r7, #20]
 801846c:	781b      	ldrb	r3, [r3, #0]
 801846e:	f003 030f 	and.w	r3, r3, #15
 8018472:	b2db      	uxtb	r3, r3
 8018474:	009b      	lsls	r3, r3, #2
 8018476:	b2db      	uxtb	r3, r3
 8018478:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801847a:	697b      	ldr	r3, [r7, #20]
 801847c:	885b      	ldrh	r3, [r3, #2]
 801847e:	b29b      	uxth	r3, r3
 8018480:	4618      	mov	r0, r3
 8018482:	f7f6 fb6d 	bl	800eb60 <lwip_htons>
 8018486:	4603      	mov	r3, r0
 8018488:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	891b      	ldrh	r3, [r3, #8]
 801848e:	89ba      	ldrh	r2, [r7, #12]
 8018490:	429a      	cmp	r2, r3
 8018492:	d204      	bcs.n	801849e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018494:	89bb      	ldrh	r3, [r7, #12]
 8018496:	4619      	mov	r1, r3
 8018498:	6878      	ldr	r0, [r7, #4]
 801849a:	f7f7 fe85 	bl	80101a8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801849e:	687b      	ldr	r3, [r7, #4]
 80184a0:	895b      	ldrh	r3, [r3, #10]
 80184a2:	89fa      	ldrh	r2, [r7, #14]
 80184a4:	429a      	cmp	r2, r3
 80184a6:	d807      	bhi.n	80184b8 <ip4_input+0x74>
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	891b      	ldrh	r3, [r3, #8]
 80184ac:	89ba      	ldrh	r2, [r7, #12]
 80184ae:	429a      	cmp	r2, r3
 80184b0:	d802      	bhi.n	80184b8 <ip4_input+0x74>
 80184b2:	89fb      	ldrh	r3, [r7, #14]
 80184b4:	2b13      	cmp	r3, #19
 80184b6:	d804      	bhi.n	80184c2 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80184b8:	6878      	ldr	r0, [r7, #4]
 80184ba:	f7f7 fffb 	bl	80104b4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80184be:	2300      	movs	r3, #0
 80184c0:	e0db      	b.n	801867a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80184c2:	697b      	ldr	r3, [r7, #20]
 80184c4:	691b      	ldr	r3, [r3, #16]
 80184c6:	4a6f      	ldr	r2, [pc, #444]	; (8018684 <ip4_input+0x240>)
 80184c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80184ca:	697b      	ldr	r3, [r7, #20]
 80184cc:	68db      	ldr	r3, [r3, #12]
 80184ce:	4a6d      	ldr	r2, [pc, #436]	; (8018684 <ip4_input+0x240>)
 80184d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80184d2:	4b6c      	ldr	r3, [pc, #432]	; (8018684 <ip4_input+0x240>)
 80184d4:	695b      	ldr	r3, [r3, #20]
 80184d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80184da:	2be0      	cmp	r3, #224	; 0xe0
 80184dc:	d112      	bne.n	8018504 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80184de:	683b      	ldr	r3, [r7, #0]
 80184e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80184e4:	f003 0301 	and.w	r3, r3, #1
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d007      	beq.n	80184fe <ip4_input+0xba>
 80184ee:	683b      	ldr	r3, [r7, #0]
 80184f0:	3304      	adds	r3, #4
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d002      	beq.n	80184fe <ip4_input+0xba>
      netif = inp;
 80184f8:	683b      	ldr	r3, [r7, #0]
 80184fa:	613b      	str	r3, [r7, #16]
 80184fc:	e02a      	b.n	8018554 <ip4_input+0x110>
    } else {
      netif = NULL;
 80184fe:	2300      	movs	r3, #0
 8018500:	613b      	str	r3, [r7, #16]
 8018502:	e027      	b.n	8018554 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018504:	6838      	ldr	r0, [r7, #0]
 8018506:	f7ff ff73 	bl	80183f0 <ip4_input_accept>
 801850a:	4603      	mov	r3, r0
 801850c:	2b00      	cmp	r3, #0
 801850e:	d002      	beq.n	8018516 <ip4_input+0xd2>
      netif = inp;
 8018510:	683b      	ldr	r3, [r7, #0]
 8018512:	613b      	str	r3, [r7, #16]
 8018514:	e01e      	b.n	8018554 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018516:	2300      	movs	r3, #0
 8018518:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801851a:	4b5a      	ldr	r3, [pc, #360]	; (8018684 <ip4_input+0x240>)
 801851c:	695b      	ldr	r3, [r3, #20]
 801851e:	b2db      	uxtb	r3, r3
 8018520:	2b7f      	cmp	r3, #127	; 0x7f
 8018522:	d017      	beq.n	8018554 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018524:	4b58      	ldr	r3, [pc, #352]	; (8018688 <ip4_input+0x244>)
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	613b      	str	r3, [r7, #16]
 801852a:	e00e      	b.n	801854a <ip4_input+0x106>
          if (netif == inp) {
 801852c:	693a      	ldr	r2, [r7, #16]
 801852e:	683b      	ldr	r3, [r7, #0]
 8018530:	429a      	cmp	r2, r3
 8018532:	d006      	beq.n	8018542 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018534:	6938      	ldr	r0, [r7, #16]
 8018536:	f7ff ff5b 	bl	80183f0 <ip4_input_accept>
 801853a:	4603      	mov	r3, r0
 801853c:	2b00      	cmp	r3, #0
 801853e:	d108      	bne.n	8018552 <ip4_input+0x10e>
 8018540:	e000      	b.n	8018544 <ip4_input+0x100>
            continue;
 8018542:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018544:	693b      	ldr	r3, [r7, #16]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	613b      	str	r3, [r7, #16]
 801854a:	693b      	ldr	r3, [r7, #16]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d1ed      	bne.n	801852c <ip4_input+0xe8>
 8018550:	e000      	b.n	8018554 <ip4_input+0x110>
            break;
 8018552:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018554:	4b4b      	ldr	r3, [pc, #300]	; (8018684 <ip4_input+0x240>)
 8018556:	691b      	ldr	r3, [r3, #16]
 8018558:	6839      	ldr	r1, [r7, #0]
 801855a:	4618      	mov	r0, r3
 801855c:	f000 f96e 	bl	801883c <ip4_addr_isbroadcast_u32>
 8018560:	4603      	mov	r3, r0
 8018562:	2b00      	cmp	r3, #0
 8018564:	d105      	bne.n	8018572 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018566:	4b47      	ldr	r3, [pc, #284]	; (8018684 <ip4_input+0x240>)
 8018568:	691b      	ldr	r3, [r3, #16]
 801856a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801856e:	2be0      	cmp	r3, #224	; 0xe0
 8018570:	d104      	bne.n	801857c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018572:	6878      	ldr	r0, [r7, #4]
 8018574:	f7f7 ff9e 	bl	80104b4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018578:	2300      	movs	r3, #0
 801857a:	e07e      	b.n	801867a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801857c:	693b      	ldr	r3, [r7, #16]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d104      	bne.n	801858c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018582:	6878      	ldr	r0, [r7, #4]
 8018584:	f7f7 ff96 	bl	80104b4 <pbuf_free>
    return ERR_OK;
 8018588:	2300      	movs	r3, #0
 801858a:	e076      	b.n	801867a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801858c:	697b      	ldr	r3, [r7, #20]
 801858e:	88db      	ldrh	r3, [r3, #6]
 8018590:	b29b      	uxth	r3, r3
 8018592:	461a      	mov	r2, r3
 8018594:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018598:	4013      	ands	r3, r2
 801859a:	2b00      	cmp	r3, #0
 801859c:	d00b      	beq.n	80185b6 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801859e:	6878      	ldr	r0, [r7, #4]
 80185a0:	f000 fd24 	bl	8018fec <ip4_reass>
 80185a4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	2b00      	cmp	r3, #0
 80185aa:	d101      	bne.n	80185b0 <ip4_input+0x16c>
      return ERR_OK;
 80185ac:	2300      	movs	r3, #0
 80185ae:	e064      	b.n	801867a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	685b      	ldr	r3, [r3, #4]
 80185b4:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80185b6:	4a33      	ldr	r2, [pc, #204]	; (8018684 <ip4_input+0x240>)
 80185b8:	693b      	ldr	r3, [r7, #16]
 80185ba:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80185bc:	4a31      	ldr	r2, [pc, #196]	; (8018684 <ip4_input+0x240>)
 80185be:	683b      	ldr	r3, [r7, #0]
 80185c0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80185c2:	4a30      	ldr	r2, [pc, #192]	; (8018684 <ip4_input+0x240>)
 80185c4:	697b      	ldr	r3, [r7, #20]
 80185c6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80185c8:	697b      	ldr	r3, [r7, #20]
 80185ca:	781b      	ldrb	r3, [r3, #0]
 80185cc:	f003 030f 	and.w	r3, r3, #15
 80185d0:	b2db      	uxtb	r3, r3
 80185d2:	009b      	lsls	r3, r3, #2
 80185d4:	b2db      	uxtb	r3, r3
 80185d6:	b29a      	uxth	r2, r3
 80185d8:	4b2a      	ldr	r3, [pc, #168]	; (8018684 <ip4_input+0x240>)
 80185da:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80185dc:	89fb      	ldrh	r3, [r7, #14]
 80185de:	4619      	mov	r1, r3
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f7f7 fee1 	bl	80103a8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80185e6:	697b      	ldr	r3, [r7, #20]
 80185e8:	7a5b      	ldrb	r3, [r3, #9]
 80185ea:	2b11      	cmp	r3, #17
 80185ec:	d006      	beq.n	80185fc <ip4_input+0x1b8>
 80185ee:	2b11      	cmp	r3, #17
 80185f0:	dc13      	bgt.n	801861a <ip4_input+0x1d6>
 80185f2:	2b01      	cmp	r3, #1
 80185f4:	d00c      	beq.n	8018610 <ip4_input+0x1cc>
 80185f6:	2b06      	cmp	r3, #6
 80185f8:	d005      	beq.n	8018606 <ip4_input+0x1c2>
 80185fa:	e00e      	b.n	801861a <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80185fc:	6839      	ldr	r1, [r7, #0]
 80185fe:	6878      	ldr	r0, [r7, #4]
 8018600:	f7fe fc42 	bl	8016e88 <udp_input>
        break;
 8018604:	e026      	b.n	8018654 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018606:	6839      	ldr	r1, [r7, #0]
 8018608:	6878      	ldr	r0, [r7, #4]
 801860a:	f7fa f837 	bl	801267c <tcp_input>
        break;
 801860e:	e021      	b.n	8018654 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018610:	6839      	ldr	r1, [r7, #0]
 8018612:	6878      	ldr	r0, [r7, #4]
 8018614:	f7ff fcc8 	bl	8017fa8 <icmp_input>
        break;
 8018618:	e01c      	b.n	8018654 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801861a:	4b1a      	ldr	r3, [pc, #104]	; (8018684 <ip4_input+0x240>)
 801861c:	695b      	ldr	r3, [r3, #20]
 801861e:	6939      	ldr	r1, [r7, #16]
 8018620:	4618      	mov	r0, r3
 8018622:	f000 f90b 	bl	801883c <ip4_addr_isbroadcast_u32>
 8018626:	4603      	mov	r3, r0
 8018628:	2b00      	cmp	r3, #0
 801862a:	d10f      	bne.n	801864c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801862c:	4b15      	ldr	r3, [pc, #84]	; (8018684 <ip4_input+0x240>)
 801862e:	695b      	ldr	r3, [r3, #20]
 8018630:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018634:	2be0      	cmp	r3, #224	; 0xe0
 8018636:	d009      	beq.n	801864c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018638:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801863c:	4619      	mov	r1, r3
 801863e:	6878      	ldr	r0, [r7, #4]
 8018640:	f7f7 ff25 	bl	801048e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018644:	2102      	movs	r1, #2
 8018646:	6878      	ldr	r0, [r7, #4]
 8018648:	f7ff fdce 	bl	80181e8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f7f7 ff31 	bl	80104b4 <pbuf_free>
        break;
 8018652:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018654:	4b0b      	ldr	r3, [pc, #44]	; (8018684 <ip4_input+0x240>)
 8018656:	2200      	movs	r2, #0
 8018658:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801865a:	4b0a      	ldr	r3, [pc, #40]	; (8018684 <ip4_input+0x240>)
 801865c:	2200      	movs	r2, #0
 801865e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018660:	4b08      	ldr	r3, [pc, #32]	; (8018684 <ip4_input+0x240>)
 8018662:	2200      	movs	r2, #0
 8018664:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018666:	4b07      	ldr	r3, [pc, #28]	; (8018684 <ip4_input+0x240>)
 8018668:	2200      	movs	r2, #0
 801866a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801866c:	4b05      	ldr	r3, [pc, #20]	; (8018684 <ip4_input+0x240>)
 801866e:	2200      	movs	r2, #0
 8018670:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018672:	4b04      	ldr	r3, [pc, #16]	; (8018684 <ip4_input+0x240>)
 8018674:	2200      	movs	r2, #0
 8018676:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018678:	2300      	movs	r3, #0
}
 801867a:	4618      	mov	r0, r3
 801867c:	3718      	adds	r7, #24
 801867e:	46bd      	mov	sp, r7
 8018680:	bd80      	pop	{r7, pc}
 8018682:	bf00      	nop
 8018684:	240047dc 	.word	0x240047dc
 8018688:	2400788c 	.word	0x2400788c

0801868c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801868c:	b580      	push	{r7, lr}
 801868e:	b08a      	sub	sp, #40	; 0x28
 8018690:	af04      	add	r7, sp, #16
 8018692:	60f8      	str	r0, [r7, #12]
 8018694:	60b9      	str	r1, [r7, #8]
 8018696:	607a      	str	r2, [r7, #4]
 8018698:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	2b00      	cmp	r3, #0
 80186a2:	d009      	beq.n	80186b8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80186a4:	68bb      	ldr	r3, [r7, #8]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d003      	beq.n	80186b2 <ip4_output_if+0x26>
 80186aa:	68bb      	ldr	r3, [r7, #8]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d102      	bne.n	80186b8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80186b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186b4:	3304      	adds	r3, #4
 80186b6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80186b8:	78fa      	ldrb	r2, [r7, #3]
 80186ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186bc:	9302      	str	r3, [sp, #8]
 80186be:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80186c2:	9301      	str	r3, [sp, #4]
 80186c4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80186c8:	9300      	str	r3, [sp, #0]
 80186ca:	4613      	mov	r3, r2
 80186cc:	687a      	ldr	r2, [r7, #4]
 80186ce:	6979      	ldr	r1, [r7, #20]
 80186d0:	68f8      	ldr	r0, [r7, #12]
 80186d2:	f000 f805 	bl	80186e0 <ip4_output_if_src>
 80186d6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80186d8:	4618      	mov	r0, r3
 80186da:	3718      	adds	r7, #24
 80186dc:	46bd      	mov	sp, r7
 80186de:	bd80      	pop	{r7, pc}

080186e0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b088      	sub	sp, #32
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	60b9      	str	r1, [r7, #8]
 80186ea:	607a      	str	r2, [r7, #4]
 80186ec:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	7b9b      	ldrb	r3, [r3, #14]
 80186f2:	2b01      	cmp	r3, #1
 80186f4:	d006      	beq.n	8018704 <ip4_output_if_src+0x24>
 80186f6:	4b4b      	ldr	r3, [pc, #300]	; (8018824 <ip4_output_if_src+0x144>)
 80186f8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80186fc:	494a      	ldr	r1, [pc, #296]	; (8018828 <ip4_output_if_src+0x148>)
 80186fe:	484b      	ldr	r0, [pc, #300]	; (801882c <ip4_output_if_src+0x14c>)
 8018700:	f001 fb30 	bl	8019d64 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	2b00      	cmp	r3, #0
 8018708:	d060      	beq.n	80187cc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801870a:	2314      	movs	r3, #20
 801870c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801870e:	2114      	movs	r1, #20
 8018710:	68f8      	ldr	r0, [r7, #12]
 8018712:	f7f7 fe39 	bl	8010388 <pbuf_add_header>
 8018716:	4603      	mov	r3, r0
 8018718:	2b00      	cmp	r3, #0
 801871a:	d002      	beq.n	8018722 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801871c:	f06f 0301 	mvn.w	r3, #1
 8018720:	e07c      	b.n	801881c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	685b      	ldr	r3, [r3, #4]
 8018726:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018728:	68fb      	ldr	r3, [r7, #12]
 801872a:	895b      	ldrh	r3, [r3, #10]
 801872c:	2b13      	cmp	r3, #19
 801872e:	d806      	bhi.n	801873e <ip4_output_if_src+0x5e>
 8018730:	4b3c      	ldr	r3, [pc, #240]	; (8018824 <ip4_output_if_src+0x144>)
 8018732:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018736:	493e      	ldr	r1, [pc, #248]	; (8018830 <ip4_output_if_src+0x150>)
 8018738:	483c      	ldr	r0, [pc, #240]	; (801882c <ip4_output_if_src+0x14c>)
 801873a:	f001 fb13 	bl	8019d64 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801873e:	69fb      	ldr	r3, [r7, #28]
 8018740:	78fa      	ldrb	r2, [r7, #3]
 8018742:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018744:	69fb      	ldr	r3, [r7, #28]
 8018746:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801874a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681a      	ldr	r2, [r3, #0]
 8018750:	69fb      	ldr	r3, [r7, #28]
 8018752:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018754:	8b7b      	ldrh	r3, [r7, #26]
 8018756:	089b      	lsrs	r3, r3, #2
 8018758:	b29b      	uxth	r3, r3
 801875a:	b2db      	uxtb	r3, r3
 801875c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018760:	b2da      	uxtb	r2, r3
 8018762:	69fb      	ldr	r3, [r7, #28]
 8018764:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018766:	69fb      	ldr	r3, [r7, #28]
 8018768:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801876c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801876e:	68fb      	ldr	r3, [r7, #12]
 8018770:	891b      	ldrh	r3, [r3, #8]
 8018772:	4618      	mov	r0, r3
 8018774:	f7f6 f9f4 	bl	800eb60 <lwip_htons>
 8018778:	4603      	mov	r3, r0
 801877a:	461a      	mov	r2, r3
 801877c:	69fb      	ldr	r3, [r7, #28]
 801877e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018780:	69fb      	ldr	r3, [r7, #28]
 8018782:	2200      	movs	r2, #0
 8018784:	719a      	strb	r2, [r3, #6]
 8018786:	2200      	movs	r2, #0
 8018788:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801878a:	4b2a      	ldr	r3, [pc, #168]	; (8018834 <ip4_output_if_src+0x154>)
 801878c:	881b      	ldrh	r3, [r3, #0]
 801878e:	4618      	mov	r0, r3
 8018790:	f7f6 f9e6 	bl	800eb60 <lwip_htons>
 8018794:	4603      	mov	r3, r0
 8018796:	461a      	mov	r2, r3
 8018798:	69fb      	ldr	r3, [r7, #28]
 801879a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801879c:	4b25      	ldr	r3, [pc, #148]	; (8018834 <ip4_output_if_src+0x154>)
 801879e:	881b      	ldrh	r3, [r3, #0]
 80187a0:	3301      	adds	r3, #1
 80187a2:	b29a      	uxth	r2, r3
 80187a4:	4b23      	ldr	r3, [pc, #140]	; (8018834 <ip4_output_if_src+0x154>)
 80187a6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80187a8:	68bb      	ldr	r3, [r7, #8]
 80187aa:	2b00      	cmp	r3, #0
 80187ac:	d104      	bne.n	80187b8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80187ae:	4b22      	ldr	r3, [pc, #136]	; (8018838 <ip4_output_if_src+0x158>)
 80187b0:	681a      	ldr	r2, [r3, #0]
 80187b2:	69fb      	ldr	r3, [r7, #28]
 80187b4:	60da      	str	r2, [r3, #12]
 80187b6:	e003      	b.n	80187c0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80187b8:	68bb      	ldr	r3, [r7, #8]
 80187ba:	681a      	ldr	r2, [r3, #0]
 80187bc:	69fb      	ldr	r3, [r7, #28]
 80187be:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80187c0:	69fb      	ldr	r3, [r7, #28]
 80187c2:	2200      	movs	r2, #0
 80187c4:	729a      	strb	r2, [r3, #10]
 80187c6:	2200      	movs	r2, #0
 80187c8:	72da      	strb	r2, [r3, #11]
 80187ca:	e00f      	b.n	80187ec <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80187cc:	68fb      	ldr	r3, [r7, #12]
 80187ce:	895b      	ldrh	r3, [r3, #10]
 80187d0:	2b13      	cmp	r3, #19
 80187d2:	d802      	bhi.n	80187da <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80187d4:	f06f 0301 	mvn.w	r3, #1
 80187d8:	e020      	b.n	801881c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80187da:	68fb      	ldr	r3, [r7, #12]
 80187dc:	685b      	ldr	r3, [r3, #4]
 80187de:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80187e0:	69fb      	ldr	r3, [r7, #28]
 80187e2:	691b      	ldr	r3, [r3, #16]
 80187e4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80187e6:	f107 0314 	add.w	r3, r7, #20
 80187ea:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80187ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d00c      	beq.n	801880e <ip4_output_if_src+0x12e>
 80187f4:	68fb      	ldr	r3, [r7, #12]
 80187f6:	891a      	ldrh	r2, [r3, #8]
 80187f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80187fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80187fc:	429a      	cmp	r2, r3
 80187fe:	d906      	bls.n	801880e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8018800:	687a      	ldr	r2, [r7, #4]
 8018802:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8018804:	68f8      	ldr	r0, [r7, #12]
 8018806:	f000 fddf 	bl	80193c8 <ip4_frag>
 801880a:	4603      	mov	r3, r0
 801880c:	e006      	b.n	801881c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801880e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018810:	695b      	ldr	r3, [r3, #20]
 8018812:	687a      	ldr	r2, [r7, #4]
 8018814:	68f9      	ldr	r1, [r7, #12]
 8018816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018818:	4798      	blx	r3
 801881a:	4603      	mov	r3, r0
}
 801881c:	4618      	mov	r0, r3
 801881e:	3720      	adds	r7, #32
 8018820:	46bd      	mov	sp, r7
 8018822:	bd80      	pop	{r7, pc}
 8018824:	0801d584 	.word	0x0801d584
 8018828:	0801d5b8 	.word	0x0801d5b8
 801882c:	0801d5c4 	.word	0x0801d5c4
 8018830:	0801d5ec 	.word	0x0801d5ec
 8018834:	2400426a 	.word	0x2400426a
 8018838:	0801e21c 	.word	0x0801e21c

0801883c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801883c:	b480      	push	{r7}
 801883e:	b085      	sub	sp, #20
 8018840:	af00      	add	r7, sp, #0
 8018842:	6078      	str	r0, [r7, #4]
 8018844:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018850:	d002      	beq.n	8018858 <ip4_addr_isbroadcast_u32+0x1c>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d101      	bne.n	801885c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8018858:	2301      	movs	r3, #1
 801885a:	e02a      	b.n	80188b2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801885c:	683b      	ldr	r3, [r7, #0]
 801885e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018862:	f003 0302 	and.w	r3, r3, #2
 8018866:	2b00      	cmp	r3, #0
 8018868:	d101      	bne.n	801886e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801886a:	2300      	movs	r3, #0
 801886c:	e021      	b.n	80188b2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	3304      	adds	r3, #4
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	687a      	ldr	r2, [r7, #4]
 8018876:	429a      	cmp	r2, r3
 8018878:	d101      	bne.n	801887e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801887a:	2300      	movs	r3, #0
 801887c:	e019      	b.n	80188b2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801887e:	68fa      	ldr	r2, [r7, #12]
 8018880:	683b      	ldr	r3, [r7, #0]
 8018882:	3304      	adds	r3, #4
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	405a      	eors	r2, r3
 8018888:	683b      	ldr	r3, [r7, #0]
 801888a:	3308      	adds	r3, #8
 801888c:	681b      	ldr	r3, [r3, #0]
 801888e:	4013      	ands	r3, r2
 8018890:	2b00      	cmp	r3, #0
 8018892:	d10d      	bne.n	80188b0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018894:	683b      	ldr	r3, [r7, #0]
 8018896:	3308      	adds	r3, #8
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	43da      	mvns	r2, r3
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80188a0:	683b      	ldr	r3, [r7, #0]
 80188a2:	3308      	adds	r3, #8
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80188a8:	429a      	cmp	r2, r3
 80188aa:	d101      	bne.n	80188b0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80188ac:	2301      	movs	r3, #1
 80188ae:	e000      	b.n	80188b2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80188b0:	2300      	movs	r3, #0
  }
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	3714      	adds	r7, #20
 80188b6:	46bd      	mov	sp, r7
 80188b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188bc:	4770      	bx	lr
	...

080188c0 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b082      	sub	sp, #8
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80188c8:	2210      	movs	r2, #16
 80188ca:	4904      	ldr	r1, [pc, #16]	; (80188dc <ip4addr_ntoa+0x1c>)
 80188cc:	6878      	ldr	r0, [r7, #4]
 80188ce:	f000 f807 	bl	80188e0 <ip4addr_ntoa_r>
 80188d2:	4603      	mov	r3, r0
}
 80188d4:	4618      	mov	r0, r3
 80188d6:	3708      	adds	r7, #8
 80188d8:	46bd      	mov	sp, r7
 80188da:	bd80      	pop	{r7, pc}
 80188dc:	2400426c 	.word	0x2400426c

080188e0 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80188e0:	b480      	push	{r7}
 80188e2:	b08d      	sub	sp, #52	; 0x34
 80188e4:	af00      	add	r7, sp, #0
 80188e6:	60f8      	str	r0, [r7, #12]
 80188e8:	60b9      	str	r1, [r7, #8]
 80188ea:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80188ec:	2300      	movs	r3, #0
 80188ee:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80188f6:	68bb      	ldr	r3, [r7, #8]
 80188f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80188fa:	f107 0318 	add.w	r3, r7, #24
 80188fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8018900:	2300      	movs	r3, #0
 8018902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018906:	e059      	b.n	80189bc <ip4addr_ntoa_r+0xdc>
    i = 0;
 8018908:	2300      	movs	r3, #0
 801890a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 801890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018910:	781a      	ldrb	r2, [r3, #0]
 8018912:	4b33      	ldr	r3, [pc, #204]	; (80189e0 <ip4addr_ntoa_r+0x100>)
 8018914:	fba3 1302 	umull	r1, r3, r3, r2
 8018918:	08d9      	lsrs	r1, r3, #3
 801891a:	460b      	mov	r3, r1
 801891c:	009b      	lsls	r3, r3, #2
 801891e:	440b      	add	r3, r1
 8018920:	005b      	lsls	r3, r3, #1
 8018922:	1ad3      	subs	r3, r2, r3
 8018924:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8018926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018928:	781b      	ldrb	r3, [r3, #0]
 801892a:	4a2d      	ldr	r2, [pc, #180]	; (80189e0 <ip4addr_ntoa_r+0x100>)
 801892c:	fba2 2303 	umull	r2, r3, r2, r3
 8018930:	08db      	lsrs	r3, r3, #3
 8018932:	b2da      	uxtb	r2, r3
 8018934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018936:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8018938:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801893c:	1c5a      	adds	r2, r3, #1
 801893e:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8018942:	4619      	mov	r1, r3
 8018944:	7ffb      	ldrb	r3, [r7, #31]
 8018946:	3330      	adds	r3, #48	; 0x30
 8018948:	b2da      	uxtb	r2, r3
 801894a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801894e:	440b      	add	r3, r1
 8018950:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8018954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018956:	781b      	ldrb	r3, [r3, #0]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d1d8      	bne.n	801890e <ip4addr_ntoa_r+0x2e>
    while (i--) {
 801895c:	e012      	b.n	8018984 <ip4addr_ntoa_r+0xa4>
      if (len++ >= buflen) {
 801895e:	6a3b      	ldr	r3, [r7, #32]
 8018960:	1c5a      	adds	r2, r3, #1
 8018962:	623a      	str	r2, [r7, #32]
 8018964:	687a      	ldr	r2, [r7, #4]
 8018966:	429a      	cmp	r2, r3
 8018968:	dc01      	bgt.n	801896e <ip4addr_ntoa_r+0x8e>
        return NULL;
 801896a:	2300      	movs	r3, #0
 801896c:	e031      	b.n	80189d2 <ip4addr_ntoa_r+0xf2>
      }
      *rp++ = inv[i];
 801896e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8018972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018974:	1c59      	adds	r1, r3, #1
 8018976:	62f9      	str	r1, [r7, #44]	; 0x2c
 8018978:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801897c:	440a      	add	r2, r1
 801897e:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8018982:	701a      	strb	r2, [r3, #0]
    while (i--) {
 8018984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8018988:	1e5a      	subs	r2, r3, #1
 801898a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801898e:	2b00      	cmp	r3, #0
 8018990:	d1e5      	bne.n	801895e <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8018992:	6a3b      	ldr	r3, [r7, #32]
 8018994:	1c5a      	adds	r2, r3, #1
 8018996:	623a      	str	r2, [r7, #32]
 8018998:	687a      	ldr	r2, [r7, #4]
 801899a:	429a      	cmp	r2, r3
 801899c:	dc01      	bgt.n	80189a2 <ip4addr_ntoa_r+0xc2>
      return NULL;
 801899e:	2300      	movs	r3, #0
 80189a0:	e017      	b.n	80189d2 <ip4addr_ntoa_r+0xf2>
    }
    *rp++ = '.';
 80189a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189a4:	1c5a      	adds	r2, r3, #1
 80189a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80189a8:	222e      	movs	r2, #46	; 0x2e
 80189aa:	701a      	strb	r2, [r3, #0]
    ap++;
 80189ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ae:	3301      	adds	r3, #1
 80189b0:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80189b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189b6:	3301      	adds	r3, #1
 80189b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80189bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80189c0:	2b03      	cmp	r3, #3
 80189c2:	d9a1      	bls.n	8018908 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80189c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189c6:	3b01      	subs	r3, #1
 80189c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80189ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80189cc:	2200      	movs	r2, #0
 80189ce:	701a      	strb	r2, [r3, #0]
  return buf;
 80189d0:	68bb      	ldr	r3, [r7, #8]
}
 80189d2:	4618      	mov	r0, r3
 80189d4:	3734      	adds	r7, #52	; 0x34
 80189d6:	46bd      	mov	sp, r7
 80189d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189dc:	4770      	bx	lr
 80189de:	bf00      	nop
 80189e0:	cccccccd 	.word	0xcccccccd

080189e4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80189e4:	b580      	push	{r7, lr}
 80189e6:	b084      	sub	sp, #16
 80189e8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80189ea:	2300      	movs	r3, #0
 80189ec:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80189ee:	4b12      	ldr	r3, [pc, #72]	; (8018a38 <ip_reass_tmr+0x54>)
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80189f4:	e018      	b.n	8018a28 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80189f6:	68fb      	ldr	r3, [r7, #12]
 80189f8:	7fdb      	ldrb	r3, [r3, #31]
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d00b      	beq.n	8018a16 <ip_reass_tmr+0x32>
      r->timer--;
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	7fdb      	ldrb	r3, [r3, #31]
 8018a02:	3b01      	subs	r3, #1
 8018a04:	b2da      	uxtb	r2, r3
 8018a06:	68fb      	ldr	r3, [r7, #12]
 8018a08:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018a0e:	68fb      	ldr	r3, [r7, #12]
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	60fb      	str	r3, [r7, #12]
 8018a14:	e008      	b.n	8018a28 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018a1a:	68fb      	ldr	r3, [r7, #12]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018a20:	68b9      	ldr	r1, [r7, #8]
 8018a22:	6878      	ldr	r0, [r7, #4]
 8018a24:	f000 f80a 	bl	8018a3c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8018a28:	68fb      	ldr	r3, [r7, #12]
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	d1e3      	bne.n	80189f6 <ip_reass_tmr+0x12>
    }
  }
}
 8018a2e:	bf00      	nop
 8018a30:	bf00      	nop
 8018a32:	3710      	adds	r7, #16
 8018a34:	46bd      	mov	sp, r7
 8018a36:	bd80      	pop	{r7, pc}
 8018a38:	2400427c 	.word	0x2400427c

08018a3c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018a3c:	b580      	push	{r7, lr}
 8018a3e:	b088      	sub	sp, #32
 8018a40:	af00      	add	r7, sp, #0
 8018a42:	6078      	str	r0, [r7, #4]
 8018a44:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8018a46:	2300      	movs	r3, #0
 8018a48:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8018a4a:	683a      	ldr	r2, [r7, #0]
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	429a      	cmp	r2, r3
 8018a50:	d105      	bne.n	8018a5e <ip_reass_free_complete_datagram+0x22>
 8018a52:	4b45      	ldr	r3, [pc, #276]	; (8018b68 <ip_reass_free_complete_datagram+0x12c>)
 8018a54:	22ab      	movs	r2, #171	; 0xab
 8018a56:	4945      	ldr	r1, [pc, #276]	; (8018b6c <ip_reass_free_complete_datagram+0x130>)
 8018a58:	4845      	ldr	r0, [pc, #276]	; (8018b70 <ip_reass_free_complete_datagram+0x134>)
 8018a5a:	f001 f983 	bl	8019d64 <iprintf>
  if (prev != NULL) {
 8018a5e:	683b      	ldr	r3, [r7, #0]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d00a      	beq.n	8018a7a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8018a64:	683b      	ldr	r3, [r7, #0]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	687a      	ldr	r2, [r7, #4]
 8018a6a:	429a      	cmp	r2, r3
 8018a6c:	d005      	beq.n	8018a7a <ip_reass_free_complete_datagram+0x3e>
 8018a6e:	4b3e      	ldr	r3, [pc, #248]	; (8018b68 <ip_reass_free_complete_datagram+0x12c>)
 8018a70:	22ad      	movs	r2, #173	; 0xad
 8018a72:	4940      	ldr	r1, [pc, #256]	; (8018b74 <ip_reass_free_complete_datagram+0x138>)
 8018a74:	483e      	ldr	r0, [pc, #248]	; (8018b70 <ip_reass_free_complete_datagram+0x134>)
 8018a76:	f001 f975 	bl	8019d64 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8018a7a:	687b      	ldr	r3, [r7, #4]
 8018a7c:	685b      	ldr	r3, [r3, #4]
 8018a7e:	685b      	ldr	r3, [r3, #4]
 8018a80:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8018a82:	697b      	ldr	r3, [r7, #20]
 8018a84:	889b      	ldrh	r3, [r3, #4]
 8018a86:	b29b      	uxth	r3, r3
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d12a      	bne.n	8018ae2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	685b      	ldr	r3, [r3, #4]
 8018a90:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8018a92:	697b      	ldr	r3, [r7, #20]
 8018a94:	681a      	ldr	r2, [r3, #0]
 8018a96:	687b      	ldr	r3, [r7, #4]
 8018a98:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018a9a:	69bb      	ldr	r3, [r7, #24]
 8018a9c:	6858      	ldr	r0, [r3, #4]
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	3308      	adds	r3, #8
 8018aa2:	2214      	movs	r2, #20
 8018aa4:	4619      	mov	r1, r3
 8018aa6:	f001 f8ec 	bl	8019c82 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018aaa:	2101      	movs	r1, #1
 8018aac:	69b8      	ldr	r0, [r7, #24]
 8018aae:	f7ff fbab 	bl	8018208 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8018ab2:	69b8      	ldr	r0, [r7, #24]
 8018ab4:	f7f7 fd8c 	bl	80105d0 <pbuf_clen>
 8018ab8:	4603      	mov	r3, r0
 8018aba:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018abc:	8bfa      	ldrh	r2, [r7, #30]
 8018abe:	8a7b      	ldrh	r3, [r7, #18]
 8018ac0:	4413      	add	r3, r2
 8018ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018ac6:	db05      	blt.n	8018ad4 <ip_reass_free_complete_datagram+0x98>
 8018ac8:	4b27      	ldr	r3, [pc, #156]	; (8018b68 <ip_reass_free_complete_datagram+0x12c>)
 8018aca:	22bc      	movs	r2, #188	; 0xbc
 8018acc:	492a      	ldr	r1, [pc, #168]	; (8018b78 <ip_reass_free_complete_datagram+0x13c>)
 8018ace:	4828      	ldr	r0, [pc, #160]	; (8018b70 <ip_reass_free_complete_datagram+0x134>)
 8018ad0:	f001 f948 	bl	8019d64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018ad4:	8bfa      	ldrh	r2, [r7, #30]
 8018ad6:	8a7b      	ldrh	r3, [r7, #18]
 8018ad8:	4413      	add	r3, r2
 8018ada:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018adc:	69b8      	ldr	r0, [r7, #24]
 8018ade:	f7f7 fce9 	bl	80104b4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	685b      	ldr	r3, [r3, #4]
 8018ae6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018ae8:	e01f      	b.n	8018b2a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018aea:	69bb      	ldr	r3, [r7, #24]
 8018aec:	685b      	ldr	r3, [r3, #4]
 8018aee:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018af0:	69bb      	ldr	r3, [r7, #24]
 8018af2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8018af4:	697b      	ldr	r3, [r7, #20]
 8018af6:	681b      	ldr	r3, [r3, #0]
 8018af8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018afa:	68f8      	ldr	r0, [r7, #12]
 8018afc:	f7f7 fd68 	bl	80105d0 <pbuf_clen>
 8018b00:	4603      	mov	r3, r0
 8018b02:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018b04:	8bfa      	ldrh	r2, [r7, #30]
 8018b06:	8a7b      	ldrh	r3, [r7, #18]
 8018b08:	4413      	add	r3, r2
 8018b0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018b0e:	db05      	blt.n	8018b1c <ip_reass_free_complete_datagram+0xe0>
 8018b10:	4b15      	ldr	r3, [pc, #84]	; (8018b68 <ip_reass_free_complete_datagram+0x12c>)
 8018b12:	22cc      	movs	r2, #204	; 0xcc
 8018b14:	4918      	ldr	r1, [pc, #96]	; (8018b78 <ip_reass_free_complete_datagram+0x13c>)
 8018b16:	4816      	ldr	r0, [pc, #88]	; (8018b70 <ip_reass_free_complete_datagram+0x134>)
 8018b18:	f001 f924 	bl	8019d64 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018b1c:	8bfa      	ldrh	r2, [r7, #30]
 8018b1e:	8a7b      	ldrh	r3, [r7, #18]
 8018b20:	4413      	add	r3, r2
 8018b22:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8018b24:	68f8      	ldr	r0, [r7, #12]
 8018b26:	f7f7 fcc5 	bl	80104b4 <pbuf_free>
  while (p != NULL) {
 8018b2a:	69bb      	ldr	r3, [r7, #24]
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	d1dc      	bne.n	8018aea <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8018b30:	6839      	ldr	r1, [r7, #0]
 8018b32:	6878      	ldr	r0, [r7, #4]
 8018b34:	f000 f8c2 	bl	8018cbc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8018b38:	4b10      	ldr	r3, [pc, #64]	; (8018b7c <ip_reass_free_complete_datagram+0x140>)
 8018b3a:	881b      	ldrh	r3, [r3, #0]
 8018b3c:	8bfa      	ldrh	r2, [r7, #30]
 8018b3e:	429a      	cmp	r2, r3
 8018b40:	d905      	bls.n	8018b4e <ip_reass_free_complete_datagram+0x112>
 8018b42:	4b09      	ldr	r3, [pc, #36]	; (8018b68 <ip_reass_free_complete_datagram+0x12c>)
 8018b44:	22d2      	movs	r2, #210	; 0xd2
 8018b46:	490e      	ldr	r1, [pc, #56]	; (8018b80 <ip_reass_free_complete_datagram+0x144>)
 8018b48:	4809      	ldr	r0, [pc, #36]	; (8018b70 <ip_reass_free_complete_datagram+0x134>)
 8018b4a:	f001 f90b 	bl	8019d64 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8018b4e:	4b0b      	ldr	r3, [pc, #44]	; (8018b7c <ip_reass_free_complete_datagram+0x140>)
 8018b50:	881a      	ldrh	r2, [r3, #0]
 8018b52:	8bfb      	ldrh	r3, [r7, #30]
 8018b54:	1ad3      	subs	r3, r2, r3
 8018b56:	b29a      	uxth	r2, r3
 8018b58:	4b08      	ldr	r3, [pc, #32]	; (8018b7c <ip_reass_free_complete_datagram+0x140>)
 8018b5a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8018b5c:	8bfb      	ldrh	r3, [r7, #30]
}
 8018b5e:	4618      	mov	r0, r3
 8018b60:	3720      	adds	r7, #32
 8018b62:	46bd      	mov	sp, r7
 8018b64:	bd80      	pop	{r7, pc}
 8018b66:	bf00      	nop
 8018b68:	0801d61c 	.word	0x0801d61c
 8018b6c:	0801d658 	.word	0x0801d658
 8018b70:	0801d664 	.word	0x0801d664
 8018b74:	0801d68c 	.word	0x0801d68c
 8018b78:	0801d6a0 	.word	0x0801d6a0
 8018b7c:	24004280 	.word	0x24004280
 8018b80:	0801d6c0 	.word	0x0801d6c0

08018b84 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8018b84:	b580      	push	{r7, lr}
 8018b86:	b08a      	sub	sp, #40	; 0x28
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
 8018b8c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018b8e:	2300      	movs	r3, #0
 8018b90:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8018b92:	2300      	movs	r3, #0
 8018b94:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8018b96:	2300      	movs	r3, #0
 8018b98:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018b9a:	2300      	movs	r3, #0
 8018b9c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018b9e:	2300      	movs	r3, #0
 8018ba0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8018ba2:	4b28      	ldr	r3, [pc, #160]	; (8018c44 <ip_reass_remove_oldest_datagram+0xc0>)
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018ba8:	e030      	b.n	8018c0c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bac:	695a      	ldr	r2, [r3, #20]
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	68db      	ldr	r3, [r3, #12]
 8018bb2:	429a      	cmp	r2, r3
 8018bb4:	d10c      	bne.n	8018bd0 <ip_reass_remove_oldest_datagram+0x4c>
 8018bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bb8:	699a      	ldr	r2, [r3, #24]
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	691b      	ldr	r3, [r3, #16]
 8018bbe:	429a      	cmp	r2, r3
 8018bc0:	d106      	bne.n	8018bd0 <ip_reass_remove_oldest_datagram+0x4c>
 8018bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bc4:	899a      	ldrh	r2, [r3, #12]
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	889b      	ldrh	r3, [r3, #4]
 8018bca:	b29b      	uxth	r3, r3
 8018bcc:	429a      	cmp	r2, r3
 8018bce:	d014      	beq.n	8018bfa <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018bd0:	693b      	ldr	r3, [r7, #16]
 8018bd2:	3301      	adds	r3, #1
 8018bd4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8018bd6:	6a3b      	ldr	r3, [r7, #32]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d104      	bne.n	8018be6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bde:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018be0:	69fb      	ldr	r3, [r7, #28]
 8018be2:	61bb      	str	r3, [r7, #24]
 8018be4:	e009      	b.n	8018bfa <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8018be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be8:	7fda      	ldrb	r2, [r3, #31]
 8018bea:	6a3b      	ldr	r3, [r7, #32]
 8018bec:	7fdb      	ldrb	r3, [r3, #31]
 8018bee:	429a      	cmp	r2, r3
 8018bf0:	d803      	bhi.n	8018bfa <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8018bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bf4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018bf6:	69fb      	ldr	r3, [r7, #28]
 8018bf8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d001      	beq.n	8018c06 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8018c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c04:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8018c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d1cb      	bne.n	8018baa <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8018c12:	6a3b      	ldr	r3, [r7, #32]
 8018c14:	2b00      	cmp	r3, #0
 8018c16:	d008      	beq.n	8018c2a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018c18:	69b9      	ldr	r1, [r7, #24]
 8018c1a:	6a38      	ldr	r0, [r7, #32]
 8018c1c:	f7ff ff0e 	bl	8018a3c <ip_reass_free_complete_datagram>
 8018c20:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8018c22:	697a      	ldr	r2, [r7, #20]
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	4413      	add	r3, r2
 8018c28:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8018c2a:	697a      	ldr	r2, [r7, #20]
 8018c2c:	683b      	ldr	r3, [r7, #0]
 8018c2e:	429a      	cmp	r2, r3
 8018c30:	da02      	bge.n	8018c38 <ip_reass_remove_oldest_datagram+0xb4>
 8018c32:	693b      	ldr	r3, [r7, #16]
 8018c34:	2b01      	cmp	r3, #1
 8018c36:	dcac      	bgt.n	8018b92 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8018c38:	697b      	ldr	r3, [r7, #20]
}
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	3728      	adds	r7, #40	; 0x28
 8018c3e:	46bd      	mov	sp, r7
 8018c40:	bd80      	pop	{r7, pc}
 8018c42:	bf00      	nop
 8018c44:	2400427c 	.word	0x2400427c

08018c48 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8018c48:	b580      	push	{r7, lr}
 8018c4a:	b084      	sub	sp, #16
 8018c4c:	af00      	add	r7, sp, #0
 8018c4e:	6078      	str	r0, [r7, #4]
 8018c50:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018c52:	2004      	movs	r0, #4
 8018c54:	f7f6 fd14 	bl	800f680 <memp_malloc>
 8018c58:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8018c5a:	68fb      	ldr	r3, [r7, #12]
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d110      	bne.n	8018c82 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8018c60:	6839      	ldr	r1, [r7, #0]
 8018c62:	6878      	ldr	r0, [r7, #4]
 8018c64:	f7ff ff8e 	bl	8018b84 <ip_reass_remove_oldest_datagram>
 8018c68:	4602      	mov	r2, r0
 8018c6a:	683b      	ldr	r3, [r7, #0]
 8018c6c:	4293      	cmp	r3, r2
 8018c6e:	dc03      	bgt.n	8018c78 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8018c70:	2004      	movs	r0, #4
 8018c72:	f7f6 fd05 	bl	800f680 <memp_malloc>
 8018c76:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8018c78:	68fb      	ldr	r3, [r7, #12]
 8018c7a:	2b00      	cmp	r3, #0
 8018c7c:	d101      	bne.n	8018c82 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	e016      	b.n	8018cb0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8018c82:	2220      	movs	r2, #32
 8018c84:	2100      	movs	r1, #0
 8018c86:	68f8      	ldr	r0, [r7, #12]
 8018c88:	f001 f809 	bl	8019c9e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	220f      	movs	r2, #15
 8018c90:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8018c92:	4b09      	ldr	r3, [pc, #36]	; (8018cb8 <ip_reass_enqueue_new_datagram+0x70>)
 8018c94:	681a      	ldr	r2, [r3, #0]
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018c9a:	4a07      	ldr	r2, [pc, #28]	; (8018cb8 <ip_reass_enqueue_new_datagram+0x70>)
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	3308      	adds	r3, #8
 8018ca4:	2214      	movs	r2, #20
 8018ca6:	6879      	ldr	r1, [r7, #4]
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f000 ffea 	bl	8019c82 <memcpy>
  return ipr;
 8018cae:	68fb      	ldr	r3, [r7, #12]
}
 8018cb0:	4618      	mov	r0, r3
 8018cb2:	3710      	adds	r7, #16
 8018cb4:	46bd      	mov	sp, r7
 8018cb6:	bd80      	pop	{r7, pc}
 8018cb8:	2400427c 	.word	0x2400427c

08018cbc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018cbc:	b580      	push	{r7, lr}
 8018cbe:	b082      	sub	sp, #8
 8018cc0:	af00      	add	r7, sp, #0
 8018cc2:	6078      	str	r0, [r7, #4]
 8018cc4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8018cc6:	4b10      	ldr	r3, [pc, #64]	; (8018d08 <ip_reass_dequeue_datagram+0x4c>)
 8018cc8:	681b      	ldr	r3, [r3, #0]
 8018cca:	687a      	ldr	r2, [r7, #4]
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	d104      	bne.n	8018cda <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	681b      	ldr	r3, [r3, #0]
 8018cd4:	4a0c      	ldr	r2, [pc, #48]	; (8018d08 <ip_reass_dequeue_datagram+0x4c>)
 8018cd6:	6013      	str	r3, [r2, #0]
 8018cd8:	e00d      	b.n	8018cf6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018cda:	683b      	ldr	r3, [r7, #0]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d106      	bne.n	8018cee <ip_reass_dequeue_datagram+0x32>
 8018ce0:	4b0a      	ldr	r3, [pc, #40]	; (8018d0c <ip_reass_dequeue_datagram+0x50>)
 8018ce2:	f240 1245 	movw	r2, #325	; 0x145
 8018ce6:	490a      	ldr	r1, [pc, #40]	; (8018d10 <ip_reass_dequeue_datagram+0x54>)
 8018ce8:	480a      	ldr	r0, [pc, #40]	; (8018d14 <ip_reass_dequeue_datagram+0x58>)
 8018cea:	f001 f83b 	bl	8019d64 <iprintf>
    prev->next = ipr->next;
 8018cee:	687b      	ldr	r3, [r7, #4]
 8018cf0:	681a      	ldr	r2, [r3, #0]
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8018cf6:	6879      	ldr	r1, [r7, #4]
 8018cf8:	2004      	movs	r0, #4
 8018cfa:	f7f6 fd37 	bl	800f76c <memp_free>
}
 8018cfe:	bf00      	nop
 8018d00:	3708      	adds	r7, #8
 8018d02:	46bd      	mov	sp, r7
 8018d04:	bd80      	pop	{r7, pc}
 8018d06:	bf00      	nop
 8018d08:	2400427c 	.word	0x2400427c
 8018d0c:	0801d61c 	.word	0x0801d61c
 8018d10:	0801d6e4 	.word	0x0801d6e4
 8018d14:	0801d664 	.word	0x0801d664

08018d18 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018d18:	b580      	push	{r7, lr}
 8018d1a:	b08c      	sub	sp, #48	; 0x30
 8018d1c:	af00      	add	r7, sp, #0
 8018d1e:	60f8      	str	r0, [r7, #12]
 8018d20:	60b9      	str	r1, [r7, #8]
 8018d22:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8018d24:	2300      	movs	r3, #0
 8018d26:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8018d28:	2301      	movs	r3, #1
 8018d2a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8018d2c:	68bb      	ldr	r3, [r7, #8]
 8018d2e:	685b      	ldr	r3, [r3, #4]
 8018d30:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018d32:	69fb      	ldr	r3, [r7, #28]
 8018d34:	885b      	ldrh	r3, [r3, #2]
 8018d36:	b29b      	uxth	r3, r3
 8018d38:	4618      	mov	r0, r3
 8018d3a:	f7f5 ff11 	bl	800eb60 <lwip_htons>
 8018d3e:	4603      	mov	r3, r0
 8018d40:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8018d42:	69fb      	ldr	r3, [r7, #28]
 8018d44:	781b      	ldrb	r3, [r3, #0]
 8018d46:	f003 030f 	and.w	r3, r3, #15
 8018d4a:	b2db      	uxtb	r3, r3
 8018d4c:	009b      	lsls	r3, r3, #2
 8018d4e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8018d50:	7e7b      	ldrb	r3, [r7, #25]
 8018d52:	b29b      	uxth	r3, r3
 8018d54:	8b7a      	ldrh	r2, [r7, #26]
 8018d56:	429a      	cmp	r2, r3
 8018d58:	d202      	bcs.n	8018d60 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d5e:	e135      	b.n	8018fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8018d60:	7e7b      	ldrb	r3, [r7, #25]
 8018d62:	b29b      	uxth	r3, r3
 8018d64:	8b7a      	ldrh	r2, [r7, #26]
 8018d66:	1ad3      	subs	r3, r2, r3
 8018d68:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8018d6a:	69fb      	ldr	r3, [r7, #28]
 8018d6c:	88db      	ldrh	r3, [r3, #6]
 8018d6e:	b29b      	uxth	r3, r3
 8018d70:	4618      	mov	r0, r3
 8018d72:	f7f5 fef5 	bl	800eb60 <lwip_htons>
 8018d76:	4603      	mov	r3, r0
 8018d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018d7c:	b29b      	uxth	r3, r3
 8018d7e:	00db      	lsls	r3, r3, #3
 8018d80:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8018d82:	68bb      	ldr	r3, [r7, #8]
 8018d84:	685b      	ldr	r3, [r3, #4]
 8018d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d8a:	2200      	movs	r2, #0
 8018d8c:	701a      	strb	r2, [r3, #0]
 8018d8e:	2200      	movs	r2, #0
 8018d90:	705a      	strb	r2, [r3, #1]
 8018d92:	2200      	movs	r2, #0
 8018d94:	709a      	strb	r2, [r3, #2]
 8018d96:	2200      	movs	r2, #0
 8018d98:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d9c:	8afa      	ldrh	r2, [r7, #22]
 8018d9e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018da0:	8afa      	ldrh	r2, [r7, #22]
 8018da2:	8b7b      	ldrh	r3, [r7, #26]
 8018da4:	4413      	add	r3, r2
 8018da6:	b29a      	uxth	r2, r3
 8018da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018daa:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dae:	88db      	ldrh	r3, [r3, #6]
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	8afa      	ldrh	r2, [r7, #22]
 8018db4:	429a      	cmp	r2, r3
 8018db6:	d902      	bls.n	8018dbe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018db8:	f04f 33ff 	mov.w	r3, #4294967295
 8018dbc:	e106      	b.n	8018fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	685b      	ldr	r3, [r3, #4]
 8018dc2:	627b      	str	r3, [r7, #36]	; 0x24
 8018dc4:	e068      	b.n	8018e98 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018dc8:	685b      	ldr	r3, [r3, #4]
 8018dca:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dce:	889b      	ldrh	r3, [r3, #4]
 8018dd0:	b29a      	uxth	r2, r3
 8018dd2:	693b      	ldr	r3, [r7, #16]
 8018dd4:	889b      	ldrh	r3, [r3, #4]
 8018dd6:	b29b      	uxth	r3, r3
 8018dd8:	429a      	cmp	r2, r3
 8018dda:	d235      	bcs.n	8018e48 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018de0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d020      	beq.n	8018e2a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dea:	889b      	ldrh	r3, [r3, #4]
 8018dec:	b29a      	uxth	r2, r3
 8018dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018df0:	88db      	ldrh	r3, [r3, #6]
 8018df2:	b29b      	uxth	r3, r3
 8018df4:	429a      	cmp	r2, r3
 8018df6:	d307      	bcc.n	8018e08 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018dfa:	88db      	ldrh	r3, [r3, #6]
 8018dfc:	b29a      	uxth	r2, r3
 8018dfe:	693b      	ldr	r3, [r7, #16]
 8018e00:	889b      	ldrh	r3, [r3, #4]
 8018e02:	b29b      	uxth	r3, r3
 8018e04:	429a      	cmp	r2, r3
 8018e06:	d902      	bls.n	8018e0e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018e08:	f04f 33ff 	mov.w	r3, #4294967295
 8018e0c:	e0de      	b.n	8018fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e10:	68ba      	ldr	r2, [r7, #8]
 8018e12:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e16:	88db      	ldrh	r3, [r3, #6]
 8018e18:	b29a      	uxth	r2, r3
 8018e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e1c:	889b      	ldrh	r3, [r3, #4]
 8018e1e:	b29b      	uxth	r3, r3
 8018e20:	429a      	cmp	r2, r3
 8018e22:	d03d      	beq.n	8018ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018e24:	2300      	movs	r3, #0
 8018e26:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018e28:	e03a      	b.n	8018ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e2c:	88db      	ldrh	r3, [r3, #6]
 8018e2e:	b29a      	uxth	r2, r3
 8018e30:	693b      	ldr	r3, [r7, #16]
 8018e32:	889b      	ldrh	r3, [r3, #4]
 8018e34:	b29b      	uxth	r3, r3
 8018e36:	429a      	cmp	r2, r3
 8018e38:	d902      	bls.n	8018e40 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e3e:	e0c5      	b.n	8018fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018e40:	68fb      	ldr	r3, [r7, #12]
 8018e42:	68ba      	ldr	r2, [r7, #8]
 8018e44:	605a      	str	r2, [r3, #4]
      break;
 8018e46:	e02b      	b.n	8018ea0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e4a:	889b      	ldrh	r3, [r3, #4]
 8018e4c:	b29a      	uxth	r2, r3
 8018e4e:	693b      	ldr	r3, [r7, #16]
 8018e50:	889b      	ldrh	r3, [r3, #4]
 8018e52:	b29b      	uxth	r3, r3
 8018e54:	429a      	cmp	r2, r3
 8018e56:	d102      	bne.n	8018e5e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018e58:	f04f 33ff 	mov.w	r3, #4294967295
 8018e5c:	e0b6      	b.n	8018fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018e60:	889b      	ldrh	r3, [r3, #4]
 8018e62:	b29a      	uxth	r2, r3
 8018e64:	693b      	ldr	r3, [r7, #16]
 8018e66:	88db      	ldrh	r3, [r3, #6]
 8018e68:	b29b      	uxth	r3, r3
 8018e6a:	429a      	cmp	r2, r3
 8018e6c:	d202      	bcs.n	8018e74 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8018e72:	e0ab      	b.n	8018fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e76:	2b00      	cmp	r3, #0
 8018e78:	d009      	beq.n	8018e8e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e7c:	88db      	ldrh	r3, [r3, #6]
 8018e7e:	b29a      	uxth	r2, r3
 8018e80:	693b      	ldr	r3, [r7, #16]
 8018e82:	889b      	ldrh	r3, [r3, #4]
 8018e84:	b29b      	uxth	r3, r3
 8018e86:	429a      	cmp	r2, r3
 8018e88:	d001      	beq.n	8018e8e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018e8a:	2300      	movs	r3, #0
 8018e8c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018e8e:	693b      	ldr	r3, [r7, #16]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d193      	bne.n	8018dc6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018e9e:	e000      	b.n	8018ea2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018ea0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d12d      	bne.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d01c      	beq.n	8018ee8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018eb0:	88db      	ldrh	r3, [r3, #6]
 8018eb2:	b29a      	uxth	r2, r3
 8018eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eb6:	889b      	ldrh	r3, [r3, #4]
 8018eb8:	b29b      	uxth	r3, r3
 8018eba:	429a      	cmp	r2, r3
 8018ebc:	d906      	bls.n	8018ecc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018ebe:	4b45      	ldr	r3, [pc, #276]	; (8018fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ec0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018ec4:	4944      	ldr	r1, [pc, #272]	; (8018fd8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018ec6:	4845      	ldr	r0, [pc, #276]	; (8018fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018ec8:	f000 ff4c 	bl	8019d64 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ece:	68ba      	ldr	r2, [r7, #8]
 8018ed0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ed4:	88db      	ldrh	r3, [r3, #6]
 8018ed6:	b29a      	uxth	r2, r3
 8018ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eda:	889b      	ldrh	r3, [r3, #4]
 8018edc:	b29b      	uxth	r3, r3
 8018ede:	429a      	cmp	r2, r3
 8018ee0:	d010      	beq.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018ee2:	2300      	movs	r3, #0
 8018ee4:	623b      	str	r3, [r7, #32]
 8018ee6:	e00d      	b.n	8018f04 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018ee8:	68fb      	ldr	r3, [r7, #12]
 8018eea:	685b      	ldr	r3, [r3, #4]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d006      	beq.n	8018efe <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018ef0:	4b38      	ldr	r3, [pc, #224]	; (8018fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018ef2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018ef6:	493a      	ldr	r1, [pc, #232]	; (8018fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018ef8:	4838      	ldr	r0, [pc, #224]	; (8018fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018efa:	f000 ff33 	bl	8019d64 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018efe:	68fb      	ldr	r3, [r7, #12]
 8018f00:	68ba      	ldr	r2, [r7, #8]
 8018f02:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d105      	bne.n	8018f16 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	7f9b      	ldrb	r3, [r3, #30]
 8018f0e:	f003 0301 	and.w	r3, r3, #1
 8018f12:	2b00      	cmp	r3, #0
 8018f14:	d059      	beq.n	8018fca <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018f16:	6a3b      	ldr	r3, [r7, #32]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d04f      	beq.n	8018fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018f1c:	68fb      	ldr	r3, [r7, #12]
 8018f1e:	685b      	ldr	r3, [r3, #4]
 8018f20:	2b00      	cmp	r3, #0
 8018f22:	d006      	beq.n	8018f32 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	685b      	ldr	r3, [r3, #4]
 8018f28:	685b      	ldr	r3, [r3, #4]
 8018f2a:	889b      	ldrh	r3, [r3, #4]
 8018f2c:	b29b      	uxth	r3, r3
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	d002      	beq.n	8018f38 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018f32:	2300      	movs	r3, #0
 8018f34:	623b      	str	r3, [r7, #32]
 8018f36:	e041      	b.n	8018fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f3a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f3e:	681b      	ldr	r3, [r3, #0]
 8018f40:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018f42:	e012      	b.n	8018f6a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f46:	685b      	ldr	r3, [r3, #4]
 8018f48:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f4c:	88db      	ldrh	r3, [r3, #6]
 8018f4e:	b29a      	uxth	r2, r3
 8018f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f52:	889b      	ldrh	r3, [r3, #4]
 8018f54:	b29b      	uxth	r3, r3
 8018f56:	429a      	cmp	r2, r3
 8018f58:	d002      	beq.n	8018f60 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018f5a:	2300      	movs	r3, #0
 8018f5c:	623b      	str	r3, [r7, #32]
            break;
 8018f5e:	e007      	b.n	8018f70 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f62:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018f6c:	2b00      	cmp	r3, #0
 8018f6e:	d1e9      	bne.n	8018f44 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018f70:	6a3b      	ldr	r3, [r7, #32]
 8018f72:	2b00      	cmp	r3, #0
 8018f74:	d022      	beq.n	8018fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	685b      	ldr	r3, [r3, #4]
 8018f7a:	2b00      	cmp	r3, #0
 8018f7c:	d106      	bne.n	8018f8c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018f7e:	4b15      	ldr	r3, [pc, #84]	; (8018fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018f80:	f240 12df 	movw	r2, #479	; 0x1df
 8018f84:	4917      	ldr	r1, [pc, #92]	; (8018fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018f86:	4815      	ldr	r0, [pc, #84]	; (8018fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018f88:	f000 feec 	bl	8019d64 <iprintf>
          LWIP_ASSERT("sanity check",
 8018f8c:	68fb      	ldr	r3, [r7, #12]
 8018f8e:	685b      	ldr	r3, [r3, #4]
 8018f90:	685b      	ldr	r3, [r3, #4]
 8018f92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f94:	429a      	cmp	r2, r3
 8018f96:	d106      	bne.n	8018fa6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018f98:	4b0e      	ldr	r3, [pc, #56]	; (8018fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018f9a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018f9e:	4911      	ldr	r1, [pc, #68]	; (8018fe4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018fa0:	480e      	ldr	r0, [pc, #56]	; (8018fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018fa2:	f000 fedf 	bl	8019d64 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d006      	beq.n	8018fbc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018fae:	4b09      	ldr	r3, [pc, #36]	; (8018fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018fb0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018fb4:	490c      	ldr	r1, [pc, #48]	; (8018fe8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018fb6:	4809      	ldr	r0, [pc, #36]	; (8018fdc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018fb8:	f000 fed4 	bl	8019d64 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018fbc:	6a3b      	ldr	r3, [r7, #32]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	bf14      	ite	ne
 8018fc2:	2301      	movne	r3, #1
 8018fc4:	2300      	moveq	r3, #0
 8018fc6:	b2db      	uxtb	r3, r3
 8018fc8:	e000      	b.n	8018fcc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018fca:	2300      	movs	r3, #0
}
 8018fcc:	4618      	mov	r0, r3
 8018fce:	3730      	adds	r7, #48	; 0x30
 8018fd0:	46bd      	mov	sp, r7
 8018fd2:	bd80      	pop	{r7, pc}
 8018fd4:	0801d61c 	.word	0x0801d61c
 8018fd8:	0801d700 	.word	0x0801d700
 8018fdc:	0801d664 	.word	0x0801d664
 8018fe0:	0801d720 	.word	0x0801d720
 8018fe4:	0801d758 	.word	0x0801d758
 8018fe8:	0801d768 	.word	0x0801d768

08018fec <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018fec:	b580      	push	{r7, lr}
 8018fee:	b08e      	sub	sp, #56	; 0x38
 8018ff0:	af00      	add	r7, sp, #0
 8018ff2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	685b      	ldr	r3, [r3, #4]
 8018ff8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ffc:	781b      	ldrb	r3, [r3, #0]
 8018ffe:	f003 030f 	and.w	r3, r3, #15
 8019002:	b2db      	uxtb	r3, r3
 8019004:	009b      	lsls	r3, r3, #2
 8019006:	b2db      	uxtb	r3, r3
 8019008:	2b14      	cmp	r3, #20
 801900a:	f040 8167 	bne.w	80192dc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801900e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019010:	88db      	ldrh	r3, [r3, #6]
 8019012:	b29b      	uxth	r3, r3
 8019014:	4618      	mov	r0, r3
 8019016:	f7f5 fda3 	bl	800eb60 <lwip_htons>
 801901a:	4603      	mov	r3, r0
 801901c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019020:	b29b      	uxth	r3, r3
 8019022:	00db      	lsls	r3, r3, #3
 8019024:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019028:	885b      	ldrh	r3, [r3, #2]
 801902a:	b29b      	uxth	r3, r3
 801902c:	4618      	mov	r0, r3
 801902e:	f7f5 fd97 	bl	800eb60 <lwip_htons>
 8019032:	4603      	mov	r3, r0
 8019034:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019038:	781b      	ldrb	r3, [r3, #0]
 801903a:	f003 030f 	and.w	r3, r3, #15
 801903e:	b2db      	uxtb	r3, r3
 8019040:	009b      	lsls	r3, r3, #2
 8019042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801904a:	b29b      	uxth	r3, r3
 801904c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801904e:	429a      	cmp	r2, r3
 8019050:	f0c0 8146 	bcc.w	80192e0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019054:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019058:	b29b      	uxth	r3, r3
 801905a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801905c:	1ad3      	subs	r3, r2, r3
 801905e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019060:	6878      	ldr	r0, [r7, #4]
 8019062:	f7f7 fab5 	bl	80105d0 <pbuf_clen>
 8019066:	4603      	mov	r3, r0
 8019068:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801906a:	4b9f      	ldr	r3, [pc, #636]	; (80192e8 <ip4_reass+0x2fc>)
 801906c:	881b      	ldrh	r3, [r3, #0]
 801906e:	461a      	mov	r2, r3
 8019070:	8c3b      	ldrh	r3, [r7, #32]
 8019072:	4413      	add	r3, r2
 8019074:	2b0a      	cmp	r3, #10
 8019076:	dd10      	ble.n	801909a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019078:	8c3b      	ldrh	r3, [r7, #32]
 801907a:	4619      	mov	r1, r3
 801907c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801907e:	f7ff fd81 	bl	8018b84 <ip_reass_remove_oldest_datagram>
 8019082:	4603      	mov	r3, r0
 8019084:	2b00      	cmp	r3, #0
 8019086:	f000 812d 	beq.w	80192e4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801908a:	4b97      	ldr	r3, [pc, #604]	; (80192e8 <ip4_reass+0x2fc>)
 801908c:	881b      	ldrh	r3, [r3, #0]
 801908e:	461a      	mov	r2, r3
 8019090:	8c3b      	ldrh	r3, [r7, #32]
 8019092:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019094:	2b0a      	cmp	r3, #10
 8019096:	f300 8125 	bgt.w	80192e4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801909a:	4b94      	ldr	r3, [pc, #592]	; (80192ec <ip4_reass+0x300>)
 801909c:	681b      	ldr	r3, [r3, #0]
 801909e:	633b      	str	r3, [r7, #48]	; 0x30
 80190a0:	e015      	b.n	80190ce <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80190a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190a4:	695a      	ldr	r2, [r3, #20]
 80190a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190a8:	68db      	ldr	r3, [r3, #12]
 80190aa:	429a      	cmp	r2, r3
 80190ac:	d10c      	bne.n	80190c8 <ip4_reass+0xdc>
 80190ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190b0:	699a      	ldr	r2, [r3, #24]
 80190b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b4:	691b      	ldr	r3, [r3, #16]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d106      	bne.n	80190c8 <ip4_reass+0xdc>
 80190ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190bc:	899a      	ldrh	r2, [r3, #12]
 80190be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c0:	889b      	ldrh	r3, [r3, #4]
 80190c2:	b29b      	uxth	r3, r3
 80190c4:	429a      	cmp	r2, r3
 80190c6:	d006      	beq.n	80190d6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80190c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	633b      	str	r3, [r7, #48]	; 0x30
 80190ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d1e6      	bne.n	80190a2 <ip4_reass+0xb6>
 80190d4:	e000      	b.n	80190d8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80190d6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80190d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190da:	2b00      	cmp	r3, #0
 80190dc:	d109      	bne.n	80190f2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80190de:	8c3b      	ldrh	r3, [r7, #32]
 80190e0:	4619      	mov	r1, r3
 80190e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190e4:	f7ff fdb0 	bl	8018c48 <ip_reass_enqueue_new_datagram>
 80190e8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80190ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190ec:	2b00      	cmp	r3, #0
 80190ee:	d11c      	bne.n	801912a <ip4_reass+0x13e>
      goto nullreturn;
 80190f0:	e109      	b.n	8019306 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80190f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190f4:	88db      	ldrh	r3, [r3, #6]
 80190f6:	b29b      	uxth	r3, r3
 80190f8:	4618      	mov	r0, r3
 80190fa:	f7f5 fd31 	bl	800eb60 <lwip_htons>
 80190fe:	4603      	mov	r3, r0
 8019100:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019104:	2b00      	cmp	r3, #0
 8019106:	d110      	bne.n	801912a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8019108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801910a:	89db      	ldrh	r3, [r3, #14]
 801910c:	4618      	mov	r0, r3
 801910e:	f7f5 fd27 	bl	800eb60 <lwip_htons>
 8019112:	4603      	mov	r3, r0
 8019114:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019118:	2b00      	cmp	r3, #0
 801911a:	d006      	beq.n	801912a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801911e:	3308      	adds	r3, #8
 8019120:	2214      	movs	r2, #20
 8019122:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019124:	4618      	mov	r0, r3
 8019126:	f000 fdac 	bl	8019c82 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801912a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801912c:	88db      	ldrh	r3, [r3, #6]
 801912e:	b29b      	uxth	r3, r3
 8019130:	f003 0320 	and.w	r3, r3, #32
 8019134:	2b00      	cmp	r3, #0
 8019136:	bf0c      	ite	eq
 8019138:	2301      	moveq	r3, #1
 801913a:	2300      	movne	r3, #0
 801913c:	b2db      	uxtb	r3, r3
 801913e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019140:	69fb      	ldr	r3, [r7, #28]
 8019142:	2b00      	cmp	r3, #0
 8019144:	d00e      	beq.n	8019164 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019146:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019148:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801914a:	4413      	add	r3, r2
 801914c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801914e:	8b7a      	ldrh	r2, [r7, #26]
 8019150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019152:	429a      	cmp	r2, r3
 8019154:	f0c0 80a0 	bcc.w	8019298 <ip4_reass+0x2ac>
 8019158:	8b7b      	ldrh	r3, [r7, #26]
 801915a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801915e:	4293      	cmp	r3, r2
 8019160:	f200 809a 	bhi.w	8019298 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019164:	69fa      	ldr	r2, [r7, #28]
 8019166:	6879      	ldr	r1, [r7, #4]
 8019168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801916a:	f7ff fdd5 	bl	8018d18 <ip_reass_chain_frag_into_datagram_and_validate>
 801916e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019176:	f000 8091 	beq.w	801929c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801917a:	4b5b      	ldr	r3, [pc, #364]	; (80192e8 <ip4_reass+0x2fc>)
 801917c:	881a      	ldrh	r2, [r3, #0]
 801917e:	8c3b      	ldrh	r3, [r7, #32]
 8019180:	4413      	add	r3, r2
 8019182:	b29a      	uxth	r2, r3
 8019184:	4b58      	ldr	r3, [pc, #352]	; (80192e8 <ip4_reass+0x2fc>)
 8019186:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019188:	69fb      	ldr	r3, [r7, #28]
 801918a:	2b00      	cmp	r3, #0
 801918c:	d00d      	beq.n	80191aa <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801918e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019192:	4413      	add	r3, r2
 8019194:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019198:	8a7a      	ldrh	r2, [r7, #18]
 801919a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801919e:	7f9b      	ldrb	r3, [r3, #30]
 80191a0:	f043 0301 	orr.w	r3, r3, #1
 80191a4:	b2da      	uxtb	r2, r3
 80191a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191a8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80191aa:	697b      	ldr	r3, [r7, #20]
 80191ac:	2b01      	cmp	r3, #1
 80191ae:	d171      	bne.n	8019294 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80191b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191b2:	8b9b      	ldrh	r3, [r3, #28]
 80191b4:	3314      	adds	r3, #20
 80191b6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80191b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191ba:	685b      	ldr	r3, [r3, #4]
 80191bc:	685b      	ldr	r3, [r3, #4]
 80191be:	681b      	ldr	r3, [r3, #0]
 80191c0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80191c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191c4:	685b      	ldr	r3, [r3, #4]
 80191c6:	685b      	ldr	r3, [r3, #4]
 80191c8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80191ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191cc:	3308      	adds	r3, #8
 80191ce:	2214      	movs	r2, #20
 80191d0:	4619      	mov	r1, r3
 80191d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80191d4:	f000 fd55 	bl	8019c82 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80191d8:	8a3b      	ldrh	r3, [r7, #16]
 80191da:	4618      	mov	r0, r3
 80191dc:	f7f5 fcc0 	bl	800eb60 <lwip_htons>
 80191e0:	4603      	mov	r3, r0
 80191e2:	461a      	mov	r2, r3
 80191e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191e6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80191e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191ea:	2200      	movs	r2, #0
 80191ec:	719a      	strb	r2, [r3, #6]
 80191ee:	2200      	movs	r2, #0
 80191f0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80191f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191f4:	2200      	movs	r2, #0
 80191f6:	729a      	strb	r2, [r3, #10]
 80191f8:	2200      	movs	r2, #0
 80191fa:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80191fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80191fe:	685b      	ldr	r3, [r3, #4]
 8019200:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8019202:	e00d      	b.n	8019220 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8019204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019206:	685b      	ldr	r3, [r3, #4]
 8019208:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801920a:	2114      	movs	r1, #20
 801920c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801920e:	f7f7 f8cb 	bl	80103a8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019212:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019214:	6878      	ldr	r0, [r7, #4]
 8019216:	f7f7 fa1b 	bl	8010650 <pbuf_cat>
      r = iprh->next_pbuf;
 801921a:	68fb      	ldr	r3, [r7, #12]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019222:	2b00      	cmp	r3, #0
 8019224:	d1ee      	bne.n	8019204 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019226:	4b31      	ldr	r3, [pc, #196]	; (80192ec <ip4_reass+0x300>)
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801922c:	429a      	cmp	r2, r3
 801922e:	d102      	bne.n	8019236 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019230:	2300      	movs	r3, #0
 8019232:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019234:	e010      	b.n	8019258 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019236:	4b2d      	ldr	r3, [pc, #180]	; (80192ec <ip4_reass+0x300>)
 8019238:	681b      	ldr	r3, [r3, #0]
 801923a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801923c:	e007      	b.n	801924e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801923e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019240:	681b      	ldr	r3, [r3, #0]
 8019242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019244:	429a      	cmp	r2, r3
 8019246:	d006      	beq.n	8019256 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801924a:	681b      	ldr	r3, [r3, #0]
 801924c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801924e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019250:	2b00      	cmp	r3, #0
 8019252:	d1f4      	bne.n	801923e <ip4_reass+0x252>
 8019254:	e000      	b.n	8019258 <ip4_reass+0x26c>
          break;
 8019256:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019258:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801925a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801925c:	f7ff fd2e 	bl	8018cbc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019260:	6878      	ldr	r0, [r7, #4]
 8019262:	f7f7 f9b5 	bl	80105d0 <pbuf_clen>
 8019266:	4603      	mov	r3, r0
 8019268:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801926a:	4b1f      	ldr	r3, [pc, #124]	; (80192e8 <ip4_reass+0x2fc>)
 801926c:	881b      	ldrh	r3, [r3, #0]
 801926e:	8c3a      	ldrh	r2, [r7, #32]
 8019270:	429a      	cmp	r2, r3
 8019272:	d906      	bls.n	8019282 <ip4_reass+0x296>
 8019274:	4b1e      	ldr	r3, [pc, #120]	; (80192f0 <ip4_reass+0x304>)
 8019276:	f240 229b 	movw	r2, #667	; 0x29b
 801927a:	491e      	ldr	r1, [pc, #120]	; (80192f4 <ip4_reass+0x308>)
 801927c:	481e      	ldr	r0, [pc, #120]	; (80192f8 <ip4_reass+0x30c>)
 801927e:	f000 fd71 	bl	8019d64 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019282:	4b19      	ldr	r3, [pc, #100]	; (80192e8 <ip4_reass+0x2fc>)
 8019284:	881a      	ldrh	r2, [r3, #0]
 8019286:	8c3b      	ldrh	r3, [r7, #32]
 8019288:	1ad3      	subs	r3, r2, r3
 801928a:	b29a      	uxth	r2, r3
 801928c:	4b16      	ldr	r3, [pc, #88]	; (80192e8 <ip4_reass+0x2fc>)
 801928e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	e03c      	b.n	801930e <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019294:	2300      	movs	r3, #0
 8019296:	e03a      	b.n	801930e <ip4_reass+0x322>
      goto nullreturn_ipr;
 8019298:	bf00      	nop
 801929a:	e000      	b.n	801929e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801929c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801929e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d106      	bne.n	80192b2 <ip4_reass+0x2c6>
 80192a4:	4b12      	ldr	r3, [pc, #72]	; (80192f0 <ip4_reass+0x304>)
 80192a6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80192aa:	4914      	ldr	r1, [pc, #80]	; (80192fc <ip4_reass+0x310>)
 80192ac:	4812      	ldr	r0, [pc, #72]	; (80192f8 <ip4_reass+0x30c>)
 80192ae:	f000 fd59 	bl	8019d64 <iprintf>
  if (ipr->p == NULL) {
 80192b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80192b4:	685b      	ldr	r3, [r3, #4]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d124      	bne.n	8019304 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80192ba:	4b0c      	ldr	r3, [pc, #48]	; (80192ec <ip4_reass+0x300>)
 80192bc:	681b      	ldr	r3, [r3, #0]
 80192be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80192c0:	429a      	cmp	r2, r3
 80192c2:	d006      	beq.n	80192d2 <ip4_reass+0x2e6>
 80192c4:	4b0a      	ldr	r3, [pc, #40]	; (80192f0 <ip4_reass+0x304>)
 80192c6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80192ca:	490d      	ldr	r1, [pc, #52]	; (8019300 <ip4_reass+0x314>)
 80192cc:	480a      	ldr	r0, [pc, #40]	; (80192f8 <ip4_reass+0x30c>)
 80192ce:	f000 fd49 	bl	8019d64 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80192d2:	2100      	movs	r1, #0
 80192d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80192d6:	f7ff fcf1 	bl	8018cbc <ip_reass_dequeue_datagram>
 80192da:	e014      	b.n	8019306 <ip4_reass+0x31a>
    goto nullreturn;
 80192dc:	bf00      	nop
 80192de:	e012      	b.n	8019306 <ip4_reass+0x31a>
    goto nullreturn;
 80192e0:	bf00      	nop
 80192e2:	e010      	b.n	8019306 <ip4_reass+0x31a>
      goto nullreturn;
 80192e4:	bf00      	nop
 80192e6:	e00e      	b.n	8019306 <ip4_reass+0x31a>
 80192e8:	24004280 	.word	0x24004280
 80192ec:	2400427c 	.word	0x2400427c
 80192f0:	0801d61c 	.word	0x0801d61c
 80192f4:	0801d78c 	.word	0x0801d78c
 80192f8:	0801d664 	.word	0x0801d664
 80192fc:	0801d7a8 	.word	0x0801d7a8
 8019300:	0801d7b4 	.word	0x0801d7b4
  }

nullreturn:
 8019304:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019306:	6878      	ldr	r0, [r7, #4]
 8019308:	f7f7 f8d4 	bl	80104b4 <pbuf_free>
  return NULL;
 801930c:	2300      	movs	r3, #0
}
 801930e:	4618      	mov	r0, r3
 8019310:	3738      	adds	r7, #56	; 0x38
 8019312:	46bd      	mov	sp, r7
 8019314:	bd80      	pop	{r7, pc}
 8019316:	bf00      	nop

08019318 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801931c:	2005      	movs	r0, #5
 801931e:	f7f6 f9af 	bl	800f680 <memp_malloc>
 8019322:	4603      	mov	r3, r0
}
 8019324:	4618      	mov	r0, r3
 8019326:	bd80      	pop	{r7, pc}

08019328 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019328:	b580      	push	{r7, lr}
 801932a:	b082      	sub	sp, #8
 801932c:	af00      	add	r7, sp, #0
 801932e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019330:	687b      	ldr	r3, [r7, #4]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d106      	bne.n	8019344 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019336:	4b07      	ldr	r3, [pc, #28]	; (8019354 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019338:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801933c:	4906      	ldr	r1, [pc, #24]	; (8019358 <ip_frag_free_pbuf_custom_ref+0x30>)
 801933e:	4807      	ldr	r0, [pc, #28]	; (801935c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019340:	f000 fd10 	bl	8019d64 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019344:	6879      	ldr	r1, [r7, #4]
 8019346:	2005      	movs	r0, #5
 8019348:	f7f6 fa10 	bl	800f76c <memp_free>
}
 801934c:	bf00      	nop
 801934e:	3708      	adds	r7, #8
 8019350:	46bd      	mov	sp, r7
 8019352:	bd80      	pop	{r7, pc}
 8019354:	0801d61c 	.word	0x0801d61c
 8019358:	0801d7d4 	.word	0x0801d7d4
 801935c:	0801d664 	.word	0x0801d664

08019360 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019360:	b580      	push	{r7, lr}
 8019362:	b084      	sub	sp, #16
 8019364:	af00      	add	r7, sp, #0
 8019366:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	2b00      	cmp	r3, #0
 8019370:	d106      	bne.n	8019380 <ipfrag_free_pbuf_custom+0x20>
 8019372:	4b11      	ldr	r3, [pc, #68]	; (80193b8 <ipfrag_free_pbuf_custom+0x58>)
 8019374:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019378:	4910      	ldr	r1, [pc, #64]	; (80193bc <ipfrag_free_pbuf_custom+0x5c>)
 801937a:	4811      	ldr	r0, [pc, #68]	; (80193c0 <ipfrag_free_pbuf_custom+0x60>)
 801937c:	f000 fcf2 	bl	8019d64 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019380:	68fa      	ldr	r2, [r7, #12]
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	429a      	cmp	r2, r3
 8019386:	d006      	beq.n	8019396 <ipfrag_free_pbuf_custom+0x36>
 8019388:	4b0b      	ldr	r3, [pc, #44]	; (80193b8 <ipfrag_free_pbuf_custom+0x58>)
 801938a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801938e:	490d      	ldr	r1, [pc, #52]	; (80193c4 <ipfrag_free_pbuf_custom+0x64>)
 8019390:	480b      	ldr	r0, [pc, #44]	; (80193c0 <ipfrag_free_pbuf_custom+0x60>)
 8019392:	f000 fce7 	bl	8019d64 <iprintf>
  if (pcr->original != NULL) {
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	695b      	ldr	r3, [r3, #20]
 801939a:	2b00      	cmp	r3, #0
 801939c:	d004      	beq.n	80193a8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801939e:	68fb      	ldr	r3, [r7, #12]
 80193a0:	695b      	ldr	r3, [r3, #20]
 80193a2:	4618      	mov	r0, r3
 80193a4:	f7f7 f886 	bl	80104b4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80193a8:	68f8      	ldr	r0, [r7, #12]
 80193aa:	f7ff ffbd 	bl	8019328 <ip_frag_free_pbuf_custom_ref>
}
 80193ae:	bf00      	nop
 80193b0:	3710      	adds	r7, #16
 80193b2:	46bd      	mov	sp, r7
 80193b4:	bd80      	pop	{r7, pc}
 80193b6:	bf00      	nop
 80193b8:	0801d61c 	.word	0x0801d61c
 80193bc:	0801d7e0 	.word	0x0801d7e0
 80193c0:	0801d664 	.word	0x0801d664
 80193c4:	0801d7ec 	.word	0x0801d7ec

080193c8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80193c8:	b580      	push	{r7, lr}
 80193ca:	b094      	sub	sp, #80	; 0x50
 80193cc:	af02      	add	r7, sp, #8
 80193ce:	60f8      	str	r0, [r7, #12]
 80193d0:	60b9      	str	r1, [r7, #8]
 80193d2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80193d4:	2300      	movs	r3, #0
 80193d6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80193da:	68bb      	ldr	r3, [r7, #8]
 80193dc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80193de:	3b14      	subs	r3, #20
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	da00      	bge.n	80193e6 <ip4_frag+0x1e>
 80193e4:	3307      	adds	r3, #7
 80193e6:	10db      	asrs	r3, r3, #3
 80193e8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80193ea:	2314      	movs	r3, #20
 80193ec:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80193ee:	68fb      	ldr	r3, [r7, #12]
 80193f0:	685b      	ldr	r3, [r3, #4]
 80193f2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80193f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80193f6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80193f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193fa:	781b      	ldrb	r3, [r3, #0]
 80193fc:	f003 030f 	and.w	r3, r3, #15
 8019400:	b2db      	uxtb	r3, r3
 8019402:	009b      	lsls	r3, r3, #2
 8019404:	b2db      	uxtb	r3, r3
 8019406:	2b14      	cmp	r3, #20
 8019408:	d002      	beq.n	8019410 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801940a:	f06f 0305 	mvn.w	r3, #5
 801940e:	e110      	b.n	8019632 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019410:	68fb      	ldr	r3, [r7, #12]
 8019412:	895b      	ldrh	r3, [r3, #10]
 8019414:	2b13      	cmp	r3, #19
 8019416:	d809      	bhi.n	801942c <ip4_frag+0x64>
 8019418:	4b88      	ldr	r3, [pc, #544]	; (801963c <ip4_frag+0x274>)
 801941a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801941e:	4988      	ldr	r1, [pc, #544]	; (8019640 <ip4_frag+0x278>)
 8019420:	4888      	ldr	r0, [pc, #544]	; (8019644 <ip4_frag+0x27c>)
 8019422:	f000 fc9f 	bl	8019d64 <iprintf>
 8019426:	f06f 0305 	mvn.w	r3, #5
 801942a:	e102      	b.n	8019632 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801942c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801942e:	88db      	ldrh	r3, [r3, #6]
 8019430:	b29b      	uxth	r3, r3
 8019432:	4618      	mov	r0, r3
 8019434:	f7f5 fb94 	bl	800eb60 <lwip_htons>
 8019438:	4603      	mov	r3, r0
 801943a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801943c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801943e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019442:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019446:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019448:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801944c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	891b      	ldrh	r3, [r3, #8]
 8019452:	3b14      	subs	r3, #20
 8019454:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019458:	e0e1      	b.n	801961e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801945a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801945c:	00db      	lsls	r3, r3, #3
 801945e:	b29b      	uxth	r3, r3
 8019460:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019464:	4293      	cmp	r3, r2
 8019466:	bf28      	it	cs
 8019468:	4613      	movcs	r3, r2
 801946a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801946c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019470:	2114      	movs	r1, #20
 8019472:	200e      	movs	r0, #14
 8019474:	f7f6 fd3a 	bl	800feec <pbuf_alloc>
 8019478:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801947a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801947c:	2b00      	cmp	r3, #0
 801947e:	f000 80d5 	beq.w	801962c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019484:	895b      	ldrh	r3, [r3, #10]
 8019486:	2b13      	cmp	r3, #19
 8019488:	d806      	bhi.n	8019498 <ip4_frag+0xd0>
 801948a:	4b6c      	ldr	r3, [pc, #432]	; (801963c <ip4_frag+0x274>)
 801948c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019490:	496d      	ldr	r1, [pc, #436]	; (8019648 <ip4_frag+0x280>)
 8019492:	486c      	ldr	r0, [pc, #432]	; (8019644 <ip4_frag+0x27c>)
 8019494:	f000 fc66 	bl	8019d64 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801949a:	685b      	ldr	r3, [r3, #4]
 801949c:	2214      	movs	r2, #20
 801949e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80194a0:	4618      	mov	r0, r3
 80194a2:	f000 fbee 	bl	8019c82 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80194a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194a8:	685b      	ldr	r3, [r3, #4]
 80194aa:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80194ac:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80194ae:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80194b2:	e064      	b.n	801957e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	895a      	ldrh	r2, [r3, #10]
 80194b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80194ba:	1ad3      	subs	r3, r2, r3
 80194bc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80194be:	68fb      	ldr	r3, [r7, #12]
 80194c0:	895b      	ldrh	r3, [r3, #10]
 80194c2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d906      	bls.n	80194d6 <ip4_frag+0x10e>
 80194c8:	4b5c      	ldr	r3, [pc, #368]	; (801963c <ip4_frag+0x274>)
 80194ca:	f240 322d 	movw	r2, #813	; 0x32d
 80194ce:	495f      	ldr	r1, [pc, #380]	; (801964c <ip4_frag+0x284>)
 80194d0:	485c      	ldr	r0, [pc, #368]	; (8019644 <ip4_frag+0x27c>)
 80194d2:	f000 fc47 	bl	8019d64 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80194d6:	8bfa      	ldrh	r2, [r7, #30]
 80194d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80194dc:	4293      	cmp	r3, r2
 80194de:	bf28      	it	cs
 80194e0:	4613      	movcs	r3, r2
 80194e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80194e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80194ea:	2b00      	cmp	r3, #0
 80194ec:	d105      	bne.n	80194fa <ip4_frag+0x132>
        poff = 0;
 80194ee:	2300      	movs	r3, #0
 80194f0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80194f2:	68fb      	ldr	r3, [r7, #12]
 80194f4:	681b      	ldr	r3, [r3, #0]
 80194f6:	60fb      	str	r3, [r7, #12]
        continue;
 80194f8:	e041      	b.n	801957e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80194fa:	f7ff ff0d 	bl	8019318 <ip_frag_alloc_pbuf_custom_ref>
 80194fe:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019500:	69bb      	ldr	r3, [r7, #24]
 8019502:	2b00      	cmp	r3, #0
 8019504:	d103      	bne.n	801950e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019506:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019508:	f7f6 ffd4 	bl	80104b4 <pbuf_free>
        goto memerr;
 801950c:	e08f      	b.n	801962e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801950e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019510:	68fb      	ldr	r3, [r7, #12]
 8019512:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019514:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019516:	4413      	add	r3, r2
 8019518:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801951c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019520:	9201      	str	r2, [sp, #4]
 8019522:	9300      	str	r3, [sp, #0]
 8019524:	4603      	mov	r3, r0
 8019526:	2241      	movs	r2, #65	; 0x41
 8019528:	2000      	movs	r0, #0
 801952a:	f7f6 fe09 	bl	8010140 <pbuf_alloced_custom>
 801952e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019530:	697b      	ldr	r3, [r7, #20]
 8019532:	2b00      	cmp	r3, #0
 8019534:	d106      	bne.n	8019544 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019536:	69b8      	ldr	r0, [r7, #24]
 8019538:	f7ff fef6 	bl	8019328 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801953c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801953e:	f7f6 ffb9 	bl	80104b4 <pbuf_free>
        goto memerr;
 8019542:	e074      	b.n	801962e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019544:	68f8      	ldr	r0, [r7, #12]
 8019546:	f7f7 f85b 	bl	8010600 <pbuf_ref>
      pcr->original = p;
 801954a:	69bb      	ldr	r3, [r7, #24]
 801954c:	68fa      	ldr	r2, [r7, #12]
 801954e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019550:	69bb      	ldr	r3, [r7, #24]
 8019552:	4a3f      	ldr	r2, [pc, #252]	; (8019650 <ip4_frag+0x288>)
 8019554:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019556:	6979      	ldr	r1, [r7, #20]
 8019558:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801955a:	f7f7 f879 	bl	8010650 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801955e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019562:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019566:	1ad3      	subs	r3, r2, r3
 8019568:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801956c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019570:	2b00      	cmp	r3, #0
 8019572:	d004      	beq.n	801957e <ip4_frag+0x1b6>
        poff = 0;
 8019574:	2300      	movs	r3, #0
 8019576:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019578:	68fb      	ldr	r3, [r7, #12]
 801957a:	681b      	ldr	r3, [r3, #0]
 801957c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801957e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019582:	2b00      	cmp	r3, #0
 8019584:	d196      	bne.n	80194b4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019586:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019588:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801958c:	4413      	add	r3, r2
 801958e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019590:	68bb      	ldr	r3, [r7, #8]
 8019592:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019594:	f1a3 0213 	sub.w	r2, r3, #19
 8019598:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801959c:	429a      	cmp	r2, r3
 801959e:	bfcc      	ite	gt
 80195a0:	2301      	movgt	r3, #1
 80195a2:	2300      	movle	r3, #0
 80195a4:	b2db      	uxtb	r3, r3
 80195a6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80195a8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80195ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80195b0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80195b2:	6a3b      	ldr	r3, [r7, #32]
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d002      	beq.n	80195be <ip4_frag+0x1f6>
 80195b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	d003      	beq.n	80195c6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80195be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80195c4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80195c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80195c8:	4618      	mov	r0, r3
 80195ca:	f7f5 fac9 	bl	800eb60 <lwip_htons>
 80195ce:	4603      	mov	r3, r0
 80195d0:	461a      	mov	r2, r3
 80195d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195d4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80195d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80195d8:	3314      	adds	r3, #20
 80195da:	b29b      	uxth	r3, r3
 80195dc:	4618      	mov	r0, r3
 80195de:	f7f5 fabf 	bl	800eb60 <lwip_htons>
 80195e2:	4603      	mov	r3, r0
 80195e4:	461a      	mov	r2, r3
 80195e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195e8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80195ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80195ec:	2200      	movs	r2, #0
 80195ee:	729a      	strb	r2, [r3, #10]
 80195f0:	2200      	movs	r2, #0
 80195f2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80195f4:	68bb      	ldr	r3, [r7, #8]
 80195f6:	695b      	ldr	r3, [r3, #20]
 80195f8:	687a      	ldr	r2, [r7, #4]
 80195fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80195fc:	68b8      	ldr	r0, [r7, #8]
 80195fe:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019602:	f7f6 ff57 	bl	80104b4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019606:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801960a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801960c:	1ad3      	subs	r3, r2, r3
 801960e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019612:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019616:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019618:	4413      	add	r3, r2
 801961a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801961e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019622:	2b00      	cmp	r3, #0
 8019624:	f47f af19 	bne.w	801945a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019628:	2300      	movs	r3, #0
 801962a:	e002      	b.n	8019632 <ip4_frag+0x26a>
      goto memerr;
 801962c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801962e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019632:	4618      	mov	r0, r3
 8019634:	3748      	adds	r7, #72	; 0x48
 8019636:	46bd      	mov	sp, r7
 8019638:	bd80      	pop	{r7, pc}
 801963a:	bf00      	nop
 801963c:	0801d61c 	.word	0x0801d61c
 8019640:	0801d7f8 	.word	0x0801d7f8
 8019644:	0801d664 	.word	0x0801d664
 8019648:	0801d814 	.word	0x0801d814
 801964c:	0801d834 	.word	0x0801d834
 8019650:	08019361 	.word	0x08019361

08019654 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019654:	b580      	push	{r7, lr}
 8019656:	b086      	sub	sp, #24
 8019658:	af00      	add	r7, sp, #0
 801965a:	6078      	str	r0, [r7, #4]
 801965c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801965e:	230e      	movs	r3, #14
 8019660:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019662:	687b      	ldr	r3, [r7, #4]
 8019664:	895b      	ldrh	r3, [r3, #10]
 8019666:	2b0e      	cmp	r3, #14
 8019668:	d96e      	bls.n	8019748 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	7bdb      	ldrb	r3, [r3, #15]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d106      	bne.n	8019680 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019672:	683b      	ldr	r3, [r7, #0]
 8019674:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019678:	3301      	adds	r3, #1
 801967a:	b2da      	uxtb	r2, r3
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	685b      	ldr	r3, [r3, #4]
 8019684:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	7b1a      	ldrb	r2, [r3, #12]
 801968a:	7b5b      	ldrb	r3, [r3, #13]
 801968c:	021b      	lsls	r3, r3, #8
 801968e:	4313      	orrs	r3, r2
 8019690:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019692:	693b      	ldr	r3, [r7, #16]
 8019694:	781b      	ldrb	r3, [r3, #0]
 8019696:	f003 0301 	and.w	r3, r3, #1
 801969a:	2b00      	cmp	r3, #0
 801969c:	d023      	beq.n	80196e6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801969e:	693b      	ldr	r3, [r7, #16]
 80196a0:	781b      	ldrb	r3, [r3, #0]
 80196a2:	2b01      	cmp	r3, #1
 80196a4:	d10f      	bne.n	80196c6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80196a6:	693b      	ldr	r3, [r7, #16]
 80196a8:	785b      	ldrb	r3, [r3, #1]
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	d11b      	bne.n	80196e6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80196ae:	693b      	ldr	r3, [r7, #16]
 80196b0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80196b2:	2b5e      	cmp	r3, #94	; 0x5e
 80196b4:	d117      	bne.n	80196e6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80196b6:	687b      	ldr	r3, [r7, #4]
 80196b8:	7b5b      	ldrb	r3, [r3, #13]
 80196ba:	f043 0310 	orr.w	r3, r3, #16
 80196be:	b2da      	uxtb	r2, r3
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	735a      	strb	r2, [r3, #13]
 80196c4:	e00f      	b.n	80196e6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80196c6:	693b      	ldr	r3, [r7, #16]
 80196c8:	2206      	movs	r2, #6
 80196ca:	4928      	ldr	r1, [pc, #160]	; (801976c <ethernet_input+0x118>)
 80196cc:	4618      	mov	r0, r3
 80196ce:	f000 faca 	bl	8019c66 <memcmp>
 80196d2:	4603      	mov	r3, r0
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d106      	bne.n	80196e6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	7b5b      	ldrb	r3, [r3, #13]
 80196dc:	f043 0308 	orr.w	r3, r3, #8
 80196e0:	b2da      	uxtb	r2, r3
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80196e6:	89fb      	ldrh	r3, [r7, #14]
 80196e8:	2b08      	cmp	r3, #8
 80196ea:	d003      	beq.n	80196f4 <ethernet_input+0xa0>
 80196ec:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80196f0:	d014      	beq.n	801971c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80196f2:	e032      	b.n	801975a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80196f4:	683b      	ldr	r3, [r7, #0]
 80196f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80196fa:	f003 0308 	and.w	r3, r3, #8
 80196fe:	2b00      	cmp	r3, #0
 8019700:	d024      	beq.n	801974c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019702:	8afb      	ldrh	r3, [r7, #22]
 8019704:	4619      	mov	r1, r3
 8019706:	6878      	ldr	r0, [r7, #4]
 8019708:	f7f6 fe4e 	bl	80103a8 <pbuf_remove_header>
 801970c:	4603      	mov	r3, r0
 801970e:	2b00      	cmp	r3, #0
 8019710:	d11e      	bne.n	8019750 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019712:	6839      	ldr	r1, [r7, #0]
 8019714:	6878      	ldr	r0, [r7, #4]
 8019716:	f7fe fe95 	bl	8018444 <ip4_input>
      break;
 801971a:	e013      	b.n	8019744 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801971c:	683b      	ldr	r3, [r7, #0]
 801971e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019722:	f003 0308 	and.w	r3, r3, #8
 8019726:	2b00      	cmp	r3, #0
 8019728:	d014      	beq.n	8019754 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801972a:	8afb      	ldrh	r3, [r7, #22]
 801972c:	4619      	mov	r1, r3
 801972e:	6878      	ldr	r0, [r7, #4]
 8019730:	f7f6 fe3a 	bl	80103a8 <pbuf_remove_header>
 8019734:	4603      	mov	r3, r0
 8019736:	2b00      	cmp	r3, #0
 8019738:	d10e      	bne.n	8019758 <ethernet_input+0x104>
        etharp_input(p, netif);
 801973a:	6839      	ldr	r1, [r7, #0]
 801973c:	6878      	ldr	r0, [r7, #4]
 801973e:	f7fe f80f 	bl	8017760 <etharp_input>
      break;
 8019742:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019744:	2300      	movs	r3, #0
 8019746:	e00c      	b.n	8019762 <ethernet_input+0x10e>
    goto free_and_return;
 8019748:	bf00      	nop
 801974a:	e006      	b.n	801975a <ethernet_input+0x106>
        goto free_and_return;
 801974c:	bf00      	nop
 801974e:	e004      	b.n	801975a <ethernet_input+0x106>
        goto free_and_return;
 8019750:	bf00      	nop
 8019752:	e002      	b.n	801975a <ethernet_input+0x106>
        goto free_and_return;
 8019754:	bf00      	nop
 8019756:	e000      	b.n	801975a <ethernet_input+0x106>
        goto free_and_return;
 8019758:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801975a:	6878      	ldr	r0, [r7, #4]
 801975c:	f7f6 feaa 	bl	80104b4 <pbuf_free>
  return ERR_OK;
 8019760:	2300      	movs	r3, #0
}
 8019762:	4618      	mov	r0, r3
 8019764:	3718      	adds	r7, #24
 8019766:	46bd      	mov	sp, r7
 8019768:	bd80      	pop	{r7, pc}
 801976a:	bf00      	nop
 801976c:	0801e220 	.word	0x0801e220

08019770 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019770:	b580      	push	{r7, lr}
 8019772:	b086      	sub	sp, #24
 8019774:	af00      	add	r7, sp, #0
 8019776:	60f8      	str	r0, [r7, #12]
 8019778:	60b9      	str	r1, [r7, #8]
 801977a:	607a      	str	r2, [r7, #4]
 801977c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801977e:	8c3b      	ldrh	r3, [r7, #32]
 8019780:	4618      	mov	r0, r3
 8019782:	f7f5 f9ed 	bl	800eb60 <lwip_htons>
 8019786:	4603      	mov	r3, r0
 8019788:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801978a:	210e      	movs	r1, #14
 801978c:	68b8      	ldr	r0, [r7, #8]
 801978e:	f7f6 fdfb 	bl	8010388 <pbuf_add_header>
 8019792:	4603      	mov	r3, r0
 8019794:	2b00      	cmp	r3, #0
 8019796:	d125      	bne.n	80197e4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019798:	68bb      	ldr	r3, [r7, #8]
 801979a:	685b      	ldr	r3, [r3, #4]
 801979c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801979e:	693b      	ldr	r3, [r7, #16]
 80197a0:	8afa      	ldrh	r2, [r7, #22]
 80197a2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80197a4:	693b      	ldr	r3, [r7, #16]
 80197a6:	2206      	movs	r2, #6
 80197a8:	6839      	ldr	r1, [r7, #0]
 80197aa:	4618      	mov	r0, r3
 80197ac:	f000 fa69 	bl	8019c82 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80197b0:	693b      	ldr	r3, [r7, #16]
 80197b2:	3306      	adds	r3, #6
 80197b4:	2206      	movs	r2, #6
 80197b6:	6879      	ldr	r1, [r7, #4]
 80197b8:	4618      	mov	r0, r3
 80197ba:	f000 fa62 	bl	8019c82 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80197be:	68fb      	ldr	r3, [r7, #12]
 80197c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80197c4:	2b06      	cmp	r3, #6
 80197c6:	d006      	beq.n	80197d6 <ethernet_output+0x66>
 80197c8:	4b0a      	ldr	r3, [pc, #40]	; (80197f4 <ethernet_output+0x84>)
 80197ca:	f44f 7299 	mov.w	r2, #306	; 0x132
 80197ce:	490a      	ldr	r1, [pc, #40]	; (80197f8 <ethernet_output+0x88>)
 80197d0:	480a      	ldr	r0, [pc, #40]	; (80197fc <ethernet_output+0x8c>)
 80197d2:	f000 fac7 	bl	8019d64 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80197d6:	68fb      	ldr	r3, [r7, #12]
 80197d8:	699b      	ldr	r3, [r3, #24]
 80197da:	68b9      	ldr	r1, [r7, #8]
 80197dc:	68f8      	ldr	r0, [r7, #12]
 80197de:	4798      	blx	r3
 80197e0:	4603      	mov	r3, r0
 80197e2:	e002      	b.n	80197ea <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80197e4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80197e6:	f06f 0301 	mvn.w	r3, #1
}
 80197ea:	4618      	mov	r0, r3
 80197ec:	3718      	adds	r7, #24
 80197ee:	46bd      	mov	sp, r7
 80197f0:	bd80      	pop	{r7, pc}
 80197f2:	bf00      	nop
 80197f4:	0801d844 	.word	0x0801d844
 80197f8:	0801d87c 	.word	0x0801d87c
 80197fc:	0801d8b0 	.word	0x0801d8b0

08019800 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019800:	b580      	push	{r7, lr}
 8019802:	b086      	sub	sp, #24
 8019804:	af00      	add	r7, sp, #0
 8019806:	6078      	str	r0, [r7, #4]
 8019808:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801980a:	683b      	ldr	r3, [r7, #0]
 801980c:	60bb      	str	r3, [r7, #8]
 801980e:	2304      	movs	r3, #4
 8019810:	60fb      	str	r3, [r7, #12]
 8019812:	2300      	movs	r3, #0
 8019814:	613b      	str	r3, [r7, #16]
 8019816:	2300      	movs	r3, #0
 8019818:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801981a:	f107 0308 	add.w	r3, r7, #8
 801981e:	2100      	movs	r1, #0
 8019820:	4618      	mov	r0, r3
 8019822:	f7f2 fa83 	bl	800bd2c <osMessageCreate>
 8019826:	4602      	mov	r2, r0
 8019828:	687b      	ldr	r3, [r7, #4]
 801982a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	2b00      	cmp	r3, #0
 8019832:	d102      	bne.n	801983a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019834:	f04f 33ff 	mov.w	r3, #4294967295
 8019838:	e000      	b.n	801983c <sys_mbox_new+0x3c>

  return ERR_OK;
 801983a:	2300      	movs	r3, #0
}
 801983c:	4618      	mov	r0, r3
 801983e:	3718      	adds	r7, #24
 8019840:	46bd      	mov	sp, r7
 8019842:	bd80      	pop	{r7, pc}

08019844 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b084      	sub	sp, #16
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
 801984c:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	681b      	ldr	r3, [r3, #0]
 8019852:	6839      	ldr	r1, [r7, #0]
 8019854:	2200      	movs	r2, #0
 8019856:	4618      	mov	r0, r3
 8019858:	f7f2 fa90 	bl	800bd7c <osMessagePut>
 801985c:	4603      	mov	r3, r0
 801985e:	2b00      	cmp	r3, #0
 8019860:	d102      	bne.n	8019868 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019862:	2300      	movs	r3, #0
 8019864:	73fb      	strb	r3, [r7, #15]
 8019866:	e001      	b.n	801986c <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019868:	23ff      	movs	r3, #255	; 0xff
 801986a:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801986c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019870:	4618      	mov	r0, r3
 8019872:	3710      	adds	r7, #16
 8019874:	46bd      	mov	sp, r7
 8019876:	bd80      	pop	{r7, pc}

08019878 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019878:	b580      	push	{r7, lr}
 801987a:	b08c      	sub	sp, #48	; 0x30
 801987c:	af00      	add	r7, sp, #0
 801987e:	61f8      	str	r0, [r7, #28]
 8019880:	61b9      	str	r1, [r7, #24]
 8019882:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019884:	f7f2 f87d 	bl	800b982 <osKernelSysTick>
 8019888:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801988a:	697b      	ldr	r3, [r7, #20]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d017      	beq.n	80198c0 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019890:	69fb      	ldr	r3, [r7, #28]
 8019892:	6819      	ldr	r1, [r3, #0]
 8019894:	f107 0320 	add.w	r3, r7, #32
 8019898:	697a      	ldr	r2, [r7, #20]
 801989a:	4618      	mov	r0, r3
 801989c:	f7f2 fab4 	bl	800be08 <osMessageGet>

    if(event.status == osEventMessage)
 80198a0:	6a3b      	ldr	r3, [r7, #32]
 80198a2:	2b10      	cmp	r3, #16
 80198a4:	d109      	bne.n	80198ba <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 80198a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a8:	461a      	mov	r2, r3
 80198aa:	69bb      	ldr	r3, [r7, #24]
 80198ac:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 80198ae:	f7f2 f868 	bl	800b982 <osKernelSysTick>
 80198b2:	4602      	mov	r2, r0
 80198b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198b6:	1ad3      	subs	r3, r2, r3
 80198b8:	e019      	b.n	80198ee <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 80198ba:	f04f 33ff 	mov.w	r3, #4294967295
 80198be:	e016      	b.n	80198ee <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 80198c0:	69fb      	ldr	r3, [r7, #28]
 80198c2:	6819      	ldr	r1, [r3, #0]
 80198c4:	463b      	mov	r3, r7
 80198c6:	f04f 32ff 	mov.w	r2, #4294967295
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7f2 fa9c 	bl	800be08 <osMessageGet>
 80198d0:	f107 0320 	add.w	r3, r7, #32
 80198d4:	463a      	mov	r2, r7
 80198d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80198d8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 80198dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198de:	461a      	mov	r2, r3
 80198e0:	69bb      	ldr	r3, [r7, #24]
 80198e2:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 80198e4:	f7f2 f84d 	bl	800b982 <osKernelSysTick>
 80198e8:	4602      	mov	r2, r0
 80198ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80198ec:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80198ee:	4618      	mov	r0, r3
 80198f0:	3730      	adds	r7, #48	; 0x30
 80198f2:	46bd      	mov	sp, r7
 80198f4:	bd80      	pop	{r7, pc}

080198f6 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80198f6:	b480      	push	{r7}
 80198f8:	b083      	sub	sp, #12
 80198fa:	af00      	add	r7, sp, #0
 80198fc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	2b00      	cmp	r3, #0
 8019904:	d101      	bne.n	801990a <sys_mbox_valid+0x14>
    return 0;
 8019906:	2300      	movs	r3, #0
 8019908:	e000      	b.n	801990c <sys_mbox_valid+0x16>
  else
    return 1;
 801990a:	2301      	movs	r3, #1
}
 801990c:	4618      	mov	r0, r3
 801990e:	370c      	adds	r7, #12
 8019910:	46bd      	mov	sp, r7
 8019912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019916:	4770      	bx	lr

08019918 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8019918:	b580      	push	{r7, lr}
 801991a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801991c:	4803      	ldr	r0, [pc, #12]	; (801992c <sys_init+0x14>)
 801991e:	f7f2 f8a7 	bl	800ba70 <osMutexCreate>
 8019922:	4603      	mov	r3, r0
 8019924:	4a02      	ldr	r2, [pc, #8]	; (8019930 <sys_init+0x18>)
 8019926:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8019928:	bf00      	nop
 801992a:	bd80      	pop	{r7, pc}
 801992c:	0801e230 	.word	0x0801e230
 8019930:	240078bc 	.word	0x240078bc

08019934 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8019934:	b580      	push	{r7, lr}
 8019936:	b084      	sub	sp, #16
 8019938:	af00      	add	r7, sp, #0
 801993a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801993c:	2300      	movs	r3, #0
 801993e:	60bb      	str	r3, [r7, #8]
 8019940:	2300      	movs	r3, #0
 8019942:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8019944:	f107 0308 	add.w	r3, r7, #8
 8019948:	4618      	mov	r0, r3
 801994a:	f7f2 f891 	bl	800ba70 <osMutexCreate>
 801994e:	4602      	mov	r2, r0
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	681b      	ldr	r3, [r3, #0]
 8019958:	2b00      	cmp	r3, #0
 801995a:	d102      	bne.n	8019962 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801995c:	f04f 33ff 	mov.w	r3, #4294967295
 8019960:	e000      	b.n	8019964 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8019962:	2300      	movs	r3, #0
}
 8019964:	4618      	mov	r0, r3
 8019966:	3710      	adds	r7, #16
 8019968:	46bd      	mov	sp, r7
 801996a:	bd80      	pop	{r7, pc}

0801996c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801996c:	b580      	push	{r7, lr}
 801996e:	b082      	sub	sp, #8
 8019970:	af00      	add	r7, sp, #0
 8019972:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	f04f 31ff 	mov.w	r1, #4294967295
 801997c:	4618      	mov	r0, r3
 801997e:	f7f2 f88f 	bl	800baa0 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8019982:	bf00      	nop
 8019984:	3708      	adds	r7, #8
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}

0801998a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801998a:	b580      	push	{r7, lr}
 801998c:	b082      	sub	sp, #8
 801998e:	af00      	add	r7, sp, #0
 8019990:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	4618      	mov	r0, r3
 8019998:	f7f2 f8d6 	bl	800bb48 <osMutexRelease>
}
 801999c:	bf00      	nop
 801999e:	3708      	adds	r7, #8
 80199a0:	46bd      	mov	sp, r7
 80199a2:	bd80      	pop	{r7, pc}

080199a4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80199a4:	b580      	push	{r7, lr}
 80199a6:	b08c      	sub	sp, #48	; 0x30
 80199a8:	af00      	add	r7, sp, #0
 80199aa:	60f8      	str	r0, [r7, #12]
 80199ac:	60b9      	str	r1, [r7, #8]
 80199ae:	607a      	str	r2, [r7, #4]
 80199b0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80199b2:	f107 0314 	add.w	r3, r7, #20
 80199b6:	2200      	movs	r2, #0
 80199b8:	601a      	str	r2, [r3, #0]
 80199ba:	605a      	str	r2, [r3, #4]
 80199bc:	609a      	str	r2, [r3, #8]
 80199be:	60da      	str	r2, [r3, #12]
 80199c0:	611a      	str	r2, [r3, #16]
 80199c2:	615a      	str	r2, [r3, #20]
 80199c4:	619a      	str	r2, [r3, #24]
 80199c6:	68fb      	ldr	r3, [r7, #12]
 80199c8:	617b      	str	r3, [r7, #20]
 80199ca:	68bb      	ldr	r3, [r7, #8]
 80199cc:	61bb      	str	r3, [r7, #24]
 80199ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80199d0:	b21b      	sxth	r3, r3
 80199d2:	83bb      	strh	r3, [r7, #28]
 80199d4:	683b      	ldr	r3, [r7, #0]
 80199d6:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80199d8:	f107 0314 	add.w	r3, r7, #20
 80199dc:	6879      	ldr	r1, [r7, #4]
 80199de:	4618      	mov	r0, r3
 80199e0:	f7f1 ffdf 	bl	800b9a2 <osThreadCreate>
 80199e4:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80199e6:	4618      	mov	r0, r3
 80199e8:	3730      	adds	r7, #48	; 0x30
 80199ea:	46bd      	mov	sp, r7
 80199ec:	bd80      	pop	{r7, pc}
	...

080199f0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 80199f4:	4b04      	ldr	r3, [pc, #16]	; (8019a08 <sys_arch_protect+0x18>)
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	f04f 31ff 	mov.w	r1, #4294967295
 80199fc:	4618      	mov	r0, r3
 80199fe:	f7f2 f84f 	bl	800baa0 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8019a02:	2301      	movs	r3, #1
}
 8019a04:	4618      	mov	r0, r3
 8019a06:	bd80      	pop	{r7, pc}
 8019a08:	240078bc 	.word	0x240078bc

08019a0c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	b082      	sub	sp, #8
 8019a10:	af00      	add	r7, sp, #0
 8019a12:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8019a14:	4b04      	ldr	r3, [pc, #16]	; (8019a28 <sys_arch_unprotect+0x1c>)
 8019a16:	681b      	ldr	r3, [r3, #0]
 8019a18:	4618      	mov	r0, r3
 8019a1a:	f7f2 f895 	bl	800bb48 <osMutexRelease>
}
 8019a1e:	bf00      	nop
 8019a20:	3708      	adds	r7, #8
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bd80      	pop	{r7, pc}
 8019a26:	bf00      	nop
 8019a28:	240078bc 	.word	0x240078bc

08019a2c <std>:
 8019a2c:	2300      	movs	r3, #0
 8019a2e:	b510      	push	{r4, lr}
 8019a30:	4604      	mov	r4, r0
 8019a32:	e9c0 3300 	strd	r3, r3, [r0]
 8019a36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a3a:	6083      	str	r3, [r0, #8]
 8019a3c:	8181      	strh	r1, [r0, #12]
 8019a3e:	6643      	str	r3, [r0, #100]	; 0x64
 8019a40:	81c2      	strh	r2, [r0, #14]
 8019a42:	6183      	str	r3, [r0, #24]
 8019a44:	4619      	mov	r1, r3
 8019a46:	2208      	movs	r2, #8
 8019a48:	305c      	adds	r0, #92	; 0x5c
 8019a4a:	f000 f928 	bl	8019c9e <memset>
 8019a4e:	4b05      	ldr	r3, [pc, #20]	; (8019a64 <std+0x38>)
 8019a50:	6263      	str	r3, [r4, #36]	; 0x24
 8019a52:	4b05      	ldr	r3, [pc, #20]	; (8019a68 <std+0x3c>)
 8019a54:	62a3      	str	r3, [r4, #40]	; 0x28
 8019a56:	4b05      	ldr	r3, [pc, #20]	; (8019a6c <std+0x40>)
 8019a58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019a5a:	4b05      	ldr	r3, [pc, #20]	; (8019a70 <std+0x44>)
 8019a5c:	6224      	str	r4, [r4, #32]
 8019a5e:	6323      	str	r3, [r4, #48]	; 0x30
 8019a60:	bd10      	pop	{r4, pc}
 8019a62:	bf00      	nop
 8019a64:	08019f09 	.word	0x08019f09
 8019a68:	08019f2b 	.word	0x08019f2b
 8019a6c:	08019f63 	.word	0x08019f63
 8019a70:	08019f87 	.word	0x08019f87

08019a74 <_cleanup_r>:
 8019a74:	4901      	ldr	r1, [pc, #4]	; (8019a7c <_cleanup_r+0x8>)
 8019a76:	f000 b8af 	b.w	8019bd8 <_fwalk_reent>
 8019a7a:	bf00      	nop
 8019a7c:	0801a151 	.word	0x0801a151

08019a80 <__sfmoreglue>:
 8019a80:	b570      	push	{r4, r5, r6, lr}
 8019a82:	1e4a      	subs	r2, r1, #1
 8019a84:	2568      	movs	r5, #104	; 0x68
 8019a86:	4355      	muls	r5, r2
 8019a88:	460e      	mov	r6, r1
 8019a8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019a8e:	f000 f90f 	bl	8019cb0 <_malloc_r>
 8019a92:	4604      	mov	r4, r0
 8019a94:	b140      	cbz	r0, 8019aa8 <__sfmoreglue+0x28>
 8019a96:	2100      	movs	r1, #0
 8019a98:	e9c0 1600 	strd	r1, r6, [r0]
 8019a9c:	300c      	adds	r0, #12
 8019a9e:	60a0      	str	r0, [r4, #8]
 8019aa0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019aa4:	f000 f8fb 	bl	8019c9e <memset>
 8019aa8:	4620      	mov	r0, r4
 8019aaa:	bd70      	pop	{r4, r5, r6, pc}

08019aac <__sfp_lock_acquire>:
 8019aac:	4801      	ldr	r0, [pc, #4]	; (8019ab4 <__sfp_lock_acquire+0x8>)
 8019aae:	f000 b8d8 	b.w	8019c62 <__retarget_lock_acquire_recursive>
 8019ab2:	bf00      	nop
 8019ab4:	240078c8 	.word	0x240078c8

08019ab8 <__sfp_lock_release>:
 8019ab8:	4801      	ldr	r0, [pc, #4]	; (8019ac0 <__sfp_lock_release+0x8>)
 8019aba:	f000 b8d3 	b.w	8019c64 <__retarget_lock_release_recursive>
 8019abe:	bf00      	nop
 8019ac0:	240078c8 	.word	0x240078c8

08019ac4 <__sinit_lock_acquire>:
 8019ac4:	4801      	ldr	r0, [pc, #4]	; (8019acc <__sinit_lock_acquire+0x8>)
 8019ac6:	f000 b8cc 	b.w	8019c62 <__retarget_lock_acquire_recursive>
 8019aca:	bf00      	nop
 8019acc:	240078c3 	.word	0x240078c3

08019ad0 <__sinit_lock_release>:
 8019ad0:	4801      	ldr	r0, [pc, #4]	; (8019ad8 <__sinit_lock_release+0x8>)
 8019ad2:	f000 b8c7 	b.w	8019c64 <__retarget_lock_release_recursive>
 8019ad6:	bf00      	nop
 8019ad8:	240078c3 	.word	0x240078c3

08019adc <__sinit>:
 8019adc:	b510      	push	{r4, lr}
 8019ade:	4604      	mov	r4, r0
 8019ae0:	f7ff fff0 	bl	8019ac4 <__sinit_lock_acquire>
 8019ae4:	69a3      	ldr	r3, [r4, #24]
 8019ae6:	b11b      	cbz	r3, 8019af0 <__sinit+0x14>
 8019ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019aec:	f7ff bff0 	b.w	8019ad0 <__sinit_lock_release>
 8019af0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8019af4:	6523      	str	r3, [r4, #80]	; 0x50
 8019af6:	4b13      	ldr	r3, [pc, #76]	; (8019b44 <__sinit+0x68>)
 8019af8:	4a13      	ldr	r2, [pc, #76]	; (8019b48 <__sinit+0x6c>)
 8019afa:	681b      	ldr	r3, [r3, #0]
 8019afc:	62a2      	str	r2, [r4, #40]	; 0x28
 8019afe:	42a3      	cmp	r3, r4
 8019b00:	bf04      	itt	eq
 8019b02:	2301      	moveq	r3, #1
 8019b04:	61a3      	streq	r3, [r4, #24]
 8019b06:	4620      	mov	r0, r4
 8019b08:	f000 f820 	bl	8019b4c <__sfp>
 8019b0c:	6060      	str	r0, [r4, #4]
 8019b0e:	4620      	mov	r0, r4
 8019b10:	f000 f81c 	bl	8019b4c <__sfp>
 8019b14:	60a0      	str	r0, [r4, #8]
 8019b16:	4620      	mov	r0, r4
 8019b18:	f000 f818 	bl	8019b4c <__sfp>
 8019b1c:	2200      	movs	r2, #0
 8019b1e:	60e0      	str	r0, [r4, #12]
 8019b20:	2104      	movs	r1, #4
 8019b22:	6860      	ldr	r0, [r4, #4]
 8019b24:	f7ff ff82 	bl	8019a2c <std>
 8019b28:	68a0      	ldr	r0, [r4, #8]
 8019b2a:	2201      	movs	r2, #1
 8019b2c:	2109      	movs	r1, #9
 8019b2e:	f7ff ff7d 	bl	8019a2c <std>
 8019b32:	68e0      	ldr	r0, [r4, #12]
 8019b34:	2202      	movs	r2, #2
 8019b36:	2112      	movs	r1, #18
 8019b38:	f7ff ff78 	bl	8019a2c <std>
 8019b3c:	2301      	movs	r3, #1
 8019b3e:	61a3      	str	r3, [r4, #24]
 8019b40:	e7d2      	b.n	8019ae8 <__sinit+0xc>
 8019b42:	bf00      	nop
 8019b44:	0801e298 	.word	0x0801e298
 8019b48:	08019a75 	.word	0x08019a75

08019b4c <__sfp>:
 8019b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b4e:	4607      	mov	r7, r0
 8019b50:	f7ff ffac 	bl	8019aac <__sfp_lock_acquire>
 8019b54:	4b1e      	ldr	r3, [pc, #120]	; (8019bd0 <__sfp+0x84>)
 8019b56:	681e      	ldr	r6, [r3, #0]
 8019b58:	69b3      	ldr	r3, [r6, #24]
 8019b5a:	b913      	cbnz	r3, 8019b62 <__sfp+0x16>
 8019b5c:	4630      	mov	r0, r6
 8019b5e:	f7ff ffbd 	bl	8019adc <__sinit>
 8019b62:	3648      	adds	r6, #72	; 0x48
 8019b64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019b68:	3b01      	subs	r3, #1
 8019b6a:	d503      	bpl.n	8019b74 <__sfp+0x28>
 8019b6c:	6833      	ldr	r3, [r6, #0]
 8019b6e:	b30b      	cbz	r3, 8019bb4 <__sfp+0x68>
 8019b70:	6836      	ldr	r6, [r6, #0]
 8019b72:	e7f7      	b.n	8019b64 <__sfp+0x18>
 8019b74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b78:	b9d5      	cbnz	r5, 8019bb0 <__sfp+0x64>
 8019b7a:	4b16      	ldr	r3, [pc, #88]	; (8019bd4 <__sfp+0x88>)
 8019b7c:	60e3      	str	r3, [r4, #12]
 8019b7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019b82:	6665      	str	r5, [r4, #100]	; 0x64
 8019b84:	f000 f86c 	bl	8019c60 <__retarget_lock_init_recursive>
 8019b88:	f7ff ff96 	bl	8019ab8 <__sfp_lock_release>
 8019b8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8019b90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8019b94:	6025      	str	r5, [r4, #0]
 8019b96:	61a5      	str	r5, [r4, #24]
 8019b98:	2208      	movs	r2, #8
 8019b9a:	4629      	mov	r1, r5
 8019b9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019ba0:	f000 f87d 	bl	8019c9e <memset>
 8019ba4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019ba8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019bac:	4620      	mov	r0, r4
 8019bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019bb0:	3468      	adds	r4, #104	; 0x68
 8019bb2:	e7d9      	b.n	8019b68 <__sfp+0x1c>
 8019bb4:	2104      	movs	r1, #4
 8019bb6:	4638      	mov	r0, r7
 8019bb8:	f7ff ff62 	bl	8019a80 <__sfmoreglue>
 8019bbc:	4604      	mov	r4, r0
 8019bbe:	6030      	str	r0, [r6, #0]
 8019bc0:	2800      	cmp	r0, #0
 8019bc2:	d1d5      	bne.n	8019b70 <__sfp+0x24>
 8019bc4:	f7ff ff78 	bl	8019ab8 <__sfp_lock_release>
 8019bc8:	230c      	movs	r3, #12
 8019bca:	603b      	str	r3, [r7, #0]
 8019bcc:	e7ee      	b.n	8019bac <__sfp+0x60>
 8019bce:	bf00      	nop
 8019bd0:	0801e298 	.word	0x0801e298
 8019bd4:	ffff0001 	.word	0xffff0001

08019bd8 <_fwalk_reent>:
 8019bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019bdc:	4606      	mov	r6, r0
 8019bde:	4688      	mov	r8, r1
 8019be0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019be4:	2700      	movs	r7, #0
 8019be6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019bea:	f1b9 0901 	subs.w	r9, r9, #1
 8019bee:	d505      	bpl.n	8019bfc <_fwalk_reent+0x24>
 8019bf0:	6824      	ldr	r4, [r4, #0]
 8019bf2:	2c00      	cmp	r4, #0
 8019bf4:	d1f7      	bne.n	8019be6 <_fwalk_reent+0xe>
 8019bf6:	4638      	mov	r0, r7
 8019bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019bfc:	89ab      	ldrh	r3, [r5, #12]
 8019bfe:	2b01      	cmp	r3, #1
 8019c00:	d907      	bls.n	8019c12 <_fwalk_reent+0x3a>
 8019c02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019c06:	3301      	adds	r3, #1
 8019c08:	d003      	beq.n	8019c12 <_fwalk_reent+0x3a>
 8019c0a:	4629      	mov	r1, r5
 8019c0c:	4630      	mov	r0, r6
 8019c0e:	47c0      	blx	r8
 8019c10:	4307      	orrs	r7, r0
 8019c12:	3568      	adds	r5, #104	; 0x68
 8019c14:	e7e9      	b.n	8019bea <_fwalk_reent+0x12>
	...

08019c18 <__libc_init_array>:
 8019c18:	b570      	push	{r4, r5, r6, lr}
 8019c1a:	4d0d      	ldr	r5, [pc, #52]	; (8019c50 <__libc_init_array+0x38>)
 8019c1c:	4c0d      	ldr	r4, [pc, #52]	; (8019c54 <__libc_init_array+0x3c>)
 8019c1e:	1b64      	subs	r4, r4, r5
 8019c20:	10a4      	asrs	r4, r4, #2
 8019c22:	2600      	movs	r6, #0
 8019c24:	42a6      	cmp	r6, r4
 8019c26:	d109      	bne.n	8019c3c <__libc_init_array+0x24>
 8019c28:	4d0b      	ldr	r5, [pc, #44]	; (8019c58 <__libc_init_array+0x40>)
 8019c2a:	4c0c      	ldr	r4, [pc, #48]	; (8019c5c <__libc_init_array+0x44>)
 8019c2c:	f000 ffe6 	bl	801abfc <_init>
 8019c30:	1b64      	subs	r4, r4, r5
 8019c32:	10a4      	asrs	r4, r4, #2
 8019c34:	2600      	movs	r6, #0
 8019c36:	42a6      	cmp	r6, r4
 8019c38:	d105      	bne.n	8019c46 <__libc_init_array+0x2e>
 8019c3a:	bd70      	pop	{r4, r5, r6, pc}
 8019c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c40:	4798      	blx	r3
 8019c42:	3601      	adds	r6, #1
 8019c44:	e7ee      	b.n	8019c24 <__libc_init_array+0xc>
 8019c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c4a:	4798      	blx	r3
 8019c4c:	3601      	adds	r6, #1
 8019c4e:	e7f2      	b.n	8019c36 <__libc_init_array+0x1e>
 8019c50:	0801e38c 	.word	0x0801e38c
 8019c54:	0801e38c 	.word	0x0801e38c
 8019c58:	0801e38c 	.word	0x0801e38c
 8019c5c:	0801e390 	.word	0x0801e390

08019c60 <__retarget_lock_init_recursive>:
 8019c60:	4770      	bx	lr

08019c62 <__retarget_lock_acquire_recursive>:
 8019c62:	4770      	bx	lr

08019c64 <__retarget_lock_release_recursive>:
 8019c64:	4770      	bx	lr

08019c66 <memcmp>:
 8019c66:	b530      	push	{r4, r5, lr}
 8019c68:	3901      	subs	r1, #1
 8019c6a:	2400      	movs	r4, #0
 8019c6c:	42a2      	cmp	r2, r4
 8019c6e:	d101      	bne.n	8019c74 <memcmp+0xe>
 8019c70:	2000      	movs	r0, #0
 8019c72:	e005      	b.n	8019c80 <memcmp+0x1a>
 8019c74:	5d03      	ldrb	r3, [r0, r4]
 8019c76:	3401      	adds	r4, #1
 8019c78:	5d0d      	ldrb	r5, [r1, r4]
 8019c7a:	42ab      	cmp	r3, r5
 8019c7c:	d0f6      	beq.n	8019c6c <memcmp+0x6>
 8019c7e:	1b58      	subs	r0, r3, r5
 8019c80:	bd30      	pop	{r4, r5, pc}

08019c82 <memcpy>:
 8019c82:	440a      	add	r2, r1
 8019c84:	4291      	cmp	r1, r2
 8019c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8019c8a:	d100      	bne.n	8019c8e <memcpy+0xc>
 8019c8c:	4770      	bx	lr
 8019c8e:	b510      	push	{r4, lr}
 8019c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019c94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019c98:	4291      	cmp	r1, r2
 8019c9a:	d1f9      	bne.n	8019c90 <memcpy+0xe>
 8019c9c:	bd10      	pop	{r4, pc}

08019c9e <memset>:
 8019c9e:	4402      	add	r2, r0
 8019ca0:	4603      	mov	r3, r0
 8019ca2:	4293      	cmp	r3, r2
 8019ca4:	d100      	bne.n	8019ca8 <memset+0xa>
 8019ca6:	4770      	bx	lr
 8019ca8:	f803 1b01 	strb.w	r1, [r3], #1
 8019cac:	e7f9      	b.n	8019ca2 <memset+0x4>
	...

08019cb0 <_malloc_r>:
 8019cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019cb2:	1ccd      	adds	r5, r1, #3
 8019cb4:	f025 0503 	bic.w	r5, r5, #3
 8019cb8:	3508      	adds	r5, #8
 8019cba:	2d0c      	cmp	r5, #12
 8019cbc:	bf38      	it	cc
 8019cbe:	250c      	movcc	r5, #12
 8019cc0:	2d00      	cmp	r5, #0
 8019cc2:	4606      	mov	r6, r0
 8019cc4:	db01      	blt.n	8019cca <_malloc_r+0x1a>
 8019cc6:	42a9      	cmp	r1, r5
 8019cc8:	d903      	bls.n	8019cd2 <_malloc_r+0x22>
 8019cca:	230c      	movs	r3, #12
 8019ccc:	6033      	str	r3, [r6, #0]
 8019cce:	2000      	movs	r0, #0
 8019cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019cd2:	f000 faa5 	bl	801a220 <__malloc_lock>
 8019cd6:	4921      	ldr	r1, [pc, #132]	; (8019d5c <_malloc_r+0xac>)
 8019cd8:	680a      	ldr	r2, [r1, #0]
 8019cda:	4614      	mov	r4, r2
 8019cdc:	b99c      	cbnz	r4, 8019d06 <_malloc_r+0x56>
 8019cde:	4f20      	ldr	r7, [pc, #128]	; (8019d60 <_malloc_r+0xb0>)
 8019ce0:	683b      	ldr	r3, [r7, #0]
 8019ce2:	b923      	cbnz	r3, 8019cee <_malloc_r+0x3e>
 8019ce4:	4621      	mov	r1, r4
 8019ce6:	4630      	mov	r0, r6
 8019ce8:	f000 f8fe 	bl	8019ee8 <_sbrk_r>
 8019cec:	6038      	str	r0, [r7, #0]
 8019cee:	4629      	mov	r1, r5
 8019cf0:	4630      	mov	r0, r6
 8019cf2:	f000 f8f9 	bl	8019ee8 <_sbrk_r>
 8019cf6:	1c43      	adds	r3, r0, #1
 8019cf8:	d123      	bne.n	8019d42 <_malloc_r+0x92>
 8019cfa:	230c      	movs	r3, #12
 8019cfc:	6033      	str	r3, [r6, #0]
 8019cfe:	4630      	mov	r0, r6
 8019d00:	f000 fa94 	bl	801a22c <__malloc_unlock>
 8019d04:	e7e3      	b.n	8019cce <_malloc_r+0x1e>
 8019d06:	6823      	ldr	r3, [r4, #0]
 8019d08:	1b5b      	subs	r3, r3, r5
 8019d0a:	d417      	bmi.n	8019d3c <_malloc_r+0x8c>
 8019d0c:	2b0b      	cmp	r3, #11
 8019d0e:	d903      	bls.n	8019d18 <_malloc_r+0x68>
 8019d10:	6023      	str	r3, [r4, #0]
 8019d12:	441c      	add	r4, r3
 8019d14:	6025      	str	r5, [r4, #0]
 8019d16:	e004      	b.n	8019d22 <_malloc_r+0x72>
 8019d18:	6863      	ldr	r3, [r4, #4]
 8019d1a:	42a2      	cmp	r2, r4
 8019d1c:	bf0c      	ite	eq
 8019d1e:	600b      	streq	r3, [r1, #0]
 8019d20:	6053      	strne	r3, [r2, #4]
 8019d22:	4630      	mov	r0, r6
 8019d24:	f000 fa82 	bl	801a22c <__malloc_unlock>
 8019d28:	f104 000b 	add.w	r0, r4, #11
 8019d2c:	1d23      	adds	r3, r4, #4
 8019d2e:	f020 0007 	bic.w	r0, r0, #7
 8019d32:	1ac2      	subs	r2, r0, r3
 8019d34:	d0cc      	beq.n	8019cd0 <_malloc_r+0x20>
 8019d36:	1a1b      	subs	r3, r3, r0
 8019d38:	50a3      	str	r3, [r4, r2]
 8019d3a:	e7c9      	b.n	8019cd0 <_malloc_r+0x20>
 8019d3c:	4622      	mov	r2, r4
 8019d3e:	6864      	ldr	r4, [r4, #4]
 8019d40:	e7cc      	b.n	8019cdc <_malloc_r+0x2c>
 8019d42:	1cc4      	adds	r4, r0, #3
 8019d44:	f024 0403 	bic.w	r4, r4, #3
 8019d48:	42a0      	cmp	r0, r4
 8019d4a:	d0e3      	beq.n	8019d14 <_malloc_r+0x64>
 8019d4c:	1a21      	subs	r1, r4, r0
 8019d4e:	4630      	mov	r0, r6
 8019d50:	f000 f8ca 	bl	8019ee8 <_sbrk_r>
 8019d54:	3001      	adds	r0, #1
 8019d56:	d1dd      	bne.n	8019d14 <_malloc_r+0x64>
 8019d58:	e7cf      	b.n	8019cfa <_malloc_r+0x4a>
 8019d5a:	bf00      	nop
 8019d5c:	24004284 	.word	0x24004284
 8019d60:	24004288 	.word	0x24004288

08019d64 <iprintf>:
 8019d64:	b40f      	push	{r0, r1, r2, r3}
 8019d66:	4b0a      	ldr	r3, [pc, #40]	; (8019d90 <iprintf+0x2c>)
 8019d68:	b513      	push	{r0, r1, r4, lr}
 8019d6a:	681c      	ldr	r4, [r3, #0]
 8019d6c:	b124      	cbz	r4, 8019d78 <iprintf+0x14>
 8019d6e:	69a3      	ldr	r3, [r4, #24]
 8019d70:	b913      	cbnz	r3, 8019d78 <iprintf+0x14>
 8019d72:	4620      	mov	r0, r4
 8019d74:	f7ff feb2 	bl	8019adc <__sinit>
 8019d78:	ab05      	add	r3, sp, #20
 8019d7a:	9a04      	ldr	r2, [sp, #16]
 8019d7c:	68a1      	ldr	r1, [r4, #8]
 8019d7e:	9301      	str	r3, [sp, #4]
 8019d80:	4620      	mov	r0, r4
 8019d82:	f000 fad3 	bl	801a32c <_vfiprintf_r>
 8019d86:	b002      	add	sp, #8
 8019d88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019d8c:	b004      	add	sp, #16
 8019d8e:	4770      	bx	lr
 8019d90:	2400003c 	.word	0x2400003c

08019d94 <rand>:
 8019d94:	4b17      	ldr	r3, [pc, #92]	; (8019df4 <rand+0x60>)
 8019d96:	b510      	push	{r4, lr}
 8019d98:	681c      	ldr	r4, [r3, #0]
 8019d9a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8019d9c:	b9b3      	cbnz	r3, 8019dcc <rand+0x38>
 8019d9e:	2018      	movs	r0, #24
 8019da0:	f000 fa36 	bl	801a210 <malloc>
 8019da4:	63a0      	str	r0, [r4, #56]	; 0x38
 8019da6:	b928      	cbnz	r0, 8019db4 <rand+0x20>
 8019da8:	4602      	mov	r2, r0
 8019daa:	4b13      	ldr	r3, [pc, #76]	; (8019df8 <rand+0x64>)
 8019dac:	4813      	ldr	r0, [pc, #76]	; (8019dfc <rand+0x68>)
 8019dae:	214e      	movs	r1, #78	; 0x4e
 8019db0:	f000 f91a 	bl	8019fe8 <__assert_func>
 8019db4:	4a12      	ldr	r2, [pc, #72]	; (8019e00 <rand+0x6c>)
 8019db6:	4b13      	ldr	r3, [pc, #76]	; (8019e04 <rand+0x70>)
 8019db8:	e9c0 2300 	strd	r2, r3, [r0]
 8019dbc:	4b12      	ldr	r3, [pc, #72]	; (8019e08 <rand+0x74>)
 8019dbe:	6083      	str	r3, [r0, #8]
 8019dc0:	230b      	movs	r3, #11
 8019dc2:	8183      	strh	r3, [r0, #12]
 8019dc4:	2201      	movs	r2, #1
 8019dc6:	2300      	movs	r3, #0
 8019dc8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8019dcc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019dce:	480f      	ldr	r0, [pc, #60]	; (8019e0c <rand+0x78>)
 8019dd0:	690a      	ldr	r2, [r1, #16]
 8019dd2:	694b      	ldr	r3, [r1, #20]
 8019dd4:	4c0e      	ldr	r4, [pc, #56]	; (8019e10 <rand+0x7c>)
 8019dd6:	4350      	muls	r0, r2
 8019dd8:	fb04 0003 	mla	r0, r4, r3, r0
 8019ddc:	fba2 3404 	umull	r3, r4, r2, r4
 8019de0:	1c5a      	adds	r2, r3, #1
 8019de2:	4404      	add	r4, r0
 8019de4:	f144 0000 	adc.w	r0, r4, #0
 8019de8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8019dec:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8019df0:	bd10      	pop	{r4, pc}
 8019df2:	bf00      	nop
 8019df4:	2400003c 	.word	0x2400003c
 8019df8:	0801e29c 	.word	0x0801e29c
 8019dfc:	0801e2b3 	.word	0x0801e2b3
 8019e00:	abcd330e 	.word	0xabcd330e
 8019e04:	e66d1234 	.word	0xe66d1234
 8019e08:	0005deec 	.word	0x0005deec
 8019e0c:	5851f42d 	.word	0x5851f42d
 8019e10:	4c957f2d 	.word	0x4c957f2d

08019e14 <cleanup_glue>:
 8019e14:	b538      	push	{r3, r4, r5, lr}
 8019e16:	460c      	mov	r4, r1
 8019e18:	6809      	ldr	r1, [r1, #0]
 8019e1a:	4605      	mov	r5, r0
 8019e1c:	b109      	cbz	r1, 8019e22 <cleanup_glue+0xe>
 8019e1e:	f7ff fff9 	bl	8019e14 <cleanup_glue>
 8019e22:	4621      	mov	r1, r4
 8019e24:	4628      	mov	r0, r5
 8019e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019e2a:	f000 ba05 	b.w	801a238 <_free_r>
	...

08019e30 <_reclaim_reent>:
 8019e30:	4b2c      	ldr	r3, [pc, #176]	; (8019ee4 <_reclaim_reent+0xb4>)
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	4283      	cmp	r3, r0
 8019e36:	b570      	push	{r4, r5, r6, lr}
 8019e38:	4604      	mov	r4, r0
 8019e3a:	d051      	beq.n	8019ee0 <_reclaim_reent+0xb0>
 8019e3c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8019e3e:	b143      	cbz	r3, 8019e52 <_reclaim_reent+0x22>
 8019e40:	68db      	ldr	r3, [r3, #12]
 8019e42:	2b00      	cmp	r3, #0
 8019e44:	d14a      	bne.n	8019edc <_reclaim_reent+0xac>
 8019e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019e48:	6819      	ldr	r1, [r3, #0]
 8019e4a:	b111      	cbz	r1, 8019e52 <_reclaim_reent+0x22>
 8019e4c:	4620      	mov	r0, r4
 8019e4e:	f000 f9f3 	bl	801a238 <_free_r>
 8019e52:	6961      	ldr	r1, [r4, #20]
 8019e54:	b111      	cbz	r1, 8019e5c <_reclaim_reent+0x2c>
 8019e56:	4620      	mov	r0, r4
 8019e58:	f000 f9ee 	bl	801a238 <_free_r>
 8019e5c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8019e5e:	b111      	cbz	r1, 8019e66 <_reclaim_reent+0x36>
 8019e60:	4620      	mov	r0, r4
 8019e62:	f000 f9e9 	bl	801a238 <_free_r>
 8019e66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8019e68:	b111      	cbz	r1, 8019e70 <_reclaim_reent+0x40>
 8019e6a:	4620      	mov	r0, r4
 8019e6c:	f000 f9e4 	bl	801a238 <_free_r>
 8019e70:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8019e72:	b111      	cbz	r1, 8019e7a <_reclaim_reent+0x4a>
 8019e74:	4620      	mov	r0, r4
 8019e76:	f000 f9df 	bl	801a238 <_free_r>
 8019e7a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8019e7c:	b111      	cbz	r1, 8019e84 <_reclaim_reent+0x54>
 8019e7e:	4620      	mov	r0, r4
 8019e80:	f000 f9da 	bl	801a238 <_free_r>
 8019e84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8019e86:	b111      	cbz	r1, 8019e8e <_reclaim_reent+0x5e>
 8019e88:	4620      	mov	r0, r4
 8019e8a:	f000 f9d5 	bl	801a238 <_free_r>
 8019e8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8019e90:	b111      	cbz	r1, 8019e98 <_reclaim_reent+0x68>
 8019e92:	4620      	mov	r0, r4
 8019e94:	f000 f9d0 	bl	801a238 <_free_r>
 8019e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019e9a:	b111      	cbz	r1, 8019ea2 <_reclaim_reent+0x72>
 8019e9c:	4620      	mov	r0, r4
 8019e9e:	f000 f9cb 	bl	801a238 <_free_r>
 8019ea2:	69a3      	ldr	r3, [r4, #24]
 8019ea4:	b1e3      	cbz	r3, 8019ee0 <_reclaim_reent+0xb0>
 8019ea6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8019ea8:	4620      	mov	r0, r4
 8019eaa:	4798      	blx	r3
 8019eac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8019eae:	b1b9      	cbz	r1, 8019ee0 <_reclaim_reent+0xb0>
 8019eb0:	4620      	mov	r0, r4
 8019eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019eb6:	f7ff bfad 	b.w	8019e14 <cleanup_glue>
 8019eba:	5949      	ldr	r1, [r1, r5]
 8019ebc:	b941      	cbnz	r1, 8019ed0 <_reclaim_reent+0xa0>
 8019ebe:	3504      	adds	r5, #4
 8019ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019ec2:	2d80      	cmp	r5, #128	; 0x80
 8019ec4:	68d9      	ldr	r1, [r3, #12]
 8019ec6:	d1f8      	bne.n	8019eba <_reclaim_reent+0x8a>
 8019ec8:	4620      	mov	r0, r4
 8019eca:	f000 f9b5 	bl	801a238 <_free_r>
 8019ece:	e7ba      	b.n	8019e46 <_reclaim_reent+0x16>
 8019ed0:	680e      	ldr	r6, [r1, #0]
 8019ed2:	4620      	mov	r0, r4
 8019ed4:	f000 f9b0 	bl	801a238 <_free_r>
 8019ed8:	4631      	mov	r1, r6
 8019eda:	e7ef      	b.n	8019ebc <_reclaim_reent+0x8c>
 8019edc:	2500      	movs	r5, #0
 8019ede:	e7ef      	b.n	8019ec0 <_reclaim_reent+0x90>
 8019ee0:	bd70      	pop	{r4, r5, r6, pc}
 8019ee2:	bf00      	nop
 8019ee4:	2400003c 	.word	0x2400003c

08019ee8 <_sbrk_r>:
 8019ee8:	b538      	push	{r3, r4, r5, lr}
 8019eea:	4d06      	ldr	r5, [pc, #24]	; (8019f04 <_sbrk_r+0x1c>)
 8019eec:	2300      	movs	r3, #0
 8019eee:	4604      	mov	r4, r0
 8019ef0:	4608      	mov	r0, r1
 8019ef2:	602b      	str	r3, [r5, #0]
 8019ef4:	f7e7 ff12 	bl	8001d1c <_sbrk>
 8019ef8:	1c43      	adds	r3, r0, #1
 8019efa:	d102      	bne.n	8019f02 <_sbrk_r+0x1a>
 8019efc:	682b      	ldr	r3, [r5, #0]
 8019efe:	b103      	cbz	r3, 8019f02 <_sbrk_r+0x1a>
 8019f00:	6023      	str	r3, [r4, #0]
 8019f02:	bd38      	pop	{r3, r4, r5, pc}
 8019f04:	240078b8 	.word	0x240078b8

08019f08 <__sread>:
 8019f08:	b510      	push	{r4, lr}
 8019f0a:	460c      	mov	r4, r1
 8019f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f10:	f000 fcd0 	bl	801a8b4 <_read_r>
 8019f14:	2800      	cmp	r0, #0
 8019f16:	bfab      	itete	ge
 8019f18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019f1a:	89a3      	ldrhlt	r3, [r4, #12]
 8019f1c:	181b      	addge	r3, r3, r0
 8019f1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019f22:	bfac      	ite	ge
 8019f24:	6563      	strge	r3, [r4, #84]	; 0x54
 8019f26:	81a3      	strhlt	r3, [r4, #12]
 8019f28:	bd10      	pop	{r4, pc}

08019f2a <__swrite>:
 8019f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f2e:	461f      	mov	r7, r3
 8019f30:	898b      	ldrh	r3, [r1, #12]
 8019f32:	05db      	lsls	r3, r3, #23
 8019f34:	4605      	mov	r5, r0
 8019f36:	460c      	mov	r4, r1
 8019f38:	4616      	mov	r6, r2
 8019f3a:	d505      	bpl.n	8019f48 <__swrite+0x1e>
 8019f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f40:	2302      	movs	r3, #2
 8019f42:	2200      	movs	r2, #0
 8019f44:	f000 f952 	bl	801a1ec <_lseek_r>
 8019f48:	89a3      	ldrh	r3, [r4, #12]
 8019f4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019f4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8019f52:	81a3      	strh	r3, [r4, #12]
 8019f54:	4632      	mov	r2, r6
 8019f56:	463b      	mov	r3, r7
 8019f58:	4628      	mov	r0, r5
 8019f5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019f5e:	f000 b831 	b.w	8019fc4 <_write_r>

08019f62 <__sseek>:
 8019f62:	b510      	push	{r4, lr}
 8019f64:	460c      	mov	r4, r1
 8019f66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f6a:	f000 f93f 	bl	801a1ec <_lseek_r>
 8019f6e:	1c43      	adds	r3, r0, #1
 8019f70:	89a3      	ldrh	r3, [r4, #12]
 8019f72:	bf15      	itete	ne
 8019f74:	6560      	strne	r0, [r4, #84]	; 0x54
 8019f76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8019f7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8019f7e:	81a3      	strheq	r3, [r4, #12]
 8019f80:	bf18      	it	ne
 8019f82:	81a3      	strhne	r3, [r4, #12]
 8019f84:	bd10      	pop	{r4, pc}

08019f86 <__sclose>:
 8019f86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019f8a:	f000 b84b 	b.w	801a024 <_close_r>

08019f8e <strcpy>:
 8019f8e:	4603      	mov	r3, r0
 8019f90:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019f94:	f803 2b01 	strb.w	r2, [r3], #1
 8019f98:	2a00      	cmp	r2, #0
 8019f9a:	d1f9      	bne.n	8019f90 <strcpy+0x2>
 8019f9c:	4770      	bx	lr

08019f9e <strncpy>:
 8019f9e:	b510      	push	{r4, lr}
 8019fa0:	3901      	subs	r1, #1
 8019fa2:	4603      	mov	r3, r0
 8019fa4:	b132      	cbz	r2, 8019fb4 <strncpy+0x16>
 8019fa6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8019faa:	f803 4b01 	strb.w	r4, [r3], #1
 8019fae:	3a01      	subs	r2, #1
 8019fb0:	2c00      	cmp	r4, #0
 8019fb2:	d1f7      	bne.n	8019fa4 <strncpy+0x6>
 8019fb4:	441a      	add	r2, r3
 8019fb6:	2100      	movs	r1, #0
 8019fb8:	4293      	cmp	r3, r2
 8019fba:	d100      	bne.n	8019fbe <strncpy+0x20>
 8019fbc:	bd10      	pop	{r4, pc}
 8019fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8019fc2:	e7f9      	b.n	8019fb8 <strncpy+0x1a>

08019fc4 <_write_r>:
 8019fc4:	b538      	push	{r3, r4, r5, lr}
 8019fc6:	4d07      	ldr	r5, [pc, #28]	; (8019fe4 <_write_r+0x20>)
 8019fc8:	4604      	mov	r4, r0
 8019fca:	4608      	mov	r0, r1
 8019fcc:	4611      	mov	r1, r2
 8019fce:	2200      	movs	r2, #0
 8019fd0:	602a      	str	r2, [r5, #0]
 8019fd2:	461a      	mov	r2, r3
 8019fd4:	f7e7 fe51 	bl	8001c7a <_write>
 8019fd8:	1c43      	adds	r3, r0, #1
 8019fda:	d102      	bne.n	8019fe2 <_write_r+0x1e>
 8019fdc:	682b      	ldr	r3, [r5, #0]
 8019fde:	b103      	cbz	r3, 8019fe2 <_write_r+0x1e>
 8019fe0:	6023      	str	r3, [r4, #0]
 8019fe2:	bd38      	pop	{r3, r4, r5, pc}
 8019fe4:	240078b8 	.word	0x240078b8

08019fe8 <__assert_func>:
 8019fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019fea:	4614      	mov	r4, r2
 8019fec:	461a      	mov	r2, r3
 8019fee:	4b09      	ldr	r3, [pc, #36]	; (801a014 <__assert_func+0x2c>)
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	4605      	mov	r5, r0
 8019ff4:	68d8      	ldr	r0, [r3, #12]
 8019ff6:	b14c      	cbz	r4, 801a00c <__assert_func+0x24>
 8019ff8:	4b07      	ldr	r3, [pc, #28]	; (801a018 <__assert_func+0x30>)
 8019ffa:	9100      	str	r1, [sp, #0]
 8019ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a000:	4906      	ldr	r1, [pc, #24]	; (801a01c <__assert_func+0x34>)
 801a002:	462b      	mov	r3, r5
 801a004:	f000 f8e0 	bl	801a1c8 <fiprintf>
 801a008:	f000 fd26 	bl	801aa58 <abort>
 801a00c:	4b04      	ldr	r3, [pc, #16]	; (801a020 <__assert_func+0x38>)
 801a00e:	461c      	mov	r4, r3
 801a010:	e7f3      	b.n	8019ffa <__assert_func+0x12>
 801a012:	bf00      	nop
 801a014:	2400003c 	.word	0x2400003c
 801a018:	0801e312 	.word	0x0801e312
 801a01c:	0801e31f 	.word	0x0801e31f
 801a020:	0801e34d 	.word	0x0801e34d

0801a024 <_close_r>:
 801a024:	b538      	push	{r3, r4, r5, lr}
 801a026:	4d06      	ldr	r5, [pc, #24]	; (801a040 <_close_r+0x1c>)
 801a028:	2300      	movs	r3, #0
 801a02a:	4604      	mov	r4, r0
 801a02c:	4608      	mov	r0, r1
 801a02e:	602b      	str	r3, [r5, #0]
 801a030:	f7e7 fe3f 	bl	8001cb2 <_close>
 801a034:	1c43      	adds	r3, r0, #1
 801a036:	d102      	bne.n	801a03e <_close_r+0x1a>
 801a038:	682b      	ldr	r3, [r5, #0]
 801a03a:	b103      	cbz	r3, 801a03e <_close_r+0x1a>
 801a03c:	6023      	str	r3, [r4, #0]
 801a03e:	bd38      	pop	{r3, r4, r5, pc}
 801a040:	240078b8 	.word	0x240078b8

0801a044 <__sflush_r>:
 801a044:	898a      	ldrh	r2, [r1, #12]
 801a046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a04a:	4605      	mov	r5, r0
 801a04c:	0710      	lsls	r0, r2, #28
 801a04e:	460c      	mov	r4, r1
 801a050:	d458      	bmi.n	801a104 <__sflush_r+0xc0>
 801a052:	684b      	ldr	r3, [r1, #4]
 801a054:	2b00      	cmp	r3, #0
 801a056:	dc05      	bgt.n	801a064 <__sflush_r+0x20>
 801a058:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	dc02      	bgt.n	801a064 <__sflush_r+0x20>
 801a05e:	2000      	movs	r0, #0
 801a060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a064:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a066:	2e00      	cmp	r6, #0
 801a068:	d0f9      	beq.n	801a05e <__sflush_r+0x1a>
 801a06a:	2300      	movs	r3, #0
 801a06c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a070:	682f      	ldr	r7, [r5, #0]
 801a072:	602b      	str	r3, [r5, #0]
 801a074:	d032      	beq.n	801a0dc <__sflush_r+0x98>
 801a076:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a078:	89a3      	ldrh	r3, [r4, #12]
 801a07a:	075a      	lsls	r2, r3, #29
 801a07c:	d505      	bpl.n	801a08a <__sflush_r+0x46>
 801a07e:	6863      	ldr	r3, [r4, #4]
 801a080:	1ac0      	subs	r0, r0, r3
 801a082:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a084:	b10b      	cbz	r3, 801a08a <__sflush_r+0x46>
 801a086:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a088:	1ac0      	subs	r0, r0, r3
 801a08a:	2300      	movs	r3, #0
 801a08c:	4602      	mov	r2, r0
 801a08e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a090:	6a21      	ldr	r1, [r4, #32]
 801a092:	4628      	mov	r0, r5
 801a094:	47b0      	blx	r6
 801a096:	1c43      	adds	r3, r0, #1
 801a098:	89a3      	ldrh	r3, [r4, #12]
 801a09a:	d106      	bne.n	801a0aa <__sflush_r+0x66>
 801a09c:	6829      	ldr	r1, [r5, #0]
 801a09e:	291d      	cmp	r1, #29
 801a0a0:	d82c      	bhi.n	801a0fc <__sflush_r+0xb8>
 801a0a2:	4a2a      	ldr	r2, [pc, #168]	; (801a14c <__sflush_r+0x108>)
 801a0a4:	40ca      	lsrs	r2, r1
 801a0a6:	07d6      	lsls	r6, r2, #31
 801a0a8:	d528      	bpl.n	801a0fc <__sflush_r+0xb8>
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	6062      	str	r2, [r4, #4]
 801a0ae:	04d9      	lsls	r1, r3, #19
 801a0b0:	6922      	ldr	r2, [r4, #16]
 801a0b2:	6022      	str	r2, [r4, #0]
 801a0b4:	d504      	bpl.n	801a0c0 <__sflush_r+0x7c>
 801a0b6:	1c42      	adds	r2, r0, #1
 801a0b8:	d101      	bne.n	801a0be <__sflush_r+0x7a>
 801a0ba:	682b      	ldr	r3, [r5, #0]
 801a0bc:	b903      	cbnz	r3, 801a0c0 <__sflush_r+0x7c>
 801a0be:	6560      	str	r0, [r4, #84]	; 0x54
 801a0c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a0c2:	602f      	str	r7, [r5, #0]
 801a0c4:	2900      	cmp	r1, #0
 801a0c6:	d0ca      	beq.n	801a05e <__sflush_r+0x1a>
 801a0c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a0cc:	4299      	cmp	r1, r3
 801a0ce:	d002      	beq.n	801a0d6 <__sflush_r+0x92>
 801a0d0:	4628      	mov	r0, r5
 801a0d2:	f000 f8b1 	bl	801a238 <_free_r>
 801a0d6:	2000      	movs	r0, #0
 801a0d8:	6360      	str	r0, [r4, #52]	; 0x34
 801a0da:	e7c1      	b.n	801a060 <__sflush_r+0x1c>
 801a0dc:	6a21      	ldr	r1, [r4, #32]
 801a0de:	2301      	movs	r3, #1
 801a0e0:	4628      	mov	r0, r5
 801a0e2:	47b0      	blx	r6
 801a0e4:	1c41      	adds	r1, r0, #1
 801a0e6:	d1c7      	bne.n	801a078 <__sflush_r+0x34>
 801a0e8:	682b      	ldr	r3, [r5, #0]
 801a0ea:	2b00      	cmp	r3, #0
 801a0ec:	d0c4      	beq.n	801a078 <__sflush_r+0x34>
 801a0ee:	2b1d      	cmp	r3, #29
 801a0f0:	d001      	beq.n	801a0f6 <__sflush_r+0xb2>
 801a0f2:	2b16      	cmp	r3, #22
 801a0f4:	d101      	bne.n	801a0fa <__sflush_r+0xb6>
 801a0f6:	602f      	str	r7, [r5, #0]
 801a0f8:	e7b1      	b.n	801a05e <__sflush_r+0x1a>
 801a0fa:	89a3      	ldrh	r3, [r4, #12]
 801a0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a100:	81a3      	strh	r3, [r4, #12]
 801a102:	e7ad      	b.n	801a060 <__sflush_r+0x1c>
 801a104:	690f      	ldr	r7, [r1, #16]
 801a106:	2f00      	cmp	r7, #0
 801a108:	d0a9      	beq.n	801a05e <__sflush_r+0x1a>
 801a10a:	0793      	lsls	r3, r2, #30
 801a10c:	680e      	ldr	r6, [r1, #0]
 801a10e:	bf08      	it	eq
 801a110:	694b      	ldreq	r3, [r1, #20]
 801a112:	600f      	str	r7, [r1, #0]
 801a114:	bf18      	it	ne
 801a116:	2300      	movne	r3, #0
 801a118:	eba6 0807 	sub.w	r8, r6, r7
 801a11c:	608b      	str	r3, [r1, #8]
 801a11e:	f1b8 0f00 	cmp.w	r8, #0
 801a122:	dd9c      	ble.n	801a05e <__sflush_r+0x1a>
 801a124:	6a21      	ldr	r1, [r4, #32]
 801a126:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a128:	4643      	mov	r3, r8
 801a12a:	463a      	mov	r2, r7
 801a12c:	4628      	mov	r0, r5
 801a12e:	47b0      	blx	r6
 801a130:	2800      	cmp	r0, #0
 801a132:	dc06      	bgt.n	801a142 <__sflush_r+0xfe>
 801a134:	89a3      	ldrh	r3, [r4, #12]
 801a136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a13a:	81a3      	strh	r3, [r4, #12]
 801a13c:	f04f 30ff 	mov.w	r0, #4294967295
 801a140:	e78e      	b.n	801a060 <__sflush_r+0x1c>
 801a142:	4407      	add	r7, r0
 801a144:	eba8 0800 	sub.w	r8, r8, r0
 801a148:	e7e9      	b.n	801a11e <__sflush_r+0xda>
 801a14a:	bf00      	nop
 801a14c:	20400001 	.word	0x20400001

0801a150 <_fflush_r>:
 801a150:	b538      	push	{r3, r4, r5, lr}
 801a152:	690b      	ldr	r3, [r1, #16]
 801a154:	4605      	mov	r5, r0
 801a156:	460c      	mov	r4, r1
 801a158:	b913      	cbnz	r3, 801a160 <_fflush_r+0x10>
 801a15a:	2500      	movs	r5, #0
 801a15c:	4628      	mov	r0, r5
 801a15e:	bd38      	pop	{r3, r4, r5, pc}
 801a160:	b118      	cbz	r0, 801a16a <_fflush_r+0x1a>
 801a162:	6983      	ldr	r3, [r0, #24]
 801a164:	b90b      	cbnz	r3, 801a16a <_fflush_r+0x1a>
 801a166:	f7ff fcb9 	bl	8019adc <__sinit>
 801a16a:	4b14      	ldr	r3, [pc, #80]	; (801a1bc <_fflush_r+0x6c>)
 801a16c:	429c      	cmp	r4, r3
 801a16e:	d11b      	bne.n	801a1a8 <_fflush_r+0x58>
 801a170:	686c      	ldr	r4, [r5, #4]
 801a172:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d0ef      	beq.n	801a15a <_fflush_r+0xa>
 801a17a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a17c:	07d0      	lsls	r0, r2, #31
 801a17e:	d404      	bmi.n	801a18a <_fflush_r+0x3a>
 801a180:	0599      	lsls	r1, r3, #22
 801a182:	d402      	bmi.n	801a18a <_fflush_r+0x3a>
 801a184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a186:	f7ff fd6c 	bl	8019c62 <__retarget_lock_acquire_recursive>
 801a18a:	4628      	mov	r0, r5
 801a18c:	4621      	mov	r1, r4
 801a18e:	f7ff ff59 	bl	801a044 <__sflush_r>
 801a192:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a194:	07da      	lsls	r2, r3, #31
 801a196:	4605      	mov	r5, r0
 801a198:	d4e0      	bmi.n	801a15c <_fflush_r+0xc>
 801a19a:	89a3      	ldrh	r3, [r4, #12]
 801a19c:	059b      	lsls	r3, r3, #22
 801a19e:	d4dd      	bmi.n	801a15c <_fflush_r+0xc>
 801a1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a1a2:	f7ff fd5f 	bl	8019c64 <__retarget_lock_release_recursive>
 801a1a6:	e7d9      	b.n	801a15c <_fflush_r+0xc>
 801a1a8:	4b05      	ldr	r3, [pc, #20]	; (801a1c0 <_fflush_r+0x70>)
 801a1aa:	429c      	cmp	r4, r3
 801a1ac:	d101      	bne.n	801a1b2 <_fflush_r+0x62>
 801a1ae:	68ac      	ldr	r4, [r5, #8]
 801a1b0:	e7df      	b.n	801a172 <_fflush_r+0x22>
 801a1b2:	4b04      	ldr	r3, [pc, #16]	; (801a1c4 <_fflush_r+0x74>)
 801a1b4:	429c      	cmp	r4, r3
 801a1b6:	bf08      	it	eq
 801a1b8:	68ec      	ldreq	r4, [r5, #12]
 801a1ba:	e7da      	b.n	801a172 <_fflush_r+0x22>
 801a1bc:	0801e258 	.word	0x0801e258
 801a1c0:	0801e278 	.word	0x0801e278
 801a1c4:	0801e238 	.word	0x0801e238

0801a1c8 <fiprintf>:
 801a1c8:	b40e      	push	{r1, r2, r3}
 801a1ca:	b503      	push	{r0, r1, lr}
 801a1cc:	4601      	mov	r1, r0
 801a1ce:	ab03      	add	r3, sp, #12
 801a1d0:	4805      	ldr	r0, [pc, #20]	; (801a1e8 <fiprintf+0x20>)
 801a1d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801a1d6:	6800      	ldr	r0, [r0, #0]
 801a1d8:	9301      	str	r3, [sp, #4]
 801a1da:	f000 f8a7 	bl	801a32c <_vfiprintf_r>
 801a1de:	b002      	add	sp, #8
 801a1e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801a1e4:	b003      	add	sp, #12
 801a1e6:	4770      	bx	lr
 801a1e8:	2400003c 	.word	0x2400003c

0801a1ec <_lseek_r>:
 801a1ec:	b538      	push	{r3, r4, r5, lr}
 801a1ee:	4d07      	ldr	r5, [pc, #28]	; (801a20c <_lseek_r+0x20>)
 801a1f0:	4604      	mov	r4, r0
 801a1f2:	4608      	mov	r0, r1
 801a1f4:	4611      	mov	r1, r2
 801a1f6:	2200      	movs	r2, #0
 801a1f8:	602a      	str	r2, [r5, #0]
 801a1fa:	461a      	mov	r2, r3
 801a1fc:	f7e7 fd80 	bl	8001d00 <_lseek>
 801a200:	1c43      	adds	r3, r0, #1
 801a202:	d102      	bne.n	801a20a <_lseek_r+0x1e>
 801a204:	682b      	ldr	r3, [r5, #0]
 801a206:	b103      	cbz	r3, 801a20a <_lseek_r+0x1e>
 801a208:	6023      	str	r3, [r4, #0]
 801a20a:	bd38      	pop	{r3, r4, r5, pc}
 801a20c:	240078b8 	.word	0x240078b8

0801a210 <malloc>:
 801a210:	4b02      	ldr	r3, [pc, #8]	; (801a21c <malloc+0xc>)
 801a212:	4601      	mov	r1, r0
 801a214:	6818      	ldr	r0, [r3, #0]
 801a216:	f7ff bd4b 	b.w	8019cb0 <_malloc_r>
 801a21a:	bf00      	nop
 801a21c:	2400003c 	.word	0x2400003c

0801a220 <__malloc_lock>:
 801a220:	4801      	ldr	r0, [pc, #4]	; (801a228 <__malloc_lock+0x8>)
 801a222:	f7ff bd1e 	b.w	8019c62 <__retarget_lock_acquire_recursive>
 801a226:	bf00      	nop
 801a228:	240078c4 	.word	0x240078c4

0801a22c <__malloc_unlock>:
 801a22c:	4801      	ldr	r0, [pc, #4]	; (801a234 <__malloc_unlock+0x8>)
 801a22e:	f7ff bd19 	b.w	8019c64 <__retarget_lock_release_recursive>
 801a232:	bf00      	nop
 801a234:	240078c4 	.word	0x240078c4

0801a238 <_free_r>:
 801a238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a23a:	2900      	cmp	r1, #0
 801a23c:	d048      	beq.n	801a2d0 <_free_r+0x98>
 801a23e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a242:	9001      	str	r0, [sp, #4]
 801a244:	2b00      	cmp	r3, #0
 801a246:	f1a1 0404 	sub.w	r4, r1, #4
 801a24a:	bfb8      	it	lt
 801a24c:	18e4      	addlt	r4, r4, r3
 801a24e:	f7ff ffe7 	bl	801a220 <__malloc_lock>
 801a252:	4a20      	ldr	r2, [pc, #128]	; (801a2d4 <_free_r+0x9c>)
 801a254:	9801      	ldr	r0, [sp, #4]
 801a256:	6813      	ldr	r3, [r2, #0]
 801a258:	4615      	mov	r5, r2
 801a25a:	b933      	cbnz	r3, 801a26a <_free_r+0x32>
 801a25c:	6063      	str	r3, [r4, #4]
 801a25e:	6014      	str	r4, [r2, #0]
 801a260:	b003      	add	sp, #12
 801a262:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a266:	f7ff bfe1 	b.w	801a22c <__malloc_unlock>
 801a26a:	42a3      	cmp	r3, r4
 801a26c:	d90b      	bls.n	801a286 <_free_r+0x4e>
 801a26e:	6821      	ldr	r1, [r4, #0]
 801a270:	1862      	adds	r2, r4, r1
 801a272:	4293      	cmp	r3, r2
 801a274:	bf04      	itt	eq
 801a276:	681a      	ldreq	r2, [r3, #0]
 801a278:	685b      	ldreq	r3, [r3, #4]
 801a27a:	6063      	str	r3, [r4, #4]
 801a27c:	bf04      	itt	eq
 801a27e:	1852      	addeq	r2, r2, r1
 801a280:	6022      	streq	r2, [r4, #0]
 801a282:	602c      	str	r4, [r5, #0]
 801a284:	e7ec      	b.n	801a260 <_free_r+0x28>
 801a286:	461a      	mov	r2, r3
 801a288:	685b      	ldr	r3, [r3, #4]
 801a28a:	b10b      	cbz	r3, 801a290 <_free_r+0x58>
 801a28c:	42a3      	cmp	r3, r4
 801a28e:	d9fa      	bls.n	801a286 <_free_r+0x4e>
 801a290:	6811      	ldr	r1, [r2, #0]
 801a292:	1855      	adds	r5, r2, r1
 801a294:	42a5      	cmp	r5, r4
 801a296:	d10b      	bne.n	801a2b0 <_free_r+0x78>
 801a298:	6824      	ldr	r4, [r4, #0]
 801a29a:	4421      	add	r1, r4
 801a29c:	1854      	adds	r4, r2, r1
 801a29e:	42a3      	cmp	r3, r4
 801a2a0:	6011      	str	r1, [r2, #0]
 801a2a2:	d1dd      	bne.n	801a260 <_free_r+0x28>
 801a2a4:	681c      	ldr	r4, [r3, #0]
 801a2a6:	685b      	ldr	r3, [r3, #4]
 801a2a8:	6053      	str	r3, [r2, #4]
 801a2aa:	4421      	add	r1, r4
 801a2ac:	6011      	str	r1, [r2, #0]
 801a2ae:	e7d7      	b.n	801a260 <_free_r+0x28>
 801a2b0:	d902      	bls.n	801a2b8 <_free_r+0x80>
 801a2b2:	230c      	movs	r3, #12
 801a2b4:	6003      	str	r3, [r0, #0]
 801a2b6:	e7d3      	b.n	801a260 <_free_r+0x28>
 801a2b8:	6825      	ldr	r5, [r4, #0]
 801a2ba:	1961      	adds	r1, r4, r5
 801a2bc:	428b      	cmp	r3, r1
 801a2be:	bf04      	itt	eq
 801a2c0:	6819      	ldreq	r1, [r3, #0]
 801a2c2:	685b      	ldreq	r3, [r3, #4]
 801a2c4:	6063      	str	r3, [r4, #4]
 801a2c6:	bf04      	itt	eq
 801a2c8:	1949      	addeq	r1, r1, r5
 801a2ca:	6021      	streq	r1, [r4, #0]
 801a2cc:	6054      	str	r4, [r2, #4]
 801a2ce:	e7c7      	b.n	801a260 <_free_r+0x28>
 801a2d0:	b003      	add	sp, #12
 801a2d2:	bd30      	pop	{r4, r5, pc}
 801a2d4:	24004284 	.word	0x24004284

0801a2d8 <__sfputc_r>:
 801a2d8:	6893      	ldr	r3, [r2, #8]
 801a2da:	3b01      	subs	r3, #1
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	b410      	push	{r4}
 801a2e0:	6093      	str	r3, [r2, #8]
 801a2e2:	da08      	bge.n	801a2f6 <__sfputc_r+0x1e>
 801a2e4:	6994      	ldr	r4, [r2, #24]
 801a2e6:	42a3      	cmp	r3, r4
 801a2e8:	db01      	blt.n	801a2ee <__sfputc_r+0x16>
 801a2ea:	290a      	cmp	r1, #10
 801a2ec:	d103      	bne.n	801a2f6 <__sfputc_r+0x1e>
 801a2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a2f2:	f000 baf1 	b.w	801a8d8 <__swbuf_r>
 801a2f6:	6813      	ldr	r3, [r2, #0]
 801a2f8:	1c58      	adds	r0, r3, #1
 801a2fa:	6010      	str	r0, [r2, #0]
 801a2fc:	7019      	strb	r1, [r3, #0]
 801a2fe:	4608      	mov	r0, r1
 801a300:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a304:	4770      	bx	lr

0801a306 <__sfputs_r>:
 801a306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a308:	4606      	mov	r6, r0
 801a30a:	460f      	mov	r7, r1
 801a30c:	4614      	mov	r4, r2
 801a30e:	18d5      	adds	r5, r2, r3
 801a310:	42ac      	cmp	r4, r5
 801a312:	d101      	bne.n	801a318 <__sfputs_r+0x12>
 801a314:	2000      	movs	r0, #0
 801a316:	e007      	b.n	801a328 <__sfputs_r+0x22>
 801a318:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a31c:	463a      	mov	r2, r7
 801a31e:	4630      	mov	r0, r6
 801a320:	f7ff ffda 	bl	801a2d8 <__sfputc_r>
 801a324:	1c43      	adds	r3, r0, #1
 801a326:	d1f3      	bne.n	801a310 <__sfputs_r+0xa>
 801a328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a32c <_vfiprintf_r>:
 801a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a330:	460d      	mov	r5, r1
 801a332:	b09d      	sub	sp, #116	; 0x74
 801a334:	4614      	mov	r4, r2
 801a336:	4698      	mov	r8, r3
 801a338:	4606      	mov	r6, r0
 801a33a:	b118      	cbz	r0, 801a344 <_vfiprintf_r+0x18>
 801a33c:	6983      	ldr	r3, [r0, #24]
 801a33e:	b90b      	cbnz	r3, 801a344 <_vfiprintf_r+0x18>
 801a340:	f7ff fbcc 	bl	8019adc <__sinit>
 801a344:	4b89      	ldr	r3, [pc, #548]	; (801a56c <_vfiprintf_r+0x240>)
 801a346:	429d      	cmp	r5, r3
 801a348:	d11b      	bne.n	801a382 <_vfiprintf_r+0x56>
 801a34a:	6875      	ldr	r5, [r6, #4]
 801a34c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a34e:	07d9      	lsls	r1, r3, #31
 801a350:	d405      	bmi.n	801a35e <_vfiprintf_r+0x32>
 801a352:	89ab      	ldrh	r3, [r5, #12]
 801a354:	059a      	lsls	r2, r3, #22
 801a356:	d402      	bmi.n	801a35e <_vfiprintf_r+0x32>
 801a358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a35a:	f7ff fc82 	bl	8019c62 <__retarget_lock_acquire_recursive>
 801a35e:	89ab      	ldrh	r3, [r5, #12]
 801a360:	071b      	lsls	r3, r3, #28
 801a362:	d501      	bpl.n	801a368 <_vfiprintf_r+0x3c>
 801a364:	692b      	ldr	r3, [r5, #16]
 801a366:	b9eb      	cbnz	r3, 801a3a4 <_vfiprintf_r+0x78>
 801a368:	4629      	mov	r1, r5
 801a36a:	4630      	mov	r0, r6
 801a36c:	f000 fb06 	bl	801a97c <__swsetup_r>
 801a370:	b1c0      	cbz	r0, 801a3a4 <_vfiprintf_r+0x78>
 801a372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a374:	07dc      	lsls	r4, r3, #31
 801a376:	d50e      	bpl.n	801a396 <_vfiprintf_r+0x6a>
 801a378:	f04f 30ff 	mov.w	r0, #4294967295
 801a37c:	b01d      	add	sp, #116	; 0x74
 801a37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a382:	4b7b      	ldr	r3, [pc, #492]	; (801a570 <_vfiprintf_r+0x244>)
 801a384:	429d      	cmp	r5, r3
 801a386:	d101      	bne.n	801a38c <_vfiprintf_r+0x60>
 801a388:	68b5      	ldr	r5, [r6, #8]
 801a38a:	e7df      	b.n	801a34c <_vfiprintf_r+0x20>
 801a38c:	4b79      	ldr	r3, [pc, #484]	; (801a574 <_vfiprintf_r+0x248>)
 801a38e:	429d      	cmp	r5, r3
 801a390:	bf08      	it	eq
 801a392:	68f5      	ldreq	r5, [r6, #12]
 801a394:	e7da      	b.n	801a34c <_vfiprintf_r+0x20>
 801a396:	89ab      	ldrh	r3, [r5, #12]
 801a398:	0598      	lsls	r0, r3, #22
 801a39a:	d4ed      	bmi.n	801a378 <_vfiprintf_r+0x4c>
 801a39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a39e:	f7ff fc61 	bl	8019c64 <__retarget_lock_release_recursive>
 801a3a2:	e7e9      	b.n	801a378 <_vfiprintf_r+0x4c>
 801a3a4:	2300      	movs	r3, #0
 801a3a6:	9309      	str	r3, [sp, #36]	; 0x24
 801a3a8:	2320      	movs	r3, #32
 801a3aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 801a3b2:	2330      	movs	r3, #48	; 0x30
 801a3b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a578 <_vfiprintf_r+0x24c>
 801a3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a3bc:	f04f 0901 	mov.w	r9, #1
 801a3c0:	4623      	mov	r3, r4
 801a3c2:	469a      	mov	sl, r3
 801a3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a3c8:	b10a      	cbz	r2, 801a3ce <_vfiprintf_r+0xa2>
 801a3ca:	2a25      	cmp	r2, #37	; 0x25
 801a3cc:	d1f9      	bne.n	801a3c2 <_vfiprintf_r+0x96>
 801a3ce:	ebba 0b04 	subs.w	fp, sl, r4
 801a3d2:	d00b      	beq.n	801a3ec <_vfiprintf_r+0xc0>
 801a3d4:	465b      	mov	r3, fp
 801a3d6:	4622      	mov	r2, r4
 801a3d8:	4629      	mov	r1, r5
 801a3da:	4630      	mov	r0, r6
 801a3dc:	f7ff ff93 	bl	801a306 <__sfputs_r>
 801a3e0:	3001      	adds	r0, #1
 801a3e2:	f000 80aa 	beq.w	801a53a <_vfiprintf_r+0x20e>
 801a3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3e8:	445a      	add	r2, fp
 801a3ea:	9209      	str	r2, [sp, #36]	; 0x24
 801a3ec:	f89a 3000 	ldrb.w	r3, [sl]
 801a3f0:	2b00      	cmp	r3, #0
 801a3f2:	f000 80a2 	beq.w	801a53a <_vfiprintf_r+0x20e>
 801a3f6:	2300      	movs	r3, #0
 801a3f8:	f04f 32ff 	mov.w	r2, #4294967295
 801a3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a400:	f10a 0a01 	add.w	sl, sl, #1
 801a404:	9304      	str	r3, [sp, #16]
 801a406:	9307      	str	r3, [sp, #28]
 801a408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a40c:	931a      	str	r3, [sp, #104]	; 0x68
 801a40e:	4654      	mov	r4, sl
 801a410:	2205      	movs	r2, #5
 801a412:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a416:	4858      	ldr	r0, [pc, #352]	; (801a578 <_vfiprintf_r+0x24c>)
 801a418:	f7e5 ff82 	bl	8000320 <memchr>
 801a41c:	9a04      	ldr	r2, [sp, #16]
 801a41e:	b9d8      	cbnz	r0, 801a458 <_vfiprintf_r+0x12c>
 801a420:	06d1      	lsls	r1, r2, #27
 801a422:	bf44      	itt	mi
 801a424:	2320      	movmi	r3, #32
 801a426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a42a:	0713      	lsls	r3, r2, #28
 801a42c:	bf44      	itt	mi
 801a42e:	232b      	movmi	r3, #43	; 0x2b
 801a430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a434:	f89a 3000 	ldrb.w	r3, [sl]
 801a438:	2b2a      	cmp	r3, #42	; 0x2a
 801a43a:	d015      	beq.n	801a468 <_vfiprintf_r+0x13c>
 801a43c:	9a07      	ldr	r2, [sp, #28]
 801a43e:	4654      	mov	r4, sl
 801a440:	2000      	movs	r0, #0
 801a442:	f04f 0c0a 	mov.w	ip, #10
 801a446:	4621      	mov	r1, r4
 801a448:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a44c:	3b30      	subs	r3, #48	; 0x30
 801a44e:	2b09      	cmp	r3, #9
 801a450:	d94e      	bls.n	801a4f0 <_vfiprintf_r+0x1c4>
 801a452:	b1b0      	cbz	r0, 801a482 <_vfiprintf_r+0x156>
 801a454:	9207      	str	r2, [sp, #28]
 801a456:	e014      	b.n	801a482 <_vfiprintf_r+0x156>
 801a458:	eba0 0308 	sub.w	r3, r0, r8
 801a45c:	fa09 f303 	lsl.w	r3, r9, r3
 801a460:	4313      	orrs	r3, r2
 801a462:	9304      	str	r3, [sp, #16]
 801a464:	46a2      	mov	sl, r4
 801a466:	e7d2      	b.n	801a40e <_vfiprintf_r+0xe2>
 801a468:	9b03      	ldr	r3, [sp, #12]
 801a46a:	1d19      	adds	r1, r3, #4
 801a46c:	681b      	ldr	r3, [r3, #0]
 801a46e:	9103      	str	r1, [sp, #12]
 801a470:	2b00      	cmp	r3, #0
 801a472:	bfbb      	ittet	lt
 801a474:	425b      	neglt	r3, r3
 801a476:	f042 0202 	orrlt.w	r2, r2, #2
 801a47a:	9307      	strge	r3, [sp, #28]
 801a47c:	9307      	strlt	r3, [sp, #28]
 801a47e:	bfb8      	it	lt
 801a480:	9204      	strlt	r2, [sp, #16]
 801a482:	7823      	ldrb	r3, [r4, #0]
 801a484:	2b2e      	cmp	r3, #46	; 0x2e
 801a486:	d10c      	bne.n	801a4a2 <_vfiprintf_r+0x176>
 801a488:	7863      	ldrb	r3, [r4, #1]
 801a48a:	2b2a      	cmp	r3, #42	; 0x2a
 801a48c:	d135      	bne.n	801a4fa <_vfiprintf_r+0x1ce>
 801a48e:	9b03      	ldr	r3, [sp, #12]
 801a490:	1d1a      	adds	r2, r3, #4
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	9203      	str	r2, [sp, #12]
 801a496:	2b00      	cmp	r3, #0
 801a498:	bfb8      	it	lt
 801a49a:	f04f 33ff 	movlt.w	r3, #4294967295
 801a49e:	3402      	adds	r4, #2
 801a4a0:	9305      	str	r3, [sp, #20]
 801a4a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a588 <_vfiprintf_r+0x25c>
 801a4a6:	7821      	ldrb	r1, [r4, #0]
 801a4a8:	2203      	movs	r2, #3
 801a4aa:	4650      	mov	r0, sl
 801a4ac:	f7e5 ff38 	bl	8000320 <memchr>
 801a4b0:	b140      	cbz	r0, 801a4c4 <_vfiprintf_r+0x198>
 801a4b2:	2340      	movs	r3, #64	; 0x40
 801a4b4:	eba0 000a 	sub.w	r0, r0, sl
 801a4b8:	fa03 f000 	lsl.w	r0, r3, r0
 801a4bc:	9b04      	ldr	r3, [sp, #16]
 801a4be:	4303      	orrs	r3, r0
 801a4c0:	3401      	adds	r4, #1
 801a4c2:	9304      	str	r3, [sp, #16]
 801a4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4c8:	482c      	ldr	r0, [pc, #176]	; (801a57c <_vfiprintf_r+0x250>)
 801a4ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a4ce:	2206      	movs	r2, #6
 801a4d0:	f7e5 ff26 	bl	8000320 <memchr>
 801a4d4:	2800      	cmp	r0, #0
 801a4d6:	d03f      	beq.n	801a558 <_vfiprintf_r+0x22c>
 801a4d8:	4b29      	ldr	r3, [pc, #164]	; (801a580 <_vfiprintf_r+0x254>)
 801a4da:	bb1b      	cbnz	r3, 801a524 <_vfiprintf_r+0x1f8>
 801a4dc:	9b03      	ldr	r3, [sp, #12]
 801a4de:	3307      	adds	r3, #7
 801a4e0:	f023 0307 	bic.w	r3, r3, #7
 801a4e4:	3308      	adds	r3, #8
 801a4e6:	9303      	str	r3, [sp, #12]
 801a4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4ea:	443b      	add	r3, r7
 801a4ec:	9309      	str	r3, [sp, #36]	; 0x24
 801a4ee:	e767      	b.n	801a3c0 <_vfiprintf_r+0x94>
 801a4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4f4:	460c      	mov	r4, r1
 801a4f6:	2001      	movs	r0, #1
 801a4f8:	e7a5      	b.n	801a446 <_vfiprintf_r+0x11a>
 801a4fa:	2300      	movs	r3, #0
 801a4fc:	3401      	adds	r4, #1
 801a4fe:	9305      	str	r3, [sp, #20]
 801a500:	4619      	mov	r1, r3
 801a502:	f04f 0c0a 	mov.w	ip, #10
 801a506:	4620      	mov	r0, r4
 801a508:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a50c:	3a30      	subs	r2, #48	; 0x30
 801a50e:	2a09      	cmp	r2, #9
 801a510:	d903      	bls.n	801a51a <_vfiprintf_r+0x1ee>
 801a512:	2b00      	cmp	r3, #0
 801a514:	d0c5      	beq.n	801a4a2 <_vfiprintf_r+0x176>
 801a516:	9105      	str	r1, [sp, #20]
 801a518:	e7c3      	b.n	801a4a2 <_vfiprintf_r+0x176>
 801a51a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a51e:	4604      	mov	r4, r0
 801a520:	2301      	movs	r3, #1
 801a522:	e7f0      	b.n	801a506 <_vfiprintf_r+0x1da>
 801a524:	ab03      	add	r3, sp, #12
 801a526:	9300      	str	r3, [sp, #0]
 801a528:	462a      	mov	r2, r5
 801a52a:	4b16      	ldr	r3, [pc, #88]	; (801a584 <_vfiprintf_r+0x258>)
 801a52c:	a904      	add	r1, sp, #16
 801a52e:	4630      	mov	r0, r6
 801a530:	f3af 8000 	nop.w
 801a534:	4607      	mov	r7, r0
 801a536:	1c78      	adds	r0, r7, #1
 801a538:	d1d6      	bne.n	801a4e8 <_vfiprintf_r+0x1bc>
 801a53a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a53c:	07d9      	lsls	r1, r3, #31
 801a53e:	d405      	bmi.n	801a54c <_vfiprintf_r+0x220>
 801a540:	89ab      	ldrh	r3, [r5, #12]
 801a542:	059a      	lsls	r2, r3, #22
 801a544:	d402      	bmi.n	801a54c <_vfiprintf_r+0x220>
 801a546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a548:	f7ff fb8c 	bl	8019c64 <__retarget_lock_release_recursive>
 801a54c:	89ab      	ldrh	r3, [r5, #12]
 801a54e:	065b      	lsls	r3, r3, #25
 801a550:	f53f af12 	bmi.w	801a378 <_vfiprintf_r+0x4c>
 801a554:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a556:	e711      	b.n	801a37c <_vfiprintf_r+0x50>
 801a558:	ab03      	add	r3, sp, #12
 801a55a:	9300      	str	r3, [sp, #0]
 801a55c:	462a      	mov	r2, r5
 801a55e:	4b09      	ldr	r3, [pc, #36]	; (801a584 <_vfiprintf_r+0x258>)
 801a560:	a904      	add	r1, sp, #16
 801a562:	4630      	mov	r0, r6
 801a564:	f000 f880 	bl	801a668 <_printf_i>
 801a568:	e7e4      	b.n	801a534 <_vfiprintf_r+0x208>
 801a56a:	bf00      	nop
 801a56c:	0801e258 	.word	0x0801e258
 801a570:	0801e278 	.word	0x0801e278
 801a574:	0801e238 	.word	0x0801e238
 801a578:	0801e34e 	.word	0x0801e34e
 801a57c:	0801e358 	.word	0x0801e358
 801a580:	00000000 	.word	0x00000000
 801a584:	0801a307 	.word	0x0801a307
 801a588:	0801e354 	.word	0x0801e354

0801a58c <_printf_common>:
 801a58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a590:	4616      	mov	r6, r2
 801a592:	4699      	mov	r9, r3
 801a594:	688a      	ldr	r2, [r1, #8]
 801a596:	690b      	ldr	r3, [r1, #16]
 801a598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a59c:	4293      	cmp	r3, r2
 801a59e:	bfb8      	it	lt
 801a5a0:	4613      	movlt	r3, r2
 801a5a2:	6033      	str	r3, [r6, #0]
 801a5a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a5a8:	4607      	mov	r7, r0
 801a5aa:	460c      	mov	r4, r1
 801a5ac:	b10a      	cbz	r2, 801a5b2 <_printf_common+0x26>
 801a5ae:	3301      	adds	r3, #1
 801a5b0:	6033      	str	r3, [r6, #0]
 801a5b2:	6823      	ldr	r3, [r4, #0]
 801a5b4:	0699      	lsls	r1, r3, #26
 801a5b6:	bf42      	ittt	mi
 801a5b8:	6833      	ldrmi	r3, [r6, #0]
 801a5ba:	3302      	addmi	r3, #2
 801a5bc:	6033      	strmi	r3, [r6, #0]
 801a5be:	6825      	ldr	r5, [r4, #0]
 801a5c0:	f015 0506 	ands.w	r5, r5, #6
 801a5c4:	d106      	bne.n	801a5d4 <_printf_common+0x48>
 801a5c6:	f104 0a19 	add.w	sl, r4, #25
 801a5ca:	68e3      	ldr	r3, [r4, #12]
 801a5cc:	6832      	ldr	r2, [r6, #0]
 801a5ce:	1a9b      	subs	r3, r3, r2
 801a5d0:	42ab      	cmp	r3, r5
 801a5d2:	dc26      	bgt.n	801a622 <_printf_common+0x96>
 801a5d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801a5d8:	1e13      	subs	r3, r2, #0
 801a5da:	6822      	ldr	r2, [r4, #0]
 801a5dc:	bf18      	it	ne
 801a5de:	2301      	movne	r3, #1
 801a5e0:	0692      	lsls	r2, r2, #26
 801a5e2:	d42b      	bmi.n	801a63c <_printf_common+0xb0>
 801a5e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a5e8:	4649      	mov	r1, r9
 801a5ea:	4638      	mov	r0, r7
 801a5ec:	47c0      	blx	r8
 801a5ee:	3001      	adds	r0, #1
 801a5f0:	d01e      	beq.n	801a630 <_printf_common+0xa4>
 801a5f2:	6823      	ldr	r3, [r4, #0]
 801a5f4:	68e5      	ldr	r5, [r4, #12]
 801a5f6:	6832      	ldr	r2, [r6, #0]
 801a5f8:	f003 0306 	and.w	r3, r3, #6
 801a5fc:	2b04      	cmp	r3, #4
 801a5fe:	bf08      	it	eq
 801a600:	1aad      	subeq	r5, r5, r2
 801a602:	68a3      	ldr	r3, [r4, #8]
 801a604:	6922      	ldr	r2, [r4, #16]
 801a606:	bf0c      	ite	eq
 801a608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a60c:	2500      	movne	r5, #0
 801a60e:	4293      	cmp	r3, r2
 801a610:	bfc4      	itt	gt
 801a612:	1a9b      	subgt	r3, r3, r2
 801a614:	18ed      	addgt	r5, r5, r3
 801a616:	2600      	movs	r6, #0
 801a618:	341a      	adds	r4, #26
 801a61a:	42b5      	cmp	r5, r6
 801a61c:	d11a      	bne.n	801a654 <_printf_common+0xc8>
 801a61e:	2000      	movs	r0, #0
 801a620:	e008      	b.n	801a634 <_printf_common+0xa8>
 801a622:	2301      	movs	r3, #1
 801a624:	4652      	mov	r2, sl
 801a626:	4649      	mov	r1, r9
 801a628:	4638      	mov	r0, r7
 801a62a:	47c0      	blx	r8
 801a62c:	3001      	adds	r0, #1
 801a62e:	d103      	bne.n	801a638 <_printf_common+0xac>
 801a630:	f04f 30ff 	mov.w	r0, #4294967295
 801a634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a638:	3501      	adds	r5, #1
 801a63a:	e7c6      	b.n	801a5ca <_printf_common+0x3e>
 801a63c:	18e1      	adds	r1, r4, r3
 801a63e:	1c5a      	adds	r2, r3, #1
 801a640:	2030      	movs	r0, #48	; 0x30
 801a642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a646:	4422      	add	r2, r4
 801a648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a64c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a650:	3302      	adds	r3, #2
 801a652:	e7c7      	b.n	801a5e4 <_printf_common+0x58>
 801a654:	2301      	movs	r3, #1
 801a656:	4622      	mov	r2, r4
 801a658:	4649      	mov	r1, r9
 801a65a:	4638      	mov	r0, r7
 801a65c:	47c0      	blx	r8
 801a65e:	3001      	adds	r0, #1
 801a660:	d0e6      	beq.n	801a630 <_printf_common+0xa4>
 801a662:	3601      	adds	r6, #1
 801a664:	e7d9      	b.n	801a61a <_printf_common+0x8e>
	...

0801a668 <_printf_i>:
 801a668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a66c:	460c      	mov	r4, r1
 801a66e:	4691      	mov	r9, r2
 801a670:	7e27      	ldrb	r7, [r4, #24]
 801a672:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a674:	2f78      	cmp	r7, #120	; 0x78
 801a676:	4680      	mov	r8, r0
 801a678:	469a      	mov	sl, r3
 801a67a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a67e:	d807      	bhi.n	801a690 <_printf_i+0x28>
 801a680:	2f62      	cmp	r7, #98	; 0x62
 801a682:	d80a      	bhi.n	801a69a <_printf_i+0x32>
 801a684:	2f00      	cmp	r7, #0
 801a686:	f000 80d8 	beq.w	801a83a <_printf_i+0x1d2>
 801a68a:	2f58      	cmp	r7, #88	; 0x58
 801a68c:	f000 80a3 	beq.w	801a7d6 <_printf_i+0x16e>
 801a690:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801a698:	e03a      	b.n	801a710 <_printf_i+0xa8>
 801a69a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801a69e:	2b15      	cmp	r3, #21
 801a6a0:	d8f6      	bhi.n	801a690 <_printf_i+0x28>
 801a6a2:	a001      	add	r0, pc, #4	; (adr r0, 801a6a8 <_printf_i+0x40>)
 801a6a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801a6a8:	0801a701 	.word	0x0801a701
 801a6ac:	0801a715 	.word	0x0801a715
 801a6b0:	0801a691 	.word	0x0801a691
 801a6b4:	0801a691 	.word	0x0801a691
 801a6b8:	0801a691 	.word	0x0801a691
 801a6bc:	0801a691 	.word	0x0801a691
 801a6c0:	0801a715 	.word	0x0801a715
 801a6c4:	0801a691 	.word	0x0801a691
 801a6c8:	0801a691 	.word	0x0801a691
 801a6cc:	0801a691 	.word	0x0801a691
 801a6d0:	0801a691 	.word	0x0801a691
 801a6d4:	0801a821 	.word	0x0801a821
 801a6d8:	0801a745 	.word	0x0801a745
 801a6dc:	0801a803 	.word	0x0801a803
 801a6e0:	0801a691 	.word	0x0801a691
 801a6e4:	0801a691 	.word	0x0801a691
 801a6e8:	0801a843 	.word	0x0801a843
 801a6ec:	0801a691 	.word	0x0801a691
 801a6f0:	0801a745 	.word	0x0801a745
 801a6f4:	0801a691 	.word	0x0801a691
 801a6f8:	0801a691 	.word	0x0801a691
 801a6fc:	0801a80b 	.word	0x0801a80b
 801a700:	680b      	ldr	r3, [r1, #0]
 801a702:	1d1a      	adds	r2, r3, #4
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	600a      	str	r2, [r1, #0]
 801a708:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801a70c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a710:	2301      	movs	r3, #1
 801a712:	e0a3      	b.n	801a85c <_printf_i+0x1f4>
 801a714:	6825      	ldr	r5, [r4, #0]
 801a716:	6808      	ldr	r0, [r1, #0]
 801a718:	062e      	lsls	r6, r5, #24
 801a71a:	f100 0304 	add.w	r3, r0, #4
 801a71e:	d50a      	bpl.n	801a736 <_printf_i+0xce>
 801a720:	6805      	ldr	r5, [r0, #0]
 801a722:	600b      	str	r3, [r1, #0]
 801a724:	2d00      	cmp	r5, #0
 801a726:	da03      	bge.n	801a730 <_printf_i+0xc8>
 801a728:	232d      	movs	r3, #45	; 0x2d
 801a72a:	426d      	negs	r5, r5
 801a72c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a730:	485e      	ldr	r0, [pc, #376]	; (801a8ac <_printf_i+0x244>)
 801a732:	230a      	movs	r3, #10
 801a734:	e019      	b.n	801a76a <_printf_i+0x102>
 801a736:	f015 0f40 	tst.w	r5, #64	; 0x40
 801a73a:	6805      	ldr	r5, [r0, #0]
 801a73c:	600b      	str	r3, [r1, #0]
 801a73e:	bf18      	it	ne
 801a740:	b22d      	sxthne	r5, r5
 801a742:	e7ef      	b.n	801a724 <_printf_i+0xbc>
 801a744:	680b      	ldr	r3, [r1, #0]
 801a746:	6825      	ldr	r5, [r4, #0]
 801a748:	1d18      	adds	r0, r3, #4
 801a74a:	6008      	str	r0, [r1, #0]
 801a74c:	0628      	lsls	r0, r5, #24
 801a74e:	d501      	bpl.n	801a754 <_printf_i+0xec>
 801a750:	681d      	ldr	r5, [r3, #0]
 801a752:	e002      	b.n	801a75a <_printf_i+0xf2>
 801a754:	0669      	lsls	r1, r5, #25
 801a756:	d5fb      	bpl.n	801a750 <_printf_i+0xe8>
 801a758:	881d      	ldrh	r5, [r3, #0]
 801a75a:	4854      	ldr	r0, [pc, #336]	; (801a8ac <_printf_i+0x244>)
 801a75c:	2f6f      	cmp	r7, #111	; 0x6f
 801a75e:	bf0c      	ite	eq
 801a760:	2308      	moveq	r3, #8
 801a762:	230a      	movne	r3, #10
 801a764:	2100      	movs	r1, #0
 801a766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a76a:	6866      	ldr	r6, [r4, #4]
 801a76c:	60a6      	str	r6, [r4, #8]
 801a76e:	2e00      	cmp	r6, #0
 801a770:	bfa2      	ittt	ge
 801a772:	6821      	ldrge	r1, [r4, #0]
 801a774:	f021 0104 	bicge.w	r1, r1, #4
 801a778:	6021      	strge	r1, [r4, #0]
 801a77a:	b90d      	cbnz	r5, 801a780 <_printf_i+0x118>
 801a77c:	2e00      	cmp	r6, #0
 801a77e:	d04d      	beq.n	801a81c <_printf_i+0x1b4>
 801a780:	4616      	mov	r6, r2
 801a782:	fbb5 f1f3 	udiv	r1, r5, r3
 801a786:	fb03 5711 	mls	r7, r3, r1, r5
 801a78a:	5dc7      	ldrb	r7, [r0, r7]
 801a78c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a790:	462f      	mov	r7, r5
 801a792:	42bb      	cmp	r3, r7
 801a794:	460d      	mov	r5, r1
 801a796:	d9f4      	bls.n	801a782 <_printf_i+0x11a>
 801a798:	2b08      	cmp	r3, #8
 801a79a:	d10b      	bne.n	801a7b4 <_printf_i+0x14c>
 801a79c:	6823      	ldr	r3, [r4, #0]
 801a79e:	07df      	lsls	r7, r3, #31
 801a7a0:	d508      	bpl.n	801a7b4 <_printf_i+0x14c>
 801a7a2:	6923      	ldr	r3, [r4, #16]
 801a7a4:	6861      	ldr	r1, [r4, #4]
 801a7a6:	4299      	cmp	r1, r3
 801a7a8:	bfde      	ittt	le
 801a7aa:	2330      	movle	r3, #48	; 0x30
 801a7ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a7b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a7b4:	1b92      	subs	r2, r2, r6
 801a7b6:	6122      	str	r2, [r4, #16]
 801a7b8:	f8cd a000 	str.w	sl, [sp]
 801a7bc:	464b      	mov	r3, r9
 801a7be:	aa03      	add	r2, sp, #12
 801a7c0:	4621      	mov	r1, r4
 801a7c2:	4640      	mov	r0, r8
 801a7c4:	f7ff fee2 	bl	801a58c <_printf_common>
 801a7c8:	3001      	adds	r0, #1
 801a7ca:	d14c      	bne.n	801a866 <_printf_i+0x1fe>
 801a7cc:	f04f 30ff 	mov.w	r0, #4294967295
 801a7d0:	b004      	add	sp, #16
 801a7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7d6:	4835      	ldr	r0, [pc, #212]	; (801a8ac <_printf_i+0x244>)
 801a7d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801a7dc:	6823      	ldr	r3, [r4, #0]
 801a7de:	680e      	ldr	r6, [r1, #0]
 801a7e0:	061f      	lsls	r7, r3, #24
 801a7e2:	f856 5b04 	ldr.w	r5, [r6], #4
 801a7e6:	600e      	str	r6, [r1, #0]
 801a7e8:	d514      	bpl.n	801a814 <_printf_i+0x1ac>
 801a7ea:	07d9      	lsls	r1, r3, #31
 801a7ec:	bf44      	itt	mi
 801a7ee:	f043 0320 	orrmi.w	r3, r3, #32
 801a7f2:	6023      	strmi	r3, [r4, #0]
 801a7f4:	b91d      	cbnz	r5, 801a7fe <_printf_i+0x196>
 801a7f6:	6823      	ldr	r3, [r4, #0]
 801a7f8:	f023 0320 	bic.w	r3, r3, #32
 801a7fc:	6023      	str	r3, [r4, #0]
 801a7fe:	2310      	movs	r3, #16
 801a800:	e7b0      	b.n	801a764 <_printf_i+0xfc>
 801a802:	6823      	ldr	r3, [r4, #0]
 801a804:	f043 0320 	orr.w	r3, r3, #32
 801a808:	6023      	str	r3, [r4, #0]
 801a80a:	2378      	movs	r3, #120	; 0x78
 801a80c:	4828      	ldr	r0, [pc, #160]	; (801a8b0 <_printf_i+0x248>)
 801a80e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a812:	e7e3      	b.n	801a7dc <_printf_i+0x174>
 801a814:	065e      	lsls	r6, r3, #25
 801a816:	bf48      	it	mi
 801a818:	b2ad      	uxthmi	r5, r5
 801a81a:	e7e6      	b.n	801a7ea <_printf_i+0x182>
 801a81c:	4616      	mov	r6, r2
 801a81e:	e7bb      	b.n	801a798 <_printf_i+0x130>
 801a820:	680b      	ldr	r3, [r1, #0]
 801a822:	6826      	ldr	r6, [r4, #0]
 801a824:	6960      	ldr	r0, [r4, #20]
 801a826:	1d1d      	adds	r5, r3, #4
 801a828:	600d      	str	r5, [r1, #0]
 801a82a:	0635      	lsls	r5, r6, #24
 801a82c:	681b      	ldr	r3, [r3, #0]
 801a82e:	d501      	bpl.n	801a834 <_printf_i+0x1cc>
 801a830:	6018      	str	r0, [r3, #0]
 801a832:	e002      	b.n	801a83a <_printf_i+0x1d2>
 801a834:	0671      	lsls	r1, r6, #25
 801a836:	d5fb      	bpl.n	801a830 <_printf_i+0x1c8>
 801a838:	8018      	strh	r0, [r3, #0]
 801a83a:	2300      	movs	r3, #0
 801a83c:	6123      	str	r3, [r4, #16]
 801a83e:	4616      	mov	r6, r2
 801a840:	e7ba      	b.n	801a7b8 <_printf_i+0x150>
 801a842:	680b      	ldr	r3, [r1, #0]
 801a844:	1d1a      	adds	r2, r3, #4
 801a846:	600a      	str	r2, [r1, #0]
 801a848:	681e      	ldr	r6, [r3, #0]
 801a84a:	6862      	ldr	r2, [r4, #4]
 801a84c:	2100      	movs	r1, #0
 801a84e:	4630      	mov	r0, r6
 801a850:	f7e5 fd66 	bl	8000320 <memchr>
 801a854:	b108      	cbz	r0, 801a85a <_printf_i+0x1f2>
 801a856:	1b80      	subs	r0, r0, r6
 801a858:	6060      	str	r0, [r4, #4]
 801a85a:	6863      	ldr	r3, [r4, #4]
 801a85c:	6123      	str	r3, [r4, #16]
 801a85e:	2300      	movs	r3, #0
 801a860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a864:	e7a8      	b.n	801a7b8 <_printf_i+0x150>
 801a866:	6923      	ldr	r3, [r4, #16]
 801a868:	4632      	mov	r2, r6
 801a86a:	4649      	mov	r1, r9
 801a86c:	4640      	mov	r0, r8
 801a86e:	47d0      	blx	sl
 801a870:	3001      	adds	r0, #1
 801a872:	d0ab      	beq.n	801a7cc <_printf_i+0x164>
 801a874:	6823      	ldr	r3, [r4, #0]
 801a876:	079b      	lsls	r3, r3, #30
 801a878:	d413      	bmi.n	801a8a2 <_printf_i+0x23a>
 801a87a:	68e0      	ldr	r0, [r4, #12]
 801a87c:	9b03      	ldr	r3, [sp, #12]
 801a87e:	4298      	cmp	r0, r3
 801a880:	bfb8      	it	lt
 801a882:	4618      	movlt	r0, r3
 801a884:	e7a4      	b.n	801a7d0 <_printf_i+0x168>
 801a886:	2301      	movs	r3, #1
 801a888:	4632      	mov	r2, r6
 801a88a:	4649      	mov	r1, r9
 801a88c:	4640      	mov	r0, r8
 801a88e:	47d0      	blx	sl
 801a890:	3001      	adds	r0, #1
 801a892:	d09b      	beq.n	801a7cc <_printf_i+0x164>
 801a894:	3501      	adds	r5, #1
 801a896:	68e3      	ldr	r3, [r4, #12]
 801a898:	9903      	ldr	r1, [sp, #12]
 801a89a:	1a5b      	subs	r3, r3, r1
 801a89c:	42ab      	cmp	r3, r5
 801a89e:	dcf2      	bgt.n	801a886 <_printf_i+0x21e>
 801a8a0:	e7eb      	b.n	801a87a <_printf_i+0x212>
 801a8a2:	2500      	movs	r5, #0
 801a8a4:	f104 0619 	add.w	r6, r4, #25
 801a8a8:	e7f5      	b.n	801a896 <_printf_i+0x22e>
 801a8aa:	bf00      	nop
 801a8ac:	0801e35f 	.word	0x0801e35f
 801a8b0:	0801e370 	.word	0x0801e370

0801a8b4 <_read_r>:
 801a8b4:	b538      	push	{r3, r4, r5, lr}
 801a8b6:	4d07      	ldr	r5, [pc, #28]	; (801a8d4 <_read_r+0x20>)
 801a8b8:	4604      	mov	r4, r0
 801a8ba:	4608      	mov	r0, r1
 801a8bc:	4611      	mov	r1, r2
 801a8be:	2200      	movs	r2, #0
 801a8c0:	602a      	str	r2, [r5, #0]
 801a8c2:	461a      	mov	r2, r3
 801a8c4:	f7e7 f9bc 	bl	8001c40 <_read>
 801a8c8:	1c43      	adds	r3, r0, #1
 801a8ca:	d102      	bne.n	801a8d2 <_read_r+0x1e>
 801a8cc:	682b      	ldr	r3, [r5, #0]
 801a8ce:	b103      	cbz	r3, 801a8d2 <_read_r+0x1e>
 801a8d0:	6023      	str	r3, [r4, #0]
 801a8d2:	bd38      	pop	{r3, r4, r5, pc}
 801a8d4:	240078b8 	.word	0x240078b8

0801a8d8 <__swbuf_r>:
 801a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a8da:	460e      	mov	r6, r1
 801a8dc:	4614      	mov	r4, r2
 801a8de:	4605      	mov	r5, r0
 801a8e0:	b118      	cbz	r0, 801a8ea <__swbuf_r+0x12>
 801a8e2:	6983      	ldr	r3, [r0, #24]
 801a8e4:	b90b      	cbnz	r3, 801a8ea <__swbuf_r+0x12>
 801a8e6:	f7ff f8f9 	bl	8019adc <__sinit>
 801a8ea:	4b21      	ldr	r3, [pc, #132]	; (801a970 <__swbuf_r+0x98>)
 801a8ec:	429c      	cmp	r4, r3
 801a8ee:	d12b      	bne.n	801a948 <__swbuf_r+0x70>
 801a8f0:	686c      	ldr	r4, [r5, #4]
 801a8f2:	69a3      	ldr	r3, [r4, #24]
 801a8f4:	60a3      	str	r3, [r4, #8]
 801a8f6:	89a3      	ldrh	r3, [r4, #12]
 801a8f8:	071a      	lsls	r2, r3, #28
 801a8fa:	d52f      	bpl.n	801a95c <__swbuf_r+0x84>
 801a8fc:	6923      	ldr	r3, [r4, #16]
 801a8fe:	b36b      	cbz	r3, 801a95c <__swbuf_r+0x84>
 801a900:	6923      	ldr	r3, [r4, #16]
 801a902:	6820      	ldr	r0, [r4, #0]
 801a904:	1ac0      	subs	r0, r0, r3
 801a906:	6963      	ldr	r3, [r4, #20]
 801a908:	b2f6      	uxtb	r6, r6
 801a90a:	4283      	cmp	r3, r0
 801a90c:	4637      	mov	r7, r6
 801a90e:	dc04      	bgt.n	801a91a <__swbuf_r+0x42>
 801a910:	4621      	mov	r1, r4
 801a912:	4628      	mov	r0, r5
 801a914:	f7ff fc1c 	bl	801a150 <_fflush_r>
 801a918:	bb30      	cbnz	r0, 801a968 <__swbuf_r+0x90>
 801a91a:	68a3      	ldr	r3, [r4, #8]
 801a91c:	3b01      	subs	r3, #1
 801a91e:	60a3      	str	r3, [r4, #8]
 801a920:	6823      	ldr	r3, [r4, #0]
 801a922:	1c5a      	adds	r2, r3, #1
 801a924:	6022      	str	r2, [r4, #0]
 801a926:	701e      	strb	r6, [r3, #0]
 801a928:	6963      	ldr	r3, [r4, #20]
 801a92a:	3001      	adds	r0, #1
 801a92c:	4283      	cmp	r3, r0
 801a92e:	d004      	beq.n	801a93a <__swbuf_r+0x62>
 801a930:	89a3      	ldrh	r3, [r4, #12]
 801a932:	07db      	lsls	r3, r3, #31
 801a934:	d506      	bpl.n	801a944 <__swbuf_r+0x6c>
 801a936:	2e0a      	cmp	r6, #10
 801a938:	d104      	bne.n	801a944 <__swbuf_r+0x6c>
 801a93a:	4621      	mov	r1, r4
 801a93c:	4628      	mov	r0, r5
 801a93e:	f7ff fc07 	bl	801a150 <_fflush_r>
 801a942:	b988      	cbnz	r0, 801a968 <__swbuf_r+0x90>
 801a944:	4638      	mov	r0, r7
 801a946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a948:	4b0a      	ldr	r3, [pc, #40]	; (801a974 <__swbuf_r+0x9c>)
 801a94a:	429c      	cmp	r4, r3
 801a94c:	d101      	bne.n	801a952 <__swbuf_r+0x7a>
 801a94e:	68ac      	ldr	r4, [r5, #8]
 801a950:	e7cf      	b.n	801a8f2 <__swbuf_r+0x1a>
 801a952:	4b09      	ldr	r3, [pc, #36]	; (801a978 <__swbuf_r+0xa0>)
 801a954:	429c      	cmp	r4, r3
 801a956:	bf08      	it	eq
 801a958:	68ec      	ldreq	r4, [r5, #12]
 801a95a:	e7ca      	b.n	801a8f2 <__swbuf_r+0x1a>
 801a95c:	4621      	mov	r1, r4
 801a95e:	4628      	mov	r0, r5
 801a960:	f000 f80c 	bl	801a97c <__swsetup_r>
 801a964:	2800      	cmp	r0, #0
 801a966:	d0cb      	beq.n	801a900 <__swbuf_r+0x28>
 801a968:	f04f 37ff 	mov.w	r7, #4294967295
 801a96c:	e7ea      	b.n	801a944 <__swbuf_r+0x6c>
 801a96e:	bf00      	nop
 801a970:	0801e258 	.word	0x0801e258
 801a974:	0801e278 	.word	0x0801e278
 801a978:	0801e238 	.word	0x0801e238

0801a97c <__swsetup_r>:
 801a97c:	4b32      	ldr	r3, [pc, #200]	; (801aa48 <__swsetup_r+0xcc>)
 801a97e:	b570      	push	{r4, r5, r6, lr}
 801a980:	681d      	ldr	r5, [r3, #0]
 801a982:	4606      	mov	r6, r0
 801a984:	460c      	mov	r4, r1
 801a986:	b125      	cbz	r5, 801a992 <__swsetup_r+0x16>
 801a988:	69ab      	ldr	r3, [r5, #24]
 801a98a:	b913      	cbnz	r3, 801a992 <__swsetup_r+0x16>
 801a98c:	4628      	mov	r0, r5
 801a98e:	f7ff f8a5 	bl	8019adc <__sinit>
 801a992:	4b2e      	ldr	r3, [pc, #184]	; (801aa4c <__swsetup_r+0xd0>)
 801a994:	429c      	cmp	r4, r3
 801a996:	d10f      	bne.n	801a9b8 <__swsetup_r+0x3c>
 801a998:	686c      	ldr	r4, [r5, #4]
 801a99a:	89a3      	ldrh	r3, [r4, #12]
 801a99c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a9a0:	0719      	lsls	r1, r3, #28
 801a9a2:	d42c      	bmi.n	801a9fe <__swsetup_r+0x82>
 801a9a4:	06dd      	lsls	r5, r3, #27
 801a9a6:	d411      	bmi.n	801a9cc <__swsetup_r+0x50>
 801a9a8:	2309      	movs	r3, #9
 801a9aa:	6033      	str	r3, [r6, #0]
 801a9ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a9b0:	81a3      	strh	r3, [r4, #12]
 801a9b2:	f04f 30ff 	mov.w	r0, #4294967295
 801a9b6:	e03e      	b.n	801aa36 <__swsetup_r+0xba>
 801a9b8:	4b25      	ldr	r3, [pc, #148]	; (801aa50 <__swsetup_r+0xd4>)
 801a9ba:	429c      	cmp	r4, r3
 801a9bc:	d101      	bne.n	801a9c2 <__swsetup_r+0x46>
 801a9be:	68ac      	ldr	r4, [r5, #8]
 801a9c0:	e7eb      	b.n	801a99a <__swsetup_r+0x1e>
 801a9c2:	4b24      	ldr	r3, [pc, #144]	; (801aa54 <__swsetup_r+0xd8>)
 801a9c4:	429c      	cmp	r4, r3
 801a9c6:	bf08      	it	eq
 801a9c8:	68ec      	ldreq	r4, [r5, #12]
 801a9ca:	e7e6      	b.n	801a99a <__swsetup_r+0x1e>
 801a9cc:	0758      	lsls	r0, r3, #29
 801a9ce:	d512      	bpl.n	801a9f6 <__swsetup_r+0x7a>
 801a9d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a9d2:	b141      	cbz	r1, 801a9e6 <__swsetup_r+0x6a>
 801a9d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a9d8:	4299      	cmp	r1, r3
 801a9da:	d002      	beq.n	801a9e2 <__swsetup_r+0x66>
 801a9dc:	4630      	mov	r0, r6
 801a9de:	f7ff fc2b 	bl	801a238 <_free_r>
 801a9e2:	2300      	movs	r3, #0
 801a9e4:	6363      	str	r3, [r4, #52]	; 0x34
 801a9e6:	89a3      	ldrh	r3, [r4, #12]
 801a9e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a9ec:	81a3      	strh	r3, [r4, #12]
 801a9ee:	2300      	movs	r3, #0
 801a9f0:	6063      	str	r3, [r4, #4]
 801a9f2:	6923      	ldr	r3, [r4, #16]
 801a9f4:	6023      	str	r3, [r4, #0]
 801a9f6:	89a3      	ldrh	r3, [r4, #12]
 801a9f8:	f043 0308 	orr.w	r3, r3, #8
 801a9fc:	81a3      	strh	r3, [r4, #12]
 801a9fe:	6923      	ldr	r3, [r4, #16]
 801aa00:	b94b      	cbnz	r3, 801aa16 <__swsetup_r+0x9a>
 801aa02:	89a3      	ldrh	r3, [r4, #12]
 801aa04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801aa08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aa0c:	d003      	beq.n	801aa16 <__swsetup_r+0x9a>
 801aa0e:	4621      	mov	r1, r4
 801aa10:	4630      	mov	r0, r6
 801aa12:	f000 f84d 	bl	801aab0 <__smakebuf_r>
 801aa16:	89a0      	ldrh	r0, [r4, #12]
 801aa18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801aa1c:	f010 0301 	ands.w	r3, r0, #1
 801aa20:	d00a      	beq.n	801aa38 <__swsetup_r+0xbc>
 801aa22:	2300      	movs	r3, #0
 801aa24:	60a3      	str	r3, [r4, #8]
 801aa26:	6963      	ldr	r3, [r4, #20]
 801aa28:	425b      	negs	r3, r3
 801aa2a:	61a3      	str	r3, [r4, #24]
 801aa2c:	6923      	ldr	r3, [r4, #16]
 801aa2e:	b943      	cbnz	r3, 801aa42 <__swsetup_r+0xc6>
 801aa30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801aa34:	d1ba      	bne.n	801a9ac <__swsetup_r+0x30>
 801aa36:	bd70      	pop	{r4, r5, r6, pc}
 801aa38:	0781      	lsls	r1, r0, #30
 801aa3a:	bf58      	it	pl
 801aa3c:	6963      	ldrpl	r3, [r4, #20]
 801aa3e:	60a3      	str	r3, [r4, #8]
 801aa40:	e7f4      	b.n	801aa2c <__swsetup_r+0xb0>
 801aa42:	2000      	movs	r0, #0
 801aa44:	e7f7      	b.n	801aa36 <__swsetup_r+0xba>
 801aa46:	bf00      	nop
 801aa48:	2400003c 	.word	0x2400003c
 801aa4c:	0801e258 	.word	0x0801e258
 801aa50:	0801e278 	.word	0x0801e278
 801aa54:	0801e238 	.word	0x0801e238

0801aa58 <abort>:
 801aa58:	b508      	push	{r3, lr}
 801aa5a:	2006      	movs	r0, #6
 801aa5c:	f000 f890 	bl	801ab80 <raise>
 801aa60:	2001      	movs	r0, #1
 801aa62:	f7e7 f8e3 	bl	8001c2c <_exit>

0801aa66 <__swhatbuf_r>:
 801aa66:	b570      	push	{r4, r5, r6, lr}
 801aa68:	460e      	mov	r6, r1
 801aa6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801aa6e:	2900      	cmp	r1, #0
 801aa70:	b096      	sub	sp, #88	; 0x58
 801aa72:	4614      	mov	r4, r2
 801aa74:	461d      	mov	r5, r3
 801aa76:	da07      	bge.n	801aa88 <__swhatbuf_r+0x22>
 801aa78:	2300      	movs	r3, #0
 801aa7a:	602b      	str	r3, [r5, #0]
 801aa7c:	89b3      	ldrh	r3, [r6, #12]
 801aa7e:	061a      	lsls	r2, r3, #24
 801aa80:	d410      	bmi.n	801aaa4 <__swhatbuf_r+0x3e>
 801aa82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801aa86:	e00e      	b.n	801aaa6 <__swhatbuf_r+0x40>
 801aa88:	466a      	mov	r2, sp
 801aa8a:	f000 f895 	bl	801abb8 <_fstat_r>
 801aa8e:	2800      	cmp	r0, #0
 801aa90:	dbf2      	blt.n	801aa78 <__swhatbuf_r+0x12>
 801aa92:	9a01      	ldr	r2, [sp, #4]
 801aa94:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801aa98:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801aa9c:	425a      	negs	r2, r3
 801aa9e:	415a      	adcs	r2, r3
 801aaa0:	602a      	str	r2, [r5, #0]
 801aaa2:	e7ee      	b.n	801aa82 <__swhatbuf_r+0x1c>
 801aaa4:	2340      	movs	r3, #64	; 0x40
 801aaa6:	2000      	movs	r0, #0
 801aaa8:	6023      	str	r3, [r4, #0]
 801aaaa:	b016      	add	sp, #88	; 0x58
 801aaac:	bd70      	pop	{r4, r5, r6, pc}
	...

0801aab0 <__smakebuf_r>:
 801aab0:	898b      	ldrh	r3, [r1, #12]
 801aab2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801aab4:	079d      	lsls	r5, r3, #30
 801aab6:	4606      	mov	r6, r0
 801aab8:	460c      	mov	r4, r1
 801aaba:	d507      	bpl.n	801aacc <__smakebuf_r+0x1c>
 801aabc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801aac0:	6023      	str	r3, [r4, #0]
 801aac2:	6123      	str	r3, [r4, #16]
 801aac4:	2301      	movs	r3, #1
 801aac6:	6163      	str	r3, [r4, #20]
 801aac8:	b002      	add	sp, #8
 801aaca:	bd70      	pop	{r4, r5, r6, pc}
 801aacc:	ab01      	add	r3, sp, #4
 801aace:	466a      	mov	r2, sp
 801aad0:	f7ff ffc9 	bl	801aa66 <__swhatbuf_r>
 801aad4:	9900      	ldr	r1, [sp, #0]
 801aad6:	4605      	mov	r5, r0
 801aad8:	4630      	mov	r0, r6
 801aada:	f7ff f8e9 	bl	8019cb0 <_malloc_r>
 801aade:	b948      	cbnz	r0, 801aaf4 <__smakebuf_r+0x44>
 801aae0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aae4:	059a      	lsls	r2, r3, #22
 801aae6:	d4ef      	bmi.n	801aac8 <__smakebuf_r+0x18>
 801aae8:	f023 0303 	bic.w	r3, r3, #3
 801aaec:	f043 0302 	orr.w	r3, r3, #2
 801aaf0:	81a3      	strh	r3, [r4, #12]
 801aaf2:	e7e3      	b.n	801aabc <__smakebuf_r+0xc>
 801aaf4:	4b0d      	ldr	r3, [pc, #52]	; (801ab2c <__smakebuf_r+0x7c>)
 801aaf6:	62b3      	str	r3, [r6, #40]	; 0x28
 801aaf8:	89a3      	ldrh	r3, [r4, #12]
 801aafa:	6020      	str	r0, [r4, #0]
 801aafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ab00:	81a3      	strh	r3, [r4, #12]
 801ab02:	9b00      	ldr	r3, [sp, #0]
 801ab04:	6163      	str	r3, [r4, #20]
 801ab06:	9b01      	ldr	r3, [sp, #4]
 801ab08:	6120      	str	r0, [r4, #16]
 801ab0a:	b15b      	cbz	r3, 801ab24 <__smakebuf_r+0x74>
 801ab0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ab10:	4630      	mov	r0, r6
 801ab12:	f000 f863 	bl	801abdc <_isatty_r>
 801ab16:	b128      	cbz	r0, 801ab24 <__smakebuf_r+0x74>
 801ab18:	89a3      	ldrh	r3, [r4, #12]
 801ab1a:	f023 0303 	bic.w	r3, r3, #3
 801ab1e:	f043 0301 	orr.w	r3, r3, #1
 801ab22:	81a3      	strh	r3, [r4, #12]
 801ab24:	89a0      	ldrh	r0, [r4, #12]
 801ab26:	4305      	orrs	r5, r0
 801ab28:	81a5      	strh	r5, [r4, #12]
 801ab2a:	e7cd      	b.n	801aac8 <__smakebuf_r+0x18>
 801ab2c:	08019a75 	.word	0x08019a75

0801ab30 <_raise_r>:
 801ab30:	291f      	cmp	r1, #31
 801ab32:	b538      	push	{r3, r4, r5, lr}
 801ab34:	4604      	mov	r4, r0
 801ab36:	460d      	mov	r5, r1
 801ab38:	d904      	bls.n	801ab44 <_raise_r+0x14>
 801ab3a:	2316      	movs	r3, #22
 801ab3c:	6003      	str	r3, [r0, #0]
 801ab3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ab42:	bd38      	pop	{r3, r4, r5, pc}
 801ab44:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801ab46:	b112      	cbz	r2, 801ab4e <_raise_r+0x1e>
 801ab48:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801ab4c:	b94b      	cbnz	r3, 801ab62 <_raise_r+0x32>
 801ab4e:	4620      	mov	r0, r4
 801ab50:	f000 f830 	bl	801abb4 <_getpid_r>
 801ab54:	462a      	mov	r2, r5
 801ab56:	4601      	mov	r1, r0
 801ab58:	4620      	mov	r0, r4
 801ab5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ab5e:	f000 b817 	b.w	801ab90 <_kill_r>
 801ab62:	2b01      	cmp	r3, #1
 801ab64:	d00a      	beq.n	801ab7c <_raise_r+0x4c>
 801ab66:	1c59      	adds	r1, r3, #1
 801ab68:	d103      	bne.n	801ab72 <_raise_r+0x42>
 801ab6a:	2316      	movs	r3, #22
 801ab6c:	6003      	str	r3, [r0, #0]
 801ab6e:	2001      	movs	r0, #1
 801ab70:	e7e7      	b.n	801ab42 <_raise_r+0x12>
 801ab72:	2400      	movs	r4, #0
 801ab74:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801ab78:	4628      	mov	r0, r5
 801ab7a:	4798      	blx	r3
 801ab7c:	2000      	movs	r0, #0
 801ab7e:	e7e0      	b.n	801ab42 <_raise_r+0x12>

0801ab80 <raise>:
 801ab80:	4b02      	ldr	r3, [pc, #8]	; (801ab8c <raise+0xc>)
 801ab82:	4601      	mov	r1, r0
 801ab84:	6818      	ldr	r0, [r3, #0]
 801ab86:	f7ff bfd3 	b.w	801ab30 <_raise_r>
 801ab8a:	bf00      	nop
 801ab8c:	2400003c 	.word	0x2400003c

0801ab90 <_kill_r>:
 801ab90:	b538      	push	{r3, r4, r5, lr}
 801ab92:	4d07      	ldr	r5, [pc, #28]	; (801abb0 <_kill_r+0x20>)
 801ab94:	2300      	movs	r3, #0
 801ab96:	4604      	mov	r4, r0
 801ab98:	4608      	mov	r0, r1
 801ab9a:	4611      	mov	r1, r2
 801ab9c:	602b      	str	r3, [r5, #0]
 801ab9e:	f7e7 f833 	bl	8001c08 <_kill>
 801aba2:	1c43      	adds	r3, r0, #1
 801aba4:	d102      	bne.n	801abac <_kill_r+0x1c>
 801aba6:	682b      	ldr	r3, [r5, #0]
 801aba8:	b103      	cbz	r3, 801abac <_kill_r+0x1c>
 801abaa:	6023      	str	r3, [r4, #0]
 801abac:	bd38      	pop	{r3, r4, r5, pc}
 801abae:	bf00      	nop
 801abb0:	240078b8 	.word	0x240078b8

0801abb4 <_getpid_r>:
 801abb4:	f7e7 b820 	b.w	8001bf8 <_getpid>

0801abb8 <_fstat_r>:
 801abb8:	b538      	push	{r3, r4, r5, lr}
 801abba:	4d07      	ldr	r5, [pc, #28]	; (801abd8 <_fstat_r+0x20>)
 801abbc:	2300      	movs	r3, #0
 801abbe:	4604      	mov	r4, r0
 801abc0:	4608      	mov	r0, r1
 801abc2:	4611      	mov	r1, r2
 801abc4:	602b      	str	r3, [r5, #0]
 801abc6:	f7e7 f880 	bl	8001cca <_fstat>
 801abca:	1c43      	adds	r3, r0, #1
 801abcc:	d102      	bne.n	801abd4 <_fstat_r+0x1c>
 801abce:	682b      	ldr	r3, [r5, #0]
 801abd0:	b103      	cbz	r3, 801abd4 <_fstat_r+0x1c>
 801abd2:	6023      	str	r3, [r4, #0]
 801abd4:	bd38      	pop	{r3, r4, r5, pc}
 801abd6:	bf00      	nop
 801abd8:	240078b8 	.word	0x240078b8

0801abdc <_isatty_r>:
 801abdc:	b538      	push	{r3, r4, r5, lr}
 801abde:	4d06      	ldr	r5, [pc, #24]	; (801abf8 <_isatty_r+0x1c>)
 801abe0:	2300      	movs	r3, #0
 801abe2:	4604      	mov	r4, r0
 801abe4:	4608      	mov	r0, r1
 801abe6:	602b      	str	r3, [r5, #0]
 801abe8:	f7e7 f87f 	bl	8001cea <_isatty>
 801abec:	1c43      	adds	r3, r0, #1
 801abee:	d102      	bne.n	801abf6 <_isatty_r+0x1a>
 801abf0:	682b      	ldr	r3, [r5, #0]
 801abf2:	b103      	cbz	r3, 801abf6 <_isatty_r+0x1a>
 801abf4:	6023      	str	r3, [r4, #0]
 801abf6:	bd38      	pop	{r3, r4, r5, pc}
 801abf8:	240078b8 	.word	0x240078b8

0801abfc <_init>:
 801abfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801abfe:	bf00      	nop
 801ac00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac02:	bc08      	pop	{r3}
 801ac04:	469e      	mov	lr, r3
 801ac06:	4770      	bx	lr

0801ac08 <_fini>:
 801ac08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac0a:	bf00      	nop
 801ac0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ac0e:	bc08      	pop	{r3}
 801ac10:	469e      	mov	lr, r3
 801ac12:	4770      	bx	lr
