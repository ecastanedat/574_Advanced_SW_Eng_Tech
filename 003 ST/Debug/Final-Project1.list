
Final-Project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da4  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000013c  0800a074  0800a074  0001a074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a1b0  0800a1b0  0001a1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a1b8  0800a1b8  0001a1b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800a1bc  0800a1bc  0001a1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  24000000  0800a1c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000078  0800a238  00020078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000d8  0800a298  000200d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cb8  24000138  0800a2f8  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24004df0  0800a2f8  00024df0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b6cb  00000000  00000000  00020166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000480a  00000000  00000000  0004b831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001de8  00000000  00000000  00050040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c20  00000000  00000000  00051e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000381bb  00000000  00000000  00053a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024468  00000000  00000000  0008bc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00167317  00000000  00000000  000b006b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00217382  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000082fc  00000000  00000000  002173d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	24000138 	.word	0x24000138
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800a05c 	.word	0x0800a05c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	2400013c 	.word	0x2400013c
 800030c:	0800a05c 	.word	0x0800a05c

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000618:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_ETH_Init+0x80>)
 800061a:	4a1f      	ldr	r2, [pc, #124]	; (8000698 <MX_ETH_Init+0x84>)
 800061c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ETH_Init+0x88>)
 8000620:	2200      	movs	r2, #0
 8000622:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_ETH_Init+0x88>)
 8000626:	2280      	movs	r2, #128	; 0x80
 8000628:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ETH_Init+0x88>)
 800062c:	22e1      	movs	r2, #225	; 0xe1
 800062e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_ETH_Init+0x88>)
 8000632:	2200      	movs	r2, #0
 8000634:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ETH_Init+0x88>)
 8000638:	2200      	movs	r2, #0
 800063a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_ETH_Init+0x88>)
 800063e:	2200      	movs	r2, #0
 8000640:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ETH_Init+0x80>)
 8000644:	4a15      	ldr	r2, [pc, #84]	; (800069c <MX_ETH_Init+0x88>)
 8000646:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ETH_Init+0x80>)
 800064a:	2201      	movs	r2, #1
 800064c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ETH_Init+0x80>)
 8000650:	4a13      	ldr	r2, [pc, #76]	; (80006a0 <MX_ETH_Init+0x8c>)
 8000652:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ETH_Init+0x80>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_ETH_Init+0x90>)
 8000658:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800065a:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <MX_ETH_Init+0x80>)
 800065c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000660:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <MX_ETH_Init+0x80>)
 8000664:	f000 ffb8 	bl	80015d8 <HAL_ETH_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800066e:	f000 fc21 	bl	8000eb4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000672:	2238      	movs	r2, #56	; 0x38
 8000674:	2100      	movs	r1, #0
 8000676:	480c      	ldr	r0, [pc, #48]	; (80006a8 <MX_ETH_Init+0x94>)
 8000678:	f009 fb82 	bl	8009d80 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_ETH_Init+0x94>)
 800067e:	2221      	movs	r2, #33	; 0x21
 8000680:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_ETH_Init+0x94>)
 8000684:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000688:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800068a:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_ETH_Init+0x94>)
 800068c:	2200      	movs	r2, #0
 800068e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2400018c 	.word	0x2400018c
 8000698:	40028000 	.word	0x40028000
 800069c:	2400023c 	.word	0x2400023c
 80006a0:	240000d8 	.word	0x240000d8
 80006a4:	24000078 	.word	0x24000078
 80006a8:	24000154 	.word	0x24000154

080006ac <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08e      	sub	sp, #56	; 0x38
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a59      	ldr	r2, [pc, #356]	; (8000830 <HAL_ETH_MspInit+0x184>)
 80006ca:	4293      	cmp	r3, r2
 80006cc:	f040 80ab 	bne.w	8000826 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80006d0:	4b58      	ldr	r3, [pc, #352]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d6:	4a57      	ldr	r2, [pc, #348]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006e0:	4b54      	ldr	r3, [pc, #336]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006ea:	623b      	str	r3, [r7, #32]
 80006ec:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80006ee:	4b51      	ldr	r3, [pc, #324]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006f4:	4a4f      	ldr	r2, [pc, #316]	; (8000834 <HAL_ETH_MspInit+0x188>)
 80006f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006fa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006fe:	4b4d      	ldr	r3, [pc, #308]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000704:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000708:	61fb      	str	r3, [r7, #28]
 800070a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800070c:	4b49      	ldr	r3, [pc, #292]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800070e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000712:	4a48      	ldr	r2, [pc, #288]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000718:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800071c:	4b45      	ldr	r3, [pc, #276]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800071e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b42      	ldr	r3, [pc, #264]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000730:	4a40      	ldr	r2, [pc, #256]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000732:	f043 0304 	orr.w	r3, r3, #4
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800073a:	4b3e      	ldr	r3, [pc, #248]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000740:	f003 0304 	and.w	r3, r3, #4
 8000744:	617b      	str	r3, [r7, #20]
 8000746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000748:	4b3a      	ldr	r3, [pc, #232]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800074a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074e:	4a39      	ldr	r2, [pc, #228]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000758:	4b36      	ldr	r3, [pc, #216]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800075a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800075e:	f003 0301 	and.w	r3, r3, #1
 8000762:	613b      	str	r3, [r7, #16]
 8000764:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000766:	4b33      	ldr	r3, [pc, #204]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000768:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800076c:	4a31      	ldr	r2, [pc, #196]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800076e:	f043 0302 	orr.w	r3, r3, #2
 8000772:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000776:	4b2f      	ldr	r3, [pc, #188]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800077c:	f003 0302 	and.w	r3, r3, #2
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000784:	4b2b      	ldr	r3, [pc, #172]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800078a:	4a2a      	ldr	r2, [pc, #168]	; (8000834 <HAL_ETH_MspInit+0x188>)
 800078c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000790:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000794:	4b27      	ldr	r3, [pc, #156]	; (8000834 <HAL_ETH_MspInit+0x188>)
 8000796:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800079a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007a2:	2332      	movs	r3, #50	; 0x32
 80007a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a6:	2302      	movs	r3, #2
 80007a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007b2:	230b      	movs	r3, #11
 80007b4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ba:	4619      	mov	r1, r3
 80007bc:	481e      	ldr	r0, [pc, #120]	; (8000838 <HAL_ETH_MspInit+0x18c>)
 80007be:	f002 fbc9 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80007c2:	2386      	movs	r3, #134	; 0x86
 80007c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c6:	2302      	movs	r3, #2
 80007c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007d2:	230b      	movs	r3, #11
 80007d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	4619      	mov	r1, r3
 80007dc:	4817      	ldr	r0, [pc, #92]	; (800083c <HAL_ETH_MspInit+0x190>)
 80007de:	f002 fbb9 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e8:	2302      	movs	r3, #2
 80007ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f4:	230b      	movs	r3, #11
 80007f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fc:	4619      	mov	r1, r3
 80007fe:	4810      	ldr	r0, [pc, #64]	; (8000840 <HAL_ETH_MspInit+0x194>)
 8000800:	f002 fba8 	bl	8002f54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000804:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000816:	230b      	movs	r3, #11
 8000818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800081a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800081e:	4619      	mov	r1, r3
 8000820:	4808      	ldr	r0, [pc, #32]	; (8000844 <HAL_ETH_MspInit+0x198>)
 8000822:	f002 fb97 	bl	8002f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8000826:	bf00      	nop
 8000828:	3738      	adds	r7, #56	; 0x38
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	40028000 	.word	0x40028000
 8000834:	58024400 	.word	0x58024400
 8000838:	58020800 	.word	0x58020800
 800083c:	58020000 	.word	0x58020000
 8000840:	58020400 	.word	0x58020400
 8000844:	58021800 	.word	0x58021800

08000848 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800084c:	4b2e      	ldr	r3, [pc, #184]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 800084e:	4a2f      	ldr	r2, [pc, #188]	; (800090c <MX_FDCAN1_Init+0xc4>)
 8000850:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000852:	4b2d      	ldr	r3, [pc, #180]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000858:	4b2b      	ldr	r3, [pc, #172]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800085e:	4b2a      	ldr	r3, [pc, #168]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 8000860:	2201      	movs	r2, #1
 8000862:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 8000866:	2200      	movs	r2, #0
 8000868:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = ENABLE;
 800086a:	4b27      	ldr	r3, [pc, #156]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 800086c:	2201      	movs	r2, #1
 800086e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 2;
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 8000872:	2202      	movs	r2, #2
 8000874:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 8;
 8000876:	4b24      	ldr	r3, [pc, #144]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 8000878:	2208      	movs	r2, #8
 800087a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 31;
 800087c:	4b22      	ldr	r3, [pc, #136]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 800087e:	221f      	movs	r2, #31
 8000880:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 8;
 8000882:	4b21      	ldr	r3, [pc, #132]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 8000884:	2208      	movs	r2, #8
 8000886:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000888:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 800088a:	2201      	movs	r2, #1
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800088e:	4b1e      	ldr	r3, [pc, #120]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 8000890:	2201      	movs	r2, #1
 8000892:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 8000896:	2201      	movs	r2, #1
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800089a:	4b1b      	ldr	r3, [pc, #108]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 800089c:	2201      	movs	r2, #1
 800089e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80008a0:	4b19      	ldr	r3, [pc, #100]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80008ac:	4b16      	ldr	r3, [pc, #88]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 80008b2:	4b15      	ldr	r3, [pc, #84]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008b8:	4b13      	ldr	r3, [pc, #76]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80008c4:	4b10      	ldr	r3, [pc, #64]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80008ca:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80008d0:	4b0d      	ldr	r3, [pc, #52]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008d2:	2204      	movs	r2, #4
 80008d4:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008e4:	2201      	movs	r2, #1
 80008e6:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008f0:	2204      	movs	r2, #4
 80008f2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_FDCAN1_Init+0xc0>)
 80008f6:	f001 fa93 	bl	8001e20 <HAL_FDCAN_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000900:	f000 fad8 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	24000244 	.word	0x24000244
 800090c:	4000a000 	.word	0x4000a000

08000910 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b0b6      	sub	sp, #216	; 0xd8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	22b4      	movs	r2, #180	; 0xb4
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f009 fa25 	bl	8009d80 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	4a31      	ldr	r2, [pc, #196]	; (8000a00 <HAL_FDCAN_MspInit+0xf0>)
 800093c:	4293      	cmp	r3, r2
 800093e:	d15a      	bne.n	80009f6 <HAL_FDCAN_MspInit+0xe6>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000940:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000944:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8000946:	2301      	movs	r3, #1
 8000948:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 800094a:	2319      	movs	r3, #25
 800094c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 5;
 8000952:	2305      	movs	r3, #5
 8000954:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800095a:	23c0      	movs	r3, #192	; 0xc0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 8000966:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800096a:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800096c:	f107 0310 	add.w	r3, r7, #16
 8000970:	4618      	mov	r0, r3
 8000972:	f003 fc81 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <HAL_FDCAN_MspInit+0x70>
    {
      Error_Handler();
 800097c:	f000 fa9a 	bl	8000eb4 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <HAL_FDCAN_MspInit+0xf4>)
 8000982:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000986:	4a1f      	ldr	r2, [pc, #124]	; (8000a04 <HAL_FDCAN_MspInit+0xf4>)
 8000988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000990:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <HAL_FDCAN_MspInit+0xf4>)
 8000992:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <HAL_FDCAN_MspInit+0xf4>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_FDCAN_MspInit+0xf4>)
 80009a6:	f043 0308 	orr.w	r3, r3, #8
 80009aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_FDCAN_MspInit+0xf4>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b4:	f003 0308 	and.w	r3, r3, #8
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009bc:	2303      	movs	r3, #3
 80009be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80009d4:	2309      	movs	r3, #9
 80009d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009da:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009de:	4619      	mov	r1, r3
 80009e0:	4809      	ldr	r0, [pc, #36]	; (8000a08 <HAL_FDCAN_MspInit+0xf8>)
 80009e2:	f002 fab7 	bl	8002f54 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 5, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2105      	movs	r1, #5
 80009ea:	2013      	movs	r0, #19
 80009ec:	f000 fdcc 	bl	8001588 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80009f0:	2013      	movs	r0, #19
 80009f2:	f000 fde3 	bl	80015bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 80009f6:	bf00      	nop
 80009f8:	37d8      	adds	r7, #216	; 0xd8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	4000a000 	.word	0x4000a000
 8000a04:	58024400 	.word	0x58024400
 8000a08:	58020c00 	.word	0x58020c00

08000a0c <Prepare_CANFilter>:
  }
}

/* USER CODE BEGIN 1 */
void Prepare_CANFilter(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08a      	sub	sp, #40	; 0x28
 8000a10:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef sFilterConfig;

	/* Configure Rx filter */
	sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000a12:	2300      	movs	r3, #0
 8000a14:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIndex = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000a1e:	2301      	movs	r3, #1
 8000a20:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterID1 = CALIBRATION_ID;
 8000a22:	f240 7326 	movw	r3, #1830	; 0x726
 8000a26:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterID2 = 0x7FF;
 8000a28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a2c:	617b      	str	r3, [r7, #20]
	if(HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4619      	mov	r1, r3
 8000a32:	4811      	ldr	r0, [pc, #68]	; (8000a78 <Prepare_CANFilter+0x6c>)
 8000a34:	f001 fbd2 	bl	80021dc <HAL_FDCAN_ConfigFilter>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <Prepare_CANFilter+0x36>
	{
		Error_Handler();
 8000a3e:	f000 fa39 	bl	8000eb4 <Error_Handler>
	}

	/* Configure global filter to reject all non-matching frames */
	if(HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 8000a42:	2300      	movs	r3, #0
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2202      	movs	r2, #2
 8000a4a:	2102      	movs	r1, #2
 8000a4c:	480a      	ldr	r0, [pc, #40]	; (8000a78 <Prepare_CANFilter+0x6c>)
 8000a4e:	f001 fc3b 	bl	80022c8 <HAL_FDCAN_ConfigGlobalFilter>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <Prepare_CANFilter+0x50>
	{
		Error_Handler();
 8000a58:	f000 fa2c 	bl	8000eb4 <Error_Handler>
	}

	/* Activate Rx FIFO 0 notification */
	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2101      	movs	r1, #1
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <Prepare_CANFilter+0x6c>)
 8000a62:	f001 fce5 	bl	8002430 <HAL_FDCAN_ActivateNotification>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <Prepare_CANFilter+0x64>
	{
		Error_Handler();
 8000a6c:	f000 fa22 	bl	8000eb4 <Error_Handler>
	}

}
 8000a70:	bf00      	nop
 8000a72:	3720      	adds	r7, #32
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	24000244 	.word	0x24000244

08000a7c <GetCANMessage>:
  * @brief  Creates the CAN message header and Rx filter.
  * @param  Desired CAN ID
  * @retval Pointer to CAN Message object.
  */
struct CANobject *GetCANMessage(uint32_t can_id)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b084      	sub	sp, #16
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	//FDCAN_FilterTypeDef sFilterConfig;
	struct CANobject *CAN_Message;

	CAN_Message = malloc(sizeof(struct CANobject));                                        //Memory reservation for new CAN msg object.
 8000a84:	205c      	movs	r0, #92	; 0x5c
 8000a86:	f009 f965 	bl	8009d54 <malloc>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	60bb      	str	r3, [r7, #8]

	for(uint8_t index = 0; index <= 7; index++) CAN_Message->Tx_Payload[index] = 0x00;     //Cleans the msg payload.
 8000a8e:	2300      	movs	r3, #0
 8000a90:	73fb      	strb	r3, [r7, #15]
 8000a92:	e008      	b.n	8000aa6 <GetCANMessage+0x2a>
 8000a94:	7bfb      	ldrb	r3, [r7, #15]
 8000a96:	68ba      	ldr	r2, [r7, #8]
 8000a98:	4413      	add	r3, r2
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	73fb      	strb	r3, [r7, #15]
 8000aa6:	7bfb      	ldrb	r3, [r7, #15]
 8000aa8:	2b07      	cmp	r3, #7
 8000aaa:	d9f3      	bls.n	8000a94 <GetCANMessage+0x18>

	/* Prepare Tx Header */
	CAN_Message->TxHeader.Identifier = can_id;
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	687a      	ldr	r2, [r7, #4]
 8000ab0:	601a      	str	r2, [r3, #0]
	CAN_Message->TxHeader.IdType = FDCAN_STANDARD_ID;
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	605a      	str	r2, [r3, #4]
	CAN_Message->TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
	CAN_Message->TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8000abe:	68bb      	ldr	r3, [r7, #8]
 8000ac0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000ac4:	60da      	str	r2, [r3, #12]
	CAN_Message->TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
	CAN_Message->TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
	CAN_Message->TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8000ad2:	68bb      	ldr	r3, [r7, #8]
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
	CAN_Message->TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
	CAN_Message->TxHeader.MessageMarker = 0;
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]

	return CAN_Message;
 8000ae4:	68bb      	ldr	r3, [r7, #8]
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3710      	adds	r7, #16
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
	...

08000af0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <MX_FREERTOS_Init+0x18>)
 8000af6:	2100      	movs	r1, #0
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_FREERTOS_Init+0x1c>)
 8000afa:	f006 fbcf 	bl	800729c <osThreadNew>
 8000afe:	4603      	mov	r3, r0
 8000b00:	4a03      	ldr	r2, [pc, #12]	; (8000b10 <MX_FREERTOS_Init+0x20>)
 8000b02:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	0800a0e4 	.word	0x0800a0e4
 8000b0c:	08000b15 	.word	0x08000b15
 8000b10:	240002e8 	.word	0x240002e8

08000b14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  Prepare_CANFilter();
 8000b1c:	f7ff ff76 	bl	8000a0c <Prepare_CANFilter>
  CAN_Message1 = GetCANMessage(0x322);                                     //Creates a CAN Message object.
 8000b20:	f240 3022 	movw	r0, #802	; 0x322
 8000b24:	f7ff ffaa 	bl	8000a7c <GetCANMessage>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	; (8000b64 <StartDefaultTask+0x50>)
 8000b2c:	6013      	str	r3, [r2, #0]

  /* Start the FDCAN module */
	if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8000b2e:	480e      	ldr	r0, [pc, #56]	; (8000b68 <StartDefaultTask+0x54>)
 8000b30:	f001 fbf7 	bl	8002322 <HAL_FDCAN_Start>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <StartDefaultTask+0x2a>
	{
		Error_Handler();
 8000b3a:	f000 f9bb 	bl	8000eb4 <Error_Handler>
	}

  /* Infinite loop */
  for(;;)
  {
	   HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000b3e:	2102      	movs	r1, #2
 8000b40:	480a      	ldr	r0, [pc, #40]	; (8000b6c <StartDefaultTask+0x58>)
 8000b42:	f002 fbc8 	bl	80032d6 <HAL_GPIO_TogglePin>
	   HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &CAN_Message1->TxHeader, CAN_Message1->Tx_Payload); //Sends the distance to the CAN network.
 8000b46:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <StartDefaultTask+0x50>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4b05      	ldr	r3, [pc, #20]	; (8000b64 <StartDefaultTask+0x50>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	334c      	adds	r3, #76	; 0x4c
 8000b52:	461a      	mov	r2, r3
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <StartDefaultTask+0x54>)
 8000b56:	f001 fc0f 	bl	8002378 <HAL_FDCAN_AddMessageToTxFifoQ>
       osDelay(100);
 8000b5a:	2064      	movs	r0, #100	; 0x64
 8000b5c:	f006 fc30 	bl	80073c0 <osDelay>
	   HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8000b60:	e7ed      	b.n	8000b3e <StartDefaultTask+0x2a>
 8000b62:	bf00      	nop
 8000b64:	240002e4 	.word	0x240002e4
 8000b68:	24000244 	.word	0x24000244
 8000b6c:	58021000 	.word	0x58021000

08000b70 <MX_GPIO_Init>:
        * EXTI
     PA9   ------> USB_OTG_HS_VBUS
     PA10   ------> USB_OTG_HS_ID
*/
void MX_GPIO_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08c      	sub	sp, #48	; 0x30
 8000b74:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
 8000b84:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b71      	ldr	r3, [pc, #452]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b8c:	4a6f      	ldr	r2, [pc, #444]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b96:	4b6d      	ldr	r3, [pc, #436]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	61bb      	str	r3, [r7, #24]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba4:	4b69      	ldr	r3, [pc, #420]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000baa:	4a68      	ldr	r2, [pc, #416]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bb4:	4b65      	ldr	r3, [pc, #404]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b62      	ldr	r3, [pc, #392]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a60      	ldr	r2, [pc, #384]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000bca:	f043 0301 	orr.w	r3, r3, #1
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b5e      	ldr	r3, [pc, #376]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b5a      	ldr	r3, [pc, #360]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a59      	ldr	r2, [pc, #356]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b56      	ldr	r3, [pc, #344]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0302 	and.w	r3, r3, #2
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b53      	ldr	r3, [pc, #332]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a51      	ldr	r2, [pc, #324]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c06:	f043 0308 	orr.w	r3, r3, #8
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b4f      	ldr	r3, [pc, #316]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0308 	and.w	r3, r3, #8
 8000c18:	60bb      	str	r3, [r7, #8]
 8000c1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c1c:	4b4b      	ldr	r3, [pc, #300]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a4a      	ldr	r2, [pc, #296]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b47      	ldr	r3, [pc, #284]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c3a:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a42      	ldr	r2, [pc, #264]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c42:	f043 0310 	orr.w	r3, r3, #16
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b40      	ldr	r3, [pc, #256]	; (8000d4c <MX_GPIO_Init+0x1dc>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f244 0101 	movw	r1, #16385	; 0x4001
 8000c5e:	483c      	ldr	r0, [pc, #240]	; (8000d50 <MX_GPIO_Init+0x1e0>)
 8000c60:	f002 fb20 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000c64:	2200      	movs	r2, #0
 8000c66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c6a:	483a      	ldr	r0, [pc, #232]	; (8000d54 <MX_GPIO_Init+0x1e4>)
 8000c6c:	f002 fb1a 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2102      	movs	r1, #2
 8000c74:	4838      	ldr	r0, [pc, #224]	; (8000d58 <MX_GPIO_Init+0x1e8>)
 8000c76:	f002 fb15 	bl	80032a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c88:	f107 031c 	add.w	r3, r7, #28
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4833      	ldr	r0, [pc, #204]	; (8000d5c <MX_GPIO_Init+0x1ec>)
 8000c90:	f002 f960 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8000c94:	f244 0301 	movw	r3, #16385	; 0x4001
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 031c 	add.w	r3, r7, #28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4828      	ldr	r0, [pc, #160]	; (8000d50 <MX_GPIO_Init+0x1e0>)
 8000cae:	f002 f951 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 8000cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 031c 	add.w	r3, r7, #28
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4822      	ldr	r0, [pc, #136]	; (8000d54 <MX_GPIO_Init+0x1e4>)
 8000ccc:	f002 f942 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481e      	ldr	r0, [pc, #120]	; (8000d60 <MX_GPIO_Init+0x1f0>)
 8000ce6:	f002 f935 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 8000cea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4819      	ldr	r0, [pc, #100]	; (8000d64 <MX_GPIO_Init+0x1f4>)
 8000d00:	f002 f928 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 8000d04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 8000d16:	230a      	movs	r3, #10
 8000d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4810      	ldr	r0, [pc, #64]	; (8000d64 <MX_GPIO_Init+0x1f4>)
 8000d22:	f002 f917 	bl	8002f54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 8000d26:	2302      	movs	r3, #2
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 031c 	add.w	r3, r7, #28
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4806      	ldr	r0, [pc, #24]	; (8000d58 <MX_GPIO_Init+0x1e8>)
 8000d3e:	f002 f909 	bl	8002f54 <HAL_GPIO_Init>

}
 8000d42:	bf00      	nop
 8000d44:	3730      	adds	r7, #48	; 0x30
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	58024400 	.word	0x58024400
 8000d50:	58020400 	.word	0x58020400
 8000d54:	58020c00 	.word	0x58020c00
 8000d58:	58021000 	.word	0x58021000
 8000d5c:	58020800 	.word	0x58020800
 8000d60:	58021800 	.word	0x58021800
 8000d64:	58020000 	.word	0x58020000

08000d68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d6c:	f000 fae4 	bl	8001338 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d70:	f000 f812 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d74:	f7ff fefc 	bl	8000b70 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d78:	f7ff fc4c 	bl	8000614 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d7c:	f000 f9f8 	bl	8001170 <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d80:	f000 faa8 	bl	80012d4 <MX_USB_OTG_HS_USB_Init>
  MX_FDCAN1_Init();
 8000d84:	f7ff fd60 	bl	8000848 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000d88:	f006 fa3e 	bl	8007208 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000d8c:	f7ff feb0 	bl	8000af0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d90:	f006 fa5e 	bl	8007250 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <main+0x2c>
	...

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b09c      	sub	sp, #112	; 0x70
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	224c      	movs	r2, #76	; 0x4c
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f008 ffea 	bl	8009d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2220      	movs	r2, #32
 8000db0:	2100      	movs	r1, #0
 8000db2:	4618      	mov	r0, r3
 8000db4:	f008 ffe4 	bl	8009d80 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000db8:	2002      	movs	r0, #2
 8000dba:	f002 faa7 	bl	800330c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <SystemClock_Config+0xf0>)
 8000dc4:	699b      	ldr	r3, [r3, #24]
 8000dc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dca:	4a2f      	ldr	r2, [pc, #188]	; (8000e88 <SystemClock_Config+0xf0>)
 8000dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dd0:	6193      	str	r3, [r2, #24]
 8000dd2:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <SystemClock_Config+0xf0>)
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dda:	603b      	str	r3, [r7, #0]
 8000ddc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000dde:	bf00      	nop
 8000de0:	4b29      	ldr	r3, [pc, #164]	; (8000e88 <SystemClock_Config+0xf0>)
 8000de2:	699b      	ldr	r3, [r3, #24]
 8000de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dec:	d1f8      	bne.n	8000de0 <SystemClock_Config+0x48>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000dee:	4b27      	ldr	r3, [pc, #156]	; (8000e8c <SystemClock_Config+0xf4>)
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	f023 0303 	bic.w	r3, r3, #3
 8000df6:	4a25      	ldr	r2, [pc, #148]	; (8000e8c <SystemClock_Config+0xf4>)
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000dfe:	2321      	movs	r3, #33	; 0x21
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e02:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	2302      	movs	r3, #2
 8000e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e14:	2301      	movs	r3, #1
 8000e16:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000e18:	2318      	movs	r3, #24
 8000e1a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e20:	2305      	movs	r3, #5
 8000e22:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e24:	2302      	movs	r3, #2
 8000e26:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e28:	230c      	movs	r3, #12
 8000e2a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 faa1 	bl	8003380 <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000e44:	f000 f836 	bl	8000eb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	233f      	movs	r3, #63	; 0x3f
 8000e4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e54:	2308      	movs	r3, #8
 8000e56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e5c:	2340      	movs	r3, #64	; 0x40
 8000e5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e64:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e66:	2340      	movs	r3, #64	; 0x40
 8000e68:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fe34 	bl	8003adc <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000e7a:	f000 f81b 	bl	8000eb4 <Error_Handler>
  }
}
 8000e7e:	bf00      	nop
 8000e80:	3770      	adds	r7, #112	; 0x70
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	58024800 	.word	0x58024800
 8000e8c:	58024400 	.word	0x58024400

08000e90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ea2:	f000 fa85 	bl	80013b0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40010000 	.word	0x40010000

08000eb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb8:	b672      	cpsid	i
}
 8000eba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <Error_Handler+0x8>
	...

08000ec0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_MspInit+0x38>)
 8000ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ecc:	4a0a      	ldr	r2, [pc, #40]	; (8000ef8 <HAL_MspInit+0x38>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <HAL_MspInit+0x38>)
 8000ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000edc:	f003 0302 	and.w	r3, r3, #2
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	f06f 0001 	mvn.w	r0, #1
 8000eec:	f000 fb4c 	bl	8001588 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	58024400 	.word	0x58024400

08000efc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08e      	sub	sp, #56	; 0x38
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b0f      	cmp	r3, #15
 8000f08:	d844      	bhi.n	8000f94 <HAL_InitTick+0x98>
  {
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0U);
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	6879      	ldr	r1, [r7, #4]
 8000f0e:	2019      	movs	r0, #25
 8000f10:	f000 fb3a 	bl	8001588 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f14:	2019      	movs	r0, #25
 8000f16:	f000 fb51 	bl	80015bc <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8000f1a:	4a24      	ldr	r2, [pc, #144]	; (8000fac <HAL_InitTick+0xb0>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f20:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_InitTick+0xb4>)
 8000f22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f26:	4a22      	ldr	r2, [pc, #136]	; (8000fb0 <HAL_InitTick+0xb4>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000f30:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_InitTick+0xb4>)
 8000f32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f3e:	f107 020c 	add.w	r2, r7, #12
 8000f42:	f107 0310 	add.w	r3, r7, #16
 8000f46:	4611      	mov	r1, r2
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f003 f953 	bl	80041f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000f4e:	f003 f93b 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8000f52:	4603      	mov	r3, r0
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	637b      	str	r3, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5a:	4a16      	ldr	r2, [pc, #88]	; (8000fb4 <HAL_InitTick+0xb8>)
 8000f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f60:	0c9b      	lsrs	r3, r3, #18
 8000f62:	3b01      	subs	r3, #1
 8000f64:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_InitTick+0xbc>)
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_InitTick+0xc0>)
 8000f6a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <HAL_InitTick+0xbc>)
 8000f6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f72:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f74:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_InitTick+0xbc>)
 8000f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f78:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_InitTick+0xbc>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f80:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_InitTick+0xbc>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000f86:	480c      	ldr	r0, [pc, #48]	; (8000fb8 <HAL_InitTick+0xbc>)
 8000f88:	f004 fc92 	bl	80058b0 <HAL_TIM_Base_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d107      	bne.n	8000fa2 <HAL_InitTick+0xa6>
 8000f92:	e001      	b.n	8000f98 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8000f94:	2301      	movs	r3, #1
 8000f96:	e005      	b.n	8000fa4 <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000f98:	4807      	ldr	r0, [pc, #28]	; (8000fb8 <HAL_InitTick+0xbc>)
 8000f9a:	f004 fceb 	bl	8005974 <HAL_TIM_Base_Start_IT>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	3738      	adds	r7, #56	; 0x38
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	24000008 	.word	0x24000008
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	431bde83 	.word	0x431bde83
 8000fb8:	240002ec 	.word	0x240002ec
 8000fbc:	40010000 	.word	0x40010000

08000fc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc4:	e7fe      	b.n	8000fc4 <NMI_Handler+0x4>

08000fc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fca:	e7fe      	b.n	8000fca <HardFault_Handler+0x4>

08000fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fd0:	e7fe      	b.n	8000fd0 <MemManage_Handler+0x4>

08000fd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fde <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <FDCAN1_IT0_IRQHandler+0x10>)
 8000ff2:	f001 fa97 	bl	8002524 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	24000244 	.word	0x24000244

08001000 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <TIM1_UP_IRQHandler+0x10>)
 8001006:	f004 fd3b 	bl	8005a80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	240002ec 	.word	0x240002ec

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f008 fe5a 	bl	8009cfc <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	24050000 	.word	0x24050000
 8001074:	00000400 	.word	0x00000400
 8001078:	24000338 	.word	0x24000338
 800107c:	24004df0 	.word	0x24004df0

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001084:	4b32      	ldr	r3, [pc, #200]	; (8001150 <SystemInit+0xd0>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a31      	ldr	r2, [pc, #196]	; (8001150 <SystemInit+0xd0>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001094:	4b2f      	ldr	r3, [pc, #188]	; (8001154 <SystemInit+0xd4>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	2b06      	cmp	r3, #6
 800109e:	d807      	bhi.n	80010b0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010a0:	4b2c      	ldr	r3, [pc, #176]	; (8001154 <SystemInit+0xd4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f023 030f 	bic.w	r3, r3, #15
 80010a8:	4a2a      	ldr	r2, [pc, #168]	; (8001154 <SystemInit+0xd4>)
 80010aa:	f043 0307 	orr.w	r3, r3, #7
 80010ae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80010b0:	4b29      	ldr	r3, [pc, #164]	; (8001158 <SystemInit+0xd8>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a28      	ldr	r2, [pc, #160]	; (8001158 <SystemInit+0xd8>)
 80010b6:	f043 0301 	orr.w	r3, r3, #1
 80010ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <SystemInit+0xd8>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <SystemInit+0xd8>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	4924      	ldr	r1, [pc, #144]	; (8001158 <SystemInit+0xd8>)
 80010c8:	4b24      	ldr	r3, [pc, #144]	; (800115c <SystemInit+0xdc>)
 80010ca:	4013      	ands	r3, r2
 80010cc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010ce:	4b21      	ldr	r3, [pc, #132]	; (8001154 <SystemInit+0xd4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f003 0308 	and.w	r3, r3, #8
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d007      	beq.n	80010ea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010da:	4b1e      	ldr	r3, [pc, #120]	; (8001154 <SystemInit+0xd4>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 030f 	bic.w	r3, r3, #15
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <SystemInit+0xd4>)
 80010e4:	f043 0307 	orr.w	r3, r3, #7
 80010e8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ea:	4b1b      	ldr	r3, [pc, #108]	; (8001158 <SystemInit+0xd8>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010f0:	4b19      	ldr	r3, [pc, #100]	; (8001158 <SystemInit+0xd8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010f6:	4b18      	ldr	r3, [pc, #96]	; (8001158 <SystemInit+0xd8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010fc:	4b16      	ldr	r3, [pc, #88]	; (8001158 <SystemInit+0xd8>)
 80010fe:	4a18      	ldr	r2, [pc, #96]	; (8001160 <SystemInit+0xe0>)
 8001100:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001102:	4b15      	ldr	r3, [pc, #84]	; (8001158 <SystemInit+0xd8>)
 8001104:	4a17      	ldr	r2, [pc, #92]	; (8001164 <SystemInit+0xe4>)
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001108:	4b13      	ldr	r3, [pc, #76]	; (8001158 <SystemInit+0xd8>)
 800110a:	4a17      	ldr	r2, [pc, #92]	; (8001168 <SystemInit+0xe8>)
 800110c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800110e:	4b12      	ldr	r3, [pc, #72]	; (8001158 <SystemInit+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001114:	4b10      	ldr	r3, [pc, #64]	; (8001158 <SystemInit+0xd8>)
 8001116:	4a14      	ldr	r2, [pc, #80]	; (8001168 <SystemInit+0xe8>)
 8001118:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <SystemInit+0xd8>)
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001120:	4b0d      	ldr	r3, [pc, #52]	; (8001158 <SystemInit+0xd8>)
 8001122:	4a11      	ldr	r2, [pc, #68]	; (8001168 <SystemInit+0xe8>)
 8001124:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <SystemInit+0xd8>)
 8001128:	2200      	movs	r2, #0
 800112a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800112c:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <SystemInit+0xd8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a09      	ldr	r2, [pc, #36]	; (8001158 <SystemInit+0xd8>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <SystemInit+0xd8>)
 800113a:	2200      	movs	r2, #0
 800113c:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <SystemInit+0xec>)
 8001140:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001144:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	e000ed00 	.word	0xe000ed00
 8001154:	52002000 	.word	0x52002000
 8001158:	58024400 	.word	0x58024400
 800115c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001160:	02020200 	.word	0x02020200
 8001164:	01ff0000 	.word	0x01ff0000
 8001168:	01010280 	.word	0x01010280
 800116c:	52004000 	.word	0x52004000

08001170 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001174:	4b22      	ldr	r3, [pc, #136]	; (8001200 <MX_USART3_UART_Init+0x90>)
 8001176:	4a23      	ldr	r2, [pc, #140]	; (8001204 <MX_USART3_UART_Init+0x94>)
 8001178:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800117a:	4b21      	ldr	r3, [pc, #132]	; (8001200 <MX_USART3_UART_Init+0x90>)
 800117c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001180:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001182:	4b1f      	ldr	r3, [pc, #124]	; (8001200 <MX_USART3_UART_Init+0x90>)
 8001184:	2200      	movs	r2, #0
 8001186:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001188:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <MX_USART3_UART_Init+0x90>)
 800118a:	2200      	movs	r2, #0
 800118c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800118e:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <MX_USART3_UART_Init+0x90>)
 8001196:	220c      	movs	r2, #12
 8001198:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011b8:	4811      	ldr	r0, [pc, #68]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011ba:	f004 fe6d 	bl	8005e98 <HAL_UART_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011c4:	f7ff fe76 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	480d      	ldr	r0, [pc, #52]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011cc:	f005 ff0e 	bl	8006fec <HAL_UARTEx_SetTxFifoThreshold>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011d6:	f7ff fe6d 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	4808      	ldr	r0, [pc, #32]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011de:	f005 ff43 	bl	8007068 <HAL_UARTEx_SetRxFifoThreshold>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011e8:	f7ff fe64 	bl	8000eb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_USART3_UART_Init+0x90>)
 80011ee:	f005 fec4 	bl	8006f7a <HAL_UARTEx_DisableFifoMode>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80011f8:	f7ff fe5c 	bl	8000eb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2400033c 	.word	0x2400033c
 8001204:	40004800 	.word	0x40004800

08001208 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b0b6      	sub	sp, #216	; 0xd8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001220:	f107 0310 	add.w	r3, r7, #16
 8001224:	22b4      	movs	r2, #180	; 0xb4
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f008 fda9 	bl	8009d80 <memset>
  if(uartHandle->Instance==USART3)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a25      	ldr	r2, [pc, #148]	; (80012c8 <HAL_UART_MspInit+0xc0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d142      	bne.n	80012be <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001238:	2302      	movs	r3, #2
 800123a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800123c:	2300      	movs	r3, #0
 800123e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4618      	mov	r0, r3
 8001248:	f003 f816 	bl	8004278 <HAL_RCCEx_PeriphCLKConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001252:	f7ff fe2f 	bl	8000eb4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001256:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_UART_MspInit+0xc4>)
 8001258:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <HAL_UART_MspInit+0xc4>)
 800125e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001262:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_UART_MspInit+0xc4>)
 8001268:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800126c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <HAL_UART_MspInit+0xc4>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	4a14      	ldr	r2, [pc, #80]	; (80012cc <HAL_UART_MspInit+0xc4>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <HAL_UART_MspInit+0xc4>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	f003 0308 	and.w	r3, r3, #8
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 8001292:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001296:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012ac:	2307      	movs	r3, #7
 80012ae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b2:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <HAL_UART_MspInit+0xc8>)
 80012ba:	f001 fe4b 	bl	8002f54 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80012be:	bf00      	nop
 80012c0:	37d8      	adds	r7, #216	; 0xd8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40004800 	.word	0x40004800
 80012cc:	58024400 	.word	0x58024400
 80012d0:	58020c00 	.word	0x58020c00

080012d4 <MX_USB_OTG_HS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_HS init function */

void MX_USB_OTG_HS_USB_Init(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 80012d8:	bf00      	nop
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800131c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012e8:	f7ff feca 	bl	8001080 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	; (8001320 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	; (8001324 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	; (8001328 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	; (800132c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	; (8001330 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001312:	f008 fcf9 	bl	8009d08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001316:	f7ff fd27 	bl	8000d68 <main>
  bx  lr
 800131a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800131c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001320:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001324:	24000078 	.word	0x24000078
  ldr r2, =_sidata
 8001328:	0800a1c0 	.word	0x0800a1c0
  ldr r2, =_sbss
 800132c:	24000138 	.word	0x24000138
  ldr r4, =_ebss
 8001330:	24004df0 	.word	0x24004df0

08001334 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC3_IRQHandler>
	...

08001338 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800133e:	2003      	movs	r0, #3
 8001340:	f000 f917 	bl	8001572 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001344:	f002 fd80 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8001348:	4602      	mov	r2, r0
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <HAL_Init+0x68>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	0a1b      	lsrs	r3, r3, #8
 8001350:	f003 030f 	and.w	r3, r3, #15
 8001354:	4913      	ldr	r1, [pc, #76]	; (80013a4 <HAL_Init+0x6c>)
 8001356:	5ccb      	ldrb	r3, [r1, r3]
 8001358:	f003 031f 	and.w	r3, r3, #31
 800135c:	fa22 f303 	lsr.w	r3, r2, r3
 8001360:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_Init+0x68>)
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	4a0e      	ldr	r2, [pc, #56]	; (80013a4 <HAL_Init+0x6c>)
 800136c:	5cd3      	ldrb	r3, [r2, r3]
 800136e:	f003 031f 	and.w	r3, r3, #31
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	fa22 f303 	lsr.w	r3, r2, r3
 8001378:	4a0b      	ldr	r2, [pc, #44]	; (80013a8 <HAL_Init+0x70>)
 800137a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800137c:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <HAL_Init+0x74>)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001382:	200f      	movs	r0, #15
 8001384:	f7ff fdba 	bl	8000efc <HAL_InitTick>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e002      	b.n	8001398 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001392:	f7ff fd95 	bl	8000ec0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	58024400 	.word	0x58024400
 80013a4:	0800a108 	.word	0x0800a108
 80013a8:	24000004 	.word	0x24000004
 80013ac:	24000000 	.word	0x24000000

080013b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x20>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_IncTick+0x24>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <HAL_IncTick+0x24>)
 80013c2:	6013      	str	r3, [r2, #0]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	2400000c 	.word	0x2400000c
 80013d4:	240003cc 	.word	0x240003cc

080013d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b03      	ldr	r3, [pc, #12]	; (80013ec <HAL_GetTick+0x14>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	240003cc 	.word	0x240003cc

080013f0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80013f8:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001400:	4904      	ldr	r1, [pc, #16]	; (8001414 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4313      	orrs	r3, r2
 8001406:	604b      	str	r3, [r1, #4]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58000400 	.word	0x58000400

08001418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800142e:	68ba      	ldr	r2, [r7, #8]
 8001430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001434:	4013      	ands	r3, r2
 8001436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001440:	4b06      	ldr	r3, [pc, #24]	; (800145c <__NVIC_SetPriorityGrouping+0x44>)
 8001442:	4313      	orrs	r3, r2
 8001444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001446:	4a04      	ldr	r2, [pc, #16]	; (8001458 <__NVIC_SetPriorityGrouping+0x40>)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	60d3      	str	r3, [r2, #12]
}
 800144c:	bf00      	nop
 800144e:	3714      	adds	r7, #20
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00
 800145c:	05fa0000 	.word	0x05fa0000

08001460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <__NVIC_GetPriorityGrouping+0x18>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	0a1b      	lsrs	r3, r3, #8
 800146a:	f003 0307 	and.w	r3, r3, #7
}
 800146e:	4618      	mov	r0, r3
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800148a:	2b00      	cmp	r3, #0
 800148c:	db0b      	blt.n	80014a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	f003 021f 	and.w	r2, r3, #31
 8001494:	4907      	ldr	r1, [pc, #28]	; (80014b4 <__NVIC_EnableIRQ+0x38>)
 8001496:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800149a:	095b      	lsrs	r3, r3, #5
 800149c:	2001      	movs	r0, #1
 800149e:	fa00 f202 	lsl.w	r2, r0, r2
 80014a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	; (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	; (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	; 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	; 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f7ff ff4c 	bl	8001418 <__NVIC_SetPriorityGrouping>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001596:	f7ff ff63 	bl	8001460 <__NVIC_GetPriorityGrouping>
 800159a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	68b9      	ldr	r1, [r7, #8]
 80015a0:	6978      	ldr	r0, [r7, #20]
 80015a2:	f7ff ffb3 	bl	800150c <NVIC_EncodePriority>
 80015a6:	4602      	mov	r2, r0
 80015a8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015ac:	4611      	mov	r1, r2
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff82 	bl	80014b8 <__NVIC_SetPriority>
}
 80015b4:	bf00      	nop
 80015b6:	3718      	adds	r7, #24
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff ff56 	bl	800147c <__NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d101      	bne.n	80015ea <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0cf      	b.n	800178a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d106      	bne.n	8001602 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2223      	movs	r2, #35	; 0x23
 80015f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff f855 	bl	80006ac <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001602:	4b64      	ldr	r3, [pc, #400]	; (8001794 <HAL_ETH_Init+0x1bc>)
 8001604:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001608:	4a62      	ldr	r2, [pc, #392]	; (8001794 <HAL_ETH_Init+0x1bc>)
 800160a:	f043 0302 	orr.w	r3, r3, #2
 800160e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001612:	4b60      	ldr	r3, [pc, #384]	; (8001794 <HAL_ETH_Init+0x1bc>)
 8001614:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	7a1b      	ldrb	r3, [r3, #8]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d103      	bne.n	8001630 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fee1 	bl	80013f0 <HAL_SYSCFG_ETHInterfaceSelect>
 800162e:	e003      	b.n	8001638 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001630:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001634:	f7ff fedc 	bl	80013f0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001638:	4b57      	ldr	r3, [pc, #348]	; (8001798 <HAL_ETH_Init+0x1c0>)
 800163a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001652:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001654:	f7ff fec0 	bl	80013d8 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800165a:	e011      	b.n	8001680 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800165c:	f7ff febc 	bl	80013d8 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800166a:	d909      	bls.n	8001680 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	22e0      	movs	r2, #224	; 0xe0
 8001678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e084      	b.n	800178a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	2b00      	cmp	r3, #0
 8001690:	d1e4      	bne.n	800165c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 f886 	bl	80017a4 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001698:	f002 fd50 	bl	800413c <HAL_RCC_GetHCLKFreq>
 800169c:	4603      	mov	r3, r0
 800169e:	4a3f      	ldr	r2, [pc, #252]	; (800179c <HAL_ETH_Init+0x1c4>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9a      	lsrs	r2, r3, #18
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	3a01      	subs	r2, #1
 80016ac:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 fa71 	bl	8001b98 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016be:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80016c2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80016ce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016d2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	695b      	ldr	r3, [r3, #20]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d009      	beq.n	80016f6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	22e0      	movs	r2, #224	; 0xe0
 80016ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e049      	b.n	800178a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016fe:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001702:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_ETH_Init+0x1c8>)
 8001704:	4013      	ands	r3, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6952      	ldr	r2, [r2, #20]
 800170a:	0051      	lsls	r1, r2, #1
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	430b      	orrs	r3, r1
 8001712:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001716:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 fad9 	bl	8001cd2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	f000 fb1f 	bl	8001d64 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	3305      	adds	r3, #5
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	021a      	lsls	r2, r3, #8
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	3304      	adds	r3, #4
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	3303      	adds	r3, #3
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	061a      	lsls	r2, r3, #24
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	3302      	adds	r3, #2
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	041b      	lsls	r3, r3, #16
 8001758:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	3301      	adds	r3, #1
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001764:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001772:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001774:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2210      	movs	r2, #16
 8001784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	58024400 	.word	0x58024400
 8001798:	58000400 	.word	0x58000400
 800179c:	431bde83 	.word	0x431bde83
 80017a0:	ffff8001 	.word	0xffff8001

080017a4 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017b4:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017bc:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80017be:	f002 fcbd 	bl	800413c <HAL_RCC_GetHCLKFreq>
 80017c2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4a1e      	ldr	r2, [pc, #120]	; (8001840 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d908      	bls.n	80017de <HAL_ETH_SetMDIOClockRange+0x3a>
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	4a1d      	ldr	r2, [pc, #116]	; (8001844 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d804      	bhi.n	80017de <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	e027      	b.n	800182e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	4a18      	ldr	r2, [pc, #96]	; (8001844 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d908      	bls.n	80017f8 <HAL_ETH_SetMDIOClockRange+0x54>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	4a17      	ldr	r2, [pc, #92]	; (8001848 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d204      	bcs.n	80017f8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	e01a      	b.n	800182e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	4a13      	ldr	r2, [pc, #76]	; (8001848 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d303      	bcc.n	8001808 <HAL_ETH_SetMDIOClockRange+0x64>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d911      	bls.n	800182c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	4a10      	ldr	r2, [pc, #64]	; (800184c <HAL_ETH_SetMDIOClockRange+0xa8>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d908      	bls.n	8001822 <HAL_ETH_SetMDIOClockRange+0x7e>
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_ETH_SetMDIOClockRange+0xac>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d804      	bhi.n	8001822 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e005      	b.n	800182e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	e000      	b.n	800182e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800182c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68fa      	ldr	r2, [r7, #12]
 8001834:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001838:	bf00      	nop
 800183a:	3710      	adds	r7, #16
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	01312cff 	.word	0x01312cff
 8001844:	02160ebf 	.word	0x02160ebf
 8001848:	03938700 	.word	0x03938700
 800184c:	05f5e0ff 	.word	0x05f5e0ff
 8001850:	08f0d17f 	.word	0x08f0d17f

08001854 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	791b      	ldrb	r3, [r3, #4]
 800186c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800186e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	7b1b      	ldrb	r3, [r3, #12]
 8001874:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001876:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	7b5b      	ldrb	r3, [r3, #13]
 800187c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800187e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	7b9b      	ldrb	r3, [r3, #14]
 8001884:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001886:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	7bdb      	ldrb	r3, [r3, #15]
 800188c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800188e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	7c12      	ldrb	r2, [r2, #16]
 8001894:	2a00      	cmp	r2, #0
 8001896:	d102      	bne.n	800189e <ETH_SetMACConfig+0x4a>
 8001898:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800189c:	e000      	b.n	80018a0 <ETH_SetMACConfig+0x4c>
 800189e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018a0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018a2:	683a      	ldr	r2, [r7, #0]
 80018a4:	7c52      	ldrb	r2, [r2, #17]
 80018a6:	2a00      	cmp	r2, #0
 80018a8:	d102      	bne.n	80018b0 <ETH_SetMACConfig+0x5c>
 80018aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018ae:	e000      	b.n	80018b2 <ETH_SetMACConfig+0x5e>
 80018b0:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	7c9b      	ldrb	r3, [r3, #18]
 80018b8:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80018ba:	431a      	orrs	r2, r3
               macconf->Speed |
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80018c0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80018c6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	7f1b      	ldrb	r3, [r3, #28]
 80018cc:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80018ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	7f5b      	ldrb	r3, [r3, #29]
 80018d4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018d6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	7f92      	ldrb	r2, [r2, #30]
 80018dc:	2a00      	cmp	r2, #0
 80018de:	d102      	bne.n	80018e6 <ETH_SetMACConfig+0x92>
 80018e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e4:	e000      	b.n	80018e8 <ETH_SetMACConfig+0x94>
 80018e6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018e8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	7fdb      	ldrb	r3, [r3, #31]
 80018ee:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018f0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018f8:	2a00      	cmp	r2, #0
 80018fa:	d102      	bne.n	8001902 <ETH_SetMACConfig+0xae>
 80018fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001900:	e000      	b.n	8001904 <ETH_SetMACConfig+0xb0>
 8001902:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001904:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800190a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001912:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001914:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	4b56      	ldr	r3, [pc, #344]	; (8001a80 <ETH_SetMACConfig+0x22c>)
 8001926:	4013      	ands	r3, r2
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	68f9      	ldr	r1, [r7, #12]
 800192e:	430b      	orrs	r3, r1
 8001930:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001936:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800193e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001940:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001948:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800194a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001952:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001954:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800195c:	2a00      	cmp	r2, #0
 800195e:	d102      	bne.n	8001966 <ETH_SetMACConfig+0x112>
 8001960:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001964:	e000      	b.n	8001968 <ETH_SetMACConfig+0x114>
 8001966:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001968:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800196e:	4313      	orrs	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	685a      	ldr	r2, [r3, #4]
 8001978:	4b42      	ldr	r3, [pc, #264]	; (8001a84 <ETH_SetMACConfig+0x230>)
 800197a:	4013      	ands	r3, r2
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	6812      	ldr	r2, [r2, #0]
 8001980:	68f9      	ldr	r1, [r7, #12]
 8001982:	430b      	orrs	r3, r1
 8001984:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800198c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001992:	4313      	orrs	r3, r2
 8001994:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <ETH_SetMACConfig+0x234>)
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	6812      	ldr	r2, [r2, #0]
 80019a4:	68f9      	ldr	r1, [r7, #12]
 80019a6:	430b      	orrs	r3, r1
 80019a8:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80019b0:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80019be:	2a00      	cmp	r2, #0
 80019c0:	d101      	bne.n	80019c6 <ETH_SetMACConfig+0x172>
 80019c2:	2280      	movs	r2, #128	; 0x80
 80019c4:	e000      	b.n	80019c8 <ETH_SetMACConfig+0x174>
 80019c6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80019c8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ce:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019da:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80019de:	4013      	ands	r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	68f9      	ldr	r1, [r7, #12]
 80019e6:	430b      	orrs	r3, r1
 80019e8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80019f0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80019f8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a06:	f023 0103 	bic.w	r1, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001a1e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001a3a:	2a00      	cmp	r2, #0
 8001a3c:	d101      	bne.n	8001a42 <ETH_SetMACConfig+0x1ee>
 8001a3e:	2240      	movs	r2, #64	; 0x40
 8001a40:	e000      	b.n	8001a44 <ETH_SetMACConfig+0x1f0>
 8001a42:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a44:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001a4c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001a56:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001a64:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	00048083 	.word	0x00048083
 8001a84:	c0f88000 	.word	0xc0f88000
 8001a88:	fffffef0 	.word	0xfffffef0

08001a8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b38      	ldr	r3, [pc, #224]	; (8001b84 <ETH_SetDMAConfig+0xf8>)
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	683a      	ldr	r2, [r7, #0]
 8001aa6:	6811      	ldr	r1, [r2, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	430b      	orrs	r3, r1
 8001aae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ab2:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001abe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	7b1b      	ldrb	r3, [r3, #12]
 8001ac4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4b2c      	ldr	r3, [pc, #176]	; (8001b88 <ETH_SetDMAConfig+0xfc>)
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6812      	ldr	r2, [r2, #0]
 8001adc:	68f9      	ldr	r1, [r7, #12]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ae4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	7b5b      	ldrb	r3, [r3, #13]
 8001aea:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001af0:	4313      	orrs	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <ETH_SetDMAConfig+0x100>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	430b      	orrs	r3, r1
 8001b0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b10:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	7d1b      	ldrb	r3, [r3, #20]
 8001b1c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b1e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	7f5b      	ldrb	r3, [r3, #29]
 8001b24:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b26:	4313      	orrs	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b32:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001b36:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <ETH_SetDMAConfig+0x104>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6812      	ldr	r2, [r2, #0]
 8001b3e:	68f9      	ldr	r1, [r7, #12]
 8001b40:	430b      	orrs	r3, r1
 8001b42:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b46:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	7f1b      	ldrb	r3, [r3, #28]
 8001b4e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b60:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <ETH_SetDMAConfig+0x108>)
 8001b66:	4013      	ands	r3, r2
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	6812      	ldr	r2, [r2, #0]
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	430b      	orrs	r3, r1
 8001b70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b74:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	ffff87fd 	.word	0xffff87fd
 8001b88:	ffff2ffe 	.word	0xffff2ffe
 8001b8c:	fffec000 	.word	0xfffec000
 8001b90:	ffc0efef 	.word	0xffc0efef
 8001b94:	7fc0ffff 	.word	0x7fc0ffff

08001b98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b0a4      	sub	sp, #144	; 0x90
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bea:	2300      	movs	r3, #0
 8001bec:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001bf0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001bf4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c12:	2300      	movs	r3, #0
 8001c14:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c30:	2320      	movs	r3, #32
 8001c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c36:	2301      	movs	r3, #1
 8001c38:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c42:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001c4c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c54:	2302      	movs	r3, #2
 8001c56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c72:	2300      	movs	r3, #0
 8001c74:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fde6 	bl	8001854 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001ca2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ca6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001cac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cb0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001cb8:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001cbc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff fee1 	bl	8001a8c <ETH_SetDMAConfig>
}
 8001cca:	bf00      	nop
 8001ccc:	3790      	adds	r7, #144	; 0x90
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e01d      	b.n	8001d1c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68d9      	ldr	r1, [r3, #12]
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	2200      	movs	r2, #0
 8001d08:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	68fa      	ldr	r2, [r7, #12]
 8001d10:	3206      	adds	r2, #6
 8001d12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d9de      	bls.n	8001ce0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d30:	461a      	mov	r2, r3
 8001d32:	2303      	movs	r3, #3
 8001d34:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d44:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d54:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr

08001d64 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	e023      	b.n	8001dba <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6919      	ldr	r1, [r3, #16]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2200      	movs	r2, #0
 8001da6:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	3212      	adds	r2, #18
 8001db0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	3301      	adds	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d9d8      	bls.n	8001d72 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de6:	461a      	mov	r2, r3
 8001de8:	2303      	movs	r3, #3
 8001dea:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dfa:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e0e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001e12:	bf00      	nop
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b098      	sub	sp, #96	; 0x60
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001e28:	4a84      	ldr	r2, [pc, #528]	; (800203c <HAL_FDCAN_Init+0x21c>)
 8001e2a:	f107 030c 	add.w	r3, r7, #12
 8001e2e:	4611      	mov	r1, r2
 8001e30:	224c      	movs	r2, #76	; 0x4c
 8001e32:	4618      	mov	r0, r3
 8001e34:	f007 ff96 	bl	8009d64 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d101      	bne.n	8001e42 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1c6      	b.n	80021d0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a7e      	ldr	r2, [pc, #504]	; (8002040 <HAL_FDCAN_Init+0x220>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d106      	bne.n	8001e5a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7fe fd4e 	bl	8000910 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0210 	bic.w	r2, r2, #16
 8001e82:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e84:	f7ff faa8 	bl	80013d8 <HAL_GetTick>
 8001e88:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001e8a:	e014      	b.n	8001eb6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001e8c:	f7ff faa4 	bl	80013d8 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b0a      	cmp	r3, #10
 8001e98:	d90d      	bls.n	8001eb6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ea0:	f043 0201 	orr.w	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2203      	movs	r2, #3
 8001eae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e18c      	b.n	80021d0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b08      	cmp	r3, #8
 8001ec2:	d0e3      	beq.n	8001e8c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	699a      	ldr	r2, [r3, #24]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f042 0201 	orr.w	r2, r2, #1
 8001ed2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ed4:	f7ff fa80 	bl	80013d8 <HAL_GetTick>
 8001ed8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001eda:	e014      	b.n	8001f06 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001edc:	f7ff fa7c 	bl	80013d8 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b0a      	cmp	r3, #10
 8001ee8:	d90d      	bls.n	8001f06 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ef0:	f043 0201 	orr.w	r2, r3, #1
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2203      	movs	r2, #3
 8001efe:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e164      	b.n	80021d0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0e3      	beq.n	8001edc <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f042 0202 	orr.w	r2, r2, #2
 8001f22:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	7c1b      	ldrb	r3, [r3, #16]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d108      	bne.n	8001f3e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	699a      	ldr	r2, [r3, #24]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f3a:	619a      	str	r2, [r3, #24]
 8001f3c:	e007      	b.n	8001f4e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699a      	ldr	r2, [r3, #24]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	7c5b      	ldrb	r3, [r3, #17]
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d108      	bne.n	8001f68 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	699a      	ldr	r2, [r3, #24]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001f64:	619a      	str	r2, [r3, #24]
 8001f66:	e007      	b.n	8001f78 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699a      	ldr	r2, [r3, #24]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001f76:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7c9b      	ldrb	r3, [r3, #18]
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d108      	bne.n	8001f92 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699a      	ldr	r2, [r3, #24]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f8e:	619a      	str	r2, [r3, #24]
 8001f90:	e007      	b.n	8001fa2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001fa0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	689a      	ldr	r2, [r3, #8]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699a      	ldr	r2, [r3, #24]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001fc6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0210 	bic.w	r2, r2, #16
 8001fd6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d108      	bne.n	8001ff2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f042 0204 	orr.w	r2, r2, #4
 8001fee:	619a      	str	r2, [r3, #24]
 8001ff0:	e030      	b.n	8002054 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d02c      	beq.n	8002054 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d020      	beq.n	8002044 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699a      	ldr	r2, [r3, #24]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002010:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f042 0210 	orr.w	r2, r2, #16
 8002020:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b03      	cmp	r3, #3
 8002028:	d114      	bne.n	8002054 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0220 	orr.w	r2, r2, #32
 8002038:	619a      	str	r2, [r3, #24]
 800203a:	e00b      	b.n	8002054 <HAL_FDCAN_Init+0x234>
 800203c:	0800a080 	.word	0x0800a080
 8002040:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	699a      	ldr	r2, [r3, #24]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f042 0220 	orr.w	r2, r2, #32
 8002052:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	3b01      	subs	r3, #1
 800205a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	3b01      	subs	r3, #1
 8002062:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002064:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800206c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	3b01      	subs	r3, #1
 8002076:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800207c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800207e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002088:	d115      	bne.n	80020b6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800208e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002094:	3b01      	subs	r3, #1
 8002096:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8002098:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	3b01      	subs	r3, #1
 80020a0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80020a2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	3b01      	subs	r3, #1
 80020ac:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80020b2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80020b4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00a      	beq.n	80020d4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020dc:	4413      	add	r3, r2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d011      	beq.n	8002106 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80020ea:	f023 0107 	bic.w	r1, r3, #7
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	3360      	adds	r3, #96	; 0x60
 80020f6:	443b      	add	r3, r7
 80020f8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	430a      	orrs	r2, r1
 8002102:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d011      	beq.n	8002132 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002116:	f023 0107 	bic.w	r1, r3, #7
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	3360      	adds	r3, #96	; 0x60
 8002122:	443b      	add	r3, r7
 8002124:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002136:	2b00      	cmp	r3, #0
 8002138:	d012      	beq.n	8002160 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002142:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	3360      	adds	r3, #96	; 0x60
 800214e:	443b      	add	r3, r7
 8002150:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002154:	011a      	lsls	r2, r3, #4
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002164:	2b00      	cmp	r3, #0
 8002166:	d012      	beq.n	800218e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002170:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	3360      	adds	r3, #96	; 0x60
 800217c:	443b      	add	r3, r7
 800217e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8002182:	021a      	lsls	r2, r3, #8
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a11      	ldr	r2, [pc, #68]	; (80021d8 <HAL_FDCAN_Init+0x3b8>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d107      	bne.n	80021a8 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f022 0203 	bic.w	r2, r2, #3
 80021a6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f000 fcc3 	bl	8002b4c <FDCAN_CalcultateRamBlockAddresses>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80021cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3760      	adds	r7, #96	; 0x60
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	4000a000 	.word	0x4000a000

080021dc <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 80021dc:	b480      	push	{r7}
 80021de:	b087      	sub	sp, #28
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80021ec:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d002      	beq.n	80021fa <HAL_FDCAN_ConfigFilter+0x1e>
 80021f4:	7bfb      	ldrb	r3, [r7, #15]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d157      	bne.n	80022aa <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d12b      	bne.n	800225a <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	2b07      	cmp	r3, #7
 8002208:	d10d      	bne.n	8002226 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	69db      	ldr	r3, [r3, #28]
 8002214:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8002216:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800221c:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800221e:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e00e      	b.n	8002244 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002232:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800223a:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002240:	4313      	orrs	r3, r2
 8002242:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	4413      	add	r3, r2
 8002250:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	601a      	str	r2, [r3, #0]
 8002258:	e025      	b.n	80022a6 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	075a      	lsls	r2, r3, #29
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b07      	cmp	r3, #7
 800226e:	d103      	bne.n	8002278 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e006      	b.n	8002286 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	079a      	lsls	r2, r3, #30
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3304      	adds	r3, #4
 800229e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e008      	b.n	80022bc <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80022b0:	f043 0202 	orr.w	r2, r3, #2
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	371c      	adds	r7, #28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b085      	sub	sp, #20
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
 80022d4:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d110      	bne.n	8002304 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80022ea:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 80022f0:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80022fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8002300:	2300      	movs	r3, #0
 8002302:	e008      	b.n	8002316 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800230a:	f043 0204 	orr.w	r2, r3, #4
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
  }
}
 8002316:	4618      	mov	r0, r3
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr

08002322 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002322:	b480      	push	{r7}
 8002324:	b083      	sub	sp, #12
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b01      	cmp	r3, #1
 8002334:	d111      	bne.n	800235a <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2202      	movs	r2, #2
 800233a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699a      	ldr	r2, [r3, #24]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 0201 	bic.w	r2, r2, #1
 800234c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8002356:	2300      	movs	r3, #0
 8002358:	e008      	b.n	800236c <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002360:	f043 0204 	orr.w	r2, r3, #4
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
  }
}
 800236c:	4618      	mov	r0, r3
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	60f8      	str	r0, [r7, #12]
 8002380:	60b9      	str	r1, [r7, #8]
 8002382:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d141      	bne.n	8002414 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002398:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d109      	bne.n	80023b4 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023a6:	f043 0220 	orr.w	r2, r3, #32
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e038      	b.n	8002426 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d009      	beq.n	80023d8 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80023ca:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e026      	b.n	8002426 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023e0:	0c1b      	lsrs	r3, r3, #16
 80023e2:	f003 031f 	and.w	r3, r3, #31
 80023e6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	687a      	ldr	r2, [r7, #4]
 80023ec:	68b9      	ldr	r1, [r7, #8]
 80023ee:	68f8      	ldr	r0, [r7, #12]
 80023f0:	f000 fd32 	bl	8002e58 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002400:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002404:	2201      	movs	r2, #1
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	409a      	lsls	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8002410:	2300      	movs	r3, #0
 8002412:	e008      	b.n	8002426 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800241a:	f043 0208 	orr.w	r2, r3, #8
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
  }
}
 8002426:	4618      	mov	r0, r3
 8002428:	3718      	adds	r7, #24
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8002442:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8002444:	7dfb      	ldrb	r3, [r7, #23]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d002      	beq.n	8002450 <HAL_FDCAN_ActivateNotification+0x20>
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	2b02      	cmp	r3, #2
 800244e:	d155      	bne.n	80024fc <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	4013      	ands	r3, r2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d108      	bne.n	8002470 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	65da      	str	r2, [r3, #92]	; 0x5c
 800246e:	e014      	b.n	800249a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	4013      	ands	r3, r2
 800247a:	68ba      	ldr	r2, [r7, #8]
 800247c:	429a      	cmp	r2, r3
 800247e:	d108      	bne.n	8002492 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0202 	orr.w	r2, r2, #2
 800248e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002490:	e003      	b.n	800249a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2203      	movs	r2, #3
 8002498:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d009      	beq.n	80024b8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	430a      	orrs	r2, r1
 80024b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d009      	beq.n	80024d6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_FDCAN_ActivateNotification+0xec>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	68fa      	ldr	r2, [r7, #12]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	430b      	orrs	r3, r1
 80024e8:	6553      	str	r3, [r2, #84]	; 0x54
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_FDCAN_ActivateNotification+0xf0>)
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	0f9b      	lsrs	r3, r3, #30
 80024f2:	490b      	ldr	r1, [pc, #44]	; (8002520 <HAL_FDCAN_ActivateNotification+0xf0>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80024f8:	2300      	movs	r3, #0
 80024fa:	e008      	b.n	800250e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002502:	f043 0202 	orr.w	r2, r3, #2
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
  }
}
 800250e:	4618      	mov	r0, r3
 8002510:	371c      	adds	r7, #28
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	3fcfffff 	.word	0x3fcfffff
 8002520:	4000a800 	.word	0x4000a800

08002524 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b096      	sub	sp, #88	; 0x58
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800252c:	4b9a      	ldr	r3, [pc, #616]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	079b      	lsls	r3, r3, #30
 8002532:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8002534:	4b98      	ldr	r3, [pc, #608]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	079b      	lsls	r3, r3, #30
 800253a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800253c:	4013      	ands	r3, r2
 800253e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002546:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800254a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002552:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002554:	4013      	ands	r3, r2
 8002556:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800256c:	4013      	ands	r3, r2
 800256e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002576:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800257a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002584:	4013      	ands	r3, r2
 8002586:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258e:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8002592:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800259c:	4013      	ands	r3, r2
 800259e:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025b4:	4013      	ands	r3, r2
 80025b6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80025c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d010      	beq.n	80025f6 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80025d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d6:	0a1b      	lsrs	r3, r3, #8
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d00a      	beq.n	80025f6 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025e8:	651a      	str	r2, [r3, #80]	; 0x50
 80025ea:	4b6b      	ldr	r3, [pc, #428]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fa5f 	bl	8002ab4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80025f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025f8:	0a9b      	lsrs	r3, r3, #10
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d01d      	beq.n	800263e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002604:	0a9b      	lsrs	r3, r3, #10
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d017      	beq.n	800263e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8002620:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002622:	4013      	ands	r3, r2
 8002624:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800262e:	651a      	str	r2, [r3, #80]	; 0x50
 8002630:	4b59      	ldr	r3, [pc, #356]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 8002632:	2200      	movs	r2, #0
 8002634:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8002636:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fa12 	bl	8002a62 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800263e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00d      	beq.n	8002660 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_FDCAN_IRQHandler+0x278>)
 800264c:	400b      	ands	r3, r1
 800264e:	6513      	str	r3, [r2, #80]	; 0x50
 8002650:	4a51      	ldr	r2, [pc, #324]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 8002652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002654:	0f9b      	lsrs	r3, r3, #30
 8002656:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8002658:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f9c0 	bl	80029e0 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00d      	beq.n	8002682 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800266c:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_FDCAN_IRQHandler+0x278>)
 800266e:	400b      	ands	r3, r1
 8002670:	6513      	str	r3, [r2, #80]	; 0x50
 8002672:	4a49      	ldr	r2, [pc, #292]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 8002674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002676:	0f9b      	lsrs	r3, r3, #30
 8002678:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800267a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f9ba 	bl	80029f6 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8002682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00d      	beq.n	80026a4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800268e:	4b43      	ldr	r3, [pc, #268]	; (800279c <HAL_FDCAN_IRQHandler+0x278>)
 8002690:	400b      	ands	r3, r1
 8002692:	6513      	str	r3, [r2, #80]	; 0x50
 8002694:	4a40      	ldr	r2, [pc, #256]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 8002696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002698:	0f9b      	lsrs	r3, r3, #30
 800269a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800269c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f9b4 	bl	8002a0c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80026a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00d      	beq.n	80026c6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80026b0:	4b3a      	ldr	r3, [pc, #232]	; (800279c <HAL_FDCAN_IRQHandler+0x278>)
 80026b2:	400b      	ands	r3, r1
 80026b4:	6513      	str	r3, [r2, #80]	; 0x50
 80026b6:	4a38      	ldr	r2, [pc, #224]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 80026b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80026ba:	0f9b      	lsrs	r3, r3, #30
 80026bc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80026be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f9ae 	bl	8002a22 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80026c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c8:	0adb      	lsrs	r3, r3, #11
 80026ca:	f003 0301 	and.w	r3, r3, #1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d010      	beq.n	80026f4 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80026d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d4:	0adb      	lsrs	r3, r3, #11
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026e6:	651a      	str	r2, [r3, #80]	; 0x50
 80026e8:	4b2b      	ldr	r3, [pc, #172]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f9a2 	bl	8002a38 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80026f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f6:	0a5b      	lsrs	r3, r3, #9
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01d      	beq.n	800273c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002702:	0a5b      	lsrs	r3, r3, #9
 8002704:	f003 0301 	and.w	r3, r3, #1
 8002708:	2b00      	cmp	r3, #0
 800270a:	d017      	beq.n	800273c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002714:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800271e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002720:	4013      	ands	r3, r2
 8002722:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f44f 7200 	mov.w	r2, #512	; 0x200
 800272c:	651a      	str	r2, [r3, #80]	; 0x50
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8002734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f000 f988 	bl	8002a4c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 800273c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800273e:	0cdb      	lsrs	r3, r3, #19
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d010      	beq.n	800276a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	0cdb      	lsrs	r3, r3, #19
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b00      	cmp	r3, #0
 8002752:	d00a      	beq.n	800276a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800275c:	651a      	str	r2, [r3, #80]	; 0x50
 800275e:	4b0e      	ldr	r3, [pc, #56]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 8002760:	2200      	movs	r2, #0
 8002762:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f987 	bl	8002a78 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800276a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	f003 0301 	and.w	r3, r3, #1
 8002772:	2b00      	cmp	r3, #0
 8002774:	d016      	beq.n	80027a4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002778:	0c1b      	lsrs	r3, r3, #16
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d010      	beq.n	80027a4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800278a:	651a      	str	r2, [r3, #80]	; 0x50
 800278c:	4b02      	ldr	r3, [pc, #8]	; (8002798 <HAL_FDCAN_IRQHandler+0x274>)
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	e004      	b.n	80027a0 <HAL_FDCAN_IRQHandler+0x27c>
 8002796:	bf00      	nop
 8002798:	4000a800 	.word	0x4000a800
 800279c:	3fcfffff 	.word	0x3fcfffff
 80027a0:	f000 f974 	bl	8002a8c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80027a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a6:	0c9b      	lsrs	r3, r3, #18
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d010      	beq.n	80027d2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	0c9b      	lsrs	r3, r3, #18
 80027b4:	f003 0301 	and.w	r3, r3, #1
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d00a      	beq.n	80027d2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80027c4:	651a      	str	r2, [r3, #80]	; 0x50
 80027c6:	4b83      	ldr	r3, [pc, #524]	; (80029d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 f967 	bl	8002aa0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80027d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d4:	0c5b      	lsrs	r3, r3, #17
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d015      	beq.n	800280a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	0c5b      	lsrs	r3, r3, #17
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00f      	beq.n	800280a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027f2:	651a      	str	r2, [r3, #80]	; 0x50
 80027f4:	4b77      	ldr	r3, [pc, #476]	; (80029d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002800:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800280a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d00d      	beq.n	800282c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002816:	4b70      	ldr	r3, [pc, #448]	; (80029d8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8002818:	400b      	ands	r3, r1
 800281a:	6513      	str	r3, [r2, #80]	; 0x50
 800281c:	4a6d      	ldr	r2, [pc, #436]	; (80029d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 800281e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002820:	0f9b      	lsrs	r3, r3, #30
 8002822:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002824:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f958 	bl	8002adc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800282c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800282e:	2b00      	cmp	r3, #0
 8002830:	d011      	beq.n	8002856 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002838:	4b67      	ldr	r3, [pc, #412]	; (80029d8 <HAL_FDCAN_IRQHandler+0x4b4>)
 800283a:	400b      	ands	r3, r1
 800283c:	6513      	str	r3, [r2, #80]	; 0x50
 800283e:	4a65      	ldr	r2, [pc, #404]	; (80029d4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8002840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002842:	0f9b      	lsrs	r3, r3, #30
 8002844:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800284c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a60      	ldr	r2, [pc, #384]	; (80029dc <HAL_FDCAN_IRQHandler+0x4b8>)
 800285c:	4293      	cmp	r3, r2
 800285e:	f040 80ac 	bne.w	80029ba <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f003 0303 	and.w	r3, r3, #3
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 80a4 	beq.w	80029ba <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	f003 030f 	and.w	r3, r3, #15
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002886:	4013      	ands	r3, r2
 8002888:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002894:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800289e:	4013      	ands	r3, r2
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	6a1b      	ldr	r3, [r3, #32]
 80028a8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b6:	4013      	ands	r3, r2
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	6a1b      	ldr	r3, [r3, #32]
 80028c0:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80028c4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028cc:	6a3a      	ldr	r2, [r7, #32]
 80028ce:	4013      	ands	r3, r2
 80028d0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80028dc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002906:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8002908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8f1 	bl	8002af2 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8002910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002912:	2b00      	cmp	r3, #0
 8002914:	d007      	beq.n	8002926 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800291c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800291e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f8f1 	bl	8002b08 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01a      	beq.n	8002968 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	099b      	lsrs	r3, r3, #6
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d014      	beq.n	8002968 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	b29b      	uxth	r3, r3
 8002948:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002954:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	2240      	movs	r2, #64	; 0x40
 800295c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800295e:	68fa      	ldr	r2, [r7, #12]
 8002960:	6939      	ldr	r1, [r7, #16]
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f8db 	bl	8002b1e <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002974:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8002976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f8dc 	bl	8002b36 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800297e:	6a3b      	ldr	r3, [r7, #32]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	69fa      	ldr	r2, [r7, #28]
 80029a8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d002      	beq.n	80029ca <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80029c4:	6878      	ldr	r0, [r7, #4]
 80029c6:	f000 f87f 	bl	8002ac8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80029ca:	bf00      	nop
 80029cc:	3758      	adds	r7, #88	; 0x58
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	4000a800 	.word	0x4000a800
 80029d8:	3fcfffff 	.word	0x3fcfffff
 80029dc:	4000a000 	.word	0x4000a000

080029e0 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002a00:	bf00      	nop
 8002a02:	370c      	adds	r7, #12
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002a56:	bf00      	nop
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
 8002afa:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr

08002b1e <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	b085      	sub	sp, #20
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	60f8      	str	r0, [r7, #12]
 8002b26:	60b9      	str	r1, [r7, #8]
 8002b28:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8002b2a:	bf00      	nop
 8002b2c:	3714      	adds	r7, #20
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b083      	sub	sp, #12
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002b62:	4ba7      	ldr	r3, [pc, #668]	; (8002e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002b64:	4013      	ands	r3, r2
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	0091      	lsls	r1, r2, #2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6812      	ldr	r2, [r2, #0]
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b7c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	4413      	add	r3, r2
 8002b98:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002ba2:	4b97      	ldr	r3, [pc, #604]	; (8002e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	0091      	lsls	r1, r2, #2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	430b      	orrs	r3, r1
 8002bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	041a      	lsls	r2, r3, #16
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	4413      	add	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8002be4:	4b86      	ldr	r3, [pc, #536]	; (8002e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	0091      	lsls	r1, r2, #2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002bfe:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	041a      	lsls	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4413      	add	r3, r2
 8002c22:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002c2c:	4b74      	ldr	r3, [pc, #464]	; (8002e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	0091      	lsls	r1, r2, #2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002c46:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	041a      	lsls	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	430a      	orrs	r2, r1
 8002c56:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c62:	fb02 f303 	mul.w	r3, r2, r3
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4413      	add	r3, r2
 8002c6a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002c74:	4b62      	ldr	r3, [pc, #392]	; (8002e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002c76:	4013      	ands	r3, r2
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	0091      	lsls	r1, r2, #2
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6812      	ldr	r2, [r2, #0]
 8002c80:	430b      	orrs	r3, r1
 8002c82:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8002c8e:	fb02 f303 	mul.w	r3, r2, r3
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	4413      	add	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8002ca0:	4b57      	ldr	r3, [pc, #348]	; (8002e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	68ba      	ldr	r2, [r7, #8]
 8002ca6:	0091      	lsls	r1, r2, #2
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6812      	ldr	r2, [r2, #0]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002cba:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc2:	041a      	lsls	r2, r3, #16
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	68ba      	ldr	r2, [r7, #8]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ce2:	4b47      	ldr	r3, [pc, #284]	; (8002e00 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	0091      	lsls	r1, r2, #2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	430b      	orrs	r3, r1
 8002cf0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002cfc:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d04:	041a      	lsls	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002d18:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d20:	061a      	lsls	r2, r3, #24
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	430a      	orrs	r2, r1
 8002d28:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d30:	4b34      	ldr	r3, [pc, #208]	; (8002e04 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8002d32:	4413      	add	r3, r2
 8002d34:	009a      	lsls	r2, r3, #2
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	441a      	add	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	441a      	add	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002d66:	fb01 f303 	mul.w	r3, r1, r3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	441a      	add	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8002d7e:	fb01 f303 	mul.w	r3, r1, r3
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	441a      	add	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	00db      	lsls	r3, r3, #3
 8002db0:	441a      	add	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	441a      	add	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8002de2:	fb01 f303 	mul.w	r3, r1, r3
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	441a      	add	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d915      	bls.n	8002e28 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002dfc:	e006      	b.n	8002e0c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8002dfe:	bf00      	nop
 8002e00:	ffff0003 	.word	0xffff0003
 8002e04:	10002b00 	.word	0x10002b00
 8002e08:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002e12:	f043 0220 	orr.w	r2, r3, #32
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2203      	movs	r2, #3
 8002e20:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e010      	b.n	8002e4a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	e005      	b.n	8002e3c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d3f3      	bcc.n	8002e30 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop

08002e58 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	; 0x24
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10a      	bne.n	8002e84 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002e76:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61fb      	str	r3, [r7, #28]
 8002e82:	e00a      	b.n	8002e9a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002e8c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002e92:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002e94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002e98:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002ea4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002eaa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002eb0:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ec4:	6839      	ldr	r1, [r7, #0]
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
 8002eec:	e020      	b.n	8002f30 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3303      	adds	r3, #3
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	3302      	adds	r3, #2
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	440b      	add	r3, r1
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002f06:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	6879      	ldr	r1, [r7, #4]
 8002f0e:	440b      	add	r3, r1
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002f14:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	440a      	add	r2, r1
 8002f1c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002f1e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	3304      	adds	r3, #4
 8002f28:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	4a06      	ldr	r2, [pc, #24]	; (8002f50 <FDCAN_CopyMessageToRAM+0xf8>)
 8002f38:	5cd3      	ldrb	r3, [r2, r3]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d3d5      	bcc.n	8002eee <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	3724      	adds	r7, #36	; 0x24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	0800a118 	.word	0x0800a118

08002f54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	; 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002f62:	4b86      	ldr	r3, [pc, #536]	; (800317c <HAL_GPIO_Init+0x228>)
 8002f64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002f66:	e18c      	b.n	8003282 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	2101      	movs	r1, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa01 f303 	lsl.w	r3, r1, r3
 8002f74:	4013      	ands	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 817e 	beq.w	800327c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f003 0303 	and.w	r3, r3, #3
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d005      	beq.n	8002f98 <HAL_GPIO_Init+0x44>
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d130      	bne.n	8002ffa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	2203      	movs	r2, #3
 8002fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002fce:	2201      	movs	r2, #1
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	f003 0201 	and.w	r2, r3, #1
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f003 0303 	and.w	r3, r3, #3
 8003002:	2b03      	cmp	r3, #3
 8003004:	d017      	beq.n	8003036 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	2203      	movs	r2, #3
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	4013      	ands	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	fa02 f303 	lsl.w	r3, r2, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69ba      	ldr	r2, [r7, #24]
 8003034:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d123      	bne.n	800308a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	08da      	lsrs	r2, r3, #3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3208      	adds	r2, #8
 800304a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800304e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	f003 0307 	and.w	r3, r3, #7
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	220f      	movs	r2, #15
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	4013      	ands	r3, r2
 8003064:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	691a      	ldr	r2, [r3, #16]
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	08da      	lsrs	r2, r3, #3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	3208      	adds	r2, #8
 8003084:	69b9      	ldr	r1, [r7, #24]
 8003086:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	2203      	movs	r2, #3
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4013      	ands	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f003 0203 	and.w	r2, r3, #3
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80d8 	beq.w	800327c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030cc:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <HAL_GPIO_Init+0x22c>)
 80030ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030d2:	4a2b      	ldr	r2, [pc, #172]	; (8003180 <HAL_GPIO_Init+0x22c>)
 80030d4:	f043 0302 	orr.w	r3, r3, #2
 80030d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80030dc:	4b28      	ldr	r3, [pc, #160]	; (8003180 <HAL_GPIO_Init+0x22c>)
 80030de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ea:	4a26      	ldr	r2, [pc, #152]	; (8003184 <HAL_GPIO_Init+0x230>)
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	089b      	lsrs	r3, r3, #2
 80030f0:	3302      	adds	r3, #2
 80030f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	f003 0303 	and.w	r3, r3, #3
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	220f      	movs	r2, #15
 8003102:	fa02 f303 	lsl.w	r3, r2, r3
 8003106:	43db      	mvns	r3, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4013      	ands	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a1d      	ldr	r2, [pc, #116]	; (8003188 <HAL_GPIO_Init+0x234>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d04a      	beq.n	80031ac <HAL_GPIO_Init+0x258>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a1c      	ldr	r2, [pc, #112]	; (800318c <HAL_GPIO_Init+0x238>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d02b      	beq.n	8003176 <HAL_GPIO_Init+0x222>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1b      	ldr	r2, [pc, #108]	; (8003190 <HAL_GPIO_Init+0x23c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d025      	beq.n	8003172 <HAL_GPIO_Init+0x21e>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1a      	ldr	r2, [pc, #104]	; (8003194 <HAL_GPIO_Init+0x240>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d01f      	beq.n	800316e <HAL_GPIO_Init+0x21a>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a19      	ldr	r2, [pc, #100]	; (8003198 <HAL_GPIO_Init+0x244>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d019      	beq.n	800316a <HAL_GPIO_Init+0x216>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a18      	ldr	r2, [pc, #96]	; (800319c <HAL_GPIO_Init+0x248>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d013      	beq.n	8003166 <HAL_GPIO_Init+0x212>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a17      	ldr	r2, [pc, #92]	; (80031a0 <HAL_GPIO_Init+0x24c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d00d      	beq.n	8003162 <HAL_GPIO_Init+0x20e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_GPIO_Init+0x250>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d007      	beq.n	800315e <HAL_GPIO_Init+0x20a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <HAL_GPIO_Init+0x254>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d101      	bne.n	800315a <HAL_GPIO_Init+0x206>
 8003156:	2309      	movs	r3, #9
 8003158:	e029      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 800315a:	230a      	movs	r3, #10
 800315c:	e027      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 800315e:	2307      	movs	r3, #7
 8003160:	e025      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 8003162:	2306      	movs	r3, #6
 8003164:	e023      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 8003166:	2305      	movs	r3, #5
 8003168:	e021      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 800316a:	2304      	movs	r3, #4
 800316c:	e01f      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 800316e:	2303      	movs	r3, #3
 8003170:	e01d      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 8003172:	2302      	movs	r3, #2
 8003174:	e01b      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 8003176:	2301      	movs	r3, #1
 8003178:	e019      	b.n	80031ae <HAL_GPIO_Init+0x25a>
 800317a:	bf00      	nop
 800317c:	58000080 	.word	0x58000080
 8003180:	58024400 	.word	0x58024400
 8003184:	58000400 	.word	0x58000400
 8003188:	58020000 	.word	0x58020000
 800318c:	58020400 	.word	0x58020400
 8003190:	58020800 	.word	0x58020800
 8003194:	58020c00 	.word	0x58020c00
 8003198:	58021000 	.word	0x58021000
 800319c:	58021400 	.word	0x58021400
 80031a0:	58021800 	.word	0x58021800
 80031a4:	58021c00 	.word	0x58021c00
 80031a8:	58022400 	.word	0x58022400
 80031ac:	2300      	movs	r3, #0
 80031ae:	69fa      	ldr	r2, [r7, #28]
 80031b0:	f002 0203 	and.w	r2, r2, #3
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	4093      	lsls	r3, r2
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031be:	4938      	ldr	r1, [pc, #224]	; (80032a0 <HAL_GPIO_Init+0x34c>)
 80031c0:	69fb      	ldr	r3, [r7, #28]
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80031cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	43db      	mvns	r3, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4013      	ands	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d003      	beq.n	80031f2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80031ea:	69ba      	ldr	r2, [r7, #24]
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	4313      	orrs	r3, r2
 80031f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80031f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80031fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	43db      	mvns	r3, r3
 8003206:	69ba      	ldr	r2, [r7, #24]
 8003208:	4013      	ands	r3, r2
 800320a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d003      	beq.n	8003220 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	43db      	mvns	r3, r3
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	4013      	ands	r3, r2
 8003236:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	3301      	adds	r3, #1
 8003280:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	f47f ae6b 	bne.w	8002f68 <HAL_GPIO_Init+0x14>
  }
}
 8003292:	bf00      	nop
 8003294:	bf00      	nop
 8003296:	3724      	adds	r7, #36	; 0x24
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	58000400 	.word	0x58000400

080032a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	460b      	mov	r3, r1
 80032ae:	807b      	strh	r3, [r7, #2]
 80032b0:	4613      	mov	r3, r2
 80032b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032b4:	787b      	ldrb	r3, [r7, #1]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d003      	beq.n	80032c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032ba:	887a      	ldrh	r2, [r7, #2]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80032c0:	e003      	b.n	80032ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80032c2:	887b      	ldrh	r3, [r7, #2]
 80032c4:	041a      	lsls	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
}
 80032ca:	bf00      	nop
 80032cc:	370c      	adds	r7, #12
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b085      	sub	sp, #20
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
 80032de:	460b      	mov	r3, r1
 80032e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80032e8:	887a      	ldrh	r2, [r7, #2]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4013      	ands	r3, r2
 80032ee:	041a      	lsls	r2, r3, #16
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	43d9      	mvns	r1, r3
 80032f4:	887b      	ldrh	r3, [r7, #2]
 80032f6:	400b      	ands	r3, r1
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	619a      	str	r2, [r3, #24]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
	...

0800330c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003314:	4b19      	ldr	r3, [pc, #100]	; (800337c <HAL_PWREx_ConfigSupply+0x70>)
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b04      	cmp	r3, #4
 800331e:	d00a      	beq.n	8003336 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <HAL_PWREx_ConfigSupply+0x70>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	f003 0307 	and.w	r3, r3, #7
 8003328:	687a      	ldr	r2, [r7, #4]
 800332a:	429a      	cmp	r2, r3
 800332c:	d001      	beq.n	8003332 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e01f      	b.n	8003372 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	e01d      	b.n	8003372 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <HAL_PWREx_ConfigSupply+0x70>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	f023 0207 	bic.w	r2, r3, #7
 800333e:	490f      	ldr	r1, [pc, #60]	; (800337c <HAL_PWREx_ConfigSupply+0x70>)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4313      	orrs	r3, r2
 8003344:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003346:	f7fe f847 	bl	80013d8 <HAL_GetTick>
 800334a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800334c:	e009      	b.n	8003362 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800334e:	f7fe f843 	bl	80013d8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800335c:	d901      	bls.n	8003362 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e007      	b.n	8003372 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003362:	4b06      	ldr	r3, [pc, #24]	; (800337c <HAL_PWREx_ConfigSupply+0x70>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800336e:	d1ee      	bne.n	800334e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003370:	2300      	movs	r3, #0
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	58024800 	.word	0x58024800

08003380 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08c      	sub	sp, #48	; 0x30
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e39d      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 8087 	beq.w	80034ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033a0:	4b88      	ldr	r3, [pc, #544]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80033aa:	4b86      	ldr	r3, [pc, #536]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80033ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80033b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b2:	2b10      	cmp	r3, #16
 80033b4:	d007      	beq.n	80033c6 <HAL_RCC_OscConfig+0x46>
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2b18      	cmp	r3, #24
 80033ba:	d110      	bne.n	80033de <HAL_RCC_OscConfig+0x5e>
 80033bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033be:	f003 0303 	and.w	r3, r3, #3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d10b      	bne.n	80033de <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c6:	4b7f      	ldr	r3, [pc, #508]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d06c      	beq.n	80034ac <HAL_RCC_OscConfig+0x12c>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d168      	bne.n	80034ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e377      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x76>
 80033e8:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a75      	ldr	r2, [pc, #468]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80033ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f2:	6013      	str	r3, [r2, #0]
 80033f4:	e02e      	b.n	8003454 <HAL_RCC_OscConfig+0xd4>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x98>
 80033fe:	4b71      	ldr	r3, [pc, #452]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a70      	ldr	r2, [pc, #448]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003404:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b6e      	ldr	r3, [pc, #440]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a6d      	ldr	r2, [pc, #436]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003410:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e01d      	b.n	8003454 <HAL_RCC_OscConfig+0xd4>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003420:	d10c      	bne.n	800343c <HAL_RCC_OscConfig+0xbc>
 8003422:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a67      	ldr	r2, [pc, #412]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800342c:	6013      	str	r3, [r2, #0]
 800342e:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a64      	ldr	r2, [pc, #400]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	e00b      	b.n	8003454 <HAL_RCC_OscConfig+0xd4>
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a60      	ldr	r2, [pc, #384]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003446:	6013      	str	r3, [r2, #0]
 8003448:	4b5e      	ldr	r3, [pc, #376]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5d      	ldr	r2, [pc, #372]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 800344e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d013      	beq.n	8003484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345c:	f7fd ffbc 	bl	80013d8 <HAL_GetTick>
 8003460:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003464:	f7fd ffb8 	bl	80013d8 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b64      	cmp	r3, #100	; 0x64
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e32b      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003476:	4b53      	ldr	r3, [pc, #332]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0xe4>
 8003482:	e014      	b.n	80034ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003484:	f7fd ffa8 	bl	80013d8 <HAL_GetTick>
 8003488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800348a:	e008      	b.n	800349e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800348c:	f7fd ffa4 	bl	80013d8 <HAL_GetTick>
 8003490:	4602      	mov	r2, r0
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	2b64      	cmp	r3, #100	; 0x64
 8003498:	d901      	bls.n	800349e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e317      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800349e:	4b49      	ldr	r3, [pc, #292]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d1f0      	bne.n	800348c <HAL_RCC_OscConfig+0x10c>
 80034aa:	e000      	b.n	80034ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	f000 808c 	beq.w	80035d4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034bc:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80034c6:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80034c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d007      	beq.n	80034e2 <HAL_RCC_OscConfig+0x162>
 80034d2:	6a3b      	ldr	r3, [r7, #32]
 80034d4:	2b18      	cmp	r3, #24
 80034d6:	d137      	bne.n	8003548 <HAL_RCC_OscConfig+0x1c8>
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0303 	and.w	r3, r3, #3
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d132      	bne.n	8003548 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0304 	and.w	r3, r3, #4
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d005      	beq.n	80034fa <HAL_RCC_OscConfig+0x17a>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e2e9      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034fa:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f023 0219 	bic.w	r2, r3, #25
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	492f      	ldr	r1, [pc, #188]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003508:	4313      	orrs	r3, r2
 800350a:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800350c:	f7fd ff64 	bl	80013d8 <HAL_GetTick>
 8003510:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1a6>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003514:	f7fd ff60 	bl	80013d8 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1a6>
            {
              return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e2d3      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003526:	4b27      	ldr	r3, [pc, #156]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0304 	and.w	r3, r3, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x194>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003532:	4b24      	ldr	r3, [pc, #144]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	061b      	lsls	r3, r3, #24
 8003540:	4920      	ldr	r1, [pc, #128]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003546:	e045      	b.n	80035d4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d026      	beq.n	800359e <HAL_RCC_OscConfig+0x21e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003550:	4b1c      	ldr	r3, [pc, #112]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f023 0219 	bic.w	r2, r3, #25
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	4919      	ldr	r1, [pc, #100]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003562:	f7fd ff39 	bl	80013d8 <HAL_GetTick>
 8003566:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003568:	e008      	b.n	800357c <HAL_RCC_OscConfig+0x1fc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800356a:	f7fd ff35 	bl	80013d8 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	2b02      	cmp	r3, #2
 8003576:	d901      	bls.n	800357c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003578:	2303      	movs	r3, #3
 800357a:	e2a8      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800357c:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0f0      	beq.n	800356a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003588:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	061b      	lsls	r3, r3, #24
 8003596:	490b      	ldr	r1, [pc, #44]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 8003598:	4313      	orrs	r3, r2
 800359a:	604b      	str	r3, [r1, #4]
 800359c:	e01a      	b.n	80035d4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800359e:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <HAL_RCC_OscConfig+0x244>)
 80035a4:	f023 0301 	bic.w	r3, r3, #1
 80035a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035aa:	f7fd ff15 	bl	80013d8 <HAL_GetTick>
 80035ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035b0:	e00a      	b.n	80035c8 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b2:	f7fd ff11 	bl	80013d8 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d903      	bls.n	80035c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e284      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
 80035c4:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80035c8:	4b96      	ldr	r3, [pc, #600]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0304 	and.w	r3, r3, #4
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ee      	bne.n	80035b2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0310 	and.w	r3, r3, #16
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d06a      	beq.n	80036b6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035e0:	4b90      	ldr	r3, [pc, #576]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035e8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80035ea:	4b8e      	ldr	r3, [pc, #568]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80035ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ee:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d007      	beq.n	8003606 <HAL_RCC_OscConfig+0x286>
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2b18      	cmp	r3, #24
 80035fa:	d11b      	bne.n	8003634 <HAL_RCC_OscConfig+0x2b4>
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b01      	cmp	r3, #1
 8003604:	d116      	bne.n	8003634 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003606:	4b87      	ldr	r3, [pc, #540]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_RCC_OscConfig+0x29e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d001      	beq.n	800361e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e257      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800361e:	4b81      	ldr	r3, [pc, #516]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	497d      	ldr	r1, [pc, #500]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003632:	e040      	b.n	80036b6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	69db      	ldr	r3, [r3, #28]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d023      	beq.n	8003684 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800363c:	4b79      	ldr	r3, [pc, #484]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a78      	ldr	r2, [pc, #480]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003648:	f7fd fec6 	bl	80013d8 <HAL_GetTick>
 800364c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003650:	f7fd fec2 	bl	80013d8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e235      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003662:	4b70      	ldr	r3, [pc, #448]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0f0      	beq.n	8003650 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800366e:	4b6d      	ldr	r3, [pc, #436]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	061b      	lsls	r3, r3, #24
 800367c:	4969      	ldr	r1, [pc, #420]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800367e:	4313      	orrs	r3, r2
 8003680:	60cb      	str	r3, [r1, #12]
 8003682:	e018      	b.n	80036b6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003684:	4b67      	ldr	r3, [pc, #412]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a66      	ldr	r2, [pc, #408]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800368a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800368e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003690:	f7fd fea2 	bl	80013d8 <HAL_GetTick>
 8003694:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003696:	e008      	b.n	80036aa <HAL_RCC_OscConfig+0x32a>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003698:	f7fd fe9e 	bl	80013d8 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e211      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80036aa:	4b5e      	ldr	r3, [pc, #376]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1f0      	bne.n	8003698 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d036      	beq.n	8003730 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d019      	beq.n	80036fe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ca:	4b56      	ldr	r3, [pc, #344]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80036cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ce:	4a55      	ldr	r2, [pc, #340]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d6:	f7fd fe7f 	bl	80013d8 <HAL_GetTick>
 80036da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036dc:	e008      	b.n	80036f0 <HAL_RCC_OscConfig+0x370>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036de:	f7fd fe7b 	bl	80013d8 <HAL_GetTick>
 80036e2:	4602      	mov	r2, r0
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	1ad3      	subs	r3, r2, r3
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e1ee      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036f0:	4b4c      	ldr	r3, [pc, #304]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0f0      	beq.n	80036de <HAL_RCC_OscConfig+0x35e>
 80036fc:	e018      	b.n	8003730 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036fe:	4b49      	ldr	r3, [pc, #292]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003702:	4a48      	ldr	r2, [pc, #288]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fd fe65 	bl	80013d8 <HAL_GetTick>
 800370e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x3a4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003712:	f7fd fe61 	bl	80013d8 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e1d4      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003724:	4b3f      	ldr	r3, [pc, #252]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003728:	f003 0302 	and.w	r3, r3, #2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0320 	and.w	r3, r3, #32
 8003738:	2b00      	cmp	r3, #0
 800373a:	d036      	beq.n	80037aa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d019      	beq.n	8003778 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003744:	4b37      	ldr	r3, [pc, #220]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a36      	ldr	r2, [pc, #216]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800374a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800374e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003750:	f7fd fe42 	bl	80013d8 <HAL_GetTick>
 8003754:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x3ea>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003758:	f7fd fe3e 	bl	80013d8 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b02      	cmp	r3, #2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e1b1      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800376a:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0f0      	beq.n	8003758 <HAL_RCC_OscConfig+0x3d8>
 8003776:	e018      	b.n	80037aa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003778:	4b2a      	ldr	r3, [pc, #168]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a29      	ldr	r2, [pc, #164]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800377e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003782:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003784:	f7fd fe28 	bl	80013d8 <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x41e>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800378c:	f7fd fe24 	bl	80013d8 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e197      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800379e:	4b21      	ldr	r3, [pc, #132]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8086 	beq.w	80038c4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x4a8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <HAL_RCC_OscConfig+0x4a8>)
 80037be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037c4:	f7fd fe08 	bl	80013d8 <HAL_GetTick>
 80037c8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x45e>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037cc:	f7fd fe04 	bl	80013d8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b64      	cmp	r3, #100	; 0x64
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e177      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_RCC_OscConfig+0x4a8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d106      	bne.n	8003800 <HAL_RCC_OscConfig+0x480>
 80037f2:	4b0c      	ldr	r3, [pc, #48]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	4a0b      	ldr	r2, [pc, #44]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6713      	str	r3, [r2, #112]	; 0x70
 80037fe:	e032      	b.n	8003866 <HAL_RCC_OscConfig+0x4e6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d111      	bne.n	800382c <HAL_RCC_OscConfig+0x4ac>
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a05      	ldr	r2, [pc, #20]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003818:	4a02      	ldr	r2, [pc, #8]	; (8003824 <HAL_RCC_OscConfig+0x4a4>)
 800381a:	f023 0304 	bic.w	r3, r3, #4
 800381e:	6713      	str	r3, [r2, #112]	; 0x70
 8003820:	e021      	b.n	8003866 <HAL_RCC_OscConfig+0x4e6>
 8003822:	bf00      	nop
 8003824:	58024400 	.word	0x58024400
 8003828:	58024800 	.word	0x58024800
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	2b05      	cmp	r3, #5
 8003832:	d10c      	bne.n	800384e <HAL_RCC_OscConfig+0x4ce>
 8003834:	4b83      	ldr	r3, [pc, #524]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	4a82      	ldr	r2, [pc, #520]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800383a:	f043 0304 	orr.w	r3, r3, #4
 800383e:	6713      	str	r3, [r2, #112]	; 0x70
 8003840:	4b80      	ldr	r3, [pc, #512]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003844:	4a7f      	ldr	r2, [pc, #508]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003846:	f043 0301 	orr.w	r3, r3, #1
 800384a:	6713      	str	r3, [r2, #112]	; 0x70
 800384c:	e00b      	b.n	8003866 <HAL_RCC_OscConfig+0x4e6>
 800384e:	4b7d      	ldr	r3, [pc, #500]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003852:	4a7c      	ldr	r2, [pc, #496]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	6713      	str	r3, [r2, #112]	; 0x70
 800385a:	4b7a      	ldr	r3, [pc, #488]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a79      	ldr	r2, [pc, #484]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003860:	f023 0304 	bic.w	r3, r3, #4
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d015      	beq.n	800389a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386e:	f7fd fdb3 	bl	80013d8 <HAL_GetTick>
 8003872:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003874:	e00a      	b.n	800388c <HAL_RCC_OscConfig+0x50c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003876:	f7fd fdaf 	bl	80013d8 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	f241 3288 	movw	r2, #5000	; 0x1388
 8003884:	4293      	cmp	r3, r2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e120      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800388c:	4b6d      	ldr	r3, [pc, #436]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800388e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0ee      	beq.n	8003876 <HAL_RCC_OscConfig+0x4f6>
 8003898:	e014      	b.n	80038c4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389a:	f7fd fd9d 	bl	80013d8 <HAL_GetTick>
 800389e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038a0:	e00a      	b.n	80038b8 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fd fd99 	bl	80013d8 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e10a      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80038b8:	4b62      	ldr	r3, [pc, #392]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1ee      	bne.n	80038a2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f000 80ff 	beq.w	8003acc <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80038ce:	4b5d      	ldr	r3, [pc, #372]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038d6:	2b18      	cmp	r3, #24
 80038d8:	f000 80ba 	beq.w	8003a50 <HAL_RCC_OscConfig+0x6d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	f040 8095 	bne.w	8003a10 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e6:	4b57      	ldr	r3, [pc, #348]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a56      	ldr	r2, [pc, #344]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80038ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f2:	f7fd fd71 	bl	80013d8 <HAL_GetTick>
 80038f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038f8:	e008      	b.n	800390c <HAL_RCC_OscConfig+0x58c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fd fd6d 	bl	80013d8 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b02      	cmp	r3, #2
 8003906:	d901      	bls.n	800390c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	e0e0      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800390c:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1f0      	bne.n	80038fa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003918:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800391a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800391c:	4b4a      	ldr	r3, [pc, #296]	; (8003a48 <HAL_RCC_OscConfig+0x6c8>)
 800391e:	4013      	ands	r3, r2
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003928:	0112      	lsls	r2, r2, #4
 800392a:	430a      	orrs	r2, r1
 800392c:	4945      	ldr	r1, [pc, #276]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800392e:	4313      	orrs	r3, r2
 8003930:	628b      	str	r3, [r1, #40]	; 0x28
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	3b01      	subs	r3, #1
 8003938:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	3b01      	subs	r3, #1
 8003942:	025b      	lsls	r3, r3, #9
 8003944:	b29b      	uxth	r3, r3
 8003946:	431a      	orrs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394c:	3b01      	subs	r3, #1
 800394e:	041b      	lsls	r3, r3, #16
 8003950:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395a:	3b01      	subs	r3, #1
 800395c:	061b      	lsls	r3, r3, #24
 800395e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003962:	4938      	ldr	r1, [pc, #224]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003964:	4313      	orrs	r3, r2
 8003966:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8003968:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4a35      	ldr	r2, [pc, #212]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800396e:	f023 0301 	bic.w	r3, r3, #1
 8003972:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003974:	4b33      	ldr	r3, [pc, #204]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003978:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <HAL_RCC_OscConfig+0x6cc>)
 800397a:	4013      	ands	r3, r2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003980:	00d2      	lsls	r2, r2, #3
 8003982:	4930      	ldr	r1, [pc, #192]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003984:	4313      	orrs	r3, r2
 8003986:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003988:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800398a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398c:	f023 020c 	bic.w	r2, r3, #12
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	492b      	ldr	r1, [pc, #172]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003996:	4313      	orrs	r3, r2
 8003998:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800399a:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	f023 0202 	bic.w	r2, r3, #2
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	4927      	ldr	r1, [pc, #156]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039a8:	4313      	orrs	r3, r2
 80039aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80039ac:	4b25      	ldr	r3, [pc, #148]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b0:	4a24      	ldr	r2, [pc, #144]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b8:	4b22      	ldr	r3, [pc, #136]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039bc:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80039c4:	4b1f      	ldr	r3, [pc, #124]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c8:	4a1e      	ldr	r2, [pc, #120]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80039d0:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039dc:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a18      	ldr	r2, [pc, #96]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 80039e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd fcf6 	bl	80013d8 <HAL_GetTick>
 80039ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x682>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f0:	f7fd fcf2 	bl	80013d8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e065      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a02:	4b10      	ldr	r3, [pc, #64]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0x670>
 8003a0e:	e05d      	b.n	8003acc <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a1c:	f7fd fcdc 	bl	80013d8 <HAL_GetTick>
 8003a20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x6b6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fd fcd8 	bl	80013d8 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e04b      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a36:	4b03      	ldr	r3, [pc, #12]	; (8003a44 <HAL_RCC_OscConfig+0x6c4>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x6a4>
 8003a42:	e043      	b.n	8003acc <HAL_RCC_OscConfig+0x74c>
 8003a44:	58024400 	.word	0x58024400
 8003a48:	fffffc0c 	.word	0xfffffc0c
 8003a4c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a50:	4b21      	ldr	r3, [pc, #132]	; (8003ad8 <HAL_RCC_OscConfig+0x758>)
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a56:	4b20      	ldr	r3, [pc, #128]	; (8003ad8 <HAL_RCC_OscConfig+0x758>)
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d031      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x748>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0203 	and.w	r2, r3, #3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d12a      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d122      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x748>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d11a      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	0a5b      	lsrs	r3, r3, #9
 8003a96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a9e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d111      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	0c1b      	lsrs	r3, r3, #16
 8003aa8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d108      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x748>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	0e1b      	lsrs	r3, r3, #24
 8003aba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ac2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e000      	b.n	8003ace <HAL_RCC_OscConfig+0x74e>
      }
    }
  }
  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3730      	adds	r7, #48	; 0x30
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	58024400 	.word	0x58024400

08003adc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e19c      	b.n	8003e2a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af0:	4b8a      	ldr	r3, [pc, #552]	; (8003d1c <HAL_RCC_ClockConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 030f 	and.w	r3, r3, #15
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d910      	bls.n	8003b20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afe:	4b87      	ldr	r3, [pc, #540]	; (8003d1c <HAL_RCC_ClockConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f023 020f 	bic.w	r2, r3, #15
 8003b06:	4985      	ldr	r1, [pc, #532]	; (8003d1c <HAL_RCC_ClockConfig+0x240>)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0e:	4b83      	ldr	r3, [pc, #524]	; (8003d1c <HAL_RCC_ClockConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 030f 	and.w	r3, r3, #15
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d001      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e184      	b.n	8003e2a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d010      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	4b7b      	ldr	r3, [pc, #492]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d908      	bls.n	8003b4e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b3c:	4b78      	ldr	r3, [pc, #480]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003b3e:	699b      	ldr	r3, [r3, #24]
 8003b40:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	4975      	ldr	r1, [pc, #468]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0308 	and.w	r3, r3, #8
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d010      	beq.n	8003b7c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	4b70      	ldr	r3, [pc, #448]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d908      	bls.n	8003b7c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b6a:	4b6d      	ldr	r3, [pc, #436]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	496a      	ldr	r1, [pc, #424]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 0310 	and.w	r3, r3, #16
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d010      	beq.n	8003baa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	699a      	ldr	r2, [r3, #24]
 8003b8c:	4b64      	ldr	r3, [pc, #400]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d908      	bls.n	8003baa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b98:	4b61      	ldr	r3, [pc, #388]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003b9a:	69db      	ldr	r3, [r3, #28]
 8003b9c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	495e      	ldr	r1, [pc, #376]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0320 	and.w	r3, r3, #32
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d010      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	4b59      	ldr	r3, [pc, #356]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d908      	bls.n	8003bd8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003bc6:	4b56      	ldr	r3, [pc, #344]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	4953      	ldr	r1, [pc, #332]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0302 	and.w	r3, r3, #2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d010      	beq.n	8003c06 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68da      	ldr	r2, [r3, #12]
 8003be8:	4b4d      	ldr	r3, [pc, #308]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d908      	bls.n	8003c06 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf4:	4b4a      	ldr	r3, [pc, #296]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f023 020f 	bic.w	r2, r3, #15
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4947      	ldr	r1, [pc, #284]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d055      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c12:	4b43      	ldr	r3, [pc, #268]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	4940      	ldr	r1, [pc, #256]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d107      	bne.n	8003c3c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c2c:	4b3c      	ldr	r3, [pc, #240]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d121      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e0f6      	b.n	8003e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	2b03      	cmp	r3, #3
 8003c42:	d107      	bne.n	8003c54 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c44:	4b36      	ldr	r3, [pc, #216]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d115      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e0ea      	b.n	8003e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d107      	bne.n	8003c6c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c5c:	4b30      	ldr	r3, [pc, #192]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d109      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e0de      	b.n	8003e2a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c6c:	4b2c      	ldr	r3, [pc, #176]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f003 0304 	and.w	r3, r3, #4
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e0d6      	b.n	8003e2a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c7c:	4b28      	ldr	r3, [pc, #160]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f023 0207 	bic.w	r2, r3, #7
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4925      	ldr	r1, [pc, #148]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8e:	f7fd fba3 	bl	80013d8 <HAL_GetTick>
 8003c92:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c94:	e00a      	b.n	8003cac <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c96:	f7fd fb9f 	bl	80013d8 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d901      	bls.n	8003cac <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e0be      	b.n	8003e2a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cac:	4b1c      	ldr	r3, [pc, #112]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d1eb      	bne.n	8003c96 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d010      	beq.n	8003cec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	4b14      	ldr	r3, [pc, #80]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d208      	bcs.n	8003cec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cda:	4b11      	ldr	r3, [pc, #68]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	f023 020f 	bic.w	r2, r3, #15
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	490e      	ldr	r1, [pc, #56]	; (8003d20 <HAL_RCC_ClockConfig+0x244>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cec:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_ClockConfig+0x240>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d214      	bcs.n	8003d24 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_RCC_ClockConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 020f 	bic.w	r2, r3, #15
 8003d02:	4906      	ldr	r1, [pc, #24]	; (8003d1c <HAL_RCC_ClockConfig+0x240>)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <HAL_RCC_ClockConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e086      	b.n	8003e2a <HAL_RCC_ClockConfig+0x34e>
 8003d1c:	52002000 	.word	0x52002000
 8003d20:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d010      	beq.n	8003d52 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691a      	ldr	r2, [r3, #16]
 8003d34:	4b3f      	ldr	r3, [pc, #252]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d208      	bcs.n	8003d52 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d40:	4b3c      	ldr	r3, [pc, #240]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003d42:	699b      	ldr	r3, [r3, #24]
 8003d44:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	4939      	ldr	r1, [pc, #228]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0308 	and.w	r3, r3, #8
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d010      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	4b34      	ldr	r3, [pc, #208]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d208      	bcs.n	8003d80 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d6e:	4b31      	ldr	r3, [pc, #196]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	492e      	ldr	r1, [pc, #184]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0310 	and.w	r3, r3, #16
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d010      	beq.n	8003dae <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699a      	ldr	r2, [r3, #24]
 8003d90:	4b28      	ldr	r3, [pc, #160]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d208      	bcs.n	8003dae <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d9c:	4b25      	ldr	r3, [pc, #148]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	4922      	ldr	r1, [pc, #136]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0320 	and.w	r3, r3, #32
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d010      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d208      	bcs.n	8003ddc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	4917      	ldr	r1, [pc, #92]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ddc:	f000 f834 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	f003 030f 	and.w	r3, r3, #15
 8003dec:	4912      	ldr	r1, [pc, #72]	; (8003e38 <HAL_RCC_ClockConfig+0x35c>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003dfa:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_RCC_ClockConfig+0x358>)
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 030f 	and.w	r3, r3, #15
 8003e02:	4a0d      	ldr	r2, [pc, #52]	; (8003e38 <HAL_RCC_ClockConfig+0x35c>)
 8003e04:	5cd3      	ldrb	r3, [r2, r3]
 8003e06:	f003 031f 	and.w	r3, r3, #31
 8003e0a:	693a      	ldr	r2, [r7, #16]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e10:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <HAL_RCC_ClockConfig+0x360>)
 8003e12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e14:	4a0a      	ldr	r2, [pc, #40]	; (8003e40 <HAL_RCC_ClockConfig+0x364>)
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003e1a:	4b0a      	ldr	r3, [pc, #40]	; (8003e44 <HAL_RCC_ClockConfig+0x368>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd f86c 	bl	8000efc <HAL_InitTick>
 8003e24:	4603      	mov	r3, r0
 8003e26:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	58024400 	.word	0x58024400
 8003e38:	0800a108 	.word	0x0800a108
 8003e3c:	24000004 	.word	0x24000004
 8003e40:	24000000 	.word	0x24000000
 8003e44:	24000008 	.word	0x24000008

08003e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b089      	sub	sp, #36	; 0x24
 8003e4c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e4e:	4bb3      	ldr	r3, [pc, #716]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e56:	2b18      	cmp	r3, #24
 8003e58:	f200 8155 	bhi.w	8004106 <HAL_RCC_GetSysClockFreq+0x2be>
 8003e5c:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003ec9 	.word	0x08003ec9
 8003e68:	08004107 	.word	0x08004107
 8003e6c:	08004107 	.word	0x08004107
 8003e70:	08004107 	.word	0x08004107
 8003e74:	08004107 	.word	0x08004107
 8003e78:	08004107 	.word	0x08004107
 8003e7c:	08004107 	.word	0x08004107
 8003e80:	08004107 	.word	0x08004107
 8003e84:	08003eef 	.word	0x08003eef
 8003e88:	08004107 	.word	0x08004107
 8003e8c:	08004107 	.word	0x08004107
 8003e90:	08004107 	.word	0x08004107
 8003e94:	08004107 	.word	0x08004107
 8003e98:	08004107 	.word	0x08004107
 8003e9c:	08004107 	.word	0x08004107
 8003ea0:	08004107 	.word	0x08004107
 8003ea4:	08003ef5 	.word	0x08003ef5
 8003ea8:	08004107 	.word	0x08004107
 8003eac:	08004107 	.word	0x08004107
 8003eb0:	08004107 	.word	0x08004107
 8003eb4:	08004107 	.word	0x08004107
 8003eb8:	08004107 	.word	0x08004107
 8003ebc:	08004107 	.word	0x08004107
 8003ec0:	08004107 	.word	0x08004107
 8003ec4:	08003efb 	.word	0x08003efb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec8:	4b94      	ldr	r3, [pc, #592]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d009      	beq.n	8003ee8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ed4:	4b91      	ldr	r3, [pc, #580]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	08db      	lsrs	r3, r3, #3
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	4a90      	ldr	r2, [pc, #576]	; (8004120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003ee6:	e111      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ee8:	4b8d      	ldr	r3, [pc, #564]	; (8004120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003eea:	61bb      	str	r3, [r7, #24]
    break;
 8003eec:	e10e      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003eee:	4b8d      	ldr	r3, [pc, #564]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ef0:	61bb      	str	r3, [r7, #24]
    break;
 8003ef2:	e10b      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003ef4:	4b8c      	ldr	r3, [pc, #560]	; (8004128 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003ef6:	61bb      	str	r3, [r7, #24]
    break;
 8003ef8:	e108      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003efa:	4b88      	ldr	r3, [pc, #544]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003f04:	4b85      	ldr	r3, [pc, #532]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	091b      	lsrs	r3, r3, #4
 8003f0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f0e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f10:	4b82      	ldr	r3, [pc, #520]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	f003 0301 	and.w	r3, r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003f1a:	4b80      	ldr	r3, [pc, #512]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	08db      	lsrs	r3, r3, #3
 8003f20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	fb02 f303 	mul.w	r3, r2, r3
 8003f2a:	ee07 3a90 	vmov	s15, r3
 8003f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f32:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 80e1 	beq.w	8004100 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	f000 8083 	beq.w	800404c <HAL_RCC_GetSysClockFreq+0x204>
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	f200 80a1 	bhi.w	8004090 <HAL_RCC_GetSysClockFreq+0x248>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x114>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d056      	beq.n	8004008 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f5a:	e099      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f5c:	4b6f      	ldr	r3, [pc, #444]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0320 	and.w	r3, r3, #32
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d02d      	beq.n	8003fc4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f68:	4b6c      	ldr	r3, [pc, #432]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	08db      	lsrs	r3, r3, #3
 8003f6e:	f003 0303 	and.w	r3, r3, #3
 8003f72:	4a6b      	ldr	r2, [pc, #428]	; (8004120 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
 8003f78:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	ee07 3a90 	vmov	s15, r3
 8003f80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	ee07 3a90 	vmov	s15, r3
 8003f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f92:	4b62      	ldr	r3, [pc, #392]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f9a:	ee07 3a90 	vmov	s15, r3
 8003f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fa6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800412c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003fc2:	e087      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fce:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004130 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fd6:	4b51      	ldr	r3, [pc, #324]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fea:	eddf 5a50 	vldr	s11, [pc, #320]	; 800412c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004006:	e065      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	ee07 3a90 	vmov	s15, r3
 800400e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004012:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004134 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800401a:	4b40      	ldr	r3, [pc, #256]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800401c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004022:	ee07 3a90 	vmov	s15, r3
 8004026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800402a:	ed97 6a02 	vldr	s12, [r7, #8]
 800402e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800412c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800403a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800403e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004042:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800404a:	e043      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	ee07 3a90 	vmov	s15, r3
 8004052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004056:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004138 <HAL_RCC_GetSysClockFreq+0x2f0>
 800405a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800405e:	4b2f      	ldr	r3, [pc, #188]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004066:	ee07 3a90 	vmov	s15, r3
 800406a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800406e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004072:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800412c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800407a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800407e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800408a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800408e:	e021      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	ee07 3a90 	vmov	s15, r3
 8004096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800409a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004134 <HAL_RCC_GetSysClockFreq+0x2ec>
 800409e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040a2:	4b1e      	ldr	r3, [pc, #120]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80040b6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800412c <HAL_RCC_GetSysClockFreq+0x2e4>
 80040ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80040d2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80040d4:	4b11      	ldr	r3, [pc, #68]	; (800411c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d8:	0a5b      	lsrs	r3, r3, #9
 80040da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040de:	3301      	adds	r3, #1
 80040e0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	ee07 3a90 	vmov	s15, r3
 80040e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80040f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040f8:	ee17 3a90 	vmov	r3, s15
 80040fc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80040fe:	e005      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
    break;
 8004104:	e002      	b.n	800410c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8004106:	4b07      	ldr	r3, [pc, #28]	; (8004124 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004108:	61bb      	str	r3, [r7, #24]
    break;
 800410a:	bf00      	nop
  }

  return sysclockfreq;
 800410c:	69bb      	ldr	r3, [r7, #24]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	58024400 	.word	0x58024400
 8004120:	03d09000 	.word	0x03d09000
 8004124:	003d0900 	.word	0x003d0900
 8004128:	007a1200 	.word	0x007a1200
 800412c:	46000000 	.word	0x46000000
 8004130:	4c742400 	.word	0x4c742400
 8004134:	4a742400 	.word	0x4a742400
 8004138:	4af42400 	.word	0x4af42400

0800413c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004142:	f7ff fe81 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8004146:	4602      	mov	r2, r0
 8004148:	4b10      	ldr	r3, [pc, #64]	; (800418c <HAL_RCC_GetHCLKFreq+0x50>)
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	490f      	ldr	r1, [pc, #60]	; (8004190 <HAL_RCC_GetHCLKFreq+0x54>)
 8004154:	5ccb      	ldrb	r3, [r1, r3]
 8004156:	f003 031f 	and.w	r3, r3, #31
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004160:	4b0a      	ldr	r3, [pc, #40]	; (800418c <HAL_RCC_GetHCLKFreq+0x50>)
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	f003 030f 	and.w	r3, r3, #15
 8004168:	4a09      	ldr	r2, [pc, #36]	; (8004190 <HAL_RCC_GetHCLKFreq+0x54>)
 800416a:	5cd3      	ldrb	r3, [r2, r3]
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	fa22 f303 	lsr.w	r3, r2, r3
 8004176:	4a07      	ldr	r2, [pc, #28]	; (8004194 <HAL_RCC_GetHCLKFreq+0x58>)
 8004178:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800417a:	4a07      	ldr	r2, [pc, #28]	; (8004198 <HAL_RCC_GetHCLKFreq+0x5c>)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <HAL_RCC_GetHCLKFreq+0x58>)
 8004182:	681b      	ldr	r3, [r3, #0]
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}
 800418c:	58024400 	.word	0x58024400
 8004190:	0800a108 	.word	0x0800a108
 8004194:	24000004 	.word	0x24000004
 8004198:	24000000 	.word	0x24000000

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041a0:	f7ff ffcc 	bl	800413c <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b06      	ldr	r3, [pc, #24]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041a8:	69db      	ldr	r3, [r3, #28]
 80041aa:	091b      	lsrs	r3, r3, #4
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4904      	ldr	r1, [pc, #16]	; (80041c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041bc:	4618      	mov	r0, r3
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	58024400 	.word	0x58024400
 80041c4:	0800a108 	.word	0x0800a108

080041c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80041cc:	f7ff ffb6 	bl	800413c <HAL_RCC_GetHCLKFreq>
 80041d0:	4602      	mov	r2, r0
 80041d2:	4b06      	ldr	r3, [pc, #24]	; (80041ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80041d4:	69db      	ldr	r3, [r3, #28]
 80041d6:	0a1b      	lsrs	r3, r3, #8
 80041d8:	f003 0307 	and.w	r3, r3, #7
 80041dc:	4904      	ldr	r1, [pc, #16]	; (80041f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041de:	5ccb      	ldrb	r3, [r1, r3]
 80041e0:	f003 031f 	and.w	r3, r3, #31
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	58024400 	.word	0x58024400
 80041f0:	0800a108 	.word	0x0800a108

080041f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	223f      	movs	r2, #63	; 0x3f
 8004202:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004204:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <HAL_RCC_GetClockConfig+0x7c>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f003 0207 	and.w	r2, r3, #7
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004210:	4b17      	ldr	r3, [pc, #92]	; (8004270 <HAL_RCC_GetClockConfig+0x7c>)
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800421c:	4b14      	ldr	r3, [pc, #80]	; (8004270 <HAL_RCC_GetClockConfig+0x7c>)
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_RCC_GetClockConfig+0x7c>)
 800422a:	699b      	ldr	r3, [r3, #24]
 800422c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004234:	4b0e      	ldr	r3, [pc, #56]	; (8004270 <HAL_RCC_GetClockConfig+0x7c>)
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004240:	4b0b      	ldr	r3, [pc, #44]	; (8004270 <HAL_RCC_GetClockConfig+0x7c>)
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800424c:	4b08      	ldr	r3, [pc, #32]	; (8004270 <HAL_RCC_GetClockConfig+0x7c>)
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004258:	4b06      	ldr	r3, [pc, #24]	; (8004274 <HAL_RCC_GetClockConfig+0x80>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 020f 	and.w	r2, r3, #15
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	601a      	str	r2, [r3, #0]
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	58024400 	.word	0x58024400
 8004274:	52002000 	.word	0x52002000

08004278 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b086      	sub	sp, #24
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004280:	2300      	movs	r3, #0
 8004282:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004284:	2300      	movs	r3, #0
 8004286:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d03f      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004298:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800429c:	d02a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800429e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80042a2:	d824      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042a8:	d018      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80042aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ae:	d81e      	bhi.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x76>
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80042b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b8:	d007      	beq.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0x52>
 80042ba:	e018      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042bc:	4ba4      	ldr	r3, [pc, #656]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c0:	4aa3      	ldr	r2, [pc, #652]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80042c8:	e015      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	2102      	movs	r1, #2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f001 f989 	bl	80055e8 <RCCEx_PLL2_Config>
 80042d6:	4603      	mov	r3, r0
 80042d8:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80042da:	e00c      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3324      	adds	r3, #36	; 0x24
 80042e0:	2102      	movs	r1, #2
 80042e2:	4618      	mov	r0, r3
 80042e4:	f001 fa32 	bl	800574c <RCCEx_PLL3_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80042ec:	e003      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	75fb      	strb	r3, [r7, #23]
      break;
 80042f2:	e000      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80042f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d109      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80042fc:	4b94      	ldr	r3, [pc, #592]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80042fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004300:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004308:	4991      	ldr	r1, [pc, #580]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800430a:	4313      	orrs	r3, r2
 800430c:	650b      	str	r3, [r1, #80]	; 0x50
 800430e:	e001      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	7dfb      	ldrb	r3, [r7, #23]
 8004312:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d03d      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004324:	2b04      	cmp	r3, #4
 8004326:	d826      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004328:	a201      	add	r2, pc, #4	; (adr r2, 8004330 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800432a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800432e:	bf00      	nop
 8004330:	08004345 	.word	0x08004345
 8004334:	08004353 	.word	0x08004353
 8004338:	08004365 	.word	0x08004365
 800433c:	0800437d 	.word	0x0800437d
 8004340:	0800437d 	.word	0x0800437d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004344:	4b82      	ldr	r3, [pc, #520]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4a81      	ldr	r2, [pc, #516]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800434a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800434e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004350:	e015      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	3304      	adds	r3, #4
 8004356:	2100      	movs	r1, #0
 8004358:	4618      	mov	r0, r3
 800435a:	f001 f945 	bl	80055e8 <RCCEx_PLL2_Config>
 800435e:	4603      	mov	r3, r0
 8004360:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004362:	e00c      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3324      	adds	r3, #36	; 0x24
 8004368:	2100      	movs	r1, #0
 800436a:	4618      	mov	r0, r3
 800436c:	f001 f9ee 	bl	800574c <RCCEx_PLL3_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004374:	e003      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
      break;
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800437c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800437e:	7dfb      	ldrb	r3, [r7, #23]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d109      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004384:	4b72      	ldr	r3, [pc, #456]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	f023 0207 	bic.w	r2, r3, #7
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004390:	496f      	ldr	r1, [pc, #444]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004392:	4313      	orrs	r3, r2
 8004394:	650b      	str	r3, [r1, #80]	; 0x50
 8004396:	e001      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
 800439a:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d051      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043ae:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80043b2:	d036      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80043b4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 80043b8:	d830      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80043ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043be:	d032      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
 80043c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043c4:	d82a      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80043c6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043ca:	d02e      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80043cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043d0:	d824      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80043d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d6:	d018      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043dc:	d81e      	bhi.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x172>
 80043e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043e6:	d007      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80043e8:	e018      	b.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ea:	4b59      	ldr	r3, [pc, #356]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	4a58      	ldr	r2, [pc, #352]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80043f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80043f6:	e019      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2100      	movs	r1, #0
 80043fe:	4618      	mov	r0, r3
 8004400:	f001 f8f2 	bl	80055e8 <RCCEx_PLL2_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004408:	e010      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	3324      	adds	r3, #36	; 0x24
 800440e:	2100      	movs	r1, #0
 8004410:	4618      	mov	r0, r3
 8004412:	f001 f99b 	bl	800574c <RCCEx_PLL3_Config>
 8004416:	4603      	mov	r3, r0
 8004418:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800441a:	e007      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	75fb      	strb	r3, [r7, #23]
      break;
 8004420:	e004      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004422:	bf00      	nop
 8004424:	e002      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 8004426:	bf00      	nop
 8004428:	e000      	b.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
      break;
 800442a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800442c:	7dfb      	ldrb	r3, [r7, #23]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d10a      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004432:	4b47      	ldr	r3, [pc, #284]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004436:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004440:	4943      	ldr	r1, [pc, #268]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004442:	4313      	orrs	r3, r2
 8004444:	658b      	str	r3, [r1, #88]	; 0x58
 8004446:	e001      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004448:	7dfb      	ldrb	r3, [r7, #23]
 800444a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004454:	2b00      	cmp	r3, #0
 8004456:	d051      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x284>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800445e:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004462:	d036      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
 8004464:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8004468:	d830      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800446a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800446e:	d032      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
 8004470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004474:	d82a      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004476:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800447a:	d02e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x262>
 800447c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004480:	d824      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 8004482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004486:	d018      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x242>
 8004488:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800448c:	d81e      	bhi.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x254>
 800448e:	2b00      	cmp	r3, #0
 8004490:	d003      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004492:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004496:	d007      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8004498:	e018      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x254>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449a:	4b2d      	ldr	r3, [pc, #180]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800449c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449e:	4a2c      	ldr	r2, [pc, #176]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80044a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044a6:	e019      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	3304      	adds	r3, #4
 80044ac:	2100      	movs	r1, #0
 80044ae:	4618      	mov	r0, r3
 80044b0:	f001 f89a 	bl	80055e8 <RCCEx_PLL2_Config>
 80044b4:	4603      	mov	r3, r0
 80044b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80044b8:	e010      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x264>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	3324      	adds	r3, #36	; 0x24
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 f943 	bl	800574c <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80044ca:	e007      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80044cc:	2301      	movs	r3, #1
 80044ce:	75fb      	strb	r3, [r7, #23]
      break;
 80044d0:	e004      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80044d2:	bf00      	nop
 80044d4:	e002      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80044d6:	bf00      	nop
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x264>
      break;
 80044da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10a      	bne.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x280>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80044e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044f0:	4917      	ldr	r1, [pc, #92]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	658b      	str	r3, [r1, #88]	; 0x58
 80044f6:	e001      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x284>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f8:	7dfb      	ldrb	r3, [r7, #23]
 80044fa:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d035      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->OspiClockSelection)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450c:	2b30      	cmp	r3, #48	; 0x30
 800450e:	d01c      	beq.n	800454a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004510:	2b30      	cmp	r3, #48	; 0x30
 8004512:	d817      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 8004514:	2b20      	cmp	r3, #32
 8004516:	d00c      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
 8004518:	2b20      	cmp	r3, #32
 800451a:	d813      	bhi.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d019      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8004520:	2b10      	cmp	r3, #16
 8004522:	d10f      	bne.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
    {
    case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
      /* Enable OSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004524:	4b0a      	ldr	r3, [pc, #40]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	4a09      	ldr	r2, [pc, #36]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 800452a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800452e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004530:	e011      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x2de>

    case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3304      	adds	r3, #4
 8004536:	2102      	movs	r1, #2
 8004538:	4618      	mov	r0, r3
 800453a:	f001 f855 	bl	80055e8 <RCCEx_PLL2_Config>
 800453e:	4603      	mov	r3, r0
 8004540:	75fb      	strb	r3, [r7, #23]

      /* OSPI clock source configuration done later after clock selection check */
      break;
 8004542:	e008      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    case RCC_OSPICLKSOURCE_HCLK:
      /* HCLK clock selected as OSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]
      break;
 8004548:	e005      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x2de>
      break;
 800454a:	bf00      	nop
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800454e:	bf00      	nop
 8004550:	58024400 	.word	0x58024400
      break;
 8004554:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800455c:	4ba3      	ldr	r3, [pc, #652]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800455e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004560:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004568:	49a0      	ldr	r1, [pc, #640]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800456a:	4313      	orrs	r3, r2
 800456c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800456e:	e001      	b.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004570:	7dfb      	ldrb	r3, [r7, #23]
 8004572:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d047      	beq.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004588:	d030      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x374>
 800458a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800458e:	d82a      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 8004590:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004594:	d02c      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x378>
 8004596:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800459a:	d824      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 800459c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a0:	d018      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80045a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045a6:	d81e      	bhi.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045b0:	d007      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80045b2:	e018      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045b4:	4b8d      	ldr	r3, [pc, #564]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80045b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b8:	4a8c      	ldr	r2, [pc, #560]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80045ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045c0:	e017      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	3304      	adds	r3, #4
 80045c6:	2100      	movs	r1, #0
 80045c8:	4618      	mov	r0, r3
 80045ca:	f001 f80d 	bl	80055e8 <RCCEx_PLL2_Config>
 80045ce:	4603      	mov	r3, r0
 80045d0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045d2:	e00e      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	3324      	adds	r3, #36	; 0x24
 80045d8:	2100      	movs	r1, #0
 80045da:	4618      	mov	r0, r3
 80045dc:	f001 f8b6 	bl	800574c <RCCEx_PLL3_Config>
 80045e0:	4603      	mov	r3, r0
 80045e2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	75fb      	strb	r3, [r7, #23]
      break;
 80045ea:	e002      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80045ec:	bf00      	nop
 80045ee:	e000      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
      break;
 80045f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d109      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80045f8:	4b7c      	ldr	r3, [pc, #496]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80045fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045fc:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004604:	4979      	ldr	r1, [pc, #484]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004606:	4313      	orrs	r3, r2
 8004608:	650b      	str	r3, [r1, #80]	; 0x50
 800460a:	e001      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x398>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	7dfb      	ldrb	r3, [r7, #23]
 800460e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d049      	beq.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x438>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004624:	d02e      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x40c>
 8004626:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800462a:	d828      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x406>
 800462c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004630:	d02a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x410>
 8004632:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004636:	d822      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004638:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800463c:	d026      	beq.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x414>
 800463e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004642:	d81c      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004648:	d010      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800464a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800464e:	d816      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x406>
 8004650:	2b00      	cmp	r3, #0
 8004652:	d01d      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8004654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004658:	d111      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x406>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	3304      	adds	r3, #4
 800465e:	2101      	movs	r1, #1
 8004660:	4618      	mov	r0, r3
 8004662:	f000 ffc1 	bl	80055e8 <RCCEx_PLL2_Config>
 8004666:	4603      	mov	r3, r0
 8004668:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800466a:	e012      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3324      	adds	r3, #36	; 0x24
 8004670:	2101      	movs	r1, #1
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f86a 	bl	800574c <RCCEx_PLL3_Config>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800467c:	e009      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	75fb      	strb	r3, [r7, #23]
      break;
 8004682:	e006      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004684:	bf00      	nop
 8004686:	e004      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004688:	bf00      	nop
 800468a:	e002      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 800468c:	bf00      	nop
 800468e:	e000      	b.n	8004692 <HAL_RCCEx_PeriphCLKConfig+0x41a>
      break;
 8004690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x434>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004698:	4b54      	ldr	r3, [pc, #336]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800469a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800469c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	4951      	ldr	r1, [pc, #324]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	650b      	str	r3, [r1, #80]	; 0x50
 80046aa:	e001      	b.n	80046b0 <HAL_RCCEx_PeriphCLKConfig+0x438>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d04b      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80046c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046c6:	d02e      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 80046c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046cc:	d828      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d2:	d02a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80046d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046d8:	d822      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046da:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046de:	d026      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x4b6>
 80046e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046e4:	d81c      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046ea:	d010      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x496>
 80046ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046f0:	d816      	bhi.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01d      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80046f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046fa:	d111      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	3304      	adds	r3, #4
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 ff70 	bl	80055e8 <RCCEx_PLL2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800470c:	e012      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	3324      	adds	r3, #36	; 0x24
 8004712:	2101      	movs	r1, #1
 8004714:	4618      	mov	r0, r3
 8004716:	f001 f819 	bl	800574c <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800471e:	e009      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	75fb      	strb	r3, [r7, #23]
      break;
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      break;
 8004732:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004734:	7dfb      	ldrb	r3, [r7, #23]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10a      	bne.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x4d8>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800473a:	4b2c      	ldr	r3, [pc, #176]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004748:	4928      	ldr	r1, [pc, #160]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800474a:	4313      	orrs	r3, r2
 800474c:	658b      	str	r3, [r1, #88]	; 0x58
 800474e:	e001      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004750:	7dfb      	ldrb	r3, [r7, #23]
 8004752:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d02f      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x548>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004768:	d00e      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x510>
 800476a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800476e:	d814      	bhi.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8004770:	2b00      	cmp	r3, #0
 8004772:	d015      	beq.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8004774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004778:	d10f      	bne.n	800479a <HAL_RCCEx_PeriphCLKConfig+0x522>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800477a:	4b1c      	ldr	r3, [pc, #112]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	4a1b      	ldr	r2, [pc, #108]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 8004780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004784:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004786:	e00c      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	3304      	adds	r3, #4
 800478c:	2101      	movs	r1, #1
 800478e:	4618      	mov	r0, r3
 8004790:	f000 ff2a 	bl	80055e8 <RCCEx_PLL2_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8004798:	e003      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	75fb      	strb	r3, [r7, #23]
      break;
 800479e:	e000      	b.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
      break;
 80047a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047a2:	7dfb      	ldrb	r3, [r7, #23]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d109      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80047a8:	4b10      	ldr	r3, [pc, #64]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80047aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ac:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b4:	490d      	ldr	r1, [pc, #52]	; (80047ec <HAL_RCCEx_PeriphCLKConfig+0x574>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	650b      	str	r3, [r1, #80]	; 0x50
 80047ba:	e001      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x548>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047bc:	7dfb      	ldrb	r3, [r7, #23]
 80047be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d034      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d81d      	bhi.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x598>
 80047d4:	a201      	add	r2, pc, #4	; (adr r2, 80047dc <HAL_RCCEx_PeriphCLKConfig+0x564>)
 80047d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047da:	bf00      	nop
 80047dc:	08004817 	.word	0x08004817
 80047e0:	080047f1 	.word	0x080047f1
 80047e4:	080047ff 	.word	0x080047ff
 80047e8:	08004817 	.word	0x08004817
 80047ec:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047f0:	4bb1      	ldr	r3, [pc, #708]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	4ab0      	ldr	r2, [pc, #704]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80047f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80047fc:	e00c      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x5a0>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	3304      	adds	r3, #4
 8004802:	2102      	movs	r1, #2
 8004804:	4618      	mov	r0, r3
 8004806:	f000 feef 	bl	80055e8 <RCCEx_PLL2_Config>
 800480a:	4603      	mov	r3, r0
 800480c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800480e:	e003      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	75fb      	strb	r3, [r7, #23]
      break;
 8004814:	e000      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      break;
 8004816:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004818:	7dfb      	ldrb	r3, [r7, #23]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800481e:	4ba6      	ldr	r3, [pc, #664]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004822:	f023 0203 	bic.w	r2, r3, #3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482a:	49a3      	ldr	r1, [pc, #652]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800482c:	4313      	orrs	r3, r2
 800482e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004830:	e001      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x5be>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004832:	7dfb      	ldrb	r3, [r7, #23]
 8004834:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8086 	beq.w	8004950 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004844:	4b9d      	ldr	r3, [pc, #628]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a9c      	ldr	r2, [pc, #624]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800484a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800484e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004850:	f7fc fdc2 	bl	80013d8 <HAL_GetTick>
 8004854:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004856:	e009      	b.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004858:	f7fc fdbe 	bl	80013d8 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	2b64      	cmp	r3, #100	; 0x64
 8004864:	d902      	bls.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
      {
        ret = HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	75fb      	strb	r3, [r7, #23]
        break;
 800486a:	e005      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x600>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800486c:	4b93      	ldr	r3, [pc, #588]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x844>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004874:	2b00      	cmp	r3, #0
 8004876:	d0ef      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
      }
    }

    if(ret == HAL_OK)
 8004878:	7dfb      	ldrb	r3, [r7, #23]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d166      	bne.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800487e:	4b8e      	ldr	r3, [pc, #568]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004880:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004888:	4053      	eors	r3, r2
 800488a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800488e:	2b00      	cmp	r3, #0
 8004890:	d013      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x642>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004892:	4b89      	ldr	r3, [pc, #548]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004896:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800489a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800489c:	4b86      	ldr	r3, [pc, #536]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800489e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a0:	4a85      	ldr	r2, [pc, #532]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80048a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048a8:	4b83      	ldr	r3, [pc, #524]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80048aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ac:	4a82      	ldr	r2, [pc, #520]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80048ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80048b4:	4a80      	ldr	r2, [pc, #512]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c4:	d115      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fc fd87 	bl	80013d8 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048cc:	e00b      	b.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fc fd83 	bl	80013d8 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d902      	bls.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
          {
            ret = HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	75fb      	strb	r3, [r7, #23]
            break;
 80048e4:	e005      	b.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x67a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80048e6:	4b74      	ldr	r3, [pc, #464]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 80048e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ea:	f003 0302 	and.w	r3, r3, #2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d0ed      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x656>
          }
        }
      }

      if(ret == HAL_OK)
 80048f2:	7dfb      	ldrb	r3, [r7, #23]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d126      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80048fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004906:	d10d      	bne.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x6ac>
 8004908:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800490a:	691b      	ldr	r3, [r3, #16]
 800490c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004916:	0919      	lsrs	r1, r3, #4
 8004918:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800491a:	400b      	ands	r3, r1
 800491c:	4966      	ldr	r1, [pc, #408]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800491e:	4313      	orrs	r3, r2
 8004920:	610b      	str	r3, [r1, #16]
 8004922:	e005      	b.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
 8004924:	4b64      	ldr	r3, [pc, #400]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	4a63      	ldr	r2, [pc, #396]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 800492a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800492e:	6113      	str	r3, [r2, #16]
 8004930:	4b61      	ldr	r3, [pc, #388]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004932:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800493a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800493e:	495e      	ldr	r1, [pc, #376]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004940:	4313      	orrs	r3, r2
 8004942:	670b      	str	r3, [r1, #112]	; 0x70
 8004944:	e004      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004946:	7dfb      	ldrb	r3, [r7, #23]
 8004948:	75bb      	strb	r3, [r7, #22]
 800494a:	e001      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800494c:	7dfb      	ldrb	r3, [r7, #23]
 800494e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b00      	cmp	r3, #0
 800495a:	d07e      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004960:	2b28      	cmp	r3, #40	; 0x28
 8004962:	d867      	bhi.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
 8004964:	a201      	add	r2, pc, #4	; (adr r2, 800496c <HAL_RCCEx_PeriphCLKConfig+0x6f4>)
 8004966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496a:	bf00      	nop
 800496c:	08004a3b 	.word	0x08004a3b
 8004970:	08004a35 	.word	0x08004a35
 8004974:	08004a35 	.word	0x08004a35
 8004978:	08004a35 	.word	0x08004a35
 800497c:	08004a35 	.word	0x08004a35
 8004980:	08004a35 	.word	0x08004a35
 8004984:	08004a35 	.word	0x08004a35
 8004988:	08004a35 	.word	0x08004a35
 800498c:	08004a11 	.word	0x08004a11
 8004990:	08004a35 	.word	0x08004a35
 8004994:	08004a35 	.word	0x08004a35
 8004998:	08004a35 	.word	0x08004a35
 800499c:	08004a35 	.word	0x08004a35
 80049a0:	08004a35 	.word	0x08004a35
 80049a4:	08004a35 	.word	0x08004a35
 80049a8:	08004a35 	.word	0x08004a35
 80049ac:	08004a23 	.word	0x08004a23
 80049b0:	08004a35 	.word	0x08004a35
 80049b4:	08004a35 	.word	0x08004a35
 80049b8:	08004a35 	.word	0x08004a35
 80049bc:	08004a35 	.word	0x08004a35
 80049c0:	08004a35 	.word	0x08004a35
 80049c4:	08004a35 	.word	0x08004a35
 80049c8:	08004a35 	.word	0x08004a35
 80049cc:	08004a3b 	.word	0x08004a3b
 80049d0:	08004a35 	.word	0x08004a35
 80049d4:	08004a35 	.word	0x08004a35
 80049d8:	08004a35 	.word	0x08004a35
 80049dc:	08004a35 	.word	0x08004a35
 80049e0:	08004a35 	.word	0x08004a35
 80049e4:	08004a35 	.word	0x08004a35
 80049e8:	08004a35 	.word	0x08004a35
 80049ec:	08004a3b 	.word	0x08004a3b
 80049f0:	08004a35 	.word	0x08004a35
 80049f4:	08004a35 	.word	0x08004a35
 80049f8:	08004a35 	.word	0x08004a35
 80049fc:	08004a35 	.word	0x08004a35
 8004a00:	08004a35 	.word	0x08004a35
 8004a04:	08004a35 	.word	0x08004a35
 8004a08:	08004a35 	.word	0x08004a35
 8004a0c:	08004a3b 	.word	0x08004a3b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3304      	adds	r3, #4
 8004a14:	2101      	movs	r1, #1
 8004a16:	4618      	mov	r0, r3
 8004a18:	f000 fde6 	bl	80055e8 <RCCEx_PLL2_Config>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a20:	e00c      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3324      	adds	r3, #36	; 0x24
 8004a26:	2101      	movs	r1, #1
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fe8f 	bl	800574c <RCCEx_PLL3_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004a32:	e003      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	75fb      	strb	r3, [r7, #23]
      break;
 8004a38:	e000      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
      break;
 8004a3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d109      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x7de>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4e:	491a      	ldr	r1, [pc, #104]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x840>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	654b      	str	r3, [r1, #84]	; 0x54
 8004a54:	e001      	b.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x7e2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a56:	7dfb      	ldrb	r3, [r7, #23]
 8004a58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0302 	and.w	r3, r3, #2
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d03e      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6a:	2b05      	cmp	r3, #5
 8004a6c:	d820      	bhi.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x838>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004ac5 	.word	0x08004ac5
 8004a78:	08004a8d 	.word	0x08004a8d
 8004a7c:	08004a9f 	.word	0x08004a9f
 8004a80:	08004ac5 	.word	0x08004ac5
 8004a84:	08004ac5 	.word	0x08004ac5
 8004a88:	08004ac5 	.word	0x08004ac5
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3304      	adds	r3, #4
 8004a90:	2101      	movs	r1, #1
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fda8 	bl	80055e8 <RCCEx_PLL2_Config>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004a9c:	e013      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x84e>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3324      	adds	r3, #36	; 0x24
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f000 fe51 	bl	800574c <RCCEx_PLL3_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8004ab4:	e007      	b.n	8004ac6 <HAL_RCCEx_PeriphCLKConfig+0x84e>
 8004ab6:	bf00      	nop
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	58024800 	.word	0x58024800
 8004ac0:	00ffffcf 	.word	0x00ffffcf
      break;
 8004ac4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d109      	bne.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x868>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004acc:	4b9f      	ldr	r3, [pc, #636]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad0:	f023 0207 	bic.w	r2, r3, #7
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ad8:	499c      	ldr	r1, [pc, #624]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	654b      	str	r3, [r1, #84]	; 0x54
 8004ade:	e001      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ae0:	7dfb      	ldrb	r3, [r7, #23]
 8004ae2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d039      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d820      	bhi.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 8004afa:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <HAL_RCCEx_PeriphCLKConfig+0x888>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b43 	.word	0x08004b43
 8004b04:	08004b19 	.word	0x08004b19
 8004b08:	08004b2b 	.word	0x08004b2b
 8004b0c:	08004b43 	.word	0x08004b43
 8004b10:	08004b43 	.word	0x08004b43
 8004b14:	08004b43 	.word	0x08004b43
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	2101      	movs	r1, #1
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fd62 	bl	80055e8 <RCCEx_PLL2_Config>
 8004b24:	4603      	mov	r3, r0
 8004b26:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b28:	e00c      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	3324      	adds	r3, #36	; 0x24
 8004b2e:	2101      	movs	r1, #1
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 fe0b 	bl	800574c <RCCEx_PLL3_Config>
 8004b36:	4603      	mov	r3, r0
 8004b38:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004b3a:	e003      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004b40:	e000      	b.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x8cc>
      break;
 8004b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b44:	7dfb      	ldrb	r3, [r7, #23]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x8e8>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b4a:	4b80      	ldr	r3, [pc, #512]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	f023 0207 	bic.w	r2, r3, #7
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b58:	497c      	ldr	r1, [pc, #496]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8004b5e:	e001      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b60:	7dfb      	ldrb	r3, [r7, #23]
 8004b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0320 	and.w	r3, r3, #32
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d04b      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x990>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b7a:	d02e      	beq.n	8004bda <HAL_RCCEx_PeriphCLKConfig+0x962>
 8004b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b80:	d828      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b86:	d02a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x966>
 8004b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b8c:	d822      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004b8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b92:	d026      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x96a>
 8004b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004b98:	d81c      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b9e:	d010      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x94a>
 8004ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba4:	d816      	bhi.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d01d      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x96e>
 8004baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bae:	d111      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fd16 	bl	80055e8 <RCCEx_PLL2_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004bc0:	e012      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x970>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	3324      	adds	r3, #36	; 0x24
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fdbf 	bl	800574c <RCCEx_PLL3_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004bd2:	e009      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bd8:	e006      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004bda:	bf00      	nop
 8004bdc:	e004      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004bde:	bf00      	nop
 8004be0:	e002      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004be2:	bf00      	nop
 8004be4:	e000      	b.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x970>
      break;
 8004be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004be8:	7dfb      	ldrb	r3, [r7, #23]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10a      	bne.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x98c>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bee:	4b57      	ldr	r3, [pc, #348]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bfc:	4953      	ldr	r1, [pc, #332]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	654b      	str	r3, [r1, #84]	; 0x54
 8004c02:	e001      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x990>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c04:	7dfb      	ldrb	r3, [r7, #23]
 8004c06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d04b      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa34>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c1a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c1e:	d02e      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xa06>
 8004c20:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004c24:	d828      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2a:	d02a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0xa0a>
 8004c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c30:	d822      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004c32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c36:	d026      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 8004c38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004c3c:	d81c      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004c3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c42:	d010      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
 8004c44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c48:	d816      	bhi.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d01d      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c52:	d111      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xa00>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	3304      	adds	r3, #4
 8004c58:	2100      	movs	r1, #0
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 fcc4 	bl	80055e8 <RCCEx_PLL2_Config>
 8004c60:	4603      	mov	r3, r0
 8004c62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c64:	e012      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xa14>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3324      	adds	r3, #36	; 0x24
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f000 fd6d 	bl	800574c <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004c76:	e009      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004c7e:	bf00      	nop
 8004c80:	e004      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0xa14>
      break;
 8004c8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10a      	bne.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004c92:	4b2e      	ldr	r3, [pc, #184]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c96:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ca0:	492a      	ldr	r1, [pc, #168]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	658b      	str	r3, [r1, #88]	; 0x58
 8004ca6:	e001      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa34>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca8:	7dfb      	ldrb	r3, [r7, #23]
 8004caa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d04d      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004cbe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cc2:	d02e      	beq.n	8004d22 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004cc4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004cc8:	d828      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004cca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cce:	d02a      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8004cd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cd4:	d822      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004cd6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004cda:	d026      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xab2>
 8004cdc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004ce0:	d81c      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004ce2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ce6:	d010      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xa92>
 8004ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cec:	d816      	bhi.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d01d      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xab6>
 8004cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cf6:	d111      	bne.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	2100      	movs	r1, #0
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fc72 	bl	80055e8 <RCCEx_PLL2_Config>
 8004d04:	4603      	mov	r3, r0
 8004d06:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d08:	e012      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xab8>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3324      	adds	r3, #36	; 0x24
 8004d0e:	2102      	movs	r1, #2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fd1b 	bl	800574c <RCCEx_PLL3_Config>
 8004d16:	4603      	mov	r3, r0
 8004d18:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004d1a:	e009      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d20:	e006      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004d22:	bf00      	nop
 8004d24:	e004      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004d26:	bf00      	nop
 8004d28:	e002      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0xab8>
      break;
 8004d2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d30:	7dfb      	ldrb	r3, [r7, #23]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10c      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0xad8>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004d36:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d44:	4901      	ldr	r1, [pc, #4]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0xad4>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	658b      	str	r3, [r1, #88]	; 0x58
 8004d4a:	e003      	b.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xadc>
 8004d4c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0308 	and.w	r3, r3, #8
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d018      	beq.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection )== RCC_I2C1235CLKSOURCE_PLL3 )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d68:	d10a      	bne.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xb08>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	3324      	adds	r3, #36	; 0x24
 8004d6e:	2102      	movs	r1, #2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fceb 	bl	800574c <RCCEx_PLL3_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0xb08>
        {
          status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004d80:	4b8a      	ldr	r3, [pc, #552]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d8c:	4987      	ldr	r1, [pc, #540]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 0310 	and.w	r3, r3, #16
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d01a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0xb5c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da8:	d10a      	bne.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3324      	adds	r3, #36	; 0x24
 8004dae:	2102      	movs	r1, #2
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fccb 	bl	800574c <RCCEx_PLL3_Config>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0xb48>
      {
        status = HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004dc0:	4b7a      	ldr	r3, [pc, #488]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dce:	4977      	ldr	r1, [pc, #476]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d034      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dea:	d01d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xbb0>
 8004dec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004df0:	d817      	bhi.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d003      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xb86>
 8004df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dfa:	d009      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004dfc:	e011      	b.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0xbaa>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3304      	adds	r3, #4
 8004e02:	2100      	movs	r1, #0
 8004e04:	4618      	mov	r0, r3
 8004e06:	f000 fbef 	bl	80055e8 <RCCEx_PLL2_Config>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e0e:	e00c      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3324      	adds	r3, #36	; 0x24
 8004e14:	2102      	movs	r1, #2
 8004e16:	4618      	mov	r0, r3
 8004e18:	f000 fc98 	bl	800574c <RCCEx_PLL3_Config>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004e20:	e003      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	75fb      	strb	r3, [r7, #23]
      break;
 8004e26:	e000      	b.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0xbb2>
      break;
 8004e28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e2a:	7dfb      	ldrb	r3, [r7, #23]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d10a      	bne.n	8004e46 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e30:	4b5e      	ldr	r3, [pc, #376]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004e3e:	495b      	ldr	r1, [pc, #364]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	658b      	str	r3, [r1, #88]	; 0x58
 8004e44:	e001      	b.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xbd2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d033      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e60:	d01c      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004e62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e66:	d816      	bhi.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004e68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e6c:	d003      	beq.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004e6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e72:	d007      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0xc0c>
 8004e74:	e00f      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e76:	4b4d      	ldr	r3, [pc, #308]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7a:	4a4c      	ldr	r2, [pc, #304]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004e7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e82:	e00c      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3324      	adds	r3, #36	; 0x24
 8004e88:	2101      	movs	r1, #1
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fc5e 	bl	800574c <RCCEx_PLL3_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004e94:	e003      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9a:	e000      	b.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      break;
 8004e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e9e:	7dfb      	ldrb	r3, [r7, #23]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d10a      	bne.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ea4:	4b41      	ldr	r3, [pc, #260]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ea8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eb2:	493e      	ldr	r1, [pc, #248]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	654b      	str	r3, [r1, #84]	; 0x54
 8004eb8:	e001      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004eba:	7dfb      	ldrb	r3, [r7, #23]
 8004ebc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d029      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xca6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ed6:	d007      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004ed8:	e00f      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xc82>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004eda:	4b34      	ldr	r3, [pc, #208]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ede:	4a33      	ldr	r2, [pc, #204]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ee6:	e00b      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3304      	adds	r3, #4
 8004eec:	2102      	movs	r1, #2
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fb7a 	bl	80055e8 <RCCEx_PLL2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004ef8:	e002      	b.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0xc88>

    default:
      ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
      break;
 8004efe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f00:	7dfb      	ldrb	r3, [r7, #23]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d109      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xca2>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004f06:	4b29      	ldr	r3, [pc, #164]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f12:	4926      	ldr	r1, [pc, #152]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f18:	e001      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xca6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1a:	7dfb      	ldrb	r3, [r7, #23]
 8004f1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	3324      	adds	r3, #36	; 0x24
 8004f2e:	2102      	movs	r1, #2
 8004f30:	4618      	mov	r0, r3
 8004f32:	f000 fc0b 	bl	800574c <RCCEx_PLL3_Config>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
    {
      status=HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d033      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f54:	d017      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0xd0e>
 8004f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5a:	d811      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f60:	d013      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xd12>
 8004f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f66:	d80b      	bhi.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xd16>
 8004f6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f70:	d106      	bne.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xd08>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f72:	4b0e      	ldr	r3, [pc, #56]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f76:	4a0d      	ldr	r2, [pc, #52]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004f7e:	e007      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	75fb      	strb	r3, [r7, #23]
      break;
 8004f84:	e004      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004f86:	bf00      	nop
 8004f88:	e002      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004f8a:	bf00      	nop
 8004f8c:	e000      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0xd18>
      break;
 8004f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f90:	7dfb      	ldrb	r3, [r7, #23]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10c      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xd38>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f96:	4b05      	ldr	r3, [pc, #20]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa2:	4902      	ldr	r1, [pc, #8]	; (8004fac <HAL_RCCEx_PeriphCLKConfig+0xd34>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	654b      	str	r3, [r1, #84]	; 0x54
 8004fa8:	e004      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
 8004faa:	bf00      	nop
 8004fac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
 8004fb2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d008      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0xd5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fc0:	4b29      	ldr	r3, [pc, #164]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fcc:	4926      	ldr	r1, [pc, #152]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d008      	beq.n	8004ff0 <HAL_RCCEx_PeriphCLKConfig+0xd78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fde:	4b22      	ldr	r3, [pc, #136]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fe0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fe2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fea:	491f      	ldr	r1, [pc, #124]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0xda0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ffc:	4b1a      	ldr	r3, [pc, #104]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	4a19      	ldr	r2, [pc, #100]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005002:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005006:	6113      	str	r3, [r2, #16]
 8005008:	4b17      	ldr	r3, [pc, #92]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005012:	4915      	ldr	r1, [pc, #84]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005014:	4313      	orrs	r3, r2
 8005016:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	da08      	bge.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0xdba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005020:	4b11      	ldr	r3, [pc, #68]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005024:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800502c:	490e      	ldr	r1, [pc, #56]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800502e:	4313      	orrs	r3, r2
 8005030:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xdda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 8005040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005042:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504c:	4906      	ldr	r1, [pc, #24]	; (8005068 <HAL_RCCEx_PeriphCLKConfig+0xdf0>)
 800504e:	4313      	orrs	r3, r2
 8005050:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8005052:	7dbb      	ldrb	r3, [r7, #22]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCCEx_PeriphCLKConfig+0xde4>
  {
    return HAL_OK;
 8005058:	2300      	movs	r3, #0
 800505a:	e000      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xde6>
  }
  return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
}
 800505e:	4618      	mov	r0, r3
 8005060:	3718      	adds	r7, #24
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	58024400 	.word	0x58024400

0800506c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005070:	f7ff f864 	bl	800413c <HAL_RCC_GetHCLKFreq>
 8005074:	4602      	mov	r2, r0
 8005076:	4b06      	ldr	r3, [pc, #24]	; (8005090 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	091b      	lsrs	r3, r3, #4
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	4904      	ldr	r1, [pc, #16]	; (8005094 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005082:	5ccb      	ldrb	r3, [r1, r3]
 8005084:	f003 031f 	and.w	r3, r3, #31
 8005088:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800508c:	4618      	mov	r0, r3
 800508e:	bd80      	pop	{r7, pc}
 8005090:	58024400 	.word	0x58024400
 8005094:	0800a108 	.word	0x0800a108

08005098 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005098:	b480      	push	{r7}
 800509a:	b089      	sub	sp, #36	; 0x24
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80050a0:	4ba1      	ldr	r3, [pc, #644]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80050aa:	4b9f      	ldr	r3, [pc, #636]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	0b1b      	lsrs	r3, r3, #12
 80050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80050b6:	4b9c      	ldr	r3, [pc, #624]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ba:	091b      	lsrs	r3, r3, #4
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80050c2:	4b99      	ldr	r3, [pc, #612]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	08db      	lsrs	r3, r3, #3
 80050c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	fb02 f303 	mul.w	r3, r2, r3
 80050d2:	ee07 3a90 	vmov	s15, r3
 80050d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8111 	beq.w	8005308 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	2b02      	cmp	r3, #2
 80050ea:	f000 8083 	beq.w	80051f4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	f200 80a1 	bhi.w	8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d003      	beq.n	8005104 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80050fc:	69bb      	ldr	r3, [r7, #24]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d056      	beq.n	80051b0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005102:	e099      	b.n	8005238 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005104:	4b88      	ldr	r3, [pc, #544]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0320 	and.w	r3, r3, #32
 800510c:	2b00      	cmp	r3, #0
 800510e:	d02d      	beq.n	800516c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005110:	4b85      	ldr	r3, [pc, #532]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	08db      	lsrs	r3, r3, #3
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	4a84      	ldr	r2, [pc, #528]	; (800532c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
 8005120:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	ee07 3a90 	vmov	s15, r3
 8005128:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	ee07 3a90 	vmov	s15, r3
 8005132:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800513a:	4b7b      	ldr	r3, [pc, #492]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005142:	ee07 3a90 	vmov	s15, r3
 8005146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800514a:	ed97 6a03 	vldr	s12, [r7, #12]
 800514e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800515a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800515e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005166:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800516a:	e087      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	ee07 3a90 	vmov	s15, r3
 8005172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005176:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005334 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800517a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800517e:	4b6a      	ldr	r3, [pc, #424]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005186:	ee07 3a90 	vmov	s15, r3
 800518a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800518e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005192:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800519a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800519e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051aa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051ae:	e065      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	ee07 3a90 	vmov	s15, r3
 80051b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80051be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051c2:	4b59      	ldr	r3, [pc, #356]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ca:	ee07 3a90 	vmov	s15, r3
 80051ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051d6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80051da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051f2:	e043      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	ee07 3a90 	vmov	s15, r3
 80051fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051fe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800533c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005206:	4b48      	ldr	r3, [pc, #288]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005216:	ed97 6a03 	vldr	s12, [r7, #12]
 800521a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800521e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800522a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800522e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005232:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005236:	e021      	b.n	800527c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	ee07 3a90 	vmov	s15, r3
 800523e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005242:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005338 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800524a:	4b37      	ldr	r3, [pc, #220]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800525a:	ed97 6a03 	vldr	s12, [r7, #12]
 800525e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005330 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800526a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800526e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005276:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800527a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800527c:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800527e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005280:	0a5b      	lsrs	r3, r3, #9
 8005282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800528e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005292:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005296:	edd7 6a07 	vldr	s13, [r7, #28]
 800529a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800529e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a2:	ee17 2a90 	vmov	r2, s15
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80052aa:	4b1f      	ldr	r3, [pc, #124]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	0c1b      	lsrs	r3, r3, #16
 80052b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052b4:	ee07 3a90 	vmov	s15, r3
 80052b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052bc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052c0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052c4:	edd7 6a07 	vldr	s13, [r7, #28]
 80052c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052d0:	ee17 2a90 	vmov	r2, s15
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80052d8:	4b13      	ldr	r3, [pc, #76]	; (8005328 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80052da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052dc:	0e1b      	lsrs	r3, r3, #24
 80052de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e2:	ee07 3a90 	vmov	s15, r3
 80052e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80052f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80052f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80052fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052fe:	ee17 2a90 	vmov	r2, s15
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005306:	e008      	b.n	800531a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	609a      	str	r2, [r3, #8]
}
 800531a:	bf00      	nop
 800531c:	3724      	adds	r7, #36	; 0x24
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr
 8005326:	bf00      	nop
 8005328:	58024400 	.word	0x58024400
 800532c:	03d09000 	.word	0x03d09000
 8005330:	46000000 	.word	0x46000000
 8005334:	4c742400 	.word	0x4c742400
 8005338:	4a742400 	.word	0x4a742400
 800533c:	4af42400 	.word	0x4af42400

08005340 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	; 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005348:	4ba1      	ldr	r3, [pc, #644]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800534a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005352:	4b9f      	ldr	r3, [pc, #636]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005356:	0d1b      	lsrs	r3, r3, #20
 8005358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800535c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800535e:	4b9c      	ldr	r3, [pc, #624]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005362:	0a1b      	lsrs	r3, r3, #8
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800536a:	4b99      	ldr	r3, [pc, #612]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800536c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800536e:	08db      	lsrs	r3, r3, #3
 8005370:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005374:	693a      	ldr	r2, [r7, #16]
 8005376:	fb02 f303 	mul.w	r3, r2, r3
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005382:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 8111 	beq.w	80055b0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	2b02      	cmp	r3, #2
 8005392:	f000 8083 	beq.w	800549c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	2b02      	cmp	r3, #2
 800539a:	f200 80a1 	bhi.w	80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d003      	beq.n	80053ac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d056      	beq.n	8005458 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80053aa:	e099      	b.n	80054e0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ac:	4b88      	ldr	r3, [pc, #544]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d02d      	beq.n	8005414 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80053b8:	4b85      	ldr	r3, [pc, #532]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	08db      	lsrs	r3, r3, #3
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	4a84      	ldr	r2, [pc, #528]	; (80055d4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80053c4:	fa22 f303 	lsr.w	r3, r2, r3
 80053c8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	ee07 3a90 	vmov	s15, r3
 80053d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	ee07 3a90 	vmov	s15, r3
 80053da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053e2:	4b7b      	ldr	r3, [pc, #492]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ea:	ee07 3a90 	vmov	s15, r3
 80053ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80053f6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80053fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005402:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800540a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800540e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005412:	e087      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	ee07 3a90 	vmov	s15, r3
 800541a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800541e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80055dc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005426:	4b6a      	ldr	r3, [pc, #424]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005436:	ed97 6a03 	vldr	s12, [r7, #12]
 800543a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800543e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005446:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800544a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800544e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005452:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005456:	e065      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	ee07 3a90 	vmov	s15, r3
 800545e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005462:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80055e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800546a:	4b59      	ldr	r3, [pc, #356]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547a:	ed97 6a03 	vldr	s12, [r7, #12]
 800547e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800548e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005496:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800549a:	e043      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80055e4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80054aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ae:	4b48      	ldr	r3, [pc, #288]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054be:	ed97 6a03 	vldr	s12, [r7, #12]
 80054c2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80054c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80054d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054da:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80054de:	e021      	b.n	8005524 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	ee07 3a90 	vmov	s15, r3
 80054e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054ea:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80055e0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80054ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054f2:	4b37      	ldr	r3, [pc, #220]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005502:	ed97 6a03 	vldr	s12, [r7, #12]
 8005506:	eddf 5a34 	vldr	s11, [pc, #208]	; 80055d8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800550a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800550e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800551a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800551e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005522:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005524:	4b2a      	ldr	r3, [pc, #168]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	0a5b      	lsrs	r3, r3, #9
 800552a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552e:	ee07 3a90 	vmov	s15, r3
 8005532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005536:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800553a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800553e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005542:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005546:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800554a:	ee17 2a90 	vmov	r2, s15
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005552:	4b1f      	ldr	r3, [pc, #124]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005556:	0c1b      	lsrs	r3, r3, #16
 8005558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555c:	ee07 3a90 	vmov	s15, r3
 8005560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005568:	ee37 7a87 	vadd.f32	s14, s15, s14
 800556c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005578:	ee17 2a90 	vmov	r2, s15
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005580:	4b13      	ldr	r3, [pc, #76]	; (80055d0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	0e1b      	lsrs	r3, r3, #24
 8005586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800558a:	ee07 3a90 	vmov	s15, r3
 800558e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005592:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005596:	ee37 7a87 	vadd.f32	s14, s15, s14
 800559a:	edd7 6a07 	vldr	s13, [r7, #28]
 800559e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055a6:	ee17 2a90 	vmov	r2, s15
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80055ae:	e008      	b.n	80055c2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	609a      	str	r2, [r3, #8]
}
 80055c2:	bf00      	nop
 80055c4:	3724      	adds	r7, #36	; 0x24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	58024400 	.word	0x58024400
 80055d4:	03d09000 	.word	0x03d09000
 80055d8:	46000000 	.word	0x46000000
 80055dc:	4c742400 	.word	0x4c742400
 80055e0:	4a742400 	.word	0x4a742400
 80055e4:	4af42400 	.word	0x4af42400

080055e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80055f6:	4b53      	ldr	r3, [pc, #332]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80055f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fa:	f003 0303 	and.w	r3, r3, #3
 80055fe:	2b03      	cmp	r3, #3
 8005600:	d101      	bne.n	8005606 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e099      	b.n	800573a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005606:	4b4f      	ldr	r3, [pc, #316]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a4e      	ldr	r2, [pc, #312]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 800560c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005612:	f7fb fee1 	bl	80013d8 <HAL_GetTick>
 8005616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005618:	e008      	b.n	800562c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800561a:	f7fb fedd 	bl	80013d8 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	2b02      	cmp	r3, #2
 8005626:	d901      	bls.n	800562c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005628:	2303      	movs	r3, #3
 800562a:	e086      	b.n	800573a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800562c:	4b45      	ldr	r3, [pc, #276]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005634:	2b00      	cmp	r3, #0
 8005636:	d1f0      	bne.n	800561a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005638:	4b42      	ldr	r3, [pc, #264]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 800563a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	031b      	lsls	r3, r3, #12
 8005646:	493f      	ldr	r1, [pc, #252]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 8005648:	4313      	orrs	r3, r2
 800564a:	628b      	str	r3, [r1, #40]	; 0x28
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	3b01      	subs	r3, #1
 8005652:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	3b01      	subs	r3, #1
 800565c:	025b      	lsls	r3, r3, #9
 800565e:	b29b      	uxth	r3, r3
 8005660:	431a      	orrs	r2, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	68db      	ldr	r3, [r3, #12]
 8005666:	3b01      	subs	r3, #1
 8005668:	041b      	lsls	r3, r3, #16
 800566a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800566e:	431a      	orrs	r2, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	3b01      	subs	r3, #1
 8005676:	061b      	lsls	r3, r3, #24
 8005678:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800567c:	4931      	ldr	r1, [pc, #196]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 800567e:	4313      	orrs	r3, r2
 8005680:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005682:	4b30      	ldr	r3, [pc, #192]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 8005684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005686:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	492d      	ldr	r1, [pc, #180]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 8005690:	4313      	orrs	r3, r2
 8005692:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005694:	4b2b      	ldr	r3, [pc, #172]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 8005696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005698:	f023 0220 	bic.w	r2, r3, #32
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	4928      	ldr	r1, [pc, #160]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80056a6:	4b27      	ldr	r3, [pc, #156]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	4a26      	ldr	r2, [pc, #152]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056ac:	f023 0310 	bic.w	r3, r3, #16
 80056b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80056b2:	4b24      	ldr	r3, [pc, #144]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80056b6:	4b24      	ldr	r3, [pc, #144]	; (8005748 <RCCEx_PLL2_Config+0x160>)
 80056b8:	4013      	ands	r3, r2
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	69d2      	ldr	r2, [r2, #28]
 80056be:	00d2      	lsls	r2, r2, #3
 80056c0:	4920      	ldr	r1, [pc, #128]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80056c6:	4b1f      	ldr	r3, [pc, #124]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056cc:	f043 0310 	orr.w	r3, r3, #16
 80056d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80056d8:	4b1a      	ldr	r3, [pc, #104]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	4a19      	ldr	r2, [pc, #100]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056e4:	e00f      	b.n	8005706 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d106      	bne.n	80056fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80056ec:	4b15      	ldr	r3, [pc, #84]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	4a14      	ldr	r2, [pc, #80]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80056f8:	e005      	b.n	8005706 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	4a11      	ldr	r2, [pc, #68]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 8005700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005704:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005706:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a0e      	ldr	r2, [pc, #56]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 800570c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005712:	f7fb fe61 	bl	80013d8 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005718:	e008      	b.n	800572c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800571a:	f7fb fe5d 	bl	80013d8 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b02      	cmp	r3, #2
 8005726:	d901      	bls.n	800572c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e006      	b.n	800573a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <RCCEx_PLL2_Config+0x15c>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d0f0      	beq.n	800571a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005738:	7bfb      	ldrb	r3, [r7, #15]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	58024400 	.word	0x58024400
 8005748:	ffff0007 	.word	0xffff0007

0800574c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b084      	sub	sp, #16
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800575a:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	f003 0303 	and.w	r3, r3, #3
 8005762:	2b03      	cmp	r3, #3
 8005764:	d101      	bne.n	800576a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e099      	b.n	800589e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800576a:	4b4f      	ldr	r3, [pc, #316]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a4e      	ldr	r2, [pc, #312]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005776:	f7fb fe2f 	bl	80013d8 <HAL_GetTick>
 800577a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800577c:	e008      	b.n	8005790 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800577e:	f7fb fe2b 	bl	80013d8 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e086      	b.n	800589e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005790:	4b45      	ldr	r3, [pc, #276]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f0      	bne.n	800577e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800579c:	4b42      	ldr	r3, [pc, #264]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 800579e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	051b      	lsls	r3, r3, #20
 80057aa:	493f      	ldr	r1, [pc, #252]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	628b      	str	r3, [r1, #40]	; 0x28
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	3b01      	subs	r3, #1
 80057b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	3b01      	subs	r3, #1
 80057c0:	025b      	lsls	r3, r3, #9
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	431a      	orrs	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80057d2:	431a      	orrs	r2, r3
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	3b01      	subs	r3, #1
 80057da:	061b      	lsls	r3, r3, #24
 80057dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80057e0:	4931      	ldr	r1, [pc, #196]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80057e6:	4b30      	ldr	r3, [pc, #192]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 80057e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	492d      	ldr	r1, [pc, #180]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80057f8:	4b2b      	ldr	r3, [pc, #172]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 80057fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	699b      	ldr	r3, [r3, #24]
 8005804:	4928      	ldr	r1, [pc, #160]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005806:	4313      	orrs	r3, r2
 8005808:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800580a:	4b27      	ldr	r3, [pc, #156]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 800580c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580e:	4a26      	ldr	r2, [pc, #152]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005814:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005816:	4b24      	ldr	r3, [pc, #144]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800581a:	4b24      	ldr	r3, [pc, #144]	; (80058ac <RCCEx_PLL3_Config+0x160>)
 800581c:	4013      	ands	r3, r2
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	69d2      	ldr	r2, [r2, #28]
 8005822:	00d2      	lsls	r2, r2, #3
 8005824:	4920      	ldr	r1, [pc, #128]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005826:	4313      	orrs	r3, r2
 8005828:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800582a:	4b1f      	ldr	r3, [pc, #124]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	4a1e      	ldr	r2, [pc, #120]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005830:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005834:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d106      	bne.n	800584a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800583c:	4b1a      	ldr	r3, [pc, #104]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 800583e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005840:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005842:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005846:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005848:	e00f      	b.n	800586a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d106      	bne.n	800585e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005854:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005856:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800585a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800585c:	e005      	b.n	800586a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800585e:	4b12      	ldr	r3, [pc, #72]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005862:	4a11      	ldr	r2, [pc, #68]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005864:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005868:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800586a:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a0e      	ldr	r2, [pc, #56]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005874:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005876:	f7fb fdaf 	bl	80013d8 <HAL_GetTick>
 800587a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800587c:	e008      	b.n	8005890 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800587e:	f7fb fdab 	bl	80013d8 <HAL_GetTick>
 8005882:	4602      	mov	r2, r0
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	2b02      	cmp	r3, #2
 800588a:	d901      	bls.n	8005890 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e006      	b.n	800589e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <RCCEx_PLL3_Config+0x15c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005898:	2b00      	cmp	r3, #0
 800589a:	d0f0      	beq.n	800587e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800589c:	7bfb      	ldrb	r3, [r7, #15]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	58024400 	.word	0x58024400
 80058ac:	ffff0007 	.word	0xffff0007

080058b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e049      	b.n	8005956 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f841 	bl	800595e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f000 fa0e 	bl	8005d10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005966:	bf00      	nop
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d001      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e05e      	b.n	8005a4a <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a2b      	ldr	r2, [pc, #172]	; (8005a58 <HAL_TIM_Base_Start_IT+0xe4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d02c      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d027      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a27      	ldr	r2, [pc, #156]	; (8005a5c <HAL_TIM_Base_Start_IT+0xe8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d022      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a26      	ldr	r2, [pc, #152]	; (8005a60 <HAL_TIM_Base_Start_IT+0xec>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d01d      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a24      	ldr	r2, [pc, #144]	; (8005a64 <HAL_TIM_Base_Start_IT+0xf0>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d018      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a23      	ldr	r2, [pc, #140]	; (8005a68 <HAL_TIM_Base_Start_IT+0xf4>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d013      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a21      	ldr	r2, [pc, #132]	; (8005a6c <HAL_TIM_Base_Start_IT+0xf8>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d00e      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a20      	ldr	r2, [pc, #128]	; (8005a70 <HAL_TIM_Base_Start_IT+0xfc>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d009      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a1e      	ldr	r2, [pc, #120]	; (8005a74 <HAL_TIM_Base_Start_IT+0x100>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d004      	beq.n	8005a08 <HAL_TIM_Base_Start_IT+0x94>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <HAL_TIM_Base_Start_IT+0x104>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d115      	bne.n	8005a34 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	689a      	ldr	r2, [r3, #8]
 8005a0e:	4b1b      	ldr	r3, [pc, #108]	; (8005a7c <HAL_TIM_Base_Start_IT+0x108>)
 8005a10:	4013      	ands	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2b06      	cmp	r3, #6
 8005a18:	d015      	beq.n	8005a46 <HAL_TIM_Base_Start_IT+0xd2>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a20:	d011      	beq.n	8005a46 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f042 0201 	orr.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a32:	e008      	b.n	8005a46 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	681a      	ldr	r2, [r3, #0]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f042 0201 	orr.w	r2, r2, #1
 8005a42:	601a      	str	r2, [r3, #0]
 8005a44:	e000      	b.n	8005a48 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a46:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a48:	2300      	movs	r3, #0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	40010000 	.word	0x40010000
 8005a5c:	40000400 	.word	0x40000400
 8005a60:	40000800 	.word	0x40000800
 8005a64:	40000c00 	.word	0x40000c00
 8005a68:	40010400 	.word	0x40010400
 8005a6c:	40001800 	.word	0x40001800
 8005a70:	40014000 	.word	0x40014000
 8005a74:	4000e000 	.word	0x4000e000
 8005a78:	4000e400 	.word	0x4000e400
 8005a7c:	00010007 	.word	0x00010007

08005a80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	f003 0302 	and.w	r3, r3, #2
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d122      	bne.n	8005adc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d11b      	bne.n	8005adc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0202 	mvn.w	r2, #2
 8005aac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	f003 0303 	and.w	r3, r3, #3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d003      	beq.n	8005aca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f905 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005ac8:	e005      	b.n	8005ad6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f8f7 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 f908 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b04      	cmp	r3, #4
 8005ae8:	d122      	bne.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0304 	and.w	r3, r3, #4
 8005af4:	2b04      	cmp	r3, #4
 8005af6:	d11b      	bne.n	8005b30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0204 	mvn.w	r2, #4
 8005b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2202      	movs	r2, #2
 8005b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d003      	beq.n	8005b1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f8db 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005b1c:	e005      	b.n	8005b2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f000 f8cd 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 f8de 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d122      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d11b      	bne.n	8005b84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f06f 0208 	mvn.w	r2, #8
 8005b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2204      	movs	r2, #4
 8005b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	f003 0303 	and.w	r3, r3, #3
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d003      	beq.n	8005b72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f8b1 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005b70:	e005      	b.n	8005b7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f8a3 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 f8b4 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d122      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f003 0310 	and.w	r3, r3, #16
 8005b9c:	2b10      	cmp	r3, #16
 8005b9e:	d11b      	bne.n	8005bd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f06f 0210 	mvn.w	r2, #16
 8005ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2208      	movs	r2, #8
 8005bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d003      	beq.n	8005bc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f887 	bl	8005cd2 <HAL_TIM_IC_CaptureCallback>
 8005bc4:	e005      	b.n	8005bd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f879 	bl	8005cbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f000 f88a 	bl	8005ce6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691b      	ldr	r3, [r3, #16]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d10e      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d107      	bne.n	8005c04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f06f 0201 	mvn.w	r2, #1
 8005bfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f7fb f946 	bl	8000e90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0e:	2b80      	cmp	r3, #128	; 0x80
 8005c10:	d10e      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c1c:	2b80      	cmp	r3, #128	; 0x80
 8005c1e:	d107      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f000 f920 	bl	8005e70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3e:	d10e      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c4a:	2b80      	cmp	r3, #128	; 0x80
 8005c4c:	d107      	bne.n	8005c5e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 f913 	bl	8005e84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c68:	2b40      	cmp	r3, #64	; 0x40
 8005c6a:	d10e      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c76:	2b40      	cmp	r3, #64	; 0x40
 8005c78:	d107      	bne.n	8005c8a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c84:	6878      	ldr	r0, [r7, #4]
 8005c86:	f000 f838 	bl	8005cfa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0320 	and.w	r3, r3, #32
 8005c94:	2b20      	cmp	r3, #32
 8005c96:	d10e      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0320 	and.w	r3, r3, #32
 8005ca2:	2b20      	cmp	r3, #32
 8005ca4:	d107      	bne.n	8005cb6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f06f 0220 	mvn.w	r2, #32
 8005cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8d3 	bl	8005e5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cb6:	bf00      	nop
 8005cb8:	3708      	adds	r7, #8
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}

08005cbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b083      	sub	sp, #12
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cda:	bf00      	nop
 8005cdc:	370c      	adds	r7, #12
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce4:	4770      	bx	lr

08005ce6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b083      	sub	sp, #12
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cee:	bf00      	nop
 8005cf0:	370c      	adds	r7, #12
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b083      	sub	sp, #12
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
	...

08005d10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4a44      	ldr	r2, [pc, #272]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d013      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d2e:	d00f      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a41      	ldr	r2, [pc, #260]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00b      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a40      	ldr	r2, [pc, #256]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d007      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a3f      	ldr	r2, [pc, #252]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d003      	beq.n	8005d50 <TIM_Base_SetConfig+0x40>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a3e      	ldr	r2, [pc, #248]	; (8005e44 <TIM_Base_SetConfig+0x134>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d108      	bne.n	8005d62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a33      	ldr	r2, [pc, #204]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d027      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d70:	d023      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a30      	ldr	r2, [pc, #192]	; (8005e38 <TIM_Base_SetConfig+0x128>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d01f      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	4a2f      	ldr	r2, [pc, #188]	; (8005e3c <TIM_Base_SetConfig+0x12c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d01b      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a2e      	ldr	r2, [pc, #184]	; (8005e40 <TIM_Base_SetConfig+0x130>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d017      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a2d      	ldr	r2, [pc, #180]	; (8005e44 <TIM_Base_SetConfig+0x134>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <TIM_Base_SetConfig+0x138>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00f      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a2b      	ldr	r2, [pc, #172]	; (8005e4c <TIM_Base_SetConfig+0x13c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00b      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a2a      	ldr	r2, [pc, #168]	; (8005e50 <TIM_Base_SetConfig+0x140>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a29      	ldr	r2, [pc, #164]	; (8005e54 <TIM_Base_SetConfig+0x144>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_Base_SetConfig+0xaa>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a28      	ldr	r2, [pc, #160]	; (8005e58 <TIM_Base_SetConfig+0x148>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d108      	bne.n	8005dcc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	689a      	ldr	r2, [r3, #8]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	4a10      	ldr	r2, [pc, #64]	; (8005e34 <TIM_Base_SetConfig+0x124>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d00f      	beq.n	8005e18 <TIM_Base_SetConfig+0x108>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a12      	ldr	r2, [pc, #72]	; (8005e44 <TIM_Base_SetConfig+0x134>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d00b      	beq.n	8005e18 <TIM_Base_SetConfig+0x108>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a11      	ldr	r2, [pc, #68]	; (8005e48 <TIM_Base_SetConfig+0x138>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d007      	beq.n	8005e18 <TIM_Base_SetConfig+0x108>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a10      	ldr	r2, [pc, #64]	; (8005e4c <TIM_Base_SetConfig+0x13c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d003      	beq.n	8005e18 <TIM_Base_SetConfig+0x108>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a0f      	ldr	r2, [pc, #60]	; (8005e50 <TIM_Base_SetConfig+0x140>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d103      	bne.n	8005e20 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	691a      	ldr	r2, [r3, #16]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	615a      	str	r2, [r3, #20]
}
 8005e26:	bf00      	nop
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40010000 	.word	0x40010000
 8005e38:	40000400 	.word	0x40000400
 8005e3c:	40000800 	.word	0x40000800
 8005e40:	40000c00 	.word	0x40000c00
 8005e44:	40010400 	.word	0x40010400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800
 8005e54:	4000e000 	.word	0x4000e000
 8005e58:	4000e400 	.word	0x4000e400

08005e5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e042      	b.n	8005f30 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d106      	bne.n	8005ec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7fb f9a3 	bl	8001208 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2224      	movs	r2, #36	; 0x24
 8005ec6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f022 0201 	bic.w	r2, r2, #1
 8005ed8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f82c 	bl	8005f38 <UART_SetConfig>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d101      	bne.n	8005eea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e022      	b.n	8005f30 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fe8c 	bl	8006c10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	689a      	ldr	r2, [r3, #8]
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f042 0201 	orr.w	r2, r2, #1
 8005f26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 ff13 	bl	8006d54 <UART_CheckIdleState>
 8005f2e:	4603      	mov	r3, r0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3708      	adds	r7, #8
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f3c:	b092      	sub	sp, #72	; 0x48
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	431a      	orrs	r2, r3
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	4bbe      	ldr	r3, [pc, #760]	; (8006260 <UART_SetConfig+0x328>)
 8005f68:	4013      	ands	r3, r2
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	6812      	ldr	r2, [r2, #0]
 8005f6e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	68da      	ldr	r2, [r3, #12]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	430a      	orrs	r2, r1
 8005f88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	699b      	ldr	r3, [r3, #24]
 8005f8e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4ab3      	ldr	r2, [pc, #716]	; (8006264 <UART_SetConfig+0x32c>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	4baf      	ldr	r3, [pc, #700]	; (8006268 <UART_SetConfig+0x330>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fbe:	f023 010f 	bic.w	r1, r3, #15
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4aa6      	ldr	r2, [pc, #664]	; (800626c <UART_SetConfig+0x334>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d177      	bne.n	80060c8 <UART_SetConfig+0x190>
 8005fd8:	4ba5      	ldr	r3, [pc, #660]	; (8006270 <UART_SetConfig+0x338>)
 8005fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fe0:	2b28      	cmp	r3, #40	; 0x28
 8005fe2:	d86d      	bhi.n	80060c0 <UART_SetConfig+0x188>
 8005fe4:	a201      	add	r2, pc, #4	; (adr r2, 8005fec <UART_SetConfig+0xb4>)
 8005fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fea:	bf00      	nop
 8005fec:	08006091 	.word	0x08006091
 8005ff0:	080060c1 	.word	0x080060c1
 8005ff4:	080060c1 	.word	0x080060c1
 8005ff8:	080060c1 	.word	0x080060c1
 8005ffc:	080060c1 	.word	0x080060c1
 8006000:	080060c1 	.word	0x080060c1
 8006004:	080060c1 	.word	0x080060c1
 8006008:	080060c1 	.word	0x080060c1
 800600c:	08006099 	.word	0x08006099
 8006010:	080060c1 	.word	0x080060c1
 8006014:	080060c1 	.word	0x080060c1
 8006018:	080060c1 	.word	0x080060c1
 800601c:	080060c1 	.word	0x080060c1
 8006020:	080060c1 	.word	0x080060c1
 8006024:	080060c1 	.word	0x080060c1
 8006028:	080060c1 	.word	0x080060c1
 800602c:	080060a1 	.word	0x080060a1
 8006030:	080060c1 	.word	0x080060c1
 8006034:	080060c1 	.word	0x080060c1
 8006038:	080060c1 	.word	0x080060c1
 800603c:	080060c1 	.word	0x080060c1
 8006040:	080060c1 	.word	0x080060c1
 8006044:	080060c1 	.word	0x080060c1
 8006048:	080060c1 	.word	0x080060c1
 800604c:	080060a9 	.word	0x080060a9
 8006050:	080060c1 	.word	0x080060c1
 8006054:	080060c1 	.word	0x080060c1
 8006058:	080060c1 	.word	0x080060c1
 800605c:	080060c1 	.word	0x080060c1
 8006060:	080060c1 	.word	0x080060c1
 8006064:	080060c1 	.word	0x080060c1
 8006068:	080060c1 	.word	0x080060c1
 800606c:	080060b1 	.word	0x080060b1
 8006070:	080060c1 	.word	0x080060c1
 8006074:	080060c1 	.word	0x080060c1
 8006078:	080060c1 	.word	0x080060c1
 800607c:	080060c1 	.word	0x080060c1
 8006080:	080060c1 	.word	0x080060c1
 8006084:	080060c1 	.word	0x080060c1
 8006088:	080060c1 	.word	0x080060c1
 800608c:	080060b9 	.word	0x080060b9
 8006090:	2301      	movs	r3, #1
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006096:	e326      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006098:	2304      	movs	r3, #4
 800609a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800609e:	e322      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80060a0:	2308      	movs	r3, #8
 80060a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060a6:	e31e      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80060a8:	2310      	movs	r3, #16
 80060aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060ae:	e31a      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80060b0:	2320      	movs	r3, #32
 80060b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060b6:	e316      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80060b8:	2340      	movs	r3, #64	; 0x40
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060be:	e312      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80060c0:	2380      	movs	r3, #128	; 0x80
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80060c6:	e30e      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a69      	ldr	r2, [pc, #420]	; (8006274 <UART_SetConfig+0x33c>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d130      	bne.n	8006134 <UART_SetConfig+0x1fc>
 80060d2:	4b67      	ldr	r3, [pc, #412]	; (8006270 <UART_SetConfig+0x338>)
 80060d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d6:	f003 0307 	and.w	r3, r3, #7
 80060da:	2b05      	cmp	r3, #5
 80060dc:	d826      	bhi.n	800612c <UART_SetConfig+0x1f4>
 80060de:	a201      	add	r2, pc, #4	; (adr r2, 80060e4 <UART_SetConfig+0x1ac>)
 80060e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e4:	080060fd 	.word	0x080060fd
 80060e8:	08006105 	.word	0x08006105
 80060ec:	0800610d 	.word	0x0800610d
 80060f0:	08006115 	.word	0x08006115
 80060f4:	0800611d 	.word	0x0800611d
 80060f8:	08006125 	.word	0x08006125
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006102:	e2f0      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006104:	2304      	movs	r3, #4
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800610a:	e2ec      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800610c:	2308      	movs	r3, #8
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006112:	e2e8      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006114:	2310      	movs	r3, #16
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800611a:	e2e4      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800611c:	2320      	movs	r3, #32
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006122:	e2e0      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006124:	2340      	movs	r3, #64	; 0x40
 8006126:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800612a:	e2dc      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800612c:	2380      	movs	r3, #128	; 0x80
 800612e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006132:	e2d8      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a4f      	ldr	r2, [pc, #316]	; (8006278 <UART_SetConfig+0x340>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d130      	bne.n	80061a0 <UART_SetConfig+0x268>
 800613e:	4b4c      	ldr	r3, [pc, #304]	; (8006270 <UART_SetConfig+0x338>)
 8006140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b05      	cmp	r3, #5
 8006148:	d826      	bhi.n	8006198 <UART_SetConfig+0x260>
 800614a:	a201      	add	r2, pc, #4	; (adr r2, 8006150 <UART_SetConfig+0x218>)
 800614c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006150:	08006169 	.word	0x08006169
 8006154:	08006171 	.word	0x08006171
 8006158:	08006179 	.word	0x08006179
 800615c:	08006181 	.word	0x08006181
 8006160:	08006189 	.word	0x08006189
 8006164:	08006191 	.word	0x08006191
 8006168:	2300      	movs	r3, #0
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800616e:	e2ba      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006170:	2304      	movs	r3, #4
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006176:	e2b6      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006178:	2308      	movs	r3, #8
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800617e:	e2b2      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006180:	2310      	movs	r3, #16
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006186:	e2ae      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006188:	2320      	movs	r3, #32
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800618e:	e2aa      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006190:	2340      	movs	r3, #64	; 0x40
 8006192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006196:	e2a6      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800619e:	e2a2      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a35      	ldr	r2, [pc, #212]	; (800627c <UART_SetConfig+0x344>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d130      	bne.n	800620c <UART_SetConfig+0x2d4>
 80061aa:	4b31      	ldr	r3, [pc, #196]	; (8006270 <UART_SetConfig+0x338>)
 80061ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d826      	bhi.n	8006204 <UART_SetConfig+0x2cc>
 80061b6:	a201      	add	r2, pc, #4	; (adr r2, 80061bc <UART_SetConfig+0x284>)
 80061b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061bc:	080061d5 	.word	0x080061d5
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	080061e5 	.word	0x080061e5
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	080061f5 	.word	0x080061f5
 80061d0:	080061fd 	.word	0x080061fd
 80061d4:	2300      	movs	r3, #0
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061da:	e284      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061e2:	e280      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061ea:	e27c      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061f2:	e278      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80061f4:	2320      	movs	r3, #32
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80061fa:	e274      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80061fc:	2340      	movs	r3, #64	; 0x40
 80061fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006202:	e270      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006204:	2380      	movs	r3, #128	; 0x80
 8006206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800620a:	e26c      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4a1b      	ldr	r2, [pc, #108]	; (8006280 <UART_SetConfig+0x348>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d142      	bne.n	800629c <UART_SetConfig+0x364>
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <UART_SetConfig+0x338>)
 8006218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621a:	f003 0307 	and.w	r3, r3, #7
 800621e:	2b05      	cmp	r3, #5
 8006220:	d838      	bhi.n	8006294 <UART_SetConfig+0x35c>
 8006222:	a201      	add	r2, pc, #4	; (adr r2, 8006228 <UART_SetConfig+0x2f0>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	08006241 	.word	0x08006241
 800622c:	08006249 	.word	0x08006249
 8006230:	08006251 	.word	0x08006251
 8006234:	08006259 	.word	0x08006259
 8006238:	08006285 	.word	0x08006285
 800623c:	0800628d 	.word	0x0800628d
 8006240:	2300      	movs	r3, #0
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006246:	e24e      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006248:	2304      	movs	r3, #4
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800624e:	e24a      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006250:	2308      	movs	r3, #8
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006256:	e246      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006258:	2310      	movs	r3, #16
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800625e:	e242      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006260:	cfff69f3 	.word	0xcfff69f3
 8006264:	58000c00 	.word	0x58000c00
 8006268:	11fff4ff 	.word	0x11fff4ff
 800626c:	40011000 	.word	0x40011000
 8006270:	58024400 	.word	0x58024400
 8006274:	40004400 	.word	0x40004400
 8006278:	40004800 	.word	0x40004800
 800627c:	40004c00 	.word	0x40004c00
 8006280:	40005000 	.word	0x40005000
 8006284:	2320      	movs	r3, #32
 8006286:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800628a:	e22c      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800628c:	2340      	movs	r3, #64	; 0x40
 800628e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006292:	e228      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006294:	2380      	movs	r3, #128	; 0x80
 8006296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800629a:	e224      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4ab1      	ldr	r2, [pc, #708]	; (8006568 <UART_SetConfig+0x630>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d176      	bne.n	8006394 <UART_SetConfig+0x45c>
 80062a6:	4bb1      	ldr	r3, [pc, #708]	; (800656c <UART_SetConfig+0x634>)
 80062a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80062ae:	2b28      	cmp	r3, #40	; 0x28
 80062b0:	d86c      	bhi.n	800638c <UART_SetConfig+0x454>
 80062b2:	a201      	add	r2, pc, #4	; (adr r2, 80062b8 <UART_SetConfig+0x380>)
 80062b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062b8:	0800635d 	.word	0x0800635d
 80062bc:	0800638d 	.word	0x0800638d
 80062c0:	0800638d 	.word	0x0800638d
 80062c4:	0800638d 	.word	0x0800638d
 80062c8:	0800638d 	.word	0x0800638d
 80062cc:	0800638d 	.word	0x0800638d
 80062d0:	0800638d 	.word	0x0800638d
 80062d4:	0800638d 	.word	0x0800638d
 80062d8:	08006365 	.word	0x08006365
 80062dc:	0800638d 	.word	0x0800638d
 80062e0:	0800638d 	.word	0x0800638d
 80062e4:	0800638d 	.word	0x0800638d
 80062e8:	0800638d 	.word	0x0800638d
 80062ec:	0800638d 	.word	0x0800638d
 80062f0:	0800638d 	.word	0x0800638d
 80062f4:	0800638d 	.word	0x0800638d
 80062f8:	0800636d 	.word	0x0800636d
 80062fc:	0800638d 	.word	0x0800638d
 8006300:	0800638d 	.word	0x0800638d
 8006304:	0800638d 	.word	0x0800638d
 8006308:	0800638d 	.word	0x0800638d
 800630c:	0800638d 	.word	0x0800638d
 8006310:	0800638d 	.word	0x0800638d
 8006314:	0800638d 	.word	0x0800638d
 8006318:	08006375 	.word	0x08006375
 800631c:	0800638d 	.word	0x0800638d
 8006320:	0800638d 	.word	0x0800638d
 8006324:	0800638d 	.word	0x0800638d
 8006328:	0800638d 	.word	0x0800638d
 800632c:	0800638d 	.word	0x0800638d
 8006330:	0800638d 	.word	0x0800638d
 8006334:	0800638d 	.word	0x0800638d
 8006338:	0800637d 	.word	0x0800637d
 800633c:	0800638d 	.word	0x0800638d
 8006340:	0800638d 	.word	0x0800638d
 8006344:	0800638d 	.word	0x0800638d
 8006348:	0800638d 	.word	0x0800638d
 800634c:	0800638d 	.word	0x0800638d
 8006350:	0800638d 	.word	0x0800638d
 8006354:	0800638d 	.word	0x0800638d
 8006358:	08006385 	.word	0x08006385
 800635c:	2301      	movs	r3, #1
 800635e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006362:	e1c0      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006364:	2304      	movs	r3, #4
 8006366:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800636a:	e1bc      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800636c:	2308      	movs	r3, #8
 800636e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006372:	e1b8      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006374:	2310      	movs	r3, #16
 8006376:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800637a:	e1b4      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800637c:	2320      	movs	r3, #32
 800637e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006382:	e1b0      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006384:	2340      	movs	r3, #64	; 0x40
 8006386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800638a:	e1ac      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006392:	e1a8      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a75      	ldr	r2, [pc, #468]	; (8006570 <UART_SetConfig+0x638>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d130      	bne.n	8006400 <UART_SetConfig+0x4c8>
 800639e:	4b73      	ldr	r3, [pc, #460]	; (800656c <UART_SetConfig+0x634>)
 80063a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063a2:	f003 0307 	and.w	r3, r3, #7
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	d826      	bhi.n	80063f8 <UART_SetConfig+0x4c0>
 80063aa:	a201      	add	r2, pc, #4	; (adr r2, 80063b0 <UART_SetConfig+0x478>)
 80063ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063b0:	080063c9 	.word	0x080063c9
 80063b4:	080063d1 	.word	0x080063d1
 80063b8:	080063d9 	.word	0x080063d9
 80063bc:	080063e1 	.word	0x080063e1
 80063c0:	080063e9 	.word	0x080063e9
 80063c4:	080063f1 	.word	0x080063f1
 80063c8:	2300      	movs	r3, #0
 80063ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ce:	e18a      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80063d0:	2304      	movs	r3, #4
 80063d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063d6:	e186      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80063d8:	2308      	movs	r3, #8
 80063da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063de:	e182      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80063e0:	2310      	movs	r3, #16
 80063e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063e6:	e17e      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80063e8:	2320      	movs	r3, #32
 80063ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063ee:	e17a      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80063f0:	2340      	movs	r3, #64	; 0x40
 80063f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063f6:	e176      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80063f8:	2380      	movs	r3, #128	; 0x80
 80063fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80063fe:	e172      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	4a5b      	ldr	r2, [pc, #364]	; (8006574 <UART_SetConfig+0x63c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d130      	bne.n	800646c <UART_SetConfig+0x534>
 800640a:	4b58      	ldr	r3, [pc, #352]	; (800656c <UART_SetConfig+0x634>)
 800640c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	2b05      	cmp	r3, #5
 8006414:	d826      	bhi.n	8006464 <UART_SetConfig+0x52c>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x4e4>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006435 	.word	0x08006435
 8006420:	0800643d 	.word	0x0800643d
 8006424:	08006445 	.word	0x08006445
 8006428:	0800644d 	.word	0x0800644d
 800642c:	08006455 	.word	0x08006455
 8006430:	0800645d 	.word	0x0800645d
 8006434:	2300      	movs	r3, #0
 8006436:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800643a:	e154      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006442:	e150      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800644a:	e14c      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006452:	e148      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006454:	2320      	movs	r3, #32
 8006456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800645a:	e144      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800645c:	2340      	movs	r3, #64	; 0x40
 800645e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006462:	e140      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006464:	2380      	movs	r3, #128	; 0x80
 8006466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800646a:	e13c      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a41      	ldr	r2, [pc, #260]	; (8006578 <UART_SetConfig+0x640>)
 8006472:	4293      	cmp	r3, r2
 8006474:	f040 8082 	bne.w	800657c <UART_SetConfig+0x644>
 8006478:	4b3c      	ldr	r3, [pc, #240]	; (800656c <UART_SetConfig+0x634>)
 800647a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006480:	2b28      	cmp	r3, #40	; 0x28
 8006482:	d86d      	bhi.n	8006560 <UART_SetConfig+0x628>
 8006484:	a201      	add	r2, pc, #4	; (adr r2, 800648c <UART_SetConfig+0x554>)
 8006486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648a:	bf00      	nop
 800648c:	08006531 	.word	0x08006531
 8006490:	08006561 	.word	0x08006561
 8006494:	08006561 	.word	0x08006561
 8006498:	08006561 	.word	0x08006561
 800649c:	08006561 	.word	0x08006561
 80064a0:	08006561 	.word	0x08006561
 80064a4:	08006561 	.word	0x08006561
 80064a8:	08006561 	.word	0x08006561
 80064ac:	08006539 	.word	0x08006539
 80064b0:	08006561 	.word	0x08006561
 80064b4:	08006561 	.word	0x08006561
 80064b8:	08006561 	.word	0x08006561
 80064bc:	08006561 	.word	0x08006561
 80064c0:	08006561 	.word	0x08006561
 80064c4:	08006561 	.word	0x08006561
 80064c8:	08006561 	.word	0x08006561
 80064cc:	08006541 	.word	0x08006541
 80064d0:	08006561 	.word	0x08006561
 80064d4:	08006561 	.word	0x08006561
 80064d8:	08006561 	.word	0x08006561
 80064dc:	08006561 	.word	0x08006561
 80064e0:	08006561 	.word	0x08006561
 80064e4:	08006561 	.word	0x08006561
 80064e8:	08006561 	.word	0x08006561
 80064ec:	08006549 	.word	0x08006549
 80064f0:	08006561 	.word	0x08006561
 80064f4:	08006561 	.word	0x08006561
 80064f8:	08006561 	.word	0x08006561
 80064fc:	08006561 	.word	0x08006561
 8006500:	08006561 	.word	0x08006561
 8006504:	08006561 	.word	0x08006561
 8006508:	08006561 	.word	0x08006561
 800650c:	08006551 	.word	0x08006551
 8006510:	08006561 	.word	0x08006561
 8006514:	08006561 	.word	0x08006561
 8006518:	08006561 	.word	0x08006561
 800651c:	08006561 	.word	0x08006561
 8006520:	08006561 	.word	0x08006561
 8006524:	08006561 	.word	0x08006561
 8006528:	08006561 	.word	0x08006561
 800652c:	08006559 	.word	0x08006559
 8006530:	2301      	movs	r3, #1
 8006532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006536:	e0d6      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800653e:	e0d2      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006546:	e0ce      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800654e:	e0ca      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006550:	2320      	movs	r3, #32
 8006552:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006556:	e0c6      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006558:	2340      	movs	r3, #64	; 0x40
 800655a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800655e:	e0c2      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006560:	2380      	movs	r3, #128	; 0x80
 8006562:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006566:	e0be      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006568:	40011400 	.word	0x40011400
 800656c:	58024400 	.word	0x58024400
 8006570:	40007800 	.word	0x40007800
 8006574:	40007c00 	.word	0x40007c00
 8006578:	40011800 	.word	0x40011800
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4aad      	ldr	r2, [pc, #692]	; (8006838 <UART_SetConfig+0x900>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d176      	bne.n	8006674 <UART_SetConfig+0x73c>
 8006586:	4bad      	ldr	r3, [pc, #692]	; (800683c <UART_SetConfig+0x904>)
 8006588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800658a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800658e:	2b28      	cmp	r3, #40	; 0x28
 8006590:	d86c      	bhi.n	800666c <UART_SetConfig+0x734>
 8006592:	a201      	add	r2, pc, #4	; (adr r2, 8006598 <UART_SetConfig+0x660>)
 8006594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006598:	0800663d 	.word	0x0800663d
 800659c:	0800666d 	.word	0x0800666d
 80065a0:	0800666d 	.word	0x0800666d
 80065a4:	0800666d 	.word	0x0800666d
 80065a8:	0800666d 	.word	0x0800666d
 80065ac:	0800666d 	.word	0x0800666d
 80065b0:	0800666d 	.word	0x0800666d
 80065b4:	0800666d 	.word	0x0800666d
 80065b8:	08006645 	.word	0x08006645
 80065bc:	0800666d 	.word	0x0800666d
 80065c0:	0800666d 	.word	0x0800666d
 80065c4:	0800666d 	.word	0x0800666d
 80065c8:	0800666d 	.word	0x0800666d
 80065cc:	0800666d 	.word	0x0800666d
 80065d0:	0800666d 	.word	0x0800666d
 80065d4:	0800666d 	.word	0x0800666d
 80065d8:	0800664d 	.word	0x0800664d
 80065dc:	0800666d 	.word	0x0800666d
 80065e0:	0800666d 	.word	0x0800666d
 80065e4:	0800666d 	.word	0x0800666d
 80065e8:	0800666d 	.word	0x0800666d
 80065ec:	0800666d 	.word	0x0800666d
 80065f0:	0800666d 	.word	0x0800666d
 80065f4:	0800666d 	.word	0x0800666d
 80065f8:	08006655 	.word	0x08006655
 80065fc:	0800666d 	.word	0x0800666d
 8006600:	0800666d 	.word	0x0800666d
 8006604:	0800666d 	.word	0x0800666d
 8006608:	0800666d 	.word	0x0800666d
 800660c:	0800666d 	.word	0x0800666d
 8006610:	0800666d 	.word	0x0800666d
 8006614:	0800666d 	.word	0x0800666d
 8006618:	0800665d 	.word	0x0800665d
 800661c:	0800666d 	.word	0x0800666d
 8006620:	0800666d 	.word	0x0800666d
 8006624:	0800666d 	.word	0x0800666d
 8006628:	0800666d 	.word	0x0800666d
 800662c:	0800666d 	.word	0x0800666d
 8006630:	0800666d 	.word	0x0800666d
 8006634:	0800666d 	.word	0x0800666d
 8006638:	08006665 	.word	0x08006665
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006642:	e050      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006644:	2304      	movs	r3, #4
 8006646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800664a:	e04c      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800664c:	2308      	movs	r3, #8
 800664e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006652:	e048      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006654:	2310      	movs	r3, #16
 8006656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800665a:	e044      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800665c:	2320      	movs	r3, #32
 800665e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006662:	e040      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006664:	2340      	movs	r3, #64	; 0x40
 8006666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800666a:	e03c      	b.n	80066e6 <UART_SetConfig+0x7ae>
 800666c:	2380      	movs	r3, #128	; 0x80
 800666e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006672:	e038      	b.n	80066e6 <UART_SetConfig+0x7ae>
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a71      	ldr	r2, [pc, #452]	; (8006840 <UART_SetConfig+0x908>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d130      	bne.n	80066e0 <UART_SetConfig+0x7a8>
 800667e:	4b6f      	ldr	r3, [pc, #444]	; (800683c <UART_SetConfig+0x904>)
 8006680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	2b05      	cmp	r3, #5
 8006688:	d826      	bhi.n	80066d8 <UART_SetConfig+0x7a0>
 800668a:	a201      	add	r2, pc, #4	; (adr r2, 8006690 <UART_SetConfig+0x758>)
 800668c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006690:	080066a9 	.word	0x080066a9
 8006694:	080066b1 	.word	0x080066b1
 8006698:	080066b9 	.word	0x080066b9
 800669c:	080066c1 	.word	0x080066c1
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066d1 	.word	0x080066d1
 80066a8:	2302      	movs	r3, #2
 80066aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ae:	e01a      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80066b0:	2304      	movs	r3, #4
 80066b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066b6:	e016      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80066b8:	2308      	movs	r3, #8
 80066ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066be:	e012      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80066c0:	2310      	movs	r3, #16
 80066c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066c6:	e00e      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80066c8:	2320      	movs	r3, #32
 80066ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066ce:	e00a      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80066d0:	2340      	movs	r3, #64	; 0x40
 80066d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066d6:	e006      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80066d8:	2380      	movs	r3, #128	; 0x80
 80066da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80066de:	e002      	b.n	80066e6 <UART_SetConfig+0x7ae>
 80066e0:	2380      	movs	r3, #128	; 0x80
 80066e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a55      	ldr	r2, [pc, #340]	; (8006840 <UART_SetConfig+0x908>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	f040 80f8 	bne.w	80068e2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066f2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	dc46      	bgt.n	8006788 <UART_SetConfig+0x850>
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	db75      	blt.n	80067ea <UART_SetConfig+0x8b2>
 80066fe:	3b02      	subs	r3, #2
 8006700:	2b1e      	cmp	r3, #30
 8006702:	d872      	bhi.n	80067ea <UART_SetConfig+0x8b2>
 8006704:	a201      	add	r2, pc, #4	; (adr r2, 800670c <UART_SetConfig+0x7d4>)
 8006706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670a:	bf00      	nop
 800670c:	0800678f 	.word	0x0800678f
 8006710:	080067eb 	.word	0x080067eb
 8006714:	08006797 	.word	0x08006797
 8006718:	080067eb 	.word	0x080067eb
 800671c:	080067eb 	.word	0x080067eb
 8006720:	080067eb 	.word	0x080067eb
 8006724:	080067a7 	.word	0x080067a7
 8006728:	080067eb 	.word	0x080067eb
 800672c:	080067eb 	.word	0x080067eb
 8006730:	080067eb 	.word	0x080067eb
 8006734:	080067eb 	.word	0x080067eb
 8006738:	080067eb 	.word	0x080067eb
 800673c:	080067eb 	.word	0x080067eb
 8006740:	080067eb 	.word	0x080067eb
 8006744:	080067b7 	.word	0x080067b7
 8006748:	080067eb 	.word	0x080067eb
 800674c:	080067eb 	.word	0x080067eb
 8006750:	080067eb 	.word	0x080067eb
 8006754:	080067eb 	.word	0x080067eb
 8006758:	080067eb 	.word	0x080067eb
 800675c:	080067eb 	.word	0x080067eb
 8006760:	080067eb 	.word	0x080067eb
 8006764:	080067eb 	.word	0x080067eb
 8006768:	080067eb 	.word	0x080067eb
 800676c:	080067eb 	.word	0x080067eb
 8006770:	080067eb 	.word	0x080067eb
 8006774:	080067eb 	.word	0x080067eb
 8006778:	080067eb 	.word	0x080067eb
 800677c:	080067eb 	.word	0x080067eb
 8006780:	080067eb 	.word	0x080067eb
 8006784:	080067dd 	.word	0x080067dd
 8006788:	2b40      	cmp	r3, #64	; 0x40
 800678a:	d02a      	beq.n	80067e2 <UART_SetConfig+0x8aa>
 800678c:	e02d      	b.n	80067ea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800678e:	f7fe fc6d 	bl	800506c <HAL_RCCEx_GetD3PCLK1Freq>
 8006792:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006794:	e02f      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800679a:	4618      	mov	r0, r3
 800679c:	f7fe fc7c 	bl	8005098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067a4:	e027      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067a6:	f107 0318 	add.w	r3, r7, #24
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fdc8 	bl	8005340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067b4:	e01f      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80067b6:	4b21      	ldr	r3, [pc, #132]	; (800683c <UART_SetConfig+0x904>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0320 	and.w	r3, r3, #32
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d009      	beq.n	80067d6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067c2:	4b1e      	ldr	r3, [pc, #120]	; (800683c <UART_SetConfig+0x904>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	08db      	lsrs	r3, r3, #3
 80067c8:	f003 0303 	and.w	r3, r3, #3
 80067cc:	4a1d      	ldr	r2, [pc, #116]	; (8006844 <UART_SetConfig+0x90c>)
 80067ce:	fa22 f303 	lsr.w	r3, r2, r3
 80067d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067d4:	e00f      	b.n	80067f6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80067d6:	4b1b      	ldr	r3, [pc, #108]	; (8006844 <UART_SetConfig+0x90c>)
 80067d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067da:	e00c      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067dc:	4b1a      	ldr	r3, [pc, #104]	; (8006848 <UART_SetConfig+0x910>)
 80067de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e0:	e009      	b.n	80067f6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80067e8:	e005      	b.n	80067f6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80067f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f000 81ee 	beq.w	8006bda <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	4a12      	ldr	r2, [pc, #72]	; (800684c <UART_SetConfig+0x914>)
 8006804:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006808:	461a      	mov	r2, r3
 800680a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006810:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	4613      	mov	r3, r2
 8006818:	005b      	lsls	r3, r3, #1
 800681a:	4413      	add	r3, r2
 800681c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681e:	429a      	cmp	r2, r3
 8006820:	d305      	bcc.n	800682e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800682a:	429a      	cmp	r2, r3
 800682c:	d910      	bls.n	8006850 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006834:	e1d1      	b.n	8006bda <UART_SetConfig+0xca2>
 8006836:	bf00      	nop
 8006838:	40011c00 	.word	0x40011c00
 800683c:	58024400 	.word	0x58024400
 8006840:	58000c00 	.word	0x58000c00
 8006844:	03d09000 	.word	0x03d09000
 8006848:	003d0900 	.word	0x003d0900
 800684c:	0800a128 	.word	0x0800a128
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006852:	2200      	movs	r2, #0
 8006854:	60bb      	str	r3, [r7, #8]
 8006856:	60fa      	str	r2, [r7, #12]
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800685c:	4ac0      	ldr	r2, [pc, #768]	; (8006b60 <UART_SetConfig+0xc28>)
 800685e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006862:	b29b      	uxth	r3, r3
 8006864:	2200      	movs	r2, #0
 8006866:	603b      	str	r3, [r7, #0]
 8006868:	607a      	str	r2, [r7, #4]
 800686a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800686e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006872:	f7f9 fd4d 	bl	8000310 <__aeabi_uldivmod>
 8006876:	4602      	mov	r2, r0
 8006878:	460b      	mov	r3, r1
 800687a:	4610      	mov	r0, r2
 800687c:	4619      	mov	r1, r3
 800687e:	f04f 0200 	mov.w	r2, #0
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	020b      	lsls	r3, r1, #8
 8006888:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800688c:	0202      	lsls	r2, r0, #8
 800688e:	6979      	ldr	r1, [r7, #20]
 8006890:	6849      	ldr	r1, [r1, #4]
 8006892:	0849      	lsrs	r1, r1, #1
 8006894:	2000      	movs	r0, #0
 8006896:	460c      	mov	r4, r1
 8006898:	4605      	mov	r5, r0
 800689a:	eb12 0804 	adds.w	r8, r2, r4
 800689e:	eb43 0905 	adc.w	r9, r3, r5
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	469a      	mov	sl, r3
 80068aa:	4693      	mov	fp, r2
 80068ac:	4652      	mov	r2, sl
 80068ae:	465b      	mov	r3, fp
 80068b0:	4640      	mov	r0, r8
 80068b2:	4649      	mov	r1, r9
 80068b4:	f7f9 fd2c 	bl	8000310 <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4613      	mov	r3, r2
 80068be:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068c6:	d308      	bcc.n	80068da <UART_SetConfig+0x9a2>
 80068c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ce:	d204      	bcs.n	80068da <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068d6:	60da      	str	r2, [r3, #12]
 80068d8:	e17f      	b.n	8006bda <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80068e0:	e17b      	b.n	8006bda <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068ea:	f040 80bd 	bne.w	8006a68 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80068ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	dc48      	bgt.n	8006988 <UART_SetConfig+0xa50>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	db7b      	blt.n	80069f2 <UART_SetConfig+0xaba>
 80068fa:	2b20      	cmp	r3, #32
 80068fc:	d879      	bhi.n	80069f2 <UART_SetConfig+0xaba>
 80068fe:	a201      	add	r2, pc, #4	; (adr r2, 8006904 <UART_SetConfig+0x9cc>)
 8006900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006904:	0800698f 	.word	0x0800698f
 8006908:	08006997 	.word	0x08006997
 800690c:	080069f3 	.word	0x080069f3
 8006910:	080069f3 	.word	0x080069f3
 8006914:	0800699f 	.word	0x0800699f
 8006918:	080069f3 	.word	0x080069f3
 800691c:	080069f3 	.word	0x080069f3
 8006920:	080069f3 	.word	0x080069f3
 8006924:	080069af 	.word	0x080069af
 8006928:	080069f3 	.word	0x080069f3
 800692c:	080069f3 	.word	0x080069f3
 8006930:	080069f3 	.word	0x080069f3
 8006934:	080069f3 	.word	0x080069f3
 8006938:	080069f3 	.word	0x080069f3
 800693c:	080069f3 	.word	0x080069f3
 8006940:	080069f3 	.word	0x080069f3
 8006944:	080069bf 	.word	0x080069bf
 8006948:	080069f3 	.word	0x080069f3
 800694c:	080069f3 	.word	0x080069f3
 8006950:	080069f3 	.word	0x080069f3
 8006954:	080069f3 	.word	0x080069f3
 8006958:	080069f3 	.word	0x080069f3
 800695c:	080069f3 	.word	0x080069f3
 8006960:	080069f3 	.word	0x080069f3
 8006964:	080069f3 	.word	0x080069f3
 8006968:	080069f3 	.word	0x080069f3
 800696c:	080069f3 	.word	0x080069f3
 8006970:	080069f3 	.word	0x080069f3
 8006974:	080069f3 	.word	0x080069f3
 8006978:	080069f3 	.word	0x080069f3
 800697c:	080069f3 	.word	0x080069f3
 8006980:	080069f3 	.word	0x080069f3
 8006984:	080069e5 	.word	0x080069e5
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	d02e      	beq.n	80069ea <UART_SetConfig+0xab2>
 800698c:	e031      	b.n	80069f2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800698e:	f7fd fc05 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8006992:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006994:	e033      	b.n	80069fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006996:	f7fd fc17 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 800699a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800699c:	e02f      	b.n	80069fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800699e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7fe fb78 	bl	8005098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80069a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069ac:	e027      	b.n	80069fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80069ae:	f107 0318 	add.w	r3, r7, #24
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fcc4 	bl	8005340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069bc:	e01f      	b.n	80069fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069be:	4b69      	ldr	r3, [pc, #420]	; (8006b64 <UART_SetConfig+0xc2c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f003 0320 	and.w	r3, r3, #32
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d009      	beq.n	80069de <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80069ca:	4b66      	ldr	r3, [pc, #408]	; (8006b64 <UART_SetConfig+0xc2c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	08db      	lsrs	r3, r3, #3
 80069d0:	f003 0303 	and.w	r3, r3, #3
 80069d4:	4a64      	ldr	r2, [pc, #400]	; (8006b68 <UART_SetConfig+0xc30>)
 80069d6:	fa22 f303 	lsr.w	r3, r2, r3
 80069da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80069dc:	e00f      	b.n	80069fe <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80069de:	4b62      	ldr	r3, [pc, #392]	; (8006b68 <UART_SetConfig+0xc30>)
 80069e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e2:	e00c      	b.n	80069fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80069e4:	4b61      	ldr	r3, [pc, #388]	; (8006b6c <UART_SetConfig+0xc34>)
 80069e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069e8:	e009      	b.n	80069fe <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80069f0:	e005      	b.n	80069fe <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80069fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	f000 80ea 	beq.w	8006bda <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	4a55      	ldr	r2, [pc, #340]	; (8006b60 <UART_SetConfig+0xc28>)
 8006a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a10:	461a      	mov	r2, r3
 8006a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a18:	005a      	lsls	r2, r3, #1
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	085b      	lsrs	r3, r3, #1
 8006a20:	441a      	add	r2, r3
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a2e:	2b0f      	cmp	r3, #15
 8006a30:	d916      	bls.n	8006a60 <UART_SetConfig+0xb28>
 8006a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a38:	d212      	bcs.n	8006a60 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	f023 030f 	bic.w	r3, r3, #15
 8006a42:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	085b      	lsrs	r3, r3, #1
 8006a48:	b29b      	uxth	r3, r3
 8006a4a:	f003 0307 	and.w	r3, r3, #7
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a52:	4313      	orrs	r3, r2
 8006a54:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006a5c:	60da      	str	r2, [r3, #12]
 8006a5e:	e0bc      	b.n	8006bda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006a66:	e0b8      	b.n	8006bda <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a68:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006a6c:	2b20      	cmp	r3, #32
 8006a6e:	dc4b      	bgt.n	8006b08 <UART_SetConfig+0xbd0>
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f2c0 8087 	blt.w	8006b84 <UART_SetConfig+0xc4c>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	f200 8084 	bhi.w	8006b84 <UART_SetConfig+0xc4c>
 8006a7c:	a201      	add	r2, pc, #4	; (adr r2, 8006a84 <UART_SetConfig+0xb4c>)
 8006a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a82:	bf00      	nop
 8006a84:	08006b0f 	.word	0x08006b0f
 8006a88:	08006b17 	.word	0x08006b17
 8006a8c:	08006b85 	.word	0x08006b85
 8006a90:	08006b85 	.word	0x08006b85
 8006a94:	08006b1f 	.word	0x08006b1f
 8006a98:	08006b85 	.word	0x08006b85
 8006a9c:	08006b85 	.word	0x08006b85
 8006aa0:	08006b85 	.word	0x08006b85
 8006aa4:	08006b2f 	.word	0x08006b2f
 8006aa8:	08006b85 	.word	0x08006b85
 8006aac:	08006b85 	.word	0x08006b85
 8006ab0:	08006b85 	.word	0x08006b85
 8006ab4:	08006b85 	.word	0x08006b85
 8006ab8:	08006b85 	.word	0x08006b85
 8006abc:	08006b85 	.word	0x08006b85
 8006ac0:	08006b85 	.word	0x08006b85
 8006ac4:	08006b3f 	.word	0x08006b3f
 8006ac8:	08006b85 	.word	0x08006b85
 8006acc:	08006b85 	.word	0x08006b85
 8006ad0:	08006b85 	.word	0x08006b85
 8006ad4:	08006b85 	.word	0x08006b85
 8006ad8:	08006b85 	.word	0x08006b85
 8006adc:	08006b85 	.word	0x08006b85
 8006ae0:	08006b85 	.word	0x08006b85
 8006ae4:	08006b85 	.word	0x08006b85
 8006ae8:	08006b85 	.word	0x08006b85
 8006aec:	08006b85 	.word	0x08006b85
 8006af0:	08006b85 	.word	0x08006b85
 8006af4:	08006b85 	.word	0x08006b85
 8006af8:	08006b85 	.word	0x08006b85
 8006afc:	08006b85 	.word	0x08006b85
 8006b00:	08006b85 	.word	0x08006b85
 8006b04:	08006b77 	.word	0x08006b77
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d037      	beq.n	8006b7c <UART_SetConfig+0xc44>
 8006b0c:	e03a      	b.n	8006b84 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b0e:	f7fd fb45 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8006b12:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b14:	e03c      	b.n	8006b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b16:	f7fd fb57 	bl	80041c8 <HAL_RCC_GetPCLK2Freq>
 8006b1a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006b1c:	e038      	b.n	8006b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fe fab8 	bl	8005098 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b2c:	e030      	b.n	8006b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2e:	f107 0318 	add.w	r3, r7, #24
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fc04 	bl	8005340 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b3c:	e028      	b.n	8006b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <UART_SetConfig+0xc2c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f003 0320 	and.w	r3, r3, #32
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d012      	beq.n	8006b70 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006b4a:	4b06      	ldr	r3, [pc, #24]	; (8006b64 <UART_SetConfig+0xc2c>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	08db      	lsrs	r3, r3, #3
 8006b50:	f003 0303 	and.w	r3, r3, #3
 8006b54:	4a04      	ldr	r2, [pc, #16]	; (8006b68 <UART_SetConfig+0xc30>)
 8006b56:	fa22 f303 	lsr.w	r3, r2, r3
 8006b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006b5c:	e018      	b.n	8006b90 <UART_SetConfig+0xc58>
 8006b5e:	bf00      	nop
 8006b60:	0800a128 	.word	0x0800a128
 8006b64:	58024400 	.word	0x58024400
 8006b68:	03d09000 	.word	0x03d09000
 8006b6c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006b70:	4b24      	ldr	r3, [pc, #144]	; (8006c04 <UART_SetConfig+0xccc>)
 8006b72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b74:	e00c      	b.n	8006b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006b76:	4b24      	ldr	r3, [pc, #144]	; (8006c08 <UART_SetConfig+0xcd0>)
 8006b78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b7a:	e009      	b.n	8006b90 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006b82:	e005      	b.n	8006b90 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006b84:	2300      	movs	r3, #0
 8006b86:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006b8e:	bf00      	nop
    }

    if (pclk != 0U)
 8006b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d021      	beq.n	8006bda <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9a:	4a1c      	ldr	r2, [pc, #112]	; (8006c0c <UART_SetConfig+0xcd4>)
 8006b9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ba4:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	085b      	lsrs	r3, r3, #1
 8006bae:	441a      	add	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb8:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbc:	2b0f      	cmp	r3, #15
 8006bbe:	d909      	bls.n	8006bd4 <UART_SetConfig+0xc9c>
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bc6:	d205      	bcs.n	8006bd4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	60da      	str	r2, [r3, #12]
 8006bd2:	e002      	b.n	8006bda <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	2201      	movs	r2, #1
 8006bde:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	2200      	movs	r2, #0
 8006bee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006bf6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3748      	adds	r7, #72	; 0x48
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c04:	03d09000 	.word	0x03d09000
 8006c08:	003d0900 	.word	0x003d0900
 8006c0c:	0800a128 	.word	0x0800a128

08006c10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1c:	f003 0301 	and.w	r3, r3, #1
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00a      	beq.n	8006c3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	430a      	orrs	r2, r1
 8006c38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	430a      	orrs	r2, r1
 8006c5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c60:	f003 0304 	and.w	r3, r3, #4
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	430a      	orrs	r2, r1
 8006c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	430a      	orrs	r2, r1
 8006c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ca4:	f003 0310 	and.w	r3, r3, #16
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00a      	beq.n	8006cc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	430a      	orrs	r2, r1
 8006ce2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d01a      	beq.n	8006d26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	430a      	orrs	r2, r1
 8006d04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d0e:	d10a      	bne.n	8006d26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	430a      	orrs	r2, r1
 8006d24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d00a      	beq.n	8006d48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	430a      	orrs	r2, r1
 8006d46:	605a      	str	r2, [r3, #4]
  }
}
 8006d48:	bf00      	nop
 8006d4a:	370c      	adds	r7, #12
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b086      	sub	sp, #24
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d64:	f7fa fb38 	bl	80013d8 <HAL_GetTick>
 8006d68:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d10e      	bne.n	8006d96 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f82f 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e025      	b.n	8006de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d10e      	bne.n	8006dc2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006da4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da8:	9300      	str	r3, [sp, #0]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	2200      	movs	r2, #0
 8006dae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f819 	bl	8006dea <UART_WaitOnFlagUntilTimeout>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006dbe:	2303      	movs	r3, #3
 8006dc0:	e00f      	b.n	8006de2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2220      	movs	r2, #32
 8006dc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3710      	adds	r7, #16
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b09c      	sub	sp, #112	; 0x70
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	60f8      	str	r0, [r7, #12]
 8006df2:	60b9      	str	r1, [r7, #8]
 8006df4:	603b      	str	r3, [r7, #0]
 8006df6:	4613      	mov	r3, r2
 8006df8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dfa:	e0a9      	b.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e02:	f000 80a5 	beq.w	8006f50 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e06:	f7fa fae7 	bl	80013d8 <HAL_GetTick>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d302      	bcc.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x32>
 8006e16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d140      	bne.n	8006e9e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e30:	667b      	str	r3, [r7, #100]	; 0x64
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e3c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e6      	bne.n	8006e1c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3308      	adds	r3, #8
 8006e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e60:	f023 0301 	bic.w	r3, r3, #1
 8006e64:	663b      	str	r3, [r7, #96]	; 0x60
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e5      	bne.n	8006e4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006e9a:	2303      	movs	r3, #3
 8006e9c:	e069      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f003 0304 	and.w	r3, r3, #4
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d051      	beq.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eba:	d149      	bne.n	8006f50 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ec4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eda:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ee6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e6      	bne.n	8006ec6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	3308      	adds	r3, #8
 8006efe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	613b      	str	r3, [r7, #16]
   return(result);
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f023 0301 	bic.w	r3, r3, #1
 8006f0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	3308      	adds	r3, #8
 8006f16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f18:	623a      	str	r2, [r7, #32]
 8006f1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	69f9      	ldr	r1, [r7, #28]
 8006f1e:	6a3a      	ldr	r2, [r7, #32]
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e5      	bne.n	8006ef8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2220      	movs	r2, #32
 8006f40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2200      	movs	r2, #0
 8006f48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	e010      	b.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	69da      	ldr	r2, [r3, #28]
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	4013      	ands	r3, r2
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	bf0c      	ite	eq
 8006f60:	2301      	moveq	r3, #1
 8006f62:	2300      	movne	r3, #0
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	461a      	mov	r2, r3
 8006f68:	79fb      	ldrb	r3, [r7, #7]
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	f43f af46 	beq.w	8006dfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3770      	adds	r7, #112	; 0x70
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b085      	sub	sp, #20
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e027      	b.n	8006fe0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2224      	movs	r2, #36	; 0x24
 8006f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fbe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2220      	movs	r2, #32
 8006fd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3714      	adds	r7, #20
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr

08006fec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007000:	2302      	movs	r3, #2
 8007002:	e02d      	b.n	8007060 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2201      	movs	r2, #1
 8007008:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2224      	movs	r2, #36	; 0x24
 8007010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f022 0201 	bic.w	r2, r2, #1
 800702a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	430a      	orrs	r2, r1
 800703e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f000 f84f 	bl	80070e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2220      	movs	r2, #32
 8007052:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007078:	2b01      	cmp	r3, #1
 800707a:	d101      	bne.n	8007080 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800707c:	2302      	movs	r3, #2
 800707e:	e02d      	b.n	80070dc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2224      	movs	r2, #36	; 0x24
 800708c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681a      	ldr	r2, [r3, #0]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f022 0201 	bic.w	r2, r2, #1
 80070a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	683a      	ldr	r2, [r7, #0]
 80070b8:	430a      	orrs	r2, r1
 80070ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f811 	bl	80070e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68fa      	ldr	r2, [r7, #12]
 80070c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070da:	2300      	movs	r3, #0
}
 80070dc:	4618      	mov	r0, r3
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070e4:	b480      	push	{r7}
 80070e6:	b085      	sub	sp, #20
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d108      	bne.n	8007106 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007104:	e031      	b.n	800716a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007106:	2310      	movs	r3, #16
 8007108:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800710a:	2310      	movs	r3, #16
 800710c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	0e5b      	lsrs	r3, r3, #25
 8007116:	b2db      	uxtb	r3, r3
 8007118:	f003 0307 	and.w	r3, r3, #7
 800711c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	689b      	ldr	r3, [r3, #8]
 8007124:	0f5b      	lsrs	r3, r3, #29
 8007126:	b2db      	uxtb	r3, r3
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	7b3a      	ldrb	r2, [r7, #12]
 8007132:	4911      	ldr	r1, [pc, #68]	; (8007178 <UARTEx_SetNbDataToProcess+0x94>)
 8007134:	5c8a      	ldrb	r2, [r1, r2]
 8007136:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800713a:	7b3a      	ldrb	r2, [r7, #12]
 800713c:	490f      	ldr	r1, [pc, #60]	; (800717c <UARTEx_SetNbDataToProcess+0x98>)
 800713e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007140:	fb93 f3f2 	sdiv	r3, r3, r2
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800714c:	7bfb      	ldrb	r3, [r7, #15]
 800714e:	7b7a      	ldrb	r2, [r7, #13]
 8007150:	4909      	ldr	r1, [pc, #36]	; (8007178 <UARTEx_SetNbDataToProcess+0x94>)
 8007152:	5c8a      	ldrb	r2, [r1, r2]
 8007154:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007158:	7b7a      	ldrb	r2, [r7, #13]
 800715a:	4908      	ldr	r1, [pc, #32]	; (800717c <UARTEx_SetNbDataToProcess+0x98>)
 800715c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800715e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007162:	b29a      	uxth	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800716a:	bf00      	nop
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	0800a140 	.word	0x0800a140
 800717c:	0800a148 	.word	0x0800a148

08007180 <__NVIC_SetPriority>:
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	4603      	mov	r3, r0
 8007188:	6039      	str	r1, [r7, #0]
 800718a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800718c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007190:	2b00      	cmp	r3, #0
 8007192:	db0a      	blt.n	80071aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	b2da      	uxtb	r2, r3
 8007198:	490c      	ldr	r1, [pc, #48]	; (80071cc <__NVIC_SetPriority+0x4c>)
 800719a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800719e:	0112      	lsls	r2, r2, #4
 80071a0:	b2d2      	uxtb	r2, r2
 80071a2:	440b      	add	r3, r1
 80071a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80071a8:	e00a      	b.n	80071c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	b2da      	uxtb	r2, r3
 80071ae:	4908      	ldr	r1, [pc, #32]	; (80071d0 <__NVIC_SetPriority+0x50>)
 80071b0:	88fb      	ldrh	r3, [r7, #6]
 80071b2:	f003 030f 	and.w	r3, r3, #15
 80071b6:	3b04      	subs	r3, #4
 80071b8:	0112      	lsls	r2, r2, #4
 80071ba:	b2d2      	uxtb	r2, r2
 80071bc:	440b      	add	r3, r1
 80071be:	761a      	strb	r2, [r3, #24]
}
 80071c0:	bf00      	nop
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr
 80071cc:	e000e100 	.word	0xe000e100
 80071d0:	e000ed00 	.word	0xe000ed00

080071d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <SysTick_Handler+0x1c>)
 80071da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80071dc:	f001 fd28 	bl	8008c30 <xTaskGetSchedulerState>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d001      	beq.n	80071ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80071e6:	f002 fb0f 	bl	8009808 <xPortSysTickHandler>
  }
}
 80071ea:	bf00      	nop
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	e000e010 	.word	0xe000e010

080071f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80071f4:	b580      	push	{r7, lr}
 80071f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80071f8:	2100      	movs	r1, #0
 80071fa:	f06f 0004 	mvn.w	r0, #4
 80071fe:	f7ff ffbf 	bl	8007180 <__NVIC_SetPriority>
#endif
}
 8007202:	bf00      	nop
 8007204:	bd80      	pop	{r7, pc}
	...

08007208 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800720e:	f3ef 8305 	mrs	r3, IPSR
 8007212:	603b      	str	r3, [r7, #0]
  return(result);
 8007214:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800721a:	f06f 0305 	mvn.w	r3, #5
 800721e:	607b      	str	r3, [r7, #4]
 8007220:	e00c      	b.n	800723c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007222:	4b0a      	ldr	r3, [pc, #40]	; (800724c <osKernelInitialize+0x44>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800722a:	4b08      	ldr	r3, [pc, #32]	; (800724c <osKernelInitialize+0x44>)
 800722c:	2201      	movs	r2, #1
 800722e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007230:	2300      	movs	r3, #0
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	e002      	b.n	800723c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007236:	f04f 33ff 	mov.w	r3, #4294967295
 800723a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800723c:	687b      	ldr	r3, [r7, #4]
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	240003d0 	.word	0x240003d0

08007250 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007256:	f3ef 8305 	mrs	r3, IPSR
 800725a:	603b      	str	r3, [r7, #0]
  return(result);
 800725c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007262:	f06f 0305 	mvn.w	r3, #5
 8007266:	607b      	str	r3, [r7, #4]
 8007268:	e010      	b.n	800728c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800726a:	4b0b      	ldr	r3, [pc, #44]	; (8007298 <osKernelStart+0x48>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d109      	bne.n	8007286 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007272:	f7ff ffbf 	bl	80071f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007276:	4b08      	ldr	r3, [pc, #32]	; (8007298 <osKernelStart+0x48>)
 8007278:	2202      	movs	r2, #2
 800727a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800727c:	f001 f87c 	bl	8008378 <vTaskStartScheduler>
      stat = osOK;
 8007280:	2300      	movs	r3, #0
 8007282:	607b      	str	r3, [r7, #4]
 8007284:	e002      	b.n	800728c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007286:	f04f 33ff 	mov.w	r3, #4294967295
 800728a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800728c:	687b      	ldr	r3, [r7, #4]
}
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	240003d0 	.word	0x240003d0

0800729c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800729c:	b580      	push	{r7, lr}
 800729e:	b08e      	sub	sp, #56	; 0x38
 80072a0:	af04      	add	r7, sp, #16
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80072ac:	f3ef 8305 	mrs	r3, IPSR
 80072b0:	617b      	str	r3, [r7, #20]
  return(result);
 80072b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d17e      	bne.n	80073b6 <osThreadNew+0x11a>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d07b      	beq.n	80073b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80072be:	2380      	movs	r3, #128	; 0x80
 80072c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80072c2:	2318      	movs	r3, #24
 80072c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80072ca:	f04f 33ff 	mov.w	r3, #4294967295
 80072ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d045      	beq.n	8007362 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <osThreadNew+0x48>
        name = attr->name;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d002      	beq.n	80072f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80072f2:	69fb      	ldr	r3, [r7, #28]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d008      	beq.n	800730a <osThreadNew+0x6e>
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b38      	cmp	r3, #56	; 0x38
 80072fc:	d805      	bhi.n	800730a <osThreadNew+0x6e>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <osThreadNew+0x72>
        return (NULL);
 800730a:	2300      	movs	r3, #0
 800730c:	e054      	b.n	80073b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	695b      	ldr	r3, [r3, #20]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	089b      	lsrs	r3, r3, #2
 800731c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00e      	beq.n	8007344 <osThreadNew+0xa8>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68db      	ldr	r3, [r3, #12]
 800732a:	2bbb      	cmp	r3, #187	; 0xbb
 800732c:	d90a      	bls.n	8007344 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007332:	2b00      	cmp	r3, #0
 8007334:	d006      	beq.n	8007344 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	695b      	ldr	r3, [r3, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d002      	beq.n	8007344 <osThreadNew+0xa8>
        mem = 1;
 800733e:	2301      	movs	r3, #1
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	e010      	b.n	8007366 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10c      	bne.n	8007366 <osThreadNew+0xca>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	68db      	ldr	r3, [r3, #12]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d108      	bne.n	8007366 <osThreadNew+0xca>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d104      	bne.n	8007366 <osThreadNew+0xca>
          mem = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	61bb      	str	r3, [r7, #24]
 8007360:	e001      	b.n	8007366 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007362:	2300      	movs	r3, #0
 8007364:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007366:	69bb      	ldr	r3, [r7, #24]
 8007368:	2b01      	cmp	r3, #1
 800736a:	d110      	bne.n	800738e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007370:	687a      	ldr	r2, [r7, #4]
 8007372:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007374:	9202      	str	r2, [sp, #8]
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	69fb      	ldr	r3, [r7, #28]
 800737a:	9300      	str	r3, [sp, #0]
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	6a3a      	ldr	r2, [r7, #32]
 8007380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fe0c 	bl	8007fa0 <xTaskCreateStatic>
 8007388:	4603      	mov	r3, r0
 800738a:	613b      	str	r3, [r7, #16]
 800738c:	e013      	b.n	80073b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d110      	bne.n	80073b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	b29a      	uxth	r2, r3
 8007398:	f107 0310 	add.w	r3, r7, #16
 800739c:	9301      	str	r3, [sp, #4]
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fe57 	bl	800805a <xTaskCreate>
 80073ac:	4603      	mov	r3, r0
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d001      	beq.n	80073b6 <osThreadNew+0x11a>
            hTask = NULL;
 80073b2:	2300      	movs	r3, #0
 80073b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80073b6:	693b      	ldr	r3, [r7, #16]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	3728      	adds	r7, #40	; 0x28
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80073c8:	f3ef 8305 	mrs	r3, IPSR
 80073cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80073ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <osDelay+0x1c>
    stat = osErrorISR;
 80073d4:	f06f 0305 	mvn.w	r3, #5
 80073d8:	60fb      	str	r3, [r7, #12]
 80073da:	e007      	b.n	80073ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80073dc:	2300      	movs	r3, #0
 80073de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d002      	beq.n	80073ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 ff92 	bl	8008310 <vTaskDelay>
    }
  }

  return (stat);
 80073ec:	68fb      	ldr	r3, [r7, #12]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
	...

080073f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073f8:	b480      	push	{r7}
 80073fa:	b085      	sub	sp, #20
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	4a07      	ldr	r2, [pc, #28]	; (8007424 <vApplicationGetIdleTaskMemory+0x2c>)
 8007408:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	4a06      	ldr	r2, [pc, #24]	; (8007428 <vApplicationGetIdleTaskMemory+0x30>)
 800740e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2280      	movs	r2, #128	; 0x80
 8007414:	601a      	str	r2, [r3, #0]
}
 8007416:	bf00      	nop
 8007418:	3714      	adds	r7, #20
 800741a:	46bd      	mov	sp, r7
 800741c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	240003d4 	.word	0x240003d4
 8007428:	24000490 	.word	0x24000490

0800742c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800742c:	b480      	push	{r7}
 800742e:	b085      	sub	sp, #20
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a07      	ldr	r2, [pc, #28]	; (8007458 <vApplicationGetTimerTaskMemory+0x2c>)
 800743c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	4a06      	ldr	r2, [pc, #24]	; (800745c <vApplicationGetTimerTaskMemory+0x30>)
 8007442:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800744a:	601a      	str	r2, [r3, #0]
}
 800744c:	bf00      	nop
 800744e:	3714      	adds	r7, #20
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	24000690 	.word	0x24000690
 800745c:	2400074c 	.word	0x2400074c

08007460 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f103 0208 	add.w	r2, r3, #8
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f04f 32ff 	mov.w	r2, #4294967295
 8007478:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f103 0208 	add.w	r2, r3, #8
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f103 0208 	add.w	r2, r3, #8
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80074ae:	bf00      	nop
 80074b0:	370c      	adds	r7, #12
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr

080074ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074ba:	b480      	push	{r7}
 80074bc:	b085      	sub	sp, #20
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	683a      	ldr	r2, [r7, #0]
 80074de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	1c5a      	adds	r2, r3, #1
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	601a      	str	r2, [r3, #0]
}
 80074f6:	bf00      	nop
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007518:	d103      	bne.n	8007522 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	60fb      	str	r3, [r7, #12]
 8007520:	e00c      	b.n	800753c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	3308      	adds	r3, #8
 8007526:	60fb      	str	r3, [r7, #12]
 8007528:	e002      	b.n	8007530 <vListInsert+0x2e>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	60fb      	str	r3, [r7, #12]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	68ba      	ldr	r2, [r7, #8]
 8007538:	429a      	cmp	r2, r3
 800753a:	d2f6      	bcs.n	800752a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	683a      	ldr	r2, [r7, #0]
 8007556:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	1c5a      	adds	r2, r3, #1
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	601a      	str	r2, [r3, #0]
}
 8007568:	bf00      	nop
 800756a:	3714      	adds	r7, #20
 800756c:	46bd      	mov	sp, r7
 800756e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007572:	4770      	bx	lr

08007574 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007574:	b480      	push	{r7}
 8007576:	b085      	sub	sp, #20
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	691b      	ldr	r3, [r3, #16]
 8007580:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	6892      	ldr	r2, [r2, #8]
 800758a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	6852      	ldr	r2, [r2, #4]
 8007594:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	685b      	ldr	r3, [r3, #4]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	429a      	cmp	r2, r3
 800759e:	d103      	bne.n	80075a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	1e5a      	subs	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3714      	adds	r7, #20
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10a      	bne.n	80075f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075f2:	f002 f877 	bl	80096e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681a      	ldr	r2, [r3, #0]
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075fe:	68f9      	ldr	r1, [r7, #12]
 8007600:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	441a      	add	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2200      	movs	r2, #0
 8007610:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	3b01      	subs	r3, #1
 8007624:	68f9      	ldr	r1, [r7, #12]
 8007626:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007628:	fb01 f303 	mul.w	r3, r1, r3
 800762c:	441a      	add	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	22ff      	movs	r2, #255	; 0xff
 8007636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	22ff      	movs	r2, #255	; 0xff
 800763e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d114      	bne.n	8007672 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d01a      	beq.n	8007686 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	3310      	adds	r3, #16
 8007654:	4618      	mov	r0, r3
 8007656:	f001 f929 	bl	80088ac <xTaskRemoveFromEventList>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d012      	beq.n	8007686 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007660:	4b0c      	ldr	r3, [pc, #48]	; (8007694 <xQueueGenericReset+0xcc>)
 8007662:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007666:	601a      	str	r2, [r3, #0]
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	e009      	b.n	8007686 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3310      	adds	r3, #16
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff fef2 	bl	8007460 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3324      	adds	r3, #36	; 0x24
 8007680:	4618      	mov	r0, r3
 8007682:	f7ff feed 	bl	8007460 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007686:	f002 f85d 	bl	8009744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800768a:	2301      	movs	r3, #1
}
 800768c:	4618      	mov	r0, r3
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	e000ed04 	.word	0xe000ed04

08007698 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08e      	sub	sp, #56	; 0x38
 800769c:	af02      	add	r7, sp, #8
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
 80076a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10a      	bne.n	80076c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80076ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076b0:	f383 8811 	msr	BASEPRI, r3
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80076be:	bf00      	nop
 80076c0:	e7fe      	b.n	80076c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d10a      	bne.n	80076de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80076c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076cc:	f383 8811 	msr	BASEPRI, r3
 80076d0:	f3bf 8f6f 	isb	sy
 80076d4:	f3bf 8f4f 	dsb	sy
 80076d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80076da:	bf00      	nop
 80076dc:	e7fe      	b.n	80076dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <xQueueGenericCreateStatic+0x52>
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <xQueueGenericCreateStatic+0x56>
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <xQueueGenericCreateStatic+0x58>
 80076ee:	2300      	movs	r3, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10a      	bne.n	800770a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80076f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f8:	f383 8811 	msr	BASEPRI, r3
 80076fc:	f3bf 8f6f 	isb	sy
 8007700:	f3bf 8f4f 	dsb	sy
 8007704:	623b      	str	r3, [r7, #32]
}
 8007706:	bf00      	nop
 8007708:	e7fe      	b.n	8007708 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <xQueueGenericCreateStatic+0x7e>
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <xQueueGenericCreateStatic+0x82>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <xQueueGenericCreateStatic+0x84>
 800771a:	2300      	movs	r3, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10a      	bne.n	8007736 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	61fb      	str	r3, [r7, #28]
}
 8007732:	bf00      	nop
 8007734:	e7fe      	b.n	8007734 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007736:	2350      	movs	r3, #80	; 0x50
 8007738:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	2b50      	cmp	r3, #80	; 0x50
 800773e:	d00a      	beq.n	8007756 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	61bb      	str	r3, [r7, #24]
}
 8007752:	bf00      	nop
 8007754:	e7fe      	b.n	8007754 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007756:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800775c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00d      	beq.n	800777e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	2201      	movs	r2, #1
 8007766:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800776a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007770:	9300      	str	r3, [sp, #0]
 8007772:	4613      	mov	r3, r2
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	68b9      	ldr	r1, [r7, #8]
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 f805 	bl	8007788 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800777e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007780:	4618      	mov	r0, r3
 8007782:	3730      	adds	r7, #48	; 0x30
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}

08007788 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d103      	bne.n	80077a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	69ba      	ldr	r2, [r7, #24]
 80077a0:	601a      	str	r2, [r3, #0]
 80077a2:	e002      	b.n	80077aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	687a      	ldr	r2, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077aa:	69bb      	ldr	r3, [r7, #24]
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	68ba      	ldr	r2, [r7, #8]
 80077b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077b6:	2101      	movs	r1, #1
 80077b8:	69b8      	ldr	r0, [r7, #24]
 80077ba:	f7ff ff05 	bl	80075c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80077be:	69bb      	ldr	r3, [r7, #24]
 80077c0:	78fa      	ldrb	r2, [r7, #3]
 80077c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b08e      	sub	sp, #56	; 0x38
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80077de:	2300      	movs	r3, #0
 80077e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d10a      	bne.n	8007802 <xQueueGenericSend+0x32>
	__asm volatile
 80077ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077f0:	f383 8811 	msr	BASEPRI, r3
 80077f4:	f3bf 8f6f 	isb	sy
 80077f8:	f3bf 8f4f 	dsb	sy
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077fe:	bf00      	nop
 8007800:	e7fe      	b.n	8007800 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d103      	bne.n	8007810 <xQueueGenericSend+0x40>
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <xQueueGenericSend+0x44>
 8007810:	2301      	movs	r3, #1
 8007812:	e000      	b.n	8007816 <xQueueGenericSend+0x46>
 8007814:	2300      	movs	r3, #0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10a      	bne.n	8007830 <xQueueGenericSend+0x60>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800782c:	bf00      	nop
 800782e:	e7fe      	b.n	800782e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b02      	cmp	r3, #2
 8007834:	d103      	bne.n	800783e <xQueueGenericSend+0x6e>
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <xQueueGenericSend+0x72>
 800783e:	2301      	movs	r3, #1
 8007840:	e000      	b.n	8007844 <xQueueGenericSend+0x74>
 8007842:	2300      	movs	r3, #0
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10a      	bne.n	800785e <xQueueGenericSend+0x8e>
	__asm volatile
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	623b      	str	r3, [r7, #32]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800785e:	f001 f9e7 	bl	8008c30 <xTaskGetSchedulerState>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <xQueueGenericSend+0x9e>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <xQueueGenericSend+0xa2>
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <xQueueGenericSend+0xa4>
 8007872:	2300      	movs	r3, #0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d10a      	bne.n	800788e <xQueueGenericSend+0xbe>
	__asm volatile
 8007878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800787c:	f383 8811 	msr	BASEPRI, r3
 8007880:	f3bf 8f6f 	isb	sy
 8007884:	f3bf 8f4f 	dsb	sy
 8007888:	61fb      	str	r3, [r7, #28]
}
 800788a:	bf00      	nop
 800788c:	e7fe      	b.n	800788c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800788e:	f001 ff29 	bl	80096e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800789a:	429a      	cmp	r2, r3
 800789c:	d302      	bcc.n	80078a4 <xQueueGenericSend+0xd4>
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b02      	cmp	r3, #2
 80078a2:	d129      	bne.n	80078f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	68b9      	ldr	r1, [r7, #8]
 80078a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078aa:	f000 fa0b 	bl	8007cc4 <prvCopyDataToQueue>
 80078ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d010      	beq.n	80078da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ba:	3324      	adds	r3, #36	; 0x24
 80078bc:	4618      	mov	r0, r3
 80078be:	f000 fff5 	bl	80088ac <xTaskRemoveFromEventList>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d013      	beq.n	80078f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80078c8:	4b3f      	ldr	r3, [pc, #252]	; (80079c8 <xQueueGenericSend+0x1f8>)
 80078ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	f3bf 8f4f 	dsb	sy
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	e00a      	b.n	80078f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80078da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80078e0:	4b39      	ldr	r3, [pc, #228]	; (80079c8 <xQueueGenericSend+0x1f8>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078f0:	f001 ff28 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e063      	b.n	80079c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d103      	bne.n	8007906 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078fe:	f001 ff21 	bl	8009744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007902:	2300      	movs	r3, #0
 8007904:	e05c      	b.n	80079c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800790c:	f107 0314 	add.w	r3, r7, #20
 8007910:	4618      	mov	r0, r3
 8007912:	f001 f82f 	bl	8008974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007916:	2301      	movs	r3, #1
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800791a:	f001 ff13 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800791e:	f000 fd9b 	bl	8008458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007922:	f001 fedf 	bl	80096e4 <vPortEnterCritical>
 8007926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800792c:	b25b      	sxtb	r3, r3
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007932:	d103      	bne.n	800793c <xQueueGenericSend+0x16c>
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800793c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007942:	b25b      	sxtb	r3, r3
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007948:	d103      	bne.n	8007952 <xQueueGenericSend+0x182>
 800794a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007952:	f001 fef7 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007956:	1d3a      	adds	r2, r7, #4
 8007958:	f107 0314 	add.w	r3, r7, #20
 800795c:	4611      	mov	r1, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f001 f81e 	bl	80089a0 <xTaskCheckForTimeOut>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d124      	bne.n	80079b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800796a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800796c:	f000 faa2 	bl	8007eb4 <prvIsQueueFull>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d018      	beq.n	80079a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	3310      	adds	r3, #16
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f000 ff44 	bl	800880c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007986:	f000 fa2d 	bl	8007de4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800798a:	f000 fd73 	bl	8008474 <xTaskResumeAll>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	f47f af7c 	bne.w	800788e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007996:	4b0c      	ldr	r3, [pc, #48]	; (80079c8 <xQueueGenericSend+0x1f8>)
 8007998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800799c:	601a      	str	r2, [r3, #0]
 800799e:	f3bf 8f4f 	dsb	sy
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	e772      	b.n	800788e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079aa:	f000 fa1b 	bl	8007de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079ae:	f000 fd61 	bl	8008474 <xTaskResumeAll>
 80079b2:	e76c      	b.n	800788e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80079b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80079b6:	f000 fa15 	bl	8007de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079ba:	f000 fd5b 	bl	8008474 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80079be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3738      	adds	r7, #56	; 0x38
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	e000ed04 	.word	0xe000ed04

080079cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b090      	sub	sp, #64	; 0x40
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80079de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d103      	bne.n	8007a08 <xQueueGenericSendFromISR+0x3c>
 8007a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <xQueueGenericSendFromISR+0x40>
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e000      	b.n	8007a0e <xQueueGenericSendFromISR+0x42>
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10a      	bne.n	8007a28 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a28:	683b      	ldr	r3, [r7, #0]
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	d103      	bne.n	8007a36 <xQueueGenericSendFromISR+0x6a>
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <xQueueGenericSendFromISR+0x6e>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <xQueueGenericSendFromISR+0x70>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10a      	bne.n	8007a56 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	f383 8811 	msr	BASEPRI, r3
 8007a48:	f3bf 8f6f 	isb	sy
 8007a4c:	f3bf 8f4f 	dsb	sy
 8007a50:	623b      	str	r3, [r7, #32]
}
 8007a52:	bf00      	nop
 8007a54:	e7fe      	b.n	8007a54 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a56:	f001 ff27 	bl	80098a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8007a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a62:	f383 8811 	msr	BASEPRI, r3
 8007a66:	f3bf 8f6f 	isb	sy
 8007a6a:	f3bf 8f4f 	dsb	sy
 8007a6e:	61fa      	str	r2, [r7, #28]
 8007a70:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a72:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a74:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d302      	bcc.n	8007a88 <xQueueGenericSendFromISR+0xbc>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b02      	cmp	r3, #2
 8007a86:	d12f      	bne.n	8007ae8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a98:	683a      	ldr	r2, [r7, #0]
 8007a9a:	68b9      	ldr	r1, [r7, #8]
 8007a9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007a9e:	f000 f911 	bl	8007cc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007aa2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aaa:	d112      	bne.n	8007ad2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d016      	beq.n	8007ae2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab6:	3324      	adds	r3, #36	; 0x24
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fef7 	bl	80088ac <xTaskRemoveFromEventList>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00e      	beq.n	8007ae2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	601a      	str	r2, [r3, #0]
 8007ad0:	e007      	b.n	8007ae2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007ad2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	b2db      	uxtb	r3, r3
 8007ada:	b25a      	sxtb	r2, r3
 8007adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007ae6:	e001      	b.n	8007aec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007aee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007af6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3740      	adds	r7, #64	; 0x40
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b08c      	sub	sp, #48	; 0x30
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b10:	2300      	movs	r3, #0
 8007b12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <xQueueReceive+0x30>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	623b      	str	r3, [r7, #32]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d103      	bne.n	8007b42 <xQueueReceive+0x3e>
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <xQueueReceive+0x42>
 8007b42:	2301      	movs	r3, #1
 8007b44:	e000      	b.n	8007b48 <xQueueReceive+0x44>
 8007b46:	2300      	movs	r3, #0
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10a      	bne.n	8007b62 <xQueueReceive+0x5e>
	__asm volatile
 8007b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b50:	f383 8811 	msr	BASEPRI, r3
 8007b54:	f3bf 8f6f 	isb	sy
 8007b58:	f3bf 8f4f 	dsb	sy
 8007b5c:	61fb      	str	r3, [r7, #28]
}
 8007b5e:	bf00      	nop
 8007b60:	e7fe      	b.n	8007b60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b62:	f001 f865 	bl	8008c30 <xTaskGetSchedulerState>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d102      	bne.n	8007b72 <xQueueReceive+0x6e>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d101      	bne.n	8007b76 <xQueueReceive+0x72>
 8007b72:	2301      	movs	r3, #1
 8007b74:	e000      	b.n	8007b78 <xQueueReceive+0x74>
 8007b76:	2300      	movs	r3, #0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10a      	bne.n	8007b92 <xQueueReceive+0x8e>
	__asm volatile
 8007b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b80:	f383 8811 	msr	BASEPRI, r3
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	f3bf 8f4f 	dsb	sy
 8007b8c:	61bb      	str	r3, [r7, #24]
}
 8007b8e:	bf00      	nop
 8007b90:	e7fe      	b.n	8007b90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b92:	f001 fda7 	bl	80096e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d01f      	beq.n	8007be2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007ba2:	68b9      	ldr	r1, [r7, #8]
 8007ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba6:	f000 f8f7 	bl	8007d98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bac:	1e5a      	subs	r2, r3, #1
 8007bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d00f      	beq.n	8007bda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bbc:	3310      	adds	r3, #16
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f000 fe74 	bl	80088ac <xTaskRemoveFromEventList>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bca:	4b3d      	ldr	r3, [pc, #244]	; (8007cc0 <xQueueReceive+0x1bc>)
 8007bcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bd0:	601a      	str	r2, [r3, #0]
 8007bd2:	f3bf 8f4f 	dsb	sy
 8007bd6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007bda:	f001 fdb3 	bl	8009744 <vPortExitCritical>
				return pdPASS;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e069      	b.n	8007cb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d103      	bne.n	8007bf0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007be8:	f001 fdac 	bl	8009744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007bec:	2300      	movs	r3, #0
 8007bee:	e062      	b.n	8007cb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d106      	bne.n	8007c04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bf6:	f107 0310 	add.w	r3, r7, #16
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f000 feba 	bl	8008974 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c00:	2301      	movs	r3, #1
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c04:	f001 fd9e 	bl	8009744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c08:	f000 fc26 	bl	8008458 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c0c:	f001 fd6a 	bl	80096e4 <vPortEnterCritical>
 8007c10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c16:	b25b      	sxtb	r3, r3
 8007c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c1c:	d103      	bne.n	8007c26 <xQueueReceive+0x122>
 8007c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c20:	2200      	movs	r2, #0
 8007c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c2c:	b25b      	sxtb	r3, r3
 8007c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c32:	d103      	bne.n	8007c3c <xQueueReceive+0x138>
 8007c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c36:	2200      	movs	r2, #0
 8007c38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c3c:	f001 fd82 	bl	8009744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c40:	1d3a      	adds	r2, r7, #4
 8007c42:	f107 0310 	add.w	r3, r7, #16
 8007c46:	4611      	mov	r1, r2
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f000 fea9 	bl	80089a0 <xTaskCheckForTimeOut>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d123      	bne.n	8007c9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c56:	f000 f917 	bl	8007e88 <prvIsQueueEmpty>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d017      	beq.n	8007c90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c62:	3324      	adds	r3, #36	; 0x24
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	4611      	mov	r1, r2
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f000 fdcf 	bl	800880c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c70:	f000 f8b8 	bl	8007de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c74:	f000 fbfe 	bl	8008474 <xTaskResumeAll>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d189      	bne.n	8007b92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007c7e:	4b10      	ldr	r3, [pc, #64]	; (8007cc0 <xQueueReceive+0x1bc>)
 8007c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	f3bf 8f4f 	dsb	sy
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	e780      	b.n	8007b92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c92:	f000 f8a7 	bl	8007de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c96:	f000 fbed 	bl	8008474 <xTaskResumeAll>
 8007c9a:	e77a      	b.n	8007b92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007c9e:	f000 f8a1 	bl	8007de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007ca2:	f000 fbe7 	bl	8008474 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ca6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ca8:	f000 f8ee 	bl	8007e88 <prvIsQueueEmpty>
 8007cac:	4603      	mov	r3, r0
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	f43f af6f 	beq.w	8007b92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007cb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3730      	adds	r7, #48	; 0x30
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	e000ed04 	.word	0xe000ed04

08007cc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10d      	bne.n	8007cfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d14d      	bne.n	8007d86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f000 ffbc 	bl	8008c6c <xTaskPriorityDisinherit>
 8007cf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	609a      	str	r2, [r3, #8]
 8007cfc:	e043      	b.n	8007d86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d119      	bne.n	8007d38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6858      	ldr	r0, [r3, #4]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	461a      	mov	r2, r3
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	f002 f828 	bl	8009d64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	685a      	ldr	r2, [r3, #4]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d1c:	441a      	add	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	689b      	ldr	r3, [r3, #8]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d32b      	bcc.n	8007d86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681a      	ldr	r2, [r3, #0]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	605a      	str	r2, [r3, #4]
 8007d36:	e026      	b.n	8007d86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68d8      	ldr	r0, [r3, #12]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	461a      	mov	r2, r3
 8007d42:	68b9      	ldr	r1, [r7, #8]
 8007d44:	f002 f80e 	bl	8009d64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	68da      	ldr	r2, [r3, #12]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d50:	425b      	negs	r3, r3
 8007d52:	441a      	add	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	68da      	ldr	r2, [r3, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	d207      	bcs.n	8007d74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	689a      	ldr	r2, [r3, #8]
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6c:	425b      	negs	r3, r3
 8007d6e:	441a      	add	r2, r3
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d105      	bne.n	8007d86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d002      	beq.n	8007d86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d80:	693b      	ldr	r3, [r7, #16]
 8007d82:	3b01      	subs	r3, #1
 8007d84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007d8e:	697b      	ldr	r3, [r7, #20]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3718      	adds	r7, #24
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d018      	beq.n	8007ddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	68da      	ldr	r2, [r3, #12]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db2:	441a      	add	r2, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	68da      	ldr	r2, [r3, #12]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d303      	bcc.n	8007dcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	68d9      	ldr	r1, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6838      	ldr	r0, [r7, #0]
 8007dd8:	f001 ffc4 	bl	8009d64 <memcpy>
	}
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b084      	sub	sp, #16
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007dec:	f001 fc7a 	bl	80096e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007df6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007df8:	e011      	b.n	8007e1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d012      	beq.n	8007e28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3324      	adds	r3, #36	; 0x24
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 fd50 	bl	80088ac <xTaskRemoveFromEventList>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e12:	f000 fe27 	bl	8008a64 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e16:	7bfb      	ldrb	r3, [r7, #15]
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	dce9      	bgt.n	8007dfa <prvUnlockQueue+0x16>
 8007e26:	e000      	b.n	8007e2a <prvUnlockQueue+0x46>
					break;
 8007e28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	22ff      	movs	r2, #255	; 0xff
 8007e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e32:	f001 fc87 	bl	8009744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e36:	f001 fc55 	bl	80096e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e42:	e011      	b.n	8007e68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d012      	beq.n	8007e72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	3310      	adds	r3, #16
 8007e50:	4618      	mov	r0, r3
 8007e52:	f000 fd2b 	bl	80088ac <xTaskRemoveFromEventList>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e5c:	f000 fe02 	bl	8008a64 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e60:	7bbb      	ldrb	r3, [r7, #14]
 8007e62:	3b01      	subs	r3, #1
 8007e64:	b2db      	uxtb	r3, r3
 8007e66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	dce9      	bgt.n	8007e44 <prvUnlockQueue+0x60>
 8007e70:	e000      	b.n	8007e74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	22ff      	movs	r2, #255	; 0xff
 8007e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007e7c:	f001 fc62 	bl	8009744 <vPortExitCritical>
}
 8007e80:	bf00      	nop
 8007e82:	3710      	adds	r7, #16
 8007e84:	46bd      	mov	sp, r7
 8007e86:	bd80      	pop	{r7, pc}

08007e88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	b084      	sub	sp, #16
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e90:	f001 fc28 	bl	80096e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e001      	b.n	8007ea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ea6:	f001 fc4d 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ebc:	f001 fc12 	bl	80096e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d102      	bne.n	8007ed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	60fb      	str	r3, [r7, #12]
 8007ed0:	e001      	b.n	8007ed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ed6:	f001 fc35 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8007eda:	68fb      	ldr	r3, [r7, #12]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b085      	sub	sp, #20
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
 8007eec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60fb      	str	r3, [r7, #12]
 8007ef2:	e014      	b.n	8007f1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007ef4:	4a0f      	ldr	r2, [pc, #60]	; (8007f34 <vQueueAddToRegistry+0x50>)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d10b      	bne.n	8007f18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f00:	490c      	ldr	r1, [pc, #48]	; (8007f34 <vQueueAddToRegistry+0x50>)
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	683a      	ldr	r2, [r7, #0]
 8007f06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f0a:	4a0a      	ldr	r2, [pc, #40]	; (8007f34 <vQueueAddToRegistry+0x50>)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	4413      	add	r3, r2
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f16:	e006      	b.n	8007f26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2b07      	cmp	r3, #7
 8007f22:	d9e7      	bls.n	8007ef4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f24:	bf00      	nop
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	24000b4c 	.word	0x24000b4c

08007f38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	60f8      	str	r0, [r7, #12]
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f48:	f001 fbcc 	bl	80096e4 <vPortEnterCritical>
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f52:	b25b      	sxtb	r3, r3
 8007f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f58:	d103      	bne.n	8007f62 <vQueueWaitForMessageRestricted+0x2a>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f68:	b25b      	sxtb	r3, r3
 8007f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6e:	d103      	bne.n	8007f78 <vQueueWaitForMessageRestricted+0x40>
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f78:	f001 fbe4 	bl	8009744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d106      	bne.n	8007f92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	3324      	adds	r3, #36	; 0x24
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f000 fc61 	bl	8008854 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f92:	6978      	ldr	r0, [r7, #20]
 8007f94:	f7ff ff26 	bl	8007de4 <prvUnlockQueue>
	}
 8007f98:	bf00      	nop
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b08e      	sub	sp, #56	; 0x38
 8007fa4:	af04      	add	r7, sp, #16
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d10a      	bne.n	8007fca <xTaskCreateStatic+0x2a>
	__asm volatile
 8007fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb8:	f383 8811 	msr	BASEPRI, r3
 8007fbc:	f3bf 8f6f 	isb	sy
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	623b      	str	r3, [r7, #32]
}
 8007fc6:	bf00      	nop
 8007fc8:	e7fe      	b.n	8007fc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10a      	bne.n	8007fe6 <xTaskCreateStatic+0x46>
	__asm volatile
 8007fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fd4:	f383 8811 	msr	BASEPRI, r3
 8007fd8:	f3bf 8f6f 	isb	sy
 8007fdc:	f3bf 8f4f 	dsb	sy
 8007fe0:	61fb      	str	r3, [r7, #28]
}
 8007fe2:	bf00      	nop
 8007fe4:	e7fe      	b.n	8007fe4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fe6:	23bc      	movs	r3, #188	; 0xbc
 8007fe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fea:	693b      	ldr	r3, [r7, #16]
 8007fec:	2bbc      	cmp	r3, #188	; 0xbc
 8007fee:	d00a      	beq.n	8008006 <xTaskCreateStatic+0x66>
	__asm volatile
 8007ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff4:	f383 8811 	msr	BASEPRI, r3
 8007ff8:	f3bf 8f6f 	isb	sy
 8007ffc:	f3bf 8f4f 	dsb	sy
 8008000:	61bb      	str	r3, [r7, #24]
}
 8008002:	bf00      	nop
 8008004:	e7fe      	b.n	8008004 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008006:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01e      	beq.n	800804c <xTaskCreateStatic+0xac>
 800800e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01b      	beq.n	800804c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800801c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800801e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008020:	2202      	movs	r2, #2
 8008022:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008026:	2300      	movs	r3, #0
 8008028:	9303      	str	r3, [sp, #12]
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	9302      	str	r3, [sp, #8]
 800802e:	f107 0314 	add.w	r3, r7, #20
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	68b9      	ldr	r1, [r7, #8]
 800803e:	68f8      	ldr	r0, [r7, #12]
 8008040:	f000 f850 	bl	80080e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008046:	f000 f8f3 	bl	8008230 <prvAddNewTaskToReadyList>
 800804a:	e001      	b.n	8008050 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800804c:	2300      	movs	r3, #0
 800804e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008050:	697b      	ldr	r3, [r7, #20]
	}
 8008052:	4618      	mov	r0, r3
 8008054:	3728      	adds	r7, #40	; 0x28
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800805a:	b580      	push	{r7, lr}
 800805c:	b08c      	sub	sp, #48	; 0x30
 800805e:	af04      	add	r7, sp, #16
 8008060:	60f8      	str	r0, [r7, #12]
 8008062:	60b9      	str	r1, [r7, #8]
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	4613      	mov	r3, r2
 8008068:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800806a:	88fb      	ldrh	r3, [r7, #6]
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	4618      	mov	r0, r3
 8008070:	f001 fc5a 	bl	8009928 <pvPortMalloc>
 8008074:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00e      	beq.n	800809a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800807c:	20bc      	movs	r0, #188	; 0xbc
 800807e:	f001 fc53 	bl	8009928 <pvPortMalloc>
 8008082:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d003      	beq.n	8008092 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	631a      	str	r2, [r3, #48]	; 0x30
 8008090:	e005      	b.n	800809e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008092:	6978      	ldr	r0, [r7, #20]
 8008094:	f001 fd14 	bl	8009ac0 <vPortFree>
 8008098:	e001      	b.n	800809e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d017      	beq.n	80080d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80080ac:	88fa      	ldrh	r2, [r7, #6]
 80080ae:	2300      	movs	r3, #0
 80080b0:	9303      	str	r3, [sp, #12]
 80080b2:	69fb      	ldr	r3, [r7, #28]
 80080b4:	9302      	str	r3, [sp, #8]
 80080b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080b8:	9301      	str	r3, [sp, #4]
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	9300      	str	r3, [sp, #0]
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	68f8      	ldr	r0, [r7, #12]
 80080c4:	f000 f80e 	bl	80080e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080c8:	69f8      	ldr	r0, [r7, #28]
 80080ca:	f000 f8b1 	bl	8008230 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80080ce:	2301      	movs	r3, #1
 80080d0:	61bb      	str	r3, [r7, #24]
 80080d2:	e002      	b.n	80080da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80080d4:	f04f 33ff 	mov.w	r3, #4294967295
 80080d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80080da:	69bb      	ldr	r3, [r7, #24]
	}
 80080dc:	4618      	mov	r0, r3
 80080de:	3720      	adds	r7, #32
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	60f8      	str	r0, [r7, #12]
 80080ec:	60b9      	str	r1, [r7, #8]
 80080ee:	607a      	str	r2, [r7, #4]
 80080f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	461a      	mov	r2, r3
 80080fc:	21a5      	movs	r1, #165	; 0xa5
 80080fe:	f001 fe3f 	bl	8009d80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008106:	6879      	ldr	r1, [r7, #4]
 8008108:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800810c:	440b      	add	r3, r1
 800810e:	009b      	lsls	r3, r3, #2
 8008110:	4413      	add	r3, r2
 8008112:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008114:	69bb      	ldr	r3, [r7, #24]
 8008116:	f023 0307 	bic.w	r3, r3, #7
 800811a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00a      	beq.n	800813c <prvInitialiseNewTask+0x58>
	__asm volatile
 8008126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812a:	f383 8811 	msr	BASEPRI, r3
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f3bf 8f4f 	dsb	sy
 8008136:	617b      	str	r3, [r7, #20]
}
 8008138:	bf00      	nop
 800813a:	e7fe      	b.n	800813a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d01f      	beq.n	8008182 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008142:	2300      	movs	r3, #0
 8008144:	61fb      	str	r3, [r7, #28]
 8008146:	e012      	b.n	800816e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008148:	68ba      	ldr	r2, [r7, #8]
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	4413      	add	r3, r2
 800814e:	7819      	ldrb	r1, [r3, #0]
 8008150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	4413      	add	r3, r2
 8008156:	3334      	adds	r3, #52	; 0x34
 8008158:	460a      	mov	r2, r1
 800815a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	4413      	add	r3, r2
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d006      	beq.n	8008176 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	3301      	adds	r3, #1
 800816c:	61fb      	str	r3, [r7, #28]
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2b0f      	cmp	r3, #15
 8008172:	d9e9      	bls.n	8008148 <prvInitialiseNewTask+0x64>
 8008174:	e000      	b.n	8008178 <prvInitialiseNewTask+0x94>
			{
				break;
 8008176:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	2200      	movs	r2, #0
 800817c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008180:	e003      	b.n	800818a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800818a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800818c:	2b37      	cmp	r3, #55	; 0x37
 800818e:	d901      	bls.n	8008194 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008190:	2337      	movs	r3, #55	; 0x37
 8008192:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008198:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800819e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	2200      	movs	r2, #0
 80081a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	3304      	adds	r3, #4
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff f978 	bl	80074a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	3318      	adds	r3, #24
 80081b4:	4618      	mov	r0, r3
 80081b6:	f7ff f973 	bl	80074a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80081ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80081ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80081d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081d2:	2200      	movs	r2, #0
 80081d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80081d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e2:	3354      	adds	r3, #84	; 0x54
 80081e4:	2260      	movs	r2, #96	; 0x60
 80081e6:	2100      	movs	r1, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f001 fdc9 	bl	8009d80 <memset>
 80081ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f0:	4a0c      	ldr	r2, [pc, #48]	; (8008224 <prvInitialiseNewTask+0x140>)
 80081f2:	659a      	str	r2, [r3, #88]	; 0x58
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	4a0c      	ldr	r2, [pc, #48]	; (8008228 <prvInitialiseNewTask+0x144>)
 80081f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	4a0b      	ldr	r2, [pc, #44]	; (800822c <prvInitialiseNewTask+0x148>)
 80081fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008200:	683a      	ldr	r2, [r7, #0]
 8008202:	68f9      	ldr	r1, [r7, #12]
 8008204:	69b8      	ldr	r0, [r7, #24]
 8008206:	f001 f941 	bl	800948c <pxPortInitialiseStack>
 800820a:	4602      	mov	r2, r0
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800821a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800821c:	bf00      	nop
 800821e:	3720      	adds	r7, #32
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}
 8008224:	0800a170 	.word	0x0800a170
 8008228:	0800a190 	.word	0x0800a190
 800822c:	0800a150 	.word	0x0800a150

08008230 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008238:	f001 fa54 	bl	80096e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800823c:	4b2d      	ldr	r3, [pc, #180]	; (80082f4 <prvAddNewTaskToReadyList+0xc4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	4a2c      	ldr	r2, [pc, #176]	; (80082f4 <prvAddNewTaskToReadyList+0xc4>)
 8008244:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008246:	4b2c      	ldr	r3, [pc, #176]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d109      	bne.n	8008262 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800824e:	4a2a      	ldr	r2, [pc, #168]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008254:	4b27      	ldr	r3, [pc, #156]	; (80082f4 <prvAddNewTaskToReadyList+0xc4>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d110      	bne.n	800827e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800825c:	f000 fc26 	bl	8008aac <prvInitialiseTaskLists>
 8008260:	e00d      	b.n	800827e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008262:	4b26      	ldr	r3, [pc, #152]	; (80082fc <prvAddNewTaskToReadyList+0xcc>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d109      	bne.n	800827e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800826a:	4b23      	ldr	r3, [pc, #140]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008274:	429a      	cmp	r2, r3
 8008276:	d802      	bhi.n	800827e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008278:	4a1f      	ldr	r2, [pc, #124]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800827e:	4b20      	ldr	r3, [pc, #128]	; (8008300 <prvAddNewTaskToReadyList+0xd0>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	4a1e      	ldr	r2, [pc, #120]	; (8008300 <prvAddNewTaskToReadyList+0xd0>)
 8008286:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008288:	4b1d      	ldr	r3, [pc, #116]	; (8008300 <prvAddNewTaskToReadyList+0xd0>)
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <prvAddNewTaskToReadyList+0xd4>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	429a      	cmp	r2, r3
 800829a:	d903      	bls.n	80082a4 <prvAddNewTaskToReadyList+0x74>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a0:	4a18      	ldr	r2, [pc, #96]	; (8008304 <prvAddNewTaskToReadyList+0xd4>)
 80082a2:	6013      	str	r3, [r2, #0]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082a8:	4613      	mov	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	4413      	add	r3, r2
 80082ae:	009b      	lsls	r3, r3, #2
 80082b0:	4a15      	ldr	r2, [pc, #84]	; (8008308 <prvAddNewTaskToReadyList+0xd8>)
 80082b2:	441a      	add	r2, r3
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	3304      	adds	r3, #4
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f7ff f8fd 	bl	80074ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80082c0:	f001 fa40 	bl	8009744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80082c4:	4b0d      	ldr	r3, [pc, #52]	; (80082fc <prvAddNewTaskToReadyList+0xcc>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d00e      	beq.n	80082ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80082cc:	4b0a      	ldr	r3, [pc, #40]	; (80082f8 <prvAddNewTaskToReadyList+0xc8>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d207      	bcs.n	80082ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <prvAddNewTaskToReadyList+0xdc>)
 80082dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ea:	bf00      	nop
 80082ec:	3708      	adds	r7, #8
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
 80082f2:	bf00      	nop
 80082f4:	24001060 	.word	0x24001060
 80082f8:	24000b8c 	.word	0x24000b8c
 80082fc:	2400106c 	.word	0x2400106c
 8008300:	2400107c 	.word	0x2400107c
 8008304:	24001068 	.word	0x24001068
 8008308:	24000b90 	.word	0x24000b90
 800830c:	e000ed04 	.word	0xe000ed04

08008310 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008318:	2300      	movs	r3, #0
 800831a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d017      	beq.n	8008352 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008322:	4b13      	ldr	r3, [pc, #76]	; (8008370 <vTaskDelay+0x60>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <vTaskDelay+0x30>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	60bb      	str	r3, [r7, #8]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008340:	f000 f88a 	bl	8008458 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008344:	2100      	movs	r1, #0
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fcfe 	bl	8008d48 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800834c:	f000 f892 	bl	8008474 <xTaskResumeAll>
 8008350:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d107      	bne.n	8008368 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008358:	4b06      	ldr	r3, [pc, #24]	; (8008374 <vTaskDelay+0x64>)
 800835a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835e:	601a      	str	r2, [r3, #0]
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008368:	bf00      	nop
 800836a:	3710      	adds	r7, #16
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}
 8008370:	24001088 	.word	0x24001088
 8008374:	e000ed04 	.word	0xe000ed04

08008378 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08a      	sub	sp, #40	; 0x28
 800837c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800837e:	2300      	movs	r3, #0
 8008380:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008382:	2300      	movs	r3, #0
 8008384:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008386:	463a      	mov	r2, r7
 8008388:	1d39      	adds	r1, r7, #4
 800838a:	f107 0308 	add.w	r3, r7, #8
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff f832 	bl	80073f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	9202      	str	r2, [sp, #8]
 800839c:	9301      	str	r3, [sp, #4]
 800839e:	2300      	movs	r3, #0
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	2300      	movs	r3, #0
 80083a4:	460a      	mov	r2, r1
 80083a6:	4924      	ldr	r1, [pc, #144]	; (8008438 <vTaskStartScheduler+0xc0>)
 80083a8:	4824      	ldr	r0, [pc, #144]	; (800843c <vTaskStartScheduler+0xc4>)
 80083aa:	f7ff fdf9 	bl	8007fa0 <xTaskCreateStatic>
 80083ae:	4603      	mov	r3, r0
 80083b0:	4a23      	ldr	r2, [pc, #140]	; (8008440 <vTaskStartScheduler+0xc8>)
 80083b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80083b4:	4b22      	ldr	r3, [pc, #136]	; (8008440 <vTaskStartScheduler+0xc8>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d002      	beq.n	80083c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80083bc:	2301      	movs	r3, #1
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	e001      	b.n	80083c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80083c2:	2300      	movs	r3, #0
 80083c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d102      	bne.n	80083d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80083cc:	f000 fd10 	bl	8008df0 <xTimerCreateTimerTask>
 80083d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d11b      	bne.n	8008410 <vTaskStartScheduler+0x98>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	613b      	str	r3, [r7, #16]
}
 80083ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083ec:	4b15      	ldr	r3, [pc, #84]	; (8008444 <vTaskStartScheduler+0xcc>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3354      	adds	r3, #84	; 0x54
 80083f2:	4a15      	ldr	r2, [pc, #84]	; (8008448 <vTaskStartScheduler+0xd0>)
 80083f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083f6:	4b15      	ldr	r3, [pc, #84]	; (800844c <vTaskStartScheduler+0xd4>)
 80083f8:	f04f 32ff 	mov.w	r2, #4294967295
 80083fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083fe:	4b14      	ldr	r3, [pc, #80]	; (8008450 <vTaskStartScheduler+0xd8>)
 8008400:	2201      	movs	r2, #1
 8008402:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008404:	4b13      	ldr	r3, [pc, #76]	; (8008454 <vTaskStartScheduler+0xdc>)
 8008406:	2200      	movs	r2, #0
 8008408:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800840a:	f001 f8c9 	bl	80095a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800840e:	e00e      	b.n	800842e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008416:	d10a      	bne.n	800842e <vTaskStartScheduler+0xb6>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	60fb      	str	r3, [r7, #12]
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <vTaskStartScheduler+0xb4>
}
 800842e:	bf00      	nop
 8008430:	3718      	adds	r7, #24
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	0800a0cc 	.word	0x0800a0cc
 800843c:	08008a7d 	.word	0x08008a7d
 8008440:	24001084 	.word	0x24001084
 8008444:	24000b8c 	.word	0x24000b8c
 8008448:	24000014 	.word	0x24000014
 800844c:	24001080 	.word	0x24001080
 8008450:	2400106c 	.word	0x2400106c
 8008454:	24001064 	.word	0x24001064

08008458 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008458:	b480      	push	{r7}
 800845a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800845c:	4b04      	ldr	r3, [pc, #16]	; (8008470 <vTaskSuspendAll+0x18>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	3301      	adds	r3, #1
 8008462:	4a03      	ldr	r2, [pc, #12]	; (8008470 <vTaskSuspendAll+0x18>)
 8008464:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008466:	bf00      	nop
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	24001088 	.word	0x24001088

08008474 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800847a:	2300      	movs	r3, #0
 800847c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008482:	4b42      	ldr	r3, [pc, #264]	; (800858c <xTaskResumeAll+0x118>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d10a      	bne.n	80084a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	603b      	str	r3, [r7, #0]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80084a0:	f001 f920 	bl	80096e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80084a4:	4b39      	ldr	r3, [pc, #228]	; (800858c <xTaskResumeAll+0x118>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3b01      	subs	r3, #1
 80084aa:	4a38      	ldr	r2, [pc, #224]	; (800858c <xTaskResumeAll+0x118>)
 80084ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80084ae:	4b37      	ldr	r3, [pc, #220]	; (800858c <xTaskResumeAll+0x118>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d162      	bne.n	800857c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80084b6:	4b36      	ldr	r3, [pc, #216]	; (8008590 <xTaskResumeAll+0x11c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d05e      	beq.n	800857c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084be:	e02f      	b.n	8008520 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084c0:	4b34      	ldr	r3, [pc, #208]	; (8008594 <xTaskResumeAll+0x120>)
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	3318      	adds	r3, #24
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff f851 	bl	8007574 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	3304      	adds	r3, #4
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff f84c 	bl	8007574 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	4b2d      	ldr	r3, [pc, #180]	; (8008598 <xTaskResumeAll+0x124>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d903      	bls.n	80084f0 <xTaskResumeAll+0x7c>
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	4a2a      	ldr	r2, [pc, #168]	; (8008598 <xTaskResumeAll+0x124>)
 80084ee:	6013      	str	r3, [r2, #0]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	4a27      	ldr	r2, [pc, #156]	; (800859c <xTaskResumeAll+0x128>)
 80084fe:	441a      	add	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	3304      	adds	r3, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f7fe ffd7 	bl	80074ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008510:	4b23      	ldr	r3, [pc, #140]	; (80085a0 <xTaskResumeAll+0x12c>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008516:	429a      	cmp	r2, r3
 8008518:	d302      	bcc.n	8008520 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800851a:	4b22      	ldr	r3, [pc, #136]	; (80085a4 <xTaskResumeAll+0x130>)
 800851c:	2201      	movs	r2, #1
 800851e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008520:	4b1c      	ldr	r3, [pc, #112]	; (8008594 <xTaskResumeAll+0x120>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1cb      	bne.n	80084c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d001      	beq.n	8008532 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800852e:	f000 fb5f 	bl	8008bf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008532:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <xTaskResumeAll+0x134>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d010      	beq.n	8008560 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800853e:	f000 f847 	bl	80085d0 <xTaskIncrementTick>
 8008542:	4603      	mov	r3, r0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d002      	beq.n	800854e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008548:	4b16      	ldr	r3, [pc, #88]	; (80085a4 <xTaskResumeAll+0x130>)
 800854a:	2201      	movs	r2, #1
 800854c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	3b01      	subs	r3, #1
 8008552:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d1f1      	bne.n	800853e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800855a:	4b13      	ldr	r3, [pc, #76]	; (80085a8 <xTaskResumeAll+0x134>)
 800855c:	2200      	movs	r2, #0
 800855e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008560:	4b10      	ldr	r3, [pc, #64]	; (80085a4 <xTaskResumeAll+0x130>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d009      	beq.n	800857c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008568:	2301      	movs	r3, #1
 800856a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800856c:	4b0f      	ldr	r3, [pc, #60]	; (80085ac <xTaskResumeAll+0x138>)
 800856e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800857c:	f001 f8e2 	bl	8009744 <vPortExitCritical>

	return xAlreadyYielded;
 8008580:	68bb      	ldr	r3, [r7, #8]
}
 8008582:	4618      	mov	r0, r3
 8008584:	3710      	adds	r7, #16
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
 800858a:	bf00      	nop
 800858c:	24001088 	.word	0x24001088
 8008590:	24001060 	.word	0x24001060
 8008594:	24001020 	.word	0x24001020
 8008598:	24001068 	.word	0x24001068
 800859c:	24000b90 	.word	0x24000b90
 80085a0:	24000b8c 	.word	0x24000b8c
 80085a4:	24001074 	.word	0x24001074
 80085a8:	24001070 	.word	0x24001070
 80085ac:	e000ed04 	.word	0xe000ed04

080085b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80085b0:	b480      	push	{r7}
 80085b2:	b083      	sub	sp, #12
 80085b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80085b6:	4b05      	ldr	r3, [pc, #20]	; (80085cc <xTaskGetTickCount+0x1c>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80085bc:	687b      	ldr	r3, [r7, #4]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	370c      	adds	r7, #12
 80085c2:	46bd      	mov	sp, r7
 80085c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c8:	4770      	bx	lr
 80085ca:	bf00      	nop
 80085cc:	24001064 	.word	0x24001064

080085d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80085d6:	2300      	movs	r3, #0
 80085d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085da:	4b4f      	ldr	r3, [pc, #316]	; (8008718 <xTaskIncrementTick+0x148>)
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	f040 808f 	bne.w	8008702 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085e4:	4b4d      	ldr	r3, [pc, #308]	; (800871c <xTaskIncrementTick+0x14c>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	3301      	adds	r3, #1
 80085ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085ec:	4a4b      	ldr	r2, [pc, #300]	; (800871c <xTaskIncrementTick+0x14c>)
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d120      	bne.n	800863a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80085f8:	4b49      	ldr	r3, [pc, #292]	; (8008720 <xTaskIncrementTick+0x150>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <xTaskIncrementTick+0x48>
	__asm volatile
 8008602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008606:	f383 8811 	msr	BASEPRI, r3
 800860a:	f3bf 8f6f 	isb	sy
 800860e:	f3bf 8f4f 	dsb	sy
 8008612:	603b      	str	r3, [r7, #0]
}
 8008614:	bf00      	nop
 8008616:	e7fe      	b.n	8008616 <xTaskIncrementTick+0x46>
 8008618:	4b41      	ldr	r3, [pc, #260]	; (8008720 <xTaskIncrementTick+0x150>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	4b41      	ldr	r3, [pc, #260]	; (8008724 <xTaskIncrementTick+0x154>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a3f      	ldr	r2, [pc, #252]	; (8008720 <xTaskIncrementTick+0x150>)
 8008624:	6013      	str	r3, [r2, #0]
 8008626:	4a3f      	ldr	r2, [pc, #252]	; (8008724 <xTaskIncrementTick+0x154>)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6013      	str	r3, [r2, #0]
 800862c:	4b3e      	ldr	r3, [pc, #248]	; (8008728 <xTaskIncrementTick+0x158>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	3301      	adds	r3, #1
 8008632:	4a3d      	ldr	r2, [pc, #244]	; (8008728 <xTaskIncrementTick+0x158>)
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	f000 fadb 	bl	8008bf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800863a:	4b3c      	ldr	r3, [pc, #240]	; (800872c <xTaskIncrementTick+0x15c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	429a      	cmp	r2, r3
 8008642:	d349      	bcc.n	80086d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008644:	4b36      	ldr	r3, [pc, #216]	; (8008720 <xTaskIncrementTick+0x150>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d104      	bne.n	8008658 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800864e:	4b37      	ldr	r3, [pc, #220]	; (800872c <xTaskIncrementTick+0x15c>)
 8008650:	f04f 32ff 	mov.w	r2, #4294967295
 8008654:	601a      	str	r2, [r3, #0]
					break;
 8008656:	e03f      	b.n	80086d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008658:	4b31      	ldr	r3, [pc, #196]	; (8008720 <xTaskIncrementTick+0x150>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	68db      	ldr	r3, [r3, #12]
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	429a      	cmp	r2, r3
 800866e:	d203      	bcs.n	8008678 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008670:	4a2e      	ldr	r2, [pc, #184]	; (800872c <xTaskIncrementTick+0x15c>)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008676:	e02f      	b.n	80086d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	3304      	adds	r3, #4
 800867c:	4618      	mov	r0, r3
 800867e:	f7fe ff79 	bl	8007574 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	2b00      	cmp	r3, #0
 8008688:	d004      	beq.n	8008694 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	3318      	adds	r3, #24
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe ff70 	bl	8007574 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008698:	4b25      	ldr	r3, [pc, #148]	; (8008730 <xTaskIncrementTick+0x160>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	429a      	cmp	r2, r3
 800869e:	d903      	bls.n	80086a8 <xTaskIncrementTick+0xd8>
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	4a22      	ldr	r2, [pc, #136]	; (8008730 <xTaskIncrementTick+0x160>)
 80086a6:	6013      	str	r3, [r2, #0]
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ac:	4613      	mov	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4a1f      	ldr	r2, [pc, #124]	; (8008734 <xTaskIncrementTick+0x164>)
 80086b6:	441a      	add	r2, r3
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	3304      	adds	r3, #4
 80086bc:	4619      	mov	r1, r3
 80086be:	4610      	mov	r0, r2
 80086c0:	f7fe fefb 	bl	80074ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086c8:	4b1b      	ldr	r3, [pc, #108]	; (8008738 <xTaskIncrementTick+0x168>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d3b8      	bcc.n	8008644 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80086d2:	2301      	movs	r3, #1
 80086d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086d6:	e7b5      	b.n	8008644 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086d8:	4b17      	ldr	r3, [pc, #92]	; (8008738 <xTaskIncrementTick+0x168>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086de:	4915      	ldr	r1, [pc, #84]	; (8008734 <xTaskIncrementTick+0x164>)
 80086e0:	4613      	mov	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	009b      	lsls	r3, r3, #2
 80086e8:	440b      	add	r3, r1
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	2b01      	cmp	r3, #1
 80086ee:	d901      	bls.n	80086f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80086f0:	2301      	movs	r3, #1
 80086f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086f4:	4b11      	ldr	r3, [pc, #68]	; (800873c <xTaskIncrementTick+0x16c>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d007      	beq.n	800870c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80086fc:	2301      	movs	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]
 8008700:	e004      	b.n	800870c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008702:	4b0f      	ldr	r3, [pc, #60]	; (8008740 <xTaskIncrementTick+0x170>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3301      	adds	r3, #1
 8008708:	4a0d      	ldr	r2, [pc, #52]	; (8008740 <xTaskIncrementTick+0x170>)
 800870a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800870c:	697b      	ldr	r3, [r7, #20]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	24001088 	.word	0x24001088
 800871c:	24001064 	.word	0x24001064
 8008720:	24001018 	.word	0x24001018
 8008724:	2400101c 	.word	0x2400101c
 8008728:	24001078 	.word	0x24001078
 800872c:	24001080 	.word	0x24001080
 8008730:	24001068 	.word	0x24001068
 8008734:	24000b90 	.word	0x24000b90
 8008738:	24000b8c 	.word	0x24000b8c
 800873c:	24001074 	.word	0x24001074
 8008740:	24001070 	.word	0x24001070

08008744 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800874a:	4b2a      	ldr	r3, [pc, #168]	; (80087f4 <vTaskSwitchContext+0xb0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d003      	beq.n	800875a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008752:	4b29      	ldr	r3, [pc, #164]	; (80087f8 <vTaskSwitchContext+0xb4>)
 8008754:	2201      	movs	r2, #1
 8008756:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008758:	e046      	b.n	80087e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800875a:	4b27      	ldr	r3, [pc, #156]	; (80087f8 <vTaskSwitchContext+0xb4>)
 800875c:	2200      	movs	r2, #0
 800875e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008760:	4b26      	ldr	r3, [pc, #152]	; (80087fc <vTaskSwitchContext+0xb8>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	60fb      	str	r3, [r7, #12]
 8008766:	e010      	b.n	800878a <vTaskSwitchContext+0x46>
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d10a      	bne.n	8008784 <vTaskSwitchContext+0x40>
	__asm volatile
 800876e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008772:	f383 8811 	msr	BASEPRI, r3
 8008776:	f3bf 8f6f 	isb	sy
 800877a:	f3bf 8f4f 	dsb	sy
 800877e:	607b      	str	r3, [r7, #4]
}
 8008780:	bf00      	nop
 8008782:	e7fe      	b.n	8008782 <vTaskSwitchContext+0x3e>
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3b01      	subs	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	491d      	ldr	r1, [pc, #116]	; (8008800 <vTaskSwitchContext+0xbc>)
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	4613      	mov	r3, r2
 8008790:	009b      	lsls	r3, r3, #2
 8008792:	4413      	add	r3, r2
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	440b      	add	r3, r1
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0e4      	beq.n	8008768 <vTaskSwitchContext+0x24>
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4613      	mov	r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	4413      	add	r3, r2
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	4a15      	ldr	r2, [pc, #84]	; (8008800 <vTaskSwitchContext+0xbc>)
 80087aa:	4413      	add	r3, r2
 80087ac:	60bb      	str	r3, [r7, #8]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	685a      	ldr	r2, [r3, #4]
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	605a      	str	r2, [r3, #4]
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	68bb      	ldr	r3, [r7, #8]
 80087be:	3308      	adds	r3, #8
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d104      	bne.n	80087ce <vTaskSwitchContext+0x8a>
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	605a      	str	r2, [r3, #4]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	68db      	ldr	r3, [r3, #12]
 80087d4:	4a0b      	ldr	r2, [pc, #44]	; (8008804 <vTaskSwitchContext+0xc0>)
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	4a08      	ldr	r2, [pc, #32]	; (80087fc <vTaskSwitchContext+0xb8>)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087de:	4b09      	ldr	r3, [pc, #36]	; (8008804 <vTaskSwitchContext+0xc0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3354      	adds	r3, #84	; 0x54
 80087e4:	4a08      	ldr	r2, [pc, #32]	; (8008808 <vTaskSwitchContext+0xc4>)
 80087e6:	6013      	str	r3, [r2, #0]
}
 80087e8:	bf00      	nop
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr
 80087f4:	24001088 	.word	0x24001088
 80087f8:	24001074 	.word	0x24001074
 80087fc:	24001068 	.word	0x24001068
 8008800:	24000b90 	.word	0x24000b90
 8008804:	24000b8c 	.word	0x24000b8c
 8008808:	24000014 	.word	0x24000014

0800880c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d10a      	bne.n	8008832 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800881c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008820:	f383 8811 	msr	BASEPRI, r3
 8008824:	f3bf 8f6f 	isb	sy
 8008828:	f3bf 8f4f 	dsb	sy
 800882c:	60fb      	str	r3, [r7, #12]
}
 800882e:	bf00      	nop
 8008830:	e7fe      	b.n	8008830 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008832:	4b07      	ldr	r3, [pc, #28]	; (8008850 <vTaskPlaceOnEventList+0x44>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	3318      	adds	r3, #24
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7fe fe61 	bl	8007502 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008840:	2101      	movs	r1, #1
 8008842:	6838      	ldr	r0, [r7, #0]
 8008844:	f000 fa80 	bl	8008d48 <prvAddCurrentTaskToDelayedList>
}
 8008848:	bf00      	nop
 800884a:	3710      	adds	r7, #16
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	24000b8c 	.word	0x24000b8c

08008854 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10a      	bne.n	800887c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	617b      	str	r3, [r7, #20]
}
 8008878:	bf00      	nop
 800887a:	e7fe      	b.n	800887a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800887c:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3318      	adds	r3, #24
 8008882:	4619      	mov	r1, r3
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f7fe fe18 	bl	80074ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d002      	beq.n	8008896 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008890:	f04f 33ff 	mov.w	r3, #4294967295
 8008894:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008896:	6879      	ldr	r1, [r7, #4]
 8008898:	68b8      	ldr	r0, [r7, #8]
 800889a:	f000 fa55 	bl	8008d48 <prvAddCurrentTaskToDelayedList>
	}
 800889e:	bf00      	nop
 80088a0:	3718      	adds	r7, #24
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	24000b8c 	.word	0x24000b8c

080088ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b086      	sub	sp, #24
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10a      	bne.n	80088d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	60fb      	str	r3, [r7, #12]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	3318      	adds	r3, #24
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe fe49 	bl	8007574 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088e2:	4b1e      	ldr	r3, [pc, #120]	; (800895c <xTaskRemoveFromEventList+0xb0>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d11d      	bne.n	8008926 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	3304      	adds	r3, #4
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fe40 	bl	8007574 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088f4:	693b      	ldr	r3, [r7, #16]
 80088f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088f8:	4b19      	ldr	r3, [pc, #100]	; (8008960 <xTaskRemoveFromEventList+0xb4>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d903      	bls.n	8008908 <xTaskRemoveFromEventList+0x5c>
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008904:	4a16      	ldr	r2, [pc, #88]	; (8008960 <xTaskRemoveFromEventList+0xb4>)
 8008906:	6013      	str	r3, [r2, #0]
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800890c:	4613      	mov	r3, r2
 800890e:	009b      	lsls	r3, r3, #2
 8008910:	4413      	add	r3, r2
 8008912:	009b      	lsls	r3, r3, #2
 8008914:	4a13      	ldr	r2, [pc, #76]	; (8008964 <xTaskRemoveFromEventList+0xb8>)
 8008916:	441a      	add	r2, r3
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	3304      	adds	r3, #4
 800891c:	4619      	mov	r1, r3
 800891e:	4610      	mov	r0, r2
 8008920:	f7fe fdcb 	bl	80074ba <vListInsertEnd>
 8008924:	e005      	b.n	8008932 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	3318      	adds	r3, #24
 800892a:	4619      	mov	r1, r3
 800892c:	480e      	ldr	r0, [pc, #56]	; (8008968 <xTaskRemoveFromEventList+0xbc>)
 800892e:	f7fe fdc4 	bl	80074ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008936:	4b0d      	ldr	r3, [pc, #52]	; (800896c <xTaskRemoveFromEventList+0xc0>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800893c:	429a      	cmp	r2, r3
 800893e:	d905      	bls.n	800894c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008940:	2301      	movs	r3, #1
 8008942:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008944:	4b0a      	ldr	r3, [pc, #40]	; (8008970 <xTaskRemoveFromEventList+0xc4>)
 8008946:	2201      	movs	r2, #1
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	e001      	b.n	8008950 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800894c:	2300      	movs	r3, #0
 800894e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008950:	697b      	ldr	r3, [r7, #20]
}
 8008952:	4618      	mov	r0, r3
 8008954:	3718      	adds	r7, #24
 8008956:	46bd      	mov	sp, r7
 8008958:	bd80      	pop	{r7, pc}
 800895a:	bf00      	nop
 800895c:	24001088 	.word	0x24001088
 8008960:	24001068 	.word	0x24001068
 8008964:	24000b90 	.word	0x24000b90
 8008968:	24001020 	.word	0x24001020
 800896c:	24000b8c 	.word	0x24000b8c
 8008970:	24001074 	.word	0x24001074

08008974 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800897c:	4b06      	ldr	r3, [pc, #24]	; (8008998 <vTaskInternalSetTimeOutState+0x24>)
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008984:	4b05      	ldr	r3, [pc, #20]	; (800899c <vTaskInternalSetTimeOutState+0x28>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	605a      	str	r2, [r3, #4]
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	24001078 	.word	0x24001078
 800899c:	24001064 	.word	0x24001064

080089a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b088      	sub	sp, #32
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d10a      	bne.n	80089c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80089b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089b4:	f383 8811 	msr	BASEPRI, r3
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	f3bf 8f4f 	dsb	sy
 80089c0:	613b      	str	r3, [r7, #16]
}
 80089c2:	bf00      	nop
 80089c4:	e7fe      	b.n	80089c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d10a      	bne.n	80089e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80089cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d0:	f383 8811 	msr	BASEPRI, r3
 80089d4:	f3bf 8f6f 	isb	sy
 80089d8:	f3bf 8f4f 	dsb	sy
 80089dc:	60fb      	str	r3, [r7, #12]
}
 80089de:	bf00      	nop
 80089e0:	e7fe      	b.n	80089e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80089e2:	f000 fe7f 	bl	80096e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089e6:	4b1d      	ldr	r3, [pc, #116]	; (8008a5c <xTaskCheckForTimeOut+0xbc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fe:	d102      	bne.n	8008a06 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61fb      	str	r3, [r7, #28]
 8008a04:	e023      	b.n	8008a4e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681a      	ldr	r2, [r3, #0]
 8008a0a:	4b15      	ldr	r3, [pc, #84]	; (8008a60 <xTaskCheckForTimeOut+0xc0>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	d007      	beq.n	8008a22 <xTaskCheckForTimeOut+0x82>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d302      	bcc.n	8008a22 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	e015      	b.n	8008a4e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d20b      	bcs.n	8008a44 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	1ad2      	subs	r2, r2, r3
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f7ff ff9b 	bl	8008974 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	61fb      	str	r3, [r7, #28]
 8008a42:	e004      	b.n	8008a4e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	2200      	movs	r2, #0
 8008a48:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a4e:	f000 fe79 	bl	8009744 <vPortExitCritical>

	return xReturn;
 8008a52:	69fb      	ldr	r3, [r7, #28]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3720      	adds	r7, #32
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	24001064 	.word	0x24001064
 8008a60:	24001078 	.word	0x24001078

08008a64 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a68:	4b03      	ldr	r3, [pc, #12]	; (8008a78 <vTaskMissedYield+0x14>)
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	601a      	str	r2, [r3, #0]
}
 8008a6e:	bf00      	nop
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr
 8008a78:	24001074 	.word	0x24001074

08008a7c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a84:	f000 f852 	bl	8008b2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a88:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <prvIdleTask+0x28>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d9f9      	bls.n	8008a84 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a90:	4b05      	ldr	r3, [pc, #20]	; (8008aa8 <prvIdleTask+0x2c>)
 8008a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a96:	601a      	str	r2, [r3, #0]
 8008a98:	f3bf 8f4f 	dsb	sy
 8008a9c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008aa0:	e7f0      	b.n	8008a84 <prvIdleTask+0x8>
 8008aa2:	bf00      	nop
 8008aa4:	24000b90 	.word	0x24000b90
 8008aa8:	e000ed04 	.word	0xe000ed04

08008aac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	607b      	str	r3, [r7, #4]
 8008ab6:	e00c      	b.n	8008ad2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	4613      	mov	r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	4413      	add	r3, r2
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4a12      	ldr	r2, [pc, #72]	; (8008b0c <prvInitialiseTaskLists+0x60>)
 8008ac4:	4413      	add	r3, r2
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f7fe fcca 	bl	8007460 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	3301      	adds	r3, #1
 8008ad0:	607b      	str	r3, [r7, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2b37      	cmp	r3, #55	; 0x37
 8008ad6:	d9ef      	bls.n	8008ab8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ad8:	480d      	ldr	r0, [pc, #52]	; (8008b10 <prvInitialiseTaskLists+0x64>)
 8008ada:	f7fe fcc1 	bl	8007460 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ade:	480d      	ldr	r0, [pc, #52]	; (8008b14 <prvInitialiseTaskLists+0x68>)
 8008ae0:	f7fe fcbe 	bl	8007460 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ae4:	480c      	ldr	r0, [pc, #48]	; (8008b18 <prvInitialiseTaskLists+0x6c>)
 8008ae6:	f7fe fcbb 	bl	8007460 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008aea:	480c      	ldr	r0, [pc, #48]	; (8008b1c <prvInitialiseTaskLists+0x70>)
 8008aec:	f7fe fcb8 	bl	8007460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008af0:	480b      	ldr	r0, [pc, #44]	; (8008b20 <prvInitialiseTaskLists+0x74>)
 8008af2:	f7fe fcb5 	bl	8007460 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008af6:	4b0b      	ldr	r3, [pc, #44]	; (8008b24 <prvInitialiseTaskLists+0x78>)
 8008af8:	4a05      	ldr	r2, [pc, #20]	; (8008b10 <prvInitialiseTaskLists+0x64>)
 8008afa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008afc:	4b0a      	ldr	r3, [pc, #40]	; (8008b28 <prvInitialiseTaskLists+0x7c>)
 8008afe:	4a05      	ldr	r2, [pc, #20]	; (8008b14 <prvInitialiseTaskLists+0x68>)
 8008b00:	601a      	str	r2, [r3, #0]
}
 8008b02:	bf00      	nop
 8008b04:	3708      	adds	r7, #8
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	24000b90 	.word	0x24000b90
 8008b10:	24000ff0 	.word	0x24000ff0
 8008b14:	24001004 	.word	0x24001004
 8008b18:	24001020 	.word	0x24001020
 8008b1c:	24001034 	.word	0x24001034
 8008b20:	2400104c 	.word	0x2400104c
 8008b24:	24001018 	.word	0x24001018
 8008b28:	2400101c 	.word	0x2400101c

08008b2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b082      	sub	sp, #8
 8008b30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b32:	e019      	b.n	8008b68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b34:	f000 fdd6 	bl	80096e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b38:	4b10      	ldr	r3, [pc, #64]	; (8008b7c <prvCheckTasksWaitingTermination+0x50>)
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3304      	adds	r3, #4
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe fd15 	bl	8007574 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b4a:	4b0d      	ldr	r3, [pc, #52]	; (8008b80 <prvCheckTasksWaitingTermination+0x54>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	4a0b      	ldr	r2, [pc, #44]	; (8008b80 <prvCheckTasksWaitingTermination+0x54>)
 8008b52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b54:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <prvCheckTasksWaitingTermination+0x58>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	4a0a      	ldr	r2, [pc, #40]	; (8008b84 <prvCheckTasksWaitingTermination+0x58>)
 8008b5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b5e:	f000 fdf1 	bl	8009744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f810 	bl	8008b88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b68:	4b06      	ldr	r3, [pc, #24]	; (8008b84 <prvCheckTasksWaitingTermination+0x58>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e1      	bne.n	8008b34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	3708      	adds	r7, #8
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	24001034 	.word	0x24001034
 8008b80:	24001060 	.word	0x24001060
 8008b84:	24001048 	.word	0x24001048

08008b88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3354      	adds	r3, #84	; 0x54
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 f9e9 	bl	8009f6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d108      	bne.n	8008bb6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 ff89 	bl	8009ac0 <vPortFree>
				vPortFree( pxTCB );
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 ff86 	bl	8009ac0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008bb4:	e018      	b.n	8008be8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d103      	bne.n	8008bc8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 ff7d 	bl	8009ac0 <vPortFree>
	}
 8008bc6:	e00f      	b.n	8008be8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d00a      	beq.n	8008be8 <prvDeleteTCB+0x60>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60fb      	str	r3, [r7, #12]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <prvDeleteTCB+0x5e>
	}
 8008be8:	bf00      	nop
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bf6:	4b0c      	ldr	r3, [pc, #48]	; (8008c28 <prvResetNextTaskUnblockTime+0x38>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d104      	bne.n	8008c0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c00:	4b0a      	ldr	r3, [pc, #40]	; (8008c2c <prvResetNextTaskUnblockTime+0x3c>)
 8008c02:	f04f 32ff 	mov.w	r2, #4294967295
 8008c06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c08:	e008      	b.n	8008c1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c0a:	4b07      	ldr	r3, [pc, #28]	; (8008c28 <prvResetNextTaskUnblockTime+0x38>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68db      	ldr	r3, [r3, #12]
 8008c10:	68db      	ldr	r3, [r3, #12]
 8008c12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	4a04      	ldr	r2, [pc, #16]	; (8008c2c <prvResetNextTaskUnblockTime+0x3c>)
 8008c1a:	6013      	str	r3, [r2, #0]
}
 8008c1c:	bf00      	nop
 8008c1e:	370c      	adds	r7, #12
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	24001018 	.word	0x24001018
 8008c2c:	24001080 	.word	0x24001080

08008c30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c30:	b480      	push	{r7}
 8008c32:	b083      	sub	sp, #12
 8008c34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c36:	4b0b      	ldr	r3, [pc, #44]	; (8008c64 <xTaskGetSchedulerState+0x34>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d102      	bne.n	8008c44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	607b      	str	r3, [r7, #4]
 8008c42:	e008      	b.n	8008c56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c44:	4b08      	ldr	r3, [pc, #32]	; (8008c68 <xTaskGetSchedulerState+0x38>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d102      	bne.n	8008c52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	607b      	str	r3, [r7, #4]
 8008c50:	e001      	b.n	8008c56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c52:	2300      	movs	r3, #0
 8008c54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c56:	687b      	ldr	r3, [r7, #4]
	}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	370c      	adds	r7, #12
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	2400106c 	.word	0x2400106c
 8008c68:	24001088 	.word	0x24001088

08008c6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b086      	sub	sp, #24
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d056      	beq.n	8008d30 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c82:	4b2e      	ldr	r3, [pc, #184]	; (8008d3c <xTaskPriorityDisinherit+0xd0>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d00a      	beq.n	8008ca2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c90:	f383 8811 	msr	BASEPRI, r3
 8008c94:	f3bf 8f6f 	isb	sy
 8008c98:	f3bf 8f4f 	dsb	sy
 8008c9c:	60fb      	str	r3, [r7, #12]
}
 8008c9e:	bf00      	nop
 8008ca0:	e7fe      	b.n	8008ca0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d10a      	bne.n	8008cc0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cae:	f383 8811 	msr	BASEPRI, r3
 8008cb2:	f3bf 8f6f 	isb	sy
 8008cb6:	f3bf 8f4f 	dsb	sy
 8008cba:	60bb      	str	r3, [r7, #8]
}
 8008cbc:	bf00      	nop
 8008cbe:	e7fe      	b.n	8008cbe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc4:	1e5a      	subs	r2, r3, #1
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cce:	693b      	ldr	r3, [r7, #16]
 8008cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d02c      	beq.n	8008d30 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d128      	bne.n	8008d30 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe fc46 	bl	8007574 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <xTaskPriorityDisinherit+0xd4>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d903      	bls.n	8008d10 <xTaskPriorityDisinherit+0xa4>
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0c:	4a0c      	ldr	r2, [pc, #48]	; (8008d40 <xTaskPriorityDisinherit+0xd4>)
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4a09      	ldr	r2, [pc, #36]	; (8008d44 <xTaskPriorityDisinherit+0xd8>)
 8008d1e:	441a      	add	r2, r3
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fe fbc7 	bl	80074ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d30:	697b      	ldr	r3, [r7, #20]
	}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3718      	adds	r7, #24
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	24000b8c 	.word	0x24000b8c
 8008d40:	24001068 	.word	0x24001068
 8008d44:	24000b90 	.word	0x24000b90

08008d48 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d52:	4b21      	ldr	r3, [pc, #132]	; (8008dd8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d58:	4b20      	ldr	r3, [pc, #128]	; (8008ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	4618      	mov	r0, r3
 8008d60:	f7fe fc08 	bl	8007574 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d6a:	d10a      	bne.n	8008d82 <prvAddCurrentTaskToDelayedList+0x3a>
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d007      	beq.n	8008d82 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d72:	4b1a      	ldr	r3, [pc, #104]	; (8008ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4819      	ldr	r0, [pc, #100]	; (8008de0 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d7c:	f7fe fb9d 	bl	80074ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d80:	e026      	b.n	8008dd0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d82:	68fa      	ldr	r2, [r7, #12]
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	4413      	add	r3, r2
 8008d88:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d8a:	4b14      	ldr	r3, [pc, #80]	; (8008ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68ba      	ldr	r2, [r7, #8]
 8008d90:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d209      	bcs.n	8008dae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d9a:	4b12      	ldr	r3, [pc, #72]	; (8008de4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	3304      	adds	r3, #4
 8008da4:	4619      	mov	r1, r3
 8008da6:	4610      	mov	r0, r2
 8008da8:	f7fe fbab 	bl	8007502 <vListInsert>
}
 8008dac:	e010      	b.n	8008dd0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008dae:	4b0e      	ldr	r3, [pc, #56]	; (8008de8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008db0:	681a      	ldr	r2, [r3, #0]
 8008db2:	4b0a      	ldr	r3, [pc, #40]	; (8008ddc <prvAddCurrentTaskToDelayedList+0x94>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3304      	adds	r3, #4
 8008db8:	4619      	mov	r1, r3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	f7fe fba1 	bl	8007502 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008dc0:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d202      	bcs.n	8008dd0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008dca:	4a08      	ldr	r2, [pc, #32]	; (8008dec <prvAddCurrentTaskToDelayedList+0xa4>)
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	6013      	str	r3, [r2, #0]
}
 8008dd0:	bf00      	nop
 8008dd2:	3710      	adds	r7, #16
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	bd80      	pop	{r7, pc}
 8008dd8:	24001064 	.word	0x24001064
 8008ddc:	24000b8c 	.word	0x24000b8c
 8008de0:	2400104c 	.word	0x2400104c
 8008de4:	2400101c 	.word	0x2400101c
 8008de8:	24001018 	.word	0x24001018
 8008dec:	24001080 	.word	0x24001080

08008df0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b08a      	sub	sp, #40	; 0x28
 8008df4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008df6:	2300      	movs	r3, #0
 8008df8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dfa:	f000 fb07 	bl	800940c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dfe:	4b1c      	ldr	r3, [pc, #112]	; (8008e70 <xTimerCreateTimerTask+0x80>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d021      	beq.n	8008e4a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008e06:	2300      	movs	r3, #0
 8008e08:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008e0e:	1d3a      	adds	r2, r7, #4
 8008e10:	f107 0108 	add.w	r1, r7, #8
 8008e14:	f107 030c 	add.w	r3, r7, #12
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f7fe fb07 	bl	800742c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008e1e:	6879      	ldr	r1, [r7, #4]
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	9202      	str	r2, [sp, #8]
 8008e26:	9301      	str	r3, [sp, #4]
 8008e28:	2302      	movs	r3, #2
 8008e2a:	9300      	str	r3, [sp, #0]
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	460a      	mov	r2, r1
 8008e30:	4910      	ldr	r1, [pc, #64]	; (8008e74 <xTimerCreateTimerTask+0x84>)
 8008e32:	4811      	ldr	r0, [pc, #68]	; (8008e78 <xTimerCreateTimerTask+0x88>)
 8008e34:	f7ff f8b4 	bl	8007fa0 <xTaskCreateStatic>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	4a10      	ldr	r2, [pc, #64]	; (8008e7c <xTimerCreateTimerTask+0x8c>)
 8008e3c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e3e:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <xTimerCreateTimerTask+0x8c>)
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e46:	2301      	movs	r3, #1
 8008e48:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d10a      	bne.n	8008e66 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e54:	f383 8811 	msr	BASEPRI, r3
 8008e58:	f3bf 8f6f 	isb	sy
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	613b      	str	r3, [r7, #16]
}
 8008e62:	bf00      	nop
 8008e64:	e7fe      	b.n	8008e64 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e66:	697b      	ldr	r3, [r7, #20]
}
 8008e68:	4618      	mov	r0, r3
 8008e6a:	3718      	adds	r7, #24
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	240010bc 	.word	0x240010bc
 8008e74:	0800a0d4 	.word	0x0800a0d4
 8008e78:	08008fb5 	.word	0x08008fb5
 8008e7c:	240010c0 	.word	0x240010c0

08008e80 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b08a      	sub	sp, #40	; 0x28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	60f8      	str	r0, [r7, #12]
 8008e88:	60b9      	str	r1, [r7, #8]
 8008e8a:	607a      	str	r2, [r7, #4]
 8008e8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d10a      	bne.n	8008eae <xTimerGenericCommand+0x2e>
	__asm volatile
 8008e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9c:	f383 8811 	msr	BASEPRI, r3
 8008ea0:	f3bf 8f6f 	isb	sy
 8008ea4:	f3bf 8f4f 	dsb	sy
 8008ea8:	623b      	str	r3, [r7, #32]
}
 8008eaa:	bf00      	nop
 8008eac:	e7fe      	b.n	8008eac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008eae:	4b1a      	ldr	r3, [pc, #104]	; (8008f18 <xTimerGenericCommand+0x98>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d02a      	beq.n	8008f0c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	2b05      	cmp	r3, #5
 8008ec6:	dc18      	bgt.n	8008efa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008ec8:	f7ff feb2 	bl	8008c30 <xTaskGetSchedulerState>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d109      	bne.n	8008ee6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008ed2:	4b11      	ldr	r3, [pc, #68]	; (8008f18 <xTimerGenericCommand+0x98>)
 8008ed4:	6818      	ldr	r0, [r3, #0]
 8008ed6:	f107 0110 	add.w	r1, r7, #16
 8008eda:	2300      	movs	r3, #0
 8008edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ede:	f7fe fc77 	bl	80077d0 <xQueueGenericSend>
 8008ee2:	6278      	str	r0, [r7, #36]	; 0x24
 8008ee4:	e012      	b.n	8008f0c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ee6:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <xTimerGenericCommand+0x98>)
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	f107 0110 	add.w	r1, r7, #16
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	f7fe fc6d 	bl	80077d0 <xQueueGenericSend>
 8008ef6:	6278      	str	r0, [r7, #36]	; 0x24
 8008ef8:	e008      	b.n	8008f0c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008efa:	4b07      	ldr	r3, [pc, #28]	; (8008f18 <xTimerGenericCommand+0x98>)
 8008efc:	6818      	ldr	r0, [r3, #0]
 8008efe:	f107 0110 	add.w	r1, r7, #16
 8008f02:	2300      	movs	r3, #0
 8008f04:	683a      	ldr	r2, [r7, #0]
 8008f06:	f7fe fd61 	bl	80079cc <xQueueGenericSendFromISR>
 8008f0a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3728      	adds	r7, #40	; 0x28
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	240010bc 	.word	0x240010bc

08008f1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b088      	sub	sp, #32
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f26:	4b22      	ldr	r3, [pc, #136]	; (8008fb0 <prvProcessExpiredTimer+0x94>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	68db      	ldr	r3, [r3, #12]
 8008f2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	3304      	adds	r3, #4
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fe fb1d 	bl	8007574 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f40:	f003 0304 	and.w	r3, r3, #4
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d022      	beq.n	8008f8e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	699a      	ldr	r2, [r3, #24]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	18d1      	adds	r1, r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	6978      	ldr	r0, [r7, #20]
 8008f56:	f000 f8d1 	bl	80090fc <prvInsertTimerInActiveList>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d01f      	beq.n	8008fa0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f60:	2300      	movs	r3, #0
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	2300      	movs	r3, #0
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	6978      	ldr	r0, [r7, #20]
 8008f6c:	f7ff ff88 	bl	8008e80 <xTimerGenericCommand>
 8008f70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d113      	bne.n	8008fa0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7c:	f383 8811 	msr	BASEPRI, r3
 8008f80:	f3bf 8f6f 	isb	sy
 8008f84:	f3bf 8f4f 	dsb	sy
 8008f88:	60fb      	str	r3, [r7, #12]
}
 8008f8a:	bf00      	nop
 8008f8c:	e7fe      	b.n	8008f8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f8e:	697b      	ldr	r3, [r7, #20]
 8008f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008f94:	f023 0301 	bic.w	r3, r3, #1
 8008f98:	b2da      	uxtb	r2, r3
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	6a1b      	ldr	r3, [r3, #32]
 8008fa4:	6978      	ldr	r0, [r7, #20]
 8008fa6:	4798      	blx	r3
}
 8008fa8:	bf00      	nop
 8008faa:	3718      	adds	r7, #24
 8008fac:	46bd      	mov	sp, r7
 8008fae:	bd80      	pop	{r7, pc}
 8008fb0:	240010b4 	.word	0x240010b4

08008fb4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	b084      	sub	sp, #16
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fbc:	f107 0308 	add.w	r3, r7, #8
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f000 f857 	bl	8009074 <prvGetNextExpireTime>
 8008fc6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	4619      	mov	r1, r3
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 f803 	bl	8008fd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fd2:	f000 f8d5 	bl	8009180 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fd6:	e7f1      	b.n	8008fbc <prvTimerTask+0x8>

08008fd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fe2:	f7ff fa39 	bl	8008458 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fe6:	f107 0308 	add.w	r3, r7, #8
 8008fea:	4618      	mov	r0, r3
 8008fec:	f000 f866 	bl	80090bc <prvSampleTimeNow>
 8008ff0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d130      	bne.n	800905a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10a      	bne.n	8009014 <prvProcessTimerOrBlockTask+0x3c>
 8008ffe:	687a      	ldr	r2, [r7, #4]
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	429a      	cmp	r2, r3
 8009004:	d806      	bhi.n	8009014 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009006:	f7ff fa35 	bl	8008474 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800900a:	68f9      	ldr	r1, [r7, #12]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff ff85 	bl	8008f1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009012:	e024      	b.n	800905e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d008      	beq.n	800902c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800901a:	4b13      	ldr	r3, [pc, #76]	; (8009068 <prvProcessTimerOrBlockTask+0x90>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d101      	bne.n	8009028 <prvProcessTimerOrBlockTask+0x50>
 8009024:	2301      	movs	r3, #1
 8009026:	e000      	b.n	800902a <prvProcessTimerOrBlockTask+0x52>
 8009028:	2300      	movs	r3, #0
 800902a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800902c:	4b0f      	ldr	r3, [pc, #60]	; (800906c <prvProcessTimerOrBlockTask+0x94>)
 800902e:	6818      	ldr	r0, [r3, #0]
 8009030:	687a      	ldr	r2, [r7, #4]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	683a      	ldr	r2, [r7, #0]
 8009038:	4619      	mov	r1, r3
 800903a:	f7fe ff7d 	bl	8007f38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800903e:	f7ff fa19 	bl	8008474 <xTaskResumeAll>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d10a      	bne.n	800905e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009048:	4b09      	ldr	r3, [pc, #36]	; (8009070 <prvProcessTimerOrBlockTask+0x98>)
 800904a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800904e:	601a      	str	r2, [r3, #0]
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	f3bf 8f6f 	isb	sy
}
 8009058:	e001      	b.n	800905e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800905a:	f7ff fa0b 	bl	8008474 <xTaskResumeAll>
}
 800905e:	bf00      	nop
 8009060:	3710      	adds	r7, #16
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}
 8009066:	bf00      	nop
 8009068:	240010b8 	.word	0x240010b8
 800906c:	240010bc 	.word	0x240010bc
 8009070:	e000ed04 	.word	0xe000ed04

08009074 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800907c:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <prvGetNextExpireTime+0x44>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d101      	bne.n	800908a <prvGetNextExpireTime+0x16>
 8009086:	2201      	movs	r2, #1
 8009088:	e000      	b.n	800908c <prvGetNextExpireTime+0x18>
 800908a:	2200      	movs	r2, #0
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d105      	bne.n	80090a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009098:	4b07      	ldr	r3, [pc, #28]	; (80090b8 <prvGetNextExpireTime+0x44>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	60fb      	str	r3, [r7, #12]
 80090a2:	e001      	b.n	80090a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80090a4:	2300      	movs	r3, #0
 80090a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80090a8:	68fb      	ldr	r3, [r7, #12]
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	240010b4 	.word	0x240010b4

080090bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b084      	sub	sp, #16
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090c4:	f7ff fa74 	bl	80085b0 <xTaskGetTickCount>
 80090c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090ca:	4b0b      	ldr	r3, [pc, #44]	; (80090f8 <prvSampleTimeNow+0x3c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68fa      	ldr	r2, [r7, #12]
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d205      	bcs.n	80090e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090d4:	f000 f936 	bl	8009344 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2201      	movs	r2, #1
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	e002      	b.n	80090e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090e6:	4a04      	ldr	r2, [pc, #16]	; (80090f8 <prvSampleTimeNow+0x3c>)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090ec:	68fb      	ldr	r3, [r7, #12]
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	bf00      	nop
 80090f8:	240010c4 	.word	0x240010c4

080090fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b086      	sub	sp, #24
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
 8009108:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800910a:	2300      	movs	r3, #0
 800910c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	68ba      	ldr	r2, [r7, #8]
 8009112:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800911a:	68ba      	ldr	r2, [r7, #8]
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	429a      	cmp	r2, r3
 8009120:	d812      	bhi.n	8009148 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	1ad2      	subs	r2, r2, r3
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	429a      	cmp	r2, r3
 800912e:	d302      	bcc.n	8009136 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009130:	2301      	movs	r3, #1
 8009132:	617b      	str	r3, [r7, #20]
 8009134:	e01b      	b.n	800916e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009136:	4b10      	ldr	r3, [pc, #64]	; (8009178 <prvInsertTimerInActiveList+0x7c>)
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3304      	adds	r3, #4
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f7fe f9de 	bl	8007502 <vListInsert>
 8009146:	e012      	b.n	800916e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009148:	687a      	ldr	r2, [r7, #4]
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d206      	bcs.n	800915e <prvInsertTimerInActiveList+0x62>
 8009150:	68ba      	ldr	r2, [r7, #8]
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	429a      	cmp	r2, r3
 8009156:	d302      	bcc.n	800915e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009158:	2301      	movs	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
 800915c:	e007      	b.n	800916e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800915e:	4b07      	ldr	r3, [pc, #28]	; (800917c <prvInsertTimerInActiveList+0x80>)
 8009160:	681a      	ldr	r2, [r3, #0]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3304      	adds	r3, #4
 8009166:	4619      	mov	r1, r3
 8009168:	4610      	mov	r0, r2
 800916a:	f7fe f9ca 	bl	8007502 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800916e:	697b      	ldr	r3, [r7, #20]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3718      	adds	r7, #24
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	240010b8 	.word	0x240010b8
 800917c:	240010b4 	.word	0x240010b4

08009180 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b08e      	sub	sp, #56	; 0x38
 8009184:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009186:	e0ca      	b.n	800931e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2b00      	cmp	r3, #0
 800918c:	da18      	bge.n	80091c0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800918e:	1d3b      	adds	r3, r7, #4
 8009190:	3304      	adds	r3, #4
 8009192:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009196:	2b00      	cmp	r3, #0
 8009198:	d10a      	bne.n	80091b0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	61fb      	str	r3, [r7, #28]
}
 80091ac:	bf00      	nop
 80091ae:	e7fe      	b.n	80091ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80091b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091b6:	6850      	ldr	r0, [r2, #4]
 80091b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80091ba:	6892      	ldr	r2, [r2, #8]
 80091bc:	4611      	mov	r1, r2
 80091be:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	f2c0 80aa 	blt.w	800931c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ce:	695b      	ldr	r3, [r3, #20]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d004      	beq.n	80091de <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d6:	3304      	adds	r3, #4
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fe f9cb 	bl	8007574 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091de:	463b      	mov	r3, r7
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff ff6b 	bl	80090bc <prvSampleTimeNow>
 80091e6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	f200 8097 	bhi.w	800931e <prvProcessReceivedCommands+0x19e>
 80091f0:	a201      	add	r2, pc, #4	; (adr r2, 80091f8 <prvProcessReceivedCommands+0x78>)
 80091f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f6:	bf00      	nop
 80091f8:	08009221 	.word	0x08009221
 80091fc:	08009221 	.word	0x08009221
 8009200:	08009221 	.word	0x08009221
 8009204:	08009295 	.word	0x08009295
 8009208:	080092a9 	.word	0x080092a9
 800920c:	080092f3 	.word	0x080092f3
 8009210:	08009221 	.word	0x08009221
 8009214:	08009221 	.word	0x08009221
 8009218:	08009295 	.word	0x08009295
 800921c:	080092a9 	.word	0x080092a9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009226:	f043 0301 	orr.w	r3, r3, #1
 800922a:	b2da      	uxtb	r2, r3
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009236:	699b      	ldr	r3, [r3, #24]
 8009238:	18d1      	adds	r1, r2, r3
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800923e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009240:	f7ff ff5c 	bl	80090fc <prvInsertTimerInActiveList>
 8009244:	4603      	mov	r3, r0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d069      	beq.n	800931e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800924a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800924c:	6a1b      	ldr	r3, [r3, #32]
 800924e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009250:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009254:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009258:	f003 0304 	and.w	r3, r3, #4
 800925c:	2b00      	cmp	r3, #0
 800925e:	d05e      	beq.n	800931e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009260:	68ba      	ldr	r2, [r7, #8]
 8009262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009264:	699b      	ldr	r3, [r3, #24]
 8009266:	441a      	add	r2, r3
 8009268:	2300      	movs	r3, #0
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	2300      	movs	r3, #0
 800926e:	2100      	movs	r1, #0
 8009270:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009272:	f7ff fe05 	bl	8008e80 <xTimerGenericCommand>
 8009276:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d14f      	bne.n	800931e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	61bb      	str	r3, [r7, #24]
}
 8009290:	bf00      	nop
 8009292:	e7fe      	b.n	8009292 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009296:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800929a:	f023 0301 	bic.w	r3, r3, #1
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80092a6:	e03a      	b.n	800931e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80092a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092ba:	68ba      	ldr	r2, [r7, #8]
 80092bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092be:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c2:	699b      	ldr	r3, [r3, #24]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d10a      	bne.n	80092de <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	617b      	str	r3, [r7, #20]
}
 80092da:	bf00      	nop
 80092dc:	e7fe      	b.n	80092dc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e0:	699a      	ldr	r2, [r3, #24]
 80092e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e4:	18d1      	adds	r1, r2, r3
 80092e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092ec:	f7ff ff06 	bl	80090fc <prvInsertTimerInActiveList>
					break;
 80092f0:	e015      	b.n	800931e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d103      	bne.n	8009308 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009300:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009302:	f000 fbdd 	bl	8009ac0 <vPortFree>
 8009306:	e00a      	b.n	800931e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800930a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800930e:	f023 0301 	bic.w	r3, r3, #1
 8009312:	b2da      	uxtb	r2, r3
 8009314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009316:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800931a:	e000      	b.n	800931e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800931c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800931e:	4b08      	ldr	r3, [pc, #32]	; (8009340 <prvProcessReceivedCommands+0x1c0>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	1d39      	adds	r1, r7, #4
 8009324:	2200      	movs	r2, #0
 8009326:	4618      	mov	r0, r3
 8009328:	f7fe fbec 	bl	8007b04 <xQueueReceive>
 800932c:	4603      	mov	r3, r0
 800932e:	2b00      	cmp	r3, #0
 8009330:	f47f af2a 	bne.w	8009188 <prvProcessReceivedCommands+0x8>
	}
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	3730      	adds	r7, #48	; 0x30
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	240010bc 	.word	0x240010bc

08009344 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800934a:	e048      	b.n	80093de <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800934c:	4b2d      	ldr	r3, [pc, #180]	; (8009404 <prvSwitchTimerLists+0xc0>)
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68db      	ldr	r3, [r3, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009356:	4b2b      	ldr	r3, [pc, #172]	; (8009404 <prvSwitchTimerLists+0xc0>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68db      	ldr	r3, [r3, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	3304      	adds	r3, #4
 8009364:	4618      	mov	r0, r3
 8009366:	f7fe f905 	bl	8007574 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a1b      	ldr	r3, [r3, #32]
 800936e:	68f8      	ldr	r0, [r7, #12]
 8009370:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009378:	f003 0304 	and.w	r3, r3, #4
 800937c:	2b00      	cmp	r3, #0
 800937e:	d02e      	beq.n	80093de <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	699b      	ldr	r3, [r3, #24]
 8009384:	693a      	ldr	r2, [r7, #16]
 8009386:	4413      	add	r3, r2
 8009388:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	429a      	cmp	r2, r3
 8009390:	d90e      	bls.n	80093b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	68ba      	ldr	r2, [r7, #8]
 8009396:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800939e:	4b19      	ldr	r3, [pc, #100]	; (8009404 <prvSwitchTimerLists+0xc0>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fe f8aa 	bl	8007502 <vListInsert>
 80093ae:	e016      	b.n	80093de <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093b0:	2300      	movs	r3, #0
 80093b2:	9300      	str	r3, [sp, #0]
 80093b4:	2300      	movs	r3, #0
 80093b6:	693a      	ldr	r2, [r7, #16]
 80093b8:	2100      	movs	r1, #0
 80093ba:	68f8      	ldr	r0, [r7, #12]
 80093bc:	f7ff fd60 	bl	8008e80 <xTimerGenericCommand>
 80093c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d10a      	bne.n	80093de <prvSwitchTimerLists+0x9a>
	__asm volatile
 80093c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093cc:	f383 8811 	msr	BASEPRI, r3
 80093d0:	f3bf 8f6f 	isb	sy
 80093d4:	f3bf 8f4f 	dsb	sy
 80093d8:	603b      	str	r3, [r7, #0]
}
 80093da:	bf00      	nop
 80093dc:	e7fe      	b.n	80093dc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093de:	4b09      	ldr	r3, [pc, #36]	; (8009404 <prvSwitchTimerLists+0xc0>)
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1b1      	bne.n	800934c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093e8:	4b06      	ldr	r3, [pc, #24]	; (8009404 <prvSwitchTimerLists+0xc0>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <prvSwitchTimerLists+0xc4>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	4a04      	ldr	r2, [pc, #16]	; (8009404 <prvSwitchTimerLists+0xc0>)
 80093f4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093f6:	4a04      	ldr	r2, [pc, #16]	; (8009408 <prvSwitchTimerLists+0xc4>)
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	6013      	str	r3, [r2, #0]
}
 80093fc:	bf00      	nop
 80093fe:	3718      	adds	r7, #24
 8009400:	46bd      	mov	sp, r7
 8009402:	bd80      	pop	{r7, pc}
 8009404:	240010b4 	.word	0x240010b4
 8009408:	240010b8 	.word	0x240010b8

0800940c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009412:	f000 f967 	bl	80096e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009416:	4b15      	ldr	r3, [pc, #84]	; (800946c <prvCheckForValidListAndQueue+0x60>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d120      	bne.n	8009460 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800941e:	4814      	ldr	r0, [pc, #80]	; (8009470 <prvCheckForValidListAndQueue+0x64>)
 8009420:	f7fe f81e 	bl	8007460 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009424:	4813      	ldr	r0, [pc, #76]	; (8009474 <prvCheckForValidListAndQueue+0x68>)
 8009426:	f7fe f81b 	bl	8007460 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <prvCheckForValidListAndQueue+0x6c>)
 800942c:	4a10      	ldr	r2, [pc, #64]	; (8009470 <prvCheckForValidListAndQueue+0x64>)
 800942e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009430:	4b12      	ldr	r3, [pc, #72]	; (800947c <prvCheckForValidListAndQueue+0x70>)
 8009432:	4a10      	ldr	r2, [pc, #64]	; (8009474 <prvCheckForValidListAndQueue+0x68>)
 8009434:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009436:	2300      	movs	r3, #0
 8009438:	9300      	str	r3, [sp, #0]
 800943a:	4b11      	ldr	r3, [pc, #68]	; (8009480 <prvCheckForValidListAndQueue+0x74>)
 800943c:	4a11      	ldr	r2, [pc, #68]	; (8009484 <prvCheckForValidListAndQueue+0x78>)
 800943e:	2110      	movs	r1, #16
 8009440:	200a      	movs	r0, #10
 8009442:	f7fe f929 	bl	8007698 <xQueueGenericCreateStatic>
 8009446:	4603      	mov	r3, r0
 8009448:	4a08      	ldr	r2, [pc, #32]	; (800946c <prvCheckForValidListAndQueue+0x60>)
 800944a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800944c:	4b07      	ldr	r3, [pc, #28]	; (800946c <prvCheckForValidListAndQueue+0x60>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d005      	beq.n	8009460 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009454:	4b05      	ldr	r3, [pc, #20]	; (800946c <prvCheckForValidListAndQueue+0x60>)
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	490b      	ldr	r1, [pc, #44]	; (8009488 <prvCheckForValidListAndQueue+0x7c>)
 800945a:	4618      	mov	r0, r3
 800945c:	f7fe fd42 	bl	8007ee4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009460:	f000 f970 	bl	8009744 <vPortExitCritical>
}
 8009464:	bf00      	nop
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}
 800946a:	bf00      	nop
 800946c:	240010bc 	.word	0x240010bc
 8009470:	2400108c 	.word	0x2400108c
 8009474:	240010a0 	.word	0x240010a0
 8009478:	240010b4 	.word	0x240010b4
 800947c:	240010b8 	.word	0x240010b8
 8009480:	24001168 	.word	0x24001168
 8009484:	240010c8 	.word	0x240010c8
 8009488:	0800a0dc 	.word	0x0800a0dc

0800948c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800948c:	b480      	push	{r7}
 800948e:	b085      	sub	sp, #20
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3b04      	subs	r3, #4
 800949c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80094a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	3b04      	subs	r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	f023 0201 	bic.w	r2, r3, #1
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3b04      	subs	r3, #4
 80094ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094bc:	4a0c      	ldr	r2, [pc, #48]	; (80094f0 <pxPortInitialiseStack+0x64>)
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3b14      	subs	r3, #20
 80094c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	3b04      	subs	r3, #4
 80094d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f06f 0202 	mvn.w	r2, #2
 80094da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	3b20      	subs	r3, #32
 80094e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094e2:	68fb      	ldr	r3, [r7, #12]
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3714      	adds	r7, #20
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr
 80094f0:	080094f5 	.word	0x080094f5

080094f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	b085      	sub	sp, #20
 80094f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094fa:	2300      	movs	r3, #0
 80094fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094fe:	4b12      	ldr	r3, [pc, #72]	; (8009548 <prvTaskExitError+0x54>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009506:	d00a      	beq.n	800951e <prvTaskExitError+0x2a>
	__asm volatile
 8009508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950c:	f383 8811 	msr	BASEPRI, r3
 8009510:	f3bf 8f6f 	isb	sy
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	60fb      	str	r3, [r7, #12]
}
 800951a:	bf00      	nop
 800951c:	e7fe      	b.n	800951c <prvTaskExitError+0x28>
	__asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	60bb      	str	r3, [r7, #8]
}
 8009530:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009532:	bf00      	nop
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d0fc      	beq.n	8009534 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800953a:	bf00      	nop
 800953c:	bf00      	nop
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	24000010 	.word	0x24000010
 800954c:	00000000 	.word	0x00000000

08009550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009550:	4b07      	ldr	r3, [pc, #28]	; (8009570 <pxCurrentTCBConst2>)
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	6808      	ldr	r0, [r1, #0]
 8009556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955a:	f380 8809 	msr	PSP, r0
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8811 	msr	BASEPRI, r0
 800956a:	4770      	bx	lr
 800956c:	f3af 8000 	nop.w

08009570 <pxCurrentTCBConst2>:
 8009570:	24000b8c 	.word	0x24000b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop

08009578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009578:	4808      	ldr	r0, [pc, #32]	; (800959c <prvPortStartFirstTask+0x24>)
 800957a:	6800      	ldr	r0, [r0, #0]
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	f380 8808 	msr	MSP, r0
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8814 	msr	CONTROL, r0
 800958a:	b662      	cpsie	i
 800958c:	b661      	cpsie	f
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	df00      	svc	0
 8009598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800959a:	bf00      	nop
 800959c:	e000ed08 	.word	0xe000ed08

080095a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095a6:	4b46      	ldr	r3, [pc, #280]	; (80096c0 <xPortStartScheduler+0x120>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a46      	ldr	r2, [pc, #280]	; (80096c4 <xPortStartScheduler+0x124>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d10a      	bne.n	80095c6 <xPortStartScheduler+0x26>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
 80095c4:	e7fe      	b.n	80095c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095c6:	4b3e      	ldr	r3, [pc, #248]	; (80096c0 <xPortStartScheduler+0x120>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a3f      	ldr	r2, [pc, #252]	; (80096c8 <xPortStartScheduler+0x128>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d10a      	bne.n	80095e6 <xPortStartScheduler+0x46>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	60fb      	str	r3, [r7, #12]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095e6:	4b39      	ldr	r3, [pc, #228]	; (80096cc <xPortStartScheduler+0x12c>)
 80095e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	781b      	ldrb	r3, [r3, #0]
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	22ff      	movs	r2, #255	; 0xff
 80095f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	781b      	ldrb	r3, [r3, #0]
 80095fc:	b2db      	uxtb	r3, r3
 80095fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009600:	78fb      	ldrb	r3, [r7, #3]
 8009602:	b2db      	uxtb	r3, r3
 8009604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009608:	b2da      	uxtb	r2, r3
 800960a:	4b31      	ldr	r3, [pc, #196]	; (80096d0 <xPortStartScheduler+0x130>)
 800960c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800960e:	4b31      	ldr	r3, [pc, #196]	; (80096d4 <xPortStartScheduler+0x134>)
 8009610:	2207      	movs	r2, #7
 8009612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009614:	e009      	b.n	800962a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009616:	4b2f      	ldr	r3, [pc, #188]	; (80096d4 <xPortStartScheduler+0x134>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	3b01      	subs	r3, #1
 800961c:	4a2d      	ldr	r2, [pc, #180]	; (80096d4 <xPortStartScheduler+0x134>)
 800961e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009620:	78fb      	ldrb	r3, [r7, #3]
 8009622:	b2db      	uxtb	r3, r3
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800962a:	78fb      	ldrb	r3, [r7, #3]
 800962c:	b2db      	uxtb	r3, r3
 800962e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009632:	2b80      	cmp	r3, #128	; 0x80
 8009634:	d0ef      	beq.n	8009616 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009636:	4b27      	ldr	r3, [pc, #156]	; (80096d4 <xPortStartScheduler+0x134>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f1c3 0307 	rsb	r3, r3, #7
 800963e:	2b04      	cmp	r3, #4
 8009640:	d00a      	beq.n	8009658 <xPortStartScheduler+0xb8>
	__asm volatile
 8009642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009646:	f383 8811 	msr	BASEPRI, r3
 800964a:	f3bf 8f6f 	isb	sy
 800964e:	f3bf 8f4f 	dsb	sy
 8009652:	60bb      	str	r3, [r7, #8]
}
 8009654:	bf00      	nop
 8009656:	e7fe      	b.n	8009656 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009658:	4b1e      	ldr	r3, [pc, #120]	; (80096d4 <xPortStartScheduler+0x134>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	021b      	lsls	r3, r3, #8
 800965e:	4a1d      	ldr	r2, [pc, #116]	; (80096d4 <xPortStartScheduler+0x134>)
 8009660:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009662:	4b1c      	ldr	r3, [pc, #112]	; (80096d4 <xPortStartScheduler+0x134>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800966a:	4a1a      	ldr	r2, [pc, #104]	; (80096d4 <xPortStartScheduler+0x134>)
 800966c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	b2da      	uxtb	r2, r3
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009676:	4b18      	ldr	r3, [pc, #96]	; (80096d8 <xPortStartScheduler+0x138>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	4a17      	ldr	r2, [pc, #92]	; (80096d8 <xPortStartScheduler+0x138>)
 800967c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009680:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009682:	4b15      	ldr	r3, [pc, #84]	; (80096d8 <xPortStartScheduler+0x138>)
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a14      	ldr	r2, [pc, #80]	; (80096d8 <xPortStartScheduler+0x138>)
 8009688:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800968c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800968e:	f000 f8dd 	bl	800984c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009692:	4b12      	ldr	r3, [pc, #72]	; (80096dc <xPortStartScheduler+0x13c>)
 8009694:	2200      	movs	r2, #0
 8009696:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009698:	f000 f8fc 	bl	8009894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800969c:	4b10      	ldr	r3, [pc, #64]	; (80096e0 <xPortStartScheduler+0x140>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0f      	ldr	r2, [pc, #60]	; (80096e0 <xPortStartScheduler+0x140>)
 80096a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80096a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096a8:	f7ff ff66 	bl	8009578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096ac:	f7ff f84a 	bl	8008744 <vTaskSwitchContext>
	prvTaskExitError();
 80096b0:	f7ff ff20 	bl	80094f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3718      	adds	r7, #24
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	e000ed00 	.word	0xe000ed00
 80096c4:	410fc271 	.word	0x410fc271
 80096c8:	410fc270 	.word	0x410fc270
 80096cc:	e000e400 	.word	0xe000e400
 80096d0:	240011b8 	.word	0x240011b8
 80096d4:	240011bc 	.word	0x240011bc
 80096d8:	e000ed20 	.word	0xe000ed20
 80096dc:	24000010 	.word	0x24000010
 80096e0:	e000ef34 	.word	0xe000ef34

080096e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	607b      	str	r3, [r7, #4]
}
 80096fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096fe:	4b0f      	ldr	r3, [pc, #60]	; (800973c <vPortEnterCritical+0x58>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3301      	adds	r3, #1
 8009704:	4a0d      	ldr	r2, [pc, #52]	; (800973c <vPortEnterCritical+0x58>)
 8009706:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009708:	4b0c      	ldr	r3, [pc, #48]	; (800973c <vPortEnterCritical+0x58>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	2b01      	cmp	r3, #1
 800970e:	d10f      	bne.n	8009730 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009710:	4b0b      	ldr	r3, [pc, #44]	; (8009740 <vPortEnterCritical+0x5c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	b2db      	uxtb	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <vPortEnterCritical+0x4c>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	603b      	str	r3, [r7, #0]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <vPortEnterCritical+0x4a>
	}
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	24000010 	.word	0x24000010
 8009740:	e000ed04 	.word	0xe000ed04

08009744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800974a:	4b12      	ldr	r3, [pc, #72]	; (8009794 <vPortExitCritical+0x50>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <vPortExitCritical+0x24>
	__asm volatile
 8009752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009756:	f383 8811 	msr	BASEPRI, r3
 800975a:	f3bf 8f6f 	isb	sy
 800975e:	f3bf 8f4f 	dsb	sy
 8009762:	607b      	str	r3, [r7, #4]
}
 8009764:	bf00      	nop
 8009766:	e7fe      	b.n	8009766 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <vPortExitCritical+0x50>)
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	3b01      	subs	r3, #1
 800976e:	4a09      	ldr	r2, [pc, #36]	; (8009794 <vPortExitCritical+0x50>)
 8009770:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009772:	4b08      	ldr	r3, [pc, #32]	; (8009794 <vPortExitCritical+0x50>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d105      	bne.n	8009786 <vPortExitCritical+0x42>
 800977a:	2300      	movs	r3, #0
 800977c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	f383 8811 	msr	BASEPRI, r3
}
 8009784:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009786:	bf00      	nop
 8009788:	370c      	adds	r7, #12
 800978a:	46bd      	mov	sp, r7
 800978c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009790:	4770      	bx	lr
 8009792:	bf00      	nop
 8009794:	24000010 	.word	0x24000010
	...

080097a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097a0:	f3ef 8009 	mrs	r0, PSP
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4b15      	ldr	r3, [pc, #84]	; (8009800 <pxCurrentTCBConst>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f01e 0f10 	tst.w	lr, #16
 80097b0:	bf08      	it	eq
 80097b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	6010      	str	r0, [r2, #0]
 80097bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80097c4:	f380 8811 	msr	BASEPRI, r0
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f7fe ffb8 	bl	8008744 <vTaskSwitchContext>
 80097d4:	f04f 0000 	mov.w	r0, #0
 80097d8:	f380 8811 	msr	BASEPRI, r0
 80097dc:	bc09      	pop	{r0, r3}
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	6808      	ldr	r0, [r1, #0]
 80097e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e6:	f01e 0f10 	tst.w	lr, #16
 80097ea:	bf08      	it	eq
 80097ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097f0:	f380 8809 	msr	PSP, r0
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst>:
 8009800:	24000b8c 	.word	0x24000b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	607b      	str	r3, [r7, #4]
}
 8009820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009822:	f7fe fed5 	bl	80085d0 <xTaskIncrementTick>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800982c:	4b06      	ldr	r3, [pc, #24]	; (8009848 <xPortSysTickHandler+0x40>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	2300      	movs	r3, #0
 8009836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f383 8811 	msr	BASEPRI, r3
}
 800983e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009850:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009856:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <vPortSetupTimerInterrupt+0x38>)
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800985c:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <vPortSetupTimerInterrupt+0x3c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a0a      	ldr	r2, [pc, #40]	; (800988c <vPortSetupTimerInterrupt+0x40>)
 8009862:	fba2 2303 	umull	r2, r3, r2, r3
 8009866:	099b      	lsrs	r3, r3, #6
 8009868:	4a09      	ldr	r2, [pc, #36]	; (8009890 <vPortSetupTimerInterrupt+0x44>)
 800986a:	3b01      	subs	r3, #1
 800986c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800986e:	4b04      	ldr	r3, [pc, #16]	; (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009870:	2207      	movs	r2, #7
 8009872:	601a      	str	r2, [r3, #0]
}
 8009874:	bf00      	nop
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	e000e010 	.word	0xe000e010
 8009884:	e000e018 	.word	0xe000e018
 8009888:	24000000 	.word	0x24000000
 800988c:	10624dd3 	.word	0x10624dd3
 8009890:	e000e014 	.word	0xe000e014

08009894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009894:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80098a4 <vPortEnableVFP+0x10>
 8009898:	6801      	ldr	r1, [r0, #0]
 800989a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800989e:	6001      	str	r1, [r0, #0]
 80098a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098a2:	bf00      	nop
 80098a4:	e000ed88 	.word	0xe000ed88

080098a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ae:	f3ef 8305 	mrs	r3, IPSR
 80098b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b0f      	cmp	r3, #15
 80098b8:	d914      	bls.n	80098e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098ba:	4a17      	ldr	r2, [pc, #92]	; (8009918 <vPortValidateInterruptPriority+0x70>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098c4:	4b15      	ldr	r3, [pc, #84]	; (800991c <vPortValidateInterruptPriority+0x74>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	7afa      	ldrb	r2, [r7, #11]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d20a      	bcs.n	80098e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	607b      	str	r3, [r7, #4]
}
 80098e0:	bf00      	nop
 80098e2:	e7fe      	b.n	80098e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <vPortValidateInterruptPriority+0x78>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80098ec:	4b0d      	ldr	r3, [pc, #52]	; (8009924 <vPortValidateInterruptPriority+0x7c>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d90a      	bls.n	800990a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80098f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f8:	f383 8811 	msr	BASEPRI, r3
 80098fc:	f3bf 8f6f 	isb	sy
 8009900:	f3bf 8f4f 	dsb	sy
 8009904:	603b      	str	r3, [r7, #0]
}
 8009906:	bf00      	nop
 8009908:	e7fe      	b.n	8009908 <vPortValidateInterruptPriority+0x60>
	}
 800990a:	bf00      	nop
 800990c:	3714      	adds	r7, #20
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr
 8009916:	bf00      	nop
 8009918:	e000e3f0 	.word	0xe000e3f0
 800991c:	240011b8 	.word	0x240011b8
 8009920:	e000ed0c 	.word	0xe000ed0c
 8009924:	240011bc 	.word	0x240011bc

08009928 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009930:	2300      	movs	r3, #0
 8009932:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009934:	f7fe fd90 	bl	8008458 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009938:	4b5b      	ldr	r3, [pc, #364]	; (8009aa8 <pvPortMalloc+0x180>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d101      	bne.n	8009944 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009940:	f000 f920 	bl	8009b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009944:	4b59      	ldr	r3, [pc, #356]	; (8009aac <pvPortMalloc+0x184>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4013      	ands	r3, r2
 800994c:	2b00      	cmp	r3, #0
 800994e:	f040 8093 	bne.w	8009a78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d01d      	beq.n	8009994 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009958:	2208      	movs	r2, #8
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4413      	add	r3, r2
 800995e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f003 0307 	and.w	r3, r3, #7
 8009966:	2b00      	cmp	r3, #0
 8009968:	d014      	beq.n	8009994 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f023 0307 	bic.w	r3, r3, #7
 8009970:	3308      	adds	r3, #8
 8009972:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f003 0307 	and.w	r3, r3, #7
 800997a:	2b00      	cmp	r3, #0
 800997c:	d00a      	beq.n	8009994 <pvPortMalloc+0x6c>
	__asm volatile
 800997e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009982:	f383 8811 	msr	BASEPRI, r3
 8009986:	f3bf 8f6f 	isb	sy
 800998a:	f3bf 8f4f 	dsb	sy
 800998e:	617b      	str	r3, [r7, #20]
}
 8009990:	bf00      	nop
 8009992:	e7fe      	b.n	8009992 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d06e      	beq.n	8009a78 <pvPortMalloc+0x150>
 800999a:	4b45      	ldr	r3, [pc, #276]	; (8009ab0 <pvPortMalloc+0x188>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	687a      	ldr	r2, [r7, #4]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d869      	bhi.n	8009a78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099a4:	4b43      	ldr	r3, [pc, #268]	; (8009ab4 <pvPortMalloc+0x18c>)
 80099a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099a8:	4b42      	ldr	r3, [pc, #264]	; (8009ab4 <pvPortMalloc+0x18c>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ae:	e004      	b.n	80099ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80099b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d903      	bls.n	80099cc <pvPortMalloc+0xa4>
 80099c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d1f1      	bne.n	80099b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099cc:	4b36      	ldr	r3, [pc, #216]	; (8009aa8 <pvPortMalloc+0x180>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099d2:	429a      	cmp	r2, r3
 80099d4:	d050      	beq.n	8009a78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099d6:	6a3b      	ldr	r3, [r7, #32]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2208      	movs	r2, #8
 80099dc:	4413      	add	r3, r2
 80099de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ea:	685a      	ldr	r2, [r3, #4]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	2308      	movs	r3, #8
 80099f2:	005b      	lsls	r3, r3, #1
 80099f4:	429a      	cmp	r2, r3
 80099f6:	d91f      	bls.n	8009a38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4413      	add	r3, r2
 80099fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	f003 0307 	and.w	r3, r3, #7
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d00a      	beq.n	8009a20 <pvPortMalloc+0xf8>
	__asm volatile
 8009a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0e:	f383 8811 	msr	BASEPRI, r3
 8009a12:	f3bf 8f6f 	isb	sy
 8009a16:	f3bf 8f4f 	dsb	sy
 8009a1a:	613b      	str	r3, [r7, #16]
}
 8009a1c:	bf00      	nop
 8009a1e:	e7fe      	b.n	8009a1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a22:	685a      	ldr	r2, [r3, #4]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	1ad2      	subs	r2, r2, r3
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a32:	69b8      	ldr	r0, [r7, #24]
 8009a34:	f000 f908 	bl	8009c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a38:	4b1d      	ldr	r3, [pc, #116]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	1ad3      	subs	r3, r2, r3
 8009a42:	4a1b      	ldr	r2, [pc, #108]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a46:	4b1a      	ldr	r3, [pc, #104]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <pvPortMalloc+0x190>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	d203      	bcs.n	8009a5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a52:	4b17      	ldr	r3, [pc, #92]	; (8009ab0 <pvPortMalloc+0x188>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <pvPortMalloc+0x190>)
 8009a58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	4b13      	ldr	r3, [pc, #76]	; (8009aac <pvPortMalloc+0x184>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	431a      	orrs	r2, r3
 8009a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a6e:	4b13      	ldr	r3, [pc, #76]	; (8009abc <pvPortMalloc+0x194>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3301      	adds	r3, #1
 8009a74:	4a11      	ldr	r2, [pc, #68]	; (8009abc <pvPortMalloc+0x194>)
 8009a76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a78:	f7fe fcfc 	bl	8008474 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a7c:	69fb      	ldr	r3, [r7, #28]
 8009a7e:	f003 0307 	and.w	r3, r3, #7
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <pvPortMalloc+0x174>
	__asm volatile
 8009a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8a:	f383 8811 	msr	BASEPRI, r3
 8009a8e:	f3bf 8f6f 	isb	sy
 8009a92:	f3bf 8f4f 	dsb	sy
 8009a96:	60fb      	str	r3, [r7, #12]
}
 8009a98:	bf00      	nop
 8009a9a:	e7fe      	b.n	8009a9a <pvPortMalloc+0x172>
	return pvReturn;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3728      	adds	r7, #40	; 0x28
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	24004dc8 	.word	0x24004dc8
 8009aac:	24004ddc 	.word	0x24004ddc
 8009ab0:	24004dcc 	.word	0x24004dcc
 8009ab4:	24004dc0 	.word	0x24004dc0
 8009ab8:	24004dd0 	.word	0x24004dd0
 8009abc:	24004dd4 	.word	0x24004dd4

08009ac0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b086      	sub	sp, #24
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d04d      	beq.n	8009b6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ad2:	2308      	movs	r3, #8
 8009ad4:	425b      	negs	r3, r3
 8009ad6:	697a      	ldr	r2, [r7, #20]
 8009ad8:	4413      	add	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ae0:	693b      	ldr	r3, [r7, #16]
 8009ae2:	685a      	ldr	r2, [r3, #4]
 8009ae4:	4b24      	ldr	r3, [pc, #144]	; (8009b78 <vPortFree+0xb8>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	4013      	ands	r3, r2
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d10a      	bne.n	8009b04 <vPortFree+0x44>
	__asm volatile
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	60fb      	str	r3, [r7, #12]
}
 8009b00:	bf00      	nop
 8009b02:	e7fe      	b.n	8009b02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00a      	beq.n	8009b22 <vPortFree+0x62>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60bb      	str	r3, [r7, #8]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	685a      	ldr	r2, [r3, #4]
 8009b26:	4b14      	ldr	r3, [pc, #80]	; (8009b78 <vPortFree+0xb8>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	4013      	ands	r3, r2
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d01e      	beq.n	8009b6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11a      	bne.n	8009b6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	4b0e      	ldr	r3, [pc, #56]	; (8009b78 <vPortFree+0xb8>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	43db      	mvns	r3, r3
 8009b42:	401a      	ands	r2, r3
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b48:	f7fe fc86 	bl	8008458 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <vPortFree+0xbc>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	4413      	add	r3, r2
 8009b56:	4a09      	ldr	r2, [pc, #36]	; (8009b7c <vPortFree+0xbc>)
 8009b58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b5a:	6938      	ldr	r0, [r7, #16]
 8009b5c:	f000 f874 	bl	8009c48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <vPortFree+0xc0>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3301      	adds	r3, #1
 8009b66:	4a06      	ldr	r2, [pc, #24]	; (8009b80 <vPortFree+0xc0>)
 8009b68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b6a:	f7fe fc83 	bl	8008474 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b6e:	bf00      	nop
 8009b70:	3718      	adds	r7, #24
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	24004ddc 	.word	0x24004ddc
 8009b7c:	24004dcc 	.word	0x24004dcc
 8009b80:	24004dd8 	.word	0x24004dd8

08009b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b90:	4b27      	ldr	r3, [pc, #156]	; (8009c30 <prvHeapInit+0xac>)
 8009b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	f003 0307 	and.w	r3, r3, #7
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d00c      	beq.n	8009bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	3307      	adds	r3, #7
 8009ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	f023 0307 	bic.w	r3, r3, #7
 8009baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	4a1f      	ldr	r2, [pc, #124]	; (8009c30 <prvHeapInit+0xac>)
 8009bb4:	4413      	add	r3, r2
 8009bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bbc:	4a1d      	ldr	r2, [pc, #116]	; (8009c34 <prvHeapInit+0xb0>)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bc2:	4b1c      	ldr	r3, [pc, #112]	; (8009c34 <prvHeapInit+0xb0>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	4413      	add	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	1a9b      	subs	r3, r3, r2
 8009bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	4a15      	ldr	r2, [pc, #84]	; (8009c38 <prvHeapInit+0xb4>)
 8009be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009be6:	4b14      	ldr	r3, [pc, #80]	; (8009c38 <prvHeapInit+0xb4>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	2200      	movs	r2, #0
 8009bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bee:	4b12      	ldr	r3, [pc, #72]	; (8009c38 <prvHeapInit+0xb4>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	68fa      	ldr	r2, [r7, #12]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c04:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <prvHeapInit+0xb4>)
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	4a0a      	ldr	r2, [pc, #40]	; (8009c3c <prvHeapInit+0xb8>)
 8009c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	4a09      	ldr	r2, [pc, #36]	; (8009c40 <prvHeapInit+0xbc>)
 8009c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c1c:	4b09      	ldr	r3, [pc, #36]	; (8009c44 <prvHeapInit+0xc0>)
 8009c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009c22:	601a      	str	r2, [r3, #0]
}
 8009c24:	bf00      	nop
 8009c26:	3714      	adds	r7, #20
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr
 8009c30:	240011c0 	.word	0x240011c0
 8009c34:	24004dc0 	.word	0x24004dc0
 8009c38:	24004dc8 	.word	0x24004dc8
 8009c3c:	24004dd0 	.word	0x24004dd0
 8009c40:	24004dcc 	.word	0x24004dcc
 8009c44:	24004ddc 	.word	0x24004ddc

08009c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c50:	4b28      	ldr	r3, [pc, #160]	; (8009cf4 <prvInsertBlockIntoFreeList+0xac>)
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	e002      	b.n	8009c5c <prvInsertBlockIntoFreeList+0x14>
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	60fb      	str	r3, [r7, #12]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	687a      	ldr	r2, [r7, #4]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	d8f7      	bhi.n	8009c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	68ba      	ldr	r2, [r7, #8]
 8009c70:	4413      	add	r3, r2
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	429a      	cmp	r2, r3
 8009c76:	d108      	bne.n	8009c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	685b      	ldr	r3, [r3, #4]
 8009c80:	441a      	add	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	68ba      	ldr	r2, [r7, #8]
 8009c94:	441a      	add	r2, r3
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d118      	bne.n	8009cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	4b15      	ldr	r3, [pc, #84]	; (8009cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d00d      	beq.n	8009cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	685a      	ldr	r2, [r3, #4]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	441a      	add	r2, r3
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	601a      	str	r2, [r3, #0]
 8009cc4:	e008      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cc6:	4b0c      	ldr	r3, [pc, #48]	; (8009cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	601a      	str	r2, [r3, #0]
 8009cce:	e003      	b.n	8009cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681a      	ldr	r2, [r3, #0]
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009cd8:	68fa      	ldr	r2, [r7, #12]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d002      	beq.n	8009ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ce6:	bf00      	nop
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	24004dc0 	.word	0x24004dc0
 8009cf8:	24004dc8 	.word	0x24004dc8

08009cfc <__errno>:
 8009cfc:	4b01      	ldr	r3, [pc, #4]	; (8009d04 <__errno+0x8>)
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	4770      	bx	lr
 8009d02:	bf00      	nop
 8009d04:	24000014 	.word	0x24000014

08009d08 <__libc_init_array>:
 8009d08:	b570      	push	{r4, r5, r6, lr}
 8009d0a:	4d0d      	ldr	r5, [pc, #52]	; (8009d40 <__libc_init_array+0x38>)
 8009d0c:	4c0d      	ldr	r4, [pc, #52]	; (8009d44 <__libc_init_array+0x3c>)
 8009d0e:	1b64      	subs	r4, r4, r5
 8009d10:	10a4      	asrs	r4, r4, #2
 8009d12:	2600      	movs	r6, #0
 8009d14:	42a6      	cmp	r6, r4
 8009d16:	d109      	bne.n	8009d2c <__libc_init_array+0x24>
 8009d18:	4d0b      	ldr	r5, [pc, #44]	; (8009d48 <__libc_init_array+0x40>)
 8009d1a:	4c0c      	ldr	r4, [pc, #48]	; (8009d4c <__libc_init_array+0x44>)
 8009d1c:	f000 f99e 	bl	800a05c <_init>
 8009d20:	1b64      	subs	r4, r4, r5
 8009d22:	10a4      	asrs	r4, r4, #2
 8009d24:	2600      	movs	r6, #0
 8009d26:	42a6      	cmp	r6, r4
 8009d28:	d105      	bne.n	8009d36 <__libc_init_array+0x2e>
 8009d2a:	bd70      	pop	{r4, r5, r6, pc}
 8009d2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d30:	4798      	blx	r3
 8009d32:	3601      	adds	r6, #1
 8009d34:	e7ee      	b.n	8009d14 <__libc_init_array+0xc>
 8009d36:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d3a:	4798      	blx	r3
 8009d3c:	3601      	adds	r6, #1
 8009d3e:	e7f2      	b.n	8009d26 <__libc_init_array+0x1e>
 8009d40:	0800a1b8 	.word	0x0800a1b8
 8009d44:	0800a1b8 	.word	0x0800a1b8
 8009d48:	0800a1b8 	.word	0x0800a1b8
 8009d4c:	0800a1bc 	.word	0x0800a1bc

08009d50 <__retarget_lock_acquire_recursive>:
 8009d50:	4770      	bx	lr

08009d52 <__retarget_lock_release_recursive>:
 8009d52:	4770      	bx	lr

08009d54 <malloc>:
 8009d54:	4b02      	ldr	r3, [pc, #8]	; (8009d60 <malloc+0xc>)
 8009d56:	4601      	mov	r1, r0
 8009d58:	6818      	ldr	r0, [r3, #0]
 8009d5a:	f000 b885 	b.w	8009e68 <_malloc_r>
 8009d5e:	bf00      	nop
 8009d60:	24000014 	.word	0x24000014

08009d64 <memcpy>:
 8009d64:	440a      	add	r2, r1
 8009d66:	4291      	cmp	r1, r2
 8009d68:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d6c:	d100      	bne.n	8009d70 <memcpy+0xc>
 8009d6e:	4770      	bx	lr
 8009d70:	b510      	push	{r4, lr}
 8009d72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d7a:	4291      	cmp	r1, r2
 8009d7c:	d1f9      	bne.n	8009d72 <memcpy+0xe>
 8009d7e:	bd10      	pop	{r4, pc}

08009d80 <memset>:
 8009d80:	4402      	add	r2, r0
 8009d82:	4603      	mov	r3, r0
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d100      	bne.n	8009d8a <memset+0xa>
 8009d88:	4770      	bx	lr
 8009d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d8e:	e7f9      	b.n	8009d84 <memset+0x4>

08009d90 <_free_r>:
 8009d90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009d92:	2900      	cmp	r1, #0
 8009d94:	d044      	beq.n	8009e20 <_free_r+0x90>
 8009d96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d9a:	9001      	str	r0, [sp, #4]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	f1a1 0404 	sub.w	r4, r1, #4
 8009da2:	bfb8      	it	lt
 8009da4:	18e4      	addlt	r4, r4, r3
 8009da6:	f000 f94d 	bl	800a044 <__malloc_lock>
 8009daa:	4a1e      	ldr	r2, [pc, #120]	; (8009e24 <_free_r+0x94>)
 8009dac:	9801      	ldr	r0, [sp, #4]
 8009dae:	6813      	ldr	r3, [r2, #0]
 8009db0:	b933      	cbnz	r3, 8009dc0 <_free_r+0x30>
 8009db2:	6063      	str	r3, [r4, #4]
 8009db4:	6014      	str	r4, [r2, #0]
 8009db6:	b003      	add	sp, #12
 8009db8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009dbc:	f000 b948 	b.w	800a050 <__malloc_unlock>
 8009dc0:	42a3      	cmp	r3, r4
 8009dc2:	d908      	bls.n	8009dd6 <_free_r+0x46>
 8009dc4:	6825      	ldr	r5, [r4, #0]
 8009dc6:	1961      	adds	r1, r4, r5
 8009dc8:	428b      	cmp	r3, r1
 8009dca:	bf01      	itttt	eq
 8009dcc:	6819      	ldreq	r1, [r3, #0]
 8009dce:	685b      	ldreq	r3, [r3, #4]
 8009dd0:	1949      	addeq	r1, r1, r5
 8009dd2:	6021      	streq	r1, [r4, #0]
 8009dd4:	e7ed      	b.n	8009db2 <_free_r+0x22>
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	685b      	ldr	r3, [r3, #4]
 8009dda:	b10b      	cbz	r3, 8009de0 <_free_r+0x50>
 8009ddc:	42a3      	cmp	r3, r4
 8009dde:	d9fa      	bls.n	8009dd6 <_free_r+0x46>
 8009de0:	6811      	ldr	r1, [r2, #0]
 8009de2:	1855      	adds	r5, r2, r1
 8009de4:	42a5      	cmp	r5, r4
 8009de6:	d10b      	bne.n	8009e00 <_free_r+0x70>
 8009de8:	6824      	ldr	r4, [r4, #0]
 8009dea:	4421      	add	r1, r4
 8009dec:	1854      	adds	r4, r2, r1
 8009dee:	42a3      	cmp	r3, r4
 8009df0:	6011      	str	r1, [r2, #0]
 8009df2:	d1e0      	bne.n	8009db6 <_free_r+0x26>
 8009df4:	681c      	ldr	r4, [r3, #0]
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	6053      	str	r3, [r2, #4]
 8009dfa:	4421      	add	r1, r4
 8009dfc:	6011      	str	r1, [r2, #0]
 8009dfe:	e7da      	b.n	8009db6 <_free_r+0x26>
 8009e00:	d902      	bls.n	8009e08 <_free_r+0x78>
 8009e02:	230c      	movs	r3, #12
 8009e04:	6003      	str	r3, [r0, #0]
 8009e06:	e7d6      	b.n	8009db6 <_free_r+0x26>
 8009e08:	6825      	ldr	r5, [r4, #0]
 8009e0a:	1961      	adds	r1, r4, r5
 8009e0c:	428b      	cmp	r3, r1
 8009e0e:	bf04      	itt	eq
 8009e10:	6819      	ldreq	r1, [r3, #0]
 8009e12:	685b      	ldreq	r3, [r3, #4]
 8009e14:	6063      	str	r3, [r4, #4]
 8009e16:	bf04      	itt	eq
 8009e18:	1949      	addeq	r1, r1, r5
 8009e1a:	6021      	streq	r1, [r4, #0]
 8009e1c:	6054      	str	r4, [r2, #4]
 8009e1e:	e7ca      	b.n	8009db6 <_free_r+0x26>
 8009e20:	b003      	add	sp, #12
 8009e22:	bd30      	pop	{r4, r5, pc}
 8009e24:	24004de4 	.word	0x24004de4

08009e28 <sbrk_aligned>:
 8009e28:	b570      	push	{r4, r5, r6, lr}
 8009e2a:	4e0e      	ldr	r6, [pc, #56]	; (8009e64 <sbrk_aligned+0x3c>)
 8009e2c:	460c      	mov	r4, r1
 8009e2e:	6831      	ldr	r1, [r6, #0]
 8009e30:	4605      	mov	r5, r0
 8009e32:	b911      	cbnz	r1, 8009e3a <sbrk_aligned+0x12>
 8009e34:	f000 f8f6 	bl	800a024 <_sbrk_r>
 8009e38:	6030      	str	r0, [r6, #0]
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	f000 f8f1 	bl	800a024 <_sbrk_r>
 8009e42:	1c43      	adds	r3, r0, #1
 8009e44:	d00a      	beq.n	8009e5c <sbrk_aligned+0x34>
 8009e46:	1cc4      	adds	r4, r0, #3
 8009e48:	f024 0403 	bic.w	r4, r4, #3
 8009e4c:	42a0      	cmp	r0, r4
 8009e4e:	d007      	beq.n	8009e60 <sbrk_aligned+0x38>
 8009e50:	1a21      	subs	r1, r4, r0
 8009e52:	4628      	mov	r0, r5
 8009e54:	f000 f8e6 	bl	800a024 <_sbrk_r>
 8009e58:	3001      	adds	r0, #1
 8009e5a:	d101      	bne.n	8009e60 <sbrk_aligned+0x38>
 8009e5c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e60:	4620      	mov	r0, r4
 8009e62:	bd70      	pop	{r4, r5, r6, pc}
 8009e64:	24004de8 	.word	0x24004de8

08009e68 <_malloc_r>:
 8009e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e6c:	1ccd      	adds	r5, r1, #3
 8009e6e:	f025 0503 	bic.w	r5, r5, #3
 8009e72:	3508      	adds	r5, #8
 8009e74:	2d0c      	cmp	r5, #12
 8009e76:	bf38      	it	cc
 8009e78:	250c      	movcc	r5, #12
 8009e7a:	2d00      	cmp	r5, #0
 8009e7c:	4607      	mov	r7, r0
 8009e7e:	db01      	blt.n	8009e84 <_malloc_r+0x1c>
 8009e80:	42a9      	cmp	r1, r5
 8009e82:	d905      	bls.n	8009e90 <_malloc_r+0x28>
 8009e84:	230c      	movs	r3, #12
 8009e86:	603b      	str	r3, [r7, #0]
 8009e88:	2600      	movs	r6, #0
 8009e8a:	4630      	mov	r0, r6
 8009e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e90:	4e2e      	ldr	r6, [pc, #184]	; (8009f4c <_malloc_r+0xe4>)
 8009e92:	f000 f8d7 	bl	800a044 <__malloc_lock>
 8009e96:	6833      	ldr	r3, [r6, #0]
 8009e98:	461c      	mov	r4, r3
 8009e9a:	bb34      	cbnz	r4, 8009eea <_malloc_r+0x82>
 8009e9c:	4629      	mov	r1, r5
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f7ff ffc2 	bl	8009e28 <sbrk_aligned>
 8009ea4:	1c43      	adds	r3, r0, #1
 8009ea6:	4604      	mov	r4, r0
 8009ea8:	d14d      	bne.n	8009f46 <_malloc_r+0xde>
 8009eaa:	6834      	ldr	r4, [r6, #0]
 8009eac:	4626      	mov	r6, r4
 8009eae:	2e00      	cmp	r6, #0
 8009eb0:	d140      	bne.n	8009f34 <_malloc_r+0xcc>
 8009eb2:	6823      	ldr	r3, [r4, #0]
 8009eb4:	4631      	mov	r1, r6
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	eb04 0803 	add.w	r8, r4, r3
 8009ebc:	f000 f8b2 	bl	800a024 <_sbrk_r>
 8009ec0:	4580      	cmp	r8, r0
 8009ec2:	d13a      	bne.n	8009f3a <_malloc_r+0xd2>
 8009ec4:	6821      	ldr	r1, [r4, #0]
 8009ec6:	3503      	adds	r5, #3
 8009ec8:	1a6d      	subs	r5, r5, r1
 8009eca:	f025 0503 	bic.w	r5, r5, #3
 8009ece:	3508      	adds	r5, #8
 8009ed0:	2d0c      	cmp	r5, #12
 8009ed2:	bf38      	it	cc
 8009ed4:	250c      	movcc	r5, #12
 8009ed6:	4629      	mov	r1, r5
 8009ed8:	4638      	mov	r0, r7
 8009eda:	f7ff ffa5 	bl	8009e28 <sbrk_aligned>
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d02b      	beq.n	8009f3a <_malloc_r+0xd2>
 8009ee2:	6823      	ldr	r3, [r4, #0]
 8009ee4:	442b      	add	r3, r5
 8009ee6:	6023      	str	r3, [r4, #0]
 8009ee8:	e00e      	b.n	8009f08 <_malloc_r+0xa0>
 8009eea:	6822      	ldr	r2, [r4, #0]
 8009eec:	1b52      	subs	r2, r2, r5
 8009eee:	d41e      	bmi.n	8009f2e <_malloc_r+0xc6>
 8009ef0:	2a0b      	cmp	r2, #11
 8009ef2:	d916      	bls.n	8009f22 <_malloc_r+0xba>
 8009ef4:	1961      	adds	r1, r4, r5
 8009ef6:	42a3      	cmp	r3, r4
 8009ef8:	6025      	str	r5, [r4, #0]
 8009efa:	bf18      	it	ne
 8009efc:	6059      	strne	r1, [r3, #4]
 8009efe:	6863      	ldr	r3, [r4, #4]
 8009f00:	bf08      	it	eq
 8009f02:	6031      	streq	r1, [r6, #0]
 8009f04:	5162      	str	r2, [r4, r5]
 8009f06:	604b      	str	r3, [r1, #4]
 8009f08:	4638      	mov	r0, r7
 8009f0a:	f104 060b 	add.w	r6, r4, #11
 8009f0e:	f000 f89f 	bl	800a050 <__malloc_unlock>
 8009f12:	f026 0607 	bic.w	r6, r6, #7
 8009f16:	1d23      	adds	r3, r4, #4
 8009f18:	1af2      	subs	r2, r6, r3
 8009f1a:	d0b6      	beq.n	8009e8a <_malloc_r+0x22>
 8009f1c:	1b9b      	subs	r3, r3, r6
 8009f1e:	50a3      	str	r3, [r4, r2]
 8009f20:	e7b3      	b.n	8009e8a <_malloc_r+0x22>
 8009f22:	6862      	ldr	r2, [r4, #4]
 8009f24:	42a3      	cmp	r3, r4
 8009f26:	bf0c      	ite	eq
 8009f28:	6032      	streq	r2, [r6, #0]
 8009f2a:	605a      	strne	r2, [r3, #4]
 8009f2c:	e7ec      	b.n	8009f08 <_malloc_r+0xa0>
 8009f2e:	4623      	mov	r3, r4
 8009f30:	6864      	ldr	r4, [r4, #4]
 8009f32:	e7b2      	b.n	8009e9a <_malloc_r+0x32>
 8009f34:	4634      	mov	r4, r6
 8009f36:	6876      	ldr	r6, [r6, #4]
 8009f38:	e7b9      	b.n	8009eae <_malloc_r+0x46>
 8009f3a:	230c      	movs	r3, #12
 8009f3c:	603b      	str	r3, [r7, #0]
 8009f3e:	4638      	mov	r0, r7
 8009f40:	f000 f886 	bl	800a050 <__malloc_unlock>
 8009f44:	e7a1      	b.n	8009e8a <_malloc_r+0x22>
 8009f46:	6025      	str	r5, [r4, #0]
 8009f48:	e7de      	b.n	8009f08 <_malloc_r+0xa0>
 8009f4a:	bf00      	nop
 8009f4c:	24004de4 	.word	0x24004de4

08009f50 <cleanup_glue>:
 8009f50:	b538      	push	{r3, r4, r5, lr}
 8009f52:	460c      	mov	r4, r1
 8009f54:	6809      	ldr	r1, [r1, #0]
 8009f56:	4605      	mov	r5, r0
 8009f58:	b109      	cbz	r1, 8009f5e <cleanup_glue+0xe>
 8009f5a:	f7ff fff9 	bl	8009f50 <cleanup_glue>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	4628      	mov	r0, r5
 8009f62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f66:	f7ff bf13 	b.w	8009d90 <_free_r>
	...

08009f6c <_reclaim_reent>:
 8009f6c:	4b2c      	ldr	r3, [pc, #176]	; (800a020 <_reclaim_reent+0xb4>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4283      	cmp	r3, r0
 8009f72:	b570      	push	{r4, r5, r6, lr}
 8009f74:	4604      	mov	r4, r0
 8009f76:	d051      	beq.n	800a01c <_reclaim_reent+0xb0>
 8009f78:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009f7a:	b143      	cbz	r3, 8009f8e <_reclaim_reent+0x22>
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d14a      	bne.n	800a018 <_reclaim_reent+0xac>
 8009f82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f84:	6819      	ldr	r1, [r3, #0]
 8009f86:	b111      	cbz	r1, 8009f8e <_reclaim_reent+0x22>
 8009f88:	4620      	mov	r0, r4
 8009f8a:	f7ff ff01 	bl	8009d90 <_free_r>
 8009f8e:	6961      	ldr	r1, [r4, #20]
 8009f90:	b111      	cbz	r1, 8009f98 <_reclaim_reent+0x2c>
 8009f92:	4620      	mov	r0, r4
 8009f94:	f7ff fefc 	bl	8009d90 <_free_r>
 8009f98:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009f9a:	b111      	cbz	r1, 8009fa2 <_reclaim_reent+0x36>
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	f7ff fef7 	bl	8009d90 <_free_r>
 8009fa2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009fa4:	b111      	cbz	r1, 8009fac <_reclaim_reent+0x40>
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	f7ff fef2 	bl	8009d90 <_free_r>
 8009fac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009fae:	b111      	cbz	r1, 8009fb6 <_reclaim_reent+0x4a>
 8009fb0:	4620      	mov	r0, r4
 8009fb2:	f7ff feed 	bl	8009d90 <_free_r>
 8009fb6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009fb8:	b111      	cbz	r1, 8009fc0 <_reclaim_reent+0x54>
 8009fba:	4620      	mov	r0, r4
 8009fbc:	f7ff fee8 	bl	8009d90 <_free_r>
 8009fc0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009fc2:	b111      	cbz	r1, 8009fca <_reclaim_reent+0x5e>
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7ff fee3 	bl	8009d90 <_free_r>
 8009fca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009fcc:	b111      	cbz	r1, 8009fd4 <_reclaim_reent+0x68>
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f7ff fede 	bl	8009d90 <_free_r>
 8009fd4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009fd6:	b111      	cbz	r1, 8009fde <_reclaim_reent+0x72>
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f7ff fed9 	bl	8009d90 <_free_r>
 8009fde:	69a3      	ldr	r3, [r4, #24]
 8009fe0:	b1e3      	cbz	r3, 800a01c <_reclaim_reent+0xb0>
 8009fe2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009fe4:	4620      	mov	r0, r4
 8009fe6:	4798      	blx	r3
 8009fe8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009fea:	b1b9      	cbz	r1, 800a01c <_reclaim_reent+0xb0>
 8009fec:	4620      	mov	r0, r4
 8009fee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009ff2:	f7ff bfad 	b.w	8009f50 <cleanup_glue>
 8009ff6:	5949      	ldr	r1, [r1, r5]
 8009ff8:	b941      	cbnz	r1, 800a00c <_reclaim_reent+0xa0>
 8009ffa:	3504      	adds	r5, #4
 8009ffc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ffe:	2d80      	cmp	r5, #128	; 0x80
 800a000:	68d9      	ldr	r1, [r3, #12]
 800a002:	d1f8      	bne.n	8009ff6 <_reclaim_reent+0x8a>
 800a004:	4620      	mov	r0, r4
 800a006:	f7ff fec3 	bl	8009d90 <_free_r>
 800a00a:	e7ba      	b.n	8009f82 <_reclaim_reent+0x16>
 800a00c:	680e      	ldr	r6, [r1, #0]
 800a00e:	4620      	mov	r0, r4
 800a010:	f7ff febe 	bl	8009d90 <_free_r>
 800a014:	4631      	mov	r1, r6
 800a016:	e7ef      	b.n	8009ff8 <_reclaim_reent+0x8c>
 800a018:	2500      	movs	r5, #0
 800a01a:	e7ef      	b.n	8009ffc <_reclaim_reent+0x90>
 800a01c:	bd70      	pop	{r4, r5, r6, pc}
 800a01e:	bf00      	nop
 800a020:	24000014 	.word	0x24000014

0800a024 <_sbrk_r>:
 800a024:	b538      	push	{r3, r4, r5, lr}
 800a026:	4d06      	ldr	r5, [pc, #24]	; (800a040 <_sbrk_r+0x1c>)
 800a028:	2300      	movs	r3, #0
 800a02a:	4604      	mov	r4, r0
 800a02c:	4608      	mov	r0, r1
 800a02e:	602b      	str	r3, [r5, #0]
 800a030:	f7f6 fff0 	bl	8001014 <_sbrk>
 800a034:	1c43      	adds	r3, r0, #1
 800a036:	d102      	bne.n	800a03e <_sbrk_r+0x1a>
 800a038:	682b      	ldr	r3, [r5, #0]
 800a03a:	b103      	cbz	r3, 800a03e <_sbrk_r+0x1a>
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	bd38      	pop	{r3, r4, r5, pc}
 800a040:	24004dec 	.word	0x24004dec

0800a044 <__malloc_lock>:
 800a044:	4801      	ldr	r0, [pc, #4]	; (800a04c <__malloc_lock+0x8>)
 800a046:	f7ff be83 	b.w	8009d50 <__retarget_lock_acquire_recursive>
 800a04a:	bf00      	nop
 800a04c:	24004de0 	.word	0x24004de0

0800a050 <__malloc_unlock>:
 800a050:	4801      	ldr	r0, [pc, #4]	; (800a058 <__malloc_unlock+0x8>)
 800a052:	f7ff be7e 	b.w	8009d52 <__retarget_lock_release_recursive>
 800a056:	bf00      	nop
 800a058:	24004de0 	.word	0x24004de0

0800a05c <_init>:
 800a05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05e:	bf00      	nop
 800a060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a062:	bc08      	pop	{r3}
 800a064:	469e      	mov	lr, r3
 800a066:	4770      	bx	lr

0800a068 <_fini>:
 800a068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a06a:	bf00      	nop
 800a06c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a06e:	bc08      	pop	{r3}
 800a070:	469e      	mov	lr, r3
 800a072:	4770      	bx	lr
